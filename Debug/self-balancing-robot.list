
self-balancing-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800bff0  0800bff0  0000cff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3d4  0800c3d4  0000e590  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c3d4  0800c3d4  0000d3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3dc  0800c3dc  0000e590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3dc  0800c3dc  0000d3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c3e0  0800c3e0  0000d3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000590  20000000  0800c3e4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  20000590  0800c974  0000e590  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c6c  0800c974  0000ec6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e590  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b355  00000000  00000000  0000e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044ba  00000000  00000000  00029915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0002ddd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001149  00000000  00000000  0002f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027af9  00000000  00000000  00030551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000200bd  00000000  00000000  0005804a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e52d3  00000000  00000000  00078107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d3da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c84  00000000  00000000  0015d420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001640a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000590 	.word	0x20000590
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bfd8 	.word	0x0800bfd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000594 	.word	0x20000594
 800020c:	0800bfd8 	.word	0x0800bfd8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f000 b988 	b.w	8001010 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	468e      	mov	lr, r1
 8000d20:	4604      	mov	r4, r0
 8000d22:	4688      	mov	r8, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d14a      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4617      	mov	r7, r2
 8000d2c:	d962      	bls.n	8000df4 <__udivmoddi4+0xdc>
 8000d2e:	fab2 f682 	clz	r6, r2
 8000d32:	b14e      	cbz	r6, 8000d48 <__udivmoddi4+0x30>
 8000d34:	f1c6 0320 	rsb	r3, r6, #32
 8000d38:	fa01 f806 	lsl.w	r8, r1, r6
 8000d3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d40:	40b7      	lsls	r7, r6
 8000d42:	ea43 0808 	orr.w	r8, r3, r8
 8000d46:	40b4      	lsls	r4, r6
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d54:	0c23      	lsrs	r3, r4, #16
 8000d56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x62>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d6c:	f080 80ea 	bcs.w	8000f44 <__udivmoddi4+0x22c>
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f240 80e7 	bls.w	8000f44 <__udivmoddi4+0x22c>
 8000d76:	3902      	subs	r1, #2
 8000d78:	443b      	add	r3, r7
 8000d7a:	1a9a      	subs	r2, r3, r2
 8000d7c:	b2a3      	uxth	r3, r4
 8000d7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d8e:	459c      	cmp	ip, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x8e>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d98:	f080 80d6 	bcs.w	8000f48 <__udivmoddi4+0x230>
 8000d9c:	459c      	cmp	ip, r3
 8000d9e:	f240 80d3 	bls.w	8000f48 <__udivmoddi4+0x230>
 8000da2:	443b      	add	r3, r7
 8000da4:	3802      	subs	r0, #2
 8000da6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000daa:	eba3 030c 	sub.w	r3, r3, ip
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11d      	cbz	r5, 8000dba <__udivmoddi4+0xa2>
 8000db2:	40f3      	lsrs	r3, r6
 8000db4:	2200      	movs	r2, #0
 8000db6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d905      	bls.n	8000dce <__udivmoddi4+0xb6>
 8000dc2:	b10d      	cbz	r5, 8000dc8 <__udivmoddi4+0xb0>
 8000dc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e7f5      	b.n	8000dba <__udivmoddi4+0xa2>
 8000dce:	fab3 f183 	clz	r1, r3
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d146      	bne.n	8000e64 <__udivmoddi4+0x14c>
 8000dd6:	4573      	cmp	r3, lr
 8000dd8:	d302      	bcc.n	8000de0 <__udivmoddi4+0xc8>
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	f200 8105 	bhi.w	8000fea <__udivmoddi4+0x2d2>
 8000de0:	1a84      	subs	r4, r0, r2
 8000de2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	4690      	mov	r8, r2
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d0e5      	beq.n	8000dba <__udivmoddi4+0xa2>
 8000dee:	e9c5 4800 	strd	r4, r8, [r5]
 8000df2:	e7e2      	b.n	8000dba <__udivmoddi4+0xa2>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f000 8090 	beq.w	8000f1a <__udivmoddi4+0x202>
 8000dfa:	fab2 f682 	clz	r6, r2
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f040 80a4 	bne.w	8000f4c <__udivmoddi4+0x234>
 8000e04:	1a8a      	subs	r2, r1, r2
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	b280      	uxth	r0, r0
 8000e0e:	b2bc      	uxth	r4, r7
 8000e10:	2101      	movs	r1, #1
 8000e12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x11e>
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x11c>
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	f200 80e0 	bhi.w	8000ff4 <__udivmoddi4+0x2dc>
 8000e34:	46c4      	mov	ip, r8
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e44:	fb02 f404 	mul.w	r4, r2, r4
 8000e48:	429c      	cmp	r4, r3
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x144>
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x142>
 8000e54:	429c      	cmp	r4, r3
 8000e56:	f200 80ca 	bhi.w	8000fee <__udivmoddi4+0x2d6>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	1b1b      	subs	r3, r3, r4
 8000e5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e62:	e7a5      	b.n	8000db0 <__udivmoddi4+0x98>
 8000e64:	f1c1 0620 	rsb	r6, r1, #32
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	fa0e f401 	lsl.w	r4, lr, r1
 8000e74:	fa20 f306 	lsr.w	r3, r0, r6
 8000e78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e80:	4323      	orrs	r3, r4
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	fa1f fc87 	uxth.w	ip, r7
 8000e8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e8e:	0c1c      	lsrs	r4, r3, #16
 8000e90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea2:	d909      	bls.n	8000eb8 <__udivmoddi4+0x1a0>
 8000ea4:	193c      	adds	r4, r7, r4
 8000ea6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eaa:	f080 809c 	bcs.w	8000fe6 <__udivmoddi4+0x2ce>
 8000eae:	45a6      	cmp	lr, r4
 8000eb0:	f240 8099 	bls.w	8000fe6 <__udivmoddi4+0x2ce>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	eba4 040e 	sub.w	r4, r4, lr
 8000ebc:	fa1f fe83 	uxth.w	lr, r3
 8000ec0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ecc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed0:	45a4      	cmp	ip, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x1ce>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000eda:	f080 8082 	bcs.w	8000fe2 <__udivmoddi4+0x2ca>
 8000ede:	45a4      	cmp	ip, r4
 8000ee0:	d97f      	bls.n	8000fe2 <__udivmoddi4+0x2ca>
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	443c      	add	r4, r7
 8000ee6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eea:	eba4 040c 	sub.w	r4, r4, ip
 8000eee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ef2:	4564      	cmp	r4, ip
 8000ef4:	4673      	mov	r3, lr
 8000ef6:	46e1      	mov	r9, ip
 8000ef8:	d362      	bcc.n	8000fc0 <__udivmoddi4+0x2a8>
 8000efa:	d05f      	beq.n	8000fbc <__udivmoddi4+0x2a4>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x1fe>
 8000efe:	ebb8 0203 	subs.w	r2, r8, r3
 8000f02:	eb64 0409 	sbc.w	r4, r4, r9
 8000f06:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f0e:	431e      	orrs	r6, r3
 8000f10:	40cc      	lsrs	r4, r1
 8000f12:	e9c5 6400 	strd	r6, r4, [r5]
 8000f16:	2100      	movs	r1, #0
 8000f18:	e74f      	b.n	8000dba <__udivmoddi4+0xa2>
 8000f1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f1e:	0c01      	lsrs	r1, r0, #16
 8000f20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f24:	b280      	uxth	r0, r0
 8000f26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	463c      	mov	r4, r7
 8000f30:	46b8      	mov	r8, r7
 8000f32:	46be      	mov	lr, r7
 8000f34:	2620      	movs	r6, #32
 8000f36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f3a:	eba2 0208 	sub.w	r2, r2, r8
 8000f3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f42:	e766      	b.n	8000e12 <__udivmoddi4+0xfa>
 8000f44:	4601      	mov	r1, r0
 8000f46:	e718      	b.n	8000d7a <__udivmoddi4+0x62>
 8000f48:	4610      	mov	r0, r2
 8000f4a:	e72c      	b.n	8000da6 <__udivmoddi4+0x8e>
 8000f4c:	f1c6 0220 	rsb	r2, r6, #32
 8000f50:	fa2e f302 	lsr.w	r3, lr, r2
 8000f54:	40b7      	lsls	r7, r6
 8000f56:	40b1      	lsls	r1, r6
 8000f58:	fa20 f202 	lsr.w	r2, r0, r2
 8000f5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f60:	430a      	orrs	r2, r1
 8000f62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f66:	b2bc      	uxth	r4, r7
 8000f68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f6c:	0c11      	lsrs	r1, r2, #16
 8000f6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f72:	fb08 f904 	mul.w	r9, r8, r4
 8000f76:	40b0      	lsls	r0, r6
 8000f78:	4589      	cmp	r9, r1
 8000f7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f7e:	b280      	uxth	r0, r0
 8000f80:	d93e      	bls.n	8001000 <__udivmoddi4+0x2e8>
 8000f82:	1879      	adds	r1, r7, r1
 8000f84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f88:	d201      	bcs.n	8000f8e <__udivmoddi4+0x276>
 8000f8a:	4589      	cmp	r9, r1
 8000f8c:	d81f      	bhi.n	8000fce <__udivmoddi4+0x2b6>
 8000f8e:	eba1 0109 	sub.w	r1, r1, r9
 8000f92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f96:	fb09 f804 	mul.w	r8, r9, r4
 8000f9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa4:	4542      	cmp	r2, r8
 8000fa6:	d229      	bcs.n	8000ffc <__udivmoddi4+0x2e4>
 8000fa8:	18ba      	adds	r2, r7, r2
 8000faa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fae:	d2c4      	bcs.n	8000f3a <__udivmoddi4+0x222>
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d2c2      	bcs.n	8000f3a <__udivmoddi4+0x222>
 8000fb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fb8:	443a      	add	r2, r7
 8000fba:	e7be      	b.n	8000f3a <__udivmoddi4+0x222>
 8000fbc:	45f0      	cmp	r8, lr
 8000fbe:	d29d      	bcs.n	8000efc <__udivmoddi4+0x1e4>
 8000fc0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fc4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fc8:	3801      	subs	r0, #1
 8000fca:	46e1      	mov	r9, ip
 8000fcc:	e796      	b.n	8000efc <__udivmoddi4+0x1e4>
 8000fce:	eba7 0909 	sub.w	r9, r7, r9
 8000fd2:	4449      	add	r1, r9
 8000fd4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fd8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fdc:	fb09 f804 	mul.w	r8, r9, r4
 8000fe0:	e7db      	b.n	8000f9a <__udivmoddi4+0x282>
 8000fe2:	4673      	mov	r3, lr
 8000fe4:	e77f      	b.n	8000ee6 <__udivmoddi4+0x1ce>
 8000fe6:	4650      	mov	r0, sl
 8000fe8:	e766      	b.n	8000eb8 <__udivmoddi4+0x1a0>
 8000fea:	4608      	mov	r0, r1
 8000fec:	e6fd      	b.n	8000dea <__udivmoddi4+0xd2>
 8000fee:	443b      	add	r3, r7
 8000ff0:	3a02      	subs	r2, #2
 8000ff2:	e733      	b.n	8000e5c <__udivmoddi4+0x144>
 8000ff4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff8:	443b      	add	r3, r7
 8000ffa:	e71c      	b.n	8000e36 <__udivmoddi4+0x11e>
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	e79c      	b.n	8000f3a <__udivmoddi4+0x222>
 8001000:	eba1 0109 	sub.w	r1, r1, r9
 8001004:	46c4      	mov	ip, r8
 8001006:	fbb1 f9fe 	udiv	r9, r1, lr
 800100a:	fb09 f804 	mul.w	r8, r9, r4
 800100e:	e7c4      	b.n	8000f9a <__udivmoddi4+0x282>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001026:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001028:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <MX_ADC1_Init+0x9c>)
 800102a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800102c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <MX_ADC1_Init+0x98>)
 800102e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001032:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001034:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800103a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_ADC1_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001056:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <MX_ADC1_Init+0xa0>)
 8001058:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_ADC1_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001062:	2201      	movs	r2, #1
 8001064:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001070:	2201      	movs	r2, #1
 8001072:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001076:	f003 f859 	bl	800412c <HAL_ADC_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001080:	f000 fb8f 	bl	80017a2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001084:	2309      	movs	r3, #9
 8001086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001088:	2301      	movs	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001096:	f003 fa2b 	bl	80044f0 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010a0:	f000 fb7f 	bl	80017a2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200005ac 	.word	0x200005ac
 80010b0:	40012000 	.word	0x40012000
 80010b4:	0f000001 	.word	0x0f000001

080010b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <HAL_ADC_MspInit+0x7c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d127      	bne.n	800112a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	4a15      	ldr	r2, [pc, #84]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 8001112:	2302      	movs	r3, #2
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001116:	2303      	movs	r3, #3
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	@ (800113c <HAL_ADC_MspInit+0x84>)
 8001126:	f004 f8c1 	bl	80052ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	@ 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40012000 	.word	0x40012000
 8001138:	40023800 	.word	0x40023800
 800113c:	40020400 	.word	0x40020400

08001140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_DMA_Init+0x3c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <MX_DMA_Init+0x3c>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_DMA_Init+0x3c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	200b      	movs	r0, #11
 8001168:	f003 fccb 	bl	8004b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800116c:	200b      	movs	r0, #11
 800116e:	f003 fce4 	bl	8004b3a <HAL_NVIC_EnableIRQ>

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b73      	ldr	r3, [pc, #460]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a72      	ldr	r2, [pc, #456]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b70      	ldr	r3, [pc, #448]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a6b      	ldr	r2, [pc, #428]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b69      	ldr	r3, [pc, #420]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b65      	ldr	r3, [pc, #404]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a64      	ldr	r2, [pc, #400]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b62      	ldr	r3, [pc, #392]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a5d      	ldr	r2, [pc, #372]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b57      	ldr	r3, [pc, #348]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a56      	ldr	r2, [pc, #344]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b54      	ldr	r3, [pc, #336]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2130      	movs	r1, #48	@ 0x30
 8001226:	4851      	ldr	r0, [pc, #324]	@ (800136c <MX_GPIO_Init+0x1ec>)
 8001228:	f004 f9ec 	bl	8005604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_DIR_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2111      	movs	r1, #17
 8001230:	484f      	ldr	r0, [pc, #316]	@ (8001370 <MX_GPIO_Init+0x1f0>)
 8001232:	f004 f9e7 	bl	8005604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BTN2_GPIO_Port, LED_BTN2_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800123c:	484d      	ldr	r0, [pc, #308]	@ (8001374 <MX_GPIO_Init+0x1f4>)
 800123e:	f004 f9e1 	bl	8005604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001242:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001248:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4846      	ldr	r0, [pc, #280]	@ (8001374 <MX_GPIO_Init+0x1f4>)
 800125a:	f004 f827 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC6 PC7 PC8 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800125e:	f641 53dd 	movw	r3, #7645	@ 0x1ddd
 8001262:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001264:	2303      	movs	r3, #3
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4840      	ldr	r0, [pc, #256]	@ (8001374 <MX_GPIO_Init+0x1f4>)
 8001274:	f004 f81a 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_DIR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|LD2_Pin;
 8001278:	2330      	movs	r3, #48	@ 0x30
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4837      	ldr	r0, [pc, #220]	@ (800136c <MX_GPIO_Init+0x1ec>)
 8001290:	f004 f80c 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8001294:	2320      	movs	r3, #32
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001298:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4832      	ldr	r0, [pc, #200]	@ (8001374 <MX_GPIO_Init+0x1f4>)
 80012aa:	f003 ffff 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 80012ae:	2301      	movs	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	482a      	ldr	r0, [pc, #168]	@ (8001370 <MX_GPIO_Init+0x1f0>)
 80012c6:	f003 fff1 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80012ca:	f24f 0324 	movw	r3, #61476	@ 0xf024
 80012ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4824      	ldr	r0, [pc, #144]	@ (8001370 <MX_GPIO_Init+0x1f0>)
 80012e0:	f003 ffe4 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BTN2_Pin */
  GPIO_InitStruct.Pin = LED_BTN2_Pin;
 80012e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BTN2_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	481d      	ldr	r0, [pc, #116]	@ (8001374 <MX_GPIO_Init+0x1f4>)
 80012fe:	f003 ffd5 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001302:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 8001306:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001308:	2303      	movs	r3, #3
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4815      	ldr	r0, [pc, #84]	@ (800136c <MX_GPIO_Init+0x1ec>)
 8001318:	f003 ffc8 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800131c:	2304      	movs	r3, #4
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001320:	2303      	movs	r3, #3
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4812      	ldr	r0, [pc, #72]	@ (8001378 <MX_GPIO_Init+0x1f8>)
 8001330:	f003 ffbc 	bl	80052ac <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8001334:	2310      	movs	r3, #16
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4809      	ldr	r0, [pc, #36]	@ (8001370 <MX_GPIO_Init+0x1f0>)
 800134c:	f003 ffae 	bl	80052ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2017      	movs	r0, #23
 8001356:	f003 fbd4 	bl	8004b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800135a:	2017      	movs	r0, #23
 800135c:	f003 fbed 	bl	8004b3a <HAL_NVIC_EnableIRQ>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	@ 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00

0800137c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_I2C1_Init+0x50>)
 8001382:	4a13      	ldr	r2, [pc, #76]	@ (80013d0 <MX_I2C1_Init+0x54>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_I2C1_Init+0x50>)
 8001388:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <MX_I2C1_Init+0x58>)
 800138a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_I2C1_Init+0x50>)
 800139a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800139e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013ba:	f004 f96f 	bl	800569c <HAL_I2C_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013c4:	f000 f9ed 	bl	80017a2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200005f4 	.word	0x200005f4
 80013d0:	40005400 	.word	0x40005400
 80013d4:	000186a0 	.word	0x000186a0

080013d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a30      	ldr	r2, [pc, #192]	@ (80014b8 <HAL_I2C_MspInit+0xe0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d15a      	bne.n	80014b0 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b2f      	ldr	r3, [pc, #188]	@ (80014bc <HAL_I2C_MspInit+0xe4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a2e      	ldr	r2, [pc, #184]	@ (80014bc <HAL_I2C_MspInit+0xe4>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <HAL_I2C_MspInit+0xe4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8001416:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141c:	2312      	movs	r3, #18
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001428:	2304      	movs	r3, #4
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4823      	ldr	r0, [pc, #140]	@ (80014c0 <HAL_I2C_MspInit+0xe8>)
 8001434:	f003 ff3a 	bl	80052ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <HAL_I2C_MspInit+0xe4>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	4a1e      	ldr	r2, [pc, #120]	@ (80014bc <HAL_I2C_MspInit+0xe4>)
 8001442:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001446:	6413      	str	r3, [r2, #64]	@ 0x40
 8001448:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <HAL_I2C_MspInit+0xe4>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001456:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <HAL_I2C_MspInit+0xf0>)
 8001458:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 800145c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001460:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001462:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001470:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001474:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001484:	2200      	movs	r2, #0
 8001486:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001488:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800148e:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001494:	480b      	ldr	r0, [pc, #44]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001496:	f003 fb6b 	bl	8004b70 <HAL_DMA_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80014a0:	f000 f97f 	bl	80017a2 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a07      	ldr	r2, [pc, #28]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 80014a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80014aa:	4a06      	ldr	r2, [pc, #24]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	@ 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40005400 	.word	0x40005400
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020400 	.word	0x40020400
 80014c4:	20000648 	.word	0x20000648
 80014c8:	40026010 	.word	0x40026010

080014cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80014ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00b      	beq.n	800150c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014f4:	e000      	b.n	80014f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f9      	beq.n	80014f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001502:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800150c:	687b      	ldr	r3, [r7, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001522:	f002 fd6d 	bl	8004000 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001526:	f000 f863 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152a:	f7ff fe29 	bl	8001180 <MX_GPIO_Init>
  MX_DMA_Init();
 800152e:	f7ff fe07 	bl	8001140 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001532:	f000 fe9d 	bl	8002270 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001536:	f000 fbe7 	bl	8001d08 <MX_TIM4_Init>
  MX_TIM6_Init();
 800153a:	f000 fc93 	bl	8001e64 <MX_TIM6_Init>
  MX_SPI2_Init();
 800153e:	f000 f937 	bl	80017b0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001542:	f000 fb35 	bl	8001bb0 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001546:	f000 fcc3 	bl	8001ed0 <MX_TIM7_Init>
  MX_TIM3_Init();
 800154a:	f000 fb89 	bl	8001c60 <MX_TIM3_Init>
  MX_TIM5_Init();
 800154e:	f000 fc2f 	bl	8001db0 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001552:	f7ff fd5f 	bl	8001014 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001556:	f7ff ff11 	bl	800137c <MX_I2C1_Init>
  MX_TIM10_Init();
 800155a:	f000 fcef 	bl	8001f3c <MX_TIM10_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(50);
 800155e:	2032      	movs	r0, #50	@ 0x32
 8001560:	f002 fdc0 	bl	80040e4 <HAL_Delay>
  Robot_init();
 8001564:	f001 fad6 	bl	8002b14 <Robot_init>
//  MAX72_Add_Data(&display, &data);

//  display_data_t data2 = {&encoder_l.speed, PRINT_FLOAT, MINIDIGITS, DISPLAY_TYPE_FLOAT, 3};
//  MAX72_Add_Data(&display, &data2);

  display_data_t data3 = {&imu.wz, PRINT_FLOAT, MINIDIGITS, DISPLAY_TYPE_FLOAT, 3};
 8001568:	4a1c      	ldr	r2, [pc, #112]	@ (80015dc <main+0xc0>)
 800156a:	463b      	mov	r3, r7
 800156c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001570:	e883 0003 	stmia.w	r3, {r0, r1}
  MAX72_Add_Data(&display, &data3);
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4819      	ldr	r0, [pc, #100]	@ (80015e0 <main+0xc4>)
 800157a:	f001 fd36 	bl	8002fea <MAX72_Add_Data>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint8_t last_cnt = 255;
	  if (last_cnt != tim6_update_cnt) { // Update every 100ms
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <main+0xc8>)
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <main+0xcc>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d0f9      	beq.n	800157e <main+0x62>
	      last_cnt = tim6_update_cnt;
 800158a:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <main+0xcc>)
 800158c:	781a      	ldrb	r2, [r3, #0]
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <main+0xc8>)
 8001590:	701a      	strb	r2, [r3, #0]

	      //TODO Activate
//	      PowerModule_update_data(&power_module);

	      if (tim6_update_cnt % 5 == 0) { // Update every 500ms
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <main+0xcc>)
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <main+0xd0>)
 8001598:	fba3 1302 	umull	r1, r3, r3, r2
 800159c:	0899      	lsrs	r1, r3, #2
 800159e:	460b      	mov	r3, r1
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d114      	bne.n	80015d6 <main+0xba>
	    	  // Display refresh data
	    	  MAX72_Update_Data(&display);
 80015ac:	480c      	ldr	r0, [pc, #48]	@ (80015e0 <main+0xc4>)
 80015ae:	f001 fd47 	bl	8003040 <MAX72_Update_Data>

	    	  if (tim6_update_cnt % 10 == 0) { // Every 1 second
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <main+0xcc>)
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <main+0xd0>)
 80015b8:	fba3 1302 	umull	r1, r3, r3, r2
 80015bc:	08d9      	lsrs	r1, r3, #3
 80015be:	460b      	mov	r3, r1
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d103      	bne.n	80015d6 <main+0xba>
	    		  MAX72_Change_Data(&display,0);
 80015ce:	2100      	movs	r1, #0
 80015d0:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <main+0xc4>)
 80015d2:	f001 fe31 	bl	8003238 <MAX72_Change_Data>
	    	  }
	      }

	      MAX72_Scroll_Process(); // Process scrolling text
 80015d6:	f002 fb55 	bl	8003c84 <MAX72_Scroll_Process>
  {
 80015da:	e7d0      	b.n	800157e <main+0x62>
 80015dc:	0800bff0 	.word	0x0800bff0
 80015e0:	20000aa0 	.word	0x20000aa0
 80015e4:	20000000 	.word	0x20000000
 80015e8:	200006a8 	.word	0x200006a8
 80015ec:	cccccccd 	.word	0xcccccccd

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b094      	sub	sp, #80	@ 0x50
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	2234      	movs	r2, #52	@ 0x34
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f008 fbda 	bl	8009db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <SystemClock_Config+0xd4>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	4a29      	ldr	r2, [pc, #164]	@ (80016c4 <SystemClock_Config+0xd4>)
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001622:	6413      	str	r3, [r2, #64]	@ 0x40
 8001624:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <SystemClock_Config+0xd4>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001630:	2300      	movs	r3, #0
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <SystemClock_Config+0xd8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800163c:	4a22      	ldr	r2, [pc, #136]	@ (80016c8 <SystemClock_Config+0xd8>)
 800163e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b20      	ldr	r3, [pc, #128]	@ (80016c8 <SystemClock_Config+0xd8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001650:	2302      	movs	r3, #2
 8001652:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001654:	2301      	movs	r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001658:	2310      	movs	r3, #16
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165c:	2302      	movs	r3, #2
 800165e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001660:	2300      	movs	r3, #0
 8001662:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001664:	2310      	movs	r3, #16
 8001666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001668:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800166c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800166e:	2304      	movs	r3, #4
 8001670:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001672:	2302      	movs	r3, #2
 8001674:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001676:	2302      	movs	r3, #2
 8001678:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	4618      	mov	r0, r3
 8001680:	f005 fe4e 	bl	8007320 <HAL_RCC_OscConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800168a:	f000 f88a 	bl	80017a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168e:	230f      	movs	r3, #15
 8001690:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001692:	2302      	movs	r3, #2
 8001694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800169a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	2102      	movs	r1, #2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f005 faee 	bl	8006c8c <HAL_RCC_ClockConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SystemClock_Config+0xca>
  {
    Error_Handler();
 80016b6:	f000 f874 	bl	80017a2 <Error_Handler>
  }
}
 80016ba:	bf00      	nop
 80016bc:	3750      	adds	r7, #80	@ 0x50
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000

080016cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a14      	ldr	r2, [pc, #80]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d10d      	bne.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x2e>
		tim6_update_cnt++;
 80016de:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80016e8:	701a      	strb	r2, [r3, #0]
		if (tim6_update_cnt == 250){
 80016ea:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2bfa      	cmp	r3, #250	@ 0xfa
 80016f0:	d117      	bne.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x56>
			tim6_update_cnt = 0;
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
		speed_control(&stepper_l);
	} else if (htim->Instance == TIM10){
		// Read from IMU
		IMU_ReadData(&imu);
	}
}
 80016f8:	e013      	b.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x56>
	} else if (htim->Instance == TIM7) {
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d106      	bne.n	8001712 <HAL_TIM_PeriodElapsedCallback+0x46>
		speed_control(&stepper_r);
 8001704:	480c      	ldr	r0, [pc, #48]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001706:	f001 fa7b 	bl	8002c00 <speed_control>
		speed_control(&stepper_l);
 800170a:	480c      	ldr	r0, [pc, #48]	@ (800173c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800170c:	f001 fa78 	bl	8002c00 <speed_control>
}
 8001710:	e007      	b.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x56>
	} else if (htim->Instance == TIM10){
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d102      	bne.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x56>
		IMU_ReadData(&imu);
 800171c:	4809      	ldr	r0, [pc, #36]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800171e:	f000 ff81 	bl	8002624 <IMU_ReadData>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40001000 	.word	0x40001000
 8001730:	200006a8 	.word	0x200006a8
 8001734:	40001400 	.word	0x40001400
 8001738:	2000096c 	.word	0x2000096c
 800173c:	200009a4 	.word	0x200009a4
 8001740:	40014400 	.word	0x40014400
 8001744:	200009c8 	.word	0x200009c8

08001748 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_5) {
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	2b20      	cmp	r3, #32
 8001756:	d101      	bne.n	800175c <HAL_GPIO_EXTI_Callback+0x14>
    on_click();
 8001758:	f000 fdfc 	bl	8002354 <on_click>
  }
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	if (hi2c == imu.hi2c) {
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <HAL_I2C_MemRxCpltCallback+0x20>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	429a      	cmp	r2, r3
 8001774:	d102      	bne.n	800177c <HAL_I2C_MemRxCpltCallback+0x18>
		IMU_Compute_Data(&imu);
 8001776:	4803      	ldr	r0, [pc, #12]	@ (8001784 <HAL_I2C_MemRxCpltCallback+0x20>)
 8001778:	f000 ff6a 	bl	8002650 <IMU_Compute_Data>
	}
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200009c8 	.word	0x200009c8

08001788 <__io_putchar>:

int __io_putchar(int ch){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fe9a 	bl	80014cc <ITM_SendChar>
	return ch;
 8001798:	687b      	ldr	r3, [r7, #4]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a6:	b672      	cpsid	i
}
 80017a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017aa:	bf00      	nop
 80017ac:	e7fd      	b.n	80017aa <Error_Handler+0x8>
	...

080017b0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017b4:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <MX_SPI2_Init+0x68>)
 80017b6:	4a19      	ldr	r2, [pc, #100]	@ (800181c <MX_SPI2_Init+0x6c>)
 80017b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ba:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <MX_SPI2_Init+0x68>)
 80017bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <MX_SPI2_Init+0x68>)
 80017c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017c8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <MX_SPI2_Init+0x68>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <MX_SPI2_Init+0x68>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <MX_SPI2_Init+0x68>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_SPI2_Init+0x68>)
 80017de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <MX_SPI2_Init+0x68>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <MX_SPI2_Init+0x68>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <MX_SPI2_Init+0x68>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <MX_SPI2_Init+0x68>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <MX_SPI2_Init+0x68>)
 80017fe:	220a      	movs	r2, #10
 8001800:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MX_SPI2_Init+0x68>)
 8001804:	f006 f82a 	bl	800785c <HAL_SPI_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800180e:	f7ff ffc8 	bl	80017a2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200006ac 	.word	0x200006ac
 800181c:	40003800 	.word	0x40003800

08001820 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a28      	ldr	r2, [pc, #160]	@ (80018e0 <HAL_SPI_MspInit+0xc0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d14a      	bne.n	80018d8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <HAL_SPI_MspInit+0xc4>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	4a26      	ldr	r2, [pc, #152]	@ (80018e4 <HAL_SPI_MspInit+0xc4>)
 800184c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001850:	6413      	str	r3, [r2, #64]	@ 0x40
 8001852:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <HAL_SPI_MspInit+0xc4>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b20      	ldr	r3, [pc, #128]	@ (80018e4 <HAL_SPI_MspInit+0xc4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a1f      	ldr	r2, [pc, #124]	@ (80018e4 <HAL_SPI_MspInit+0xc4>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <HAL_SPI_MspInit+0xc4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_SPI_MspInit+0xc4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a18      	ldr	r2, [pc, #96]	@ (80018e4 <HAL_SPI_MspInit+0xc4>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_SPI_MspInit+0xc4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001896:	2302      	movs	r3, #2
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80018a6:	2307      	movs	r3, #7
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <HAL_SPI_MspInit+0xc8>)
 80018b2:	f003 fcfb 	bl	80052ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 80018b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018c8:	2305      	movs	r3, #5
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	4806      	ldr	r0, [pc, #24]	@ (80018ec <HAL_SPI_MspInit+0xcc>)
 80018d4:	f003 fcea 	bl	80052ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	@ 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40003800 	.word	0x40003800
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020400 	.word	0x40020400

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <HAL_MspInit+0x4c>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	4a0f      	ldr	r2, [pc, #60]	@ (800193c <HAL_MspInit+0x4c>)
 8001900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001904:	6453      	str	r3, [r2, #68]	@ 0x44
 8001906:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HAL_MspInit+0x4c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_MspInit+0x4c>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	4a08      	ldr	r2, [pc, #32]	@ (800193c <HAL_MspInit+0x4c>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001920:	6413      	str	r3, [r2, #64]	@ 0x40
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <HAL_MspInit+0x4c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800192e:	2007      	movs	r0, #7
 8001930:	f003 f8dc 	bl	8004aec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <NMI_Handler+0x4>

08001948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <MemManage_Handler+0x4>

08001958 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <UsageFault_Handler+0x4>

08001968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001996:	f002 fb85 	bl	80040a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <DMA1_Stream0_IRQHandler+0x10>)
 80019a6:	f003 fa0b 	bl	8004dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000648 	.word	0x20000648

080019b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 80019b8:	2020      	movs	r0, #32
 80019ba:	f003 fe57 	bl	800566c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019ca:	f006 fcfd 	bl	80083c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200008b8 	.word	0x200008b8

080019d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <TIM6_DAC_IRQHandler+0x10>)
 80019de:	f006 fcf3 	bl	80083c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000828 	.word	0x20000828

080019ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <TIM7_IRQHandler+0x10>)
 80019f2:	f006 fce9 	bl	80083c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000870 	.word	0x20000870

08001a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return 1;
 8001a04:	2301      	movs	r3, #1
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_kill>:

int _kill(int pid, int sig)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a1a:	f008 f9d5 	bl	8009dc8 <__errno>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2216      	movs	r2, #22
 8001a22:	601a      	str	r2, [r3, #0]
  return -1;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_exit>:

void _exit (int status)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ffe7 	bl	8001a10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a42:	bf00      	nop
 8001a44:	e7fd      	b.n	8001a42 <_exit+0x12>

08001a46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e00a      	b.n	8001a6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a58:	f3af 8000 	nop.w
 8001a5c:	4601      	mov	r1, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	60ba      	str	r2, [r7, #8]
 8001a64:	b2ca      	uxtb	r2, r1
 8001a66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	dbf0      	blt.n	8001a58 <_read+0x12>
  }

  return len;
 8001a76:	687b      	ldr	r3, [r7, #4]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	e009      	b.n	8001aa6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	60ba      	str	r2, [r7, #8]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fe74 	bl	8001788 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	dbf1      	blt.n	8001a92 <_write+0x12>
  }
  return len;
 8001aae:	687b      	ldr	r3, [r7, #4]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_close>:

int _close(int file)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ae0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_isatty>:

int _isatty(int file)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001af8:	2301      	movs	r3, #1
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b28:	4a14      	ldr	r2, [pc, #80]	@ (8001b7c <_sbrk+0x5c>)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <_sbrk+0x60>)
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b34:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <_sbrk+0x64>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	@ (8001b88 <_sbrk+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d207      	bcs.n	8001b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b50:	f008 f93a 	bl	8009dc8 <__errno>
 8001b54:	4603      	mov	r3, r0
 8001b56:	220c      	movs	r2, #12
 8001b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b5e:	e009      	b.n	8001b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b60:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b66:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <_sbrk+0x64>)
 8001b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20020000 	.word	0x20020000
 8001b80:	00000400 	.word	0x00000400
 8001b84:	20000704 	.word	0x20000704
 8001b88:	20000c70 	.word	0x20000c70

08001b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b90:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <SystemInit+0x20>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b96:	4a05      	ldr	r2, [pc, #20]	@ (8001bac <SystemInit+0x20>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	@ 0x28
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]
 8001bce:	615a      	str	r2, [r3, #20]
 8001bd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd2:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <MX_TIM2_Init+0xac>)
 8001bd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bda:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <MX_TIM2_Init+0xac>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <MX_TIM2_Init+0xac>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001be6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <MX_TIM2_Init+0xac>)
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bee:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <MX_TIM2_Init+0xac>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf4:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <MX_TIM2_Init+0xac>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bfa:	4818      	ldr	r0, [pc, #96]	@ (8001c5c <MX_TIM2_Init+0xac>)
 8001bfc:	f006 f998 	bl	8007f30 <HAL_TIM_PWM_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c06:	f7ff fdcc 	bl	80017a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c12:	f107 0320 	add.w	r3, r7, #32
 8001c16:	4619      	mov	r1, r3
 8001c18:	4810      	ldr	r0, [pc, #64]	@ (8001c5c <MX_TIM2_Init+0xac>)
 8001c1a:	f007 f82b 	bl	8008c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c24:	f7ff fdbd 	bl	80017a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c28:	2360      	movs	r3, #96	@ 0x60
 8001c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4807      	ldr	r0, [pc, #28]	@ (8001c5c <MX_TIM2_Init+0xac>)
 8001c40:	f006 fcb2 	bl	80085a8 <HAL_TIM_PWM_ConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001c4a:	f7ff fdaa 	bl	80017a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c4e:	4803      	ldr	r0, [pc, #12]	@ (8001c5c <MX_TIM2_Init+0xac>)
 8001c50:	f000 fab0 	bl	80021b4 <HAL_TIM_MspPostInit>

}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	@ 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000708 	.word	0x20000708

08001c60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	@ 0x30
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	2224      	movs	r2, #36	@ 0x24
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f008 f8a2 	bl	8009db8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c7c:	4b20      	ldr	r3, [pc, #128]	@ (8001d00 <MX_TIM3_Init+0xa0>)
 8001c7e:	4a21      	ldr	r2, [pc, #132]	@ (8001d04 <MX_TIM3_Init+0xa4>)
 8001c80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c82:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <MX_TIM3_Init+0xa0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <MX_TIM3_Init+0xa0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <MX_TIM3_Init+0xa0>)
 8001c90:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001c94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c96:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <MX_TIM3_Init+0xa0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9c:	4b18      	ldr	r3, [pc, #96]	@ (8001d00 <MX_TIM3_Init+0xa0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001caa:	2301      	movs	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480c      	ldr	r0, [pc, #48]	@ (8001d00 <MX_TIM3_Init+0xa0>)
 8001cce:	f006 fa47 	bl	8008160 <HAL_TIM_Encoder_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001cd8:	f7ff fd63 	bl	80017a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	@ (8001d00 <MX_TIM3_Init+0xa0>)
 8001cea:	f006 ffc3 	bl	8008c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001cf4:	f7ff fd55 	bl	80017a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	3730      	adds	r7, #48	@ 0x30
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000750 	.word	0x20000750
 8001d04:	40000400 	.word	0x40000400

08001d08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	@ 0x30
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	2224      	movs	r2, #36	@ 0x24
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f008 f84e 	bl	8009db8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d24:	4b20      	ldr	r3, [pc, #128]	@ (8001da8 <MX_TIM4_Init+0xa0>)
 8001d26:	4a21      	ldr	r2, [pc, #132]	@ (8001dac <MX_TIM4_Init+0xa4>)
 8001d28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <MX_TIM4_Init+0xa0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d30:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <MX_TIM4_Init+0xa0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8191;
 8001d36:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <MX_TIM4_Init+0xa0>)
 8001d38:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001d3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <MX_TIM4_Init+0xa0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d44:	4b18      	ldr	r3, [pc, #96]	@ (8001da8 <MX_TIM4_Init+0xa0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d52:	2301      	movs	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d62:	2301      	movs	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4619      	mov	r1, r3
 8001d74:	480c      	ldr	r0, [pc, #48]	@ (8001da8 <MX_TIM4_Init+0xa0>)
 8001d76:	f006 f9f3 	bl	8008160 <HAL_TIM_Encoder_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001d80:	f7ff fd0f 	bl	80017a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	@ (8001da8 <MX_TIM4_Init+0xa0>)
 8001d92:	f006 ff6f 	bl	8008c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001d9c:	f7ff fd01 	bl	80017a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	3730      	adds	r7, #48	@ 0x30
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000798 	.word	0x20000798
 8001dac:	40000800 	.word	0x40000800

08001db0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	@ 0x28
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db6:	f107 0320 	add.w	r3, r7, #32
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]
 8001dce:	615a      	str	r2, [r3, #20]
 8001dd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dd2:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <MX_TIM5_Init+0xac>)
 8001dd4:	4a22      	ldr	r2, [pc, #136]	@ (8001e60 <MX_TIM5_Init+0xb0>)
 8001dd6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001dd8:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <MX_TIM5_Init+0xac>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dde:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <MX_TIM5_Init+0xac>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001de4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e5c <MX_TIM5_Init+0xac>)
 8001de6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <MX_TIM5_Init+0xac>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <MX_TIM5_Init+0xac>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001df8:	4818      	ldr	r0, [pc, #96]	@ (8001e5c <MX_TIM5_Init+0xac>)
 8001dfa:	f006 f899 	bl	8007f30 <HAL_TIM_PWM_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001e04:	f7ff fccd 	bl	80017a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e10:	f107 0320 	add.w	r3, r7, #32
 8001e14:	4619      	mov	r1, r3
 8001e16:	4811      	ldr	r0, [pc, #68]	@ (8001e5c <MX_TIM5_Init+0xac>)
 8001e18:	f006 ff2c 	bl	8008c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001e22:	f7ff fcbe 	bl	80017a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e26:	2360      	movs	r3, #96	@ 0x60
 8001e28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2200      	movs	r2, #0
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4807      	ldr	r0, [pc, #28]	@ (8001e5c <MX_TIM5_Init+0xac>)
 8001e3e:	f006 fbb3 	bl	80085a8 <HAL_TIM_PWM_ConfigChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001e48:	f7ff fcab 	bl	80017a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e4c:	4803      	ldr	r0, [pc, #12]	@ (8001e5c <MX_TIM5_Init+0xac>)
 8001e4e:	f000 f9b1 	bl	80021b4 <HAL_TIM_MspPostInit>

}
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	@ 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200007e0 	.word	0x200007e0
 8001e60:	40000c00 	.word	0x40000c00

08001e64 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e72:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <MX_TIM6_Init+0x64>)
 8001e74:	4a15      	ldr	r2, [pc, #84]	@ (8001ecc <MX_TIM6_Init+0x68>)
 8001e76:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8001e78:	4b13      	ldr	r3, [pc, #76]	@ (8001ec8 <MX_TIM6_Init+0x64>)
 8001e7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e7e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e80:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <MX_TIM6_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 8001e86:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <MX_TIM6_Init+0x64>)
 8001e88:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001e8c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <MX_TIM6_Init+0x64>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <MX_TIM6_Init+0x64>)
 8001e96:	f005 ff8b 	bl	8007db0 <HAL_TIM_Base_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ea0:	f7ff fc7f 	bl	80017a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001eac:	463b      	mov	r3, r7
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4805      	ldr	r0, [pc, #20]	@ (8001ec8 <MX_TIM6_Init+0x64>)
 8001eb2:	f006 fedf 	bl	8008c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ebc:	f7ff fc71 	bl	80017a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000828 	.word	0x20000828
 8001ecc:	40001000 	.word	0x40001000

08001ed0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ede:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <MX_TIM7_Init+0x64>)
 8001ee0:	4a15      	ldr	r2, [pc, #84]	@ (8001f38 <MX_TIM7_Init+0x68>)
 8001ee2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 249;
 8001ee4:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <MX_TIM7_Init+0x64>)
 8001ee6:	22f9      	movs	r2, #249	@ 0xf9
 8001ee8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eea:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <MX_TIM7_Init+0x64>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8001ef0:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <MX_TIM7_Init+0x64>)
 8001ef2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001ef6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <MX_TIM7_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001efe:	480d      	ldr	r0, [pc, #52]	@ (8001f34 <MX_TIM7_Init+0x64>)
 8001f00:	f005 ff56 	bl	8007db0 <HAL_TIM_Base_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001f0a:	f7ff fc4a 	bl	80017a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f16:	463b      	mov	r3, r7
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4806      	ldr	r0, [pc, #24]	@ (8001f34 <MX_TIM7_Init+0x64>)
 8001f1c:	f006 feaa 	bl	8008c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001f26:	f7ff fc3c 	bl	80017a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000870 	.word	0x20000870
 8001f38:	40001400 	.word	0x40001400

08001f3c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f40:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <MX_TIM10_Init+0x40>)
 8001f42:	4a0f      	ldr	r2, [pc, #60]	@ (8001f80 <MX_TIM10_Init+0x44>)
 8001f44:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 19;
 8001f46:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <MX_TIM10_Init+0x40>)
 8001f48:	2213      	movs	r2, #19
 8001f4a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <MX_TIM10_Init+0x40>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <MX_TIM10_Init+0x40>)
 8001f54:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001f58:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <MX_TIM10_Init+0x40>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <MX_TIM10_Init+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <MX_TIM10_Init+0x40>)
 8001f68:	f005 ff22 	bl	8007db0 <HAL_TIM_Base_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001f72:	f7ff fc16 	bl	80017a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200008b8 	.word	0x200008b8
 8001f80:	40014400 	.word	0x40014400

08001f84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f94:	d10e      	bne.n	8001fb4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x64>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	4a12      	ldr	r2, [pc, #72]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x64>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x64>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001fb2:	e012      	b.n	8001fda <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001fec <HAL_TIM_PWM_MspInit+0x68>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10d      	bne.n	8001fda <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x64>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	4a08      	ldr	r2, [pc, #32]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x64>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_TIM_PWM_MspInit+0x64>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40000c00 	.word	0x40000c00

08001ff0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08c      	sub	sp, #48	@ 0x30
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a32      	ldr	r2, [pc, #200]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12c      	bne.n	800206c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	4b31      	ldr	r3, [pc, #196]	@ (80020dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a30      	ldr	r2, [pc, #192]	@ (80020dc <HAL_TIM_Encoder_MspInit+0xec>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
 8002022:	4b2e      	ldr	r3, [pc, #184]	@ (80020dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	4b2a      	ldr	r3, [pc, #168]	@ (80020dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a29      	ldr	r2, [pc, #164]	@ (80020dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 800204a:	23c0      	movs	r3, #192	@ 0xc0
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800205a:	2302      	movs	r3, #2
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 031c 	add.w	r3, r7, #28
 8002062:	4619      	mov	r1, r3
 8002064:	481e      	ldr	r0, [pc, #120]	@ (80020e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002066:	f003 f921 	bl	80052ac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800206a:	e030      	b.n	80020ce <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1c      	ldr	r2, [pc, #112]	@ (80020e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d12b      	bne.n	80020ce <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <HAL_TIM_Encoder_MspInit+0xec>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	4a17      	ldr	r2, [pc, #92]	@ (80020dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	6413      	str	r3, [r2, #64]	@ 0x40
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	4a10      	ldr	r2, [pc, #64]	@ (80020dc <HAL_TIM_Encoder_MspInit+0xec>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_TIM_Encoder_MspInit+0xec>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin|ENC2_CH2_Pin;
 80020ae:	23c0      	movs	r3, #192	@ 0xc0
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020be:	2302      	movs	r3, #2
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	4807      	ldr	r0, [pc, #28]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80020ca:	f003 f8ef 	bl	80052ac <HAL_GPIO_Init>
}
 80020ce:	bf00      	nop
 80020d0:	3730      	adds	r7, #48	@ 0x30
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40000800 	.word	0x40000800
 80020e8:	40020400 	.word	0x40020400

080020ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2a      	ldr	r2, [pc, #168]	@ (80021a4 <HAL_TIM_Base_MspInit+0xb8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d116      	bne.n	800212c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	4b29      	ldr	r3, [pc, #164]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	4a28      	ldr	r2, [pc, #160]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002108:	f043 0310 	orr.w	r3, r3, #16
 800210c:	6413      	str	r3, [r2, #64]	@ 0x40
 800210e:	4b26      	ldr	r3, [pc, #152]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2036      	movs	r0, #54	@ 0x36
 8002120:	f002 fcef 	bl	8004b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002124:	2036      	movs	r0, #54	@ 0x36
 8002126:	f002 fd08 	bl	8004b3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800212a:	e036      	b.n	800219a <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM7)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1e      	ldr	r2, [pc, #120]	@ (80021ac <HAL_TIM_Base_MspInit+0xc0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d116      	bne.n	8002164 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b1b      	ldr	r3, [pc, #108]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	4a1a      	ldr	r2, [pc, #104]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002140:	f043 0320 	orr.w	r3, r3, #32
 8002144:	6413      	str	r3, [r2, #64]	@ 0x40
 8002146:	4b18      	ldr	r3, [pc, #96]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	2037      	movs	r0, #55	@ 0x37
 8002158:	f002 fcd3 	bl	8004b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800215c:	2037      	movs	r0, #55	@ 0x37
 800215e:	f002 fcec 	bl	8004b3a <HAL_NVIC_EnableIRQ>
}
 8002162:	e01a      	b.n	800219a <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a11      	ldr	r2, [pc, #68]	@ (80021b0 <HAL_TIM_Base_MspInit+0xc4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d115      	bne.n	800219a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	4a0c      	ldr	r2, [pc, #48]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800217c:	6453      	str	r3, [r2, #68]	@ 0x44
 800217e:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	2019      	movs	r0, #25
 8002190:	f002 fcb7 	bl	8004b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002194:	2019      	movs	r0, #25
 8002196:	f002 fcd0 	bl	8004b3a <HAL_NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40001000 	.word	0x40001000
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40001400 	.word	0x40001400
 80021b0:	40014400 	.word	0x40014400

080021b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d4:	d11e      	bne.n	8002214 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b22      	ldr	r3, [pc, #136]	@ (8002264 <HAL_TIM_MspPostInit+0xb0>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a21      	ldr	r2, [pc, #132]	@ (8002264 <HAL_TIM_MspPostInit+0xb0>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <HAL_TIM_MspPostInit+0xb0>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M2_PUL_Pin;
 80021f2:	2302      	movs	r3, #2
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002202:	2301      	movs	r3, #1
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_PUL_GPIO_Port, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	4816      	ldr	r0, [pc, #88]	@ (8002268 <HAL_TIM_MspPostInit+0xb4>)
 800220e:	f003 f84d 	bl	80052ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002212:	e022      	b.n	800225a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a14      	ldr	r2, [pc, #80]	@ (800226c <HAL_TIM_MspPostInit+0xb8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d11d      	bne.n	800225a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <HAL_TIM_MspPostInit+0xb0>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a0f      	ldr	r2, [pc, #60]	@ (8002264 <HAL_TIM_MspPostInit+0xb0>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <HAL_TIM_MspPostInit+0xb0>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PUL_Pin;
 800223a:	2301      	movs	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800224a:	2302      	movs	r3, #2
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_PUL_GPIO_Port, &GPIO_InitStruct);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	4804      	ldr	r0, [pc, #16]	@ (8002268 <HAL_TIM_MspPostInit+0xb4>)
 8002256:	f003 f829 	bl	80052ac <HAL_GPIO_Init>
}
 800225a:	bf00      	nop
 800225c:	3728      	adds	r7, #40	@ 0x28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000
 800226c:	40000c00 	.word	0x40000c00

08002270 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 8002276:	4a12      	ldr	r2, [pc, #72]	@ (80022c0 <MX_USART2_UART_Init+0x50>)
 8002278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 800227c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002282:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800228e:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002294:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 8002296:	220c      	movs	r2, #12
 8002298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229a:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022a6:	4805      	ldr	r0, [pc, #20]	@ (80022bc <MX_USART2_UART_Init+0x4c>)
 80022a8:	f006 fd74 	bl	8008d94 <HAL_UART_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022b2:	f7ff fa76 	bl	80017a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000900 	.word	0x20000900
 80022c0:	40004400 	.word	0x40004400

080022c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	@ 0x28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a19      	ldr	r2, [pc, #100]	@ (8002348 <HAL_UART_MspInit+0x84>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d12b      	bne.n	800233e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	4b18      	ldr	r3, [pc, #96]	@ (800234c <HAL_UART_MspInit+0x88>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	4a17      	ldr	r2, [pc, #92]	@ (800234c <HAL_UART_MspInit+0x88>)
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f6:	4b15      	ldr	r3, [pc, #84]	@ (800234c <HAL_UART_MspInit+0x88>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b11      	ldr	r3, [pc, #68]	@ (800234c <HAL_UART_MspInit+0x88>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	4a10      	ldr	r2, [pc, #64]	@ (800234c <HAL_UART_MspInit+0x88>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6313      	str	r3, [r2, #48]	@ 0x30
 8002312:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <HAL_UART_MspInit+0x88>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800231e:	230c      	movs	r3, #12
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800232e:	2307      	movs	r3, #7
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4805      	ldr	r0, [pc, #20]	@ (8002350 <HAL_UART_MspInit+0x8c>)
 800233a:	f002 ffb7 	bl	80052ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800233e:	bf00      	nop
 8002340:	3728      	adds	r7, #40	@ 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40004400 	.word	0x40004400
 800234c:	40023800 	.word	0x40023800
 8002350:	40020000 	.word	0x40020000

08002354 <on_click>:
#define DEBOUNCE_DELAY 100 // ms

static uint32_t last_debounce_time = 0;
static uint8_t active = 0;

void on_click(){
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY){
 8002358:	f001 feb8 	bl	80040cc <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <on_click+0x6c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b64      	cmp	r3, #100	@ 0x64
 8002366:	d929      	bls.n	80023bc <on_click+0x68>
		last_debounce_time = HAL_GetTick();
 8002368:	f001 feb0 	bl	80040cc <HAL_GetTick>
 800236c:	4603      	mov	r3, r0
 800236e:	4a14      	ldr	r2, [pc, #80]	@ (80023c0 <on_click+0x6c>)
 8002370:	6013      	str	r3, [r2, #0]
		active ^= 1;
 8002372:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <on_click+0x70>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	f083 0301 	eor.w	r3, r3, #1
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <on_click+0x70>)
 800237e:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8002380:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002384:	4810      	ldr	r0, [pc, #64]	@ (80023c8 <on_click+0x74>)
 8002386:	f003 f956 	bl	8005636 <HAL_GPIO_TogglePin>

		if(active){
 800238a:	4b0e      	ldr	r3, [pc, #56]	@ (80023c4 <on_click+0x70>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <on_click+0x54>
			set_speed(&stepper_l, 3);
 8002392:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002396:	480d      	ldr	r0, [pc, #52]	@ (80023cc <on_click+0x78>)
 8002398:	f000 fce8 	bl	8002d6c <set_speed>
			set_speed(&stepper_r, 3);
 800239c:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80023a0:	480b      	ldr	r0, [pc, #44]	@ (80023d0 <on_click+0x7c>)
 80023a2:	f000 fce3 	bl	8002d6c <set_speed>
		} else{
			set_speed(&stepper_l, 0);
			set_speed(&stepper_r, 0);
		}
	}
}
 80023a6:	e009      	b.n	80023bc <on_click+0x68>
			set_speed(&stepper_l, 0);
 80023a8:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80023d4 <on_click+0x80>
 80023ac:	4807      	ldr	r0, [pc, #28]	@ (80023cc <on_click+0x78>)
 80023ae:	f000 fcdd 	bl	8002d6c <set_speed>
			set_speed(&stepper_r, 0);
 80023b2:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80023d4 <on_click+0x80>
 80023b6:	4806      	ldr	r0, [pc, #24]	@ (80023d0 <on_click+0x7c>)
 80023b8:	f000 fcd8 	bl	8002d6c <set_speed>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000948 	.word	0x20000948
 80023c4:	2000094c 	.word	0x2000094c
 80023c8:	40020800 	.word	0x40020800
 80023cc:	200009a4 	.word	0x200009a4
 80023d0:	2000096c 	.word	0x2000096c
 80023d4:	00000000 	.word	0x00000000

080023d8 <update_direction>:
#include <stdio.h>

float SAMPLING_PERIOD; // seconds
uint32_t HCLK;

static void update_direction(encoder_t *encoder){
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	encoder->direction = (encoder->tim->CR1 & TIM_CR1_DIR_Msk) >> TIM_CR1_DIR_Pos;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	701a      	strb	r2, [r3, #0]
	return;
 80023f4:	bf00      	nop
}
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <update_displacement>:

static void update_displacement(encoder_t *encoder){
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

	encoder->displacement = ((float)encoder->tim->CNT - 4096) * DCF * encoder->direction_invert;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002416:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002480 <update_displacement+0x80>
 800241a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800241e:	ee17 0a90 	vmov	r0, s15
 8002422:	f7fe f8c1 	bl	80005a8 <__aeabi_f2d>
 8002426:	a314      	add	r3, pc, #80	@ (adr r3, 8002478 <update_displacement+0x78>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	f7fe f914 	bl	8000658 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4614      	mov	r4, r2
 8002436:	461d      	mov	r5, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f8a0 	bl	8000584 <__aeabi_i2d>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4620      	mov	r0, r4
 800244a:	4629      	mov	r1, r5
 800244c:	f7fe f904 	bl	8000658 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	f7fe fbf6 	bl	8000c48 <__aeabi_d2f>
 800245c:	4602      	mov	r2, r0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	605a      	str	r2, [r3, #4]
	encoder->tim->CNT = 4096;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800246a:	625a      	str	r2, [r3, #36]	@ 0x24
	return;
 800246c:	bf00      	nop
}
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bdb0      	pop	{r4, r5, r7, pc}
 8002474:	f3af 8000 	nop.w
 8002478:	7bb1a72c 	.word	0x7bb1a72c
 800247c:	3f4921fa 	.word	0x3f4921fa
 8002480:	45800000 	.word	0x45800000

08002484 <compute_speed>:

static void compute_speed(encoder_t *encoder){
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	encoder->speed = encoder->displacement / SAMPLING_PERIOD;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002492:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <compute_speed+0x2c>)
 8002494:	ed93 7a00 	vldr	s14, [r3]
 8002498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000950 	.word	0x20000950

080024b4 <Encoder_read>:

void Encoder_read(encoder_t *encoder){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	update_direction(encoder);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff8b 	bl	80023d8 <update_direction>
	update_displacement(encoder);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ff9c 	bl	8002400 <update_displacement>
	compute_speed(encoder);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ffdb 	bl	8002484 <compute_speed>
	return;
 80024ce:	bf00      	nop
}
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <Encoder_init>:

// em_tim : encoder mode timer | s_tim : sampling timer
void Encoder_init(encoder_t *encoder, TIM_HandleTypeDef *em_tim, TIM_HandleTypeDef *s_tim, int8_t direction_invert){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	70fb      	strb	r3, [r7, #3]
	encoder->tim = em_tim->Instance;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	60da      	str	r2, [r3, #12]
	encoder->tim->CNT = 4096;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024f6:	625a      	str	r2, [r3, #36]	@ 0x24
	encoder->direction_invert = direction_invert;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	741a      	strb	r2, [r3, #16]

	encoder->speed = 0;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
	HCLK = HAL_RCC_GetHCLKFreq();
 8002506:	f004 fca7 	bl	8006e58 <HAL_RCC_GetHCLKFreq>
 800250a:	4603      	mov	r3, r0
 800250c:	4a11      	ldr	r2, [pc, #68]	@ (8002554 <Encoder_init+0x7c>)
 800250e:	6013      	str	r3, [r2, #0]
	SAMPLING_PERIOD = (float)(1+s_tim->Instance->ARR)*(1+s_tim->Instance->PSC)/HCLK;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002516:	3301      	adds	r3, #1
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002526:	3301      	adds	r3, #1
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002530:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002534:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <Encoder_init+0x7c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002544:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <Encoder_init+0x80>)
 8002546:	edc3 7a00 	vstr	s15, [r3]
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000954 	.word	0x20000954
 8002558:	20000950 	.word	0x20000950

0800255c <IMU_Init>:
#include "headers/imu.h"

#define IMU_EMA_ALPHA 0.04762		// Alpha = 1 / (1 + 20)

uint8_t IMU_Init(imu_t *imu, I2C_HandleTypeDef *hi2c, uint16_t address) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	@ 0x28
 8002560:	af04      	add	r7, sp, #16
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	4613      	mov	r3, r2
 8002568:	80fb      	strh	r3, [r7, #6]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) {
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b02      	cmp	r3, #2
 8002576:	d101      	bne.n	800257c <IMU_Init+0x20>
		// I2C bus is busy, stop the I2C communication
		return 0;
 8002578:	2300      	movs	r3, #0
 800257a:	e04f      	b.n	800261c <IMU_Init+0xc0>
	}

	imu->hi2c = hi2c;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	601a      	str	r2, [r3, #0]
	imu->address = address;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	809a      	strh	r2, [r3, #4]

	imu->ax = 0.0f;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	615a      	str	r2, [r3, #20]
	imu->ay = 0.0f;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
	imu->az = 0.0f;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	61da      	str	r2, [r3, #28]
	imu->wx = 0.0f;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
	imu->wy = 0.0f;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	625a      	str	r2, [r3, #36]	@ 0x24
	imu->wz = 0.0f;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	629a      	str	r2, [r3, #40]	@ 0x28

	uint8_t check;
	HAL_I2C_Mem_Read(hi2c, address, WHO_AM_I_ADDR, I2C_MEMADD_SIZE_8BIT, &check, 1, 1000);
 80025b8:	88f9      	ldrh	r1, [r7, #6]
 80025ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025be:	9302      	str	r3, [sp, #8]
 80025c0:	2301      	movs	r3, #1
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	f107 0317 	add.w	r3, r7, #23
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2301      	movs	r3, #1
 80025cc:	2275      	movs	r2, #117	@ 0x75
 80025ce:	68b8      	ldr	r0, [r7, #8]
 80025d0:	f003 faa2 	bl	8005b18 <HAL_I2C_Mem_Read>
	if (check == 0x68) {
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	2b68      	cmp	r3, #104	@ 0x68
 80025d8:	d11f      	bne.n	800261a <IMU_Init+0xbe>
		uint8_t data = 0x00;
 80025da:	2300      	movs	r3, #0
 80025dc:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, SLEEP_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80025de:	88f9      	ldrh	r1, [r7, #6]
 80025e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025e4:	9302      	str	r3, [sp, #8]
 80025e6:	2301      	movs	r3, #1
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	f107 0316 	add.w	r3, r7, #22
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2301      	movs	r3, #1
 80025f2:	226b      	movs	r2, #107	@ 0x6b
 80025f4:	68b8      	ldr	r0, [r7, #8]
 80025f6:	f003 f995 	bl	8005924 <HAL_I2C_Mem_Write>

		data = 0x00;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80025fe:	88f9      	ldrh	r1, [r7, #6]
 8002600:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002604:	9302      	str	r3, [sp, #8]
 8002606:	2301      	movs	r3, #1
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	f107 0316 	add.w	r3, r7, #22
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2301      	movs	r3, #1
 8002612:	221a      	movs	r2, #26
 8002614:	68b8      	ldr	r0, [r7, #8]
 8002616:	f003 f985 	bl	8005924 <HAL_I2C_Mem_Write>
	}
	return 1;
 800261a:	2301      	movs	r3, #1
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <IMU_ReadData>:

void IMU_ReadData(imu_t *imu){
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af02      	add	r7, sp, #8
 800262a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(imu->hi2c, imu->address, IMU_BASE_ACCEL_ADDR, I2C_MEMADD_SIZE_8BIT, (uint8_t *)imu->pData, IMU_BUFFER_SIZE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8899      	ldrh	r1, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3306      	adds	r3, #6
 8002638:	220e      	movs	r2, #14
 800263a:	9201      	str	r2, [sp, #4]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2301      	movs	r3, #1
 8002640:	223b      	movs	r2, #59	@ 0x3b
 8002642:	f003 fc9b 	bl	8005f7c <HAL_I2C_Mem_Read_DMA>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <IMU_Compute_Data>:

void IMU_Compute_Data(imu_t *imu) {
 8002650:	b5b0      	push	{r4, r5, r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	// Convert raw data to float values (/16834.0f for accelerometer -> in g, /131.0f for gyroscope)
	imu->ax = imu->ax * (1-IMU_EMA_ALPHA) + ((imu->pData[0] << 8) | imu->pData[1]) / 16384.0f * 9.81f * IMU_EMA_ALPHA;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd ffa3 	bl	80005a8 <__aeabi_f2d>
 8002662:	a3a9      	add	r3, pc, #676	@ (adr r3, 8002908 <IMU_Compute_Data+0x2b8>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	f7fd fff6 	bl	8000658 <__aeabi_dmul>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4614      	mov	r4, r2
 8002672:	461d      	mov	r5, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	799b      	ldrb	r3, [r3, #6]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	79d2      	ldrb	r2, [r2, #7]
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	4313      	orrs	r3, r2
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800268c:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8002910 <IMU_Compute_Data+0x2c0>
 8002690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002694:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8002914 <IMU_Compute_Data+0x2c4>
 8002698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800269c:	ee17 0a90 	vmov	r0, s15
 80026a0:	f7fd ff82 	bl	80005a8 <__aeabi_f2d>
 80026a4:	a396      	add	r3, pc, #600	@ (adr r3, 8002900 <IMU_Compute_Data+0x2b0>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	f7fd ffd5 	bl	8000658 <__aeabi_dmul>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4620      	mov	r0, r4
 80026b4:	4629      	mov	r1, r5
 80026b6:	f7fd fe19 	bl	80002ec <__adddf3>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4610      	mov	r0, r2
 80026c0:	4619      	mov	r1, r3
 80026c2:	f7fe fac1 	bl	8000c48 <__aeabi_d2f>
 80026c6:	4602      	mov	r2, r0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	615a      	str	r2, [r3, #20]
	imu->ay = imu->ay * (1-IMU_EMA_ALPHA) + ((imu->pData[2] << 8) | imu->pData[3]) / 16384.0f * 9.81f * IMU_EMA_ALPHA;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ff69 	bl	80005a8 <__aeabi_f2d>
 80026d6:	a38c      	add	r3, pc, #560	@ (adr r3, 8002908 <IMU_Compute_Data+0x2b8>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fd ffbc 	bl	8000658 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4614      	mov	r4, r2
 80026e6:	461d      	mov	r5, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7a1b      	ldrb	r3, [r3, #8]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	7a52      	ldrb	r2, [r2, #9]
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	4313      	orrs	r3, r2
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002700:	eddf 6a83 	vldr	s13, [pc, #524]	@ 8002910 <IMU_Compute_Data+0x2c0>
 8002704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002708:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8002914 <IMU_Compute_Data+0x2c4>
 800270c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002710:	ee17 0a90 	vmov	r0, s15
 8002714:	f7fd ff48 	bl	80005a8 <__aeabi_f2d>
 8002718:	a379      	add	r3, pc, #484	@ (adr r3, 8002900 <IMU_Compute_Data+0x2b0>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	f7fd ff9b 	bl	8000658 <__aeabi_dmul>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4620      	mov	r0, r4
 8002728:	4629      	mov	r1, r5
 800272a:	f7fd fddf 	bl	80002ec <__adddf3>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f7fe fa87 	bl	8000c48 <__aeabi_d2f>
 800273a:	4602      	mov	r2, r0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]
	imu->az = imu->az * (1-IMU_EMA_ALPHA) + ((imu->pData[4] << 8) | imu->pData[5])/ 16384.0f * 9.81f*IMU_EMA_ALPHA;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd ff2f 	bl	80005a8 <__aeabi_f2d>
 800274a:	a36f      	add	r3, pc, #444	@ (adr r3, 8002908 <IMU_Compute_Data+0x2b8>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	f7fd ff82 	bl	8000658 <__aeabi_dmul>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4614      	mov	r4, r2
 800275a:	461d      	mov	r5, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7a9b      	ldrb	r3, [r3, #10]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	7ad2      	ldrb	r2, [r2, #11]
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	4313      	orrs	r3, r2
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002774:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8002910 <IMU_Compute_Data+0x2c0>
 8002778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800277c:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8002914 <IMU_Compute_Data+0x2c4>
 8002780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002784:	ee17 0a90 	vmov	r0, s15
 8002788:	f7fd ff0e 	bl	80005a8 <__aeabi_f2d>
 800278c:	a35c      	add	r3, pc, #368	@ (adr r3, 8002900 <IMU_Compute_Data+0x2b0>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	f7fd ff61 	bl	8000658 <__aeabi_dmul>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4620      	mov	r0, r4
 800279c:	4629      	mov	r1, r5
 800279e:	f7fd fda5 	bl	80002ec <__adddf3>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	f7fe fa4d 	bl	8000c48 <__aeabi_d2f>
 80027ae:	4602      	mov	r2, r0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	61da      	str	r2, [r3, #28]
	imu->wx = imu->wx * (1-IMU_EMA_ALPHA) + ((imu->pData[8] << 8) | imu->pData[9]) / 131.0f * IMU_EMA_ALPHA;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fef5 	bl	80005a8 <__aeabi_f2d>
 80027be:	a352      	add	r3, pc, #328	@ (adr r3, 8002908 <IMU_Compute_Data+0x2b8>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	f7fd ff48 	bl	8000658 <__aeabi_dmul>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4614      	mov	r4, r2
 80027ce:	461d      	mov	r5, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7b9b      	ldrb	r3, [r3, #14]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	7bd2      	ldrb	r2, [r2, #15]
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	4313      	orrs	r3, r2
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e8:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002918 <IMU_Compute_Data+0x2c8>
 80027ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027f0:	ee16 0a90 	vmov	r0, s13
 80027f4:	f7fd fed8 	bl	80005a8 <__aeabi_f2d>
 80027f8:	a341      	add	r3, pc, #260	@ (adr r3, 8002900 <IMU_Compute_Data+0x2b0>)
 80027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fe:	f7fd ff2b 	bl	8000658 <__aeabi_dmul>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fd fd6f 	bl	80002ec <__adddf3>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f7fe fa17 	bl	8000c48 <__aeabi_d2f>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	621a      	str	r2, [r3, #32]
	imu->wy = imu->wy * (1-IMU_EMA_ALPHA) + ((imu->pData[10] << 8) | imu->pData[11]) / 131.0f * IMU_EMA_ALPHA;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd febf 	bl	80005a8 <__aeabi_f2d>
 800282a:	a337      	add	r3, pc, #220	@ (adr r3, 8002908 <IMU_Compute_Data+0x2b8>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f7fd ff12 	bl	8000658 <__aeabi_dmul>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4614      	mov	r4, r2
 800283a:	461d      	mov	r5, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7c1b      	ldrb	r3, [r3, #16]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	7c52      	ldrb	r2, [r2, #17]
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	4313      	orrs	r3, r2
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002854:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002918 <IMU_Compute_Data+0x2c8>
 8002858:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800285c:	ee16 0a90 	vmov	r0, s13
 8002860:	f7fd fea2 	bl	80005a8 <__aeabi_f2d>
 8002864:	a326      	add	r3, pc, #152	@ (adr r3, 8002900 <IMU_Compute_Data+0x2b0>)
 8002866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286a:	f7fd fef5 	bl	8000658 <__aeabi_dmul>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4620      	mov	r0, r4
 8002874:	4629      	mov	r1, r5
 8002876:	f7fd fd39 	bl	80002ec <__adddf3>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f7fe f9e1 	bl	8000c48 <__aeabi_d2f>
 8002886:	4602      	mov	r2, r0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	625a      	str	r2, [r3, #36]	@ 0x24
	imu->wz = imu->wz * (1-IMU_EMA_ALPHA) + ((imu->pData[12] << 8) | imu->pData[13]) / 131.0f * IMU_EMA_ALPHA;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002890:	4618      	mov	r0, r3
 8002892:	f7fd fe89 	bl	80005a8 <__aeabi_f2d>
 8002896:	a31c      	add	r3, pc, #112	@ (adr r3, 8002908 <IMU_Compute_Data+0x2b8>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f7fd fedc 	bl	8000658 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4614      	mov	r4, r2
 80028a6:	461d      	mov	r5, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7c9b      	ldrb	r3, [r3, #18]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	7cd2      	ldrb	r2, [r2, #19]
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	4313      	orrs	r3, r2
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c0:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002918 <IMU_Compute_Data+0x2c8>
 80028c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028c8:	ee16 0a90 	vmov	r0, s13
 80028cc:	f7fd fe6c 	bl	80005a8 <__aeabi_f2d>
 80028d0:	a30b      	add	r3, pc, #44	@ (adr r3, 8002900 <IMU_Compute_Data+0x2b0>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd febf 	bl	8000658 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4620      	mov	r0, r4
 80028e0:	4629      	mov	r1, r5
 80028e2:	f7fd fd03 	bl	80002ec <__adddf3>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7fe f9ab 	bl	8000c48 <__aeabi_d2f>
 80028f2:	4602      	mov	r2, r0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002900:	0d4562e1 	.word	0x0d4562e1
 8002904:	3fa861a6 	.word	0x3fa861a6
 8002908:	9f2ba9d2 	.word	0x9f2ba9d2
 800290c:	3fee79e5 	.word	0x3fee79e5
 8002910:	46800000 	.word	0x46800000
 8002914:	411cf5c3 	.word	0x411cf5c3
 8002918:	43030000 	.word	0x43030000
 800291c:	00000000 	.word	0x00000000

08002920 <PowerModule_init>:
#include "headers/power_module.h"
#include "headers/display.h"
#include "gpio.h"

void PowerModule_init(power_module_t *power_module, ADC_HandleTypeDef *hadc){
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
	power_module->warning_limit = WARNING_LIMIT; // Imposta il limite di avviso
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a34      	ldr	r2, [pc, #208]	@ (8002a00 <PowerModule_init+0xe0>)
 800292e:	605a      	str	r2, [r3, #4]
	power_module->stop_limit = STOP_LIMIT; // Imposta il limite di stop
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a34      	ldr	r2, [pc, #208]	@ (8002a04 <PowerModule_init+0xe4>)
 8002934:	609a      	str	r2, [r3, #8]
	power_module->warning_issued = 0; // Inizializza il flag di avviso
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	731a      	strb	r2, [r3, #12]
	power_module->stop_issued = 0; // Inizializza il flag di stop
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	735a      	strb	r2, [r3, #13]
	power_module->hadc = *hadc; // Initialize ADC handle
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	3364      	adds	r3, #100	@ 0x64
 8002948:	4611      	mov	r1, r2
 800294a:	2248      	movs	r2, #72	@ 0x48
 800294c:	4618      	mov	r0, r3
 800294e:	f007 fa6d 	bl	8009e2c <memcpy>

	HAL_ADC_Start(&power_module->hadc);  // Avvia manualmente
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3364      	adds	r3, #100	@ 0x64
 8002956:	4618      	mov	r0, r3
 8002958:	f001 fc2c 	bl	80041b4 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&power_module->hadc, 10) == HAL_OK) {  // Timeout corto
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3364      	adds	r3, #100	@ 0x64
 8002960:	210a      	movs	r1, #10
 8002962:	4618      	mov	r0, r3
 8002964:	f001 fd2b 	bl	80043be <HAL_ADC_PollForConversion>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11f      	bne.n	80029ae <PowerModule_init+0x8e>
		power_module->voltage = HAL_ADC_GetValue(&power_module->hadc) / SLOPE - OFFSET;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3364      	adds	r3, #100	@ 0x64
 8002972:	4618      	mov	r0, r3
 8002974:	f001 fdae 	bl	80044d4 <HAL_ADC_GetValue>
 8002978:	4603      	mov	r3, r0
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fdf2 	bl	8000564 <__aeabi_ui2d>
 8002980:	a31b      	add	r3, pc, #108	@ (adr r3, 80029f0 <PowerModule_init+0xd0>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fd ff91 	bl	80008ac <__aeabi_ddiv>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	a319      	add	r3, pc, #100	@ (adr r3, 80029f8 <PowerModule_init+0xd8>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fd fca6 	bl	80002e8 <__aeabi_dsub>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	f7fe f950 	bl	8000c48 <__aeabi_d2f>
 80029a8:	4602      	mov	r2, r0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Stop(&power_module->hadc);  // Ferma l’ADC dopo la conversione
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3364      	adds	r3, #100	@ 0x64
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 fcd0 	bl	8004358 <HAL_ADC_Stop>

	// Inizializza l'accumulatore
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e00a      	b.n	80029d4 <PowerModule_init+0xb4>
		power_module->accumulator[i] = power_module->voltage; // Inizializza con il primo valore letto
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3304      	adds	r3, #4
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	3301      	adds	r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b13      	cmp	r3, #19
 80029d8:	ddf1      	ble.n	80029be <PowerModule_init+0x9e>
	}
	power_module->accumulator_idx = 0; // Inizializza l'indice dell'accumulatore
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	f3af 8000 	nop.w
 80029f0:	e147ae14 	.word	0xe147ae14
 80029f4:	405c847a 	.word	0x405c847a
 80029f8:	c540196f 	.word	0xc540196f
 80029fc:	3fb12c42 	.word	0x3fb12c42
 8002a00:	41b00000 	.word	0x41b00000
 8002a04:	41a00000 	.word	0x41a00000

08002a08 <I2C1_BusRecovery>:
#define I2C_SCL_GPIO_Port   GPIOB
#define I2C_SCL_Pin         GPIO_PIN_8
#define I2C_SDA_GPIO_Port   GPIOB
#define I2C_SDA_Pin         GPIO_PIN_9

static void I2C1_BusRecovery(void) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002a0e:	463b      	mov	r3, r7
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]

    // 1) Disabilita I2C
    __HAL_I2C_DISABLE(&hi2c1);
 8002a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b08 <I2C1_BusRecovery+0x100>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4b39      	ldr	r3, [pc, #228]	@ (8002b08 <I2C1_BusRecovery+0x100>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]
    __HAL_RCC_I2C1_FORCE_RESET();
 8002a2c:	4b37      	ldr	r3, [pc, #220]	@ (8002b0c <I2C1_BusRecovery+0x104>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	4a36      	ldr	r2, [pc, #216]	@ (8002b0c <I2C1_BusRecovery+0x104>)
 8002a32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a36:	6213      	str	r3, [r2, #32]
    __HAL_RCC_I2C1_RELEASE_RESET();
 8002a38:	4b34      	ldr	r3, [pc, #208]	@ (8002b0c <I2C1_BusRecovery+0x104>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4a33      	ldr	r2, [pc, #204]	@ (8002b0c <I2C1_BusRecovery+0x104>)
 8002a3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a42:	6213      	str	r3, [r2, #32]

    // 2) Configura SCL e SDA come GPIO open-drain con pull-up interne
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8002a44:	2311      	movs	r3, #17
 8002a46:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin   = I2C_SCL_Pin | I2C_SDA_Pin;
 8002a50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a54:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a56:	463b      	mov	r3, r7
 8002a58:	4619      	mov	r1, r3
 8002a5a:	482d      	ldr	r0, [pc, #180]	@ (8002b10 <I2C1_BusRecovery+0x108>)
 8002a5c:	f002 fc26 	bl	80052ac <HAL_GPIO_Init>

    // 3) Se SDA rimane bassa, genera fino a 9 clock manuali su SCL
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++) {
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	e014      	b.n	8002a90 <I2C1_BusRecovery+0x88>
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_RESET);
 8002a66:	2200      	movs	r2, #0
 8002a68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a6c:	4828      	ldr	r0, [pc, #160]	@ (8002b10 <I2C1_BusRecovery+0x108>)
 8002a6e:	f002 fdc9 	bl	8005604 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8002a72:	2001      	movs	r0, #1
 8002a74:	f001 fb36 	bl	80040e4 <HAL_Delay>
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a7e:	4824      	ldr	r0, [pc, #144]	@ (8002b10 <I2C1_BusRecovery+0x108>)
 8002a80:	f002 fdc0 	bl	8005604 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8002a84:	2001      	movs	r0, #1
 8002a86:	f001 fb2d 	bl	80040e4 <HAL_Delay>
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++) {
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	dc07      	bgt.n	8002aa6 <I2C1_BusRecovery+0x9e>
 8002a96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a9a:	481d      	ldr	r0, [pc, #116]	@ (8002b10 <I2C1_BusRecovery+0x108>)
 8002a9c:	f002 fd9a 	bl	80055d4 <HAL_GPIO_ReadPin>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0df      	beq.n	8002a66 <I2C1_BusRecovery+0x5e>
    }

    // 4) Genera un STOP: SDA da bassa → alta mentre SCL alto
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_RESET);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002aac:	4818      	ldr	r0, [pc, #96]	@ (8002b10 <I2C1_BusRecovery+0x108>)
 8002aae:	f002 fda9 	bl	8005604 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f001 fb16 	bl	80040e4 <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002abe:	4814      	ldr	r0, [pc, #80]	@ (8002b10 <I2C1_BusRecovery+0x108>)
 8002ac0:	f002 fda0 	bl	8005604 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f001 fb0d 	bl	80040e4 <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET);
 8002aca:	2201      	movs	r2, #1
 8002acc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ad0:	480f      	ldr	r0, [pc, #60]	@ (8002b10 <I2C1_BusRecovery+0x108>)
 8002ad2:	f002 fd97 	bl	8005604 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f001 fb04 	bl	80040e4 <HAL_Delay>

    // 5) Ripristina AF I2C su SCL e SDA
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002adc:	2312      	movs	r3, #18
 8002ade:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;        // pull-up interne già attive
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed= GPIO_SPEED_FREQ_HIGH;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = I2C_SCL_Pin | I2C_SDA_Pin;
 8002ae8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002aec:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aee:	2304      	movs	r3, #4
 8002af0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af2:	463b      	mov	r3, r7
 8002af4:	4619      	mov	r1, r3
 8002af6:	4806      	ldr	r0, [pc, #24]	@ (8002b10 <I2C1_BusRecovery+0x108>)
 8002af8:	f002 fbd8 	bl	80052ac <HAL_GPIO_Init>

    // 6) Ri-inizializza l’I2C
    MX_I2C1_Init();
 8002afc:	f7fe fc3e 	bl	800137c <MX_I2C1_Init>
}
 8002b00:	bf00      	nop
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	200005f4 	.word	0x200005f4
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020400 	.word	0x40020400

08002b14 <Robot_init>:


void Robot_init(){
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af02      	add	r7, sp, #8
	HAL_TIM_Base_Start_IT(&htim6);						// Display timer (0.1MHz)
 8002b1a:	4827      	ldr	r0, [pc, #156]	@ (8002bb8 <Robot_init+0xa4>)
 8002b1c:	f005 f998 	bl	8007e50 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);						// Timeline
 8002b20:	4826      	ldr	r0, [pc, #152]	@ (8002bbc <Robot_init+0xa8>)
 8002b22:	f005 f995 	bl	8007e50 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);						// Stepper timer
 8002b26:	4826      	ldr	r0, [pc, #152]	@ (8002bc0 <Robot_init+0xac>)
 8002b28:	f005 f992 	bl	8007e50 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		// Encoder right
 8002b2c:	213c      	movs	r1, #60	@ 0x3c
 8002b2e:	4825      	ldr	r0, [pc, #148]	@ (8002bc4 <Robot_init+0xb0>)
 8002b30:	f005 fbbc 	bl	80082ac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);		// Encoder left
 8002b34:	213c      	movs	r1, #60	@ 0x3c
 8002b36:	4824      	ldr	r0, [pc, #144]	@ (8002bc8 <Robot_init+0xb4>)
 8002b38:	f005 fbb8 	bl	80082ac <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);			// Stepper left
 8002b3c:	2104      	movs	r1, #4
 8002b3e:	4823      	ldr	r0, [pc, #140]	@ (8002bcc <Robot_init+0xb8>)
 8002b40:	f005 fa46 	bl	8007fd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);			// Stepper right
 8002b44:	2100      	movs	r1, #0
 8002b46:	4822      	ldr	r0, [pc, #136]	@ (8002bd0 <Robot_init+0xbc>)
 8002b48:	f005 fa42 	bl	8007fd0 <HAL_TIM_PWM_Start>

	while(!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR)){
 8002b4c:	e001      	b.n	8002b52 <Robot_init+0x3e>
		I2C1_BusRecovery(); // Attempt to recover I2C bus if IMU init fails
 8002b4e:	f7ff ff5b 	bl	8002a08 <I2C1_BusRecovery>
	while(!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR)){
 8002b52:	22d0      	movs	r2, #208	@ 0xd0
 8002b54:	491f      	ldr	r1, [pc, #124]	@ (8002bd4 <Robot_init+0xc0>)
 8002b56:	4820      	ldr	r0, [pc, #128]	@ (8002bd8 <Robot_init+0xc4>)
 8002b58:	f7ff fd00 	bl	800255c <IMU_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f5      	beq.n	8002b4e <Robot_init+0x3a>
	}

	Encoder_init(&encoder_l, &htim3, &htim7, -1);
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b66:	4a15      	ldr	r2, [pc, #84]	@ (8002bbc <Robot_init+0xa8>)
 8002b68:	4916      	ldr	r1, [pc, #88]	@ (8002bc4 <Robot_init+0xb0>)
 8002b6a:	481c      	ldr	r0, [pc, #112]	@ (8002bdc <Robot_init+0xc8>)
 8002b6c:	f7ff fcb4 	bl	80024d8 <Encoder_init>
	Stepper_init(&stepper_l, &htim5, TIM_CHANNEL_1, &encoder_l, GPIOA, GPIO_PIN_4);
 8002b70:	2310      	movs	r3, #16
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	4b1a      	ldr	r3, [pc, #104]	@ (8002be0 <Robot_init+0xcc>)
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4b18      	ldr	r3, [pc, #96]	@ (8002bdc <Robot_init+0xc8>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	4914      	ldr	r1, [pc, #80]	@ (8002bd0 <Robot_init+0xbc>)
 8002b7e:	4819      	ldr	r0, [pc, #100]	@ (8002be4 <Robot_init+0xd0>)
 8002b80:	f000 f904 	bl	8002d8c <Stepper_init>

	Encoder_init(&encoder_r, &htim4, &htim7, 1);
 8002b84:	2301      	movs	r3, #1
 8002b86:	4a0d      	ldr	r2, [pc, #52]	@ (8002bbc <Robot_init+0xa8>)
 8002b88:	490f      	ldr	r1, [pc, #60]	@ (8002bc8 <Robot_init+0xb4>)
 8002b8a:	4817      	ldr	r0, [pc, #92]	@ (8002be8 <Robot_init+0xd4>)
 8002b8c:	f7ff fca4 	bl	80024d8 <Encoder_init>
	Stepper_init(&stepper_r, &htim2, TIM_CHANNEL_2, &encoder_r, GPIOB, GPIO_PIN_0);
 8002b90:	2301      	movs	r3, #1
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <Robot_init+0xd8>)
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	4b13      	ldr	r3, [pc, #76]	@ (8002be8 <Robot_init+0xd4>)
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	490b      	ldr	r1, [pc, #44]	@ (8002bcc <Robot_init+0xb8>)
 8002b9e:	4814      	ldr	r0, [pc, #80]	@ (8002bf0 <Robot_init+0xdc>)
 8002ba0:	f000 f8f4 	bl	8002d8c <Stepper_init>

	PowerModule_init(&power_module, &hadc1);
 8002ba4:	4913      	ldr	r1, [pc, #76]	@ (8002bf4 <Robot_init+0xe0>)
 8002ba6:	4814      	ldr	r0, [pc, #80]	@ (8002bf8 <Robot_init+0xe4>)
 8002ba8:	f7ff feba 	bl	8002920 <PowerModule_init>

	MAX72_init(&display);
 8002bac:	4813      	ldr	r0, [pc, #76]	@ (8002bfc <Robot_init+0xe8>)
 8002bae:	f000 f961 	bl	8002e74 <MAX72_init>
}
 8002bb2:	bf00      	nop
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20000828 	.word	0x20000828
 8002bbc:	20000870 	.word	0x20000870
 8002bc0:	200008b8 	.word	0x200008b8
 8002bc4:	20000750 	.word	0x20000750
 8002bc8:	20000798 	.word	0x20000798
 8002bcc:	20000708 	.word	0x20000708
 8002bd0:	200007e0 	.word	0x200007e0
 8002bd4:	200005f4 	.word	0x200005f4
 8002bd8:	200009c8 	.word	0x200009c8
 8002bdc:	20000990 	.word	0x20000990
 8002be0:	40020000 	.word	0x40020000
 8002be4:	200009a4 	.word	0x200009a4
 8002be8:	20000958 	.word	0x20000958
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	2000096c 	.word	0x2000096c
 8002bf4:	200005ac 	.word	0x200005ac
 8002bf8:	200009f4 	.word	0x200009f4
 8002bfc:	20000aa0 	.word	0x20000aa0

08002c00 <speed_control>:
#include <math.h>

#define KP 350 // Manually tuned proportional gain
#define KI 890 // MATLAB tuned integral gain

void speed_control(stepper_t *stepper){
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	Encoder_read(stepper->encoder);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fc51 	bl	80024b4 <Encoder_read>

	float e = stepper->setpoint_speed - stepper->encoder->speed;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c24:	edc7 7a03 	vstr	s15, [r7, #12]

	stepper->frequency += e / ANGLE_STEP; // Integral only controller
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fcbb 	bl	80005a8 <__aeabi_f2d>
 8002c32:	4604      	mov	r4, r0
 8002c34:	460d      	mov	r5, r1
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7fd fcb6 	bl	80005a8 <__aeabi_f2d>
 8002c3c:	a349      	add	r3, pc, #292	@ (adr r3, 8002d64 <speed_control+0x164>)
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	f7fd fe33 	bl	80008ac <__aeabi_ddiv>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	f7fd fb4d 	bl	80002ec <__adddf3>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f7fd fff5 	bl	8000c48 <__aeabi_d2f>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	60da      	str	r2, [r3, #12]


//	stepper->frequency += KP*e + (KI * SAMPLING_PERIOD) * (e+stepper->last_error);
//	stepper->last_error = e;

	uint8_t sign = stepper->frequency > 0;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c72:	bfcc      	ite	gt
 8002c74:	2301      	movgt	r3, #1
 8002c76:	2300      	movle	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	72fb      	strb	r3, [r7, #11]

	if (fabs(stepper->frequency) > 9000) {
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c82:	eef0 7ae7 	vabs.f32	s15, s15
 8002c86:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002d50 <speed_control+0x150>
 8002c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c92:	dd07      	ble.n	8002ca4 <speed_control+0xa4>
		stepper->frequency = 9000 * (sign?1:-1); // Limit frequency to 9000 Hz
 8002c94:	7afb      	ldrb	r3, [r7, #11]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <speed_control+0x9e>
 8002c9a:	4a2e      	ldr	r2, [pc, #184]	@ (8002d54 <speed_control+0x154>)
 8002c9c:	e000      	b.n	8002ca0 <speed_control+0xa0>
 8002c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8002d58 <speed_control+0x158>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]
	}

	HAL_GPIO_WritePin(stepper->DIR_PORT, stepper->DIR_PIN, (stepper->encoder->direction_invert > 0 ? sign : !sign));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8c19      	ldrh	r1, [r3, #32]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	dc06      	bgt.n	8002cc8 <speed_control+0xc8>
 8002cba:	7afb      	ldrb	r3, [r7, #11]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e000      	b.n	8002cca <speed_control+0xca>
 8002cc8:	7afb      	ldrb	r3, [r7, #11]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f002 fc9a 	bl	8005604 <HAL_GPIO_WritePin>

	stepper->tim->ARR = fabs(1/stepper->frequency)*HCLK-1; // period = (1+ARR)*(1+PSC)/HCLK;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	ed93 7a03 	vldr	s14, [r3, #12]
 8002cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cde:	eef0 7ae7 	vabs.f32	s15, s15
 8002ce2:	ee17 0a90 	vmov	r0, s15
 8002ce6:	f7fd fc5f 	bl	80005a8 <__aeabi_f2d>
 8002cea:	4604      	mov	r4, r0
 8002cec:	460d      	mov	r5, r1
 8002cee:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <speed_control+0x15c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc36 	bl	8000564 <__aeabi_ui2d>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	4629      	mov	r1, r5
 8002d00:	f7fd fcaa 	bl	8000658 <__aeabi_dmul>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <speed_control+0x160>)
 8002d12:	f7fd fae9 	bl	80002e8 <__aeabi_dsub>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695c      	ldr	r4, [r3, #20]
 8002d22:	f7fd ff71 	bl	8000c08 <__aeabi_d2uiz>
 8002d26:	4603      	mov	r3, r0
 8002d28:	62e3      	str	r3, [r4, #44]	@ 0x2c
	*stepper->CCR = (stepper->tim->ARR+1)/2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	0852      	lsrs	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
	stepper->tim->EGR = TIM_EGR_UG;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	615a      	str	r2, [r3, #20]
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	f3af 8000 	nop.w
 8002d50:	460ca000 	.word	0x460ca000
 8002d54:	460ca000 	.word	0x460ca000
 8002d58:	c60ca000 	.word	0xc60ca000
 8002d5c:	20000954 	.word	0x20000954
 8002d60:	3ff00000 	.word	0x3ff00000
 8002d64:	e362eeeb 	.word	0xe362eeeb
 8002d68:	3f5015bf 	.word	0x3f5015bf

08002d6c <set_speed>:

void set_speed(stepper_t *stepper, float speed){
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	ed87 0a00 	vstr	s0, [r7]
	stepper->setpoint_speed = speed;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	609a      	str	r2, [r3, #8]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <Stepper_init>:

void Stepper_init(stepper_t *stepper, TIM_HandleTypeDef *htim, uint32_t tim_channel,
		encoder_t *encoder, GPIO_TypeDef *DIR_PORT, uint16_t DIR_PIN){
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
	stepper->angle_step = ANGLE_STEP;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4a34      	ldr	r2, [pc, #208]	@ (8002e70 <Stepper_init+0xe4>)
 8002d9e:	605a      	str	r2, [r3, #4]
	stepper->tim = htim->Instance;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	615a      	str	r2, [r3, #20]
	stepper->DIR_PORT = DIR_PORT;
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	61da      	str	r2, [r3, #28]
	stepper->DIR_PIN = DIR_PIN;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8bba      	ldrh	r2, [r7, #28]
 8002db2:	841a      	strh	r2, [r3, #32]
	switch (tim_channel){
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	d838      	bhi.n	8002e2c <Stepper_init+0xa0>
 8002dba:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc0 <Stepper_init+0x34>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002df5 	.word	0x08002df5
 8002dc4:	08002e2d 	.word	0x08002e2d
 8002dc8:	08002e2d 	.word	0x08002e2d
 8002dcc:	08002e2d 	.word	0x08002e2d
 8002dd0:	08002e03 	.word	0x08002e03
 8002dd4:	08002e2d 	.word	0x08002e2d
 8002dd8:	08002e2d 	.word	0x08002e2d
 8002ddc:	08002e2d 	.word	0x08002e2d
 8002de0:	08002e11 	.word	0x08002e11
 8002de4:	08002e2d 	.word	0x08002e2d
 8002de8:	08002e2d 	.word	0x08002e2d
 8002dec:	08002e2d 	.word	0x08002e2d
 8002df0:	08002e1f 	.word	0x08002e1f
	case TIM_CHANNEL_1:
		stepper->CCR = &stepper->tim->CCR1;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	619a      	str	r2, [r3, #24]
		break;
 8002e00:	e018      	b.n	8002e34 <Stepper_init+0xa8>
	case TIM_CHANNEL_2:
		stepper->CCR = &stepper->tim->CCR2;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	619a      	str	r2, [r3, #24]
		break;
 8002e0e:	e011      	b.n	8002e34 <Stepper_init+0xa8>
	case TIM_CHANNEL_3:
		stepper->CCR = &stepper->tim->CCR3;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	619a      	str	r2, [r3, #24]
		break;
 8002e1c:	e00a      	b.n	8002e34 <Stepper_init+0xa8>
	case TIM_CHANNEL_4:
		stepper->CCR = &stepper->tim->CCR4;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	619a      	str	r2, [r3, #24]
		break;
 8002e2a:	e003      	b.n	8002e34 <Stepper_init+0xa8>
	default:
		stepper->CCR = NULL;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
		break;
 8002e32:	bf00      	nop
	}

	if (stepper->CCR != NULL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <Stepper_init+0xb8>
		*stepper->CCR = 0; // Disattiva il PWM (duty cycle 0)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

	stepper->encoder = encoder;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	611a      	str	r2, [r3, #16]
	stepper->setpoint_speed = 0;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
	stepper->frequency = 0;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
	stepper->last_error = 0;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	3a80adff 	.word	0x3a80adff

08002e74 <MAX72_init>:
    {0x0C, 0x01}, // Shutdown Register: normal operation
    {0x0F, 0x00}  // Display Test: off
};

void MAX72_init(display_t *display)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[8];
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	75fb      	strb	r3, [r7, #23]
 8002e80:	e035      	b.n	8002eee <MAX72_init+0x7a>
        // riempi txBuf con 4 volte InitCommands[cmd]
        for (uint8_t dev=0; dev<4; dev++) {
 8002e82:	2300      	movs	r3, #0
 8002e84:	75bb      	strb	r3, [r7, #22]
 8002e86:	e01a      	b.n	8002ebe <MAX72_init+0x4a>
            txBuf[dev*2]   = InitCommands[cmd][0];
 8002e88:	7dfa      	ldrb	r2, [r7, #23]
 8002e8a:	7dbb      	ldrb	r3, [r7, #22]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4929      	ldr	r1, [pc, #164]	@ (8002f34 <MAX72_init+0xc0>)
 8002e90:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8002e94:	3318      	adds	r3, #24
 8002e96:	443b      	add	r3, r7
 8002e98:	f803 2c0c 	strb.w	r2, [r3, #-12]
            txBuf[dev*2+1] = InitCommands[cmd][1];
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	7dba      	ldrb	r2, [r7, #22]
 8002ea0:	0052      	lsls	r2, r2, #1
 8002ea2:	3201      	adds	r2, #1
 8002ea4:	4923      	ldr	r1, [pc, #140]	@ (8002f34 <MAX72_init+0xc0>)
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	440b      	add	r3, r1
 8002eaa:	7859      	ldrb	r1, [r3, #1]
 8002eac:	f102 0318 	add.w	r3, r2, #24
 8002eb0:	443b      	add	r3, r7
 8002eb2:	460a      	mov	r2, r1
 8002eb4:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (uint8_t dev=0; dev<4; dev++) {
 8002eb8:	7dbb      	ldrb	r3, [r7, #22]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	75bb      	strb	r3, [r7, #22]
 8002ebe:	7dbb      	ldrb	r3, [r7, #22]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d9e1      	bls.n	8002e88 <MAX72_init+0x14>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // CS
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2110      	movs	r1, #16
 8002ec8:	481b      	ldr	r0, [pc, #108]	@ (8002f38 <MAX72_init+0xc4>)
 8002eca:	f002 fb9b 	bl	8005604 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8002ece:	f107 010c 	add.w	r1, r7, #12
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ed6:	2208      	movs	r2, #8
 8002ed8:	4818      	ldr	r0, [pc, #96]	@ (8002f3c <MAX72_init+0xc8>)
 8002eda:	f004 fd48 	bl	800796e <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // CS
 8002ede:	2201      	movs	r2, #1
 8002ee0:	2110      	movs	r1, #16
 8002ee2:	4815      	ldr	r0, [pc, #84]	@ (8002f38 <MAX72_init+0xc4>)
 8002ee4:	f002 fb8e 	bl	8005604 <HAL_GPIO_WritePin>
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	3301      	adds	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d9c6      	bls.n	8002e82 <MAX72_init+0xe>
    }

    display->data_count = 0; // Inizializza il numero di dati a 0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    display->current_index = 0; // Inizializza l'indice corrente a 0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    display->data_duration = 5; // Imposta la durata di visualizzazione a 5 secondi
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2205      	movs	r2, #5
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    display->change_enabled = 1; // Abilita il cambio automatico dei dati
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    display->update_enabled = 1; // Abilita l'aggiornamento automatico dei dati
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    display->last_change_time = HAL_GetTick(); // Inizializza il tempo dell'ultimo cambio a ora corrente
 8002f1c:	f001 f8d6 	bl	80040cc <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	649a      	str	r2, [r3, #72]	@ 0x48
    MAX72_Clear(); // Pulisce il display all'inizio
 8002f26:	f000 f847 	bl	8002fb8 <MAX72_Clear>
}
 8002f2a:	bf00      	nop
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	0800c048 	.word	0x0800c048
 8002f38:	40020400 	.word	0x40020400
 8002f3c:	200006ac 	.word	0x200006ac

08002f40 <MAX72_SendRow>:

void MAX72_SendRow(uint8_t row, uint8_t pattern[DEV_NUM])
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[8];
    // pattern[i] = dato per il modulo i
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	75fb      	strb	r3, [r7, #23]
 8002f50:	e014      	b.n	8002f7c <MAX72_SendRow+0x3c>
        txBuf[dev*2]   = row;          // registro DIG[row]
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	3318      	adds	r3, #24
 8002f58:	443b      	add	r3, r7
 8002f5a:	79fa      	ldrb	r2, [r7, #7]
 8002f5c:	f803 2c0c 	strb.w	r2, [r3, #-12]
        txBuf[dev*2+1] = pattern[dev]; // i‑esimo byte di dati
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	441a      	add	r2, r3
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	7812      	ldrb	r2, [r2, #0]
 8002f6e:	3318      	adds	r3, #24
 8002f70:	443b      	add	r3, r7
 8002f72:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d9e7      	bls.n	8002f52 <MAX72_SendRow+0x12>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2110      	movs	r1, #16
 8002f86:	480a      	ldr	r0, [pc, #40]	@ (8002fb0 <MAX72_SendRow+0x70>)
 8002f88:	f002 fb3c 	bl	8005604 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8002f8c:	f107 010c 	add.w	r1, r7, #12
 8002f90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f94:	2208      	movs	r2, #8
 8002f96:	4807      	ldr	r0, [pc, #28]	@ (8002fb4 <MAX72_SendRow+0x74>)
 8002f98:	f004 fce9 	bl	800796e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	2110      	movs	r1, #16
 8002fa0:	4803      	ldr	r0, [pc, #12]	@ (8002fb0 <MAX72_SendRow+0x70>)
 8002fa2:	f002 fb2f 	bl	8005604 <HAL_GPIO_WritePin>
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40020400 	.word	0x40020400
 8002fb4:	200006ac 	.word	0x200006ac

08002fb8 <MAX72_Clear>:

void MAX72_Clear(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
	uint8_t emptyPattern[4] = {0, 0, 0, 0};
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	603b      	str	r3, [r7, #0]
	    for (uint8_t row=1; row<=8; row++) {
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	71fb      	strb	r3, [r7, #7]
 8002fc6:	e008      	b.n	8002fda <MAX72_Clear+0x22>
	        MAX72_SendRow(row, emptyPattern);
 8002fc8:	463a      	mov	r2, r7
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ffb6 	bl	8002f40 <MAX72_SendRow>
	    for (uint8_t row=1; row<=8; row++) {
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	71fb      	strb	r3, [r7, #7]
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d9f3      	bls.n	8002fc8 <MAX72_Clear+0x10>
	    }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <MAX72_Add_Data>:

void MAX72_Add_Data(display_t *display, display_data_t *data) {
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
	if (display->data_count < MAX_DATA_LENGTH) {
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ffa:	2b07      	cmp	r3, #7
 8002ffc:	d813      	bhi.n	8003026 <MAX72_Add_Data+0x3c>
		display->data[display->data_count] = *data; // Aggiungi i dati al display
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6839      	ldr	r1, [r7, #0]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	460a      	mov	r2, r1
 800300e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003012:	e883 0003 	stmia.w	r3, {r0, r1}
		display->data_count++; // Incrementa il conteggio dei dati
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800301c:	3301      	adds	r3, #1
 800301e:	b2da      	uxtb	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}

	if (display->data_count == 1) {
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800302c:	2b01      	cmp	r3, #1
 800302e:	d103      	bne.n	8003038 <MAX72_Add_Data+0x4e>
		MAX72_Change_Data(display,1); // Se è il primo dato, aggiorna subito il display
 8003030:	2101      	movs	r1, #1
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f900 	bl	8003238 <MAX72_Change_Data>
	}
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <MAX72_Update_Data>:

void MAX72_Update_Data(display_t *display) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	if (display->data_count == 0 || !display->update_enabled) {
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80e3 	beq.w	800321a <MAX72_Update_Data+0x1da>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 80dd 	beq.w	800321a <MAX72_Update_Data+0x1da>
		return; // Non ci sono dati da visualizzare
	}

	display_data_t *current_data = &display->data[display->current_index];
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

	switch (current_data->settings) {
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	791b      	ldrb	r3, [r3, #4]
 8003072:	2b03      	cmp	r3, #3
 8003074:	f200 80da 	bhi.w	800322c <MAX72_Update_Data+0x1ec>
 8003078:	a201      	add	r2, pc, #4	@ (adr r2, 8003080 <MAX72_Update_Data+0x40>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	08003091 	.word	0x08003091
 8003084:	080031ad 	.word	0x080031ad
 8003088:	080031d3 	.word	0x080031d3
 800308c:	080031ed 	.word	0x080031ed
		case PRINT_INT:
			switch(current_data->type) {
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	799b      	ldrb	r3, [r3, #6]
 8003094:	2b09      	cmp	r3, #9
 8003096:	f200 80c2 	bhi.w	800321e <MAX72_Update_Data+0x1de>
 800309a:	a201      	add	r2, pc, #4	@ (adr r2, 80030a0 <MAX72_Update_Data+0x60>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	080030c9 	.word	0x080030c9
 80030a4:	080030dd 	.word	0x080030dd
 80030a8:	080030f3 	.word	0x080030f3
 80030ac:	08003109 	.word	0x08003109
 80030b0:	0800311f 	.word	0x0800311f
 80030b4:	08003135 	.word	0x08003135
 80030b8:	0800314d 	.word	0x0800314d
 80030bc:	08003165 	.word	0x08003165
 80030c0:	08003179 	.word	0x08003179
 80030c4:	0800318f 	.word	0x0800318f
				case DISPLAY_TYPE_INT:
					MAX72_Print_Int(*(int *)current_data->data, current_data->string_settings);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	795b      	ldrb	r3, [r3, #5]
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f000 fb99 	bl	800380c <MAX72_Print_Int>
					break;
 80030da:	e066      	b.n	80031aa <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT8:
					MAX72_Print_Int((int)*(uint8_t *)current_data->data, current_data->string_settings);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	795b      	ldrb	r3, [r3, #5]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f000 fb8e 	bl	800380c <MAX72_Print_Int>
					break;
 80030f0:	e05b      	b.n	80031aa <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT16:
					MAX72_Print_Int((int)*(uint16_t *)current_data->data, current_data->string_settings);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	795b      	ldrb	r3, [r3, #5]
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f000 fb83 	bl	800380c <MAX72_Print_Int>
					break;
 8003106:	e050      	b.n	80031aa <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT32:
					MAX72_Print_Int((int)*(uint32_t *)current_data->data, current_data->string_settings);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	795b      	ldrb	r3, [r3, #5]
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f000 fb78 	bl	800380c <MAX72_Print_Int>
					break;
 800311c:	e045      	b.n	80031aa <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT64:
					MAX72_Print_Int((int)*(uint64_t *)current_data->data, current_data->string_settings);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	795b      	ldrb	r3, [r3, #5]
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f000 fb6d 	bl	800380c <MAX72_Print_Int>
					break;
 8003132:	e03a      	b.n	80031aa <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT8:
					MAX72_Print_Int(*(int8_t *)current_data->data, current_data->string_settings);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f993 3000 	ldrsb.w	r3, [r3]
 800313c:	461a      	mov	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	795b      	ldrb	r3, [r3, #5]
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f000 fb61 	bl	800380c <MAX72_Print_Int>
					break;
 800314a:	e02e      	b.n	80031aa <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT16:
					MAX72_Print_Int(*(int16_t *)current_data->data, current_data->string_settings);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003154:	461a      	mov	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	795b      	ldrb	r3, [r3, #5]
 800315a:	4619      	mov	r1, r3
 800315c:	4610      	mov	r0, r2
 800315e:	f000 fb55 	bl	800380c <MAX72_Print_Int>
					break;
 8003162:	e022      	b.n	80031aa <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT32:
					MAX72_Print_Int(*(int32_t *)current_data->data, current_data->string_settings);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	795b      	ldrb	r3, [r3, #5]
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f000 fb4b 	bl	800380c <MAX72_Print_Int>
					break;
 8003176:	e018      	b.n	80031aa <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT64:
					MAX72_Print_Int(*(int64_t *)current_data->data, current_data->string_settings);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	795b      	ldrb	r3, [r3, #5]
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f000 fb40 	bl	800380c <MAX72_Print_Int>
					break;
 800318c:	e00d      	b.n	80031aa <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_FLOAT:
					MAX72_Print_Int((int)*(float *)current_data->data, current_data->string_settings);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	795b      	ldrb	r3, [r3, #5]
 800319e:	4619      	mov	r1, r3
 80031a0:	ee17 0a90 	vmov	r0, s15
 80031a4:	f000 fb32 	bl	800380c <MAX72_Print_Int>
					break;
 80031a8:	bf00      	nop
			}
			break;
 80031aa:	e038      	b.n	800321e <MAX72_Update_Data+0x1de>
		case PRINT_FLOAT:
			if (current_data->type == DISPLAY_TYPE_FLOAT) {
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	799b      	ldrb	r3, [r3, #6]
 80031b0:	2b09      	cmp	r3, #9
 80031b2:	d136      	bne.n	8003222 <MAX72_Update_Data+0x1e2>
				MAX72_Print_Float(*(float *)current_data->data, current_data->float_decimals, current_data->string_settings);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	79da      	ldrb	r2, [r3, #7]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	795b      	ldrb	r3, [r3, #5]
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	eeb0 0a67 	vmov.f32	s0, s15
 80031cc:	f000 fb7a 	bl	80038c4 <MAX72_Print_Float>
			}
			break;
 80031d0:	e027      	b.n	8003222 <MAX72_Update_Data+0x1e2>
		case PRINT_STRING:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	799b      	ldrb	r3, [r3, #6]
 80031d6:	2b0a      	cmp	r3, #10
 80031d8:	d125      	bne.n	8003226 <MAX72_Update_Data+0x1e6>
				MAX72_Print_String((const char *)current_data->data, current_data->string_settings);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	795b      	ldrb	r3, [r3, #5]
 80031e2:	4619      	mov	r1, r3
 80031e4:	4610      	mov	r0, r2
 80031e6:	f000 f891 	bl	800330c <MAX72_Print_String>
			}
			break;
 80031ea:	e01c      	b.n	8003226 <MAX72_Update_Data+0x1e6>
		case PRINT_SCROLL:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	799b      	ldrb	r3, [r3, #6]
 80031f0:	2b0a      	cmp	r3, #10
 80031f2:	d11a      	bne.n	800322a <MAX72_Update_Data+0x1ea>
				// update scroll_state.updated if text has changed
				if (strcmp(scroll_state.text, (const char *)current_data->data) != 0) {
 80031f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <MAX72_Update_Data+0x1f4>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f7fd f806 	bl	8000210 <strcmp>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00f      	beq.n	800322a <MAX72_Update_Data+0x1ea>
					scroll_state.updated = 1; // Indica che il testo è stato aggiornato
 800320a:	4b0a      	ldr	r3, [pc, #40]	@ (8003234 <MAX72_Update_Data+0x1f4>)
 800320c:	2201      	movs	r2, #1
 800320e:	739a      	strb	r2, [r3, #14]

					scroll_state.text = (const char *)current_data->data;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a07      	ldr	r2, [pc, #28]	@ (8003234 <MAX72_Update_Data+0x1f4>)
 8003216:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 8003218:	e007      	b.n	800322a <MAX72_Update_Data+0x1ea>
		return; // Non ci sono dati da visualizzare
 800321a:	bf00      	nop
 800321c:	e006      	b.n	800322c <MAX72_Update_Data+0x1ec>
			break;
 800321e:	bf00      	nop
 8003220:	e004      	b.n	800322c <MAX72_Update_Data+0x1ec>
			break;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <MAX72_Update_Data+0x1ec>
			break;
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <MAX72_Update_Data+0x1ec>
			break;
 800322a:	bf00      	nop
	}
}
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000b0c 	.word	0x20000b0c

08003238 <MAX72_Change_Data>:

void MAX72_Change_Data(display_t *display, uint8_t force_change) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
	if (display->data_count == 0 || (!display->change_enabled && !force_change)) {
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d055      	beq.n	80032fa <MAX72_Change_Data+0xc2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <MAX72_Change_Data+0x26>
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d04d      	beq.n	80032fa <MAX72_Change_Data+0xc2>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
	}

	uint32_t currentTime = HAL_GetTick();
 800325e:	f000 ff35 	bl	80040cc <HAL_GetTick>
 8003262:	60f8      	str	r0, [r7, #12]
	if (!force_change && currentTime - display->last_change_time < (uint32_t)display->data_duration * 1000) {
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10d      	bne.n	8003286 <MAX72_Change_Data+0x4e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	1ad2      	subs	r2, r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003278:	4619      	mov	r1, r3
 800327a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	429a      	cmp	r2, r3
 8003284:	d33b      	bcc.n	80032fe <MAX72_Change_Data+0xc6>
		return;
	}
	display->current_index = (display->current_index + 1) % display->data_count;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800328c:	3301      	adds	r3, #1
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8003294:	fb93 f1f2 	sdiv	r1, r3, r2
 8003298:	fb01 f202 	mul.w	r2, r1, r2
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	display->last_change_time = currentTime;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	649a      	str	r2, [r3, #72]	@ 0x48

	if (display->data[display->current_index].settings == PRINT_SCROLL) {
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	791b      	ldrb	r3, [r3, #4]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d113      	bne.n	80032e6 <MAX72_Change_Data+0xae>
		if(!scroll_state.enabled || display->data_count > 1){
 80032be:	4b12      	ldr	r3, [pc, #72]	@ (8003308 <MAX72_Change_Data+0xd0>)
 80032c0:	7b5b      	ldrb	r3, [r3, #13]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d004      	beq.n	80032d0 <MAX72_Change_Data+0x98>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d910      	bls.n	80032f2 <MAX72_Change_Data+0xba>
		MAX72_Scroll_Start_IT((const char *)display->data[display->current_index].data);}
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d6:	461a      	mov	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fc5e 	bl	8003ba0 <MAX72_Scroll_Start_IT>
 80032e4:	e005      	b.n	80032f2 <MAX72_Change_Data+0xba>
	} else if (scroll_state.enabled) {
 80032e6:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <MAX72_Change_Data+0xd0>)
 80032e8:	7b5b      	ldrb	r3, [r3, #13]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MAX72_Change_Data+0xba>
		MAX72_Scroll_Stop();
 80032ee:	f000 fcbd 	bl	8003c6c <MAX72_Scroll_Stop>
	}

	MAX72_Update_Data(display); // Aggiorna i dati visualizzati)
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff fea4 	bl	8003040 <MAX72_Update_Data>
 80032f8:	e002      	b.n	8003300 <MAX72_Change_Data+0xc8>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <MAX72_Change_Data+0xc8>
		return;
 80032fe:	bf00      	nop
}
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000b0c 	.word	0x20000b0c

0800330c <MAX72_Print_String>:
//        HAL_Delay(500);
//    }
//}

void MAX72_Print_String(const char *str, uint8_t settings)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b094      	sub	sp, #80	@ 0x50
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	70fb      	strb	r3, [r7, #3]
    uint8_t len = strlen(str);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7fc ffd9 	bl	80002d0 <strlen>
 800331e:	4603      	mov	r3, r0
 8003320:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    if (settings == MINIDIGITS) {
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	2b02      	cmp	r3, #2
 8003328:	f040 8119 	bne.w	800355e <MAX72_Print_String+0x252>
    	char padded[8] = {0};
 800332c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
    	        // Calcola padding all'inizio (right align)
    	        uint8_t start = (len < 8) ? (8 - len) : 0;
 8003336:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800333a:	2b07      	cmp	r3, #7
 800333c:	d805      	bhi.n	800334a <MAX72_Print_String+0x3e>
 800333e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003342:	f1c3 0308 	rsb	r3, r3, #8
 8003346:	b2db      	uxtb	r3, r3
 8003348:	e000      	b.n	800334c <MAX72_Print_String+0x40>
 800334a:	2300      	movs	r3, #0
 800334c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    	        // Spazi iniziali
    	        for (uint8_t i = 0; i < start; i++)
 8003350:	2300      	movs	r3, #0
 8003352:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8003356:	e00b      	b.n	8003370 <MAX72_Print_String+0x64>
    	            padded[i] = ' ';
 8003358:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800335c:	3350      	adds	r3, #80	@ 0x50
 800335e:	443b      	add	r3, r7
 8003360:	2220      	movs	r2, #32
 8003362:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < start; i++)
 8003366:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800336a:	3301      	adds	r3, #1
 800336c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8003370:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003374:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003378:	429a      	cmp	r2, r3
 800337a:	d3ed      	bcc.n	8003358 <MAX72_Print_String+0x4c>
    	        // Copia la stringa
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 800337c:	2300      	movs	r3, #0
 800337e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8003382:	e012      	b.n	80033aa <MAX72_Print_String+0x9e>
    	            padded[start + i] = str[i];
 8003384:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	441a      	add	r2, r3
 800338c:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8003390:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003394:	440b      	add	r3, r1
 8003396:	7812      	ldrb	r2, [r2, #0]
 8003398:	3350      	adds	r3, #80	@ 0x50
 800339a:	443b      	add	r3, r7
 800339c:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 80033a0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80033a4:	3301      	adds	r3, #1
 80033a6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80033aa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80033ae:	2b07      	cmp	r3, #7
 80033b0:	d805      	bhi.n	80033be <MAX72_Print_String+0xb2>
 80033b2:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80033b6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d3e2      	bcc.n	8003384 <MAX72_Print_String+0x78>

        char reversed[8];
        for (uint8_t i = 0; i < 8; i++)
 80033be:	2300      	movs	r3, #0
 80033c0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80033c4:	e012      	b.n	80033ec <MAX72_Print_String+0xe0>
            reversed[i] = padded[7 - i];
 80033c6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80033ca:	f1c3 0207 	rsb	r2, r3, #7
 80033ce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80033d2:	3250      	adds	r2, #80	@ 0x50
 80033d4:	443a      	add	r2, r7
 80033d6:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80033da:	3350      	adds	r3, #80	@ 0x50
 80033dc:	443b      	add	r3, r7
 80033de:	f803 2c28 	strb.w	r2, [r3, #-40]
        for (uint8_t i = 0; i < 8; i++)
 80033e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80033e6:	3301      	adds	r3, #1
 80033e8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80033ec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80033f0:	2b07      	cmp	r3, #7
 80033f2:	d9e8      	bls.n	80033c6 <MAX72_Print_String+0xba>

        for (uint8_t row = 0; row < 8; row++) {
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80033fa:	e0aa      	b.n	8003552 <MAX72_Print_String+0x246>
            uint8_t pat[4] = {0};
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24

            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8003400:	2300      	movs	r3, #0
 8003402:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8003406:	e090      	b.n	800352a <MAX72_Print_String+0x21e>
                uint8_t c1 = reversed[byte_idx * 2];
 8003408:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	3350      	adds	r3, #80	@ 0x50
 8003410:	443b      	add	r3, r7
 8003412:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003416:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t c2 = reversed[byte_idx * 2 + 1];
 800341a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	3301      	adds	r3, #1
 8003422:	3350      	adds	r3, #80	@ 0x50
 8003424:	443b      	add	r3, r7
 8003426:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800342a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                uint8_t char1_pattern = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                uint8_t char2_pattern = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                if (c1 >= '0' && c1 <= '9')
 800343a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800343e:	2b2f      	cmp	r3, #47	@ 0x2f
 8003440:	d913      	bls.n	800346a <MAX72_Print_String+0x15e>
 8003442:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003446:	2b39      	cmp	r3, #57	@ 0x39
 8003448:	d80f      	bhi.n	800346a <MAX72_Print_String+0x15e>
                    char1_pattern = DIGITS[c1 - '0' + 2][row] & 0x07;
 800344a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800344e:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 8003452:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003456:	49cd      	ldr	r1, [pc, #820]	@ (800378c <MAX72_Print_String+0x480>)
 8003458:	00d2      	lsls	r2, r2, #3
 800345a:	440a      	add	r2, r1
 800345c:	4413      	add	r3, r2
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8003468:	e019      	b.n	800349e <MAX72_Print_String+0x192>
                else if (c1 == '-')
 800346a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800346e:	2b2d      	cmp	r3, #45	@ 0x2d
 8003470:	d109      	bne.n	8003486 <MAX72_Print_String+0x17a>
                    char1_pattern = DIGITS[1][row] & 0x07;
 8003472:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003476:	4ac5      	ldr	r2, [pc, #788]	@ (800378c <MAX72_Print_String+0x480>)
 8003478:	4413      	add	r3, r2
 800347a:	7a1b      	ldrb	r3, [r3, #8]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8003484:	e00b      	b.n	800349e <MAX72_Print_String+0x192>
                else if (c1 == '.')
 8003486:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800348a:	2b2e      	cmp	r3, #46	@ 0x2e
 800348c:	d107      	bne.n	800349e <MAX72_Print_String+0x192>
					char1_pattern = DIGITS[0][row] & 0x07;
 800348e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003492:	4abe      	ldr	r2, [pc, #760]	@ (800378c <MAX72_Print_String+0x480>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

                if (c2 >= '0' && c2 <= '9')
 800349e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80034a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80034a4:	d913      	bls.n	80034ce <MAX72_Print_String+0x1c2>
 80034a6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80034aa:	2b39      	cmp	r3, #57	@ 0x39
 80034ac:	d80f      	bhi.n	80034ce <MAX72_Print_String+0x1c2>
                    char2_pattern = DIGITS[c2 - '0' + 2][row] & 0x07;
 80034ae:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80034b2:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 80034b6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80034ba:	49b4      	ldr	r1, [pc, #720]	@ (800378c <MAX72_Print_String+0x480>)
 80034bc:	00d2      	lsls	r2, r2, #3
 80034be:	440a      	add	r2, r1
 80034c0:	4413      	add	r3, r2
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 80034cc:	e019      	b.n	8003502 <MAX72_Print_String+0x1f6>
                else if (c2 == '-')
 80034ce:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80034d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80034d4:	d109      	bne.n	80034ea <MAX72_Print_String+0x1de>
                    char2_pattern = DIGITS[1][row] & 0x07;
 80034d6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80034da:	4aac      	ldr	r2, [pc, #688]	@ (800378c <MAX72_Print_String+0x480>)
 80034dc:	4413      	add	r3, r2
 80034de:	7a1b      	ldrb	r3, [r3, #8]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 80034e8:	e00b      	b.n	8003502 <MAX72_Print_String+0x1f6>
                else if (c2 == '.')
 80034ea:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80034ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80034f0:	d107      	bne.n	8003502 <MAX72_Print_String+0x1f6>
                	char2_pattern = DIGITS[0][row] & 0x07;
 80034f2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80034f6:	4aa5      	ldr	r2, [pc, #660]	@ (800378c <MAX72_Print_String+0x480>)
 80034f8:	5cd3      	ldrb	r3, [r2, r3]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                pat[byte_idx] = (char1_pattern << 4) | char2_pattern;
 8003502:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	b25a      	sxtb	r2, r3
 800350a:	f997 3049 	ldrsb.w	r3, [r7, #73]	@ 0x49
 800350e:	4313      	orrs	r3, r2
 8003510:	b25a      	sxtb	r2, r3
 8003512:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	3350      	adds	r3, #80	@ 0x50
 800351a:	443b      	add	r3, r7
 800351c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8003520:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003524:	3301      	adds	r3, #1
 8003526:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800352a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800352e:	2b03      	cmp	r3, #3
 8003530:	f67f af6a 	bls.w	8003408 <MAX72_Print_String+0xfc>
            }

            MAX72_SendRow(row + 1, pat);
 8003534:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003538:	3301      	adds	r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fcfc 	bl	8002f40 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8003548:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800354c:	3301      	adds	r3, #1
 800354e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8003552:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003556:	2b07      	cmp	r3, #7
 8003558:	f67f af50 	bls.w	80033fc <MAX72_Print_String+0xf0>
            for (uint8_t i = 0; i < 4; i++)
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
            MAX72_SendRow(row + 1, pat);
        }
    }
}
 800355c:	e150      	b.n	8003800 <MAX72_Print_String+0x4f4>
    else if (settings == FLOAT) {
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	2b01      	cmp	r3, #1
 8003562:	f040 80d1 	bne.w	8003708 <MAX72_Print_String+0x3fc>
        char reversed[4] = {0};
 8003566:	2300      	movs	r3, #0
 8003568:	623b      	str	r3, [r7, #32]
        int8_t dot_pos = -1;
 800356a:	23ff      	movs	r3, #255	@ 0xff
 800356c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < len; i++)
 8003570:	2300      	movs	r3, #0
 8003572:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003576:	e010      	b.n	800359a <MAX72_Print_String+0x28e>
            if (str[i] == '.') { dot_pos = i; break; }
 8003578:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	4413      	add	r3, r2
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b2e      	cmp	r3, #46	@ 0x2e
 8003584:	d104      	bne.n	8003590 <MAX72_Print_String+0x284>
 8003586:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800358a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 800358e:	e00a      	b.n	80035a6 <MAX72_Print_String+0x29a>
        for (uint8_t i = 0; i < len; i++)
 8003590:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003594:	3301      	adds	r3, #1
 8003596:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800359a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800359e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d3e8      	bcc.n	8003578 <MAX72_Print_String+0x26c>
        char no_dot_str[5] = {0};
 80035a6:	f107 0318 	add.w	r3, r7, #24
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	711a      	strb	r2, [r3, #4]
        uint8_t no_dot_len = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80035bc:	e019      	b.n	80035f2 <MAX72_Print_String+0x2e6>
            if (str[i] != '.') no_dot_str[no_dot_len++] = str[i];
 80035be:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80035ca:	d00d      	beq.n	80035e8 <MAX72_Print_String+0x2dc>
 80035cc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	441a      	add	r2, r3
 80035d4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80035d8:	1c59      	adds	r1, r3, #1
 80035da:	f887 1046 	strb.w	r1, [r7, #70]	@ 0x46
 80035de:	7812      	ldrb	r2, [r2, #0]
 80035e0:	3350      	adds	r3, #80	@ 0x50
 80035e2:	443b      	add	r3, r7
 80035e4:	f803 2c38 	strb.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 80035e8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80035ec:	3301      	adds	r3, #1
 80035ee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80035f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80035f6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d203      	bcs.n	8003606 <MAX72_Print_String+0x2fa>
 80035fe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003602:	2b03      	cmp	r3, #3
 8003604:	d9db      	bls.n	80035be <MAX72_Print_String+0x2b2>
        dot_pos = no_dot_len - dot_pos - 1;
 8003606:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800360a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < 4; i++)
 800361a:	2300      	movs	r3, #0
 800361c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8003620:	e01c      	b.n	800365c <MAX72_Print_String+0x350>
            reversed[i] = (i < no_dot_len) ? no_dot_str[no_dot_len - 1 - i] : ' ';
 8003622:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8003626:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800362a:	429a      	cmp	r2, r3
 800362c:	d20a      	bcs.n	8003644 <MAX72_Print_String+0x338>
 800362e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003632:	1e5a      	subs	r2, r3, #1
 8003634:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	3350      	adds	r3, #80	@ 0x50
 800363c:	443b      	add	r3, r7
 800363e:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8003642:	e000      	b.n	8003646 <MAX72_Print_String+0x33a>
 8003644:	2220      	movs	r2, #32
 8003646:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800364a:	3350      	adds	r3, #80	@ 0x50
 800364c:	443b      	add	r3, r7
 800364e:	f803 2c30 	strb.w	r2, [r3, #-48]
        for (uint8_t i = 0; i < 4; i++)
 8003652:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003656:	3301      	adds	r3, #1
 8003658:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800365c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003660:	2b03      	cmp	r3, #3
 8003662:	d9de      	bls.n	8003622 <MAX72_Print_String+0x316>
        for (uint8_t row = 0; row < 8; row++) {
 8003664:	2300      	movs	r3, #0
 8003666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800366a:	e048      	b.n	80036fe <MAX72_Print_String+0x3f2>
            for (uint8_t i = 0; i < 4; i++)
 800366c:	2300      	movs	r3, #0
 800366e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003672:	e01e      	b.n	80036b2 <MAX72_Print_String+0x3a6>
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 8003674:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003678:	3350      	adds	r3, #80	@ 0x50
 800367a:	443b      	add	r3, r7
 800367c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003680:	f1a3 0220 	sub.w	r2, r3, #32
 8003684:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 8003688:	4841      	ldr	r0, [pc, #260]	@ (8003790 <MAX72_Print_String+0x484>)
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4413      	add	r3, r2
 8003690:	4403      	add	r3, r0
 8003692:	440b      	add	r3, r1
 8003694:	3301      	adds	r3, #1
 8003696:	781a      	ldrb	r2, [r3, #0]
 8003698:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800369c:	00d2      	lsls	r2, r2, #3
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	3350      	adds	r3, #80	@ 0x50
 80036a2:	443b      	add	r3, r7
 80036a4:	f803 2c3c 	strb.w	r2, [r3, #-60]
            for (uint8_t i = 0; i < 4; i++)
 80036a8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80036ac:	3301      	adds	r3, #1
 80036ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80036b2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d9dc      	bls.n	8003674 <MAX72_Print_String+0x368>
            if (row == 0) pat[dot_pos] |= 0b010;
 80036ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10e      	bne.n	80036e0 <MAX72_Print_String+0x3d4>
 80036c2:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 80036c6:	3350      	adds	r3, #80	@ 0x50
 80036c8:	443b      	add	r3, r7
 80036ca:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 80036ce:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 80036d2:	f042 0202 	orr.w	r2, r2, #2
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	3350      	adds	r3, #80	@ 0x50
 80036da:	443b      	add	r3, r7
 80036dc:	f803 2c3c 	strb.w	r2, [r3, #-60]
            MAX72_SendRow(row + 1, pat);
 80036e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80036e4:	3301      	adds	r3, #1
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f107 0214 	add.w	r2, r7, #20
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fc26 	bl	8002f40 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 80036f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80036f8:	3301      	adds	r3, #1
 80036fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003702:	2b07      	cmp	r3, #7
 8003704:	d9b2      	bls.n	800366c <MAX72_Print_String+0x360>
}
 8003706:	e07b      	b.n	8003800 <MAX72_Print_String+0x4f4>
        char reversed[4] = {0};
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 800370c:	2300      	movs	r3, #0
 800370e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8003712:	e014      	b.n	800373e <MAX72_Print_String+0x432>
            reversed[i] = str[len - 1 - i];
 8003714:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003718:	1e5a      	subs	r2, r3, #1
 800371a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	461a      	mov	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	441a      	add	r2, r3
 8003726:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800372a:	7812      	ldrb	r2, [r2, #0]
 800372c:	3350      	adds	r3, #80	@ 0x50
 800372e:	443b      	add	r3, r7
 8003730:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 8003734:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003738:	3301      	adds	r3, #1
 800373a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800373e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003742:	2b03      	cmp	r3, #3
 8003744:	d805      	bhi.n	8003752 <MAX72_Print_String+0x446>
 8003746:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800374a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800374e:	429a      	cmp	r2, r3
 8003750:	d3e0      	bcc.n	8003714 <MAX72_Print_String+0x408>
        for (uint8_t i = len; i < 4; i++)
 8003752:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003756:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 800375a:	e00b      	b.n	8003774 <MAX72_Print_String+0x468>
            reversed[i] = ' ';
 800375c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003760:	3350      	adds	r3, #80	@ 0x50
 8003762:	443b      	add	r3, r7
 8003764:	2220      	movs	r2, #32
 8003766:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = len; i < 4; i++)
 800376a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800376e:	3301      	adds	r3, #1
 8003770:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8003774:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003778:	2b03      	cmp	r3, #3
 800377a:	d9ef      	bls.n	800375c <MAX72_Print_String+0x450>
        for (uint8_t row = 0; row < 8; row++) {
 800377c:	2300      	movs	r3, #0
 800377e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003782:	e039      	b.n	80037f8 <MAX72_Print_String+0x4ec>
            for (uint8_t i = 0; i < 4; i++)
 8003784:	2300      	movs	r3, #0
 8003786:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800378a:	e022      	b.n	80037d2 <MAX72_Print_String+0x4c6>
 800378c:	20000360 	.word	0x20000360
 8003790:	20000008 	.word	0x20000008
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 8003794:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003798:	3350      	adds	r3, #80	@ 0x50
 800379a:	443b      	add	r3, r7
 800379c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80037a0:	f1a3 0220 	sub.w	r2, r3, #32
 80037a4:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 80037a8:	4817      	ldr	r0, [pc, #92]	@ (8003808 <MAX72_Print_String+0x4fc>)
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	4403      	add	r3, r0
 80037b2:	440b      	add	r3, r1
 80037b4:	3301      	adds	r3, #1
 80037b6:	781a      	ldrb	r2, [r3, #0]
 80037b8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80037bc:	00d2      	lsls	r2, r2, #3
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	3350      	adds	r3, #80	@ 0x50
 80037c2:	443b      	add	r3, r7
 80037c4:	f803 2c44 	strb.w	r2, [r3, #-68]
            for (uint8_t i = 0; i < 4; i++)
 80037c8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80037cc:	3301      	adds	r3, #1
 80037ce:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80037d2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d9dc      	bls.n	8003794 <MAX72_Print_String+0x488>
            MAX72_SendRow(row + 1, pat);
 80037da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80037de:	3301      	adds	r3, #1
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f107 020c 	add.w	r2, r7, #12
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fba9 	bl	8002f40 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 80037ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80037f2:	3301      	adds	r3, #1
 80037f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80037f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80037fc:	2b07      	cmp	r3, #7
 80037fe:	d9c1      	bls.n	8003784 <MAX72_Print_String+0x478>
}
 8003800:	bf00      	nop
 8003802:	3750      	adds	r7, #80	@ 0x50
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20000008 	.word	0x20000008

0800380c <MAX72_Print_Int>:


void MAX72_Print_Int(int num, uint8_t minidigits)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	70fb      	strb	r3, [r7, #3]
    char sign = num < 0 ? '-' : '\0';
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	da01      	bge.n	8003822 <MAX72_Print_Int+0x16>
 800381e:	232d      	movs	r3, #45	@ 0x2d
 8003820:	e000      	b.n	8003824 <MAX72_Print_Int+0x18>
 8003822:	2300      	movs	r3, #0
 8003824:	74fb      	strb	r3, [r7, #19]
    unsigned u = (num < 0) ? (unsigned) (-num) : (unsigned) num;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	bfb8      	it	lt
 800382c:	425b      	neglt	r3, r3
 800382e:	617b      	str	r3, [r7, #20]

    char str[9]; // 8 digits + null terminator
    if (minidigits) {
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <MAX72_Print_Int+0x46>
        // segno + 7 cifre (tot 8): taglia alle ultime 7
        u %= sign=='-'?10000000u:100000000u;
 8003836:	7cfb      	ldrb	r3, [r7, #19]
 8003838:	2b2d      	cmp	r3, #45	@ 0x2d
 800383a:	d101      	bne.n	8003840 <MAX72_Print_Int+0x34>
 800383c:	4b1d      	ldr	r3, [pc, #116]	@ (80038b4 <MAX72_Print_Int+0xa8>)
 800383e:	e000      	b.n	8003842 <MAX72_Print_Int+0x36>
 8003840:	4b1d      	ldr	r3, [pc, #116]	@ (80038b8 <MAX72_Print_Int+0xac>)
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	fbb2 f1f3 	udiv	r1, r2, r3
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	e00e      	b.n	8003870 <MAX72_Print_Int+0x64>
    } else {
        // segno + 3 cifre (tot 4): taglia alle ultime 3
        u %= sign=='-'?1000u:10000u;
 8003852:	7cfb      	ldrb	r3, [r7, #19]
 8003854:	2b2d      	cmp	r3, #45	@ 0x2d
 8003856:	d102      	bne.n	800385e <MAX72_Print_Int+0x52>
 8003858:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800385c:	e001      	b.n	8003862 <MAX72_Print_Int+0x56>
 800385e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	fbb2 f1f3 	udiv	r1, r2, r3
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	617b      	str	r3, [r7, #20]
    }

    if (sign == '-'){
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	2b2d      	cmp	r3, #45	@ 0x2d
 8003874:	d107      	bne.n	8003886 <MAX72_Print_Int+0x7a>
    	snprintf(str, sizeof(str), "-%u", u);
 8003876:	f107 0008 	add.w	r0, r7, #8
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	4a0f      	ldr	r2, [pc, #60]	@ (80038bc <MAX72_Print_Int+0xb0>)
 800387e:	2109      	movs	r1, #9
 8003880:	f006 f9a2 	bl	8009bc8 <sniprintf>
 8003884:	e006      	b.n	8003894 <MAX72_Print_Int+0x88>
    } else {
    	snprintf(str, sizeof(str), "%u", u);
 8003886:	f107 0008 	add.w	r0, r7, #8
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	4a0c      	ldr	r2, [pc, #48]	@ (80038c0 <MAX72_Print_Int+0xb4>)
 800388e:	2109      	movs	r1, #9
 8003890:	f006 f99a 	bl	8009bc8 <sniprintf>
    }


    MAX72_Print_String(str, minidigits ? MINIDIGITS : NO_SETTINGS);
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MAX72_Print_Int+0x92>
 800389a:	2202      	movs	r2, #2
 800389c:	e000      	b.n	80038a0 <MAX72_Print_Int+0x94>
 800389e:	2200      	movs	r2, #0
 80038a0:	f107 0308 	add.w	r3, r7, #8
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fd30 	bl	800330c <MAX72_Print_String>
//    MAX72_Print_String(str);
}
 80038ac:	bf00      	nop
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	00989680 	.word	0x00989680
 80038b8:	05f5e100 	.word	0x05f5e100
 80038bc:	0800bff8 	.word	0x0800bff8
 80038c0:	0800bffc 	.word	0x0800bffc

080038c4 <MAX72_Print_Float>:

void MAX72_Print_Float(float num, uint8_t decimals, uint8_t minidigits) {
 80038c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038c8:	b095      	sub	sp, #84	@ 0x54
 80038ca:	af04      	add	r7, sp, #16
 80038cc:	ed87 0a01 	vstr	s0, [r7, #4]
 80038d0:	4603      	mov	r3, r0
 80038d2:	460a      	mov	r2, r1
 80038d4:	70fb      	strb	r3, [r7, #3]
 80038d6:	4613      	mov	r3, r2
 80038d8:	70bb      	strb	r3, [r7, #2]
 80038da:	466b      	mov	r3, sp
 80038dc:	461e      	mov	r6, r3
    uint8_t max_chars = 8;
 80038de:	2308      	movs	r3, #8
 80038e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char str[max_chars + 1]; // +1 for null terminator
 80038e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038e8:	1c59      	adds	r1, r3, #1
 80038ea:	1e4b      	subs	r3, r1, #1
 80038ec:	623b      	str	r3, [r7, #32]
 80038ee:	460a      	mov	r2, r1
 80038f0:	2300      	movs	r3, #0
 80038f2:	4690      	mov	r8, r2
 80038f4:	4699      	mov	r9, r3
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800390a:	460a      	mov	r2, r1
 800390c:	2300      	movs	r3, #0
 800390e:	4614      	mov	r4, r2
 8003910:	461d      	mov	r5, r3
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	00eb      	lsls	r3, r5, #3
 800391c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003920:	00e2      	lsls	r2, r4, #3
 8003922:	460b      	mov	r3, r1
 8003924:	3307      	adds	r3, #7
 8003926:	08db      	lsrs	r3, r3, #3
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	ebad 0d03 	sub.w	sp, sp, r3
 800392e:	ab04      	add	r3, sp, #16
 8003930:	3300      	adds	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]

    // Gestione del segno
    char sign = (num < 0) ? '-' : '\0';
 8003934:	edd7 7a01 	vldr	s15, [r7, #4]
 8003938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003940:	d501      	bpl.n	8003946 <MAX72_Print_Float+0x82>
 8003942:	232d      	movs	r3, #45	@ 0x2d
 8003944:	e000      	b.n	8003948 <MAX72_Print_Float+0x84>
 8003946:	2300      	movs	r3, #0
 8003948:	76fb      	strb	r3, [r7, #27]
    float abs_num = (num < 0) ? -num : num;
 800394a:	edd7 7a01 	vldr	s15, [r7, #4]
 800394e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003956:	d504      	bpl.n	8003962 <MAX72_Print_Float+0x9e>
 8003958:	edd7 7a01 	vldr	s15, [r7, #4]
 800395c:	eef1 7a67 	vneg.f32	s15, s15
 8003960:	e001      	b.n	8003966 <MAX72_Print_Float+0xa2>
 8003962:	edd7 7a01 	vldr	s15, [r7, #4]
 8003966:	edc7 7a05 	vstr	s15, [r7, #20]

    // Separa parte intera e decimale
    unsigned int_part = (unsigned) abs_num;
 800396a:	edd7 7a05 	vldr	s15, [r7, #20]
 800396e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003972:	ee17 3a90 	vmov	r3, s15
 8003976:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float frac_part = abs_num - int_part;
 8003978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003982:	ed97 7a05 	vldr	s14, [r7, #20]
 8003986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800398a:	edc7 7a04 	vstr	s15, [r7, #16]


    // Calcola quanti caratteri servono per la parte intera
    uint8_t int_digits = (int_part == 0) ? 0 : 1;
 800398e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    unsigned temp = int_part;
 800399e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a0:	637b      	str	r3, [r7, #52]	@ 0x34
    while (temp >= 10) {
 80039a2:	e00a      	b.n	80039ba <MAX72_Print_Float+0xf6>
        temp /= 10;
 80039a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a6:	4a5d      	ldr	r2, [pc, #372]	@ (8003b1c <MAX72_Print_Float+0x258>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	08db      	lsrs	r3, r3, #3
 80039ae:	637b      	str	r3, [r7, #52]	@ 0x34
        int_digits++;
 80039b0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80039b4:	3301      	adds	r3, #1
 80039b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    while (temp >= 10) {
 80039ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039bc:	2b09      	cmp	r3, #9
 80039be:	d8f1      	bhi.n	80039a4 <MAX72_Print_Float+0xe0>
    }

    // Calcola spazio disponibile per decimali
    uint8_t available_for_decimals = max_chars - (sign != '\0' ? 1 : 0) - int_digits - 1; // -1 per il punto decimale
 80039c0:	7efb      	ldrb	r3, [r7, #27]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf14      	ite	ne
 80039c6:	2301      	movne	r3, #1
 80039c8:	2300      	moveq	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]

    // Limita i decimali al minimo tra quelli richiesti e quelli disponibili
    uint8_t actual_decimals = (decimals < available_for_decimals) ? decimals : available_for_decimals;
 80039e2:	7bfa      	ldrb	r2, [r7, #15]
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	4293      	cmp	r3, r2
 80039e8:	bf28      	it	cs
 80039ea:	4613      	movcs	r3, r2
 80039ec:	73bb      	strb	r3, [r7, #14]

    // Se non c'è spazio nemmeno per un decimale, mostra solo la parte intera
    if (available_for_decimals == 0) {
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11b      	bne.n	8003a2c <MAX72_Print_Float+0x168>
        if (int_part == 0) {
 80039f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <MAX72_Print_Float+0x144>
            snprintf(str, sizeof(str), "0");
 80039fa:	460b      	mov	r3, r1
 80039fc:	4a48      	ldr	r2, [pc, #288]	@ (8003b20 <MAX72_Print_Float+0x25c>)
 80039fe:	4619      	mov	r1, r3
 8003a00:	69f8      	ldr	r0, [r7, #28]
 8003a02:	f006 f8e1 	bl	8009bc8 <sniprintf>
 8003a06:	e079      	b.n	8003afc <MAX72_Print_Float+0x238>
        } else {
            if (sign != '\0') {
 8003a08:	7efb      	ldrb	r3, [r7, #27]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <MAX72_Print_Float+0x15c>
                snprintf(str, sizeof(str), "%c%u", sign, int_part);
 8003a0e:	7efa      	ldrb	r2, [r7, #27]
 8003a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	4a43      	ldr	r2, [pc, #268]	@ (8003b24 <MAX72_Print_Float+0x260>)
 8003a18:	69f8      	ldr	r0, [r7, #28]
 8003a1a:	f006 f8d5 	bl	8009bc8 <sniprintf>
 8003a1e:	e06d      	b.n	8003afc <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u", int_part);
 8003a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a22:	4a41      	ldr	r2, [pc, #260]	@ (8003b28 <MAX72_Print_Float+0x264>)
 8003a24:	69f8      	ldr	r0, [r7, #28]
 8003a26:	f006 f8cf 	bl	8009bc8 <sniprintf>
 8003a2a:	e067      	b.n	8003afc <MAX72_Print_Float+0x238>
            }
        }
    } else {
        // Calcola il moltiplicatore per i decimali
        unsigned multiplier = 1;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8003a30:	2300      	movs	r3, #0
 8003a32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003a36:	e00a      	b.n	8003a4e <MAX72_Print_Float+0x18a>
            multiplier *= 10;
 8003a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8003a44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003a4e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003a52:	7bbb      	ldrb	r3, [r7, #14]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d3ef      	bcc.n	8003a38 <MAX72_Print_Float+0x174>
        }

        // Arrotonda la parte frazionaria
        unsigned frac_digits = (unsigned) (frac_part * multiplier + 0.5f);
 8003a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a62:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a76:	ee17 3a90 	vmov	r3, s15
 8003a7a:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Gestisce il caso di overflow nell'arrotondamento
        if (frac_digits >= multiplier) {
 8003a7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d304      	bcc.n	8003a8e <MAX72_Print_Float+0x1ca>
            int_part++;
 8003a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a86:	3301      	adds	r3, #1
 8003a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
            frac_digits = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Costruisce la stringa
        if (int_part == 0) {
 8003a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d118      	bne.n	8003ac6 <MAX72_Print_Float+0x202>
            // Omette la parte intera se è 0
            if (sign != '\0') {
 8003a94:	7efb      	ldrb	r3, [r7, #27]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00c      	beq.n	8003ab4 <MAX72_Print_Float+0x1f0>
                snprintf(str, sizeof(str), "%c.%0*u", sign, actual_decimals, frac_digits);
 8003a9a:	4608      	mov	r0, r1
 8003a9c:	7ef9      	ldrb	r1, [r7, #27]
 8003a9e:	7bbb      	ldrb	r3, [r7, #14]
 8003aa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aa2:	9201      	str	r2, [sp, #4]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4a20      	ldr	r2, [pc, #128]	@ (8003b2c <MAX72_Print_Float+0x268>)
 8003aaa:	4601      	mov	r1, r0
 8003aac:	69f8      	ldr	r0, [r7, #28]
 8003aae:	f006 f88b 	bl	8009bc8 <sniprintf>
 8003ab2:	e023      	b.n	8003afc <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), ".%0*u", actual_decimals, frac_digits);
 8003ab4:	7bba      	ldrb	r2, [r7, #14]
 8003ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	4613      	mov	r3, r2
 8003abc:	4a1c      	ldr	r2, [pc, #112]	@ (8003b30 <MAX72_Print_Float+0x26c>)
 8003abe:	69f8      	ldr	r0, [r7, #28]
 8003ac0:	f006 f882 	bl	8009bc8 <sniprintf>
 8003ac4:	e01a      	b.n	8003afc <MAX72_Print_Float+0x238>
            }
        } else {
            // Include la parte intera
            if (sign != '\0') {
 8003ac6:	7efb      	ldrb	r3, [r7, #27]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00e      	beq.n	8003aea <MAX72_Print_Float+0x226>
                snprintf(str, sizeof(str), "%c%u.%0*u", sign, int_part, actual_decimals, frac_digits);
 8003acc:	4608      	mov	r0, r1
 8003ace:	7ef9      	ldrb	r1, [r7, #27]
 8003ad0:	7bbb      	ldrb	r3, [r7, #14]
 8003ad2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ad4:	9202      	str	r2, [sp, #8]
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	460b      	mov	r3, r1
 8003ade:	4a15      	ldr	r2, [pc, #84]	@ (8003b34 <MAX72_Print_Float+0x270>)
 8003ae0:	4601      	mov	r1, r0
 8003ae2:	69f8      	ldr	r0, [r7, #28]
 8003ae4:	f006 f870 	bl	8009bc8 <sniprintf>
 8003ae8:	e008      	b.n	8003afc <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u.%0*u", int_part, actual_decimals, frac_digits);
 8003aea:	7bbb      	ldrb	r3, [r7, #14]
 8003aec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aee:	9201      	str	r2, [sp, #4]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af4:	4a10      	ldr	r2, [pc, #64]	@ (8003b38 <MAX72_Print_Float+0x274>)
 8003af6:	69f8      	ldr	r0, [r7, #28]
 8003af8:	f006 f866 	bl	8009bc8 <sniprintf>
            }
        }
    }

    MAX72_Print_String(str, minidigits ? MINIDIGITS : FLOAT);
 8003afc:	78bb      	ldrb	r3, [r7, #2]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <MAX72_Print_Float+0x242>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e000      	b.n	8003b08 <MAX72_Print_Float+0x244>
 8003b06:	2301      	movs	r3, #1
 8003b08:	4619      	mov	r1, r3
 8003b0a:	69f8      	ldr	r0, [r7, #28]
 8003b0c:	f7ff fbfe 	bl	800330c <MAX72_Print_String>
 8003b10:	46b5      	mov	sp, r6
//    MAX72_Print_String(str);
}
 8003b12:	bf00      	nop
 8003b14:	3744      	adds	r7, #68	@ 0x44
 8003b16:	46bd      	mov	sp, r7
 8003b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b1c:	cccccccd 	.word	0xcccccccd
 8003b20:	0800c000 	.word	0x0800c000
 8003b24:	0800c004 	.word	0x0800c004
 8003b28:	0800bffc 	.word	0x0800bffc
 8003b2c:	0800c00c 	.word	0x0800c00c
 8003b30:	0800c014 	.word	0x0800c014
 8003b34:	0800c01c 	.word	0x0800c01c
 8003b38:	0800c028 	.word	0x0800c028

08003b3c <MAX72_SendFrame>:

// Buffer: 8 rows x DEV_NUM devices
static uint8_t frame[8][DEV_NUM];

// Send full frame to display (reversed order for correct cascade)
static void MAX72_SendFrame(void) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
    for (uint8_t row = 1; row <= 8; row++) {
 8003b42:	2301      	movs	r3, #1
 8003b44:	71fb      	strb	r3, [r7, #7]
 8003b46:	e020      	b.n	8003b8a <MAX72_SendFrame+0x4e>
        uint8_t pattern[DEV_NUM];
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 8003b48:	2300      	movs	r3, #0
 8003b4a:	71bb      	strb	r3, [r7, #6]
 8003b4c:	e011      	b.n	8003b72 <MAX72_SendFrame+0x36>
            pattern[d] = frame[row-1][DEV_NUM - 1 - d];
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	1e59      	subs	r1, r3, #1
 8003b52:	79bb      	ldrb	r3, [r7, #6]
 8003b54:	f1c3 0203 	rsb	r2, r3, #3
 8003b58:	79bb      	ldrb	r3, [r7, #6]
 8003b5a:	4810      	ldr	r0, [pc, #64]	@ (8003b9c <MAX72_SendFrame+0x60>)
 8003b5c:	0089      	lsls	r1, r1, #2
 8003b5e:	4401      	add	r1, r0
 8003b60:	440a      	add	r2, r1
 8003b62:	7812      	ldrb	r2, [r2, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	443b      	add	r3, r7
 8003b68:	f803 2c08 	strb.w	r2, [r3, #-8]
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 8003b6c:	79bb      	ldrb	r3, [r7, #6]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	71bb      	strb	r3, [r7, #6]
 8003b72:	79bb      	ldrb	r3, [r7, #6]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d9ea      	bls.n	8003b4e <MAX72_SendFrame+0x12>
        }
        MAX72_SendRow(row, pattern);
 8003b78:	463a      	mov	r2, r7
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff f9de 	bl	8002f40 <MAX72_SendRow>
    for (uint8_t row = 1; row <= 8; row++) {
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	3301      	adds	r3, #1
 8003b88:	71fb      	strb	r3, [r7, #7]
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d9db      	bls.n	8003b48 <MAX72_SendFrame+0xc>
    }
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000aec 	.word	0x20000aec

08003ba0 <MAX72_Scroll_Start_IT>:
}

scroll_state_t scroll_state = {0};

// Inizializza lo scrolling con un nuovo testo
void MAX72_Scroll_Start_IT(const char *text) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
    // Pulisci il frame
    memset(frame, 0, sizeof(frame));
 8003ba8:	2220      	movs	r2, #32
 8003baa:	2100      	movs	r1, #0
 8003bac:	482d      	ldr	r0, [pc, #180]	@ (8003c64 <MAX72_Scroll_Start_IT+0xc4>)
 8003bae:	f006 f903 	bl	8009db8 <memset>
    MAX72_SendFrame();
 8003bb2:	f7ff ffc3 	bl	8003b3c <MAX72_SendFrame>

    // Inizializza lo stato - CAMBIATO: inizia dal primo carattere per scorrimento inverso
    scroll_state.text = text;
 8003bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6013      	str	r3, [r2, #0]
    scroll_state.current_char_idx = 0; // Inizia dal primo carattere
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	605a      	str	r2, [r3, #4]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003bc2:	4b29      	ldr	r3, [pc, #164]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a28      	ldr	r2, [pc, #160]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003bc8:	6852      	ldr	r2, [r2, #4]
 8003bca:	4413      	add	r3, r2
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b1f      	cmp	r3, #31
 8003bd0:	d90e      	bls.n	8003bf0 <MAX72_Scroll_Start_IT+0x50>
            scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8003bd2:	4b25      	ldr	r3, [pc, #148]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a24      	ldr	r2, [pc, #144]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003bd8:	6852      	ldr	r2, [r2, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	781b      	ldrb	r3, [r3, #0]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003bde:	2b7e      	cmp	r3, #126	@ 0x7e
 8003be0:	d806      	bhi.n	8003bf0 <MAX72_Scroll_Start_IT+0x50>
            ' ' : scroll_state.text[scroll_state.current_char_idx];
 8003be2:	4b21      	ldr	r3, [pc, #132]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a20      	ldr	r2, [pc, #128]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003be8:	6852      	ldr	r2, [r2, #4]
 8003bea:	4413      	add	r3, r2
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	e000      	b.n	8003bf2 <MAX72_Scroll_Start_IT+0x52>
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003bf4:	7213      	strb	r3, [r2, #8]
    scroll_state.current_col = 0;
 8003bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	725a      	strb	r2, [r3, #9]
    scroll_state.spacing_counter = 0;
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	729a      	strb	r2, [r3, #10]
    scroll_state.padding_counter = 0;
 8003c02:	4b19      	ldr	r3, [pc, #100]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	72da      	strb	r2, [r3, #11]
    scroll_state.state = 0; // Inizia con il primo carattere
 8003c08:	4b17      	ldr	r3, [pc, #92]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	731a      	strb	r2, [r3, #12]
    scroll_state.enabled = 1;
 8003c0e:	4b16      	ldr	r3, [pc, #88]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	735a      	strb	r2, [r3, #13]
    scroll_state.updated = 0; // Indica che lo scrolling è stato aggiornato
 8003c14:	4b14      	ldr	r3, [pc, #80]	@ (8003c68 <MAX72_Scroll_Start_IT+0xc8>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	739a      	strb	r2, [r3, #14]

    uint8_t len = strlen(text);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fc fb58 	bl	80002d0 <strlen>
 8003c20:	4603      	mov	r3, r0
 8003c22:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = len * GLYPH_WIDTH + (len - 1) * CHAR_SPACING;
 8003c24:	7bbb      	ldrb	r3, [r7, #14]
 8003c26:	461a      	mov	r2, r3
 8003c28:	0052      	lsls	r2, r2, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	737b      	strb	r3, [r7, #13]
    uint8_t max_chars = ((DEV_NUM * 8 < temp) ? DEV_NUM*8 : temp) - 8; // Padding iniziale di 8 colonne
 8003c34:	7b7b      	ldrb	r3, [r7, #13]
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	bf28      	it	cs
 8003c3a:	2320      	movcs	r3, #32
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	3b08      	subs	r3, #8
 8003c40:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < max_chars; i++) {
 8003c42:	2300      	movs	r3, #0
 8003c44:	73fb      	strb	r3, [r7, #15]
 8003c46:	e004      	b.n	8003c52 <MAX72_Scroll_Start_IT+0xb2>
		MAX72_Scroll_Process(); // Processa il primo carattere per inizializzare il frame
 8003c48:	f000 f81c 	bl	8003c84 <MAX72_Scroll_Process>
    for (uint8_t i = 0; i < max_chars; i++) {
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	73fb      	strb	r3, [r7, #15]
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	7b3b      	ldrb	r3, [r7, #12]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d3f6      	bcc.n	8003c48 <MAX72_Scroll_Start_IT+0xa8>
	}
}
 8003c5a:	bf00      	nop
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000aec 	.word	0x20000aec
 8003c68:	20000b0c 	.word	0x20000b0c

08003c6c <MAX72_Scroll_Stop>:

// Ferma lo scrolling
void MAX72_Scroll_Stop(void) {
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
    scroll_state.enabled = 0;
 8003c70:	4b03      	ldr	r3, [pc, #12]	@ (8003c80 <MAX72_Scroll_Stop+0x14>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	735a      	strb	r2, [r3, #13]
}
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	20000b0c 	.word	0x20000b0c

08003c84 <MAX72_Scroll_Process>:
void MAX72_Scroll_Resume(void) {
    scroll_state.enabled = 1;
}

// Funzione da chiamare nel main loop - NON bloccante
void MAX72_Scroll_Process(void) {
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b08b      	sub	sp, #44	@ 0x2c
 8003c88:	af00      	add	r7, sp, #0
    if (!scroll_state.enabled || !scroll_state.text) return;
 8003c8a:	4b8a      	ldr	r3, [pc, #552]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003c8c:	7b5b      	ldrb	r3, [r3, #13]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8183 	beq.w	8003f9a <MAX72_Scroll_Process+0x316>
 8003c94:	4b87      	ldr	r3, [pc, #540]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 817e 	beq.w	8003f9a <MAX72_Scroll_Process+0x316>

    if (scroll_state.updated) {
 8003c9e:	4b85      	ldr	r3, [pc, #532]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003ca0:	7b9b      	ldrb	r3, [r3, #14]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <MAX72_Scroll_Process+0x28>
		// Se il testo è stato aggiornato, ricalcola il frame

    	// TODO RICALCOLO DEL FRAME AGGIORNATO, fino al carattere corrente

		scroll_state.updated = 0; // Reset flag
 8003ca6:	4b83      	ldr	r3, [pc, #524]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	739a      	strb	r2, [r3, #14]
	}

    switch (scroll_state.state) {
 8003cac:	4b81      	ldr	r3, [pc, #516]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003cae:	7b1b      	ldrb	r3, [r3, #12]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	f000 80f6 	beq.w	8003ea2 <MAX72_Scroll_Process+0x21e>
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	f300 816c 	bgt.w	8003f94 <MAX72_Scroll_Process+0x310>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <MAX72_Scroll_Process+0x42>
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d072      	beq.n	8003daa <MAX72_Scroll_Process+0x126>
 8003cc4:	e166      	b.n	8003f94 <MAX72_Scroll_Process+0x310>
        case 0: // Processamento carattere
        {
            uint8_t ch = scroll_state.current_char;
 8003cc6:	4b7b      	ldr	r3, [pc, #492]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003cc8:	7a1b      	ldrb	r3, [r3, #8]
 8003cca:	737b      	strb	r3, [r7, #13]
            uint8_t *glyph = LETTERS[ch - ' '].value;
 8003ccc:	7b7b      	ldrb	r3, [r7, #13]
 8003cce:	f1a3 0220 	sub.w	r2, r3, #32
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	4a77      	ldr	r2, [pc, #476]	@ (8003eb8 <MAX72_Scroll_Process+0x234>)
 8003cda:	4413      	add	r3, r2
 8003cdc:	3301      	adds	r3, #1
 8003cde:	60bb      	str	r3, [r7, #8]

            // CAMBIATO: Shift verso destra (da destra verso sinistra)
            for (uint8_t row = 0; row < 8; row++) {
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003ce6:	e047      	b.n	8003d78 <MAX72_Scroll_Process+0xf4>
                uint8_t new_bit = (glyph[row] >> scroll_state.current_col) & 0x01;
 8003ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	4413      	add	r3, r2
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003cf6:	7a5b      	ldrb	r3, [r3, #9]
 8003cf8:	fa42 f303 	asr.w	r3, r2, r3
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	71fb      	strb	r3, [r7, #7]
                uint8_t carry = new_bit;
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // CAMBIATO: Shift right invece di left, da device più a destra
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	623b      	str	r3, [r7, #32]
 8003d0e:	e02b      	b.n	8003d68 <MAX72_Scroll_Process+0xe4>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8003d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d14:	4a69      	ldr	r2, [pc, #420]	@ (8003ebc <MAX72_Scroll_Process+0x238>)
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	441a      	add	r2, r3
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	71bb      	strb	r3, [r7, #6]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8003d26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d2a:	4a64      	ldr	r2, [pc, #400]	@ (8003ebc <MAX72_Scroll_Process+0x238>)
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	441a      	add	r2, r3
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	4413      	add	r3, r2
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	b25a      	sxtb	r2, r3
 8003d3c:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8003d40:	01db      	lsls	r3, r3, #7
 8003d42:	b25b      	sxtb	r3, r3
 8003d44:	4313      	orrs	r3, r2
 8003d46:	b25a      	sxtb	r2, r3
 8003d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d4c:	b2d1      	uxtb	r1, r2
 8003d4e:	4a5b      	ldr	r2, [pc, #364]	@ (8003ebc <MAX72_Scroll_Process+0x238>)
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	441a      	add	r2, r3
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	4413      	add	r3, r2
 8003d58:	460a      	mov	r2, r1
 8003d5a:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8003d5c:	79bb      	ldrb	r3, [r7, #6]
 8003d5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	623b      	str	r3, [r7, #32]
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	dad0      	bge.n	8003d10 <MAX72_Scroll_Process+0x8c>
            for (uint8_t row = 0; row < 8; row++) {
 8003d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d72:	3301      	adds	r3, #1
 8003d74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003d78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d7c:	2b07      	cmp	r3, #7
 8003d7e:	d9b3      	bls.n	8003ce8 <MAX72_Scroll_Process+0x64>
                }
            }

            scroll_state.current_col++;
 8003d80:	4b4c      	ldr	r3, [pc, #304]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003d82:	7a5b      	ldrb	r3, [r3, #9]
 8003d84:	3301      	adds	r3, #1
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003d8a:	725a      	strb	r2, [r3, #9]

            // Finito il carattere corrente?
            if (scroll_state.current_col >= GLYPH_WIDTH) {
 8003d8c:	4b49      	ldr	r3, [pc, #292]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003d8e:	7a5b      	ldrb	r3, [r3, #9]
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	f240 80fa 	bls.w	8003f8a <MAX72_Scroll_Process+0x306>
                scroll_state.current_col = 0;
 8003d96:	4b47      	ldr	r3, [pc, #284]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 8003d9c:	4b45      	ldr	r3, [pc, #276]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	729a      	strb	r2, [r3, #10]
                scroll_state.state = 1; // Passa agli spazi tra caratteri
 8003da2:	4b44      	ldr	r3, [pc, #272]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	731a      	strb	r2, [r3, #12]
            }
            break;
 8003da8:	e0ef      	b.n	8003f8a <MAX72_Scroll_Process+0x306>
        }

        case 1: // Spacing tra caratteri
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 8003daa:	2300      	movs	r3, #0
 8003dac:	77fb      	strb	r3, [r7, #31]
 8003dae:	e032      	b.n	8003e16 <MAX72_Scroll_Process+0x192>
                uint8_t carry = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8003db4:	2303      	movs	r3, #3
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	e027      	b.n	8003e0a <MAX72_Scroll_Process+0x186>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8003dba:	7ffb      	ldrb	r3, [r7, #31]
 8003dbc:	4a3f      	ldr	r2, [pc, #252]	@ (8003ebc <MAX72_Scroll_Process+0x238>)
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	441a      	add	r2, r3
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	73bb      	strb	r3, [r7, #14]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8003dce:	7ffb      	ldrb	r3, [r7, #31]
 8003dd0:	4a3a      	ldr	r2, [pc, #232]	@ (8003ebc <MAX72_Scroll_Process+0x238>)
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	4413      	add	r3, r2
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	b25a      	sxtb	r2, r3
 8003de2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003de6:	01db      	lsls	r3, r3, #7
 8003de8:	b25b      	sxtb	r3, r3
 8003dea:	4313      	orrs	r3, r2
 8003dec:	b25a      	sxtb	r2, r3
 8003dee:	7ffb      	ldrb	r3, [r7, #31]
 8003df0:	b2d1      	uxtb	r1, r2
 8003df2:	4a32      	ldr	r2, [pc, #200]	@ (8003ebc <MAX72_Scroll_Process+0x238>)
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	441a      	add	r2, r3
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	460a      	mov	r2, r1
 8003dfe:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8003e00:	7bbb      	ldrb	r3, [r7, #14]
 8003e02:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	dad4      	bge.n	8003dba <MAX72_Scroll_Process+0x136>
            for (uint8_t row = 0; row < 8; row++) {
 8003e10:	7ffb      	ldrb	r3, [r7, #31]
 8003e12:	3301      	adds	r3, #1
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	7ffb      	ldrb	r3, [r7, #31]
 8003e18:	2b07      	cmp	r3, #7
 8003e1a:	d9c9      	bls.n	8003db0 <MAX72_Scroll_Process+0x12c>
                }
            }

            scroll_state.spacing_counter++;
 8003e1c:	4b25      	ldr	r3, [pc, #148]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e1e:	7a9b      	ldrb	r3, [r3, #10]
 8003e20:	3301      	adds	r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	4b23      	ldr	r3, [pc, #140]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e26:	729a      	strb	r2, [r3, #10]

            // Finito lo spacing?
            if (scroll_state.spacing_counter >= CHAR_SPACING) {
 8003e28:	4b22      	ldr	r3, [pc, #136]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e2a:	7a9b      	ldrb	r3, [r3, #10]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80ae 	beq.w	8003f8e <MAX72_Scroll_Process+0x30a>
                scroll_state.spacing_counter = 0;
 8003e32:	4b20      	ldr	r3, [pc, #128]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	729a      	strb	r2, [r3, #10]

                // CAMBIATO: Passa al carattere successivo (incrementa invece di decrementare)
                scroll_state.current_char_idx++;
 8003e38:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e40:	6053      	str	r3, [r2, #4]
                if (scroll_state.current_char_idx >= strlen(scroll_state.text)) {
 8003e42:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	461c      	mov	r4, r3
 8003e48:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc fa3f 	bl	80002d0 <strlen>
 8003e52:	4603      	mov	r3, r0
 8003e54:	429c      	cmp	r4, r3
 8003e56:	d306      	bcc.n	8003e66 <MAX72_Scroll_Process+0x1e2>
                    // Finiti tutti i caratteri, passa al padding finale
                    scroll_state.state = 2;
 8003e58:	4b16      	ldr	r3, [pc, #88]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	731a      	strb	r2, [r3, #12]
                    scroll_state.padding_counter = 0;
 8003e5e:	4b15      	ldr	r3, [pc, #84]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	72da      	strb	r2, [r3, #11]
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
                    scroll_state.state = 0;
                }
            }
            break;
 8003e64:	e093      	b.n	8003f8e <MAX72_Scroll_Process+0x30a>
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003e66:	4b13      	ldr	r3, [pc, #76]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a12      	ldr	r2, [pc, #72]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e6c:	6852      	ldr	r2, [r2, #4]
 8003e6e:	4413      	add	r3, r2
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b1f      	cmp	r3, #31
 8003e74:	d90e      	bls.n	8003e94 <MAX72_Scroll_Process+0x210>
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8003e76:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e7c:	6852      	ldr	r2, [r2, #4]
 8003e7e:	4413      	add	r3, r2
 8003e80:	781b      	ldrb	r3, [r3, #0]
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003e82:	2b7e      	cmp	r3, #126	@ 0x7e
 8003e84:	d806      	bhi.n	8003e94 <MAX72_Scroll_Process+0x210>
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
 8003e86:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e8c:	6852      	ldr	r2, [r2, #4]
 8003e8e:	4413      	add	r3, r2
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	e000      	b.n	8003e96 <MAX72_Scroll_Process+0x212>
 8003e94:	2320      	movs	r3, #32
 8003e96:	4a07      	ldr	r2, [pc, #28]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e98:	7213      	strb	r3, [r2, #8]
                    scroll_state.state = 0;
 8003e9a:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <MAX72_Scroll_Process+0x230>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	731a      	strb	r2, [r3, #12]
            break;
 8003ea0:	e075      	b.n	8003f8e <MAX72_Scroll_Process+0x30a>
        }

        case 2: // Padding finale
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	75fb      	strb	r3, [r7, #23]
 8003ea6:	e039      	b.n	8003f1c <MAX72_Scroll_Process+0x298>
                uint8_t carry = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8003eac:	2303      	movs	r3, #3
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	e02e      	b.n	8003f10 <MAX72_Scroll_Process+0x28c>
 8003eb2:	bf00      	nop
 8003eb4:	20000b0c 	.word	0x20000b0c
 8003eb8:	20000008 	.word	0x20000008
 8003ebc:	20000aec 	.word	0x20000aec
                    uint8_t next_carry = frame[row][d] & 0x01;
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	4a38      	ldr	r2, [pc, #224]	@ (8003fa4 <MAX72_Scroll_Process+0x320>)
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	441a      	add	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	4a33      	ldr	r2, [pc, #204]	@ (8003fa4 <MAX72_Scroll_Process+0x320>)
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	441a      	add	r2, r3
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4413      	add	r3, r2
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	b25a      	sxtb	r2, r3
 8003ee8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003eec:	01db      	lsls	r3, r3, #7
 8003eee:	b25b      	sxtb	r3, r3
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	b25a      	sxtb	r2, r3
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
 8003ef6:	b2d1      	uxtb	r1, r2
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8003fa4 <MAX72_Scroll_Process+0x320>)
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	441a      	add	r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4413      	add	r3, r2
 8003f02:	460a      	mov	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	dad4      	bge.n	8003ec0 <MAX72_Scroll_Process+0x23c>
            for (uint8_t row = 0; row < 8; row++) {
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	75fb      	strb	r3, [r7, #23]
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b07      	cmp	r3, #7
 8003f20:	d9c2      	bls.n	8003ea8 <MAX72_Scroll_Process+0x224>
                }
            }

            scroll_state.padding_counter++;
 8003f22:	4b21      	ldr	r3, [pc, #132]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f24:	7adb      	ldrb	r3, [r3, #11]
 8003f26:	3301      	adds	r3, #1
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f2c:	72da      	strb	r2, [r3, #11]

            // Finito il padding? (GLYPH_WIDTH + CHAR_SPACING)
            if (scroll_state.padding_counter >= (GLYPH_WIDTH + CHAR_SPACING)) {
 8003f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f30:	7adb      	ldrb	r3, [r3, #11]
 8003f32:	2b05      	cmp	r3, #5
 8003f34:	d92d      	bls.n	8003f92 <MAX72_Scroll_Process+0x30e>
                // CAMBIATO: Ricomincia dal primo carattere (indice 0)
                scroll_state.current_char_idx = 0;
 8003f36:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a19      	ldr	r2, [pc, #100]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f42:	6852      	ldr	r2, [r2, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b1f      	cmp	r3, #31
 8003f4a:	d90e      	bls.n	8003f6a <MAX72_Scroll_Process+0x2e6>
						scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8003f4c:	4b16      	ldr	r3, [pc, #88]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a15      	ldr	r2, [pc, #84]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f52:	6852      	ldr	r2, [r2, #4]
 8003f54:	4413      	add	r3, r2
 8003f56:	781b      	ldrb	r3, [r3, #0]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003f58:	2b7e      	cmp	r3, #126	@ 0x7e
 8003f5a:	d806      	bhi.n	8003f6a <MAX72_Scroll_Process+0x2e6>
						' ' : scroll_state.text[scroll_state.current_char_idx];
 8003f5c:	4b12      	ldr	r3, [pc, #72]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a11      	ldr	r2, [pc, #68]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f62:	6852      	ldr	r2, [r2, #4]
 8003f64:	4413      	add	r3, r2
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	e000      	b.n	8003f6c <MAX72_Scroll_Process+0x2e8>
 8003f6a:	2320      	movs	r3, #32
 8003f6c:	4a0e      	ldr	r2, [pc, #56]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f6e:	7213      	strb	r3, [r2, #8]
                scroll_state.current_col = 0;
 8003f70:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 8003f76:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	729a      	strb	r2, [r3, #10]
                scroll_state.padding_counter = 0;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	72da      	strb	r2, [r3, #11]
                scroll_state.state = 0;
 8003f82:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <MAX72_Scroll_Process+0x324>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	731a      	strb	r2, [r3, #12]
            }
            break;
 8003f88:	e003      	b.n	8003f92 <MAX72_Scroll_Process+0x30e>
            break;
 8003f8a:	bf00      	nop
 8003f8c:	e002      	b.n	8003f94 <MAX72_Scroll_Process+0x310>
            break;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <MAX72_Scroll_Process+0x310>
            break;
 8003f92:	bf00      	nop
        }
    }

    // Aggiorna il display
    MAX72_SendFrame();
 8003f94:	f7ff fdd2 	bl	8003b3c <MAX72_SendFrame>
 8003f98:	e000      	b.n	8003f9c <MAX72_Scroll_Process+0x318>
    if (!scroll_state.enabled || !scroll_state.text) return;
 8003f9a:	bf00      	nop
}
 8003f9c:	372c      	adds	r7, #44	@ 0x2c
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000aec 	.word	0x20000aec
 8003fa8:	20000b0c 	.word	0x20000b0c

08003fac <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8003fac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fe4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003fb0:	f7fd fdec 	bl	8001b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fb4:	480c      	ldr	r0, [pc, #48]	@ (8003fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fb6:	490d      	ldr	r1, [pc, #52]	@ (8003fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fbc:	e002      	b.n	8003fc4 <LoopCopyDataInit>

08003fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fc2:	3304      	adds	r3, #4

08003fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fc8:	d3f9      	bcc.n	8003fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fca:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8003ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fd0:	e001      	b.n	8003fd6 <LoopFillZerobss>

08003fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fd4:	3204      	adds	r2, #4

08003fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fd8:	d3fb      	bcc.n	8003fd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003fda:	f005 fefb 	bl	8009dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fde:	f7fd fa9d 	bl	800151c <main>
  bx  lr    
 8003fe2:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8003fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fec:	20000590 	.word	0x20000590
  ldr r2, =_sidata
 8003ff0:	0800c3e4 	.word	0x0800c3e4
  ldr r2, =_sbss
 8003ff4:	20000590 	.word	0x20000590
  ldr r4, =_ebss
 8003ff8:	20000c6c 	.word	0x20000c6c

08003ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ffc:	e7fe      	b.n	8003ffc <ADC_IRQHandler>
	...

08004000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004004:	4b0e      	ldr	r3, [pc, #56]	@ (8004040 <HAL_Init+0x40>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0d      	ldr	r2, [pc, #52]	@ (8004040 <HAL_Init+0x40>)
 800400a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800400e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004010:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <HAL_Init+0x40>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0a      	ldr	r2, [pc, #40]	@ (8004040 <HAL_Init+0x40>)
 8004016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800401a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800401c:	4b08      	ldr	r3, [pc, #32]	@ (8004040 <HAL_Init+0x40>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a07      	ldr	r2, [pc, #28]	@ (8004040 <HAL_Init+0x40>)
 8004022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004028:	2003      	movs	r0, #3
 800402a:	f000 fd5f 	bl	8004aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800402e:	2000      	movs	r0, #0
 8004030:	f000 f808 	bl	8004044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004034:	f7fd fc5c 	bl	80018f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40023c00 	.word	0x40023c00

08004044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800404c:	4b12      	ldr	r3, [pc, #72]	@ (8004098 <HAL_InitTick+0x54>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b12      	ldr	r3, [pc, #72]	@ (800409c <HAL_InitTick+0x58>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	4619      	mov	r1, r3
 8004056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800405a:	fbb3 f3f1 	udiv	r3, r3, r1
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fd77 	bl	8004b56 <HAL_SYSTICK_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e00e      	b.n	8004090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b0f      	cmp	r3, #15
 8004076:	d80a      	bhi.n	800408e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004078:	2200      	movs	r2, #0
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004080:	f000 fd3f 	bl	8004b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004084:	4a06      	ldr	r2, [pc, #24]	@ (80040a0 <HAL_InitTick+0x5c>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e000      	b.n	8004090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000004 	.word	0x20000004
 800409c:	200003c4 	.word	0x200003c4
 80040a0:	200003c0 	.word	0x200003c0

080040a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040a8:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <HAL_IncTick+0x20>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <HAL_IncTick+0x24>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4413      	add	r3, r2
 80040b4:	4a04      	ldr	r2, [pc, #16]	@ (80040c8 <HAL_IncTick+0x24>)
 80040b6:	6013      	str	r3, [r2, #0]
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	200003c4 	.word	0x200003c4
 80040c8:	20000b1c 	.word	0x20000b1c

080040cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return uwTick;
 80040d0:	4b03      	ldr	r3, [pc, #12]	@ (80040e0 <HAL_GetTick+0x14>)
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000b1c 	.word	0x20000b1c

080040e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040ec:	f7ff ffee 	bl	80040cc <HAL_GetTick>
 80040f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040fc:	d005      	beq.n	800410a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <HAL_Delay+0x44>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800410a:	bf00      	nop
 800410c:	f7ff ffde 	bl	80040cc <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	429a      	cmp	r2, r3
 800411a:	d8f7      	bhi.n	800410c <HAL_Delay+0x28>
  {
  }
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200003c4 	.word	0x200003c4

0800412c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e033      	b.n	80041aa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc ffb4 	bl	80010b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	d118      	bne.n	800419c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004172:	f023 0302 	bic.w	r3, r3, #2
 8004176:	f043 0202 	orr.w	r2, r3, #2
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fae8 	bl	8004754 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	f043 0201 	orr.w	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	641a      	str	r2, [r3, #64]	@ 0x40
 800419a:	e001      	b.n	80041a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_ADC_Start+0x1a>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e0b2      	b.n	8004334 <HAL_ADC_Start+0x180>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d018      	beq.n	8004216 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041f4:	4b52      	ldr	r3, [pc, #328]	@ (8004340 <HAL_ADC_Start+0x18c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a52      	ldr	r2, [pc, #328]	@ (8004344 <HAL_ADC_Start+0x190>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	0c9a      	lsrs	r2, r3, #18
 8004200:	4613      	mov	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4413      	add	r3, r2
 8004206:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004208:	e002      	b.n	8004210 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3b01      	subs	r3, #1
 800420e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f9      	bne.n	800420a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d17a      	bne.n	800431a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800424e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004262:	d106      	bne.n	8004272 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004268:	f023 0206 	bic.w	r2, r3, #6
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004270:	e002      	b.n	8004278 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004280:	4b31      	ldr	r3, [pc, #196]	@ (8004348 <HAL_ADC_Start+0x194>)
 8004282:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800428c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2b00      	cmp	r3, #0
 8004298:	d12a      	bne.n	80042f0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2b      	ldr	r2, [pc, #172]	@ (800434c <HAL_ADC_Start+0x198>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d015      	beq.n	80042d0 <HAL_ADC_Start+0x11c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a29      	ldr	r2, [pc, #164]	@ (8004350 <HAL_ADC_Start+0x19c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d105      	bne.n	80042ba <HAL_ADC_Start+0x106>
 80042ae:	4b26      	ldr	r3, [pc, #152]	@ (8004348 <HAL_ADC_Start+0x194>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a25      	ldr	r2, [pc, #148]	@ (8004354 <HAL_ADC_Start+0x1a0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d136      	bne.n	8004332 <HAL_ADC_Start+0x17e>
 80042c4:	4b20      	ldr	r3, [pc, #128]	@ (8004348 <HAL_ADC_Start+0x194>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d130      	bne.n	8004332 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d129      	bne.n	8004332 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80042ec:	609a      	str	r2, [r3, #8]
 80042ee:	e020      	b.n	8004332 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a15      	ldr	r2, [pc, #84]	@ (800434c <HAL_ADC_Start+0x198>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d11b      	bne.n	8004332 <HAL_ADC_Start+0x17e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d114      	bne.n	8004332 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	e00b      	b.n	8004332 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	f043 0210 	orr.w	r2, r3, #16
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432a:	f043 0201 	orr.w	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	20000004 	.word	0x20000004
 8004344:	431bde83 	.word	0x431bde83
 8004348:	40012300 	.word	0x40012300
 800434c:	40012000 	.word	0x40012000
 8004350:	40012100 	.word	0x40012100
 8004354:	40012200 	.word	0x40012200

08004358 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_ADC_Stop+0x16>
 800436a:	2302      	movs	r3, #2
 800436c:	e021      	b.n	80043b2 <HAL_ADC_Stop+0x5a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d109      	bne.n	80043a8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	f043 0201 	orr.w	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043da:	d113      	bne.n	8004404 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ea:	d10b      	bne.n	8004404 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f0:	f043 0220 	orr.w	r2, r3, #32
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e063      	b.n	80044cc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004404:	f7ff fe62 	bl	80040cc <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800440a:	e021      	b.n	8004450 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004412:	d01d      	beq.n	8004450 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <HAL_ADC_PollForConversion+0x6c>
 800441a:	f7ff fe57 	bl	80040cc <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d212      	bcs.n	8004450 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d00b      	beq.n	8004450 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	f043 0204 	orr.w	r2, r3, #4
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e03d      	b.n	80044cc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b02      	cmp	r3, #2
 800445c:	d1d6      	bne.n	800440c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f06f 0212 	mvn.w	r2, #18
 8004466:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d123      	bne.n	80044ca <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11f      	bne.n	80044ca <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004490:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004494:	2b00      	cmp	r3, #0
 8004496:	d006      	beq.n	80044a6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d111      	bne.n	80044ca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d105      	bne.n	80044ca <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	f043 0201 	orr.w	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_ADC_ConfigChannel+0x1c>
 8004508:	2302      	movs	r3, #2
 800450a:	e113      	b.n	8004734 <HAL_ADC_ConfigChannel+0x244>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b09      	cmp	r3, #9
 800451a:	d925      	bls.n	8004568 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68d9      	ldr	r1, [r3, #12]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	4613      	mov	r3, r2
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	4413      	add	r3, r2
 8004530:	3b1e      	subs	r3, #30
 8004532:	2207      	movs	r2, #7
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43da      	mvns	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	400a      	ands	r2, r1
 8004540:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68d9      	ldr	r1, [r3, #12]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	b29b      	uxth	r3, r3
 8004552:	4618      	mov	r0, r3
 8004554:	4603      	mov	r3, r0
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	4403      	add	r3, r0
 800455a:	3b1e      	subs	r3, #30
 800455c:	409a      	lsls	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	60da      	str	r2, [r3, #12]
 8004566:	e022      	b.n	80045ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6919      	ldr	r1, [r3, #16]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	4613      	mov	r3, r2
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4413      	add	r3, r2
 800457c:	2207      	movs	r2, #7
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43da      	mvns	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	400a      	ands	r2, r1
 800458a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6919      	ldr	r1, [r3, #16]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	4618      	mov	r0, r3
 800459e:	4603      	mov	r3, r0
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	4403      	add	r3, r0
 80045a4:	409a      	lsls	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d824      	bhi.n	8004600 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	3b05      	subs	r3, #5
 80045c8:	221f      	movs	r2, #31
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43da      	mvns	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	400a      	ands	r2, r1
 80045d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	4618      	mov	r0, r3
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	3b05      	subs	r3, #5
 80045f2:	fa00 f203 	lsl.w	r2, r0, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80045fe:	e04c      	b.n	800469a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b0c      	cmp	r3, #12
 8004606:	d824      	bhi.n	8004652 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	3b23      	subs	r3, #35	@ 0x23
 800461a:	221f      	movs	r2, #31
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43da      	mvns	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	400a      	ands	r2, r1
 8004628:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	4618      	mov	r0, r3
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	3b23      	subs	r3, #35	@ 0x23
 8004644:	fa00 f203 	lsl.w	r2, r0, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004650:	e023      	b.n	800469a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	3b41      	subs	r3, #65	@ 0x41
 8004664:	221f      	movs	r2, #31
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43da      	mvns	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	400a      	ands	r2, r1
 8004672:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	4618      	mov	r0, r3
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	3b41      	subs	r3, #65	@ 0x41
 800468e:	fa00 f203 	lsl.w	r2, r0, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800469a:	4b29      	ldr	r3, [pc, #164]	@ (8004740 <HAL_ADC_ConfigChannel+0x250>)
 800469c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a28      	ldr	r2, [pc, #160]	@ (8004744 <HAL_ADC_ConfigChannel+0x254>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d10f      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x1d8>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b12      	cmp	r3, #18
 80046ae:	d10b      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004744 <HAL_ADC_ConfigChannel+0x254>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d12b      	bne.n	800472a <HAL_ADC_ConfigChannel+0x23a>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004748 <HAL_ADC_ConfigChannel+0x258>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <HAL_ADC_ConfigChannel+0x1f4>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b11      	cmp	r3, #17
 80046e2:	d122      	bne.n	800472a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a11      	ldr	r2, [pc, #68]	@ (8004748 <HAL_ADC_ConfigChannel+0x258>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d111      	bne.n	800472a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004706:	4b11      	ldr	r3, [pc, #68]	@ (800474c <HAL_ADC_ConfigChannel+0x25c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a11      	ldr	r2, [pc, #68]	@ (8004750 <HAL_ADC_ConfigChannel+0x260>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	0c9a      	lsrs	r2, r3, #18
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800471c:	e002      	b.n	8004724 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	3b01      	subs	r3, #1
 8004722:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f9      	bne.n	800471e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	40012300 	.word	0x40012300
 8004744:	40012000 	.word	0x40012000
 8004748:	10000012 	.word	0x10000012
 800474c:	20000004 	.word	0x20000004
 8004750:	431bde83 	.word	0x431bde83

08004754 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800475c:	4b79      	ldr	r3, [pc, #484]	@ (8004944 <ADC_Init+0x1f0>)
 800475e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	431a      	orrs	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6859      	ldr	r1, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	021a      	lsls	r2, r3, #8
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80047ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6899      	ldr	r1, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	4a58      	ldr	r2, [pc, #352]	@ (8004948 <ADC_Init+0x1f4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d022      	beq.n	8004832 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80047fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6899      	ldr	r1, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800481c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6899      	ldr	r1, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	e00f      	b.n	8004852 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004840:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004850:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0202 	bic.w	r2, r2, #2
 8004860:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6899      	ldr	r1, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	7e1b      	ldrb	r3, [r3, #24]
 800486c:	005a      	lsls	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01b      	beq.n	80048b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800488e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800489e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6859      	ldr	r1, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	3b01      	subs	r3, #1
 80048ac:	035a      	lsls	r2, r3, #13
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	e007      	b.n	80048c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80048d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	051a      	lsls	r2, r3, #20
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80048fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6899      	ldr	r1, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800490a:	025a      	lsls	r2, r3, #9
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004922:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6899      	ldr	r1, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	029a      	lsls	r2, r3, #10
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
}
 8004938:	bf00      	nop
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	40012300 	.word	0x40012300
 8004948:	0f000001 	.word	0x0f000001

0800494c <__NVIC_SetPriorityGrouping>:
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800495c:	4b0c      	ldr	r3, [pc, #48]	@ (8004990 <__NVIC_SetPriorityGrouping+0x44>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004968:	4013      	ands	r3, r2
 800496a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800497c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800497e:	4a04      	ldr	r2, [pc, #16]	@ (8004990 <__NVIC_SetPriorityGrouping+0x44>)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	60d3      	str	r3, [r2, #12]
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	e000ed00 	.word	0xe000ed00

08004994 <__NVIC_GetPriorityGrouping>:
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004998:	4b04      	ldr	r3, [pc, #16]	@ (80049ac <__NVIC_GetPriorityGrouping+0x18>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 0307 	and.w	r3, r3, #7
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <__NVIC_EnableIRQ>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	db0b      	blt.n	80049da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	f003 021f 	and.w	r2, r3, #31
 80049c8:	4907      	ldr	r1, [pc, #28]	@ (80049e8 <__NVIC_EnableIRQ+0x38>)
 80049ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	2001      	movs	r0, #1
 80049d2:	fa00 f202 	lsl.w	r2, r0, r2
 80049d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	e000e100 	.word	0xe000e100

080049ec <__NVIC_SetPriority>:
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	6039      	str	r1, [r7, #0]
 80049f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	db0a      	blt.n	8004a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	490c      	ldr	r1, [pc, #48]	@ (8004a38 <__NVIC_SetPriority+0x4c>)
 8004a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0a:	0112      	lsls	r2, r2, #4
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	440b      	add	r3, r1
 8004a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a14:	e00a      	b.n	8004a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4908      	ldr	r1, [pc, #32]	@ (8004a3c <__NVIC_SetPriority+0x50>)
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	3b04      	subs	r3, #4
 8004a24:	0112      	lsls	r2, r2, #4
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	440b      	add	r3, r1
 8004a2a:	761a      	strb	r2, [r3, #24]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	e000e100 	.word	0xe000e100
 8004a3c:	e000ed00 	.word	0xe000ed00

08004a40 <NVIC_EncodePriority>:
{
 8004a40:	b480      	push	{r7}
 8004a42:	b089      	sub	sp, #36	@ 0x24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f1c3 0307 	rsb	r3, r3, #7
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	bf28      	it	cs
 8004a5e:	2304      	movcs	r3, #4
 8004a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	3304      	adds	r3, #4
 8004a66:	2b06      	cmp	r3, #6
 8004a68:	d902      	bls.n	8004a70 <NVIC_EncodePriority+0x30>
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	3b03      	subs	r3, #3
 8004a6e:	e000      	b.n	8004a72 <NVIC_EncodePriority+0x32>
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	43da      	mvns	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	401a      	ands	r2, r3
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a92:	43d9      	mvns	r1, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a98:	4313      	orrs	r3, r2
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3724      	adds	r7, #36	@ 0x24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
	...

08004aa8 <SysTick_Config>:
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ab8:	d301      	bcc.n	8004abe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004aba:	2301      	movs	r3, #1
 8004abc:	e00f      	b.n	8004ade <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004abe:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae8 <SysTick_Config+0x40>)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ac6:	210f      	movs	r1, #15
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004acc:	f7ff ff8e 	bl	80049ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ad0:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <SysTick_Config+0x40>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ad6:	4b04      	ldr	r3, [pc, #16]	@ (8004ae8 <SysTick_Config+0x40>)
 8004ad8:	2207      	movs	r2, #7
 8004ada:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	e000e010 	.word	0xe000e010

08004aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff ff29 	bl	800494c <__NVIC_SetPriorityGrouping>
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b086      	sub	sp, #24
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	4603      	mov	r3, r0
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b14:	f7ff ff3e 	bl	8004994 <__NVIC_GetPriorityGrouping>
 8004b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	6978      	ldr	r0, [r7, #20]
 8004b20:	f7ff ff8e 	bl	8004a40 <NVIC_EncodePriority>
 8004b24:	4602      	mov	r2, r0
 8004b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff ff5d 	bl	80049ec <__NVIC_SetPriority>
}
 8004b32:	bf00      	nop
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	4603      	mov	r3, r0
 8004b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff ff31 	bl	80049b0 <__NVIC_EnableIRQ>
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff ffa2 	bl	8004aa8 <SysTick_Config>
 8004b64:	4603      	mov	r3, r0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b7c:	f7ff faa6 	bl	80040cc <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e099      	b.n	8004cc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bac:	e00f      	b.n	8004bce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bae:	f7ff fa8d 	bl	80040cc <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b05      	cmp	r3, #5
 8004bba:	d908      	bls.n	8004bce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e078      	b.n	8004cc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e8      	bne.n	8004bae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4b38      	ldr	r3, [pc, #224]	@ (8004cc8 <HAL_DMA_Init+0x158>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d107      	bne.n	8004c38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c30:	4313      	orrs	r3, r2
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f023 0307 	bic.w	r3, r3, #7
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d117      	bne.n	8004c92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00e      	beq.n	8004c92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fa9d 	bl	80051b4 <DMA_CheckFifoParam>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2240      	movs	r2, #64	@ 0x40
 8004c84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e016      	b.n	8004cc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fa54 	bl	8005148 <DMA_CalcBaseAndBitshift>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca8:	223f      	movs	r2, #63	@ 0x3f
 8004caa:	409a      	lsls	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	f010803f 	.word	0xf010803f

08004ccc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_DMA_Start_IT+0x26>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e040      	b.n	8004d74 <HAL_DMA_Start_IT+0xa8>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d12f      	bne.n	8004d66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f9e6 	bl	80050ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d24:	223f      	movs	r2, #63	@ 0x3f
 8004d26:	409a      	lsls	r2, r3
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0216 	orr.w	r2, r2, #22
 8004d3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d007      	beq.n	8004d54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0208 	orr.w	r2, r2, #8
 8004d52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	e005      	b.n	8004d72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d6e:	2302      	movs	r3, #2
 8004d70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d004      	beq.n	8004d9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2280      	movs	r2, #128	@ 0x80
 8004d94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e00c      	b.n	8004db4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2205      	movs	r2, #5
 8004d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0201 	bic.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004dcc:	4b8e      	ldr	r3, [pc, #568]	@ (8005008 <HAL_DMA_IRQHandler+0x248>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a8e      	ldr	r2, [pc, #568]	@ (800500c <HAL_DMA_IRQHandler+0x24c>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	0a9b      	lsrs	r3, r3, #10
 8004dd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dea:	2208      	movs	r2, #8
 8004dec:	409a      	lsls	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d01a      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d013      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0204 	bic.w	r2, r2, #4
 8004e12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e18:	2208      	movs	r2, #8
 8004e1a:	409a      	lsls	r2, r3
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e24:	f043 0201 	orr.w	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e30:	2201      	movs	r2, #1
 8004e32:	409a      	lsls	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d012      	beq.n	8004e62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00b      	beq.n	8004e62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4e:	2201      	movs	r2, #1
 8004e50:	409a      	lsls	r2, r3
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e5a:	f043 0202 	orr.w	r2, r3, #2
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e66:	2204      	movs	r2, #4
 8004e68:	409a      	lsls	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d012      	beq.n	8004e98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00b      	beq.n	8004e98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e84:	2204      	movs	r2, #4
 8004e86:	409a      	lsls	r2, r3
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e90:	f043 0204 	orr.w	r2, r3, #4
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e9c:	2210      	movs	r2, #16
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d043      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d03c      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eba:	2210      	movs	r2, #16
 8004ebc:	409a      	lsls	r2, r3
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d018      	beq.n	8004f02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d024      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	4798      	blx	r3
 8004eee:	e01f      	b.n	8004f30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01b      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
 8004f00:	e016      	b.n	8004f30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d107      	bne.n	8004f20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0208 	bic.w	r2, r2, #8
 8004f1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f34:	2220      	movs	r2, #32
 8004f36:	409a      	lsls	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 808f 	beq.w	8005060 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8087 	beq.w	8005060 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f56:	2220      	movs	r2, #32
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	d136      	bne.n	8004fd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0216 	bic.w	r2, r2, #22
 8004f78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d103      	bne.n	8004f9a <HAL_DMA_IRQHandler+0x1da>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0208 	bic.w	r2, r2, #8
 8004fa8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fae:	223f      	movs	r2, #63	@ 0x3f
 8004fb0:	409a      	lsls	r2, r3
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d07e      	beq.n	80050cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	4798      	blx	r3
        }
        return;
 8004fd6:	e079      	b.n	80050cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01d      	beq.n	8005022 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10d      	bne.n	8005010 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d031      	beq.n	8005060 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
 8005004:	e02c      	b.n	8005060 <HAL_DMA_IRQHandler+0x2a0>
 8005006:	bf00      	nop
 8005008:	20000004 	.word	0x20000004
 800500c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d023      	beq.n	8005060 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	4798      	blx	r3
 8005020:	e01e      	b.n	8005060 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10f      	bne.n	8005050 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0210 	bic.w	r2, r2, #16
 800503e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005064:	2b00      	cmp	r3, #0
 8005066:	d032      	beq.n	80050ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d022      	beq.n	80050ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2205      	movs	r2, #5
 8005078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	3301      	adds	r3, #1
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	429a      	cmp	r2, r3
 8005096:	d307      	bcc.n	80050a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f2      	bne.n	800508c <HAL_DMA_IRQHandler+0x2cc>
 80050a6:	e000      	b.n	80050aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80050a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	4798      	blx	r3
 80050ca:	e000      	b.n	80050ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80050cc:	bf00      	nop
    }
  }
}
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005108:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	2b40      	cmp	r3, #64	@ 0x40
 8005118:	d108      	bne.n	800512c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800512a:	e007      	b.n	800513c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	60da      	str	r2, [r3, #12]
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	3b10      	subs	r3, #16
 8005158:	4a14      	ldr	r2, [pc, #80]	@ (80051ac <DMA_CalcBaseAndBitshift+0x64>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005162:	4a13      	ldr	r2, [pc, #76]	@ (80051b0 <DMA_CalcBaseAndBitshift+0x68>)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b03      	cmp	r3, #3
 8005174:	d909      	bls.n	800518a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800517e:	f023 0303 	bic.w	r3, r3, #3
 8005182:	1d1a      	adds	r2, r3, #4
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	659a      	str	r2, [r3, #88]	@ 0x58
 8005188:	e007      	b.n	800519a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005192:	f023 0303 	bic.w	r3, r3, #3
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	aaaaaaab 	.word	0xaaaaaaab
 80051b0:	0800c054 	.word	0x0800c054

080051b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d11f      	bne.n	800520e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d856      	bhi.n	8005282 <DMA_CheckFifoParam+0xce>
 80051d4:	a201      	add	r2, pc, #4	@ (adr r2, 80051dc <DMA_CheckFifoParam+0x28>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	080051ff 	.word	0x080051ff
 80051e4:	080051ed 	.word	0x080051ed
 80051e8:	08005283 	.word	0x08005283
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d046      	beq.n	8005286 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051fc:	e043      	b.n	8005286 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005206:	d140      	bne.n	800528a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800520c:	e03d      	b.n	800528a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005216:	d121      	bne.n	800525c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d837      	bhi.n	800528e <DMA_CheckFifoParam+0xda>
 800521e:	a201      	add	r2, pc, #4	@ (adr r2, 8005224 <DMA_CheckFifoParam+0x70>)
 8005220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005224:	08005235 	.word	0x08005235
 8005228:	0800523b 	.word	0x0800523b
 800522c:	08005235 	.word	0x08005235
 8005230:	0800524d 	.word	0x0800524d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      break;
 8005238:	e030      	b.n	800529c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d025      	beq.n	8005292 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800524a:	e022      	b.n	8005292 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005254:	d11f      	bne.n	8005296 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800525a:	e01c      	b.n	8005296 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d903      	bls.n	800526a <DMA_CheckFifoParam+0xb6>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d003      	beq.n	8005270 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005268:	e018      	b.n	800529c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	73fb      	strb	r3, [r7, #15]
      break;
 800526e:	e015      	b.n	800529c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005274:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00e      	beq.n	800529a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	73fb      	strb	r3, [r7, #15]
      break;
 8005280:	e00b      	b.n	800529a <DMA_CheckFifoParam+0xe6>
      break;
 8005282:	bf00      	nop
 8005284:	e00a      	b.n	800529c <DMA_CheckFifoParam+0xe8>
      break;
 8005286:	bf00      	nop
 8005288:	e008      	b.n	800529c <DMA_CheckFifoParam+0xe8>
      break;
 800528a:	bf00      	nop
 800528c:	e006      	b.n	800529c <DMA_CheckFifoParam+0xe8>
      break;
 800528e:	bf00      	nop
 8005290:	e004      	b.n	800529c <DMA_CheckFifoParam+0xe8>
      break;
 8005292:	bf00      	nop
 8005294:	e002      	b.n	800529c <DMA_CheckFifoParam+0xe8>
      break;   
 8005296:	bf00      	nop
 8005298:	e000      	b.n	800529c <DMA_CheckFifoParam+0xe8>
      break;
 800529a:	bf00      	nop
    }
  } 
  
  return status; 
 800529c:	7bfb      	ldrb	r3, [r7, #15]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop

080052ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b089      	sub	sp, #36	@ 0x24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052be:	2300      	movs	r3, #0
 80052c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	e165      	b.n	8005594 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052c8:	2201      	movs	r2, #1
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4013      	ands	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	f040 8154 	bne.w	800558e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d005      	beq.n	80052fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d130      	bne.n	8005360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	2203      	movs	r2, #3
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	43db      	mvns	r3, r3
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	4013      	ands	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4313      	orrs	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005334:	2201      	movs	r2, #1
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	43db      	mvns	r3, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4013      	ands	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	091b      	lsrs	r3, r3, #4
 800534a:	f003 0201 	and.w	r2, r3, #1
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4313      	orrs	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 0303 	and.w	r3, r3, #3
 8005368:	2b03      	cmp	r3, #3
 800536a:	d017      	beq.n	800539c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	2203      	movs	r2, #3
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	43db      	mvns	r3, r3
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4013      	ands	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4313      	orrs	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d123      	bne.n	80053f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	08da      	lsrs	r2, r3, #3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3208      	adds	r2, #8
 80053b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	220f      	movs	r2, #15
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	43db      	mvns	r3, r3
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	4013      	ands	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	4313      	orrs	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	08da      	lsrs	r2, r3, #3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3208      	adds	r2, #8
 80053ea:	69b9      	ldr	r1, [r7, #24]
 80053ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	2203      	movs	r2, #3
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	43db      	mvns	r3, r3
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4013      	ands	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 0203 	and.w	r2, r3, #3
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	4313      	orrs	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 80ae 	beq.w	800558e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	4b5d      	ldr	r3, [pc, #372]	@ (80055ac <HAL_GPIO_Init+0x300>)
 8005438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543a:	4a5c      	ldr	r2, [pc, #368]	@ (80055ac <HAL_GPIO_Init+0x300>)
 800543c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005440:	6453      	str	r3, [r2, #68]	@ 0x44
 8005442:	4b5a      	ldr	r3, [pc, #360]	@ (80055ac <HAL_GPIO_Init+0x300>)
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800544e:	4a58      	ldr	r2, [pc, #352]	@ (80055b0 <HAL_GPIO_Init+0x304>)
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	089b      	lsrs	r3, r3, #2
 8005454:	3302      	adds	r3, #2
 8005456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800545a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	220f      	movs	r2, #15
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	43db      	mvns	r3, r3
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	4013      	ands	r3, r2
 8005470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a4f      	ldr	r2, [pc, #316]	@ (80055b4 <HAL_GPIO_Init+0x308>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d025      	beq.n	80054c6 <HAL_GPIO_Init+0x21a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a4e      	ldr	r2, [pc, #312]	@ (80055b8 <HAL_GPIO_Init+0x30c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01f      	beq.n	80054c2 <HAL_GPIO_Init+0x216>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a4d      	ldr	r2, [pc, #308]	@ (80055bc <HAL_GPIO_Init+0x310>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d019      	beq.n	80054be <HAL_GPIO_Init+0x212>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a4c      	ldr	r2, [pc, #304]	@ (80055c0 <HAL_GPIO_Init+0x314>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d013      	beq.n	80054ba <HAL_GPIO_Init+0x20e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a4b      	ldr	r2, [pc, #300]	@ (80055c4 <HAL_GPIO_Init+0x318>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00d      	beq.n	80054b6 <HAL_GPIO_Init+0x20a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a4a      	ldr	r2, [pc, #296]	@ (80055c8 <HAL_GPIO_Init+0x31c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d007      	beq.n	80054b2 <HAL_GPIO_Init+0x206>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a49      	ldr	r2, [pc, #292]	@ (80055cc <HAL_GPIO_Init+0x320>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d101      	bne.n	80054ae <HAL_GPIO_Init+0x202>
 80054aa:	2306      	movs	r3, #6
 80054ac:	e00c      	b.n	80054c8 <HAL_GPIO_Init+0x21c>
 80054ae:	2307      	movs	r3, #7
 80054b0:	e00a      	b.n	80054c8 <HAL_GPIO_Init+0x21c>
 80054b2:	2305      	movs	r3, #5
 80054b4:	e008      	b.n	80054c8 <HAL_GPIO_Init+0x21c>
 80054b6:	2304      	movs	r3, #4
 80054b8:	e006      	b.n	80054c8 <HAL_GPIO_Init+0x21c>
 80054ba:	2303      	movs	r3, #3
 80054bc:	e004      	b.n	80054c8 <HAL_GPIO_Init+0x21c>
 80054be:	2302      	movs	r3, #2
 80054c0:	e002      	b.n	80054c8 <HAL_GPIO_Init+0x21c>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <HAL_GPIO_Init+0x21c>
 80054c6:	2300      	movs	r3, #0
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	f002 0203 	and.w	r2, r2, #3
 80054ce:	0092      	lsls	r2, r2, #2
 80054d0:	4093      	lsls	r3, r2
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054d8:	4935      	ldr	r1, [pc, #212]	@ (80055b0 <HAL_GPIO_Init+0x304>)
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	089b      	lsrs	r3, r3, #2
 80054de:	3302      	adds	r3, #2
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054e6:	4b3a      	ldr	r3, [pc, #232]	@ (80055d0 <HAL_GPIO_Init+0x324>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	43db      	mvns	r3, r3
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	4013      	ands	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800550a:	4a31      	ldr	r2, [pc, #196]	@ (80055d0 <HAL_GPIO_Init+0x324>)
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005510:	4b2f      	ldr	r3, [pc, #188]	@ (80055d0 <HAL_GPIO_Init+0x324>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	43db      	mvns	r3, r3
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4013      	ands	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005534:	4a26      	ldr	r2, [pc, #152]	@ (80055d0 <HAL_GPIO_Init+0x324>)
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800553a:	4b25      	ldr	r3, [pc, #148]	@ (80055d0 <HAL_GPIO_Init+0x324>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	43db      	mvns	r3, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4013      	ands	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800555e:	4a1c      	ldr	r2, [pc, #112]	@ (80055d0 <HAL_GPIO_Init+0x324>)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005564:	4b1a      	ldr	r3, [pc, #104]	@ (80055d0 <HAL_GPIO_Init+0x324>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	43db      	mvns	r3, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4013      	ands	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005588:	4a11      	ldr	r2, [pc, #68]	@ (80055d0 <HAL_GPIO_Init+0x324>)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	3301      	adds	r3, #1
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b0f      	cmp	r3, #15
 8005598:	f67f ae96 	bls.w	80052c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800559c:	bf00      	nop
 800559e:	bf00      	nop
 80055a0:	3724      	adds	r7, #36	@ 0x24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40013800 	.word	0x40013800
 80055b4:	40020000 	.word	0x40020000
 80055b8:	40020400 	.word	0x40020400
 80055bc:	40020800 	.word	0x40020800
 80055c0:	40020c00 	.word	0x40020c00
 80055c4:	40021000 	.word	0x40021000
 80055c8:	40021400 	.word	0x40021400
 80055cc:	40021800 	.word	0x40021800
 80055d0:	40013c00 	.word	0x40013c00

080055d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	887b      	ldrh	r3, [r7, #2]
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
 80055f0:	e001      	b.n	80055f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055f2:	2300      	movs	r3, #0
 80055f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	807b      	strh	r3, [r7, #2]
 8005610:	4613      	mov	r3, r2
 8005612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005614:	787b      	ldrb	r3, [r7, #1]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800561a:	887a      	ldrh	r2, [r7, #2]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005620:	e003      	b.n	800562a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005622:	887b      	ldrh	r3, [r7, #2]
 8005624:	041a      	lsls	r2, r3, #16
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	619a      	str	r2, [r3, #24]
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	460b      	mov	r3, r1
 8005640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005648:	887a      	ldrh	r2, [r7, #2]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4013      	ands	r3, r2
 800564e:	041a      	lsls	r2, r3, #16
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	43d9      	mvns	r1, r3
 8005654:	887b      	ldrh	r3, [r7, #2]
 8005656:	400b      	ands	r3, r1
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	619a      	str	r2, [r3, #24]
}
 800565e:	bf00      	nop
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005676:	4b08      	ldr	r3, [pc, #32]	@ (8005698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005678:	695a      	ldr	r2, [r3, #20]
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	4013      	ands	r3, r2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d006      	beq.n	8005690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005682:	4a05      	ldr	r2, [pc, #20]	@ (8005698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005684:	88fb      	ldrh	r3, [r7, #6]
 8005686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	4618      	mov	r0, r3
 800568c:	f7fc f85c 	bl	8001748 <HAL_GPIO_EXTI_Callback>
  }
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40013c00 	.word	0x40013c00

0800569c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e12b      	b.n	8005906 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fb fe88 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2224      	movs	r2, #36	@ 0x24
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0201 	bic.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005700:	f001 fbb6 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
 8005704:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	4a81      	ldr	r2, [pc, #516]	@ (8005910 <HAL_I2C_Init+0x274>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d807      	bhi.n	8005720 <HAL_I2C_Init+0x84>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a80      	ldr	r2, [pc, #512]	@ (8005914 <HAL_I2C_Init+0x278>)
 8005714:	4293      	cmp	r3, r2
 8005716:	bf94      	ite	ls
 8005718:	2301      	movls	r3, #1
 800571a:	2300      	movhi	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e006      	b.n	800572e <HAL_I2C_Init+0x92>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4a7d      	ldr	r2, [pc, #500]	@ (8005918 <HAL_I2C_Init+0x27c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	bf94      	ite	ls
 8005728:	2301      	movls	r3, #1
 800572a:	2300      	movhi	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e0e7      	b.n	8005906 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a78      	ldr	r2, [pc, #480]	@ (800591c <HAL_I2C_Init+0x280>)
 800573a:	fba2 2303 	umull	r2, r3, r2, r3
 800573e:	0c9b      	lsrs	r3, r3, #18
 8005740:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4a6a      	ldr	r2, [pc, #424]	@ (8005910 <HAL_I2C_Init+0x274>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d802      	bhi.n	8005770 <HAL_I2C_Init+0xd4>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	3301      	adds	r3, #1
 800576e:	e009      	b.n	8005784 <HAL_I2C_Init+0xe8>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	4a69      	ldr	r2, [pc, #420]	@ (8005920 <HAL_I2C_Init+0x284>)
 800577c:	fba2 2303 	umull	r2, r3, r2, r3
 8005780:	099b      	lsrs	r3, r3, #6
 8005782:	3301      	adds	r3, #1
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	430b      	orrs	r3, r1
 800578a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005796:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	495c      	ldr	r1, [pc, #368]	@ (8005910 <HAL_I2C_Init+0x274>)
 80057a0:	428b      	cmp	r3, r1
 80057a2:	d819      	bhi.n	80057d8 <HAL_I2C_Init+0x13c>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	1e59      	subs	r1, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80057b2:	1c59      	adds	r1, r3, #1
 80057b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80057b8:	400b      	ands	r3, r1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_I2C_Init+0x138>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	1e59      	subs	r1, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80057cc:	3301      	adds	r3, #1
 80057ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d2:	e051      	b.n	8005878 <HAL_I2C_Init+0x1dc>
 80057d4:	2304      	movs	r3, #4
 80057d6:	e04f      	b.n	8005878 <HAL_I2C_Init+0x1dc>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d111      	bne.n	8005804 <HAL_I2C_Init+0x168>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	1e58      	subs	r0, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6859      	ldr	r1, [r3, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	440b      	add	r3, r1
 80057ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80057f2:	3301      	adds	r3, #1
 80057f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bf0c      	ite	eq
 80057fc:	2301      	moveq	r3, #1
 80057fe:	2300      	movne	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	e012      	b.n	800582a <HAL_I2C_Init+0x18e>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	1e58      	subs	r0, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6859      	ldr	r1, [r3, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	0099      	lsls	r1, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	fbb0 f3f3 	udiv	r3, r0, r3
 800581a:	3301      	adds	r3, #1
 800581c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf0c      	ite	eq
 8005824:	2301      	moveq	r3, #1
 8005826:	2300      	movne	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_I2C_Init+0x196>
 800582e:	2301      	movs	r3, #1
 8005830:	e022      	b.n	8005878 <HAL_I2C_Init+0x1dc>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10e      	bne.n	8005858 <HAL_I2C_Init+0x1bc>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	1e58      	subs	r0, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6859      	ldr	r1, [r3, #4]
 8005842:	460b      	mov	r3, r1
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	440b      	add	r3, r1
 8005848:	fbb0 f3f3 	udiv	r3, r0, r3
 800584c:	3301      	adds	r3, #1
 800584e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005856:	e00f      	b.n	8005878 <HAL_I2C_Init+0x1dc>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	1e58      	subs	r0, r3, #1
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6859      	ldr	r1, [r3, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	0099      	lsls	r1, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	fbb0 f3f3 	udiv	r3, r0, r3
 800586e:	3301      	adds	r3, #1
 8005870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005874:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	6809      	ldr	r1, [r1, #0]
 800587c:	4313      	orrs	r3, r2
 800587e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69da      	ldr	r2, [r3, #28]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80058a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6911      	ldr	r1, [r2, #16]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	68d2      	ldr	r2, [r2, #12]
 80058b2:	4311      	orrs	r1, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	430b      	orrs	r3, r1
 80058ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	000186a0 	.word	0x000186a0
 8005914:	001e847f 	.word	0x001e847f
 8005918:	003d08ff 	.word	0x003d08ff
 800591c:	431bde83 	.word	0x431bde83
 8005920:	10624dd3 	.word	0x10624dd3

08005924 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af02      	add	r7, sp, #8
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	4608      	mov	r0, r1
 800592e:	4611      	mov	r1, r2
 8005930:	461a      	mov	r2, r3
 8005932:	4603      	mov	r3, r0
 8005934:	817b      	strh	r3, [r7, #10]
 8005936:	460b      	mov	r3, r1
 8005938:	813b      	strh	r3, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800593e:	f7fe fbc5 	bl	80040cc <HAL_GetTick>
 8005942:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b20      	cmp	r3, #32
 800594e:	f040 80d9 	bne.w	8005b04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	2319      	movs	r3, #25
 8005958:	2201      	movs	r2, #1
 800595a:	496d      	ldr	r1, [pc, #436]	@ (8005b10 <HAL_I2C_Mem_Write+0x1ec>)
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 ff5f 	bl	8006820 <I2C_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005968:	2302      	movs	r3, #2
 800596a:	e0cc      	b.n	8005b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_I2C_Mem_Write+0x56>
 8005976:	2302      	movs	r3, #2
 8005978:	e0c5      	b.n	8005b06 <HAL_I2C_Mem_Write+0x1e2>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b01      	cmp	r3, #1
 800598e:	d007      	beq.n	80059a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2221      	movs	r2, #33	@ 0x21
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2240      	movs	r2, #64	@ 0x40
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a3a      	ldr	r2, [r7, #32]
 80059ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80059d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4a4d      	ldr	r2, [pc, #308]	@ (8005b14 <HAL_I2C_Mem_Write+0x1f0>)
 80059e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059e2:	88f8      	ldrh	r0, [r7, #6]
 80059e4:	893a      	ldrh	r2, [r7, #8]
 80059e6:	8979      	ldrh	r1, [r7, #10]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	4603      	mov	r3, r0
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fc7a 	bl	80062ec <I2C_RequestMemoryWrite>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d052      	beq.n	8005aa4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e081      	b.n	8005b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f001 f824 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00d      	beq.n	8005a2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d107      	bne.n	8005a2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e06b      	b.n	8005b06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	781a      	ldrb	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d11b      	bne.n	8005aa4 <HAL_I2C_Mem_Write+0x180>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d017      	beq.n	8005aa4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	781a      	ldrb	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1aa      	bne.n	8005a02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f001 f817 	bl	8006ae4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00d      	beq.n	8005ad8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d107      	bne.n	8005ad4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ad2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e016      	b.n	8005b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e000      	b.n	8005b06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005b04:	2302      	movs	r3, #2
  }
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	00100002 	.word	0x00100002
 8005b14:	ffff0000 	.word	0xffff0000

08005b18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08c      	sub	sp, #48	@ 0x30
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	4608      	mov	r0, r1
 8005b22:	4611      	mov	r1, r2
 8005b24:	461a      	mov	r2, r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	817b      	strh	r3, [r7, #10]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	813b      	strh	r3, [r7, #8]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b32:	f7fe facb 	bl	80040cc <HAL_GetTick>
 8005b36:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	f040 8214 	bne.w	8005f6e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	2319      	movs	r3, #25
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	497b      	ldr	r1, [pc, #492]	@ (8005d3c <HAL_I2C_Mem_Read+0x224>)
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fe65 	bl	8006820 <I2C_WaitOnFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e207      	b.n	8005f70 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d101      	bne.n	8005b6e <HAL_I2C_Mem_Read+0x56>
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e200      	b.n	8005f70 <HAL_I2C_Mem_Read+0x458>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d007      	beq.n	8005b94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ba2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2222      	movs	r2, #34	@ 0x22
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2240      	movs	r2, #64	@ 0x40
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4a5b      	ldr	r2, [pc, #364]	@ (8005d40 <HAL_I2C_Mem_Read+0x228>)
 8005bd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bd6:	88f8      	ldrh	r0, [r7, #6]
 8005bd8:	893a      	ldrh	r2, [r7, #8]
 8005bda:	8979      	ldrh	r1, [r7, #10]
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	9301      	str	r3, [sp, #4]
 8005be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	4603      	mov	r3, r0
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fc16 	bl	8006418 <I2C_RequestMemoryRead>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e1bc      	b.n	8005f70 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d113      	bne.n	8005c26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bfe:	2300      	movs	r3, #0
 8005c00:	623b      	str	r3, [r7, #32]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	623b      	str	r3, [r7, #32]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	623b      	str	r3, [r7, #32]
 8005c12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	e190      	b.n	8005f48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d11b      	bne.n	8005c66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61fb      	str	r3, [r7, #28]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	61fb      	str	r3, [r7, #28]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	61fb      	str	r3, [r7, #28]
 8005c52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	e170      	b.n	8005f48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d11b      	bne.n	8005ca6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	e150      	b.n	8005f48 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005cbc:	e144      	b.n	8005f48 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	f200 80f1 	bhi.w	8005eaa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d123      	bne.n	8005d18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 ff4d 	bl	8006b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e145      	b.n	8005f70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d16:	e117      	b.n	8005f48 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d14e      	bne.n	8005dbe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d26:	2200      	movs	r2, #0
 8005d28:	4906      	ldr	r1, [pc, #24]	@ (8005d44 <HAL_I2C_Mem_Read+0x22c>)
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fd78 	bl	8006820 <I2C_WaitOnFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d008      	beq.n	8005d48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e11a      	b.n	8005f70 <HAL_I2C_Mem_Read+0x458>
 8005d3a:	bf00      	nop
 8005d3c:	00100002 	.word	0x00100002
 8005d40:	ffff0000 	.word	0xffff0000
 8005d44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005dbc:	e0c4      	b.n	8005f48 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	496c      	ldr	r1, [pc, #432]	@ (8005f78 <HAL_I2C_Mem_Read+0x460>)
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 fd29 	bl	8006820 <I2C_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0cb      	b.n	8005f70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005de6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691a      	ldr	r2, [r3, #16]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e20:	2200      	movs	r2, #0
 8005e22:	4955      	ldr	r1, [pc, #340]	@ (8005f78 <HAL_I2C_Mem_Read+0x460>)
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fcfb 	bl	8006820 <I2C_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e09d      	b.n	8005f70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ea8:	e04e      	b.n	8005f48 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 fe60 	bl	8006b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e058      	b.n	8005f70 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d124      	bne.n	8005f48 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d107      	bne.n	8005f16 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f14:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f47f aeb6 	bne.w	8005cbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e000      	b.n	8005f70 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
  }
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3728      	adds	r7, #40	@ 0x28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	00010004 	.word	0x00010004

08005f7c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08c      	sub	sp, #48	@ 0x30
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	4608      	mov	r0, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	817b      	strh	r3, [r7, #10]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	813b      	strh	r3, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f96:	f7fe f899 	bl	80040cc <HAL_GetTick>
 8005f9a:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	f040 8172 	bne.w	8006292 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fae:	4b93      	ldr	r3, [pc, #588]	@ (80061fc <HAL_I2C_Mem_Read_DMA+0x280>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	08db      	lsrs	r3, r3, #3
 8005fb4:	4a92      	ldr	r2, [pc, #584]	@ (8006200 <HAL_I2C_Mem_Read_DMA+0x284>)
 8005fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fba:	0a1a      	lsrs	r2, r3, #8
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009a      	lsls	r2, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	61fb      	str	r3, [r7, #28]
    do
    {
    	count--;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d112      	bne.n	8005ffa <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	f043 0220 	orr.w	r2, r3, #32
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e14c      	b.n	8006294 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b02      	cmp	r3, #2
 8006006:	d0df      	beq.n	8005fc8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_I2C_Mem_Read_DMA+0x9a>
 8006012:	2302      	movs	r3, #2
 8006014:	e13e      	b.n	8006294 <HAL_I2C_Mem_Read_DMA+0x318>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b01      	cmp	r3, #1
 800602a:	d007      	beq.n	800603c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800604a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2222      	movs	r2, #34	@ 0x22
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2240      	movs	r2, #64	@ 0x40
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006066:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800606c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4a62      	ldr	r2, [pc, #392]	@ (8006204 <HAL_I2C_Mem_Read_DMA+0x288>)
 800607c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800607e:	897a      	ldrh	r2, [r7, #10]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8006084:	893a      	ldrh	r2, [r7, #8]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800608a:	88fa      	ldrh	r2, [r7, #6]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 80cc 	beq.w	8006238 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d02d      	beq.n	8006104 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ac:	4a56      	ldr	r2, [pc, #344]	@ (8006208 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80060ae:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b4:	4a55      	ldr	r2, [pc, #340]	@ (800620c <HAL_I2C_Mem_Read_DMA+0x290>)
 80060b6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	2200      	movs	r2, #0
 80060be:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c4:	2200      	movs	r2, #0
 80060c6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060cc:	2200      	movs	r2, #0
 80060ce:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d4:	2200      	movs	r2, #0
 80060d6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3310      	adds	r3, #16
 80060e2:	4619      	mov	r1, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	461a      	mov	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ee:	f7fe fded 	bl	8004ccc <HAL_DMA_Start_IT>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80060f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f040 8087 	bne.w	8006210 <HAL_I2C_Mem_Read_DMA+0x294>
 8006102:	e013      	b.n	800612c <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e0b3      	b.n	8006294 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800612c:	88f8      	ldrh	r0, [r7, #6]
 800612e:	893a      	ldrh	r2, [r7, #8]
 8006130:	8979      	ldrh	r1, [r7, #10]
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	2323      	movs	r3, #35	@ 0x23
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	4603      	mov	r3, r0
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f96b 	bl	8006418 <I2C_RequestMemoryRead>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d023      	beq.n	8006190 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614c:	4618      	mov	r0, r3
 800614e:	f7fe fe15 	bl	8004d7c <HAL_DMA_Abort_IT>
 8006152:	4603      	mov	r3, r0
 8006154:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615c:	2200      	movs	r2, #0
 800615e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800616e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0201 	bic.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e081      	b.n	8006294 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006194:	2b01      	cmp	r3, #1
 8006196:	d108      	bne.n	80061aa <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	e007      	b.n	80061ba <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80061b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ba:	2300      	movs	r3, #0
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	61bb      	str	r3, [r7, #24]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061e6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061f6:	605a      	str	r2, [r3, #4]
 80061f8:	e049      	b.n	800628e <HAL_I2C_Mem_Read_DMA+0x312>
 80061fa:	bf00      	nop
 80061fc:	20000004 	.word	0x20000004
 8006200:	14f8b589 	.word	0x14f8b589
 8006204:	ffff0000 	.word	0xffff0000
 8006208:	080065e9 	.word	0x080065e9
 800620c:	080067a7 	.word	0x080067a7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006224:	f043 0210 	orr.w	r2, r3, #16
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e02d      	b.n	8006294 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006238:	88f8      	ldrh	r0, [r7, #6]
 800623a:	893a      	ldrh	r2, [r7, #8]
 800623c:	8979      	ldrh	r1, [r7, #10]
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	2323      	movs	r3, #35	@ 0x23
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	4603      	mov	r3, r0
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f8e5 	bl	8006418 <I2C_RequestMemoryRead>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e01d      	b.n	8006294 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800627c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	e000      	b.n	8006294 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8006292:	2302      	movs	r3, #2
  }
}
 8006294:	4618      	mov	r0, r3
 8006296:	3728      	adds	r7, #40	@ 0x28
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	4608      	mov	r0, r1
 80062f6:	4611      	mov	r1, r2
 80062f8:	461a      	mov	r2, r3
 80062fa:	4603      	mov	r3, r0
 80062fc:	817b      	strh	r3, [r7, #10]
 80062fe:	460b      	mov	r3, r1
 8006300:	813b      	strh	r3, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006314:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	2200      	movs	r2, #0
 800631e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fa7c 	bl	8006820 <I2C_WaitOnFlagUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00d      	beq.n	800634a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800633c:	d103      	bne.n	8006346 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006344:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e05f      	b.n	800640a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800634a:	897b      	ldrh	r3, [r7, #10]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	461a      	mov	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006358:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	6a3a      	ldr	r2, [r7, #32]
 800635e:	492d      	ldr	r1, [pc, #180]	@ (8006414 <I2C_RequestMemoryWrite+0x128>)
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 fad7 	bl	8006914 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e04c      	b.n	800640a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006370:	2300      	movs	r3, #0
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006388:	6a39      	ldr	r1, [r7, #32]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fb62 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00d      	beq.n	80063b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639a:	2b04      	cmp	r3, #4
 800639c:	d107      	bne.n	80063ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e02b      	b.n	800640a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d105      	bne.n	80063c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063b8:	893b      	ldrh	r3, [r7, #8]
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	611a      	str	r2, [r3, #16]
 80063c2:	e021      	b.n	8006408 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063c4:	893b      	ldrh	r3, [r7, #8]
 80063c6:	0a1b      	lsrs	r3, r3, #8
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063d4:	6a39      	ldr	r1, [r7, #32]
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 fb3c 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00d      	beq.n	80063fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d107      	bne.n	80063fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e005      	b.n	800640a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063fe:	893b      	ldrh	r3, [r7, #8]
 8006400:	b2da      	uxtb	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	00010002 	.word	0x00010002

08006418 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af02      	add	r7, sp, #8
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	4608      	mov	r0, r1
 8006422:	4611      	mov	r1, r2
 8006424:	461a      	mov	r2, r3
 8006426:	4603      	mov	r3, r0
 8006428:	817b      	strh	r3, [r7, #10]
 800642a:	460b      	mov	r3, r1
 800642c:	813b      	strh	r3, [r7, #8]
 800642e:	4613      	mov	r3, r2
 8006430:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006440:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006450:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	2200      	movs	r2, #0
 800645a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 f9de 	bl	8006820 <I2C_WaitOnFlagUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00d      	beq.n	8006486 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006478:	d103      	bne.n	8006482 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006480:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e0aa      	b.n	80065dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006486:	897b      	ldrh	r3, [r7, #10]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006494:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	6a3a      	ldr	r2, [r7, #32]
 800649a:	4952      	ldr	r1, [pc, #328]	@ (80065e4 <I2C_RequestMemoryRead+0x1cc>)
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 fa39 	bl	8006914 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e097      	b.n	80065dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c4:	6a39      	ldr	r1, [r7, #32]
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 fac4 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00d      	beq.n	80064ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d107      	bne.n	80064ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e076      	b.n	80065dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064ee:	88fb      	ldrh	r3, [r7, #6]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d105      	bne.n	8006500 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064f4:	893b      	ldrh	r3, [r7, #8]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	611a      	str	r2, [r3, #16]
 80064fe:	e021      	b.n	8006544 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006500:	893b      	ldrh	r3, [r7, #8]
 8006502:	0a1b      	lsrs	r3, r3, #8
 8006504:	b29b      	uxth	r3, r3
 8006506:	b2da      	uxtb	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800650e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006510:	6a39      	ldr	r1, [r7, #32]
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 fa9e 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00d      	beq.n	800653a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006522:	2b04      	cmp	r3, #4
 8006524:	d107      	bne.n	8006536 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006534:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e050      	b.n	80065dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800653a:	893b      	ldrh	r3, [r7, #8]
 800653c:	b2da      	uxtb	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006546:	6a39      	ldr	r1, [r7, #32]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fa83 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00d      	beq.n	8006570 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006558:	2b04      	cmp	r3, #4
 800655a:	d107      	bne.n	800656c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800656a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e035      	b.n	80065dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800657e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	2200      	movs	r2, #0
 8006588:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f947 	bl	8006820 <I2C_WaitOnFlagUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00d      	beq.n	80065b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065a6:	d103      	bne.n	80065b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e013      	b.n	80065dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065b4:	897b      	ldrh	r3, [r7, #10]
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f043 0301 	orr.w	r3, r3, #1
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c6:	6a3a      	ldr	r2, [r7, #32]
 80065c8:	4906      	ldr	r1, [pc, #24]	@ (80065e4 <I2C_RequestMemoryRead+0x1cc>)
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 f9a2 	bl	8006914 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	00010002 	.word	0x00010002

080065e8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065fc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006604:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800661a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006628:	2200      	movs	r2, #0
 800662a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006638:	2200      	movs	r2, #0
 800663a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800663c:	7cfb      	ldrb	r3, [r7, #19]
 800663e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006642:	2b21      	cmp	r3, #33	@ 0x21
 8006644:	d007      	beq.n	8006656 <I2C_DMAXferCplt+0x6e>
 8006646:	7cfb      	ldrb	r3, [r7, #19]
 8006648:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800664c:	2b22      	cmp	r3, #34	@ 0x22
 800664e:	d131      	bne.n	80066b4 <I2C_DMAXferCplt+0xcc>
 8006650:	7cbb      	ldrb	r3, [r7, #18]
 8006652:	2b20      	cmp	r3, #32
 8006654:	d12e      	bne.n	80066b4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006664:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2200      	movs	r2, #0
 800666a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800666c:	7cfb      	ldrb	r3, [r7, #19]
 800666e:	2b29      	cmp	r3, #41	@ 0x29
 8006670:	d10a      	bne.n	8006688 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2221      	movs	r2, #33	@ 0x21
 8006676:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2228      	movs	r2, #40	@ 0x28
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006680:	6978      	ldr	r0, [r7, #20]
 8006682:	f7ff fe15 	bl	80062b0 <HAL_I2C_SlaveTxCpltCallback>
 8006686:	e00c      	b.n	80066a2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006688:	7cfb      	ldrb	r3, [r7, #19]
 800668a:	2b2a      	cmp	r3, #42	@ 0x2a
 800668c:	d109      	bne.n	80066a2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2222      	movs	r2, #34	@ 0x22
 8006692:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2228      	movs	r2, #40	@ 0x28
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800669c:	6978      	ldr	r0, [r7, #20]
 800669e:	f7ff fe11 	bl	80062c4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80066b0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80066b2:	e074      	b.n	800679e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d06e      	beq.n	800679e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d107      	bne.n	80066da <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066d8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80066e8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066f0:	d009      	beq.n	8006706 <I2C_DMAXferCplt+0x11e>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d006      	beq.n	8006706 <I2C_DMAXferCplt+0x11e>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80066fe:	d002      	beq.n	8006706 <I2C_DMAXferCplt+0x11e>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b20      	cmp	r3, #32
 8006704:	d107      	bne.n	8006716 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006714:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006724:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006734:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2200      	movs	r2, #0
 800673a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006744:	6978      	ldr	r0, [r7, #20]
 8006746:	f7ff fdc7 	bl	80062d8 <HAL_I2C_ErrorCallback>
}
 800674a:	e028      	b.n	800679e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b40      	cmp	r3, #64	@ 0x40
 800675e:	d10a      	bne.n	8006776 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2200      	movs	r2, #0
 800676c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800676e:	6978      	ldr	r0, [r7, #20]
 8006770:	f7fa fff8 	bl	8001764 <HAL_I2C_MemRxCpltCallback>
}
 8006774:	e013      	b.n	800679e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b08      	cmp	r3, #8
 8006782:	d002      	beq.n	800678a <I2C_DMAXferCplt+0x1a2>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b20      	cmp	r3, #32
 8006788:	d103      	bne.n	8006792 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2200      	movs	r2, #0
 800678e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006790:	e002      	b.n	8006798 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2212      	movs	r2, #18
 8006796:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006798:	6978      	ldr	r0, [r7, #20]
 800679a:	f7ff fd7f 	bl	800629c <HAL_I2C_MasterRxCpltCallback>
}
 800679e:	bf00      	nop
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c0:	2200      	movs	r2, #0
 80067c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d0:	2200      	movs	r2, #0
 80067d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7fe fc7d 	bl	80050d4 <HAL_DMA_GetError>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d01b      	beq.n	8006818 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ee:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680a:	f043 0210 	orr.w	r2, r3, #16
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7ff fd60 	bl	80062d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006818:	bf00      	nop
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	4613      	mov	r3, r2
 800682e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006830:	e048      	b.n	80068c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006838:	d044      	beq.n	80068c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800683a:	f7fd fc47 	bl	80040cc <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d302      	bcc.n	8006850 <I2C_WaitOnFlagUntilTimeout+0x30>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d139      	bne.n	80068c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	0c1b      	lsrs	r3, r3, #16
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b01      	cmp	r3, #1
 8006858:	d10d      	bne.n	8006876 <I2C_WaitOnFlagUntilTimeout+0x56>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	43da      	mvns	r2, r3
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	4013      	ands	r3, r2
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	bf0c      	ite	eq
 800686c:	2301      	moveq	r3, #1
 800686e:	2300      	movne	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	e00c      	b.n	8006890 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	43da      	mvns	r2, r3
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	4013      	ands	r3, r2
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	bf0c      	ite	eq
 8006888:	2301      	moveq	r3, #1
 800688a:	2300      	movne	r3, #0
 800688c:	b2db      	uxtb	r3, r3
 800688e:	461a      	mov	r2, r3
 8006890:	79fb      	ldrb	r3, [r7, #7]
 8006892:	429a      	cmp	r2, r3
 8006894:	d116      	bne.n	80068c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b0:	f043 0220 	orr.w	r2, r3, #32
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e023      	b.n	800690c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	0c1b      	lsrs	r3, r3, #16
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d10d      	bne.n	80068ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	43da      	mvns	r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4013      	ands	r3, r2
 80068da:	b29b      	uxth	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	bf0c      	ite	eq
 80068e0:	2301      	moveq	r3, #1
 80068e2:	2300      	movne	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	e00c      	b.n	8006904 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	43da      	mvns	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4013      	ands	r3, r2
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bf0c      	ite	eq
 80068fc:	2301      	moveq	r3, #1
 80068fe:	2300      	movne	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	461a      	mov	r2, r3
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	429a      	cmp	r2, r3
 8006908:	d093      	beq.n	8006832 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006922:	e071      	b.n	8006a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800692e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006932:	d123      	bne.n	800697c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006942:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800694c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006968:	f043 0204 	orr.w	r2, r3, #4
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e067      	b.n	8006a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006982:	d041      	beq.n	8006a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006984:	f7fd fba2 	bl	80040cc <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	d302      	bcc.n	800699a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d136      	bne.n	8006a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	0c1b      	lsrs	r3, r3, #16
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d10c      	bne.n	80069be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	43da      	mvns	r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	4013      	ands	r3, r2
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bf14      	ite	ne
 80069b6:	2301      	movne	r3, #1
 80069b8:	2300      	moveq	r3, #0
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	e00b      	b.n	80069d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	43da      	mvns	r2, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4013      	ands	r3, r2
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bf14      	ite	ne
 80069d0:	2301      	movne	r3, #1
 80069d2:	2300      	moveq	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d016      	beq.n	8006a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f4:	f043 0220 	orr.w	r2, r3, #32
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e021      	b.n	8006a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	0c1b      	lsrs	r3, r3, #16
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d10c      	bne.n	8006a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	43da      	mvns	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	bf14      	ite	ne
 8006a24:	2301      	movne	r3, #1
 8006a26:	2300      	moveq	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	e00b      	b.n	8006a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	43da      	mvns	r2, r3
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4013      	ands	r3, r2
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bf14      	ite	ne
 8006a3e:	2301      	movne	r3, #1
 8006a40:	2300      	moveq	r3, #0
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f47f af6d 	bne.w	8006924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a60:	e034      	b.n	8006acc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f8e3 	bl	8006c2e <I2C_IsAcknowledgeFailed>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e034      	b.n	8006adc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a78:	d028      	beq.n	8006acc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7a:	f7fd fb27 	bl	80040cc <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d11d      	bne.n	8006acc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a9a:	2b80      	cmp	r3, #128	@ 0x80
 8006a9c:	d016      	beq.n	8006acc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab8:	f043 0220 	orr.w	r2, r3, #32
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e007      	b.n	8006adc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad6:	2b80      	cmp	r3, #128	@ 0x80
 8006ad8:	d1c3      	bne.n	8006a62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006af0:	e034      	b.n	8006b5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f89b 	bl	8006c2e <I2C_IsAcknowledgeFailed>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e034      	b.n	8006b6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b08:	d028      	beq.n	8006b5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0a:	f7fd fadf 	bl	80040cc <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d302      	bcc.n	8006b20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d11d      	bne.n	8006b5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d016      	beq.n	8006b5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b48:	f043 0220 	orr.w	r2, r3, #32
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e007      	b.n	8006b6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	f003 0304 	and.w	r3, r3, #4
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d1c3      	bne.n	8006af2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b80:	e049      	b.n	8006c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	f003 0310 	and.w	r3, r3, #16
 8006b8c:	2b10      	cmp	r3, #16
 8006b8e:	d119      	bne.n	8006bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f06f 0210 	mvn.w	r2, #16
 8006b98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e030      	b.n	8006c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc4:	f7fd fa82 	bl	80040cc <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d302      	bcc.n	8006bda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d11d      	bne.n	8006c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be4:	2b40      	cmp	r3, #64	@ 0x40
 8006be6:	d016      	beq.n	8006c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c02:	f043 0220 	orr.w	r2, r3, #32
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e007      	b.n	8006c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c20:	2b40      	cmp	r3, #64	@ 0x40
 8006c22:	d1ae      	bne.n	8006b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c44:	d11b      	bne.n	8006c7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6a:	f043 0204 	orr.w	r2, r3, #4
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e0cc      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ca0:	4b68      	ldr	r3, [pc, #416]	@ (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d90c      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cae:	4b65      	ldr	r3, [pc, #404]	@ (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cb6:	4b63      	ldr	r3, [pc, #396]	@ (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d001      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e0b8      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d020      	beq.n	8006d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ce0:	4b59      	ldr	r3, [pc, #356]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	4a58      	ldr	r2, [pc, #352]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006cea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cf8:	4b53      	ldr	r3, [pc, #332]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	4a52      	ldr	r2, [pc, #328]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d04:	4b50      	ldr	r3, [pc, #320]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	494d      	ldr	r1, [pc, #308]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d044      	beq.n	8006dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d107      	bne.n	8006d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d2a:	4b47      	ldr	r3, [pc, #284]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d119      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e07f      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d003      	beq.n	8006d4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d107      	bne.n	8006d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e06f      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e067      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d6a:	4b37      	ldr	r3, [pc, #220]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f023 0203 	bic.w	r2, r3, #3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	4934      	ldr	r1, [pc, #208]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d7c:	f7fd f9a6 	bl	80040cc <HAL_GetTick>
 8006d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d82:	e00a      	b.n	8006d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d84:	f7fd f9a2 	bl	80040cc <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e04f      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 020c 	and.w	r2, r3, #12
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d1eb      	bne.n	8006d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dac:	4b25      	ldr	r3, [pc, #148]	@ (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d20c      	bcs.n	8006dd4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dba:	4b22      	ldr	r3, [pc, #136]	@ (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc2:	4b20      	ldr	r3, [pc, #128]	@ (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d001      	beq.n	8006dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e032      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d008      	beq.n	8006df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006de0:	4b19      	ldr	r3, [pc, #100]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	4916      	ldr	r1, [pc, #88]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0308 	and.w	r3, r3, #8
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dfe:	4b12      	ldr	r3, [pc, #72]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	490e      	ldr	r1, [pc, #56]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e12:	f000 f855 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 8006e16:	4602      	mov	r2, r0
 8006e18:	4b0b      	ldr	r3, [pc, #44]	@ (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	091b      	lsrs	r3, r3, #4
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	490a      	ldr	r1, [pc, #40]	@ (8006e4c <HAL_RCC_ClockConfig+0x1c0>)
 8006e24:	5ccb      	ldrb	r3, [r1, r3]
 8006e26:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2a:	4a09      	ldr	r2, [pc, #36]	@ (8006e50 <HAL_RCC_ClockConfig+0x1c4>)
 8006e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006e2e:	4b09      	ldr	r3, [pc, #36]	@ (8006e54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fd f906 	bl	8004044 <HAL_InitTick>

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	40023c00 	.word	0x40023c00
 8006e48:	40023800 	.word	0x40023800
 8006e4c:	0800c030 	.word	0x0800c030
 8006e50:	20000004 	.word	0x20000004
 8006e54:	200003c0 	.word	0x200003c0

08006e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e5c:	4b03      	ldr	r3, [pc, #12]	@ (8006e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20000004 	.word	0x20000004

08006e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e74:	f7ff fff0 	bl	8006e58 <HAL_RCC_GetHCLKFreq>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	0a9b      	lsrs	r3, r3, #10
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	4903      	ldr	r1, [pc, #12]	@ (8006e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e86:	5ccb      	ldrb	r3, [r1, r3]
 8006e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	40023800 	.word	0x40023800
 8006e94:	0800c040 	.word	0x0800c040

08006e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e9c:	f7ff ffdc 	bl	8006e58 <HAL_RCC_GetHCLKFreq>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	4b05      	ldr	r3, [pc, #20]	@ (8006eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	0b5b      	lsrs	r3, r3, #13
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	4903      	ldr	r1, [pc, #12]	@ (8006ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eae:	5ccb      	ldrb	r3, [r1, r3]
 8006eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	0800c040 	.word	0x0800c040

08006ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec4:	b0ae      	sub	sp, #184	@ 0xb8
 8006ec6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ee6:	4bcb      	ldr	r3, [pc, #812]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x354>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f003 030c 	and.w	r3, r3, #12
 8006eee:	2b0c      	cmp	r3, #12
 8006ef0:	f200 8206 	bhi.w	8007300 <HAL_RCC_GetSysClockFreq+0x440>
 8006ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8006efc <HAL_RCC_GetSysClockFreq+0x3c>)
 8006ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efa:	bf00      	nop
 8006efc:	08006f31 	.word	0x08006f31
 8006f00:	08007301 	.word	0x08007301
 8006f04:	08007301 	.word	0x08007301
 8006f08:	08007301 	.word	0x08007301
 8006f0c:	08006f39 	.word	0x08006f39
 8006f10:	08007301 	.word	0x08007301
 8006f14:	08007301 	.word	0x08007301
 8006f18:	08007301 	.word	0x08007301
 8006f1c:	08006f41 	.word	0x08006f41
 8006f20:	08007301 	.word	0x08007301
 8006f24:	08007301 	.word	0x08007301
 8006f28:	08007301 	.word	0x08007301
 8006f2c:	08007131 	.word	0x08007131
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f30:	4bb9      	ldr	r3, [pc, #740]	@ (8007218 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006f36:	e1e7      	b.n	8007308 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f38:	4bb8      	ldr	r3, [pc, #736]	@ (800721c <HAL_RCC_GetSysClockFreq+0x35c>)
 8006f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006f3e:	e1e3      	b.n	8007308 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f40:	4bb4      	ldr	r3, [pc, #720]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f4c:	4bb1      	ldr	r3, [pc, #708]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d071      	beq.n	800703c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f58:	4bae      	ldr	r3, [pc, #696]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	099b      	lsrs	r3, r3, #6
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f64:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f74:	2300      	movs	r3, #0
 8006f76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f7e:	4622      	mov	r2, r4
 8006f80:	462b      	mov	r3, r5
 8006f82:	f04f 0000 	mov.w	r0, #0
 8006f86:	f04f 0100 	mov.w	r1, #0
 8006f8a:	0159      	lsls	r1, r3, #5
 8006f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f90:	0150      	lsls	r0, r2, #5
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	4621      	mov	r1, r4
 8006f98:	1a51      	subs	r1, r2, r1
 8006f9a:	6439      	str	r1, [r7, #64]	@ 0x40
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8006fa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	f04f 0300 	mov.w	r3, #0
 8006fac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	018b      	lsls	r3, r1, #6
 8006fb4:	4641      	mov	r1, r8
 8006fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fba:	4641      	mov	r1, r8
 8006fbc:	018a      	lsls	r2, r1, #6
 8006fbe:	4641      	mov	r1, r8
 8006fc0:	1a51      	subs	r1, r2, r1
 8006fc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8006fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006fd8:	4649      	mov	r1, r9
 8006fda:	00cb      	lsls	r3, r1, #3
 8006fdc:	4641      	mov	r1, r8
 8006fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fe2:	4641      	mov	r1, r8
 8006fe4:	00ca      	lsls	r2, r1, #3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	4622      	mov	r2, r4
 8006fee:	189b      	adds	r3, r3, r2
 8006ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ff2:	462b      	mov	r3, r5
 8006ff4:	460a      	mov	r2, r1
 8006ff6:	eb42 0303 	adc.w	r3, r2, r3
 8006ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007008:	4629      	mov	r1, r5
 800700a:	024b      	lsls	r3, r1, #9
 800700c:	4621      	mov	r1, r4
 800700e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007012:	4621      	mov	r1, r4
 8007014:	024a      	lsls	r2, r1, #9
 8007016:	4610      	mov	r0, r2
 8007018:	4619      	mov	r1, r3
 800701a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800701e:	2200      	movs	r2, #0
 8007020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007024:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007028:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800702c:	f7f9 fe5c 	bl	8000ce8 <__aeabi_uldivmod>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	4613      	mov	r3, r2
 8007036:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800703a:	e067      	b.n	800710c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800703c:	4b75      	ldr	r3, [pc, #468]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x354>)
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	099b      	lsrs	r3, r3, #6
 8007042:	2200      	movs	r2, #0
 8007044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007048:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800704c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007054:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007056:	2300      	movs	r3, #0
 8007058:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800705a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800705e:	4622      	mov	r2, r4
 8007060:	462b      	mov	r3, r5
 8007062:	f04f 0000 	mov.w	r0, #0
 8007066:	f04f 0100 	mov.w	r1, #0
 800706a:	0159      	lsls	r1, r3, #5
 800706c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007070:	0150      	lsls	r0, r2, #5
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4621      	mov	r1, r4
 8007078:	1a51      	subs	r1, r2, r1
 800707a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800707c:	4629      	mov	r1, r5
 800707e:	eb63 0301 	sbc.w	r3, r3, r1
 8007082:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007084:	f04f 0200 	mov.w	r2, #0
 8007088:	f04f 0300 	mov.w	r3, #0
 800708c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007090:	4649      	mov	r1, r9
 8007092:	018b      	lsls	r3, r1, #6
 8007094:	4641      	mov	r1, r8
 8007096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800709a:	4641      	mov	r1, r8
 800709c:	018a      	lsls	r2, r1, #6
 800709e:	4641      	mov	r1, r8
 80070a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80070a4:	4649      	mov	r1, r9
 80070a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	f04f 0300 	mov.w	r3, #0
 80070b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070be:	4692      	mov	sl, r2
 80070c0:	469b      	mov	fp, r3
 80070c2:	4623      	mov	r3, r4
 80070c4:	eb1a 0303 	adds.w	r3, sl, r3
 80070c8:	623b      	str	r3, [r7, #32]
 80070ca:	462b      	mov	r3, r5
 80070cc:	eb4b 0303 	adc.w	r3, fp, r3
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070d2:	f04f 0200 	mov.w	r2, #0
 80070d6:	f04f 0300 	mov.w	r3, #0
 80070da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80070de:	4629      	mov	r1, r5
 80070e0:	028b      	lsls	r3, r1, #10
 80070e2:	4621      	mov	r1, r4
 80070e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070e8:	4621      	mov	r1, r4
 80070ea:	028a      	lsls	r2, r1, #10
 80070ec:	4610      	mov	r0, r2
 80070ee:	4619      	mov	r1, r3
 80070f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070f4:	2200      	movs	r2, #0
 80070f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80070f8:	677a      	str	r2, [r7, #116]	@ 0x74
 80070fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80070fe:	f7f9 fdf3 	bl	8000ce8 <__aeabi_uldivmod>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	4613      	mov	r3, r2
 8007108:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800710c:	4b41      	ldr	r3, [pc, #260]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x354>)
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	0c1b      	lsrs	r3, r3, #16
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	3301      	adds	r3, #1
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800711e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007126:	fbb2 f3f3 	udiv	r3, r2, r3
 800712a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800712e:	e0eb      	b.n	8007308 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007130:	4b38      	ldr	r3, [pc, #224]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x354>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007138:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800713c:	4b35      	ldr	r3, [pc, #212]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x354>)
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d06b      	beq.n	8007220 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007148:	4b32      	ldr	r3, [pc, #200]	@ (8007214 <HAL_RCC_GetSysClockFreq+0x354>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	099b      	lsrs	r3, r3, #6
 800714e:	2200      	movs	r2, #0
 8007150:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007152:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007154:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715a:	663b      	str	r3, [r7, #96]	@ 0x60
 800715c:	2300      	movs	r3, #0
 800715e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007160:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007164:	4622      	mov	r2, r4
 8007166:	462b      	mov	r3, r5
 8007168:	f04f 0000 	mov.w	r0, #0
 800716c:	f04f 0100 	mov.w	r1, #0
 8007170:	0159      	lsls	r1, r3, #5
 8007172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007176:	0150      	lsls	r0, r2, #5
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4621      	mov	r1, r4
 800717e:	1a51      	subs	r1, r2, r1
 8007180:	61b9      	str	r1, [r7, #24]
 8007182:	4629      	mov	r1, r5
 8007184:	eb63 0301 	sbc.w	r3, r3, r1
 8007188:	61fb      	str	r3, [r7, #28]
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007196:	4659      	mov	r1, fp
 8007198:	018b      	lsls	r3, r1, #6
 800719a:	4651      	mov	r1, sl
 800719c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071a0:	4651      	mov	r1, sl
 80071a2:	018a      	lsls	r2, r1, #6
 80071a4:	4651      	mov	r1, sl
 80071a6:	ebb2 0801 	subs.w	r8, r2, r1
 80071aa:	4659      	mov	r1, fp
 80071ac:	eb63 0901 	sbc.w	r9, r3, r1
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071c4:	4690      	mov	r8, r2
 80071c6:	4699      	mov	r9, r3
 80071c8:	4623      	mov	r3, r4
 80071ca:	eb18 0303 	adds.w	r3, r8, r3
 80071ce:	613b      	str	r3, [r7, #16]
 80071d0:	462b      	mov	r3, r5
 80071d2:	eb49 0303 	adc.w	r3, r9, r3
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	f04f 0300 	mov.w	r3, #0
 80071e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80071e4:	4629      	mov	r1, r5
 80071e6:	024b      	lsls	r3, r1, #9
 80071e8:	4621      	mov	r1, r4
 80071ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80071ee:	4621      	mov	r1, r4
 80071f0:	024a      	lsls	r2, r1, #9
 80071f2:	4610      	mov	r0, r2
 80071f4:	4619      	mov	r1, r3
 80071f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071fa:	2200      	movs	r2, #0
 80071fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007200:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007204:	f7f9 fd70 	bl	8000ce8 <__aeabi_uldivmod>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4613      	mov	r3, r2
 800720e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007212:	e065      	b.n	80072e0 <HAL_RCC_GetSysClockFreq+0x420>
 8007214:	40023800 	.word	0x40023800
 8007218:	00f42400 	.word	0x00f42400
 800721c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007220:	4b3d      	ldr	r3, [pc, #244]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x458>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	099b      	lsrs	r3, r3, #6
 8007226:	2200      	movs	r2, #0
 8007228:	4618      	mov	r0, r3
 800722a:	4611      	mov	r1, r2
 800722c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007230:	653b      	str	r3, [r7, #80]	@ 0x50
 8007232:	2300      	movs	r3, #0
 8007234:	657b      	str	r3, [r7, #84]	@ 0x54
 8007236:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800723a:	4642      	mov	r2, r8
 800723c:	464b      	mov	r3, r9
 800723e:	f04f 0000 	mov.w	r0, #0
 8007242:	f04f 0100 	mov.w	r1, #0
 8007246:	0159      	lsls	r1, r3, #5
 8007248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800724c:	0150      	lsls	r0, r2, #5
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	4641      	mov	r1, r8
 8007254:	1a51      	subs	r1, r2, r1
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	4649      	mov	r1, r9
 800725a:	eb63 0301 	sbc.w	r3, r3, r1
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800726c:	4659      	mov	r1, fp
 800726e:	018b      	lsls	r3, r1, #6
 8007270:	4651      	mov	r1, sl
 8007272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007276:	4651      	mov	r1, sl
 8007278:	018a      	lsls	r2, r1, #6
 800727a:	4651      	mov	r1, sl
 800727c:	1a54      	subs	r4, r2, r1
 800727e:	4659      	mov	r1, fp
 8007280:	eb63 0501 	sbc.w	r5, r3, r1
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	00eb      	lsls	r3, r5, #3
 800728e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007292:	00e2      	lsls	r2, r4, #3
 8007294:	4614      	mov	r4, r2
 8007296:	461d      	mov	r5, r3
 8007298:	4643      	mov	r3, r8
 800729a:	18e3      	adds	r3, r4, r3
 800729c:	603b      	str	r3, [r7, #0]
 800729e:	464b      	mov	r3, r9
 80072a0:	eb45 0303 	adc.w	r3, r5, r3
 80072a4:	607b      	str	r3, [r7, #4]
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072b2:	4629      	mov	r1, r5
 80072b4:	028b      	lsls	r3, r1, #10
 80072b6:	4621      	mov	r1, r4
 80072b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072bc:	4621      	mov	r1, r4
 80072be:	028a      	lsls	r2, r1, #10
 80072c0:	4610      	mov	r0, r2
 80072c2:	4619      	mov	r1, r3
 80072c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072c8:	2200      	movs	r2, #0
 80072ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072cc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80072ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072d2:	f7f9 fd09 	bl	8000ce8 <__aeabi_uldivmod>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4613      	mov	r3, r2
 80072dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80072e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x458>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	0f1b      	lsrs	r3, r3, #28
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80072ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80072f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80072fe:	e003      	b.n	8007308 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007300:	4b06      	ldr	r3, [pc, #24]	@ (800731c <HAL_RCC_GetSysClockFreq+0x45c>)
 8007302:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007306:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007308:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800730c:	4618      	mov	r0, r3
 800730e:	37b8      	adds	r7, #184	@ 0xb8
 8007310:	46bd      	mov	sp, r7
 8007312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007316:	bf00      	nop
 8007318:	40023800 	.word	0x40023800
 800731c:	00f42400 	.word	0x00f42400

08007320 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e28d      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 8083 	beq.w	8007446 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007340:	4b94      	ldr	r3, [pc, #592]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 030c 	and.w	r3, r3, #12
 8007348:	2b04      	cmp	r3, #4
 800734a:	d019      	beq.n	8007380 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800734c:	4b91      	ldr	r3, [pc, #580]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 030c 	and.w	r3, r3, #12
        || \
 8007354:	2b08      	cmp	r3, #8
 8007356:	d106      	bne.n	8007366 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007358:	4b8e      	ldr	r3, [pc, #568]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007360:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007364:	d00c      	beq.n	8007380 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007366:	4b8b      	ldr	r3, [pc, #556]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800736e:	2b0c      	cmp	r3, #12
 8007370:	d112      	bne.n	8007398 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007372:	4b88      	ldr	r3, [pc, #544]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800737a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800737e:	d10b      	bne.n	8007398 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007380:	4b84      	ldr	r3, [pc, #528]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d05b      	beq.n	8007444 <HAL_RCC_OscConfig+0x124>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d157      	bne.n	8007444 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e25a      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a0:	d106      	bne.n	80073b0 <HAL_RCC_OscConfig+0x90>
 80073a2:	4b7c      	ldr	r3, [pc, #496]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a7b      	ldr	r2, [pc, #492]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80073a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	e01d      	b.n	80073ec <HAL_RCC_OscConfig+0xcc>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073b8:	d10c      	bne.n	80073d4 <HAL_RCC_OscConfig+0xb4>
 80073ba:	4b76      	ldr	r3, [pc, #472]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a75      	ldr	r2, [pc, #468]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80073c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	4b73      	ldr	r3, [pc, #460]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a72      	ldr	r2, [pc, #456]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80073cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	e00b      	b.n	80073ec <HAL_RCC_OscConfig+0xcc>
 80073d4:	4b6f      	ldr	r3, [pc, #444]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a6e      	ldr	r2, [pc, #440]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80073da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	4b6c      	ldr	r3, [pc, #432]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a6b      	ldr	r2, [pc, #428]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80073e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d013      	beq.n	800741c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f4:	f7fc fe6a 	bl	80040cc <HAL_GetTick>
 80073f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073fa:	e008      	b.n	800740e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073fc:	f7fc fe66 	bl	80040cc <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b64      	cmp	r3, #100	@ 0x64
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e21f      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800740e:	4b61      	ldr	r3, [pc, #388]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0f0      	beq.n	80073fc <HAL_RCC_OscConfig+0xdc>
 800741a:	e014      	b.n	8007446 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741c:	f7fc fe56 	bl	80040cc <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007422:	e008      	b.n	8007436 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007424:	f7fc fe52 	bl	80040cc <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b64      	cmp	r3, #100	@ 0x64
 8007430:	d901      	bls.n	8007436 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e20b      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007436:	4b57      	ldr	r3, [pc, #348]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f0      	bne.n	8007424 <HAL_RCC_OscConfig+0x104>
 8007442:	e000      	b.n	8007446 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d06f      	beq.n	8007532 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007452:	4b50      	ldr	r3, [pc, #320]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f003 030c 	and.w	r3, r3, #12
 800745a:	2b00      	cmp	r3, #0
 800745c:	d017      	beq.n	800748e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800745e:	4b4d      	ldr	r3, [pc, #308]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f003 030c 	and.w	r3, r3, #12
        || \
 8007466:	2b08      	cmp	r3, #8
 8007468:	d105      	bne.n	8007476 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800746a:	4b4a      	ldr	r3, [pc, #296]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00b      	beq.n	800748e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007476:	4b47      	ldr	r3, [pc, #284]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800747e:	2b0c      	cmp	r3, #12
 8007480:	d11c      	bne.n	80074bc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007482:	4b44      	ldr	r3, [pc, #272]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d116      	bne.n	80074bc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800748e:	4b41      	ldr	r3, [pc, #260]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_RCC_OscConfig+0x186>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d001      	beq.n	80074a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e1d3      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074a6:	4b3b      	ldr	r3, [pc, #236]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	4937      	ldr	r1, [pc, #220]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074ba:	e03a      	b.n	8007532 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d020      	beq.n	8007506 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074c4:	4b34      	ldr	r3, [pc, #208]	@ (8007598 <HAL_RCC_OscConfig+0x278>)
 80074c6:	2201      	movs	r2, #1
 80074c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ca:	f7fc fdff 	bl	80040cc <HAL_GetTick>
 80074ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074d0:	e008      	b.n	80074e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074d2:	f7fc fdfb 	bl	80040cc <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d901      	bls.n	80074e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e1b4      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0f0      	beq.n	80074d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074f0:	4b28      	ldr	r3, [pc, #160]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	4925      	ldr	r1, [pc, #148]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007500:	4313      	orrs	r3, r2
 8007502:	600b      	str	r3, [r1, #0]
 8007504:	e015      	b.n	8007532 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007506:	4b24      	ldr	r3, [pc, #144]	@ (8007598 <HAL_RCC_OscConfig+0x278>)
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750c:	f7fc fdde 	bl	80040cc <HAL_GetTick>
 8007510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007514:	f7fc fdda 	bl	80040cc <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b02      	cmp	r3, #2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e193      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007526:	4b1b      	ldr	r3, [pc, #108]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f0      	bne.n	8007514 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b00      	cmp	r3, #0
 800753c:	d036      	beq.n	80075ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d016      	beq.n	8007574 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007546:	4b15      	ldr	r3, [pc, #84]	@ (800759c <HAL_RCC_OscConfig+0x27c>)
 8007548:	2201      	movs	r2, #1
 800754a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800754c:	f7fc fdbe 	bl	80040cc <HAL_GetTick>
 8007550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007552:	e008      	b.n	8007566 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007554:	f7fc fdba 	bl	80040cc <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e173      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007566:	4b0b      	ldr	r3, [pc, #44]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0f0      	beq.n	8007554 <HAL_RCC_OscConfig+0x234>
 8007572:	e01b      	b.n	80075ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007574:	4b09      	ldr	r3, [pc, #36]	@ (800759c <HAL_RCC_OscConfig+0x27c>)
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800757a:	f7fc fda7 	bl	80040cc <HAL_GetTick>
 800757e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007580:	e00e      	b.n	80075a0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007582:	f7fc fda3 	bl	80040cc <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d907      	bls.n	80075a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e15c      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
 8007594:	40023800 	.word	0x40023800
 8007598:	42470000 	.word	0x42470000
 800759c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075a0:	4b8a      	ldr	r3, [pc, #552]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 80075a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1ea      	bne.n	8007582 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8097 	beq.w	80076e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075ba:	2300      	movs	r3, #0
 80075bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075be:	4b83      	ldr	r3, [pc, #524]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 80075c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10f      	bne.n	80075ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075ca:	2300      	movs	r3, #0
 80075cc:	60bb      	str	r3, [r7, #8]
 80075ce:	4b7f      	ldr	r3, [pc, #508]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d2:	4a7e      	ldr	r2, [pc, #504]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 80075d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80075da:	4b7c      	ldr	r3, [pc, #496]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 80075dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075e2:	60bb      	str	r3, [r7, #8]
 80075e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075e6:	2301      	movs	r3, #1
 80075e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ea:	4b79      	ldr	r3, [pc, #484]	@ (80077d0 <HAL_RCC_OscConfig+0x4b0>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d118      	bne.n	8007628 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075f6:	4b76      	ldr	r3, [pc, #472]	@ (80077d0 <HAL_RCC_OscConfig+0x4b0>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a75      	ldr	r2, [pc, #468]	@ (80077d0 <HAL_RCC_OscConfig+0x4b0>)
 80075fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007602:	f7fc fd63 	bl	80040cc <HAL_GetTick>
 8007606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007608:	e008      	b.n	800761c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800760a:	f7fc fd5f 	bl	80040cc <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d901      	bls.n	800761c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e118      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800761c:	4b6c      	ldr	r3, [pc, #432]	@ (80077d0 <HAL_RCC_OscConfig+0x4b0>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0f0      	beq.n	800760a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d106      	bne.n	800763e <HAL_RCC_OscConfig+0x31e>
 8007630:	4b66      	ldr	r3, [pc, #408]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 8007632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007634:	4a65      	ldr	r2, [pc, #404]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 8007636:	f043 0301 	orr.w	r3, r3, #1
 800763a:	6713      	str	r3, [r2, #112]	@ 0x70
 800763c:	e01c      	b.n	8007678 <HAL_RCC_OscConfig+0x358>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	2b05      	cmp	r3, #5
 8007644:	d10c      	bne.n	8007660 <HAL_RCC_OscConfig+0x340>
 8007646:	4b61      	ldr	r3, [pc, #388]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 8007648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800764a:	4a60      	ldr	r2, [pc, #384]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 800764c:	f043 0304 	orr.w	r3, r3, #4
 8007650:	6713      	str	r3, [r2, #112]	@ 0x70
 8007652:	4b5e      	ldr	r3, [pc, #376]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 8007654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007656:	4a5d      	ldr	r2, [pc, #372]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 8007658:	f043 0301 	orr.w	r3, r3, #1
 800765c:	6713      	str	r3, [r2, #112]	@ 0x70
 800765e:	e00b      	b.n	8007678 <HAL_RCC_OscConfig+0x358>
 8007660:	4b5a      	ldr	r3, [pc, #360]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 8007662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007664:	4a59      	ldr	r2, [pc, #356]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 8007666:	f023 0301 	bic.w	r3, r3, #1
 800766a:	6713      	str	r3, [r2, #112]	@ 0x70
 800766c:	4b57      	ldr	r3, [pc, #348]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 800766e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007670:	4a56      	ldr	r2, [pc, #344]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 8007672:	f023 0304 	bic.w	r3, r3, #4
 8007676:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d015      	beq.n	80076ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007680:	f7fc fd24 	bl	80040cc <HAL_GetTick>
 8007684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007686:	e00a      	b.n	800769e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007688:	f7fc fd20 	bl	80040cc <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007696:	4293      	cmp	r3, r2
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e0d7      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800769e:	4b4b      	ldr	r3, [pc, #300]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 80076a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0ee      	beq.n	8007688 <HAL_RCC_OscConfig+0x368>
 80076aa:	e014      	b.n	80076d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ac:	f7fc fd0e 	bl	80040cc <HAL_GetTick>
 80076b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076b2:	e00a      	b.n	80076ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076b4:	f7fc fd0a 	bl	80040cc <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e0c1      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ca:	4b40      	ldr	r3, [pc, #256]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 80076cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1ee      	bne.n	80076b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d105      	bne.n	80076e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076dc:	4b3b      	ldr	r3, [pc, #236]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 80076de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e0:	4a3a      	ldr	r2, [pc, #232]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 80076e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 80ad 	beq.w	800784c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076f2:	4b36      	ldr	r3, [pc, #216]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 030c 	and.w	r3, r3, #12
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d060      	beq.n	80077c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d145      	bne.n	8007792 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007706:	4b33      	ldr	r3, [pc, #204]	@ (80077d4 <HAL_RCC_OscConfig+0x4b4>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770c:	f7fc fcde 	bl	80040cc <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007714:	f7fc fcda 	bl	80040cc <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e093      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007726:	4b29      	ldr	r3, [pc, #164]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f0      	bne.n	8007714 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	69da      	ldr	r2, [r3, #28]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007740:	019b      	lsls	r3, r3, #6
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007748:	085b      	lsrs	r3, r3, #1
 800774a:	3b01      	subs	r3, #1
 800774c:	041b      	lsls	r3, r3, #16
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007754:	061b      	lsls	r3, r3, #24
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775c:	071b      	lsls	r3, r3, #28
 800775e:	491b      	ldr	r1, [pc, #108]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 8007760:	4313      	orrs	r3, r2
 8007762:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007764:	4b1b      	ldr	r3, [pc, #108]	@ (80077d4 <HAL_RCC_OscConfig+0x4b4>)
 8007766:	2201      	movs	r2, #1
 8007768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800776a:	f7fc fcaf 	bl	80040cc <HAL_GetTick>
 800776e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007770:	e008      	b.n	8007784 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007772:	f7fc fcab 	bl	80040cc <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d901      	bls.n	8007784 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e064      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007784:	4b11      	ldr	r3, [pc, #68]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0f0      	beq.n	8007772 <HAL_RCC_OscConfig+0x452>
 8007790:	e05c      	b.n	800784c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007792:	4b10      	ldr	r3, [pc, #64]	@ (80077d4 <HAL_RCC_OscConfig+0x4b4>)
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007798:	f7fc fc98 	bl	80040cc <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800779e:	e008      	b.n	80077b2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077a0:	f7fc fc94 	bl	80040cc <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e04d      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b2:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <HAL_RCC_OscConfig+0x4ac>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1f0      	bne.n	80077a0 <HAL_RCC_OscConfig+0x480>
 80077be:	e045      	b.n	800784c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d107      	bne.n	80077d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e040      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
 80077cc:	40023800 	.word	0x40023800
 80077d0:	40007000 	.word	0x40007000
 80077d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077d8:	4b1f      	ldr	r3, [pc, #124]	@ (8007858 <HAL_RCC_OscConfig+0x538>)
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d030      	beq.n	8007848 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d129      	bne.n	8007848 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077fe:	429a      	cmp	r2, r3
 8007800:	d122      	bne.n	8007848 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007808:	4013      	ands	r3, r2
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800780e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007810:	4293      	cmp	r3, r2
 8007812:	d119      	bne.n	8007848 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781e:	085b      	lsrs	r3, r3, #1
 8007820:	3b01      	subs	r3, #1
 8007822:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007824:	429a      	cmp	r2, r3
 8007826:	d10f      	bne.n	8007848 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007832:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007834:	429a      	cmp	r2, r3
 8007836:	d107      	bne.n	8007848 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007842:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007844:	429a      	cmp	r2, r3
 8007846:	d001      	beq.n	800784c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e000      	b.n	800784e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40023800 	.word	0x40023800

0800785c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e07b      	b.n	8007966 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007872:	2b00      	cmp	r3, #0
 8007874:	d108      	bne.n	8007888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800787e:	d009      	beq.n	8007894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	61da      	str	r2, [r3, #28]
 8007886:	e005      	b.n	8007894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d106      	bne.n	80078b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7f9 ffb6 	bl	8001820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80078dc:	431a      	orrs	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	431a      	orrs	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007918:	ea42 0103 	orr.w	r1, r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007920:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	0c1b      	lsrs	r3, r3, #16
 8007932:	f003 0104 	and.w	r1, r3, #4
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793a:	f003 0210 	and.w	r2, r3, #16
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	69da      	ldr	r2, [r3, #28]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007954:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b088      	sub	sp, #32
 8007972:	af00      	add	r7, sp, #0
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	603b      	str	r3, [r7, #0]
 800797a:	4613      	mov	r3, r2
 800797c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800797e:	f7fc fba5 	bl	80040cc <HAL_GetTick>
 8007982:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007984:	88fb      	ldrh	r3, [r7, #6]
 8007986:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	d001      	beq.n	8007998 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007994:	2302      	movs	r3, #2
 8007996:	e12a      	b.n	8007bee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <HAL_SPI_Transmit+0x36>
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e122      	b.n	8007bee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_SPI_Transmit+0x48>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e11b      	b.n	8007bee <HAL_SPI_Transmit+0x280>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2203      	movs	r2, #3
 80079c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	88fa      	ldrh	r2, [r7, #6]
 80079d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	88fa      	ldrh	r2, [r7, #6]
 80079dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a04:	d10f      	bne.n	8007a26 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a30:	2b40      	cmp	r3, #64	@ 0x40
 8007a32:	d007      	beq.n	8007a44 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a4c:	d152      	bne.n	8007af4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_SPI_Transmit+0xee>
 8007a56:	8b7b      	ldrh	r3, [r7, #26]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d145      	bne.n	8007ae8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a60:	881a      	ldrh	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6c:	1c9a      	adds	r2, r3, #2
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a80:	e032      	b.n	8007ae8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d112      	bne.n	8007ab6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a94:	881a      	ldrh	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa0:	1c9a      	adds	r2, r3, #2
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007ab4:	e018      	b.n	8007ae8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ab6:	f7fc fb09 	bl	80040cc <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d803      	bhi.n	8007ace <HAL_SPI_Transmit+0x160>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007acc:	d102      	bne.n	8007ad4 <HAL_SPI_Transmit+0x166>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e082      	b.n	8007bee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1c7      	bne.n	8007a82 <HAL_SPI_Transmit+0x114>
 8007af2:	e053      	b.n	8007b9c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <HAL_SPI_Transmit+0x194>
 8007afc:	8b7b      	ldrh	r3, [r7, #26]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d147      	bne.n	8007b92 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	7812      	ldrb	r2, [r2, #0]
 8007b0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007b28:	e033      	b.n	8007b92 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d113      	bne.n	8007b60 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	330c      	adds	r3, #12
 8007b42:	7812      	ldrb	r2, [r2, #0]
 8007b44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007b5e:	e018      	b.n	8007b92 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b60:	f7fc fab4 	bl	80040cc <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d803      	bhi.n	8007b78 <HAL_SPI_Transmit+0x20a>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b76:	d102      	bne.n	8007b7e <HAL_SPI_Transmit+0x210>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d109      	bne.n	8007b92 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e02d      	b.n	8007bee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1c6      	bne.n	8007b2a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b9c:	69fa      	ldr	r2, [r7, #28]
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f8b1 	bl	8007d08 <SPI_EndRxTxTransaction>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e000      	b.n	8007bee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007bec:	2300      	movs	r3, #0
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3720      	adds	r7, #32
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	4613      	mov	r3, r2
 8007c06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c08:	f7fc fa60 	bl	80040cc <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c10:	1a9b      	subs	r3, r3, r2
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	4413      	add	r3, r2
 8007c16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c18:	f7fc fa58 	bl	80040cc <HAL_GetTick>
 8007c1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c1e:	4b39      	ldr	r3, [pc, #228]	@ (8007d04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	015b      	lsls	r3, r3, #5
 8007c24:	0d1b      	lsrs	r3, r3, #20
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	fb02 f303 	mul.w	r3, r2, r3
 8007c2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c2e:	e055      	b.n	8007cdc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c36:	d051      	beq.n	8007cdc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c38:	f7fc fa48 	bl	80040cc <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d902      	bls.n	8007c4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d13d      	bne.n	8007cca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c66:	d111      	bne.n	8007c8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c70:	d004      	beq.n	8007c7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c7a:	d107      	bne.n	8007c8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c94:	d10f      	bne.n	8007cb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e018      	b.n	8007cfc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d102      	bne.n	8007cd6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61fb      	str	r3, [r7, #28]
 8007cd4:	e002      	b.n	8007cdc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689a      	ldr	r2, [r3, #8]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	bf0c      	ite	eq
 8007cec:	2301      	moveq	r3, #1
 8007cee:	2300      	movne	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d19a      	bne.n	8007c30 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3720      	adds	r7, #32
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	20000004 	.word	0x20000004

08007d08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	2102      	movs	r1, #2
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff ff6a 	bl	8007bf8 <SPI_WaitFlagStateUntilTimeout>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d007      	beq.n	8007d3a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2e:	f043 0220 	orr.w	r2, r3, #32
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e032      	b.n	8007da0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007da8 <SPI_EndRxTxTransaction+0xa0>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8007dac <SPI_EndRxTxTransaction+0xa4>)
 8007d40:	fba2 2303 	umull	r2, r3, r2, r3
 8007d44:	0d5b      	lsrs	r3, r3, #21
 8007d46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d4a:	fb02 f303 	mul.w	r3, r2, r3
 8007d4e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d58:	d112      	bne.n	8007d80 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2200      	movs	r2, #0
 8007d62:	2180      	movs	r1, #128	@ 0x80
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff ff47 	bl	8007bf8 <SPI_WaitFlagStateUntilTimeout>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d016      	beq.n	8007d9e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d74:	f043 0220 	orr.w	r2, r3, #32
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e00f      	b.n	8007da0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d96:	2b80      	cmp	r3, #128	@ 0x80
 8007d98:	d0f2      	beq.n	8007d80 <SPI_EndRxTxTransaction+0x78>
 8007d9a:	e000      	b.n	8007d9e <SPI_EndRxTxTransaction+0x96>
        break;
 8007d9c:	bf00      	nop
  }

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000004 	.word	0x20000004
 8007dac:	165e9f81 	.word	0x165e9f81

08007db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d101      	bne.n	8007dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e041      	b.n	8007e46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d106      	bne.n	8007ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7fa f988 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3304      	adds	r3, #4
 8007dec:	4619      	mov	r1, r3
 8007dee:	4610      	mov	r0, r2
 8007df0:	f000 fcc4 	bl	800877c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d001      	beq.n	8007e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e04e      	b.n	8007f06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0201 	orr.w	r2, r2, #1
 8007e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a23      	ldr	r2, [pc, #140]	@ (8007f14 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d022      	beq.n	8007ed0 <HAL_TIM_Base_Start_IT+0x80>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e92:	d01d      	beq.n	8007ed0 <HAL_TIM_Base_Start_IT+0x80>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1f      	ldr	r2, [pc, #124]	@ (8007f18 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d018      	beq.n	8007ed0 <HAL_TIM_Base_Start_IT+0x80>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8007f1c <HAL_TIM_Base_Start_IT+0xcc>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d013      	beq.n	8007ed0 <HAL_TIM_Base_Start_IT+0x80>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a1c      	ldr	r2, [pc, #112]	@ (8007f20 <HAL_TIM_Base_Start_IT+0xd0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d00e      	beq.n	8007ed0 <HAL_TIM_Base_Start_IT+0x80>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8007f24 <HAL_TIM_Base_Start_IT+0xd4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d009      	beq.n	8007ed0 <HAL_TIM_Base_Start_IT+0x80>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a19      	ldr	r2, [pc, #100]	@ (8007f28 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d004      	beq.n	8007ed0 <HAL_TIM_Base_Start_IT+0x80>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a18      	ldr	r2, [pc, #96]	@ (8007f2c <HAL_TIM_Base_Start_IT+0xdc>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d111      	bne.n	8007ef4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f003 0307 	and.w	r3, r3, #7
 8007eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2b06      	cmp	r3, #6
 8007ee0:	d010      	beq.n	8007f04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f042 0201 	orr.w	r2, r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef2:	e007      	b.n	8007f04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0201 	orr.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	40010000 	.word	0x40010000
 8007f18:	40000400 	.word	0x40000400
 8007f1c:	40000800 	.word	0x40000800
 8007f20:	40000c00 	.word	0x40000c00
 8007f24:	40010400 	.word	0x40010400
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	40001800 	.word	0x40001800

08007f30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e041      	b.n	8007fc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d106      	bne.n	8007f5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fa f814 	bl	8001f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4610      	mov	r0, r2
 8007f70:	f000 fc04 	bl	800877c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d109      	bne.n	8007ff4 <HAL_TIM_PWM_Start+0x24>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	bf14      	ite	ne
 8007fec:	2301      	movne	r3, #1
 8007fee:	2300      	moveq	r3, #0
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	e022      	b.n	800803a <HAL_TIM_PWM_Start+0x6a>
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	d109      	bne.n	800800e <HAL_TIM_PWM_Start+0x3e>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b01      	cmp	r3, #1
 8008004:	bf14      	ite	ne
 8008006:	2301      	movne	r3, #1
 8008008:	2300      	moveq	r3, #0
 800800a:	b2db      	uxtb	r3, r3
 800800c:	e015      	b.n	800803a <HAL_TIM_PWM_Start+0x6a>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b08      	cmp	r3, #8
 8008012:	d109      	bne.n	8008028 <HAL_TIM_PWM_Start+0x58>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b01      	cmp	r3, #1
 800801e:	bf14      	ite	ne
 8008020:	2301      	movne	r3, #1
 8008022:	2300      	moveq	r3, #0
 8008024:	b2db      	uxtb	r3, r3
 8008026:	e008      	b.n	800803a <HAL_TIM_PWM_Start+0x6a>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b01      	cmp	r3, #1
 8008032:	bf14      	ite	ne
 8008034:	2301      	movne	r3, #1
 8008036:	2300      	moveq	r3, #0
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e07c      	b.n	800813c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d104      	bne.n	8008052 <HAL_TIM_PWM_Start+0x82>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008050:	e013      	b.n	800807a <HAL_TIM_PWM_Start+0xaa>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b04      	cmp	r3, #4
 8008056:	d104      	bne.n	8008062 <HAL_TIM_PWM_Start+0x92>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008060:	e00b      	b.n	800807a <HAL_TIM_PWM_Start+0xaa>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b08      	cmp	r3, #8
 8008066:	d104      	bne.n	8008072 <HAL_TIM_PWM_Start+0xa2>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008070:	e003      	b.n	800807a <HAL_TIM_PWM_Start+0xaa>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2202      	movs	r2, #2
 8008076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2201      	movs	r2, #1
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fdd0 	bl	8008c28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a2d      	ldr	r2, [pc, #180]	@ (8008144 <HAL_TIM_PWM_Start+0x174>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d004      	beq.n	800809c <HAL_TIM_PWM_Start+0xcc>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a2c      	ldr	r2, [pc, #176]	@ (8008148 <HAL_TIM_PWM_Start+0x178>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d101      	bne.n	80080a0 <HAL_TIM_PWM_Start+0xd0>
 800809c:	2301      	movs	r3, #1
 800809e:	e000      	b.n	80080a2 <HAL_TIM_PWM_Start+0xd2>
 80080a0:	2300      	movs	r3, #0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d007      	beq.n	80080b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a22      	ldr	r2, [pc, #136]	@ (8008144 <HAL_TIM_PWM_Start+0x174>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d022      	beq.n	8008106 <HAL_TIM_PWM_Start+0x136>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c8:	d01d      	beq.n	8008106 <HAL_TIM_PWM_Start+0x136>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a1f      	ldr	r2, [pc, #124]	@ (800814c <HAL_TIM_PWM_Start+0x17c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d018      	beq.n	8008106 <HAL_TIM_PWM_Start+0x136>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008150 <HAL_TIM_PWM_Start+0x180>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d013      	beq.n	8008106 <HAL_TIM_PWM_Start+0x136>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008154 <HAL_TIM_PWM_Start+0x184>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d00e      	beq.n	8008106 <HAL_TIM_PWM_Start+0x136>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a16      	ldr	r2, [pc, #88]	@ (8008148 <HAL_TIM_PWM_Start+0x178>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d009      	beq.n	8008106 <HAL_TIM_PWM_Start+0x136>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a18      	ldr	r2, [pc, #96]	@ (8008158 <HAL_TIM_PWM_Start+0x188>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d004      	beq.n	8008106 <HAL_TIM_PWM_Start+0x136>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a16      	ldr	r2, [pc, #88]	@ (800815c <HAL_TIM_PWM_Start+0x18c>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d111      	bne.n	800812a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2b06      	cmp	r3, #6
 8008116:	d010      	beq.n	800813a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f042 0201 	orr.w	r2, r2, #1
 8008126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008128:	e007      	b.n	800813a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f042 0201 	orr.w	r2, r2, #1
 8008138:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	40010000 	.word	0x40010000
 8008148:	40010400 	.word	0x40010400
 800814c:	40000400 	.word	0x40000400
 8008150:	40000800 	.word	0x40000800
 8008154:	40000c00 	.word	0x40000c00
 8008158:	40014000 	.word	0x40014000
 800815c:	40001800 	.word	0x40001800

08008160 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e097      	b.n	80082a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d106      	bne.n	800818e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7f9 ff31 	bl	8001ff0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2202      	movs	r2, #2
 8008192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6812      	ldr	r2, [r2, #0]
 80081a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081a4:	f023 0307 	bic.w	r3, r3, #7
 80081a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3304      	adds	r3, #4
 80081b2:	4619      	mov	r1, r3
 80081b4:	4610      	mov	r0, r2
 80081b6:	f000 fae1 	bl	800877c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	4313      	orrs	r3, r2
 80081da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081e2:	f023 0303 	bic.w	r3, r3, #3
 80081e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	4313      	orrs	r3, r2
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008200:	f023 030c 	bic.w	r3, r3, #12
 8008204:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800820c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	021b      	lsls	r3, r3, #8
 800821c:	4313      	orrs	r3, r2
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	4313      	orrs	r3, r2
 8008222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	011a      	lsls	r2, r3, #4
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	031b      	lsls	r3, r3, #12
 8008230:	4313      	orrs	r3, r2
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	4313      	orrs	r3, r2
 8008236:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800823e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008246:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	4313      	orrs	r3, r2
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80082c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80082d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d110      	bne.n	80082fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d102      	bne.n	80082e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80082e2:	7b7b      	ldrb	r3, [r7, #13]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d001      	beq.n	80082ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e069      	b.n	80083c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082fc:	e031      	b.n	8008362 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b04      	cmp	r3, #4
 8008302:	d110      	bne.n	8008326 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d102      	bne.n	8008310 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800830a:	7b3b      	ldrb	r3, [r7, #12]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d001      	beq.n	8008314 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e055      	b.n	80083c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008324:	e01d      	b.n	8008362 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d108      	bne.n	800833e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d105      	bne.n	800833e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008332:	7b7b      	ldrb	r3, [r7, #13]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d102      	bne.n	800833e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008338:	7b3b      	ldrb	r3, [r7, #12]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d001      	beq.n	8008342 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e03e      	b.n	80083c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2202      	movs	r2, #2
 8008346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2202      	movs	r2, #2
 800834e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2202      	movs	r2, #2
 8008356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2202      	movs	r2, #2
 800835e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <HAL_TIM_Encoder_Start+0xc4>
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b04      	cmp	r3, #4
 800836c:	d008      	beq.n	8008380 <HAL_TIM_Encoder_Start+0xd4>
 800836e:	e00f      	b.n	8008390 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2201      	movs	r2, #1
 8008376:	2100      	movs	r1, #0
 8008378:	4618      	mov	r0, r3
 800837a:	f000 fc55 	bl	8008c28 <TIM_CCxChannelCmd>
      break;
 800837e:	e016      	b.n	80083ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2201      	movs	r2, #1
 8008386:	2104      	movs	r1, #4
 8008388:	4618      	mov	r0, r3
 800838a:	f000 fc4d 	bl	8008c28 <TIM_CCxChannelCmd>
      break;
 800838e:	e00e      	b.n	80083ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2201      	movs	r2, #1
 8008396:	2100      	movs	r1, #0
 8008398:	4618      	mov	r0, r3
 800839a:	f000 fc45 	bl	8008c28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2201      	movs	r2, #1
 80083a4:	2104      	movs	r1, #4
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 fc3e 	bl	8008c28 <TIM_CCxChannelCmd>
      break;
 80083ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 0201 	orr.w	r2, r2, #1
 80083bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d020      	beq.n	800842c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f003 0302 	and.w	r3, r3, #2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d01b      	beq.n	800842c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f06f 0202 	mvn.w	r2, #2
 80083fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f994 	bl	8008740 <HAL_TIM_IC_CaptureCallback>
 8008418:	e005      	b.n	8008426 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f986 	bl	800872c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f997 	bl	8008754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f003 0304 	and.w	r3, r3, #4
 8008432:	2b00      	cmp	r3, #0
 8008434:	d020      	beq.n	8008478 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01b      	beq.n	8008478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f06f 0204 	mvn.w	r2, #4
 8008448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2202      	movs	r2, #2
 800844e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f96e 	bl	8008740 <HAL_TIM_IC_CaptureCallback>
 8008464:	e005      	b.n	8008472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f960 	bl	800872c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f971 	bl	8008754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f003 0308 	and.w	r3, r3, #8
 800847e:	2b00      	cmp	r3, #0
 8008480:	d020      	beq.n	80084c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b00      	cmp	r3, #0
 800848a:	d01b      	beq.n	80084c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f06f 0208 	mvn.w	r2, #8
 8008494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2204      	movs	r2, #4
 800849a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f948 	bl	8008740 <HAL_TIM_IC_CaptureCallback>
 80084b0:	e005      	b.n	80084be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f93a 	bl	800872c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f94b 	bl	8008754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f003 0310 	and.w	r3, r3, #16
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d020      	beq.n	8008510 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f003 0310 	and.w	r3, r3, #16
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01b      	beq.n	8008510 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f06f 0210 	mvn.w	r2, #16
 80084e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2208      	movs	r2, #8
 80084e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f922 	bl	8008740 <HAL_TIM_IC_CaptureCallback>
 80084fc:	e005      	b.n	800850a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f914 	bl	800872c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f925 	bl	8008754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00c      	beq.n	8008534 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d007      	beq.n	8008534 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0201 	mvn.w	r2, #1
 800852c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7f9 f8cc 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00c      	beq.n	8008558 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008544:	2b00      	cmp	r3, #0
 8008546:	d007      	beq.n	8008558 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fc14 	bl	8008d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00c      	beq.n	800857c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008568:	2b00      	cmp	r3, #0
 800856a:	d007      	beq.n	800857c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f8f6 	bl	8008768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f003 0320 	and.w	r3, r3, #32
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00c      	beq.n	80085a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f003 0320 	and.w	r3, r3, #32
 800858c:	2b00      	cmp	r3, #0
 800858e:	d007      	beq.n	80085a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f06f 0220 	mvn.w	r2, #32
 8008598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fbe6 	bl	8008d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085a0:	bf00      	nop
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d101      	bne.n	80085c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80085c2:	2302      	movs	r3, #2
 80085c4:	e0ae      	b.n	8008724 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b0c      	cmp	r3, #12
 80085d2:	f200 809f 	bhi.w	8008714 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80085d6:	a201      	add	r2, pc, #4	@ (adr r2, 80085dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	08008611 	.word	0x08008611
 80085e0:	08008715 	.word	0x08008715
 80085e4:	08008715 	.word	0x08008715
 80085e8:	08008715 	.word	0x08008715
 80085ec:	08008651 	.word	0x08008651
 80085f0:	08008715 	.word	0x08008715
 80085f4:	08008715 	.word	0x08008715
 80085f8:	08008715 	.word	0x08008715
 80085fc:	08008693 	.word	0x08008693
 8008600:	08008715 	.word	0x08008715
 8008604:	08008715 	.word	0x08008715
 8008608:	08008715 	.word	0x08008715
 800860c:	080086d3 	.word	0x080086d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68b9      	ldr	r1, [r7, #8]
 8008616:	4618      	mov	r0, r3
 8008618:	f000 f956 	bl	80088c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699a      	ldr	r2, [r3, #24]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f042 0208 	orr.w	r2, r2, #8
 800862a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	699a      	ldr	r2, [r3, #24]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0204 	bic.w	r2, r2, #4
 800863a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6999      	ldr	r1, [r3, #24]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	691a      	ldr	r2, [r3, #16]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	619a      	str	r2, [r3, #24]
      break;
 800864e:	e064      	b.n	800871a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68b9      	ldr	r1, [r7, #8]
 8008656:	4618      	mov	r0, r3
 8008658:	f000 f9a6 	bl	80089a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	699a      	ldr	r2, [r3, #24]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800866a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	699a      	ldr	r2, [r3, #24]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800867a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6999      	ldr	r1, [r3, #24]
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	021a      	lsls	r2, r3, #8
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	619a      	str	r2, [r3, #24]
      break;
 8008690:	e043      	b.n	800871a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68b9      	ldr	r1, [r7, #8]
 8008698:	4618      	mov	r0, r3
 800869a:	f000 f9fb 	bl	8008a94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	69da      	ldr	r2, [r3, #28]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f042 0208 	orr.w	r2, r2, #8
 80086ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69da      	ldr	r2, [r3, #28]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 0204 	bic.w	r2, r2, #4
 80086bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69d9      	ldr	r1, [r3, #28]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	691a      	ldr	r2, [r3, #16]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	61da      	str	r2, [r3, #28]
      break;
 80086d0:	e023      	b.n	800871a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68b9      	ldr	r1, [r7, #8]
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fa4f 	bl	8008b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69da      	ldr	r2, [r3, #28]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69da      	ldr	r2, [r3, #28]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	69d9      	ldr	r1, [r3, #28]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	021a      	lsls	r2, r3, #8
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	61da      	str	r2, [r3, #28]
      break;
 8008712:	e002      	b.n	800871a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	75fb      	strb	r3, [r7, #23]
      break;
 8008718:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3718      	adds	r7, #24
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a43      	ldr	r2, [pc, #268]	@ (800889c <TIM_Base_SetConfig+0x120>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d013      	beq.n	80087bc <TIM_Base_SetConfig+0x40>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800879a:	d00f      	beq.n	80087bc <TIM_Base_SetConfig+0x40>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a40      	ldr	r2, [pc, #256]	@ (80088a0 <TIM_Base_SetConfig+0x124>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d00b      	beq.n	80087bc <TIM_Base_SetConfig+0x40>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a3f      	ldr	r2, [pc, #252]	@ (80088a4 <TIM_Base_SetConfig+0x128>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d007      	beq.n	80087bc <TIM_Base_SetConfig+0x40>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a3e      	ldr	r2, [pc, #248]	@ (80088a8 <TIM_Base_SetConfig+0x12c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d003      	beq.n	80087bc <TIM_Base_SetConfig+0x40>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a3d      	ldr	r2, [pc, #244]	@ (80088ac <TIM_Base_SetConfig+0x130>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d108      	bne.n	80087ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a32      	ldr	r2, [pc, #200]	@ (800889c <TIM_Base_SetConfig+0x120>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d02b      	beq.n	800882e <TIM_Base_SetConfig+0xb2>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087dc:	d027      	beq.n	800882e <TIM_Base_SetConfig+0xb2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a2f      	ldr	r2, [pc, #188]	@ (80088a0 <TIM_Base_SetConfig+0x124>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d023      	beq.n	800882e <TIM_Base_SetConfig+0xb2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a2e      	ldr	r2, [pc, #184]	@ (80088a4 <TIM_Base_SetConfig+0x128>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d01f      	beq.n	800882e <TIM_Base_SetConfig+0xb2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a2d      	ldr	r2, [pc, #180]	@ (80088a8 <TIM_Base_SetConfig+0x12c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d01b      	beq.n	800882e <TIM_Base_SetConfig+0xb2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a2c      	ldr	r2, [pc, #176]	@ (80088ac <TIM_Base_SetConfig+0x130>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d017      	beq.n	800882e <TIM_Base_SetConfig+0xb2>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a2b      	ldr	r2, [pc, #172]	@ (80088b0 <TIM_Base_SetConfig+0x134>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d013      	beq.n	800882e <TIM_Base_SetConfig+0xb2>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a2a      	ldr	r2, [pc, #168]	@ (80088b4 <TIM_Base_SetConfig+0x138>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d00f      	beq.n	800882e <TIM_Base_SetConfig+0xb2>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a29      	ldr	r2, [pc, #164]	@ (80088b8 <TIM_Base_SetConfig+0x13c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d00b      	beq.n	800882e <TIM_Base_SetConfig+0xb2>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a28      	ldr	r2, [pc, #160]	@ (80088bc <TIM_Base_SetConfig+0x140>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d007      	beq.n	800882e <TIM_Base_SetConfig+0xb2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a27      	ldr	r2, [pc, #156]	@ (80088c0 <TIM_Base_SetConfig+0x144>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d003      	beq.n	800882e <TIM_Base_SetConfig+0xb2>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a26      	ldr	r2, [pc, #152]	@ (80088c4 <TIM_Base_SetConfig+0x148>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d108      	bne.n	8008840 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4313      	orrs	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	4313      	orrs	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a0e      	ldr	r2, [pc, #56]	@ (800889c <TIM_Base_SetConfig+0x120>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d003      	beq.n	800886e <TIM_Base_SetConfig+0xf2>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a10      	ldr	r2, [pc, #64]	@ (80088ac <TIM_Base_SetConfig+0x130>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d103      	bne.n	8008876 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	691a      	ldr	r2, [r3, #16]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f043 0204 	orr.w	r2, r3, #4
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	601a      	str	r2, [r3, #0]
}
 800888e:	bf00      	nop
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	40010000 	.word	0x40010000
 80088a0:	40000400 	.word	0x40000400
 80088a4:	40000800 	.word	0x40000800
 80088a8:	40000c00 	.word	0x40000c00
 80088ac:	40010400 	.word	0x40010400
 80088b0:	40014000 	.word	0x40014000
 80088b4:	40014400 	.word	0x40014400
 80088b8:	40014800 	.word	0x40014800
 80088bc:	40001800 	.word	0x40001800
 80088c0:	40001c00 	.word	0x40001c00
 80088c4:	40002000 	.word	0x40002000

080088c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	f023 0201 	bic.w	r2, r3, #1
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	4313      	orrs	r3, r2
 8008908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f023 0302 	bic.w	r3, r3, #2
 8008910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a20      	ldr	r2, [pc, #128]	@ (80089a0 <TIM_OC1_SetConfig+0xd8>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d003      	beq.n	800892c <TIM_OC1_SetConfig+0x64>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a1f      	ldr	r2, [pc, #124]	@ (80089a4 <TIM_OC1_SetConfig+0xdc>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d10c      	bne.n	8008946 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f023 0308 	bic.w	r3, r3, #8
 8008932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	4313      	orrs	r3, r2
 800893c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f023 0304 	bic.w	r3, r3, #4
 8008944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a15      	ldr	r2, [pc, #84]	@ (80089a0 <TIM_OC1_SetConfig+0xd8>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d003      	beq.n	8008956 <TIM_OC1_SetConfig+0x8e>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a14      	ldr	r2, [pc, #80]	@ (80089a4 <TIM_OC1_SetConfig+0xdc>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d111      	bne.n	800897a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800895c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	4313      	orrs	r3, r2
 800896e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	4313      	orrs	r3, r2
 8008978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	621a      	str	r2, [r3, #32]
}
 8008994:	bf00      	nop
 8008996:	371c      	adds	r7, #28
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	40010000 	.word	0x40010000
 80089a4:	40010400 	.word	0x40010400

080089a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a1b      	ldr	r3, [r3, #32]
 80089bc:	f023 0210 	bic.w	r2, r3, #16
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	021b      	lsls	r3, r3, #8
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f023 0320 	bic.w	r3, r3, #32
 80089f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	011b      	lsls	r3, r3, #4
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a22      	ldr	r2, [pc, #136]	@ (8008a8c <TIM_OC2_SetConfig+0xe4>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d003      	beq.n	8008a10 <TIM_OC2_SetConfig+0x68>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a21      	ldr	r2, [pc, #132]	@ (8008a90 <TIM_OC2_SetConfig+0xe8>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d10d      	bne.n	8008a2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	011b      	lsls	r3, r3, #4
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a17      	ldr	r2, [pc, #92]	@ (8008a8c <TIM_OC2_SetConfig+0xe4>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d003      	beq.n	8008a3c <TIM_OC2_SetConfig+0x94>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a16      	ldr	r2, [pc, #88]	@ (8008a90 <TIM_OC2_SetConfig+0xe8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d113      	bne.n	8008a64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	621a      	str	r2, [r3, #32]
}
 8008a7e:	bf00      	nop
 8008a80:	371c      	adds	r7, #28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	40010000 	.word	0x40010000
 8008a90:	40010400 	.word	0x40010400

08008a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f023 0303 	bic.w	r3, r3, #3
 8008aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	021b      	lsls	r3, r3, #8
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a21      	ldr	r2, [pc, #132]	@ (8008b74 <TIM_OC3_SetConfig+0xe0>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d003      	beq.n	8008afa <TIM_OC3_SetConfig+0x66>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a20      	ldr	r2, [pc, #128]	@ (8008b78 <TIM_OC3_SetConfig+0xe4>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d10d      	bne.n	8008b16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	021b      	lsls	r3, r3, #8
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a16      	ldr	r2, [pc, #88]	@ (8008b74 <TIM_OC3_SetConfig+0xe0>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d003      	beq.n	8008b26 <TIM_OC3_SetConfig+0x92>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a15      	ldr	r2, [pc, #84]	@ (8008b78 <TIM_OC3_SetConfig+0xe4>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d113      	bne.n	8008b4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	011b      	lsls	r3, r3, #4
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	621a      	str	r2, [r3, #32]
}
 8008b68:	bf00      	nop
 8008b6a:	371c      	adds	r7, #28
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	40010000 	.word	0x40010000
 8008b78:	40010400 	.word	0x40010400

08008b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	021b      	lsls	r3, r3, #8
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	031b      	lsls	r3, r3, #12
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a12      	ldr	r2, [pc, #72]	@ (8008c20 <TIM_OC4_SetConfig+0xa4>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d003      	beq.n	8008be4 <TIM_OC4_SetConfig+0x68>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a11      	ldr	r2, [pc, #68]	@ (8008c24 <TIM_OC4_SetConfig+0xa8>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d109      	bne.n	8008bf8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	019b      	lsls	r3, r3, #6
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	621a      	str	r2, [r3, #32]
}
 8008c12:	bf00      	nop
 8008c14:	371c      	adds	r7, #28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	40010000 	.word	0x40010000
 8008c24:	40010400 	.word	0x40010400

08008c28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	f003 031f 	and.w	r3, r3, #31
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6a1a      	ldr	r2, [r3, #32]
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	43db      	mvns	r3, r3
 8008c4a:	401a      	ands	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6a1a      	ldr	r2, [r3, #32]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	f003 031f 	and.w	r3, r3, #31
 8008c5a:	6879      	ldr	r1, [r7, #4]
 8008c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c60:	431a      	orrs	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	621a      	str	r2, [r3, #32]
}
 8008c66:	bf00      	nop
 8008c68:	371c      	adds	r7, #28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
	...

08008c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d101      	bne.n	8008c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c88:	2302      	movs	r3, #2
 8008c8a:	e05a      	b.n	8008d42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2202      	movs	r2, #2
 8008c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a21      	ldr	r2, [pc, #132]	@ (8008d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d022      	beq.n	8008d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cd8:	d01d      	beq.n	8008d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a1d      	ldr	r2, [pc, #116]	@ (8008d54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d018      	beq.n	8008d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d013      	beq.n	8008d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8008d5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d00e      	beq.n	8008d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a18      	ldr	r2, [pc, #96]	@ (8008d60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d009      	beq.n	8008d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a17      	ldr	r2, [pc, #92]	@ (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d004      	beq.n	8008d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a15      	ldr	r2, [pc, #84]	@ (8008d68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d10c      	bne.n	8008d30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	40010000 	.word	0x40010000
 8008d54:	40000400 	.word	0x40000400
 8008d58:	40000800 	.word	0x40000800
 8008d5c:	40000c00 	.word	0x40000c00
 8008d60:	40010400 	.word	0x40010400
 8008d64:	40014000 	.word	0x40014000
 8008d68:	40001800 	.word	0x40001800

08008d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e042      	b.n	8008e2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d106      	bne.n	8008dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7f9 fa82 	bl	80022c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2224      	movs	r2, #36	@ 0x24
 8008dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68da      	ldr	r2, [r3, #12]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f82b 	bl	8008e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	691a      	ldr	r2, [r3, #16]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	695a      	ldr	r2, [r3, #20]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68da      	ldr	r2, [r3, #12]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2220      	movs	r2, #32
 8008e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e38:	b0c0      	sub	sp, #256	@ 0x100
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e50:	68d9      	ldr	r1, [r3, #12]
 8008e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	ea40 0301 	orr.w	r3, r0, r1
 8008e5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	431a      	orrs	r2, r3
 8008e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008e8c:	f021 010c 	bic.w	r1, r1, #12
 8008e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008e9a:	430b      	orrs	r3, r1
 8008e9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eae:	6999      	ldr	r1, [r3, #24]
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	ea40 0301 	orr.w	r3, r0, r1
 8008eba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4b8f      	ldr	r3, [pc, #572]	@ (8009100 <UART_SetConfig+0x2cc>)
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d005      	beq.n	8008ed4 <UART_SetConfig+0xa0>
 8008ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	4b8d      	ldr	r3, [pc, #564]	@ (8009104 <UART_SetConfig+0x2d0>)
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d104      	bne.n	8008ede <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ed4:	f7fd ffe0 	bl	8006e98 <HAL_RCC_GetPCLK2Freq>
 8008ed8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008edc:	e003      	b.n	8008ee6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ede:	f7fd ffc7 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
 8008ee2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ef0:	f040 810c 	bne.w	800910c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008efe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008f02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008f06:	4622      	mov	r2, r4
 8008f08:	462b      	mov	r3, r5
 8008f0a:	1891      	adds	r1, r2, r2
 8008f0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008f0e:	415b      	adcs	r3, r3
 8008f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008f16:	4621      	mov	r1, r4
 8008f18:	eb12 0801 	adds.w	r8, r2, r1
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	eb43 0901 	adc.w	r9, r3, r1
 8008f22:	f04f 0200 	mov.w	r2, #0
 8008f26:	f04f 0300 	mov.w	r3, #0
 8008f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f36:	4690      	mov	r8, r2
 8008f38:	4699      	mov	r9, r3
 8008f3a:	4623      	mov	r3, r4
 8008f3c:	eb18 0303 	adds.w	r3, r8, r3
 8008f40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f44:	462b      	mov	r3, r5
 8008f46:	eb49 0303 	adc.w	r3, r9, r3
 8008f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008f5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008f62:	460b      	mov	r3, r1
 8008f64:	18db      	adds	r3, r3, r3
 8008f66:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f68:	4613      	mov	r3, r2
 8008f6a:	eb42 0303 	adc.w	r3, r2, r3
 8008f6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008f78:	f7f7 feb6 	bl	8000ce8 <__aeabi_uldivmod>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4b61      	ldr	r3, [pc, #388]	@ (8009108 <UART_SetConfig+0x2d4>)
 8008f82:	fba3 2302 	umull	r2, r3, r3, r2
 8008f86:	095b      	lsrs	r3, r3, #5
 8008f88:	011c      	lsls	r4, r3, #4
 8008f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008f98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008f9c:	4642      	mov	r2, r8
 8008f9e:	464b      	mov	r3, r9
 8008fa0:	1891      	adds	r1, r2, r2
 8008fa2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008fa4:	415b      	adcs	r3, r3
 8008fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008fac:	4641      	mov	r1, r8
 8008fae:	eb12 0a01 	adds.w	sl, r2, r1
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	eb43 0b01 	adc.w	fp, r3, r1
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	f04f 0300 	mov.w	r3, #0
 8008fc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008fc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008fc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fcc:	4692      	mov	sl, r2
 8008fce:	469b      	mov	fp, r3
 8008fd0:	4643      	mov	r3, r8
 8008fd2:	eb1a 0303 	adds.w	r3, sl, r3
 8008fd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fda:	464b      	mov	r3, r9
 8008fdc:	eb4b 0303 	adc.w	r3, fp, r3
 8008fe0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ff0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008ff4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	18db      	adds	r3, r3, r3
 8008ffc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ffe:	4613      	mov	r3, r2
 8009000:	eb42 0303 	adc.w	r3, r2, r3
 8009004:	647b      	str	r3, [r7, #68]	@ 0x44
 8009006:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800900a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800900e:	f7f7 fe6b 	bl	8000ce8 <__aeabi_uldivmod>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4611      	mov	r1, r2
 8009018:	4b3b      	ldr	r3, [pc, #236]	@ (8009108 <UART_SetConfig+0x2d4>)
 800901a:	fba3 2301 	umull	r2, r3, r3, r1
 800901e:	095b      	lsrs	r3, r3, #5
 8009020:	2264      	movs	r2, #100	@ 0x64
 8009022:	fb02 f303 	mul.w	r3, r2, r3
 8009026:	1acb      	subs	r3, r1, r3
 8009028:	00db      	lsls	r3, r3, #3
 800902a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800902e:	4b36      	ldr	r3, [pc, #216]	@ (8009108 <UART_SetConfig+0x2d4>)
 8009030:	fba3 2302 	umull	r2, r3, r3, r2
 8009034:	095b      	lsrs	r3, r3, #5
 8009036:	005b      	lsls	r3, r3, #1
 8009038:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800903c:	441c      	add	r4, r3
 800903e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009042:	2200      	movs	r2, #0
 8009044:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009048:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800904c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009050:	4642      	mov	r2, r8
 8009052:	464b      	mov	r3, r9
 8009054:	1891      	adds	r1, r2, r2
 8009056:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009058:	415b      	adcs	r3, r3
 800905a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800905c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009060:	4641      	mov	r1, r8
 8009062:	1851      	adds	r1, r2, r1
 8009064:	6339      	str	r1, [r7, #48]	@ 0x30
 8009066:	4649      	mov	r1, r9
 8009068:	414b      	adcs	r3, r1
 800906a:	637b      	str	r3, [r7, #52]	@ 0x34
 800906c:	f04f 0200 	mov.w	r2, #0
 8009070:	f04f 0300 	mov.w	r3, #0
 8009074:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009078:	4659      	mov	r1, fp
 800907a:	00cb      	lsls	r3, r1, #3
 800907c:	4651      	mov	r1, sl
 800907e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009082:	4651      	mov	r1, sl
 8009084:	00ca      	lsls	r2, r1, #3
 8009086:	4610      	mov	r0, r2
 8009088:	4619      	mov	r1, r3
 800908a:	4603      	mov	r3, r0
 800908c:	4642      	mov	r2, r8
 800908e:	189b      	adds	r3, r3, r2
 8009090:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009094:	464b      	mov	r3, r9
 8009096:	460a      	mov	r2, r1
 8009098:	eb42 0303 	adc.w	r3, r2, r3
 800909c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80090ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80090b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80090b4:	460b      	mov	r3, r1
 80090b6:	18db      	adds	r3, r3, r3
 80090b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090ba:	4613      	mov	r3, r2
 80090bc:	eb42 0303 	adc.w	r3, r2, r3
 80090c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80090c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80090ca:	f7f7 fe0d 	bl	8000ce8 <__aeabi_uldivmod>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009108 <UART_SetConfig+0x2d4>)
 80090d4:	fba3 1302 	umull	r1, r3, r3, r2
 80090d8:	095b      	lsrs	r3, r3, #5
 80090da:	2164      	movs	r1, #100	@ 0x64
 80090dc:	fb01 f303 	mul.w	r3, r1, r3
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	3332      	adds	r3, #50	@ 0x32
 80090e6:	4a08      	ldr	r2, [pc, #32]	@ (8009108 <UART_SetConfig+0x2d4>)
 80090e8:	fba2 2303 	umull	r2, r3, r2, r3
 80090ec:	095b      	lsrs	r3, r3, #5
 80090ee:	f003 0207 	and.w	r2, r3, #7
 80090f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4422      	add	r2, r4
 80090fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090fc:	e106      	b.n	800930c <UART_SetConfig+0x4d8>
 80090fe:	bf00      	nop
 8009100:	40011000 	.word	0x40011000
 8009104:	40011400 	.word	0x40011400
 8009108:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800910c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009110:	2200      	movs	r2, #0
 8009112:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009116:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800911a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800911e:	4642      	mov	r2, r8
 8009120:	464b      	mov	r3, r9
 8009122:	1891      	adds	r1, r2, r2
 8009124:	6239      	str	r1, [r7, #32]
 8009126:	415b      	adcs	r3, r3
 8009128:	627b      	str	r3, [r7, #36]	@ 0x24
 800912a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800912e:	4641      	mov	r1, r8
 8009130:	1854      	adds	r4, r2, r1
 8009132:	4649      	mov	r1, r9
 8009134:	eb43 0501 	adc.w	r5, r3, r1
 8009138:	f04f 0200 	mov.w	r2, #0
 800913c:	f04f 0300 	mov.w	r3, #0
 8009140:	00eb      	lsls	r3, r5, #3
 8009142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009146:	00e2      	lsls	r2, r4, #3
 8009148:	4614      	mov	r4, r2
 800914a:	461d      	mov	r5, r3
 800914c:	4643      	mov	r3, r8
 800914e:	18e3      	adds	r3, r4, r3
 8009150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009154:	464b      	mov	r3, r9
 8009156:	eb45 0303 	adc.w	r3, r5, r3
 800915a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800915e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800916a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800916e:	f04f 0200 	mov.w	r2, #0
 8009172:	f04f 0300 	mov.w	r3, #0
 8009176:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800917a:	4629      	mov	r1, r5
 800917c:	008b      	lsls	r3, r1, #2
 800917e:	4621      	mov	r1, r4
 8009180:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009184:	4621      	mov	r1, r4
 8009186:	008a      	lsls	r2, r1, #2
 8009188:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800918c:	f7f7 fdac 	bl	8000ce8 <__aeabi_uldivmod>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4b60      	ldr	r3, [pc, #384]	@ (8009318 <UART_SetConfig+0x4e4>)
 8009196:	fba3 2302 	umull	r2, r3, r3, r2
 800919a:	095b      	lsrs	r3, r3, #5
 800919c:	011c      	lsls	r4, r3, #4
 800919e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091a2:	2200      	movs	r2, #0
 80091a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80091a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80091ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80091b0:	4642      	mov	r2, r8
 80091b2:	464b      	mov	r3, r9
 80091b4:	1891      	adds	r1, r2, r2
 80091b6:	61b9      	str	r1, [r7, #24]
 80091b8:	415b      	adcs	r3, r3
 80091ba:	61fb      	str	r3, [r7, #28]
 80091bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091c0:	4641      	mov	r1, r8
 80091c2:	1851      	adds	r1, r2, r1
 80091c4:	6139      	str	r1, [r7, #16]
 80091c6:	4649      	mov	r1, r9
 80091c8:	414b      	adcs	r3, r1
 80091ca:	617b      	str	r3, [r7, #20]
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	f04f 0300 	mov.w	r3, #0
 80091d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091d8:	4659      	mov	r1, fp
 80091da:	00cb      	lsls	r3, r1, #3
 80091dc:	4651      	mov	r1, sl
 80091de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091e2:	4651      	mov	r1, sl
 80091e4:	00ca      	lsls	r2, r1, #3
 80091e6:	4610      	mov	r0, r2
 80091e8:	4619      	mov	r1, r3
 80091ea:	4603      	mov	r3, r0
 80091ec:	4642      	mov	r2, r8
 80091ee:	189b      	adds	r3, r3, r2
 80091f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091f4:	464b      	mov	r3, r9
 80091f6:	460a      	mov	r2, r1
 80091f8:	eb42 0303 	adc.w	r3, r2, r3
 80091fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	67bb      	str	r3, [r7, #120]	@ 0x78
 800920a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800920c:	f04f 0200 	mov.w	r2, #0
 8009210:	f04f 0300 	mov.w	r3, #0
 8009214:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009218:	4649      	mov	r1, r9
 800921a:	008b      	lsls	r3, r1, #2
 800921c:	4641      	mov	r1, r8
 800921e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009222:	4641      	mov	r1, r8
 8009224:	008a      	lsls	r2, r1, #2
 8009226:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800922a:	f7f7 fd5d 	bl	8000ce8 <__aeabi_uldivmod>
 800922e:	4602      	mov	r2, r0
 8009230:	460b      	mov	r3, r1
 8009232:	4611      	mov	r1, r2
 8009234:	4b38      	ldr	r3, [pc, #224]	@ (8009318 <UART_SetConfig+0x4e4>)
 8009236:	fba3 2301 	umull	r2, r3, r3, r1
 800923a:	095b      	lsrs	r3, r3, #5
 800923c:	2264      	movs	r2, #100	@ 0x64
 800923e:	fb02 f303 	mul.w	r3, r2, r3
 8009242:	1acb      	subs	r3, r1, r3
 8009244:	011b      	lsls	r3, r3, #4
 8009246:	3332      	adds	r3, #50	@ 0x32
 8009248:	4a33      	ldr	r2, [pc, #204]	@ (8009318 <UART_SetConfig+0x4e4>)
 800924a:	fba2 2303 	umull	r2, r3, r2, r3
 800924e:	095b      	lsrs	r3, r3, #5
 8009250:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009254:	441c      	add	r4, r3
 8009256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800925a:	2200      	movs	r2, #0
 800925c:	673b      	str	r3, [r7, #112]	@ 0x70
 800925e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009260:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009264:	4642      	mov	r2, r8
 8009266:	464b      	mov	r3, r9
 8009268:	1891      	adds	r1, r2, r2
 800926a:	60b9      	str	r1, [r7, #8]
 800926c:	415b      	adcs	r3, r3
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009274:	4641      	mov	r1, r8
 8009276:	1851      	adds	r1, r2, r1
 8009278:	6039      	str	r1, [r7, #0]
 800927a:	4649      	mov	r1, r9
 800927c:	414b      	adcs	r3, r1
 800927e:	607b      	str	r3, [r7, #4]
 8009280:	f04f 0200 	mov.w	r2, #0
 8009284:	f04f 0300 	mov.w	r3, #0
 8009288:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800928c:	4659      	mov	r1, fp
 800928e:	00cb      	lsls	r3, r1, #3
 8009290:	4651      	mov	r1, sl
 8009292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009296:	4651      	mov	r1, sl
 8009298:	00ca      	lsls	r2, r1, #3
 800929a:	4610      	mov	r0, r2
 800929c:	4619      	mov	r1, r3
 800929e:	4603      	mov	r3, r0
 80092a0:	4642      	mov	r2, r8
 80092a2:	189b      	adds	r3, r3, r2
 80092a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80092a6:	464b      	mov	r3, r9
 80092a8:	460a      	mov	r2, r1
 80092aa:	eb42 0303 	adc.w	r3, r2, r3
 80092ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80092b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80092ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80092bc:	f04f 0200 	mov.w	r2, #0
 80092c0:	f04f 0300 	mov.w	r3, #0
 80092c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80092c8:	4649      	mov	r1, r9
 80092ca:	008b      	lsls	r3, r1, #2
 80092cc:	4641      	mov	r1, r8
 80092ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092d2:	4641      	mov	r1, r8
 80092d4:	008a      	lsls	r2, r1, #2
 80092d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80092da:	f7f7 fd05 	bl	8000ce8 <__aeabi_uldivmod>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009318 <UART_SetConfig+0x4e4>)
 80092e4:	fba3 1302 	umull	r1, r3, r3, r2
 80092e8:	095b      	lsrs	r3, r3, #5
 80092ea:	2164      	movs	r1, #100	@ 0x64
 80092ec:	fb01 f303 	mul.w	r3, r1, r3
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	011b      	lsls	r3, r3, #4
 80092f4:	3332      	adds	r3, #50	@ 0x32
 80092f6:	4a08      	ldr	r2, [pc, #32]	@ (8009318 <UART_SetConfig+0x4e4>)
 80092f8:	fba2 2303 	umull	r2, r3, r2, r3
 80092fc:	095b      	lsrs	r3, r3, #5
 80092fe:	f003 020f 	and.w	r2, r3, #15
 8009302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4422      	add	r2, r4
 800930a:	609a      	str	r2, [r3, #8]
}
 800930c:	bf00      	nop
 800930e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009312:	46bd      	mov	sp, r7
 8009314:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009318:	51eb851f 	.word	0x51eb851f

0800931c <__cvt>:
 800931c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009320:	ec57 6b10 	vmov	r6, r7, d0
 8009324:	2f00      	cmp	r7, #0
 8009326:	460c      	mov	r4, r1
 8009328:	4619      	mov	r1, r3
 800932a:	463b      	mov	r3, r7
 800932c:	bfbb      	ittet	lt
 800932e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009332:	461f      	movlt	r7, r3
 8009334:	2300      	movge	r3, #0
 8009336:	232d      	movlt	r3, #45	@ 0x2d
 8009338:	700b      	strb	r3, [r1, #0]
 800933a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800933c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009340:	4691      	mov	r9, r2
 8009342:	f023 0820 	bic.w	r8, r3, #32
 8009346:	bfbc      	itt	lt
 8009348:	4632      	movlt	r2, r6
 800934a:	4616      	movlt	r6, r2
 800934c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009350:	d005      	beq.n	800935e <__cvt+0x42>
 8009352:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009356:	d100      	bne.n	800935a <__cvt+0x3e>
 8009358:	3401      	adds	r4, #1
 800935a:	2102      	movs	r1, #2
 800935c:	e000      	b.n	8009360 <__cvt+0x44>
 800935e:	2103      	movs	r1, #3
 8009360:	ab03      	add	r3, sp, #12
 8009362:	9301      	str	r3, [sp, #4]
 8009364:	ab02      	add	r3, sp, #8
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	ec47 6b10 	vmov	d0, r6, r7
 800936c:	4653      	mov	r3, sl
 800936e:	4622      	mov	r2, r4
 8009370:	f000 fdf2 	bl	8009f58 <_dtoa_r>
 8009374:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009378:	4605      	mov	r5, r0
 800937a:	d119      	bne.n	80093b0 <__cvt+0x94>
 800937c:	f019 0f01 	tst.w	r9, #1
 8009380:	d00e      	beq.n	80093a0 <__cvt+0x84>
 8009382:	eb00 0904 	add.w	r9, r0, r4
 8009386:	2200      	movs	r2, #0
 8009388:	2300      	movs	r3, #0
 800938a:	4630      	mov	r0, r6
 800938c:	4639      	mov	r1, r7
 800938e:	f7f7 fbcb 	bl	8000b28 <__aeabi_dcmpeq>
 8009392:	b108      	cbz	r0, 8009398 <__cvt+0x7c>
 8009394:	f8cd 900c 	str.w	r9, [sp, #12]
 8009398:	2230      	movs	r2, #48	@ 0x30
 800939a:	9b03      	ldr	r3, [sp, #12]
 800939c:	454b      	cmp	r3, r9
 800939e:	d31e      	bcc.n	80093de <__cvt+0xc2>
 80093a0:	9b03      	ldr	r3, [sp, #12]
 80093a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093a4:	1b5b      	subs	r3, r3, r5
 80093a6:	4628      	mov	r0, r5
 80093a8:	6013      	str	r3, [r2, #0]
 80093aa:	b004      	add	sp, #16
 80093ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093b4:	eb00 0904 	add.w	r9, r0, r4
 80093b8:	d1e5      	bne.n	8009386 <__cvt+0x6a>
 80093ba:	7803      	ldrb	r3, [r0, #0]
 80093bc:	2b30      	cmp	r3, #48	@ 0x30
 80093be:	d10a      	bne.n	80093d6 <__cvt+0xba>
 80093c0:	2200      	movs	r2, #0
 80093c2:	2300      	movs	r3, #0
 80093c4:	4630      	mov	r0, r6
 80093c6:	4639      	mov	r1, r7
 80093c8:	f7f7 fbae 	bl	8000b28 <__aeabi_dcmpeq>
 80093cc:	b918      	cbnz	r0, 80093d6 <__cvt+0xba>
 80093ce:	f1c4 0401 	rsb	r4, r4, #1
 80093d2:	f8ca 4000 	str.w	r4, [sl]
 80093d6:	f8da 3000 	ldr.w	r3, [sl]
 80093da:	4499      	add	r9, r3
 80093dc:	e7d3      	b.n	8009386 <__cvt+0x6a>
 80093de:	1c59      	adds	r1, r3, #1
 80093e0:	9103      	str	r1, [sp, #12]
 80093e2:	701a      	strb	r2, [r3, #0]
 80093e4:	e7d9      	b.n	800939a <__cvt+0x7e>

080093e6 <__exponent>:
 80093e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093e8:	2900      	cmp	r1, #0
 80093ea:	bfba      	itte	lt
 80093ec:	4249      	neglt	r1, r1
 80093ee:	232d      	movlt	r3, #45	@ 0x2d
 80093f0:	232b      	movge	r3, #43	@ 0x2b
 80093f2:	2909      	cmp	r1, #9
 80093f4:	7002      	strb	r2, [r0, #0]
 80093f6:	7043      	strb	r3, [r0, #1]
 80093f8:	dd29      	ble.n	800944e <__exponent+0x68>
 80093fa:	f10d 0307 	add.w	r3, sp, #7
 80093fe:	461d      	mov	r5, r3
 8009400:	270a      	movs	r7, #10
 8009402:	461a      	mov	r2, r3
 8009404:	fbb1 f6f7 	udiv	r6, r1, r7
 8009408:	fb07 1416 	mls	r4, r7, r6, r1
 800940c:	3430      	adds	r4, #48	@ 0x30
 800940e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009412:	460c      	mov	r4, r1
 8009414:	2c63      	cmp	r4, #99	@ 0x63
 8009416:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800941a:	4631      	mov	r1, r6
 800941c:	dcf1      	bgt.n	8009402 <__exponent+0x1c>
 800941e:	3130      	adds	r1, #48	@ 0x30
 8009420:	1e94      	subs	r4, r2, #2
 8009422:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009426:	1c41      	adds	r1, r0, #1
 8009428:	4623      	mov	r3, r4
 800942a:	42ab      	cmp	r3, r5
 800942c:	d30a      	bcc.n	8009444 <__exponent+0x5e>
 800942e:	f10d 0309 	add.w	r3, sp, #9
 8009432:	1a9b      	subs	r3, r3, r2
 8009434:	42ac      	cmp	r4, r5
 8009436:	bf88      	it	hi
 8009438:	2300      	movhi	r3, #0
 800943a:	3302      	adds	r3, #2
 800943c:	4403      	add	r3, r0
 800943e:	1a18      	subs	r0, r3, r0
 8009440:	b003      	add	sp, #12
 8009442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009444:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009448:	f801 6f01 	strb.w	r6, [r1, #1]!
 800944c:	e7ed      	b.n	800942a <__exponent+0x44>
 800944e:	2330      	movs	r3, #48	@ 0x30
 8009450:	3130      	adds	r1, #48	@ 0x30
 8009452:	7083      	strb	r3, [r0, #2]
 8009454:	70c1      	strb	r1, [r0, #3]
 8009456:	1d03      	adds	r3, r0, #4
 8009458:	e7f1      	b.n	800943e <__exponent+0x58>
	...

0800945c <_printf_float>:
 800945c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009460:	b08d      	sub	sp, #52	@ 0x34
 8009462:	460c      	mov	r4, r1
 8009464:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009468:	4616      	mov	r6, r2
 800946a:	461f      	mov	r7, r3
 800946c:	4605      	mov	r5, r0
 800946e:	f000 fcd9 	bl	8009e24 <_localeconv_r>
 8009472:	6803      	ldr	r3, [r0, #0]
 8009474:	9304      	str	r3, [sp, #16]
 8009476:	4618      	mov	r0, r3
 8009478:	f7f6 ff2a 	bl	80002d0 <strlen>
 800947c:	2300      	movs	r3, #0
 800947e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009480:	f8d8 3000 	ldr.w	r3, [r8]
 8009484:	9005      	str	r0, [sp, #20]
 8009486:	3307      	adds	r3, #7
 8009488:	f023 0307 	bic.w	r3, r3, #7
 800948c:	f103 0208 	add.w	r2, r3, #8
 8009490:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009494:	f8d4 b000 	ldr.w	fp, [r4]
 8009498:	f8c8 2000 	str.w	r2, [r8]
 800949c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80094a4:	9307      	str	r3, [sp, #28]
 80094a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80094aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80094ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094b2:	4b9c      	ldr	r3, [pc, #624]	@ (8009724 <_printf_float+0x2c8>)
 80094b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094b8:	f7f7 fb68 	bl	8000b8c <__aeabi_dcmpun>
 80094bc:	bb70      	cbnz	r0, 800951c <_printf_float+0xc0>
 80094be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094c2:	4b98      	ldr	r3, [pc, #608]	@ (8009724 <_printf_float+0x2c8>)
 80094c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094c8:	f7f7 fb42 	bl	8000b50 <__aeabi_dcmple>
 80094cc:	bb30      	cbnz	r0, 800951c <_printf_float+0xc0>
 80094ce:	2200      	movs	r2, #0
 80094d0:	2300      	movs	r3, #0
 80094d2:	4640      	mov	r0, r8
 80094d4:	4649      	mov	r1, r9
 80094d6:	f7f7 fb31 	bl	8000b3c <__aeabi_dcmplt>
 80094da:	b110      	cbz	r0, 80094e2 <_printf_float+0x86>
 80094dc:	232d      	movs	r3, #45	@ 0x2d
 80094de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094e2:	4a91      	ldr	r2, [pc, #580]	@ (8009728 <_printf_float+0x2cc>)
 80094e4:	4b91      	ldr	r3, [pc, #580]	@ (800972c <_printf_float+0x2d0>)
 80094e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80094ea:	bf8c      	ite	hi
 80094ec:	4690      	movhi	r8, r2
 80094ee:	4698      	movls	r8, r3
 80094f0:	2303      	movs	r3, #3
 80094f2:	6123      	str	r3, [r4, #16]
 80094f4:	f02b 0304 	bic.w	r3, fp, #4
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	f04f 0900 	mov.w	r9, #0
 80094fe:	9700      	str	r7, [sp, #0]
 8009500:	4633      	mov	r3, r6
 8009502:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009504:	4621      	mov	r1, r4
 8009506:	4628      	mov	r0, r5
 8009508:	f000 f9d2 	bl	80098b0 <_printf_common>
 800950c:	3001      	adds	r0, #1
 800950e:	f040 808d 	bne.w	800962c <_printf_float+0x1d0>
 8009512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009516:	b00d      	add	sp, #52	@ 0x34
 8009518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951c:	4642      	mov	r2, r8
 800951e:	464b      	mov	r3, r9
 8009520:	4640      	mov	r0, r8
 8009522:	4649      	mov	r1, r9
 8009524:	f7f7 fb32 	bl	8000b8c <__aeabi_dcmpun>
 8009528:	b140      	cbz	r0, 800953c <_printf_float+0xe0>
 800952a:	464b      	mov	r3, r9
 800952c:	2b00      	cmp	r3, #0
 800952e:	bfbc      	itt	lt
 8009530:	232d      	movlt	r3, #45	@ 0x2d
 8009532:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009536:	4a7e      	ldr	r2, [pc, #504]	@ (8009730 <_printf_float+0x2d4>)
 8009538:	4b7e      	ldr	r3, [pc, #504]	@ (8009734 <_printf_float+0x2d8>)
 800953a:	e7d4      	b.n	80094e6 <_printf_float+0x8a>
 800953c:	6863      	ldr	r3, [r4, #4]
 800953e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009542:	9206      	str	r2, [sp, #24]
 8009544:	1c5a      	adds	r2, r3, #1
 8009546:	d13b      	bne.n	80095c0 <_printf_float+0x164>
 8009548:	2306      	movs	r3, #6
 800954a:	6063      	str	r3, [r4, #4]
 800954c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009550:	2300      	movs	r3, #0
 8009552:	6022      	str	r2, [r4, #0]
 8009554:	9303      	str	r3, [sp, #12]
 8009556:	ab0a      	add	r3, sp, #40	@ 0x28
 8009558:	e9cd a301 	strd	sl, r3, [sp, #4]
 800955c:	ab09      	add	r3, sp, #36	@ 0x24
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	6861      	ldr	r1, [r4, #4]
 8009562:	ec49 8b10 	vmov	d0, r8, r9
 8009566:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800956a:	4628      	mov	r0, r5
 800956c:	f7ff fed6 	bl	800931c <__cvt>
 8009570:	9b06      	ldr	r3, [sp, #24]
 8009572:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009574:	2b47      	cmp	r3, #71	@ 0x47
 8009576:	4680      	mov	r8, r0
 8009578:	d129      	bne.n	80095ce <_printf_float+0x172>
 800957a:	1cc8      	adds	r0, r1, #3
 800957c:	db02      	blt.n	8009584 <_printf_float+0x128>
 800957e:	6863      	ldr	r3, [r4, #4]
 8009580:	4299      	cmp	r1, r3
 8009582:	dd41      	ble.n	8009608 <_printf_float+0x1ac>
 8009584:	f1aa 0a02 	sub.w	sl, sl, #2
 8009588:	fa5f fa8a 	uxtb.w	sl, sl
 800958c:	3901      	subs	r1, #1
 800958e:	4652      	mov	r2, sl
 8009590:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009594:	9109      	str	r1, [sp, #36]	@ 0x24
 8009596:	f7ff ff26 	bl	80093e6 <__exponent>
 800959a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800959c:	1813      	adds	r3, r2, r0
 800959e:	2a01      	cmp	r2, #1
 80095a0:	4681      	mov	r9, r0
 80095a2:	6123      	str	r3, [r4, #16]
 80095a4:	dc02      	bgt.n	80095ac <_printf_float+0x150>
 80095a6:	6822      	ldr	r2, [r4, #0]
 80095a8:	07d2      	lsls	r2, r2, #31
 80095aa:	d501      	bpl.n	80095b0 <_printf_float+0x154>
 80095ac:	3301      	adds	r3, #1
 80095ae:	6123      	str	r3, [r4, #16]
 80095b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d0a2      	beq.n	80094fe <_printf_float+0xa2>
 80095b8:	232d      	movs	r3, #45	@ 0x2d
 80095ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095be:	e79e      	b.n	80094fe <_printf_float+0xa2>
 80095c0:	9a06      	ldr	r2, [sp, #24]
 80095c2:	2a47      	cmp	r2, #71	@ 0x47
 80095c4:	d1c2      	bne.n	800954c <_printf_float+0xf0>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1c0      	bne.n	800954c <_printf_float+0xf0>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e7bd      	b.n	800954a <_printf_float+0xee>
 80095ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80095d2:	d9db      	bls.n	800958c <_printf_float+0x130>
 80095d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80095d8:	d118      	bne.n	800960c <_printf_float+0x1b0>
 80095da:	2900      	cmp	r1, #0
 80095dc:	6863      	ldr	r3, [r4, #4]
 80095de:	dd0b      	ble.n	80095f8 <_printf_float+0x19c>
 80095e0:	6121      	str	r1, [r4, #16]
 80095e2:	b913      	cbnz	r3, 80095ea <_printf_float+0x18e>
 80095e4:	6822      	ldr	r2, [r4, #0]
 80095e6:	07d0      	lsls	r0, r2, #31
 80095e8:	d502      	bpl.n	80095f0 <_printf_float+0x194>
 80095ea:	3301      	adds	r3, #1
 80095ec:	440b      	add	r3, r1
 80095ee:	6123      	str	r3, [r4, #16]
 80095f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80095f2:	f04f 0900 	mov.w	r9, #0
 80095f6:	e7db      	b.n	80095b0 <_printf_float+0x154>
 80095f8:	b913      	cbnz	r3, 8009600 <_printf_float+0x1a4>
 80095fa:	6822      	ldr	r2, [r4, #0]
 80095fc:	07d2      	lsls	r2, r2, #31
 80095fe:	d501      	bpl.n	8009604 <_printf_float+0x1a8>
 8009600:	3302      	adds	r3, #2
 8009602:	e7f4      	b.n	80095ee <_printf_float+0x192>
 8009604:	2301      	movs	r3, #1
 8009606:	e7f2      	b.n	80095ee <_printf_float+0x192>
 8009608:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800960c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800960e:	4299      	cmp	r1, r3
 8009610:	db05      	blt.n	800961e <_printf_float+0x1c2>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	6121      	str	r1, [r4, #16]
 8009616:	07d8      	lsls	r0, r3, #31
 8009618:	d5ea      	bpl.n	80095f0 <_printf_float+0x194>
 800961a:	1c4b      	adds	r3, r1, #1
 800961c:	e7e7      	b.n	80095ee <_printf_float+0x192>
 800961e:	2900      	cmp	r1, #0
 8009620:	bfd4      	ite	le
 8009622:	f1c1 0202 	rsble	r2, r1, #2
 8009626:	2201      	movgt	r2, #1
 8009628:	4413      	add	r3, r2
 800962a:	e7e0      	b.n	80095ee <_printf_float+0x192>
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	055a      	lsls	r2, r3, #21
 8009630:	d407      	bmi.n	8009642 <_printf_float+0x1e6>
 8009632:	6923      	ldr	r3, [r4, #16]
 8009634:	4642      	mov	r2, r8
 8009636:	4631      	mov	r1, r6
 8009638:	4628      	mov	r0, r5
 800963a:	47b8      	blx	r7
 800963c:	3001      	adds	r0, #1
 800963e:	d12b      	bne.n	8009698 <_printf_float+0x23c>
 8009640:	e767      	b.n	8009512 <_printf_float+0xb6>
 8009642:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009646:	f240 80dd 	bls.w	8009804 <_printf_float+0x3a8>
 800964a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800964e:	2200      	movs	r2, #0
 8009650:	2300      	movs	r3, #0
 8009652:	f7f7 fa69 	bl	8000b28 <__aeabi_dcmpeq>
 8009656:	2800      	cmp	r0, #0
 8009658:	d033      	beq.n	80096c2 <_printf_float+0x266>
 800965a:	4a37      	ldr	r2, [pc, #220]	@ (8009738 <_printf_float+0x2dc>)
 800965c:	2301      	movs	r3, #1
 800965e:	4631      	mov	r1, r6
 8009660:	4628      	mov	r0, r5
 8009662:	47b8      	blx	r7
 8009664:	3001      	adds	r0, #1
 8009666:	f43f af54 	beq.w	8009512 <_printf_float+0xb6>
 800966a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800966e:	4543      	cmp	r3, r8
 8009670:	db02      	blt.n	8009678 <_printf_float+0x21c>
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	07d8      	lsls	r0, r3, #31
 8009676:	d50f      	bpl.n	8009698 <_printf_float+0x23c>
 8009678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800967c:	4631      	mov	r1, r6
 800967e:	4628      	mov	r0, r5
 8009680:	47b8      	blx	r7
 8009682:	3001      	adds	r0, #1
 8009684:	f43f af45 	beq.w	8009512 <_printf_float+0xb6>
 8009688:	f04f 0900 	mov.w	r9, #0
 800968c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009690:	f104 0a1a 	add.w	sl, r4, #26
 8009694:	45c8      	cmp	r8, r9
 8009696:	dc09      	bgt.n	80096ac <_printf_float+0x250>
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	079b      	lsls	r3, r3, #30
 800969c:	f100 8103 	bmi.w	80098a6 <_printf_float+0x44a>
 80096a0:	68e0      	ldr	r0, [r4, #12]
 80096a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096a4:	4298      	cmp	r0, r3
 80096a6:	bfb8      	it	lt
 80096a8:	4618      	movlt	r0, r3
 80096aa:	e734      	b.n	8009516 <_printf_float+0xba>
 80096ac:	2301      	movs	r3, #1
 80096ae:	4652      	mov	r2, sl
 80096b0:	4631      	mov	r1, r6
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b8      	blx	r7
 80096b6:	3001      	adds	r0, #1
 80096b8:	f43f af2b 	beq.w	8009512 <_printf_float+0xb6>
 80096bc:	f109 0901 	add.w	r9, r9, #1
 80096c0:	e7e8      	b.n	8009694 <_printf_float+0x238>
 80096c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	dc39      	bgt.n	800973c <_printf_float+0x2e0>
 80096c8:	4a1b      	ldr	r2, [pc, #108]	@ (8009738 <_printf_float+0x2dc>)
 80096ca:	2301      	movs	r3, #1
 80096cc:	4631      	mov	r1, r6
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b8      	blx	r7
 80096d2:	3001      	adds	r0, #1
 80096d4:	f43f af1d 	beq.w	8009512 <_printf_float+0xb6>
 80096d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80096dc:	ea59 0303 	orrs.w	r3, r9, r3
 80096e0:	d102      	bne.n	80096e8 <_printf_float+0x28c>
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	07d9      	lsls	r1, r3, #31
 80096e6:	d5d7      	bpl.n	8009698 <_printf_float+0x23c>
 80096e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096ec:	4631      	mov	r1, r6
 80096ee:	4628      	mov	r0, r5
 80096f0:	47b8      	blx	r7
 80096f2:	3001      	adds	r0, #1
 80096f4:	f43f af0d 	beq.w	8009512 <_printf_float+0xb6>
 80096f8:	f04f 0a00 	mov.w	sl, #0
 80096fc:	f104 0b1a 	add.w	fp, r4, #26
 8009700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009702:	425b      	negs	r3, r3
 8009704:	4553      	cmp	r3, sl
 8009706:	dc01      	bgt.n	800970c <_printf_float+0x2b0>
 8009708:	464b      	mov	r3, r9
 800970a:	e793      	b.n	8009634 <_printf_float+0x1d8>
 800970c:	2301      	movs	r3, #1
 800970e:	465a      	mov	r2, fp
 8009710:	4631      	mov	r1, r6
 8009712:	4628      	mov	r0, r5
 8009714:	47b8      	blx	r7
 8009716:	3001      	adds	r0, #1
 8009718:	f43f aefb 	beq.w	8009512 <_printf_float+0xb6>
 800971c:	f10a 0a01 	add.w	sl, sl, #1
 8009720:	e7ee      	b.n	8009700 <_printf_float+0x2a4>
 8009722:	bf00      	nop
 8009724:	7fefffff 	.word	0x7fefffff
 8009728:	0800c060 	.word	0x0800c060
 800972c:	0800c05c 	.word	0x0800c05c
 8009730:	0800c068 	.word	0x0800c068
 8009734:	0800c064 	.word	0x0800c064
 8009738:	0800c06c 	.word	0x0800c06c
 800973c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800973e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009742:	4553      	cmp	r3, sl
 8009744:	bfa8      	it	ge
 8009746:	4653      	movge	r3, sl
 8009748:	2b00      	cmp	r3, #0
 800974a:	4699      	mov	r9, r3
 800974c:	dc36      	bgt.n	80097bc <_printf_float+0x360>
 800974e:	f04f 0b00 	mov.w	fp, #0
 8009752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009756:	f104 021a 	add.w	r2, r4, #26
 800975a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800975c:	9306      	str	r3, [sp, #24]
 800975e:	eba3 0309 	sub.w	r3, r3, r9
 8009762:	455b      	cmp	r3, fp
 8009764:	dc31      	bgt.n	80097ca <_printf_float+0x36e>
 8009766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009768:	459a      	cmp	sl, r3
 800976a:	dc3a      	bgt.n	80097e2 <_printf_float+0x386>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	07da      	lsls	r2, r3, #31
 8009770:	d437      	bmi.n	80097e2 <_printf_float+0x386>
 8009772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009774:	ebaa 0903 	sub.w	r9, sl, r3
 8009778:	9b06      	ldr	r3, [sp, #24]
 800977a:	ebaa 0303 	sub.w	r3, sl, r3
 800977e:	4599      	cmp	r9, r3
 8009780:	bfa8      	it	ge
 8009782:	4699      	movge	r9, r3
 8009784:	f1b9 0f00 	cmp.w	r9, #0
 8009788:	dc33      	bgt.n	80097f2 <_printf_float+0x396>
 800978a:	f04f 0800 	mov.w	r8, #0
 800978e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009792:	f104 0b1a 	add.w	fp, r4, #26
 8009796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009798:	ebaa 0303 	sub.w	r3, sl, r3
 800979c:	eba3 0309 	sub.w	r3, r3, r9
 80097a0:	4543      	cmp	r3, r8
 80097a2:	f77f af79 	ble.w	8009698 <_printf_float+0x23c>
 80097a6:	2301      	movs	r3, #1
 80097a8:	465a      	mov	r2, fp
 80097aa:	4631      	mov	r1, r6
 80097ac:	4628      	mov	r0, r5
 80097ae:	47b8      	blx	r7
 80097b0:	3001      	adds	r0, #1
 80097b2:	f43f aeae 	beq.w	8009512 <_printf_float+0xb6>
 80097b6:	f108 0801 	add.w	r8, r8, #1
 80097ba:	e7ec      	b.n	8009796 <_printf_float+0x33a>
 80097bc:	4642      	mov	r2, r8
 80097be:	4631      	mov	r1, r6
 80097c0:	4628      	mov	r0, r5
 80097c2:	47b8      	blx	r7
 80097c4:	3001      	adds	r0, #1
 80097c6:	d1c2      	bne.n	800974e <_printf_float+0x2f2>
 80097c8:	e6a3      	b.n	8009512 <_printf_float+0xb6>
 80097ca:	2301      	movs	r3, #1
 80097cc:	4631      	mov	r1, r6
 80097ce:	4628      	mov	r0, r5
 80097d0:	9206      	str	r2, [sp, #24]
 80097d2:	47b8      	blx	r7
 80097d4:	3001      	adds	r0, #1
 80097d6:	f43f ae9c 	beq.w	8009512 <_printf_float+0xb6>
 80097da:	9a06      	ldr	r2, [sp, #24]
 80097dc:	f10b 0b01 	add.w	fp, fp, #1
 80097e0:	e7bb      	b.n	800975a <_printf_float+0x2fe>
 80097e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097e6:	4631      	mov	r1, r6
 80097e8:	4628      	mov	r0, r5
 80097ea:	47b8      	blx	r7
 80097ec:	3001      	adds	r0, #1
 80097ee:	d1c0      	bne.n	8009772 <_printf_float+0x316>
 80097f0:	e68f      	b.n	8009512 <_printf_float+0xb6>
 80097f2:	9a06      	ldr	r2, [sp, #24]
 80097f4:	464b      	mov	r3, r9
 80097f6:	4442      	add	r2, r8
 80097f8:	4631      	mov	r1, r6
 80097fa:	4628      	mov	r0, r5
 80097fc:	47b8      	blx	r7
 80097fe:	3001      	adds	r0, #1
 8009800:	d1c3      	bne.n	800978a <_printf_float+0x32e>
 8009802:	e686      	b.n	8009512 <_printf_float+0xb6>
 8009804:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009808:	f1ba 0f01 	cmp.w	sl, #1
 800980c:	dc01      	bgt.n	8009812 <_printf_float+0x3b6>
 800980e:	07db      	lsls	r3, r3, #31
 8009810:	d536      	bpl.n	8009880 <_printf_float+0x424>
 8009812:	2301      	movs	r3, #1
 8009814:	4642      	mov	r2, r8
 8009816:	4631      	mov	r1, r6
 8009818:	4628      	mov	r0, r5
 800981a:	47b8      	blx	r7
 800981c:	3001      	adds	r0, #1
 800981e:	f43f ae78 	beq.w	8009512 <_printf_float+0xb6>
 8009822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009826:	4631      	mov	r1, r6
 8009828:	4628      	mov	r0, r5
 800982a:	47b8      	blx	r7
 800982c:	3001      	adds	r0, #1
 800982e:	f43f ae70 	beq.w	8009512 <_printf_float+0xb6>
 8009832:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009836:	2200      	movs	r2, #0
 8009838:	2300      	movs	r3, #0
 800983a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800983e:	f7f7 f973 	bl	8000b28 <__aeabi_dcmpeq>
 8009842:	b9c0      	cbnz	r0, 8009876 <_printf_float+0x41a>
 8009844:	4653      	mov	r3, sl
 8009846:	f108 0201 	add.w	r2, r8, #1
 800984a:	4631      	mov	r1, r6
 800984c:	4628      	mov	r0, r5
 800984e:	47b8      	blx	r7
 8009850:	3001      	adds	r0, #1
 8009852:	d10c      	bne.n	800986e <_printf_float+0x412>
 8009854:	e65d      	b.n	8009512 <_printf_float+0xb6>
 8009856:	2301      	movs	r3, #1
 8009858:	465a      	mov	r2, fp
 800985a:	4631      	mov	r1, r6
 800985c:	4628      	mov	r0, r5
 800985e:	47b8      	blx	r7
 8009860:	3001      	adds	r0, #1
 8009862:	f43f ae56 	beq.w	8009512 <_printf_float+0xb6>
 8009866:	f108 0801 	add.w	r8, r8, #1
 800986a:	45d0      	cmp	r8, sl
 800986c:	dbf3      	blt.n	8009856 <_printf_float+0x3fa>
 800986e:	464b      	mov	r3, r9
 8009870:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009874:	e6df      	b.n	8009636 <_printf_float+0x1da>
 8009876:	f04f 0800 	mov.w	r8, #0
 800987a:	f104 0b1a 	add.w	fp, r4, #26
 800987e:	e7f4      	b.n	800986a <_printf_float+0x40e>
 8009880:	2301      	movs	r3, #1
 8009882:	4642      	mov	r2, r8
 8009884:	e7e1      	b.n	800984a <_printf_float+0x3ee>
 8009886:	2301      	movs	r3, #1
 8009888:	464a      	mov	r2, r9
 800988a:	4631      	mov	r1, r6
 800988c:	4628      	mov	r0, r5
 800988e:	47b8      	blx	r7
 8009890:	3001      	adds	r0, #1
 8009892:	f43f ae3e 	beq.w	8009512 <_printf_float+0xb6>
 8009896:	f108 0801 	add.w	r8, r8, #1
 800989a:	68e3      	ldr	r3, [r4, #12]
 800989c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800989e:	1a5b      	subs	r3, r3, r1
 80098a0:	4543      	cmp	r3, r8
 80098a2:	dcf0      	bgt.n	8009886 <_printf_float+0x42a>
 80098a4:	e6fc      	b.n	80096a0 <_printf_float+0x244>
 80098a6:	f04f 0800 	mov.w	r8, #0
 80098aa:	f104 0919 	add.w	r9, r4, #25
 80098ae:	e7f4      	b.n	800989a <_printf_float+0x43e>

080098b0 <_printf_common>:
 80098b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b4:	4616      	mov	r6, r2
 80098b6:	4698      	mov	r8, r3
 80098b8:	688a      	ldr	r2, [r1, #8]
 80098ba:	690b      	ldr	r3, [r1, #16]
 80098bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098c0:	4293      	cmp	r3, r2
 80098c2:	bfb8      	it	lt
 80098c4:	4613      	movlt	r3, r2
 80098c6:	6033      	str	r3, [r6, #0]
 80098c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098cc:	4607      	mov	r7, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	b10a      	cbz	r2, 80098d6 <_printf_common+0x26>
 80098d2:	3301      	adds	r3, #1
 80098d4:	6033      	str	r3, [r6, #0]
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	0699      	lsls	r1, r3, #26
 80098da:	bf42      	ittt	mi
 80098dc:	6833      	ldrmi	r3, [r6, #0]
 80098de:	3302      	addmi	r3, #2
 80098e0:	6033      	strmi	r3, [r6, #0]
 80098e2:	6825      	ldr	r5, [r4, #0]
 80098e4:	f015 0506 	ands.w	r5, r5, #6
 80098e8:	d106      	bne.n	80098f8 <_printf_common+0x48>
 80098ea:	f104 0a19 	add.w	sl, r4, #25
 80098ee:	68e3      	ldr	r3, [r4, #12]
 80098f0:	6832      	ldr	r2, [r6, #0]
 80098f2:	1a9b      	subs	r3, r3, r2
 80098f4:	42ab      	cmp	r3, r5
 80098f6:	dc26      	bgt.n	8009946 <_printf_common+0x96>
 80098f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098fc:	6822      	ldr	r2, [r4, #0]
 80098fe:	3b00      	subs	r3, #0
 8009900:	bf18      	it	ne
 8009902:	2301      	movne	r3, #1
 8009904:	0692      	lsls	r2, r2, #26
 8009906:	d42b      	bmi.n	8009960 <_printf_common+0xb0>
 8009908:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800990c:	4641      	mov	r1, r8
 800990e:	4638      	mov	r0, r7
 8009910:	47c8      	blx	r9
 8009912:	3001      	adds	r0, #1
 8009914:	d01e      	beq.n	8009954 <_printf_common+0xa4>
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	6922      	ldr	r2, [r4, #16]
 800991a:	f003 0306 	and.w	r3, r3, #6
 800991e:	2b04      	cmp	r3, #4
 8009920:	bf02      	ittt	eq
 8009922:	68e5      	ldreq	r5, [r4, #12]
 8009924:	6833      	ldreq	r3, [r6, #0]
 8009926:	1aed      	subeq	r5, r5, r3
 8009928:	68a3      	ldr	r3, [r4, #8]
 800992a:	bf0c      	ite	eq
 800992c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009930:	2500      	movne	r5, #0
 8009932:	4293      	cmp	r3, r2
 8009934:	bfc4      	itt	gt
 8009936:	1a9b      	subgt	r3, r3, r2
 8009938:	18ed      	addgt	r5, r5, r3
 800993a:	2600      	movs	r6, #0
 800993c:	341a      	adds	r4, #26
 800993e:	42b5      	cmp	r5, r6
 8009940:	d11a      	bne.n	8009978 <_printf_common+0xc8>
 8009942:	2000      	movs	r0, #0
 8009944:	e008      	b.n	8009958 <_printf_common+0xa8>
 8009946:	2301      	movs	r3, #1
 8009948:	4652      	mov	r2, sl
 800994a:	4641      	mov	r1, r8
 800994c:	4638      	mov	r0, r7
 800994e:	47c8      	blx	r9
 8009950:	3001      	adds	r0, #1
 8009952:	d103      	bne.n	800995c <_printf_common+0xac>
 8009954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800995c:	3501      	adds	r5, #1
 800995e:	e7c6      	b.n	80098ee <_printf_common+0x3e>
 8009960:	18e1      	adds	r1, r4, r3
 8009962:	1c5a      	adds	r2, r3, #1
 8009964:	2030      	movs	r0, #48	@ 0x30
 8009966:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800996a:	4422      	add	r2, r4
 800996c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009970:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009974:	3302      	adds	r3, #2
 8009976:	e7c7      	b.n	8009908 <_printf_common+0x58>
 8009978:	2301      	movs	r3, #1
 800997a:	4622      	mov	r2, r4
 800997c:	4641      	mov	r1, r8
 800997e:	4638      	mov	r0, r7
 8009980:	47c8      	blx	r9
 8009982:	3001      	adds	r0, #1
 8009984:	d0e6      	beq.n	8009954 <_printf_common+0xa4>
 8009986:	3601      	adds	r6, #1
 8009988:	e7d9      	b.n	800993e <_printf_common+0x8e>
	...

0800998c <_printf_i>:
 800998c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009990:	7e0f      	ldrb	r7, [r1, #24]
 8009992:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009994:	2f78      	cmp	r7, #120	@ 0x78
 8009996:	4691      	mov	r9, r2
 8009998:	4680      	mov	r8, r0
 800999a:	460c      	mov	r4, r1
 800999c:	469a      	mov	sl, r3
 800999e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099a2:	d807      	bhi.n	80099b4 <_printf_i+0x28>
 80099a4:	2f62      	cmp	r7, #98	@ 0x62
 80099a6:	d80a      	bhi.n	80099be <_printf_i+0x32>
 80099a8:	2f00      	cmp	r7, #0
 80099aa:	f000 80d1 	beq.w	8009b50 <_printf_i+0x1c4>
 80099ae:	2f58      	cmp	r7, #88	@ 0x58
 80099b0:	f000 80b8 	beq.w	8009b24 <_printf_i+0x198>
 80099b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099bc:	e03a      	b.n	8009a34 <_printf_i+0xa8>
 80099be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099c2:	2b15      	cmp	r3, #21
 80099c4:	d8f6      	bhi.n	80099b4 <_printf_i+0x28>
 80099c6:	a101      	add	r1, pc, #4	@ (adr r1, 80099cc <_printf_i+0x40>)
 80099c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099cc:	08009a25 	.word	0x08009a25
 80099d0:	08009a39 	.word	0x08009a39
 80099d4:	080099b5 	.word	0x080099b5
 80099d8:	080099b5 	.word	0x080099b5
 80099dc:	080099b5 	.word	0x080099b5
 80099e0:	080099b5 	.word	0x080099b5
 80099e4:	08009a39 	.word	0x08009a39
 80099e8:	080099b5 	.word	0x080099b5
 80099ec:	080099b5 	.word	0x080099b5
 80099f0:	080099b5 	.word	0x080099b5
 80099f4:	080099b5 	.word	0x080099b5
 80099f8:	08009b37 	.word	0x08009b37
 80099fc:	08009a63 	.word	0x08009a63
 8009a00:	08009af1 	.word	0x08009af1
 8009a04:	080099b5 	.word	0x080099b5
 8009a08:	080099b5 	.word	0x080099b5
 8009a0c:	08009b59 	.word	0x08009b59
 8009a10:	080099b5 	.word	0x080099b5
 8009a14:	08009a63 	.word	0x08009a63
 8009a18:	080099b5 	.word	0x080099b5
 8009a1c:	080099b5 	.word	0x080099b5
 8009a20:	08009af9 	.word	0x08009af9
 8009a24:	6833      	ldr	r3, [r6, #0]
 8009a26:	1d1a      	adds	r2, r3, #4
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6032      	str	r2, [r6, #0]
 8009a2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a34:	2301      	movs	r3, #1
 8009a36:	e09c      	b.n	8009b72 <_printf_i+0x1e6>
 8009a38:	6833      	ldr	r3, [r6, #0]
 8009a3a:	6820      	ldr	r0, [r4, #0]
 8009a3c:	1d19      	adds	r1, r3, #4
 8009a3e:	6031      	str	r1, [r6, #0]
 8009a40:	0606      	lsls	r6, r0, #24
 8009a42:	d501      	bpl.n	8009a48 <_printf_i+0xbc>
 8009a44:	681d      	ldr	r5, [r3, #0]
 8009a46:	e003      	b.n	8009a50 <_printf_i+0xc4>
 8009a48:	0645      	lsls	r5, r0, #25
 8009a4a:	d5fb      	bpl.n	8009a44 <_printf_i+0xb8>
 8009a4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a50:	2d00      	cmp	r5, #0
 8009a52:	da03      	bge.n	8009a5c <_printf_i+0xd0>
 8009a54:	232d      	movs	r3, #45	@ 0x2d
 8009a56:	426d      	negs	r5, r5
 8009a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a5c:	4858      	ldr	r0, [pc, #352]	@ (8009bc0 <_printf_i+0x234>)
 8009a5e:	230a      	movs	r3, #10
 8009a60:	e011      	b.n	8009a86 <_printf_i+0xfa>
 8009a62:	6821      	ldr	r1, [r4, #0]
 8009a64:	6833      	ldr	r3, [r6, #0]
 8009a66:	0608      	lsls	r0, r1, #24
 8009a68:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a6c:	d402      	bmi.n	8009a74 <_printf_i+0xe8>
 8009a6e:	0649      	lsls	r1, r1, #25
 8009a70:	bf48      	it	mi
 8009a72:	b2ad      	uxthmi	r5, r5
 8009a74:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a76:	4852      	ldr	r0, [pc, #328]	@ (8009bc0 <_printf_i+0x234>)
 8009a78:	6033      	str	r3, [r6, #0]
 8009a7a:	bf14      	ite	ne
 8009a7c:	230a      	movne	r3, #10
 8009a7e:	2308      	moveq	r3, #8
 8009a80:	2100      	movs	r1, #0
 8009a82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a86:	6866      	ldr	r6, [r4, #4]
 8009a88:	60a6      	str	r6, [r4, #8]
 8009a8a:	2e00      	cmp	r6, #0
 8009a8c:	db05      	blt.n	8009a9a <_printf_i+0x10e>
 8009a8e:	6821      	ldr	r1, [r4, #0]
 8009a90:	432e      	orrs	r6, r5
 8009a92:	f021 0104 	bic.w	r1, r1, #4
 8009a96:	6021      	str	r1, [r4, #0]
 8009a98:	d04b      	beq.n	8009b32 <_printf_i+0x1a6>
 8009a9a:	4616      	mov	r6, r2
 8009a9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009aa0:	fb03 5711 	mls	r7, r3, r1, r5
 8009aa4:	5dc7      	ldrb	r7, [r0, r7]
 8009aa6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009aaa:	462f      	mov	r7, r5
 8009aac:	42bb      	cmp	r3, r7
 8009aae:	460d      	mov	r5, r1
 8009ab0:	d9f4      	bls.n	8009a9c <_printf_i+0x110>
 8009ab2:	2b08      	cmp	r3, #8
 8009ab4:	d10b      	bne.n	8009ace <_printf_i+0x142>
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	07df      	lsls	r7, r3, #31
 8009aba:	d508      	bpl.n	8009ace <_printf_i+0x142>
 8009abc:	6923      	ldr	r3, [r4, #16]
 8009abe:	6861      	ldr	r1, [r4, #4]
 8009ac0:	4299      	cmp	r1, r3
 8009ac2:	bfde      	ittt	le
 8009ac4:	2330      	movle	r3, #48	@ 0x30
 8009ac6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009aca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009ace:	1b92      	subs	r2, r2, r6
 8009ad0:	6122      	str	r2, [r4, #16]
 8009ad2:	f8cd a000 	str.w	sl, [sp]
 8009ad6:	464b      	mov	r3, r9
 8009ad8:	aa03      	add	r2, sp, #12
 8009ada:	4621      	mov	r1, r4
 8009adc:	4640      	mov	r0, r8
 8009ade:	f7ff fee7 	bl	80098b0 <_printf_common>
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	d14a      	bne.n	8009b7c <_printf_i+0x1f0>
 8009ae6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009aea:	b004      	add	sp, #16
 8009aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	f043 0320 	orr.w	r3, r3, #32
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	4832      	ldr	r0, [pc, #200]	@ (8009bc4 <_printf_i+0x238>)
 8009afa:	2778      	movs	r7, #120	@ 0x78
 8009afc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	6831      	ldr	r1, [r6, #0]
 8009b04:	061f      	lsls	r7, r3, #24
 8009b06:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b0a:	d402      	bmi.n	8009b12 <_printf_i+0x186>
 8009b0c:	065f      	lsls	r7, r3, #25
 8009b0e:	bf48      	it	mi
 8009b10:	b2ad      	uxthmi	r5, r5
 8009b12:	6031      	str	r1, [r6, #0]
 8009b14:	07d9      	lsls	r1, r3, #31
 8009b16:	bf44      	itt	mi
 8009b18:	f043 0320 	orrmi.w	r3, r3, #32
 8009b1c:	6023      	strmi	r3, [r4, #0]
 8009b1e:	b11d      	cbz	r5, 8009b28 <_printf_i+0x19c>
 8009b20:	2310      	movs	r3, #16
 8009b22:	e7ad      	b.n	8009a80 <_printf_i+0xf4>
 8009b24:	4826      	ldr	r0, [pc, #152]	@ (8009bc0 <_printf_i+0x234>)
 8009b26:	e7e9      	b.n	8009afc <_printf_i+0x170>
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	f023 0320 	bic.w	r3, r3, #32
 8009b2e:	6023      	str	r3, [r4, #0]
 8009b30:	e7f6      	b.n	8009b20 <_printf_i+0x194>
 8009b32:	4616      	mov	r6, r2
 8009b34:	e7bd      	b.n	8009ab2 <_printf_i+0x126>
 8009b36:	6833      	ldr	r3, [r6, #0]
 8009b38:	6825      	ldr	r5, [r4, #0]
 8009b3a:	6961      	ldr	r1, [r4, #20]
 8009b3c:	1d18      	adds	r0, r3, #4
 8009b3e:	6030      	str	r0, [r6, #0]
 8009b40:	062e      	lsls	r6, r5, #24
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	d501      	bpl.n	8009b4a <_printf_i+0x1be>
 8009b46:	6019      	str	r1, [r3, #0]
 8009b48:	e002      	b.n	8009b50 <_printf_i+0x1c4>
 8009b4a:	0668      	lsls	r0, r5, #25
 8009b4c:	d5fb      	bpl.n	8009b46 <_printf_i+0x1ba>
 8009b4e:	8019      	strh	r1, [r3, #0]
 8009b50:	2300      	movs	r3, #0
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	4616      	mov	r6, r2
 8009b56:	e7bc      	b.n	8009ad2 <_printf_i+0x146>
 8009b58:	6833      	ldr	r3, [r6, #0]
 8009b5a:	1d1a      	adds	r2, r3, #4
 8009b5c:	6032      	str	r2, [r6, #0]
 8009b5e:	681e      	ldr	r6, [r3, #0]
 8009b60:	6862      	ldr	r2, [r4, #4]
 8009b62:	2100      	movs	r1, #0
 8009b64:	4630      	mov	r0, r6
 8009b66:	f7f6 fb63 	bl	8000230 <memchr>
 8009b6a:	b108      	cbz	r0, 8009b70 <_printf_i+0x1e4>
 8009b6c:	1b80      	subs	r0, r0, r6
 8009b6e:	6060      	str	r0, [r4, #4]
 8009b70:	6863      	ldr	r3, [r4, #4]
 8009b72:	6123      	str	r3, [r4, #16]
 8009b74:	2300      	movs	r3, #0
 8009b76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b7a:	e7aa      	b.n	8009ad2 <_printf_i+0x146>
 8009b7c:	6923      	ldr	r3, [r4, #16]
 8009b7e:	4632      	mov	r2, r6
 8009b80:	4649      	mov	r1, r9
 8009b82:	4640      	mov	r0, r8
 8009b84:	47d0      	blx	sl
 8009b86:	3001      	adds	r0, #1
 8009b88:	d0ad      	beq.n	8009ae6 <_printf_i+0x15a>
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	079b      	lsls	r3, r3, #30
 8009b8e:	d413      	bmi.n	8009bb8 <_printf_i+0x22c>
 8009b90:	68e0      	ldr	r0, [r4, #12]
 8009b92:	9b03      	ldr	r3, [sp, #12]
 8009b94:	4298      	cmp	r0, r3
 8009b96:	bfb8      	it	lt
 8009b98:	4618      	movlt	r0, r3
 8009b9a:	e7a6      	b.n	8009aea <_printf_i+0x15e>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	4632      	mov	r2, r6
 8009ba0:	4649      	mov	r1, r9
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	47d0      	blx	sl
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	d09d      	beq.n	8009ae6 <_printf_i+0x15a>
 8009baa:	3501      	adds	r5, #1
 8009bac:	68e3      	ldr	r3, [r4, #12]
 8009bae:	9903      	ldr	r1, [sp, #12]
 8009bb0:	1a5b      	subs	r3, r3, r1
 8009bb2:	42ab      	cmp	r3, r5
 8009bb4:	dcf2      	bgt.n	8009b9c <_printf_i+0x210>
 8009bb6:	e7eb      	b.n	8009b90 <_printf_i+0x204>
 8009bb8:	2500      	movs	r5, #0
 8009bba:	f104 0619 	add.w	r6, r4, #25
 8009bbe:	e7f5      	b.n	8009bac <_printf_i+0x220>
 8009bc0:	0800c06e 	.word	0x0800c06e
 8009bc4:	0800c07f 	.word	0x0800c07f

08009bc8 <sniprintf>:
 8009bc8:	b40c      	push	{r2, r3}
 8009bca:	b530      	push	{r4, r5, lr}
 8009bcc:	4b18      	ldr	r3, [pc, #96]	@ (8009c30 <sniprintf+0x68>)
 8009bce:	1e0c      	subs	r4, r1, #0
 8009bd0:	681d      	ldr	r5, [r3, #0]
 8009bd2:	b09d      	sub	sp, #116	@ 0x74
 8009bd4:	da08      	bge.n	8009be8 <sniprintf+0x20>
 8009bd6:	238b      	movs	r3, #139	@ 0x8b
 8009bd8:	602b      	str	r3, [r5, #0]
 8009bda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bde:	b01d      	add	sp, #116	@ 0x74
 8009be0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009be4:	b002      	add	sp, #8
 8009be6:	4770      	bx	lr
 8009be8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009bec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009bf0:	f04f 0300 	mov.w	r3, #0
 8009bf4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009bf6:	bf14      	ite	ne
 8009bf8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009bfc:	4623      	moveq	r3, r4
 8009bfe:	9304      	str	r3, [sp, #16]
 8009c00:	9307      	str	r3, [sp, #28]
 8009c02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c06:	9002      	str	r0, [sp, #8]
 8009c08:	9006      	str	r0, [sp, #24]
 8009c0a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c0e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009c10:	ab21      	add	r3, sp, #132	@ 0x84
 8009c12:	a902      	add	r1, sp, #8
 8009c14:	4628      	mov	r0, r5
 8009c16:	9301      	str	r3, [sp, #4]
 8009c18:	f000 ffca 	bl	800abb0 <_svfiprintf_r>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	bfbc      	itt	lt
 8009c20:	238b      	movlt	r3, #139	@ 0x8b
 8009c22:	602b      	strlt	r3, [r5, #0]
 8009c24:	2c00      	cmp	r4, #0
 8009c26:	d0da      	beq.n	8009bde <sniprintf+0x16>
 8009c28:	9b02      	ldr	r3, [sp, #8]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	701a      	strb	r2, [r3, #0]
 8009c2e:	e7d6      	b.n	8009bde <sniprintf+0x16>
 8009c30:	200003d4 	.word	0x200003d4

08009c34 <std>:
 8009c34:	2300      	movs	r3, #0
 8009c36:	b510      	push	{r4, lr}
 8009c38:	4604      	mov	r4, r0
 8009c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c42:	6083      	str	r3, [r0, #8]
 8009c44:	8181      	strh	r1, [r0, #12]
 8009c46:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c48:	81c2      	strh	r2, [r0, #14]
 8009c4a:	6183      	str	r3, [r0, #24]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	2208      	movs	r2, #8
 8009c50:	305c      	adds	r0, #92	@ 0x5c
 8009c52:	f000 f8b1 	bl	8009db8 <memset>
 8009c56:	4b0d      	ldr	r3, [pc, #52]	@ (8009c8c <std+0x58>)
 8009c58:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c90 <std+0x5c>)
 8009c5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c94 <std+0x60>)
 8009c60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c62:	4b0d      	ldr	r3, [pc, #52]	@ (8009c98 <std+0x64>)
 8009c64:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c66:	4b0d      	ldr	r3, [pc, #52]	@ (8009c9c <std+0x68>)
 8009c68:	6224      	str	r4, [r4, #32]
 8009c6a:	429c      	cmp	r4, r3
 8009c6c:	d006      	beq.n	8009c7c <std+0x48>
 8009c6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c72:	4294      	cmp	r4, r2
 8009c74:	d002      	beq.n	8009c7c <std+0x48>
 8009c76:	33d0      	adds	r3, #208	@ 0xd0
 8009c78:	429c      	cmp	r4, r3
 8009c7a:	d105      	bne.n	8009c88 <std+0x54>
 8009c7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c84:	f000 b8ca 	b.w	8009e1c <__retarget_lock_init_recursive>
 8009c88:	bd10      	pop	{r4, pc}
 8009c8a:	bf00      	nop
 8009c8c:	0800b761 	.word	0x0800b761
 8009c90:	0800b783 	.word	0x0800b783
 8009c94:	0800b7bb 	.word	0x0800b7bb
 8009c98:	0800b7df 	.word	0x0800b7df
 8009c9c:	20000b20 	.word	0x20000b20

08009ca0 <stdio_exit_handler>:
 8009ca0:	4a02      	ldr	r2, [pc, #8]	@ (8009cac <stdio_exit_handler+0xc>)
 8009ca2:	4903      	ldr	r1, [pc, #12]	@ (8009cb0 <stdio_exit_handler+0x10>)
 8009ca4:	4803      	ldr	r0, [pc, #12]	@ (8009cb4 <stdio_exit_handler+0x14>)
 8009ca6:	f000 b869 	b.w	8009d7c <_fwalk_sglue>
 8009caa:	bf00      	nop
 8009cac:	200003c8 	.word	0x200003c8
 8009cb0:	0800b005 	.word	0x0800b005
 8009cb4:	200003d8 	.word	0x200003d8

08009cb8 <cleanup_stdio>:
 8009cb8:	6841      	ldr	r1, [r0, #4]
 8009cba:	4b0c      	ldr	r3, [pc, #48]	@ (8009cec <cleanup_stdio+0x34>)
 8009cbc:	4299      	cmp	r1, r3
 8009cbe:	b510      	push	{r4, lr}
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	d001      	beq.n	8009cc8 <cleanup_stdio+0x10>
 8009cc4:	f001 f99e 	bl	800b004 <_fflush_r>
 8009cc8:	68a1      	ldr	r1, [r4, #8]
 8009cca:	4b09      	ldr	r3, [pc, #36]	@ (8009cf0 <cleanup_stdio+0x38>)
 8009ccc:	4299      	cmp	r1, r3
 8009cce:	d002      	beq.n	8009cd6 <cleanup_stdio+0x1e>
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f001 f997 	bl	800b004 <_fflush_r>
 8009cd6:	68e1      	ldr	r1, [r4, #12]
 8009cd8:	4b06      	ldr	r3, [pc, #24]	@ (8009cf4 <cleanup_stdio+0x3c>)
 8009cda:	4299      	cmp	r1, r3
 8009cdc:	d004      	beq.n	8009ce8 <cleanup_stdio+0x30>
 8009cde:	4620      	mov	r0, r4
 8009ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ce4:	f001 b98e 	b.w	800b004 <_fflush_r>
 8009ce8:	bd10      	pop	{r4, pc}
 8009cea:	bf00      	nop
 8009cec:	20000b20 	.word	0x20000b20
 8009cf0:	20000b88 	.word	0x20000b88
 8009cf4:	20000bf0 	.word	0x20000bf0

08009cf8 <global_stdio_init.part.0>:
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8009d28 <global_stdio_init.part.0+0x30>)
 8009cfc:	4c0b      	ldr	r4, [pc, #44]	@ (8009d2c <global_stdio_init.part.0+0x34>)
 8009cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8009d30 <global_stdio_init.part.0+0x38>)
 8009d00:	601a      	str	r2, [r3, #0]
 8009d02:	4620      	mov	r0, r4
 8009d04:	2200      	movs	r2, #0
 8009d06:	2104      	movs	r1, #4
 8009d08:	f7ff ff94 	bl	8009c34 <std>
 8009d0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d10:	2201      	movs	r2, #1
 8009d12:	2109      	movs	r1, #9
 8009d14:	f7ff ff8e 	bl	8009c34 <std>
 8009d18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d22:	2112      	movs	r1, #18
 8009d24:	f7ff bf86 	b.w	8009c34 <std>
 8009d28:	20000c58 	.word	0x20000c58
 8009d2c:	20000b20 	.word	0x20000b20
 8009d30:	08009ca1 	.word	0x08009ca1

08009d34 <__sfp_lock_acquire>:
 8009d34:	4801      	ldr	r0, [pc, #4]	@ (8009d3c <__sfp_lock_acquire+0x8>)
 8009d36:	f000 b872 	b.w	8009e1e <__retarget_lock_acquire_recursive>
 8009d3a:	bf00      	nop
 8009d3c:	20000c5d 	.word	0x20000c5d

08009d40 <__sfp_lock_release>:
 8009d40:	4801      	ldr	r0, [pc, #4]	@ (8009d48 <__sfp_lock_release+0x8>)
 8009d42:	f000 b86d 	b.w	8009e20 <__retarget_lock_release_recursive>
 8009d46:	bf00      	nop
 8009d48:	20000c5d 	.word	0x20000c5d

08009d4c <__sinit>:
 8009d4c:	b510      	push	{r4, lr}
 8009d4e:	4604      	mov	r4, r0
 8009d50:	f7ff fff0 	bl	8009d34 <__sfp_lock_acquire>
 8009d54:	6a23      	ldr	r3, [r4, #32]
 8009d56:	b11b      	cbz	r3, 8009d60 <__sinit+0x14>
 8009d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d5c:	f7ff bff0 	b.w	8009d40 <__sfp_lock_release>
 8009d60:	4b04      	ldr	r3, [pc, #16]	@ (8009d74 <__sinit+0x28>)
 8009d62:	6223      	str	r3, [r4, #32]
 8009d64:	4b04      	ldr	r3, [pc, #16]	@ (8009d78 <__sinit+0x2c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1f5      	bne.n	8009d58 <__sinit+0xc>
 8009d6c:	f7ff ffc4 	bl	8009cf8 <global_stdio_init.part.0>
 8009d70:	e7f2      	b.n	8009d58 <__sinit+0xc>
 8009d72:	bf00      	nop
 8009d74:	08009cb9 	.word	0x08009cb9
 8009d78:	20000c58 	.word	0x20000c58

08009d7c <_fwalk_sglue>:
 8009d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d80:	4607      	mov	r7, r0
 8009d82:	4688      	mov	r8, r1
 8009d84:	4614      	mov	r4, r2
 8009d86:	2600      	movs	r6, #0
 8009d88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d8c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d90:	d505      	bpl.n	8009d9e <_fwalk_sglue+0x22>
 8009d92:	6824      	ldr	r4, [r4, #0]
 8009d94:	2c00      	cmp	r4, #0
 8009d96:	d1f7      	bne.n	8009d88 <_fwalk_sglue+0xc>
 8009d98:	4630      	mov	r0, r6
 8009d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d9e:	89ab      	ldrh	r3, [r5, #12]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d907      	bls.n	8009db4 <_fwalk_sglue+0x38>
 8009da4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009da8:	3301      	adds	r3, #1
 8009daa:	d003      	beq.n	8009db4 <_fwalk_sglue+0x38>
 8009dac:	4629      	mov	r1, r5
 8009dae:	4638      	mov	r0, r7
 8009db0:	47c0      	blx	r8
 8009db2:	4306      	orrs	r6, r0
 8009db4:	3568      	adds	r5, #104	@ 0x68
 8009db6:	e7e9      	b.n	8009d8c <_fwalk_sglue+0x10>

08009db8 <memset>:
 8009db8:	4402      	add	r2, r0
 8009dba:	4603      	mov	r3, r0
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d100      	bne.n	8009dc2 <memset+0xa>
 8009dc0:	4770      	bx	lr
 8009dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8009dc6:	e7f9      	b.n	8009dbc <memset+0x4>

08009dc8 <__errno>:
 8009dc8:	4b01      	ldr	r3, [pc, #4]	@ (8009dd0 <__errno+0x8>)
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	200003d4 	.word	0x200003d4

08009dd4 <__libc_init_array>:
 8009dd4:	b570      	push	{r4, r5, r6, lr}
 8009dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8009e0c <__libc_init_array+0x38>)
 8009dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8009e10 <__libc_init_array+0x3c>)
 8009dda:	1b64      	subs	r4, r4, r5
 8009ddc:	10a4      	asrs	r4, r4, #2
 8009dde:	2600      	movs	r6, #0
 8009de0:	42a6      	cmp	r6, r4
 8009de2:	d109      	bne.n	8009df8 <__libc_init_array+0x24>
 8009de4:	4d0b      	ldr	r5, [pc, #44]	@ (8009e14 <__libc_init_array+0x40>)
 8009de6:	4c0c      	ldr	r4, [pc, #48]	@ (8009e18 <__libc_init_array+0x44>)
 8009de8:	f002 f8f6 	bl	800bfd8 <_init>
 8009dec:	1b64      	subs	r4, r4, r5
 8009dee:	10a4      	asrs	r4, r4, #2
 8009df0:	2600      	movs	r6, #0
 8009df2:	42a6      	cmp	r6, r4
 8009df4:	d105      	bne.n	8009e02 <__libc_init_array+0x2e>
 8009df6:	bd70      	pop	{r4, r5, r6, pc}
 8009df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dfc:	4798      	blx	r3
 8009dfe:	3601      	adds	r6, #1
 8009e00:	e7ee      	b.n	8009de0 <__libc_init_array+0xc>
 8009e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e06:	4798      	blx	r3
 8009e08:	3601      	adds	r6, #1
 8009e0a:	e7f2      	b.n	8009df2 <__libc_init_array+0x1e>
 8009e0c:	0800c3dc 	.word	0x0800c3dc
 8009e10:	0800c3dc 	.word	0x0800c3dc
 8009e14:	0800c3dc 	.word	0x0800c3dc
 8009e18:	0800c3e0 	.word	0x0800c3e0

08009e1c <__retarget_lock_init_recursive>:
 8009e1c:	4770      	bx	lr

08009e1e <__retarget_lock_acquire_recursive>:
 8009e1e:	4770      	bx	lr

08009e20 <__retarget_lock_release_recursive>:
 8009e20:	4770      	bx	lr
	...

08009e24 <_localeconv_r>:
 8009e24:	4800      	ldr	r0, [pc, #0]	@ (8009e28 <_localeconv_r+0x4>)
 8009e26:	4770      	bx	lr
 8009e28:	20000514 	.word	0x20000514

08009e2c <memcpy>:
 8009e2c:	440a      	add	r2, r1
 8009e2e:	4291      	cmp	r1, r2
 8009e30:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009e34:	d100      	bne.n	8009e38 <memcpy+0xc>
 8009e36:	4770      	bx	lr
 8009e38:	b510      	push	{r4, lr}
 8009e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e42:	4291      	cmp	r1, r2
 8009e44:	d1f9      	bne.n	8009e3a <memcpy+0xe>
 8009e46:	bd10      	pop	{r4, pc}

08009e48 <quorem>:
 8009e48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	6903      	ldr	r3, [r0, #16]
 8009e4e:	690c      	ldr	r4, [r1, #16]
 8009e50:	42a3      	cmp	r3, r4
 8009e52:	4607      	mov	r7, r0
 8009e54:	db7e      	blt.n	8009f54 <quorem+0x10c>
 8009e56:	3c01      	subs	r4, #1
 8009e58:	f101 0814 	add.w	r8, r1, #20
 8009e5c:	00a3      	lsls	r3, r4, #2
 8009e5e:	f100 0514 	add.w	r5, r0, #20
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e68:	9301      	str	r3, [sp, #4]
 8009e6a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e72:	3301      	adds	r3, #1
 8009e74:	429a      	cmp	r2, r3
 8009e76:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e7a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e7e:	d32e      	bcc.n	8009ede <quorem+0x96>
 8009e80:	f04f 0a00 	mov.w	sl, #0
 8009e84:	46c4      	mov	ip, r8
 8009e86:	46ae      	mov	lr, r5
 8009e88:	46d3      	mov	fp, sl
 8009e8a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e8e:	b298      	uxth	r0, r3
 8009e90:	fb06 a000 	mla	r0, r6, r0, sl
 8009e94:	0c02      	lsrs	r2, r0, #16
 8009e96:	0c1b      	lsrs	r3, r3, #16
 8009e98:	fb06 2303 	mla	r3, r6, r3, r2
 8009e9c:	f8de 2000 	ldr.w	r2, [lr]
 8009ea0:	b280      	uxth	r0, r0
 8009ea2:	b292      	uxth	r2, r2
 8009ea4:	1a12      	subs	r2, r2, r0
 8009ea6:	445a      	add	r2, fp
 8009ea8:	f8de 0000 	ldr.w	r0, [lr]
 8009eac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009eb6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009eba:	b292      	uxth	r2, r2
 8009ebc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009ec0:	45e1      	cmp	r9, ip
 8009ec2:	f84e 2b04 	str.w	r2, [lr], #4
 8009ec6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009eca:	d2de      	bcs.n	8009e8a <quorem+0x42>
 8009ecc:	9b00      	ldr	r3, [sp, #0]
 8009ece:	58eb      	ldr	r3, [r5, r3]
 8009ed0:	b92b      	cbnz	r3, 8009ede <quorem+0x96>
 8009ed2:	9b01      	ldr	r3, [sp, #4]
 8009ed4:	3b04      	subs	r3, #4
 8009ed6:	429d      	cmp	r5, r3
 8009ed8:	461a      	mov	r2, r3
 8009eda:	d32f      	bcc.n	8009f3c <quorem+0xf4>
 8009edc:	613c      	str	r4, [r7, #16]
 8009ede:	4638      	mov	r0, r7
 8009ee0:	f001 fb36 	bl	800b550 <__mcmp>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	db25      	blt.n	8009f34 <quorem+0xec>
 8009ee8:	4629      	mov	r1, r5
 8009eea:	2000      	movs	r0, #0
 8009eec:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ef0:	f8d1 c000 	ldr.w	ip, [r1]
 8009ef4:	fa1f fe82 	uxth.w	lr, r2
 8009ef8:	fa1f f38c 	uxth.w	r3, ip
 8009efc:	eba3 030e 	sub.w	r3, r3, lr
 8009f00:	4403      	add	r3, r0
 8009f02:	0c12      	lsrs	r2, r2, #16
 8009f04:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009f08:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f12:	45c1      	cmp	r9, r8
 8009f14:	f841 3b04 	str.w	r3, [r1], #4
 8009f18:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f1c:	d2e6      	bcs.n	8009eec <quorem+0xa4>
 8009f1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f26:	b922      	cbnz	r2, 8009f32 <quorem+0xea>
 8009f28:	3b04      	subs	r3, #4
 8009f2a:	429d      	cmp	r5, r3
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	d30b      	bcc.n	8009f48 <quorem+0x100>
 8009f30:	613c      	str	r4, [r7, #16]
 8009f32:	3601      	adds	r6, #1
 8009f34:	4630      	mov	r0, r6
 8009f36:	b003      	add	sp, #12
 8009f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3c:	6812      	ldr	r2, [r2, #0]
 8009f3e:	3b04      	subs	r3, #4
 8009f40:	2a00      	cmp	r2, #0
 8009f42:	d1cb      	bne.n	8009edc <quorem+0x94>
 8009f44:	3c01      	subs	r4, #1
 8009f46:	e7c6      	b.n	8009ed6 <quorem+0x8e>
 8009f48:	6812      	ldr	r2, [r2, #0]
 8009f4a:	3b04      	subs	r3, #4
 8009f4c:	2a00      	cmp	r2, #0
 8009f4e:	d1ef      	bne.n	8009f30 <quorem+0xe8>
 8009f50:	3c01      	subs	r4, #1
 8009f52:	e7ea      	b.n	8009f2a <quorem+0xe2>
 8009f54:	2000      	movs	r0, #0
 8009f56:	e7ee      	b.n	8009f36 <quorem+0xee>

08009f58 <_dtoa_r>:
 8009f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	69c7      	ldr	r7, [r0, #28]
 8009f5e:	b097      	sub	sp, #92	@ 0x5c
 8009f60:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009f64:	ec55 4b10 	vmov	r4, r5, d0
 8009f68:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009f6a:	9107      	str	r1, [sp, #28]
 8009f6c:	4681      	mov	r9, r0
 8009f6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009f70:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f72:	b97f      	cbnz	r7, 8009f94 <_dtoa_r+0x3c>
 8009f74:	2010      	movs	r0, #16
 8009f76:	f000 ff17 	bl	800ada8 <malloc>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009f80:	b920      	cbnz	r0, 8009f8c <_dtoa_r+0x34>
 8009f82:	4ba9      	ldr	r3, [pc, #676]	@ (800a228 <_dtoa_r+0x2d0>)
 8009f84:	21ef      	movs	r1, #239	@ 0xef
 8009f86:	48a9      	ldr	r0, [pc, #676]	@ (800a22c <_dtoa_r+0x2d4>)
 8009f88:	f001 fccc 	bl	800b924 <__assert_func>
 8009f8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009f90:	6007      	str	r7, [r0, #0]
 8009f92:	60c7      	str	r7, [r0, #12]
 8009f94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009f98:	6819      	ldr	r1, [r3, #0]
 8009f9a:	b159      	cbz	r1, 8009fb4 <_dtoa_r+0x5c>
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	604a      	str	r2, [r1, #4]
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	4093      	lsls	r3, r2
 8009fa4:	608b      	str	r3, [r1, #8]
 8009fa6:	4648      	mov	r0, r9
 8009fa8:	f001 f8a0 	bl	800b0ec <_Bfree>
 8009fac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	1e2b      	subs	r3, r5, #0
 8009fb6:	bfb9      	ittee	lt
 8009fb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009fbc:	9305      	strlt	r3, [sp, #20]
 8009fbe:	2300      	movge	r3, #0
 8009fc0:	6033      	strge	r3, [r6, #0]
 8009fc2:	9f05      	ldr	r7, [sp, #20]
 8009fc4:	4b9a      	ldr	r3, [pc, #616]	@ (800a230 <_dtoa_r+0x2d8>)
 8009fc6:	bfbc      	itt	lt
 8009fc8:	2201      	movlt	r2, #1
 8009fca:	6032      	strlt	r2, [r6, #0]
 8009fcc:	43bb      	bics	r3, r7
 8009fce:	d112      	bne.n	8009ff6 <_dtoa_r+0x9e>
 8009fd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009fd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009fdc:	4323      	orrs	r3, r4
 8009fde:	f000 855a 	beq.w	800aa96 <_dtoa_r+0xb3e>
 8009fe2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fe4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a244 <_dtoa_r+0x2ec>
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 855c 	beq.w	800aaa6 <_dtoa_r+0xb4e>
 8009fee:	f10a 0303 	add.w	r3, sl, #3
 8009ff2:	f000 bd56 	b.w	800aaa2 <_dtoa_r+0xb4a>
 8009ff6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	ec51 0b17 	vmov	r0, r1, d7
 800a000:	2300      	movs	r3, #0
 800a002:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a006:	f7f6 fd8f 	bl	8000b28 <__aeabi_dcmpeq>
 800a00a:	4680      	mov	r8, r0
 800a00c:	b158      	cbz	r0, 800a026 <_dtoa_r+0xce>
 800a00e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a010:	2301      	movs	r3, #1
 800a012:	6013      	str	r3, [r2, #0]
 800a014:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a016:	b113      	cbz	r3, 800a01e <_dtoa_r+0xc6>
 800a018:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a01a:	4b86      	ldr	r3, [pc, #536]	@ (800a234 <_dtoa_r+0x2dc>)
 800a01c:	6013      	str	r3, [r2, #0]
 800a01e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a248 <_dtoa_r+0x2f0>
 800a022:	f000 bd40 	b.w	800aaa6 <_dtoa_r+0xb4e>
 800a026:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a02a:	aa14      	add	r2, sp, #80	@ 0x50
 800a02c:	a915      	add	r1, sp, #84	@ 0x54
 800a02e:	4648      	mov	r0, r9
 800a030:	f001 fb3e 	bl	800b6b0 <__d2b>
 800a034:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a038:	9002      	str	r0, [sp, #8]
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	d078      	beq.n	800a130 <_dtoa_r+0x1d8>
 800a03e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a040:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a048:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a04c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a050:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a054:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a058:	4619      	mov	r1, r3
 800a05a:	2200      	movs	r2, #0
 800a05c:	4b76      	ldr	r3, [pc, #472]	@ (800a238 <_dtoa_r+0x2e0>)
 800a05e:	f7f6 f943 	bl	80002e8 <__aeabi_dsub>
 800a062:	a36b      	add	r3, pc, #428	@ (adr r3, 800a210 <_dtoa_r+0x2b8>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	f7f6 faf6 	bl	8000658 <__aeabi_dmul>
 800a06c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a218 <_dtoa_r+0x2c0>)
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f7f6 f93b 	bl	80002ec <__adddf3>
 800a076:	4604      	mov	r4, r0
 800a078:	4630      	mov	r0, r6
 800a07a:	460d      	mov	r5, r1
 800a07c:	f7f6 fa82 	bl	8000584 <__aeabi_i2d>
 800a080:	a367      	add	r3, pc, #412	@ (adr r3, 800a220 <_dtoa_r+0x2c8>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 fae7 	bl	8000658 <__aeabi_dmul>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	4620      	mov	r0, r4
 800a090:	4629      	mov	r1, r5
 800a092:	f7f6 f92b 	bl	80002ec <__adddf3>
 800a096:	4604      	mov	r4, r0
 800a098:	460d      	mov	r5, r1
 800a09a:	f7f6 fd8d 	bl	8000bb8 <__aeabi_d2iz>
 800a09e:	2200      	movs	r2, #0
 800a0a0:	4607      	mov	r7, r0
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	f7f6 fd48 	bl	8000b3c <__aeabi_dcmplt>
 800a0ac:	b140      	cbz	r0, 800a0c0 <_dtoa_r+0x168>
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	f7f6 fa68 	bl	8000584 <__aeabi_i2d>
 800a0b4:	4622      	mov	r2, r4
 800a0b6:	462b      	mov	r3, r5
 800a0b8:	f7f6 fd36 	bl	8000b28 <__aeabi_dcmpeq>
 800a0bc:	b900      	cbnz	r0, 800a0c0 <_dtoa_r+0x168>
 800a0be:	3f01      	subs	r7, #1
 800a0c0:	2f16      	cmp	r7, #22
 800a0c2:	d852      	bhi.n	800a16a <_dtoa_r+0x212>
 800a0c4:	4b5d      	ldr	r3, [pc, #372]	@ (800a23c <_dtoa_r+0x2e4>)
 800a0c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0d2:	f7f6 fd33 	bl	8000b3c <__aeabi_dcmplt>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d049      	beq.n	800a16e <_dtoa_r+0x216>
 800a0da:	3f01      	subs	r7, #1
 800a0dc:	2300      	movs	r3, #0
 800a0de:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a0e2:	1b9b      	subs	r3, r3, r6
 800a0e4:	1e5a      	subs	r2, r3, #1
 800a0e6:	bf45      	ittet	mi
 800a0e8:	f1c3 0301 	rsbmi	r3, r3, #1
 800a0ec:	9300      	strmi	r3, [sp, #0]
 800a0ee:	2300      	movpl	r3, #0
 800a0f0:	2300      	movmi	r3, #0
 800a0f2:	9206      	str	r2, [sp, #24]
 800a0f4:	bf54      	ite	pl
 800a0f6:	9300      	strpl	r3, [sp, #0]
 800a0f8:	9306      	strmi	r3, [sp, #24]
 800a0fa:	2f00      	cmp	r7, #0
 800a0fc:	db39      	blt.n	800a172 <_dtoa_r+0x21a>
 800a0fe:	9b06      	ldr	r3, [sp, #24]
 800a100:	970d      	str	r7, [sp, #52]	@ 0x34
 800a102:	443b      	add	r3, r7
 800a104:	9306      	str	r3, [sp, #24]
 800a106:	2300      	movs	r3, #0
 800a108:	9308      	str	r3, [sp, #32]
 800a10a:	9b07      	ldr	r3, [sp, #28]
 800a10c:	2b09      	cmp	r3, #9
 800a10e:	d863      	bhi.n	800a1d8 <_dtoa_r+0x280>
 800a110:	2b05      	cmp	r3, #5
 800a112:	bfc4      	itt	gt
 800a114:	3b04      	subgt	r3, #4
 800a116:	9307      	strgt	r3, [sp, #28]
 800a118:	9b07      	ldr	r3, [sp, #28]
 800a11a:	f1a3 0302 	sub.w	r3, r3, #2
 800a11e:	bfcc      	ite	gt
 800a120:	2400      	movgt	r4, #0
 800a122:	2401      	movle	r4, #1
 800a124:	2b03      	cmp	r3, #3
 800a126:	d863      	bhi.n	800a1f0 <_dtoa_r+0x298>
 800a128:	e8df f003 	tbb	[pc, r3]
 800a12c:	2b375452 	.word	0x2b375452
 800a130:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a134:	441e      	add	r6, r3
 800a136:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a13a:	2b20      	cmp	r3, #32
 800a13c:	bfc1      	itttt	gt
 800a13e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a142:	409f      	lslgt	r7, r3
 800a144:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a148:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a14c:	bfd6      	itet	le
 800a14e:	f1c3 0320 	rsble	r3, r3, #32
 800a152:	ea47 0003 	orrgt.w	r0, r7, r3
 800a156:	fa04 f003 	lslle.w	r0, r4, r3
 800a15a:	f7f6 fa03 	bl	8000564 <__aeabi_ui2d>
 800a15e:	2201      	movs	r2, #1
 800a160:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a164:	3e01      	subs	r6, #1
 800a166:	9212      	str	r2, [sp, #72]	@ 0x48
 800a168:	e776      	b.n	800a058 <_dtoa_r+0x100>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e7b7      	b.n	800a0de <_dtoa_r+0x186>
 800a16e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a170:	e7b6      	b.n	800a0e0 <_dtoa_r+0x188>
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	1bdb      	subs	r3, r3, r7
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	427b      	negs	r3, r7
 800a17a:	9308      	str	r3, [sp, #32]
 800a17c:	2300      	movs	r3, #0
 800a17e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a180:	e7c3      	b.n	800a10a <_dtoa_r+0x1b2>
 800a182:	2301      	movs	r3, #1
 800a184:	9309      	str	r3, [sp, #36]	@ 0x24
 800a186:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a188:	eb07 0b03 	add.w	fp, r7, r3
 800a18c:	f10b 0301 	add.w	r3, fp, #1
 800a190:	2b01      	cmp	r3, #1
 800a192:	9303      	str	r3, [sp, #12]
 800a194:	bfb8      	it	lt
 800a196:	2301      	movlt	r3, #1
 800a198:	e006      	b.n	800a1a8 <_dtoa_r+0x250>
 800a19a:	2301      	movs	r3, #1
 800a19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a19e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	dd28      	ble.n	800a1f6 <_dtoa_r+0x29e>
 800a1a4:	469b      	mov	fp, r3
 800a1a6:	9303      	str	r3, [sp, #12]
 800a1a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	2204      	movs	r2, #4
 800a1b0:	f102 0514 	add.w	r5, r2, #20
 800a1b4:	429d      	cmp	r5, r3
 800a1b6:	d926      	bls.n	800a206 <_dtoa_r+0x2ae>
 800a1b8:	6041      	str	r1, [r0, #4]
 800a1ba:	4648      	mov	r0, r9
 800a1bc:	f000 ff56 	bl	800b06c <_Balloc>
 800a1c0:	4682      	mov	sl, r0
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d142      	bne.n	800a24c <_dtoa_r+0x2f4>
 800a1c6:	4b1e      	ldr	r3, [pc, #120]	@ (800a240 <_dtoa_r+0x2e8>)
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	f240 11af 	movw	r1, #431	@ 0x1af
 800a1ce:	e6da      	b.n	8009f86 <_dtoa_r+0x2e>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	e7e3      	b.n	800a19c <_dtoa_r+0x244>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	e7d5      	b.n	800a184 <_dtoa_r+0x22c>
 800a1d8:	2401      	movs	r4, #1
 800a1da:	2300      	movs	r3, #0
 800a1dc:	9307      	str	r3, [sp, #28]
 800a1de:	9409      	str	r4, [sp, #36]	@ 0x24
 800a1e0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f8cd b00c 	str.w	fp, [sp, #12]
 800a1ea:	2312      	movs	r3, #18
 800a1ec:	920c      	str	r2, [sp, #48]	@ 0x30
 800a1ee:	e7db      	b.n	800a1a8 <_dtoa_r+0x250>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1f4:	e7f4      	b.n	800a1e0 <_dtoa_r+0x288>
 800a1f6:	f04f 0b01 	mov.w	fp, #1
 800a1fa:	f8cd b00c 	str.w	fp, [sp, #12]
 800a1fe:	465b      	mov	r3, fp
 800a200:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a204:	e7d0      	b.n	800a1a8 <_dtoa_r+0x250>
 800a206:	3101      	adds	r1, #1
 800a208:	0052      	lsls	r2, r2, #1
 800a20a:	e7d1      	b.n	800a1b0 <_dtoa_r+0x258>
 800a20c:	f3af 8000 	nop.w
 800a210:	636f4361 	.word	0x636f4361
 800a214:	3fd287a7 	.word	0x3fd287a7
 800a218:	8b60c8b3 	.word	0x8b60c8b3
 800a21c:	3fc68a28 	.word	0x3fc68a28
 800a220:	509f79fb 	.word	0x509f79fb
 800a224:	3fd34413 	.word	0x3fd34413
 800a228:	0800c09d 	.word	0x0800c09d
 800a22c:	0800c0b4 	.word	0x0800c0b4
 800a230:	7ff00000 	.word	0x7ff00000
 800a234:	0800c06d 	.word	0x0800c06d
 800a238:	3ff80000 	.word	0x3ff80000
 800a23c:	0800c208 	.word	0x0800c208
 800a240:	0800c10c 	.word	0x0800c10c
 800a244:	0800c099 	.word	0x0800c099
 800a248:	0800c06c 	.word	0x0800c06c
 800a24c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a250:	6018      	str	r0, [r3, #0]
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	2b0e      	cmp	r3, #14
 800a256:	f200 80a1 	bhi.w	800a39c <_dtoa_r+0x444>
 800a25a:	2c00      	cmp	r4, #0
 800a25c:	f000 809e 	beq.w	800a39c <_dtoa_r+0x444>
 800a260:	2f00      	cmp	r7, #0
 800a262:	dd33      	ble.n	800a2cc <_dtoa_r+0x374>
 800a264:	4b9c      	ldr	r3, [pc, #624]	@ (800a4d8 <_dtoa_r+0x580>)
 800a266:	f007 020f 	and.w	r2, r7, #15
 800a26a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a26e:	ed93 7b00 	vldr	d7, [r3]
 800a272:	05f8      	lsls	r0, r7, #23
 800a274:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a278:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a27c:	d516      	bpl.n	800a2ac <_dtoa_r+0x354>
 800a27e:	4b97      	ldr	r3, [pc, #604]	@ (800a4dc <_dtoa_r+0x584>)
 800a280:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a284:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a288:	f7f6 fb10 	bl	80008ac <__aeabi_ddiv>
 800a28c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a290:	f004 040f 	and.w	r4, r4, #15
 800a294:	2603      	movs	r6, #3
 800a296:	4d91      	ldr	r5, [pc, #580]	@ (800a4dc <_dtoa_r+0x584>)
 800a298:	b954      	cbnz	r4, 800a2b0 <_dtoa_r+0x358>
 800a29a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a29e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2a2:	f7f6 fb03 	bl	80008ac <__aeabi_ddiv>
 800a2a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2aa:	e028      	b.n	800a2fe <_dtoa_r+0x3a6>
 800a2ac:	2602      	movs	r6, #2
 800a2ae:	e7f2      	b.n	800a296 <_dtoa_r+0x33e>
 800a2b0:	07e1      	lsls	r1, r4, #31
 800a2b2:	d508      	bpl.n	800a2c6 <_dtoa_r+0x36e>
 800a2b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a2b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2bc:	f7f6 f9cc 	bl	8000658 <__aeabi_dmul>
 800a2c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a2c4:	3601      	adds	r6, #1
 800a2c6:	1064      	asrs	r4, r4, #1
 800a2c8:	3508      	adds	r5, #8
 800a2ca:	e7e5      	b.n	800a298 <_dtoa_r+0x340>
 800a2cc:	f000 80af 	beq.w	800a42e <_dtoa_r+0x4d6>
 800a2d0:	427c      	negs	r4, r7
 800a2d2:	4b81      	ldr	r3, [pc, #516]	@ (800a4d8 <_dtoa_r+0x580>)
 800a2d4:	4d81      	ldr	r5, [pc, #516]	@ (800a4dc <_dtoa_r+0x584>)
 800a2d6:	f004 020f 	and.w	r2, r4, #15
 800a2da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a2e6:	f7f6 f9b7 	bl	8000658 <__aeabi_dmul>
 800a2ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2ee:	1124      	asrs	r4, r4, #4
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	2602      	movs	r6, #2
 800a2f4:	2c00      	cmp	r4, #0
 800a2f6:	f040 808f 	bne.w	800a418 <_dtoa_r+0x4c0>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1d3      	bne.n	800a2a6 <_dtoa_r+0x34e>
 800a2fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a300:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	f000 8094 	beq.w	800a432 <_dtoa_r+0x4da>
 800a30a:	4b75      	ldr	r3, [pc, #468]	@ (800a4e0 <_dtoa_r+0x588>)
 800a30c:	2200      	movs	r2, #0
 800a30e:	4620      	mov	r0, r4
 800a310:	4629      	mov	r1, r5
 800a312:	f7f6 fc13 	bl	8000b3c <__aeabi_dcmplt>
 800a316:	2800      	cmp	r0, #0
 800a318:	f000 808b 	beq.w	800a432 <_dtoa_r+0x4da>
 800a31c:	9b03      	ldr	r3, [sp, #12]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 8087 	beq.w	800a432 <_dtoa_r+0x4da>
 800a324:	f1bb 0f00 	cmp.w	fp, #0
 800a328:	dd34      	ble.n	800a394 <_dtoa_r+0x43c>
 800a32a:	4620      	mov	r0, r4
 800a32c:	4b6d      	ldr	r3, [pc, #436]	@ (800a4e4 <_dtoa_r+0x58c>)
 800a32e:	2200      	movs	r2, #0
 800a330:	4629      	mov	r1, r5
 800a332:	f7f6 f991 	bl	8000658 <__aeabi_dmul>
 800a336:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a33a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a33e:	3601      	adds	r6, #1
 800a340:	465c      	mov	r4, fp
 800a342:	4630      	mov	r0, r6
 800a344:	f7f6 f91e 	bl	8000584 <__aeabi_i2d>
 800a348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a34c:	f7f6 f984 	bl	8000658 <__aeabi_dmul>
 800a350:	4b65      	ldr	r3, [pc, #404]	@ (800a4e8 <_dtoa_r+0x590>)
 800a352:	2200      	movs	r2, #0
 800a354:	f7f5 ffca 	bl	80002ec <__adddf3>
 800a358:	4605      	mov	r5, r0
 800a35a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a35e:	2c00      	cmp	r4, #0
 800a360:	d16a      	bne.n	800a438 <_dtoa_r+0x4e0>
 800a362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a366:	4b61      	ldr	r3, [pc, #388]	@ (800a4ec <_dtoa_r+0x594>)
 800a368:	2200      	movs	r2, #0
 800a36a:	f7f5 ffbd 	bl	80002e8 <__aeabi_dsub>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a376:	462a      	mov	r2, r5
 800a378:	4633      	mov	r3, r6
 800a37a:	f7f6 fbfd 	bl	8000b78 <__aeabi_dcmpgt>
 800a37e:	2800      	cmp	r0, #0
 800a380:	f040 8298 	bne.w	800a8b4 <_dtoa_r+0x95c>
 800a384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a388:	462a      	mov	r2, r5
 800a38a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a38e:	f7f6 fbd5 	bl	8000b3c <__aeabi_dcmplt>
 800a392:	bb38      	cbnz	r0, 800a3e4 <_dtoa_r+0x48c>
 800a394:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a398:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a39c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f2c0 8157 	blt.w	800a652 <_dtoa_r+0x6fa>
 800a3a4:	2f0e      	cmp	r7, #14
 800a3a6:	f300 8154 	bgt.w	800a652 <_dtoa_r+0x6fa>
 800a3aa:	4b4b      	ldr	r3, [pc, #300]	@ (800a4d8 <_dtoa_r+0x580>)
 800a3ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3b0:	ed93 7b00 	vldr	d7, [r3]
 800a3b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	ed8d 7b00 	vstr	d7, [sp]
 800a3bc:	f280 80e5 	bge.w	800a58a <_dtoa_r+0x632>
 800a3c0:	9b03      	ldr	r3, [sp, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f300 80e1 	bgt.w	800a58a <_dtoa_r+0x632>
 800a3c8:	d10c      	bne.n	800a3e4 <_dtoa_r+0x48c>
 800a3ca:	4b48      	ldr	r3, [pc, #288]	@ (800a4ec <_dtoa_r+0x594>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	ec51 0b17 	vmov	r0, r1, d7
 800a3d2:	f7f6 f941 	bl	8000658 <__aeabi_dmul>
 800a3d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3da:	f7f6 fbc3 	bl	8000b64 <__aeabi_dcmpge>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	f000 8266 	beq.w	800a8b0 <_dtoa_r+0x958>
 800a3e4:	2400      	movs	r4, #0
 800a3e6:	4625      	mov	r5, r4
 800a3e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3ea:	4656      	mov	r6, sl
 800a3ec:	ea6f 0803 	mvn.w	r8, r3
 800a3f0:	2700      	movs	r7, #0
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	4648      	mov	r0, r9
 800a3f6:	f000 fe79 	bl	800b0ec <_Bfree>
 800a3fa:	2d00      	cmp	r5, #0
 800a3fc:	f000 80bd 	beq.w	800a57a <_dtoa_r+0x622>
 800a400:	b12f      	cbz	r7, 800a40e <_dtoa_r+0x4b6>
 800a402:	42af      	cmp	r7, r5
 800a404:	d003      	beq.n	800a40e <_dtoa_r+0x4b6>
 800a406:	4639      	mov	r1, r7
 800a408:	4648      	mov	r0, r9
 800a40a:	f000 fe6f 	bl	800b0ec <_Bfree>
 800a40e:	4629      	mov	r1, r5
 800a410:	4648      	mov	r0, r9
 800a412:	f000 fe6b 	bl	800b0ec <_Bfree>
 800a416:	e0b0      	b.n	800a57a <_dtoa_r+0x622>
 800a418:	07e2      	lsls	r2, r4, #31
 800a41a:	d505      	bpl.n	800a428 <_dtoa_r+0x4d0>
 800a41c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a420:	f7f6 f91a 	bl	8000658 <__aeabi_dmul>
 800a424:	3601      	adds	r6, #1
 800a426:	2301      	movs	r3, #1
 800a428:	1064      	asrs	r4, r4, #1
 800a42a:	3508      	adds	r5, #8
 800a42c:	e762      	b.n	800a2f4 <_dtoa_r+0x39c>
 800a42e:	2602      	movs	r6, #2
 800a430:	e765      	b.n	800a2fe <_dtoa_r+0x3a6>
 800a432:	9c03      	ldr	r4, [sp, #12]
 800a434:	46b8      	mov	r8, r7
 800a436:	e784      	b.n	800a342 <_dtoa_r+0x3ea>
 800a438:	4b27      	ldr	r3, [pc, #156]	@ (800a4d8 <_dtoa_r+0x580>)
 800a43a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a43c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a440:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a444:	4454      	add	r4, sl
 800a446:	2900      	cmp	r1, #0
 800a448:	d054      	beq.n	800a4f4 <_dtoa_r+0x59c>
 800a44a:	4929      	ldr	r1, [pc, #164]	@ (800a4f0 <_dtoa_r+0x598>)
 800a44c:	2000      	movs	r0, #0
 800a44e:	f7f6 fa2d 	bl	80008ac <__aeabi_ddiv>
 800a452:	4633      	mov	r3, r6
 800a454:	462a      	mov	r2, r5
 800a456:	f7f5 ff47 	bl	80002e8 <__aeabi_dsub>
 800a45a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a45e:	4656      	mov	r6, sl
 800a460:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a464:	f7f6 fba8 	bl	8000bb8 <__aeabi_d2iz>
 800a468:	4605      	mov	r5, r0
 800a46a:	f7f6 f88b 	bl	8000584 <__aeabi_i2d>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a476:	f7f5 ff37 	bl	80002e8 <__aeabi_dsub>
 800a47a:	3530      	adds	r5, #48	@ 0x30
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a484:	f806 5b01 	strb.w	r5, [r6], #1
 800a488:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a48c:	f7f6 fb56 	bl	8000b3c <__aeabi_dcmplt>
 800a490:	2800      	cmp	r0, #0
 800a492:	d172      	bne.n	800a57a <_dtoa_r+0x622>
 800a494:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a498:	4911      	ldr	r1, [pc, #68]	@ (800a4e0 <_dtoa_r+0x588>)
 800a49a:	2000      	movs	r0, #0
 800a49c:	f7f5 ff24 	bl	80002e8 <__aeabi_dsub>
 800a4a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a4a4:	f7f6 fb4a 	bl	8000b3c <__aeabi_dcmplt>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	f040 80b4 	bne.w	800a616 <_dtoa_r+0x6be>
 800a4ae:	42a6      	cmp	r6, r4
 800a4b0:	f43f af70 	beq.w	800a394 <_dtoa_r+0x43c>
 800a4b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a4b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a4e4 <_dtoa_r+0x58c>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f7f6 f8cc 	bl	8000658 <__aeabi_dmul>
 800a4c0:	4b08      	ldr	r3, [pc, #32]	@ (800a4e4 <_dtoa_r+0x58c>)
 800a4c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4cc:	f7f6 f8c4 	bl	8000658 <__aeabi_dmul>
 800a4d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4d4:	e7c4      	b.n	800a460 <_dtoa_r+0x508>
 800a4d6:	bf00      	nop
 800a4d8:	0800c208 	.word	0x0800c208
 800a4dc:	0800c1e0 	.word	0x0800c1e0
 800a4e0:	3ff00000 	.word	0x3ff00000
 800a4e4:	40240000 	.word	0x40240000
 800a4e8:	401c0000 	.word	0x401c0000
 800a4ec:	40140000 	.word	0x40140000
 800a4f0:	3fe00000 	.word	0x3fe00000
 800a4f4:	4631      	mov	r1, r6
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f7f6 f8ae 	bl	8000658 <__aeabi_dmul>
 800a4fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a500:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a502:	4656      	mov	r6, sl
 800a504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a508:	f7f6 fb56 	bl	8000bb8 <__aeabi_d2iz>
 800a50c:	4605      	mov	r5, r0
 800a50e:	f7f6 f839 	bl	8000584 <__aeabi_i2d>
 800a512:	4602      	mov	r2, r0
 800a514:	460b      	mov	r3, r1
 800a516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a51a:	f7f5 fee5 	bl	80002e8 <__aeabi_dsub>
 800a51e:	3530      	adds	r5, #48	@ 0x30
 800a520:	f806 5b01 	strb.w	r5, [r6], #1
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	42a6      	cmp	r6, r4
 800a52a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a52e:	f04f 0200 	mov.w	r2, #0
 800a532:	d124      	bne.n	800a57e <_dtoa_r+0x626>
 800a534:	4baf      	ldr	r3, [pc, #700]	@ (800a7f4 <_dtoa_r+0x89c>)
 800a536:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a53a:	f7f5 fed7 	bl	80002ec <__adddf3>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a546:	f7f6 fb17 	bl	8000b78 <__aeabi_dcmpgt>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d163      	bne.n	800a616 <_dtoa_r+0x6be>
 800a54e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a552:	49a8      	ldr	r1, [pc, #672]	@ (800a7f4 <_dtoa_r+0x89c>)
 800a554:	2000      	movs	r0, #0
 800a556:	f7f5 fec7 	bl	80002e8 <__aeabi_dsub>
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a562:	f7f6 faeb 	bl	8000b3c <__aeabi_dcmplt>
 800a566:	2800      	cmp	r0, #0
 800a568:	f43f af14 	beq.w	800a394 <_dtoa_r+0x43c>
 800a56c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a56e:	1e73      	subs	r3, r6, #1
 800a570:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a572:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a576:	2b30      	cmp	r3, #48	@ 0x30
 800a578:	d0f8      	beq.n	800a56c <_dtoa_r+0x614>
 800a57a:	4647      	mov	r7, r8
 800a57c:	e03b      	b.n	800a5f6 <_dtoa_r+0x69e>
 800a57e:	4b9e      	ldr	r3, [pc, #632]	@ (800a7f8 <_dtoa_r+0x8a0>)
 800a580:	f7f6 f86a 	bl	8000658 <__aeabi_dmul>
 800a584:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a588:	e7bc      	b.n	800a504 <_dtoa_r+0x5ac>
 800a58a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a58e:	4656      	mov	r6, sl
 800a590:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a594:	4620      	mov	r0, r4
 800a596:	4629      	mov	r1, r5
 800a598:	f7f6 f988 	bl	80008ac <__aeabi_ddiv>
 800a59c:	f7f6 fb0c 	bl	8000bb8 <__aeabi_d2iz>
 800a5a0:	4680      	mov	r8, r0
 800a5a2:	f7f5 ffef 	bl	8000584 <__aeabi_i2d>
 800a5a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5aa:	f7f6 f855 	bl	8000658 <__aeabi_dmul>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a5ba:	f7f5 fe95 	bl	80002e8 <__aeabi_dsub>
 800a5be:	f806 4b01 	strb.w	r4, [r6], #1
 800a5c2:	9d03      	ldr	r5, [sp, #12]
 800a5c4:	eba6 040a 	sub.w	r4, r6, sl
 800a5c8:	42a5      	cmp	r5, r4
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	d133      	bne.n	800a638 <_dtoa_r+0x6e0>
 800a5d0:	f7f5 fe8c 	bl	80002ec <__adddf3>
 800a5d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5d8:	4604      	mov	r4, r0
 800a5da:	460d      	mov	r5, r1
 800a5dc:	f7f6 facc 	bl	8000b78 <__aeabi_dcmpgt>
 800a5e0:	b9c0      	cbnz	r0, 800a614 <_dtoa_r+0x6bc>
 800a5e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	f7f6 fa9d 	bl	8000b28 <__aeabi_dcmpeq>
 800a5ee:	b110      	cbz	r0, 800a5f6 <_dtoa_r+0x69e>
 800a5f0:	f018 0f01 	tst.w	r8, #1
 800a5f4:	d10e      	bne.n	800a614 <_dtoa_r+0x6bc>
 800a5f6:	9902      	ldr	r1, [sp, #8]
 800a5f8:	4648      	mov	r0, r9
 800a5fa:	f000 fd77 	bl	800b0ec <_Bfree>
 800a5fe:	2300      	movs	r3, #0
 800a600:	7033      	strb	r3, [r6, #0]
 800a602:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a604:	3701      	adds	r7, #1
 800a606:	601f      	str	r7, [r3, #0]
 800a608:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f000 824b 	beq.w	800aaa6 <_dtoa_r+0xb4e>
 800a610:	601e      	str	r6, [r3, #0]
 800a612:	e248      	b.n	800aaa6 <_dtoa_r+0xb4e>
 800a614:	46b8      	mov	r8, r7
 800a616:	4633      	mov	r3, r6
 800a618:	461e      	mov	r6, r3
 800a61a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a61e:	2a39      	cmp	r2, #57	@ 0x39
 800a620:	d106      	bne.n	800a630 <_dtoa_r+0x6d8>
 800a622:	459a      	cmp	sl, r3
 800a624:	d1f8      	bne.n	800a618 <_dtoa_r+0x6c0>
 800a626:	2230      	movs	r2, #48	@ 0x30
 800a628:	f108 0801 	add.w	r8, r8, #1
 800a62c:	f88a 2000 	strb.w	r2, [sl]
 800a630:	781a      	ldrb	r2, [r3, #0]
 800a632:	3201      	adds	r2, #1
 800a634:	701a      	strb	r2, [r3, #0]
 800a636:	e7a0      	b.n	800a57a <_dtoa_r+0x622>
 800a638:	4b6f      	ldr	r3, [pc, #444]	@ (800a7f8 <_dtoa_r+0x8a0>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	f7f6 f80c 	bl	8000658 <__aeabi_dmul>
 800a640:	2200      	movs	r2, #0
 800a642:	2300      	movs	r3, #0
 800a644:	4604      	mov	r4, r0
 800a646:	460d      	mov	r5, r1
 800a648:	f7f6 fa6e 	bl	8000b28 <__aeabi_dcmpeq>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d09f      	beq.n	800a590 <_dtoa_r+0x638>
 800a650:	e7d1      	b.n	800a5f6 <_dtoa_r+0x69e>
 800a652:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a654:	2a00      	cmp	r2, #0
 800a656:	f000 80ea 	beq.w	800a82e <_dtoa_r+0x8d6>
 800a65a:	9a07      	ldr	r2, [sp, #28]
 800a65c:	2a01      	cmp	r2, #1
 800a65e:	f300 80cd 	bgt.w	800a7fc <_dtoa_r+0x8a4>
 800a662:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a664:	2a00      	cmp	r2, #0
 800a666:	f000 80c1 	beq.w	800a7ec <_dtoa_r+0x894>
 800a66a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a66e:	9c08      	ldr	r4, [sp, #32]
 800a670:	9e00      	ldr	r6, [sp, #0]
 800a672:	9a00      	ldr	r2, [sp, #0]
 800a674:	441a      	add	r2, r3
 800a676:	9200      	str	r2, [sp, #0]
 800a678:	9a06      	ldr	r2, [sp, #24]
 800a67a:	2101      	movs	r1, #1
 800a67c:	441a      	add	r2, r3
 800a67e:	4648      	mov	r0, r9
 800a680:	9206      	str	r2, [sp, #24]
 800a682:	f000 fde7 	bl	800b254 <__i2b>
 800a686:	4605      	mov	r5, r0
 800a688:	b166      	cbz	r6, 800a6a4 <_dtoa_r+0x74c>
 800a68a:	9b06      	ldr	r3, [sp, #24]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	dd09      	ble.n	800a6a4 <_dtoa_r+0x74c>
 800a690:	42b3      	cmp	r3, r6
 800a692:	9a00      	ldr	r2, [sp, #0]
 800a694:	bfa8      	it	ge
 800a696:	4633      	movge	r3, r6
 800a698:	1ad2      	subs	r2, r2, r3
 800a69a:	9200      	str	r2, [sp, #0]
 800a69c:	9a06      	ldr	r2, [sp, #24]
 800a69e:	1af6      	subs	r6, r6, r3
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	9306      	str	r3, [sp, #24]
 800a6a4:	9b08      	ldr	r3, [sp, #32]
 800a6a6:	b30b      	cbz	r3, 800a6ec <_dtoa_r+0x794>
 800a6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 80c6 	beq.w	800a83c <_dtoa_r+0x8e4>
 800a6b0:	2c00      	cmp	r4, #0
 800a6b2:	f000 80c0 	beq.w	800a836 <_dtoa_r+0x8de>
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	4622      	mov	r2, r4
 800a6ba:	4648      	mov	r0, r9
 800a6bc:	f000 fe82 	bl	800b3c4 <__pow5mult>
 800a6c0:	9a02      	ldr	r2, [sp, #8]
 800a6c2:	4601      	mov	r1, r0
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	4648      	mov	r0, r9
 800a6c8:	f000 fdda 	bl	800b280 <__multiply>
 800a6cc:	9902      	ldr	r1, [sp, #8]
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	4648      	mov	r0, r9
 800a6d2:	f000 fd0b 	bl	800b0ec <_Bfree>
 800a6d6:	9b08      	ldr	r3, [sp, #32]
 800a6d8:	1b1b      	subs	r3, r3, r4
 800a6da:	9308      	str	r3, [sp, #32]
 800a6dc:	f000 80b1 	beq.w	800a842 <_dtoa_r+0x8ea>
 800a6e0:	9a08      	ldr	r2, [sp, #32]
 800a6e2:	4641      	mov	r1, r8
 800a6e4:	4648      	mov	r0, r9
 800a6e6:	f000 fe6d 	bl	800b3c4 <__pow5mult>
 800a6ea:	9002      	str	r0, [sp, #8]
 800a6ec:	2101      	movs	r1, #1
 800a6ee:	4648      	mov	r0, r9
 800a6f0:	f000 fdb0 	bl	800b254 <__i2b>
 800a6f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f000 81d8 	beq.w	800aaae <_dtoa_r+0xb56>
 800a6fe:	461a      	mov	r2, r3
 800a700:	4601      	mov	r1, r0
 800a702:	4648      	mov	r0, r9
 800a704:	f000 fe5e 	bl	800b3c4 <__pow5mult>
 800a708:	9b07      	ldr	r3, [sp, #28]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	4604      	mov	r4, r0
 800a70e:	f300 809f 	bgt.w	800a850 <_dtoa_r+0x8f8>
 800a712:	9b04      	ldr	r3, [sp, #16]
 800a714:	2b00      	cmp	r3, #0
 800a716:	f040 8097 	bne.w	800a848 <_dtoa_r+0x8f0>
 800a71a:	9b05      	ldr	r3, [sp, #20]
 800a71c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a720:	2b00      	cmp	r3, #0
 800a722:	f040 8093 	bne.w	800a84c <_dtoa_r+0x8f4>
 800a726:	9b05      	ldr	r3, [sp, #20]
 800a728:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a72c:	0d1b      	lsrs	r3, r3, #20
 800a72e:	051b      	lsls	r3, r3, #20
 800a730:	b133      	cbz	r3, 800a740 <_dtoa_r+0x7e8>
 800a732:	9b00      	ldr	r3, [sp, #0]
 800a734:	3301      	adds	r3, #1
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	9b06      	ldr	r3, [sp, #24]
 800a73a:	3301      	adds	r3, #1
 800a73c:	9306      	str	r3, [sp, #24]
 800a73e:	2301      	movs	r3, #1
 800a740:	9308      	str	r3, [sp, #32]
 800a742:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 81b8 	beq.w	800aaba <_dtoa_r+0xb62>
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a750:	6918      	ldr	r0, [r3, #16]
 800a752:	f000 fd33 	bl	800b1bc <__hi0bits>
 800a756:	f1c0 0020 	rsb	r0, r0, #32
 800a75a:	9b06      	ldr	r3, [sp, #24]
 800a75c:	4418      	add	r0, r3
 800a75e:	f010 001f 	ands.w	r0, r0, #31
 800a762:	f000 8082 	beq.w	800a86a <_dtoa_r+0x912>
 800a766:	f1c0 0320 	rsb	r3, r0, #32
 800a76a:	2b04      	cmp	r3, #4
 800a76c:	dd73      	ble.n	800a856 <_dtoa_r+0x8fe>
 800a76e:	9b00      	ldr	r3, [sp, #0]
 800a770:	f1c0 001c 	rsb	r0, r0, #28
 800a774:	4403      	add	r3, r0
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	9b06      	ldr	r3, [sp, #24]
 800a77a:	4403      	add	r3, r0
 800a77c:	4406      	add	r6, r0
 800a77e:	9306      	str	r3, [sp, #24]
 800a780:	9b00      	ldr	r3, [sp, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	dd05      	ble.n	800a792 <_dtoa_r+0x83a>
 800a786:	9902      	ldr	r1, [sp, #8]
 800a788:	461a      	mov	r2, r3
 800a78a:	4648      	mov	r0, r9
 800a78c:	f000 fe74 	bl	800b478 <__lshift>
 800a790:	9002      	str	r0, [sp, #8]
 800a792:	9b06      	ldr	r3, [sp, #24]
 800a794:	2b00      	cmp	r3, #0
 800a796:	dd05      	ble.n	800a7a4 <_dtoa_r+0x84c>
 800a798:	4621      	mov	r1, r4
 800a79a:	461a      	mov	r2, r3
 800a79c:	4648      	mov	r0, r9
 800a79e:	f000 fe6b 	bl	800b478 <__lshift>
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d061      	beq.n	800a86e <_dtoa_r+0x916>
 800a7aa:	9802      	ldr	r0, [sp, #8]
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	f000 fecf 	bl	800b550 <__mcmp>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	da5b      	bge.n	800a86e <_dtoa_r+0x916>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	9902      	ldr	r1, [sp, #8]
 800a7ba:	220a      	movs	r2, #10
 800a7bc:	4648      	mov	r0, r9
 800a7be:	f000 fcb7 	bl	800b130 <__multadd>
 800a7c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7c4:	9002      	str	r0, [sp, #8]
 800a7c6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f000 8177 	beq.w	800aabe <_dtoa_r+0xb66>
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	220a      	movs	r2, #10
 800a7d6:	4648      	mov	r0, r9
 800a7d8:	f000 fcaa 	bl	800b130 <__multadd>
 800a7dc:	f1bb 0f00 	cmp.w	fp, #0
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	dc6f      	bgt.n	800a8c4 <_dtoa_r+0x96c>
 800a7e4:	9b07      	ldr	r3, [sp, #28]
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	dc49      	bgt.n	800a87e <_dtoa_r+0x926>
 800a7ea:	e06b      	b.n	800a8c4 <_dtoa_r+0x96c>
 800a7ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a7ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a7f2:	e73c      	b.n	800a66e <_dtoa_r+0x716>
 800a7f4:	3fe00000 	.word	0x3fe00000
 800a7f8:	40240000 	.word	0x40240000
 800a7fc:	9b03      	ldr	r3, [sp, #12]
 800a7fe:	1e5c      	subs	r4, r3, #1
 800a800:	9b08      	ldr	r3, [sp, #32]
 800a802:	42a3      	cmp	r3, r4
 800a804:	db09      	blt.n	800a81a <_dtoa_r+0x8c2>
 800a806:	1b1c      	subs	r4, r3, r4
 800a808:	9b03      	ldr	r3, [sp, #12]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f6bf af30 	bge.w	800a670 <_dtoa_r+0x718>
 800a810:	9b00      	ldr	r3, [sp, #0]
 800a812:	9a03      	ldr	r2, [sp, #12]
 800a814:	1a9e      	subs	r6, r3, r2
 800a816:	2300      	movs	r3, #0
 800a818:	e72b      	b.n	800a672 <_dtoa_r+0x71a>
 800a81a:	9b08      	ldr	r3, [sp, #32]
 800a81c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a81e:	9408      	str	r4, [sp, #32]
 800a820:	1ae3      	subs	r3, r4, r3
 800a822:	441a      	add	r2, r3
 800a824:	9e00      	ldr	r6, [sp, #0]
 800a826:	9b03      	ldr	r3, [sp, #12]
 800a828:	920d      	str	r2, [sp, #52]	@ 0x34
 800a82a:	2400      	movs	r4, #0
 800a82c:	e721      	b.n	800a672 <_dtoa_r+0x71a>
 800a82e:	9c08      	ldr	r4, [sp, #32]
 800a830:	9e00      	ldr	r6, [sp, #0]
 800a832:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a834:	e728      	b.n	800a688 <_dtoa_r+0x730>
 800a836:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a83a:	e751      	b.n	800a6e0 <_dtoa_r+0x788>
 800a83c:	9a08      	ldr	r2, [sp, #32]
 800a83e:	9902      	ldr	r1, [sp, #8]
 800a840:	e750      	b.n	800a6e4 <_dtoa_r+0x78c>
 800a842:	f8cd 8008 	str.w	r8, [sp, #8]
 800a846:	e751      	b.n	800a6ec <_dtoa_r+0x794>
 800a848:	2300      	movs	r3, #0
 800a84a:	e779      	b.n	800a740 <_dtoa_r+0x7e8>
 800a84c:	9b04      	ldr	r3, [sp, #16]
 800a84e:	e777      	b.n	800a740 <_dtoa_r+0x7e8>
 800a850:	2300      	movs	r3, #0
 800a852:	9308      	str	r3, [sp, #32]
 800a854:	e779      	b.n	800a74a <_dtoa_r+0x7f2>
 800a856:	d093      	beq.n	800a780 <_dtoa_r+0x828>
 800a858:	9a00      	ldr	r2, [sp, #0]
 800a85a:	331c      	adds	r3, #28
 800a85c:	441a      	add	r2, r3
 800a85e:	9200      	str	r2, [sp, #0]
 800a860:	9a06      	ldr	r2, [sp, #24]
 800a862:	441a      	add	r2, r3
 800a864:	441e      	add	r6, r3
 800a866:	9206      	str	r2, [sp, #24]
 800a868:	e78a      	b.n	800a780 <_dtoa_r+0x828>
 800a86a:	4603      	mov	r3, r0
 800a86c:	e7f4      	b.n	800a858 <_dtoa_r+0x900>
 800a86e:	9b03      	ldr	r3, [sp, #12]
 800a870:	2b00      	cmp	r3, #0
 800a872:	46b8      	mov	r8, r7
 800a874:	dc20      	bgt.n	800a8b8 <_dtoa_r+0x960>
 800a876:	469b      	mov	fp, r3
 800a878:	9b07      	ldr	r3, [sp, #28]
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	dd1e      	ble.n	800a8bc <_dtoa_r+0x964>
 800a87e:	f1bb 0f00 	cmp.w	fp, #0
 800a882:	f47f adb1 	bne.w	800a3e8 <_dtoa_r+0x490>
 800a886:	4621      	mov	r1, r4
 800a888:	465b      	mov	r3, fp
 800a88a:	2205      	movs	r2, #5
 800a88c:	4648      	mov	r0, r9
 800a88e:	f000 fc4f 	bl	800b130 <__multadd>
 800a892:	4601      	mov	r1, r0
 800a894:	4604      	mov	r4, r0
 800a896:	9802      	ldr	r0, [sp, #8]
 800a898:	f000 fe5a 	bl	800b550 <__mcmp>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	f77f ada3 	ble.w	800a3e8 <_dtoa_r+0x490>
 800a8a2:	4656      	mov	r6, sl
 800a8a4:	2331      	movs	r3, #49	@ 0x31
 800a8a6:	f806 3b01 	strb.w	r3, [r6], #1
 800a8aa:	f108 0801 	add.w	r8, r8, #1
 800a8ae:	e59f      	b.n	800a3f0 <_dtoa_r+0x498>
 800a8b0:	9c03      	ldr	r4, [sp, #12]
 800a8b2:	46b8      	mov	r8, r7
 800a8b4:	4625      	mov	r5, r4
 800a8b6:	e7f4      	b.n	800a8a2 <_dtoa_r+0x94a>
 800a8b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 8101 	beq.w	800aac6 <_dtoa_r+0xb6e>
 800a8c4:	2e00      	cmp	r6, #0
 800a8c6:	dd05      	ble.n	800a8d4 <_dtoa_r+0x97c>
 800a8c8:	4629      	mov	r1, r5
 800a8ca:	4632      	mov	r2, r6
 800a8cc:	4648      	mov	r0, r9
 800a8ce:	f000 fdd3 	bl	800b478 <__lshift>
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	9b08      	ldr	r3, [sp, #32]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d05c      	beq.n	800a994 <_dtoa_r+0xa3c>
 800a8da:	6869      	ldr	r1, [r5, #4]
 800a8dc:	4648      	mov	r0, r9
 800a8de:	f000 fbc5 	bl	800b06c <_Balloc>
 800a8e2:	4606      	mov	r6, r0
 800a8e4:	b928      	cbnz	r0, 800a8f2 <_dtoa_r+0x99a>
 800a8e6:	4b82      	ldr	r3, [pc, #520]	@ (800aaf0 <_dtoa_r+0xb98>)
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a8ee:	f7ff bb4a 	b.w	8009f86 <_dtoa_r+0x2e>
 800a8f2:	692a      	ldr	r2, [r5, #16]
 800a8f4:	3202      	adds	r2, #2
 800a8f6:	0092      	lsls	r2, r2, #2
 800a8f8:	f105 010c 	add.w	r1, r5, #12
 800a8fc:	300c      	adds	r0, #12
 800a8fe:	f7ff fa95 	bl	8009e2c <memcpy>
 800a902:	2201      	movs	r2, #1
 800a904:	4631      	mov	r1, r6
 800a906:	4648      	mov	r0, r9
 800a908:	f000 fdb6 	bl	800b478 <__lshift>
 800a90c:	f10a 0301 	add.w	r3, sl, #1
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	eb0a 030b 	add.w	r3, sl, fp
 800a916:	9308      	str	r3, [sp, #32]
 800a918:	9b04      	ldr	r3, [sp, #16]
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	462f      	mov	r7, r5
 800a920:	9306      	str	r3, [sp, #24]
 800a922:	4605      	mov	r5, r0
 800a924:	9b00      	ldr	r3, [sp, #0]
 800a926:	9802      	ldr	r0, [sp, #8]
 800a928:	4621      	mov	r1, r4
 800a92a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a92e:	f7ff fa8b 	bl	8009e48 <quorem>
 800a932:	4603      	mov	r3, r0
 800a934:	3330      	adds	r3, #48	@ 0x30
 800a936:	9003      	str	r0, [sp, #12]
 800a938:	4639      	mov	r1, r7
 800a93a:	9802      	ldr	r0, [sp, #8]
 800a93c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a93e:	f000 fe07 	bl	800b550 <__mcmp>
 800a942:	462a      	mov	r2, r5
 800a944:	9004      	str	r0, [sp, #16]
 800a946:	4621      	mov	r1, r4
 800a948:	4648      	mov	r0, r9
 800a94a:	f000 fe1d 	bl	800b588 <__mdiff>
 800a94e:	68c2      	ldr	r2, [r0, #12]
 800a950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a952:	4606      	mov	r6, r0
 800a954:	bb02      	cbnz	r2, 800a998 <_dtoa_r+0xa40>
 800a956:	4601      	mov	r1, r0
 800a958:	9802      	ldr	r0, [sp, #8]
 800a95a:	f000 fdf9 	bl	800b550 <__mcmp>
 800a95e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a960:	4602      	mov	r2, r0
 800a962:	4631      	mov	r1, r6
 800a964:	4648      	mov	r0, r9
 800a966:	920c      	str	r2, [sp, #48]	@ 0x30
 800a968:	9309      	str	r3, [sp, #36]	@ 0x24
 800a96a:	f000 fbbf 	bl	800b0ec <_Bfree>
 800a96e:	9b07      	ldr	r3, [sp, #28]
 800a970:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a972:	9e00      	ldr	r6, [sp, #0]
 800a974:	ea42 0103 	orr.w	r1, r2, r3
 800a978:	9b06      	ldr	r3, [sp, #24]
 800a97a:	4319      	orrs	r1, r3
 800a97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a97e:	d10d      	bne.n	800a99c <_dtoa_r+0xa44>
 800a980:	2b39      	cmp	r3, #57	@ 0x39
 800a982:	d027      	beq.n	800a9d4 <_dtoa_r+0xa7c>
 800a984:	9a04      	ldr	r2, [sp, #16]
 800a986:	2a00      	cmp	r2, #0
 800a988:	dd01      	ble.n	800a98e <_dtoa_r+0xa36>
 800a98a:	9b03      	ldr	r3, [sp, #12]
 800a98c:	3331      	adds	r3, #49	@ 0x31
 800a98e:	f88b 3000 	strb.w	r3, [fp]
 800a992:	e52e      	b.n	800a3f2 <_dtoa_r+0x49a>
 800a994:	4628      	mov	r0, r5
 800a996:	e7b9      	b.n	800a90c <_dtoa_r+0x9b4>
 800a998:	2201      	movs	r2, #1
 800a99a:	e7e2      	b.n	800a962 <_dtoa_r+0xa0a>
 800a99c:	9904      	ldr	r1, [sp, #16]
 800a99e:	2900      	cmp	r1, #0
 800a9a0:	db04      	blt.n	800a9ac <_dtoa_r+0xa54>
 800a9a2:	9807      	ldr	r0, [sp, #28]
 800a9a4:	4301      	orrs	r1, r0
 800a9a6:	9806      	ldr	r0, [sp, #24]
 800a9a8:	4301      	orrs	r1, r0
 800a9aa:	d120      	bne.n	800a9ee <_dtoa_r+0xa96>
 800a9ac:	2a00      	cmp	r2, #0
 800a9ae:	ddee      	ble.n	800a98e <_dtoa_r+0xa36>
 800a9b0:	9902      	ldr	r1, [sp, #8]
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	4648      	mov	r0, r9
 800a9b8:	f000 fd5e 	bl	800b478 <__lshift>
 800a9bc:	4621      	mov	r1, r4
 800a9be:	9002      	str	r0, [sp, #8]
 800a9c0:	f000 fdc6 	bl	800b550 <__mcmp>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	9b00      	ldr	r3, [sp, #0]
 800a9c8:	dc02      	bgt.n	800a9d0 <_dtoa_r+0xa78>
 800a9ca:	d1e0      	bne.n	800a98e <_dtoa_r+0xa36>
 800a9cc:	07da      	lsls	r2, r3, #31
 800a9ce:	d5de      	bpl.n	800a98e <_dtoa_r+0xa36>
 800a9d0:	2b39      	cmp	r3, #57	@ 0x39
 800a9d2:	d1da      	bne.n	800a98a <_dtoa_r+0xa32>
 800a9d4:	2339      	movs	r3, #57	@ 0x39
 800a9d6:	f88b 3000 	strb.w	r3, [fp]
 800a9da:	4633      	mov	r3, r6
 800a9dc:	461e      	mov	r6, r3
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a9e4:	2a39      	cmp	r2, #57	@ 0x39
 800a9e6:	d04e      	beq.n	800aa86 <_dtoa_r+0xb2e>
 800a9e8:	3201      	adds	r2, #1
 800a9ea:	701a      	strb	r2, [r3, #0]
 800a9ec:	e501      	b.n	800a3f2 <_dtoa_r+0x49a>
 800a9ee:	2a00      	cmp	r2, #0
 800a9f0:	dd03      	ble.n	800a9fa <_dtoa_r+0xaa2>
 800a9f2:	2b39      	cmp	r3, #57	@ 0x39
 800a9f4:	d0ee      	beq.n	800a9d4 <_dtoa_r+0xa7c>
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	e7c9      	b.n	800a98e <_dtoa_r+0xa36>
 800a9fa:	9a00      	ldr	r2, [sp, #0]
 800a9fc:	9908      	ldr	r1, [sp, #32]
 800a9fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa02:	428a      	cmp	r2, r1
 800aa04:	d028      	beq.n	800aa58 <_dtoa_r+0xb00>
 800aa06:	9902      	ldr	r1, [sp, #8]
 800aa08:	2300      	movs	r3, #0
 800aa0a:	220a      	movs	r2, #10
 800aa0c:	4648      	mov	r0, r9
 800aa0e:	f000 fb8f 	bl	800b130 <__multadd>
 800aa12:	42af      	cmp	r7, r5
 800aa14:	9002      	str	r0, [sp, #8]
 800aa16:	f04f 0300 	mov.w	r3, #0
 800aa1a:	f04f 020a 	mov.w	r2, #10
 800aa1e:	4639      	mov	r1, r7
 800aa20:	4648      	mov	r0, r9
 800aa22:	d107      	bne.n	800aa34 <_dtoa_r+0xadc>
 800aa24:	f000 fb84 	bl	800b130 <__multadd>
 800aa28:	4607      	mov	r7, r0
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	9b00      	ldr	r3, [sp, #0]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	e777      	b.n	800a924 <_dtoa_r+0x9cc>
 800aa34:	f000 fb7c 	bl	800b130 <__multadd>
 800aa38:	4629      	mov	r1, r5
 800aa3a:	4607      	mov	r7, r0
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	220a      	movs	r2, #10
 800aa40:	4648      	mov	r0, r9
 800aa42:	f000 fb75 	bl	800b130 <__multadd>
 800aa46:	4605      	mov	r5, r0
 800aa48:	e7f0      	b.n	800aa2c <_dtoa_r+0xad4>
 800aa4a:	f1bb 0f00 	cmp.w	fp, #0
 800aa4e:	bfcc      	ite	gt
 800aa50:	465e      	movgt	r6, fp
 800aa52:	2601      	movle	r6, #1
 800aa54:	4456      	add	r6, sl
 800aa56:	2700      	movs	r7, #0
 800aa58:	9902      	ldr	r1, [sp, #8]
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	4648      	mov	r0, r9
 800aa60:	f000 fd0a 	bl	800b478 <__lshift>
 800aa64:	4621      	mov	r1, r4
 800aa66:	9002      	str	r0, [sp, #8]
 800aa68:	f000 fd72 	bl	800b550 <__mcmp>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	dcb4      	bgt.n	800a9da <_dtoa_r+0xa82>
 800aa70:	d102      	bne.n	800aa78 <_dtoa_r+0xb20>
 800aa72:	9b00      	ldr	r3, [sp, #0]
 800aa74:	07db      	lsls	r3, r3, #31
 800aa76:	d4b0      	bmi.n	800a9da <_dtoa_r+0xa82>
 800aa78:	4633      	mov	r3, r6
 800aa7a:	461e      	mov	r6, r3
 800aa7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa80:	2a30      	cmp	r2, #48	@ 0x30
 800aa82:	d0fa      	beq.n	800aa7a <_dtoa_r+0xb22>
 800aa84:	e4b5      	b.n	800a3f2 <_dtoa_r+0x49a>
 800aa86:	459a      	cmp	sl, r3
 800aa88:	d1a8      	bne.n	800a9dc <_dtoa_r+0xa84>
 800aa8a:	2331      	movs	r3, #49	@ 0x31
 800aa8c:	f108 0801 	add.w	r8, r8, #1
 800aa90:	f88a 3000 	strb.w	r3, [sl]
 800aa94:	e4ad      	b.n	800a3f2 <_dtoa_r+0x49a>
 800aa96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa98:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800aaf4 <_dtoa_r+0xb9c>
 800aa9c:	b11b      	cbz	r3, 800aaa6 <_dtoa_r+0xb4e>
 800aa9e:	f10a 0308 	add.w	r3, sl, #8
 800aaa2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aaa4:	6013      	str	r3, [r2, #0]
 800aaa6:	4650      	mov	r0, sl
 800aaa8:	b017      	add	sp, #92	@ 0x5c
 800aaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaae:	9b07      	ldr	r3, [sp, #28]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	f77f ae2e 	ble.w	800a712 <_dtoa_r+0x7ba>
 800aab6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aab8:	9308      	str	r3, [sp, #32]
 800aaba:	2001      	movs	r0, #1
 800aabc:	e64d      	b.n	800a75a <_dtoa_r+0x802>
 800aabe:	f1bb 0f00 	cmp.w	fp, #0
 800aac2:	f77f aed9 	ble.w	800a878 <_dtoa_r+0x920>
 800aac6:	4656      	mov	r6, sl
 800aac8:	9802      	ldr	r0, [sp, #8]
 800aaca:	4621      	mov	r1, r4
 800aacc:	f7ff f9bc 	bl	8009e48 <quorem>
 800aad0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800aad4:	f806 3b01 	strb.w	r3, [r6], #1
 800aad8:	eba6 020a 	sub.w	r2, r6, sl
 800aadc:	4593      	cmp	fp, r2
 800aade:	ddb4      	ble.n	800aa4a <_dtoa_r+0xaf2>
 800aae0:	9902      	ldr	r1, [sp, #8]
 800aae2:	2300      	movs	r3, #0
 800aae4:	220a      	movs	r2, #10
 800aae6:	4648      	mov	r0, r9
 800aae8:	f000 fb22 	bl	800b130 <__multadd>
 800aaec:	9002      	str	r0, [sp, #8]
 800aaee:	e7eb      	b.n	800aac8 <_dtoa_r+0xb70>
 800aaf0:	0800c10c 	.word	0x0800c10c
 800aaf4:	0800c090 	.word	0x0800c090

0800aaf8 <__ssputs_r>:
 800aaf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aafc:	688e      	ldr	r6, [r1, #8]
 800aafe:	461f      	mov	r7, r3
 800ab00:	42be      	cmp	r6, r7
 800ab02:	680b      	ldr	r3, [r1, #0]
 800ab04:	4682      	mov	sl, r0
 800ab06:	460c      	mov	r4, r1
 800ab08:	4690      	mov	r8, r2
 800ab0a:	d82d      	bhi.n	800ab68 <__ssputs_r+0x70>
 800ab0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab14:	d026      	beq.n	800ab64 <__ssputs_r+0x6c>
 800ab16:	6965      	ldr	r5, [r4, #20]
 800ab18:	6909      	ldr	r1, [r1, #16]
 800ab1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab1e:	eba3 0901 	sub.w	r9, r3, r1
 800ab22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab26:	1c7b      	adds	r3, r7, #1
 800ab28:	444b      	add	r3, r9
 800ab2a:	106d      	asrs	r5, r5, #1
 800ab2c:	429d      	cmp	r5, r3
 800ab2e:	bf38      	it	cc
 800ab30:	461d      	movcc	r5, r3
 800ab32:	0553      	lsls	r3, r2, #21
 800ab34:	d527      	bpl.n	800ab86 <__ssputs_r+0x8e>
 800ab36:	4629      	mov	r1, r5
 800ab38:	f000 f960 	bl	800adfc <_malloc_r>
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	b360      	cbz	r0, 800ab9a <__ssputs_r+0xa2>
 800ab40:	6921      	ldr	r1, [r4, #16]
 800ab42:	464a      	mov	r2, r9
 800ab44:	f7ff f972 	bl	8009e2c <memcpy>
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab52:	81a3      	strh	r3, [r4, #12]
 800ab54:	6126      	str	r6, [r4, #16]
 800ab56:	6165      	str	r5, [r4, #20]
 800ab58:	444e      	add	r6, r9
 800ab5a:	eba5 0509 	sub.w	r5, r5, r9
 800ab5e:	6026      	str	r6, [r4, #0]
 800ab60:	60a5      	str	r5, [r4, #8]
 800ab62:	463e      	mov	r6, r7
 800ab64:	42be      	cmp	r6, r7
 800ab66:	d900      	bls.n	800ab6a <__ssputs_r+0x72>
 800ab68:	463e      	mov	r6, r7
 800ab6a:	6820      	ldr	r0, [r4, #0]
 800ab6c:	4632      	mov	r2, r6
 800ab6e:	4641      	mov	r1, r8
 800ab70:	f000 fe67 	bl	800b842 <memmove>
 800ab74:	68a3      	ldr	r3, [r4, #8]
 800ab76:	1b9b      	subs	r3, r3, r6
 800ab78:	60a3      	str	r3, [r4, #8]
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	4433      	add	r3, r6
 800ab7e:	6023      	str	r3, [r4, #0]
 800ab80:	2000      	movs	r0, #0
 800ab82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab86:	462a      	mov	r2, r5
 800ab88:	f000 fe2d 	bl	800b7e6 <_realloc_r>
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d1e0      	bne.n	800ab54 <__ssputs_r+0x5c>
 800ab92:	6921      	ldr	r1, [r4, #16]
 800ab94:	4650      	mov	r0, sl
 800ab96:	f000 fef7 	bl	800b988 <_free_r>
 800ab9a:	230c      	movs	r3, #12
 800ab9c:	f8ca 3000 	str.w	r3, [sl]
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aba6:	81a3      	strh	r3, [r4, #12]
 800aba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abac:	e7e9      	b.n	800ab82 <__ssputs_r+0x8a>
	...

0800abb0 <_svfiprintf_r>:
 800abb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	4698      	mov	r8, r3
 800abb6:	898b      	ldrh	r3, [r1, #12]
 800abb8:	061b      	lsls	r3, r3, #24
 800abba:	b09d      	sub	sp, #116	@ 0x74
 800abbc:	4607      	mov	r7, r0
 800abbe:	460d      	mov	r5, r1
 800abc0:	4614      	mov	r4, r2
 800abc2:	d510      	bpl.n	800abe6 <_svfiprintf_r+0x36>
 800abc4:	690b      	ldr	r3, [r1, #16]
 800abc6:	b973      	cbnz	r3, 800abe6 <_svfiprintf_r+0x36>
 800abc8:	2140      	movs	r1, #64	@ 0x40
 800abca:	f000 f917 	bl	800adfc <_malloc_r>
 800abce:	6028      	str	r0, [r5, #0]
 800abd0:	6128      	str	r0, [r5, #16]
 800abd2:	b930      	cbnz	r0, 800abe2 <_svfiprintf_r+0x32>
 800abd4:	230c      	movs	r3, #12
 800abd6:	603b      	str	r3, [r7, #0]
 800abd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abdc:	b01d      	add	sp, #116	@ 0x74
 800abde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe2:	2340      	movs	r3, #64	@ 0x40
 800abe4:	616b      	str	r3, [r5, #20]
 800abe6:	2300      	movs	r3, #0
 800abe8:	9309      	str	r3, [sp, #36]	@ 0x24
 800abea:	2320      	movs	r3, #32
 800abec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abf0:	f8cd 800c 	str.w	r8, [sp, #12]
 800abf4:	2330      	movs	r3, #48	@ 0x30
 800abf6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ad94 <_svfiprintf_r+0x1e4>
 800abfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abfe:	f04f 0901 	mov.w	r9, #1
 800ac02:	4623      	mov	r3, r4
 800ac04:	469a      	mov	sl, r3
 800ac06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac0a:	b10a      	cbz	r2, 800ac10 <_svfiprintf_r+0x60>
 800ac0c:	2a25      	cmp	r2, #37	@ 0x25
 800ac0e:	d1f9      	bne.n	800ac04 <_svfiprintf_r+0x54>
 800ac10:	ebba 0b04 	subs.w	fp, sl, r4
 800ac14:	d00b      	beq.n	800ac2e <_svfiprintf_r+0x7e>
 800ac16:	465b      	mov	r3, fp
 800ac18:	4622      	mov	r2, r4
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	f7ff ff6b 	bl	800aaf8 <__ssputs_r>
 800ac22:	3001      	adds	r0, #1
 800ac24:	f000 80a7 	beq.w	800ad76 <_svfiprintf_r+0x1c6>
 800ac28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac2a:	445a      	add	r2, fp
 800ac2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac2e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f000 809f 	beq.w	800ad76 <_svfiprintf_r+0x1c6>
 800ac38:	2300      	movs	r3, #0
 800ac3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac42:	f10a 0a01 	add.w	sl, sl, #1
 800ac46:	9304      	str	r3, [sp, #16]
 800ac48:	9307      	str	r3, [sp, #28]
 800ac4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac4e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac50:	4654      	mov	r4, sl
 800ac52:	2205      	movs	r2, #5
 800ac54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac58:	484e      	ldr	r0, [pc, #312]	@ (800ad94 <_svfiprintf_r+0x1e4>)
 800ac5a:	f7f5 fae9 	bl	8000230 <memchr>
 800ac5e:	9a04      	ldr	r2, [sp, #16]
 800ac60:	b9d8      	cbnz	r0, 800ac9a <_svfiprintf_r+0xea>
 800ac62:	06d0      	lsls	r0, r2, #27
 800ac64:	bf44      	itt	mi
 800ac66:	2320      	movmi	r3, #32
 800ac68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac6c:	0711      	lsls	r1, r2, #28
 800ac6e:	bf44      	itt	mi
 800ac70:	232b      	movmi	r3, #43	@ 0x2b
 800ac72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac76:	f89a 3000 	ldrb.w	r3, [sl]
 800ac7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac7c:	d015      	beq.n	800acaa <_svfiprintf_r+0xfa>
 800ac7e:	9a07      	ldr	r2, [sp, #28]
 800ac80:	4654      	mov	r4, sl
 800ac82:	2000      	movs	r0, #0
 800ac84:	f04f 0c0a 	mov.w	ip, #10
 800ac88:	4621      	mov	r1, r4
 800ac8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac8e:	3b30      	subs	r3, #48	@ 0x30
 800ac90:	2b09      	cmp	r3, #9
 800ac92:	d94b      	bls.n	800ad2c <_svfiprintf_r+0x17c>
 800ac94:	b1b0      	cbz	r0, 800acc4 <_svfiprintf_r+0x114>
 800ac96:	9207      	str	r2, [sp, #28]
 800ac98:	e014      	b.n	800acc4 <_svfiprintf_r+0x114>
 800ac9a:	eba0 0308 	sub.w	r3, r0, r8
 800ac9e:	fa09 f303 	lsl.w	r3, r9, r3
 800aca2:	4313      	orrs	r3, r2
 800aca4:	9304      	str	r3, [sp, #16]
 800aca6:	46a2      	mov	sl, r4
 800aca8:	e7d2      	b.n	800ac50 <_svfiprintf_r+0xa0>
 800acaa:	9b03      	ldr	r3, [sp, #12]
 800acac:	1d19      	adds	r1, r3, #4
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	9103      	str	r1, [sp, #12]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	bfbb      	ittet	lt
 800acb6:	425b      	neglt	r3, r3
 800acb8:	f042 0202 	orrlt.w	r2, r2, #2
 800acbc:	9307      	strge	r3, [sp, #28]
 800acbe:	9307      	strlt	r3, [sp, #28]
 800acc0:	bfb8      	it	lt
 800acc2:	9204      	strlt	r2, [sp, #16]
 800acc4:	7823      	ldrb	r3, [r4, #0]
 800acc6:	2b2e      	cmp	r3, #46	@ 0x2e
 800acc8:	d10a      	bne.n	800ace0 <_svfiprintf_r+0x130>
 800acca:	7863      	ldrb	r3, [r4, #1]
 800accc:	2b2a      	cmp	r3, #42	@ 0x2a
 800acce:	d132      	bne.n	800ad36 <_svfiprintf_r+0x186>
 800acd0:	9b03      	ldr	r3, [sp, #12]
 800acd2:	1d1a      	adds	r2, r3, #4
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	9203      	str	r2, [sp, #12]
 800acd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acdc:	3402      	adds	r4, #2
 800acde:	9305      	str	r3, [sp, #20]
 800ace0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ada4 <_svfiprintf_r+0x1f4>
 800ace4:	7821      	ldrb	r1, [r4, #0]
 800ace6:	2203      	movs	r2, #3
 800ace8:	4650      	mov	r0, sl
 800acea:	f7f5 faa1 	bl	8000230 <memchr>
 800acee:	b138      	cbz	r0, 800ad00 <_svfiprintf_r+0x150>
 800acf0:	9b04      	ldr	r3, [sp, #16]
 800acf2:	eba0 000a 	sub.w	r0, r0, sl
 800acf6:	2240      	movs	r2, #64	@ 0x40
 800acf8:	4082      	lsls	r2, r0
 800acfa:	4313      	orrs	r3, r2
 800acfc:	3401      	adds	r4, #1
 800acfe:	9304      	str	r3, [sp, #16]
 800ad00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad04:	4824      	ldr	r0, [pc, #144]	@ (800ad98 <_svfiprintf_r+0x1e8>)
 800ad06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad0a:	2206      	movs	r2, #6
 800ad0c:	f7f5 fa90 	bl	8000230 <memchr>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d036      	beq.n	800ad82 <_svfiprintf_r+0x1d2>
 800ad14:	4b21      	ldr	r3, [pc, #132]	@ (800ad9c <_svfiprintf_r+0x1ec>)
 800ad16:	bb1b      	cbnz	r3, 800ad60 <_svfiprintf_r+0x1b0>
 800ad18:	9b03      	ldr	r3, [sp, #12]
 800ad1a:	3307      	adds	r3, #7
 800ad1c:	f023 0307 	bic.w	r3, r3, #7
 800ad20:	3308      	adds	r3, #8
 800ad22:	9303      	str	r3, [sp, #12]
 800ad24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad26:	4433      	add	r3, r6
 800ad28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad2a:	e76a      	b.n	800ac02 <_svfiprintf_r+0x52>
 800ad2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad30:	460c      	mov	r4, r1
 800ad32:	2001      	movs	r0, #1
 800ad34:	e7a8      	b.n	800ac88 <_svfiprintf_r+0xd8>
 800ad36:	2300      	movs	r3, #0
 800ad38:	3401      	adds	r4, #1
 800ad3a:	9305      	str	r3, [sp, #20]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	f04f 0c0a 	mov.w	ip, #10
 800ad42:	4620      	mov	r0, r4
 800ad44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad48:	3a30      	subs	r2, #48	@ 0x30
 800ad4a:	2a09      	cmp	r2, #9
 800ad4c:	d903      	bls.n	800ad56 <_svfiprintf_r+0x1a6>
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0c6      	beq.n	800ace0 <_svfiprintf_r+0x130>
 800ad52:	9105      	str	r1, [sp, #20]
 800ad54:	e7c4      	b.n	800ace0 <_svfiprintf_r+0x130>
 800ad56:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e7f0      	b.n	800ad42 <_svfiprintf_r+0x192>
 800ad60:	ab03      	add	r3, sp, #12
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	462a      	mov	r2, r5
 800ad66:	4b0e      	ldr	r3, [pc, #56]	@ (800ada0 <_svfiprintf_r+0x1f0>)
 800ad68:	a904      	add	r1, sp, #16
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	f7fe fb76 	bl	800945c <_printf_float>
 800ad70:	1c42      	adds	r2, r0, #1
 800ad72:	4606      	mov	r6, r0
 800ad74:	d1d6      	bne.n	800ad24 <_svfiprintf_r+0x174>
 800ad76:	89ab      	ldrh	r3, [r5, #12]
 800ad78:	065b      	lsls	r3, r3, #25
 800ad7a:	f53f af2d 	bmi.w	800abd8 <_svfiprintf_r+0x28>
 800ad7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad80:	e72c      	b.n	800abdc <_svfiprintf_r+0x2c>
 800ad82:	ab03      	add	r3, sp, #12
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	462a      	mov	r2, r5
 800ad88:	4b05      	ldr	r3, [pc, #20]	@ (800ada0 <_svfiprintf_r+0x1f0>)
 800ad8a:	a904      	add	r1, sp, #16
 800ad8c:	4638      	mov	r0, r7
 800ad8e:	f7fe fdfd 	bl	800998c <_printf_i>
 800ad92:	e7ed      	b.n	800ad70 <_svfiprintf_r+0x1c0>
 800ad94:	0800c11d 	.word	0x0800c11d
 800ad98:	0800c127 	.word	0x0800c127
 800ad9c:	0800945d 	.word	0x0800945d
 800ada0:	0800aaf9 	.word	0x0800aaf9
 800ada4:	0800c123 	.word	0x0800c123

0800ada8 <malloc>:
 800ada8:	4b02      	ldr	r3, [pc, #8]	@ (800adb4 <malloc+0xc>)
 800adaa:	4601      	mov	r1, r0
 800adac:	6818      	ldr	r0, [r3, #0]
 800adae:	f000 b825 	b.w	800adfc <_malloc_r>
 800adb2:	bf00      	nop
 800adb4:	200003d4 	.word	0x200003d4

0800adb8 <sbrk_aligned>:
 800adb8:	b570      	push	{r4, r5, r6, lr}
 800adba:	4e0f      	ldr	r6, [pc, #60]	@ (800adf8 <sbrk_aligned+0x40>)
 800adbc:	460c      	mov	r4, r1
 800adbe:	6831      	ldr	r1, [r6, #0]
 800adc0:	4605      	mov	r5, r0
 800adc2:	b911      	cbnz	r1, 800adca <sbrk_aligned+0x12>
 800adc4:	f000 fd7c 	bl	800b8c0 <_sbrk_r>
 800adc8:	6030      	str	r0, [r6, #0]
 800adca:	4621      	mov	r1, r4
 800adcc:	4628      	mov	r0, r5
 800adce:	f000 fd77 	bl	800b8c0 <_sbrk_r>
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	d103      	bne.n	800adde <sbrk_aligned+0x26>
 800add6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800adda:	4620      	mov	r0, r4
 800addc:	bd70      	pop	{r4, r5, r6, pc}
 800adde:	1cc4      	adds	r4, r0, #3
 800ade0:	f024 0403 	bic.w	r4, r4, #3
 800ade4:	42a0      	cmp	r0, r4
 800ade6:	d0f8      	beq.n	800adda <sbrk_aligned+0x22>
 800ade8:	1a21      	subs	r1, r4, r0
 800adea:	4628      	mov	r0, r5
 800adec:	f000 fd68 	bl	800b8c0 <_sbrk_r>
 800adf0:	3001      	adds	r0, #1
 800adf2:	d1f2      	bne.n	800adda <sbrk_aligned+0x22>
 800adf4:	e7ef      	b.n	800add6 <sbrk_aligned+0x1e>
 800adf6:	bf00      	nop
 800adf8:	20000c60 	.word	0x20000c60

0800adfc <_malloc_r>:
 800adfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae00:	1ccd      	adds	r5, r1, #3
 800ae02:	f025 0503 	bic.w	r5, r5, #3
 800ae06:	3508      	adds	r5, #8
 800ae08:	2d0c      	cmp	r5, #12
 800ae0a:	bf38      	it	cc
 800ae0c:	250c      	movcc	r5, #12
 800ae0e:	2d00      	cmp	r5, #0
 800ae10:	4606      	mov	r6, r0
 800ae12:	db01      	blt.n	800ae18 <_malloc_r+0x1c>
 800ae14:	42a9      	cmp	r1, r5
 800ae16:	d904      	bls.n	800ae22 <_malloc_r+0x26>
 800ae18:	230c      	movs	r3, #12
 800ae1a:	6033      	str	r3, [r6, #0]
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aef8 <_malloc_r+0xfc>
 800ae26:	f000 f915 	bl	800b054 <__malloc_lock>
 800ae2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae2e:	461c      	mov	r4, r3
 800ae30:	bb44      	cbnz	r4, 800ae84 <_malloc_r+0x88>
 800ae32:	4629      	mov	r1, r5
 800ae34:	4630      	mov	r0, r6
 800ae36:	f7ff ffbf 	bl	800adb8 <sbrk_aligned>
 800ae3a:	1c43      	adds	r3, r0, #1
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	d158      	bne.n	800aef2 <_malloc_r+0xf6>
 800ae40:	f8d8 4000 	ldr.w	r4, [r8]
 800ae44:	4627      	mov	r7, r4
 800ae46:	2f00      	cmp	r7, #0
 800ae48:	d143      	bne.n	800aed2 <_malloc_r+0xd6>
 800ae4a:	2c00      	cmp	r4, #0
 800ae4c:	d04b      	beq.n	800aee6 <_malloc_r+0xea>
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	4639      	mov	r1, r7
 800ae52:	4630      	mov	r0, r6
 800ae54:	eb04 0903 	add.w	r9, r4, r3
 800ae58:	f000 fd32 	bl	800b8c0 <_sbrk_r>
 800ae5c:	4581      	cmp	r9, r0
 800ae5e:	d142      	bne.n	800aee6 <_malloc_r+0xea>
 800ae60:	6821      	ldr	r1, [r4, #0]
 800ae62:	1a6d      	subs	r5, r5, r1
 800ae64:	4629      	mov	r1, r5
 800ae66:	4630      	mov	r0, r6
 800ae68:	f7ff ffa6 	bl	800adb8 <sbrk_aligned>
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	d03a      	beq.n	800aee6 <_malloc_r+0xea>
 800ae70:	6823      	ldr	r3, [r4, #0]
 800ae72:	442b      	add	r3, r5
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	f8d8 3000 	ldr.w	r3, [r8]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	bb62      	cbnz	r2, 800aed8 <_malloc_r+0xdc>
 800ae7e:	f8c8 7000 	str.w	r7, [r8]
 800ae82:	e00f      	b.n	800aea4 <_malloc_r+0xa8>
 800ae84:	6822      	ldr	r2, [r4, #0]
 800ae86:	1b52      	subs	r2, r2, r5
 800ae88:	d420      	bmi.n	800aecc <_malloc_r+0xd0>
 800ae8a:	2a0b      	cmp	r2, #11
 800ae8c:	d917      	bls.n	800aebe <_malloc_r+0xc2>
 800ae8e:	1961      	adds	r1, r4, r5
 800ae90:	42a3      	cmp	r3, r4
 800ae92:	6025      	str	r5, [r4, #0]
 800ae94:	bf18      	it	ne
 800ae96:	6059      	strne	r1, [r3, #4]
 800ae98:	6863      	ldr	r3, [r4, #4]
 800ae9a:	bf08      	it	eq
 800ae9c:	f8c8 1000 	streq.w	r1, [r8]
 800aea0:	5162      	str	r2, [r4, r5]
 800aea2:	604b      	str	r3, [r1, #4]
 800aea4:	4630      	mov	r0, r6
 800aea6:	f000 f8db 	bl	800b060 <__malloc_unlock>
 800aeaa:	f104 000b 	add.w	r0, r4, #11
 800aeae:	1d23      	adds	r3, r4, #4
 800aeb0:	f020 0007 	bic.w	r0, r0, #7
 800aeb4:	1ac2      	subs	r2, r0, r3
 800aeb6:	bf1c      	itt	ne
 800aeb8:	1a1b      	subne	r3, r3, r0
 800aeba:	50a3      	strne	r3, [r4, r2]
 800aebc:	e7af      	b.n	800ae1e <_malloc_r+0x22>
 800aebe:	6862      	ldr	r2, [r4, #4]
 800aec0:	42a3      	cmp	r3, r4
 800aec2:	bf0c      	ite	eq
 800aec4:	f8c8 2000 	streq.w	r2, [r8]
 800aec8:	605a      	strne	r2, [r3, #4]
 800aeca:	e7eb      	b.n	800aea4 <_malloc_r+0xa8>
 800aecc:	4623      	mov	r3, r4
 800aece:	6864      	ldr	r4, [r4, #4]
 800aed0:	e7ae      	b.n	800ae30 <_malloc_r+0x34>
 800aed2:	463c      	mov	r4, r7
 800aed4:	687f      	ldr	r7, [r7, #4]
 800aed6:	e7b6      	b.n	800ae46 <_malloc_r+0x4a>
 800aed8:	461a      	mov	r2, r3
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	42a3      	cmp	r3, r4
 800aede:	d1fb      	bne.n	800aed8 <_malloc_r+0xdc>
 800aee0:	2300      	movs	r3, #0
 800aee2:	6053      	str	r3, [r2, #4]
 800aee4:	e7de      	b.n	800aea4 <_malloc_r+0xa8>
 800aee6:	230c      	movs	r3, #12
 800aee8:	6033      	str	r3, [r6, #0]
 800aeea:	4630      	mov	r0, r6
 800aeec:	f000 f8b8 	bl	800b060 <__malloc_unlock>
 800aef0:	e794      	b.n	800ae1c <_malloc_r+0x20>
 800aef2:	6005      	str	r5, [r0, #0]
 800aef4:	e7d6      	b.n	800aea4 <_malloc_r+0xa8>
 800aef6:	bf00      	nop
 800aef8:	20000c64 	.word	0x20000c64

0800aefc <__sflush_r>:
 800aefc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af04:	0716      	lsls	r6, r2, #28
 800af06:	4605      	mov	r5, r0
 800af08:	460c      	mov	r4, r1
 800af0a:	d454      	bmi.n	800afb6 <__sflush_r+0xba>
 800af0c:	684b      	ldr	r3, [r1, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	dc02      	bgt.n	800af18 <__sflush_r+0x1c>
 800af12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af14:	2b00      	cmp	r3, #0
 800af16:	dd48      	ble.n	800afaa <__sflush_r+0xae>
 800af18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af1a:	2e00      	cmp	r6, #0
 800af1c:	d045      	beq.n	800afaa <__sflush_r+0xae>
 800af1e:	2300      	movs	r3, #0
 800af20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af24:	682f      	ldr	r7, [r5, #0]
 800af26:	6a21      	ldr	r1, [r4, #32]
 800af28:	602b      	str	r3, [r5, #0]
 800af2a:	d030      	beq.n	800af8e <__sflush_r+0x92>
 800af2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af2e:	89a3      	ldrh	r3, [r4, #12]
 800af30:	0759      	lsls	r1, r3, #29
 800af32:	d505      	bpl.n	800af40 <__sflush_r+0x44>
 800af34:	6863      	ldr	r3, [r4, #4]
 800af36:	1ad2      	subs	r2, r2, r3
 800af38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af3a:	b10b      	cbz	r3, 800af40 <__sflush_r+0x44>
 800af3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af3e:	1ad2      	subs	r2, r2, r3
 800af40:	2300      	movs	r3, #0
 800af42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af44:	6a21      	ldr	r1, [r4, #32]
 800af46:	4628      	mov	r0, r5
 800af48:	47b0      	blx	r6
 800af4a:	1c43      	adds	r3, r0, #1
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	d106      	bne.n	800af5e <__sflush_r+0x62>
 800af50:	6829      	ldr	r1, [r5, #0]
 800af52:	291d      	cmp	r1, #29
 800af54:	d82b      	bhi.n	800afae <__sflush_r+0xb2>
 800af56:	4a2a      	ldr	r2, [pc, #168]	@ (800b000 <__sflush_r+0x104>)
 800af58:	40ca      	lsrs	r2, r1
 800af5a:	07d6      	lsls	r6, r2, #31
 800af5c:	d527      	bpl.n	800afae <__sflush_r+0xb2>
 800af5e:	2200      	movs	r2, #0
 800af60:	6062      	str	r2, [r4, #4]
 800af62:	04d9      	lsls	r1, r3, #19
 800af64:	6922      	ldr	r2, [r4, #16]
 800af66:	6022      	str	r2, [r4, #0]
 800af68:	d504      	bpl.n	800af74 <__sflush_r+0x78>
 800af6a:	1c42      	adds	r2, r0, #1
 800af6c:	d101      	bne.n	800af72 <__sflush_r+0x76>
 800af6e:	682b      	ldr	r3, [r5, #0]
 800af70:	b903      	cbnz	r3, 800af74 <__sflush_r+0x78>
 800af72:	6560      	str	r0, [r4, #84]	@ 0x54
 800af74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af76:	602f      	str	r7, [r5, #0]
 800af78:	b1b9      	cbz	r1, 800afaa <__sflush_r+0xae>
 800af7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af7e:	4299      	cmp	r1, r3
 800af80:	d002      	beq.n	800af88 <__sflush_r+0x8c>
 800af82:	4628      	mov	r0, r5
 800af84:	f000 fd00 	bl	800b988 <_free_r>
 800af88:	2300      	movs	r3, #0
 800af8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800af8c:	e00d      	b.n	800afaa <__sflush_r+0xae>
 800af8e:	2301      	movs	r3, #1
 800af90:	4628      	mov	r0, r5
 800af92:	47b0      	blx	r6
 800af94:	4602      	mov	r2, r0
 800af96:	1c50      	adds	r0, r2, #1
 800af98:	d1c9      	bne.n	800af2e <__sflush_r+0x32>
 800af9a:	682b      	ldr	r3, [r5, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d0c6      	beq.n	800af2e <__sflush_r+0x32>
 800afa0:	2b1d      	cmp	r3, #29
 800afa2:	d001      	beq.n	800afa8 <__sflush_r+0xac>
 800afa4:	2b16      	cmp	r3, #22
 800afa6:	d11e      	bne.n	800afe6 <__sflush_r+0xea>
 800afa8:	602f      	str	r7, [r5, #0]
 800afaa:	2000      	movs	r0, #0
 800afac:	e022      	b.n	800aff4 <__sflush_r+0xf8>
 800afae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afb2:	b21b      	sxth	r3, r3
 800afb4:	e01b      	b.n	800afee <__sflush_r+0xf2>
 800afb6:	690f      	ldr	r7, [r1, #16]
 800afb8:	2f00      	cmp	r7, #0
 800afba:	d0f6      	beq.n	800afaa <__sflush_r+0xae>
 800afbc:	0793      	lsls	r3, r2, #30
 800afbe:	680e      	ldr	r6, [r1, #0]
 800afc0:	bf08      	it	eq
 800afc2:	694b      	ldreq	r3, [r1, #20]
 800afc4:	600f      	str	r7, [r1, #0]
 800afc6:	bf18      	it	ne
 800afc8:	2300      	movne	r3, #0
 800afca:	eba6 0807 	sub.w	r8, r6, r7
 800afce:	608b      	str	r3, [r1, #8]
 800afd0:	f1b8 0f00 	cmp.w	r8, #0
 800afd4:	dde9      	ble.n	800afaa <__sflush_r+0xae>
 800afd6:	6a21      	ldr	r1, [r4, #32]
 800afd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800afda:	4643      	mov	r3, r8
 800afdc:	463a      	mov	r2, r7
 800afde:	4628      	mov	r0, r5
 800afe0:	47b0      	blx	r6
 800afe2:	2800      	cmp	r0, #0
 800afe4:	dc08      	bgt.n	800aff8 <__sflush_r+0xfc>
 800afe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afee:	81a3      	strh	r3, [r4, #12]
 800aff0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff8:	4407      	add	r7, r0
 800affa:	eba8 0800 	sub.w	r8, r8, r0
 800affe:	e7e7      	b.n	800afd0 <__sflush_r+0xd4>
 800b000:	20400001 	.word	0x20400001

0800b004 <_fflush_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	690b      	ldr	r3, [r1, #16]
 800b008:	4605      	mov	r5, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	b913      	cbnz	r3, 800b014 <_fflush_r+0x10>
 800b00e:	2500      	movs	r5, #0
 800b010:	4628      	mov	r0, r5
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	b118      	cbz	r0, 800b01e <_fflush_r+0x1a>
 800b016:	6a03      	ldr	r3, [r0, #32]
 800b018:	b90b      	cbnz	r3, 800b01e <_fflush_r+0x1a>
 800b01a:	f7fe fe97 	bl	8009d4c <__sinit>
 800b01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d0f3      	beq.n	800b00e <_fflush_r+0xa>
 800b026:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b028:	07d0      	lsls	r0, r2, #31
 800b02a:	d404      	bmi.n	800b036 <_fflush_r+0x32>
 800b02c:	0599      	lsls	r1, r3, #22
 800b02e:	d402      	bmi.n	800b036 <_fflush_r+0x32>
 800b030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b032:	f7fe fef4 	bl	8009e1e <__retarget_lock_acquire_recursive>
 800b036:	4628      	mov	r0, r5
 800b038:	4621      	mov	r1, r4
 800b03a:	f7ff ff5f 	bl	800aefc <__sflush_r>
 800b03e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b040:	07da      	lsls	r2, r3, #31
 800b042:	4605      	mov	r5, r0
 800b044:	d4e4      	bmi.n	800b010 <_fflush_r+0xc>
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	059b      	lsls	r3, r3, #22
 800b04a:	d4e1      	bmi.n	800b010 <_fflush_r+0xc>
 800b04c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b04e:	f7fe fee7 	bl	8009e20 <__retarget_lock_release_recursive>
 800b052:	e7dd      	b.n	800b010 <_fflush_r+0xc>

0800b054 <__malloc_lock>:
 800b054:	4801      	ldr	r0, [pc, #4]	@ (800b05c <__malloc_lock+0x8>)
 800b056:	f7fe bee2 	b.w	8009e1e <__retarget_lock_acquire_recursive>
 800b05a:	bf00      	nop
 800b05c:	20000c5c 	.word	0x20000c5c

0800b060 <__malloc_unlock>:
 800b060:	4801      	ldr	r0, [pc, #4]	@ (800b068 <__malloc_unlock+0x8>)
 800b062:	f7fe bedd 	b.w	8009e20 <__retarget_lock_release_recursive>
 800b066:	bf00      	nop
 800b068:	20000c5c 	.word	0x20000c5c

0800b06c <_Balloc>:
 800b06c:	b570      	push	{r4, r5, r6, lr}
 800b06e:	69c6      	ldr	r6, [r0, #28]
 800b070:	4604      	mov	r4, r0
 800b072:	460d      	mov	r5, r1
 800b074:	b976      	cbnz	r6, 800b094 <_Balloc+0x28>
 800b076:	2010      	movs	r0, #16
 800b078:	f7ff fe96 	bl	800ada8 <malloc>
 800b07c:	4602      	mov	r2, r0
 800b07e:	61e0      	str	r0, [r4, #28]
 800b080:	b920      	cbnz	r0, 800b08c <_Balloc+0x20>
 800b082:	4b18      	ldr	r3, [pc, #96]	@ (800b0e4 <_Balloc+0x78>)
 800b084:	4818      	ldr	r0, [pc, #96]	@ (800b0e8 <_Balloc+0x7c>)
 800b086:	216b      	movs	r1, #107	@ 0x6b
 800b088:	f000 fc4c 	bl	800b924 <__assert_func>
 800b08c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b090:	6006      	str	r6, [r0, #0]
 800b092:	60c6      	str	r6, [r0, #12]
 800b094:	69e6      	ldr	r6, [r4, #28]
 800b096:	68f3      	ldr	r3, [r6, #12]
 800b098:	b183      	cbz	r3, 800b0bc <_Balloc+0x50>
 800b09a:	69e3      	ldr	r3, [r4, #28]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0a2:	b9b8      	cbnz	r0, 800b0d4 <_Balloc+0x68>
 800b0a4:	2101      	movs	r1, #1
 800b0a6:	fa01 f605 	lsl.w	r6, r1, r5
 800b0aa:	1d72      	adds	r2, r6, #5
 800b0ac:	0092      	lsls	r2, r2, #2
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 fc56 	bl	800b960 <_calloc_r>
 800b0b4:	b160      	cbz	r0, 800b0d0 <_Balloc+0x64>
 800b0b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0ba:	e00e      	b.n	800b0da <_Balloc+0x6e>
 800b0bc:	2221      	movs	r2, #33	@ 0x21
 800b0be:	2104      	movs	r1, #4
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f000 fc4d 	bl	800b960 <_calloc_r>
 800b0c6:	69e3      	ldr	r3, [r4, #28]
 800b0c8:	60f0      	str	r0, [r6, #12]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d1e4      	bne.n	800b09a <_Balloc+0x2e>
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	bd70      	pop	{r4, r5, r6, pc}
 800b0d4:	6802      	ldr	r2, [r0, #0]
 800b0d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0e0:	e7f7      	b.n	800b0d2 <_Balloc+0x66>
 800b0e2:	bf00      	nop
 800b0e4:	0800c09d 	.word	0x0800c09d
 800b0e8:	0800c12e 	.word	0x0800c12e

0800b0ec <_Bfree>:
 800b0ec:	b570      	push	{r4, r5, r6, lr}
 800b0ee:	69c6      	ldr	r6, [r0, #28]
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	b976      	cbnz	r6, 800b114 <_Bfree+0x28>
 800b0f6:	2010      	movs	r0, #16
 800b0f8:	f7ff fe56 	bl	800ada8 <malloc>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	61e8      	str	r0, [r5, #28]
 800b100:	b920      	cbnz	r0, 800b10c <_Bfree+0x20>
 800b102:	4b09      	ldr	r3, [pc, #36]	@ (800b128 <_Bfree+0x3c>)
 800b104:	4809      	ldr	r0, [pc, #36]	@ (800b12c <_Bfree+0x40>)
 800b106:	218f      	movs	r1, #143	@ 0x8f
 800b108:	f000 fc0c 	bl	800b924 <__assert_func>
 800b10c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b110:	6006      	str	r6, [r0, #0]
 800b112:	60c6      	str	r6, [r0, #12]
 800b114:	b13c      	cbz	r4, 800b126 <_Bfree+0x3a>
 800b116:	69eb      	ldr	r3, [r5, #28]
 800b118:	6862      	ldr	r2, [r4, #4]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b120:	6021      	str	r1, [r4, #0]
 800b122:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b126:	bd70      	pop	{r4, r5, r6, pc}
 800b128:	0800c09d 	.word	0x0800c09d
 800b12c:	0800c12e 	.word	0x0800c12e

0800b130 <__multadd>:
 800b130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b134:	690d      	ldr	r5, [r1, #16]
 800b136:	4607      	mov	r7, r0
 800b138:	460c      	mov	r4, r1
 800b13a:	461e      	mov	r6, r3
 800b13c:	f101 0c14 	add.w	ip, r1, #20
 800b140:	2000      	movs	r0, #0
 800b142:	f8dc 3000 	ldr.w	r3, [ip]
 800b146:	b299      	uxth	r1, r3
 800b148:	fb02 6101 	mla	r1, r2, r1, r6
 800b14c:	0c1e      	lsrs	r6, r3, #16
 800b14e:	0c0b      	lsrs	r3, r1, #16
 800b150:	fb02 3306 	mla	r3, r2, r6, r3
 800b154:	b289      	uxth	r1, r1
 800b156:	3001      	adds	r0, #1
 800b158:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b15c:	4285      	cmp	r5, r0
 800b15e:	f84c 1b04 	str.w	r1, [ip], #4
 800b162:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b166:	dcec      	bgt.n	800b142 <__multadd+0x12>
 800b168:	b30e      	cbz	r6, 800b1ae <__multadd+0x7e>
 800b16a:	68a3      	ldr	r3, [r4, #8]
 800b16c:	42ab      	cmp	r3, r5
 800b16e:	dc19      	bgt.n	800b1a4 <__multadd+0x74>
 800b170:	6861      	ldr	r1, [r4, #4]
 800b172:	4638      	mov	r0, r7
 800b174:	3101      	adds	r1, #1
 800b176:	f7ff ff79 	bl	800b06c <_Balloc>
 800b17a:	4680      	mov	r8, r0
 800b17c:	b928      	cbnz	r0, 800b18a <__multadd+0x5a>
 800b17e:	4602      	mov	r2, r0
 800b180:	4b0c      	ldr	r3, [pc, #48]	@ (800b1b4 <__multadd+0x84>)
 800b182:	480d      	ldr	r0, [pc, #52]	@ (800b1b8 <__multadd+0x88>)
 800b184:	21ba      	movs	r1, #186	@ 0xba
 800b186:	f000 fbcd 	bl	800b924 <__assert_func>
 800b18a:	6922      	ldr	r2, [r4, #16]
 800b18c:	3202      	adds	r2, #2
 800b18e:	f104 010c 	add.w	r1, r4, #12
 800b192:	0092      	lsls	r2, r2, #2
 800b194:	300c      	adds	r0, #12
 800b196:	f7fe fe49 	bl	8009e2c <memcpy>
 800b19a:	4621      	mov	r1, r4
 800b19c:	4638      	mov	r0, r7
 800b19e:	f7ff ffa5 	bl	800b0ec <_Bfree>
 800b1a2:	4644      	mov	r4, r8
 800b1a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b1a8:	3501      	adds	r5, #1
 800b1aa:	615e      	str	r6, [r3, #20]
 800b1ac:	6125      	str	r5, [r4, #16]
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b4:	0800c10c 	.word	0x0800c10c
 800b1b8:	0800c12e 	.word	0x0800c12e

0800b1bc <__hi0bits>:
 800b1bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	bf36      	itet	cc
 800b1c4:	0403      	lslcc	r3, r0, #16
 800b1c6:	2000      	movcs	r0, #0
 800b1c8:	2010      	movcc	r0, #16
 800b1ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1ce:	bf3c      	itt	cc
 800b1d0:	021b      	lslcc	r3, r3, #8
 800b1d2:	3008      	addcc	r0, #8
 800b1d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1d8:	bf3c      	itt	cc
 800b1da:	011b      	lslcc	r3, r3, #4
 800b1dc:	3004      	addcc	r0, #4
 800b1de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1e2:	bf3c      	itt	cc
 800b1e4:	009b      	lslcc	r3, r3, #2
 800b1e6:	3002      	addcc	r0, #2
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	db05      	blt.n	800b1f8 <__hi0bits+0x3c>
 800b1ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b1f0:	f100 0001 	add.w	r0, r0, #1
 800b1f4:	bf08      	it	eq
 800b1f6:	2020      	moveq	r0, #32
 800b1f8:	4770      	bx	lr

0800b1fa <__lo0bits>:
 800b1fa:	6803      	ldr	r3, [r0, #0]
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	f013 0007 	ands.w	r0, r3, #7
 800b202:	d00b      	beq.n	800b21c <__lo0bits+0x22>
 800b204:	07d9      	lsls	r1, r3, #31
 800b206:	d421      	bmi.n	800b24c <__lo0bits+0x52>
 800b208:	0798      	lsls	r0, r3, #30
 800b20a:	bf49      	itett	mi
 800b20c:	085b      	lsrmi	r3, r3, #1
 800b20e:	089b      	lsrpl	r3, r3, #2
 800b210:	2001      	movmi	r0, #1
 800b212:	6013      	strmi	r3, [r2, #0]
 800b214:	bf5c      	itt	pl
 800b216:	6013      	strpl	r3, [r2, #0]
 800b218:	2002      	movpl	r0, #2
 800b21a:	4770      	bx	lr
 800b21c:	b299      	uxth	r1, r3
 800b21e:	b909      	cbnz	r1, 800b224 <__lo0bits+0x2a>
 800b220:	0c1b      	lsrs	r3, r3, #16
 800b222:	2010      	movs	r0, #16
 800b224:	b2d9      	uxtb	r1, r3
 800b226:	b909      	cbnz	r1, 800b22c <__lo0bits+0x32>
 800b228:	3008      	adds	r0, #8
 800b22a:	0a1b      	lsrs	r3, r3, #8
 800b22c:	0719      	lsls	r1, r3, #28
 800b22e:	bf04      	itt	eq
 800b230:	091b      	lsreq	r3, r3, #4
 800b232:	3004      	addeq	r0, #4
 800b234:	0799      	lsls	r1, r3, #30
 800b236:	bf04      	itt	eq
 800b238:	089b      	lsreq	r3, r3, #2
 800b23a:	3002      	addeq	r0, #2
 800b23c:	07d9      	lsls	r1, r3, #31
 800b23e:	d403      	bmi.n	800b248 <__lo0bits+0x4e>
 800b240:	085b      	lsrs	r3, r3, #1
 800b242:	f100 0001 	add.w	r0, r0, #1
 800b246:	d003      	beq.n	800b250 <__lo0bits+0x56>
 800b248:	6013      	str	r3, [r2, #0]
 800b24a:	4770      	bx	lr
 800b24c:	2000      	movs	r0, #0
 800b24e:	4770      	bx	lr
 800b250:	2020      	movs	r0, #32
 800b252:	4770      	bx	lr

0800b254 <__i2b>:
 800b254:	b510      	push	{r4, lr}
 800b256:	460c      	mov	r4, r1
 800b258:	2101      	movs	r1, #1
 800b25a:	f7ff ff07 	bl	800b06c <_Balloc>
 800b25e:	4602      	mov	r2, r0
 800b260:	b928      	cbnz	r0, 800b26e <__i2b+0x1a>
 800b262:	4b05      	ldr	r3, [pc, #20]	@ (800b278 <__i2b+0x24>)
 800b264:	4805      	ldr	r0, [pc, #20]	@ (800b27c <__i2b+0x28>)
 800b266:	f240 1145 	movw	r1, #325	@ 0x145
 800b26a:	f000 fb5b 	bl	800b924 <__assert_func>
 800b26e:	2301      	movs	r3, #1
 800b270:	6144      	str	r4, [r0, #20]
 800b272:	6103      	str	r3, [r0, #16]
 800b274:	bd10      	pop	{r4, pc}
 800b276:	bf00      	nop
 800b278:	0800c10c 	.word	0x0800c10c
 800b27c:	0800c12e 	.word	0x0800c12e

0800b280 <__multiply>:
 800b280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	4617      	mov	r7, r2
 800b286:	690a      	ldr	r2, [r1, #16]
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	bfa8      	it	ge
 800b28e:	463b      	movge	r3, r7
 800b290:	4689      	mov	r9, r1
 800b292:	bfa4      	itt	ge
 800b294:	460f      	movge	r7, r1
 800b296:	4699      	movge	r9, r3
 800b298:	693d      	ldr	r5, [r7, #16]
 800b29a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	6879      	ldr	r1, [r7, #4]
 800b2a2:	eb05 060a 	add.w	r6, r5, sl
 800b2a6:	42b3      	cmp	r3, r6
 800b2a8:	b085      	sub	sp, #20
 800b2aa:	bfb8      	it	lt
 800b2ac:	3101      	addlt	r1, #1
 800b2ae:	f7ff fedd 	bl	800b06c <_Balloc>
 800b2b2:	b930      	cbnz	r0, 800b2c2 <__multiply+0x42>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	4b41      	ldr	r3, [pc, #260]	@ (800b3bc <__multiply+0x13c>)
 800b2b8:	4841      	ldr	r0, [pc, #260]	@ (800b3c0 <__multiply+0x140>)
 800b2ba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b2be:	f000 fb31 	bl	800b924 <__assert_func>
 800b2c2:	f100 0414 	add.w	r4, r0, #20
 800b2c6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b2ca:	4623      	mov	r3, r4
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	4573      	cmp	r3, lr
 800b2d0:	d320      	bcc.n	800b314 <__multiply+0x94>
 800b2d2:	f107 0814 	add.w	r8, r7, #20
 800b2d6:	f109 0114 	add.w	r1, r9, #20
 800b2da:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b2de:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b2e2:	9302      	str	r3, [sp, #8]
 800b2e4:	1beb      	subs	r3, r5, r7
 800b2e6:	3b15      	subs	r3, #21
 800b2e8:	f023 0303 	bic.w	r3, r3, #3
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	3715      	adds	r7, #21
 800b2f0:	42bd      	cmp	r5, r7
 800b2f2:	bf38      	it	cc
 800b2f4:	2304      	movcc	r3, #4
 800b2f6:	9301      	str	r3, [sp, #4]
 800b2f8:	9b02      	ldr	r3, [sp, #8]
 800b2fa:	9103      	str	r1, [sp, #12]
 800b2fc:	428b      	cmp	r3, r1
 800b2fe:	d80c      	bhi.n	800b31a <__multiply+0x9a>
 800b300:	2e00      	cmp	r6, #0
 800b302:	dd03      	ble.n	800b30c <__multiply+0x8c>
 800b304:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d055      	beq.n	800b3b8 <__multiply+0x138>
 800b30c:	6106      	str	r6, [r0, #16]
 800b30e:	b005      	add	sp, #20
 800b310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b314:	f843 2b04 	str.w	r2, [r3], #4
 800b318:	e7d9      	b.n	800b2ce <__multiply+0x4e>
 800b31a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b31e:	f1ba 0f00 	cmp.w	sl, #0
 800b322:	d01f      	beq.n	800b364 <__multiply+0xe4>
 800b324:	46c4      	mov	ip, r8
 800b326:	46a1      	mov	r9, r4
 800b328:	2700      	movs	r7, #0
 800b32a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b32e:	f8d9 3000 	ldr.w	r3, [r9]
 800b332:	fa1f fb82 	uxth.w	fp, r2
 800b336:	b29b      	uxth	r3, r3
 800b338:	fb0a 330b 	mla	r3, sl, fp, r3
 800b33c:	443b      	add	r3, r7
 800b33e:	f8d9 7000 	ldr.w	r7, [r9]
 800b342:	0c12      	lsrs	r2, r2, #16
 800b344:	0c3f      	lsrs	r7, r7, #16
 800b346:	fb0a 7202 	mla	r2, sl, r2, r7
 800b34a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b34e:	b29b      	uxth	r3, r3
 800b350:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b354:	4565      	cmp	r5, ip
 800b356:	f849 3b04 	str.w	r3, [r9], #4
 800b35a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b35e:	d8e4      	bhi.n	800b32a <__multiply+0xaa>
 800b360:	9b01      	ldr	r3, [sp, #4]
 800b362:	50e7      	str	r7, [r4, r3]
 800b364:	9b03      	ldr	r3, [sp, #12]
 800b366:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b36a:	3104      	adds	r1, #4
 800b36c:	f1b9 0f00 	cmp.w	r9, #0
 800b370:	d020      	beq.n	800b3b4 <__multiply+0x134>
 800b372:	6823      	ldr	r3, [r4, #0]
 800b374:	4647      	mov	r7, r8
 800b376:	46a4      	mov	ip, r4
 800b378:	f04f 0a00 	mov.w	sl, #0
 800b37c:	f8b7 b000 	ldrh.w	fp, [r7]
 800b380:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b384:	fb09 220b 	mla	r2, r9, fp, r2
 800b388:	4452      	add	r2, sl
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b390:	f84c 3b04 	str.w	r3, [ip], #4
 800b394:	f857 3b04 	ldr.w	r3, [r7], #4
 800b398:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b39c:	f8bc 3000 	ldrh.w	r3, [ip]
 800b3a0:	fb09 330a 	mla	r3, r9, sl, r3
 800b3a4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b3a8:	42bd      	cmp	r5, r7
 800b3aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3ae:	d8e5      	bhi.n	800b37c <__multiply+0xfc>
 800b3b0:	9a01      	ldr	r2, [sp, #4]
 800b3b2:	50a3      	str	r3, [r4, r2]
 800b3b4:	3404      	adds	r4, #4
 800b3b6:	e79f      	b.n	800b2f8 <__multiply+0x78>
 800b3b8:	3e01      	subs	r6, #1
 800b3ba:	e7a1      	b.n	800b300 <__multiply+0x80>
 800b3bc:	0800c10c 	.word	0x0800c10c
 800b3c0:	0800c12e 	.word	0x0800c12e

0800b3c4 <__pow5mult>:
 800b3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c8:	4615      	mov	r5, r2
 800b3ca:	f012 0203 	ands.w	r2, r2, #3
 800b3ce:	4607      	mov	r7, r0
 800b3d0:	460e      	mov	r6, r1
 800b3d2:	d007      	beq.n	800b3e4 <__pow5mult+0x20>
 800b3d4:	4c25      	ldr	r4, [pc, #148]	@ (800b46c <__pow5mult+0xa8>)
 800b3d6:	3a01      	subs	r2, #1
 800b3d8:	2300      	movs	r3, #0
 800b3da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3de:	f7ff fea7 	bl	800b130 <__multadd>
 800b3e2:	4606      	mov	r6, r0
 800b3e4:	10ad      	asrs	r5, r5, #2
 800b3e6:	d03d      	beq.n	800b464 <__pow5mult+0xa0>
 800b3e8:	69fc      	ldr	r4, [r7, #28]
 800b3ea:	b97c      	cbnz	r4, 800b40c <__pow5mult+0x48>
 800b3ec:	2010      	movs	r0, #16
 800b3ee:	f7ff fcdb 	bl	800ada8 <malloc>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	61f8      	str	r0, [r7, #28]
 800b3f6:	b928      	cbnz	r0, 800b404 <__pow5mult+0x40>
 800b3f8:	4b1d      	ldr	r3, [pc, #116]	@ (800b470 <__pow5mult+0xac>)
 800b3fa:	481e      	ldr	r0, [pc, #120]	@ (800b474 <__pow5mult+0xb0>)
 800b3fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b400:	f000 fa90 	bl	800b924 <__assert_func>
 800b404:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b408:	6004      	str	r4, [r0, #0]
 800b40a:	60c4      	str	r4, [r0, #12]
 800b40c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b410:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b414:	b94c      	cbnz	r4, 800b42a <__pow5mult+0x66>
 800b416:	f240 2171 	movw	r1, #625	@ 0x271
 800b41a:	4638      	mov	r0, r7
 800b41c:	f7ff ff1a 	bl	800b254 <__i2b>
 800b420:	2300      	movs	r3, #0
 800b422:	f8c8 0008 	str.w	r0, [r8, #8]
 800b426:	4604      	mov	r4, r0
 800b428:	6003      	str	r3, [r0, #0]
 800b42a:	f04f 0900 	mov.w	r9, #0
 800b42e:	07eb      	lsls	r3, r5, #31
 800b430:	d50a      	bpl.n	800b448 <__pow5mult+0x84>
 800b432:	4631      	mov	r1, r6
 800b434:	4622      	mov	r2, r4
 800b436:	4638      	mov	r0, r7
 800b438:	f7ff ff22 	bl	800b280 <__multiply>
 800b43c:	4631      	mov	r1, r6
 800b43e:	4680      	mov	r8, r0
 800b440:	4638      	mov	r0, r7
 800b442:	f7ff fe53 	bl	800b0ec <_Bfree>
 800b446:	4646      	mov	r6, r8
 800b448:	106d      	asrs	r5, r5, #1
 800b44a:	d00b      	beq.n	800b464 <__pow5mult+0xa0>
 800b44c:	6820      	ldr	r0, [r4, #0]
 800b44e:	b938      	cbnz	r0, 800b460 <__pow5mult+0x9c>
 800b450:	4622      	mov	r2, r4
 800b452:	4621      	mov	r1, r4
 800b454:	4638      	mov	r0, r7
 800b456:	f7ff ff13 	bl	800b280 <__multiply>
 800b45a:	6020      	str	r0, [r4, #0]
 800b45c:	f8c0 9000 	str.w	r9, [r0]
 800b460:	4604      	mov	r4, r0
 800b462:	e7e4      	b.n	800b42e <__pow5mult+0x6a>
 800b464:	4630      	mov	r0, r6
 800b466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b46a:	bf00      	nop
 800b46c:	0800c1d0 	.word	0x0800c1d0
 800b470:	0800c09d 	.word	0x0800c09d
 800b474:	0800c12e 	.word	0x0800c12e

0800b478 <__lshift>:
 800b478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b47c:	460c      	mov	r4, r1
 800b47e:	6849      	ldr	r1, [r1, #4]
 800b480:	6923      	ldr	r3, [r4, #16]
 800b482:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b486:	68a3      	ldr	r3, [r4, #8]
 800b488:	4607      	mov	r7, r0
 800b48a:	4691      	mov	r9, r2
 800b48c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b490:	f108 0601 	add.w	r6, r8, #1
 800b494:	42b3      	cmp	r3, r6
 800b496:	db0b      	blt.n	800b4b0 <__lshift+0x38>
 800b498:	4638      	mov	r0, r7
 800b49a:	f7ff fde7 	bl	800b06c <_Balloc>
 800b49e:	4605      	mov	r5, r0
 800b4a0:	b948      	cbnz	r0, 800b4b6 <__lshift+0x3e>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	4b28      	ldr	r3, [pc, #160]	@ (800b548 <__lshift+0xd0>)
 800b4a6:	4829      	ldr	r0, [pc, #164]	@ (800b54c <__lshift+0xd4>)
 800b4a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b4ac:	f000 fa3a 	bl	800b924 <__assert_func>
 800b4b0:	3101      	adds	r1, #1
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	e7ee      	b.n	800b494 <__lshift+0x1c>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f100 0114 	add.w	r1, r0, #20
 800b4bc:	f100 0210 	add.w	r2, r0, #16
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	4553      	cmp	r3, sl
 800b4c4:	db33      	blt.n	800b52e <__lshift+0xb6>
 800b4c6:	6920      	ldr	r0, [r4, #16]
 800b4c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4cc:	f104 0314 	add.w	r3, r4, #20
 800b4d0:	f019 091f 	ands.w	r9, r9, #31
 800b4d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4dc:	d02b      	beq.n	800b536 <__lshift+0xbe>
 800b4de:	f1c9 0e20 	rsb	lr, r9, #32
 800b4e2:	468a      	mov	sl, r1
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	6818      	ldr	r0, [r3, #0]
 800b4e8:	fa00 f009 	lsl.w	r0, r0, r9
 800b4ec:	4310      	orrs	r0, r2
 800b4ee:	f84a 0b04 	str.w	r0, [sl], #4
 800b4f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4f6:	459c      	cmp	ip, r3
 800b4f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4fc:	d8f3      	bhi.n	800b4e6 <__lshift+0x6e>
 800b4fe:	ebac 0304 	sub.w	r3, ip, r4
 800b502:	3b15      	subs	r3, #21
 800b504:	f023 0303 	bic.w	r3, r3, #3
 800b508:	3304      	adds	r3, #4
 800b50a:	f104 0015 	add.w	r0, r4, #21
 800b50e:	4560      	cmp	r0, ip
 800b510:	bf88      	it	hi
 800b512:	2304      	movhi	r3, #4
 800b514:	50ca      	str	r2, [r1, r3]
 800b516:	b10a      	cbz	r2, 800b51c <__lshift+0xa4>
 800b518:	f108 0602 	add.w	r6, r8, #2
 800b51c:	3e01      	subs	r6, #1
 800b51e:	4638      	mov	r0, r7
 800b520:	612e      	str	r6, [r5, #16]
 800b522:	4621      	mov	r1, r4
 800b524:	f7ff fde2 	bl	800b0ec <_Bfree>
 800b528:	4628      	mov	r0, r5
 800b52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b52e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b532:	3301      	adds	r3, #1
 800b534:	e7c5      	b.n	800b4c2 <__lshift+0x4a>
 800b536:	3904      	subs	r1, #4
 800b538:	f853 2b04 	ldr.w	r2, [r3], #4
 800b53c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b540:	459c      	cmp	ip, r3
 800b542:	d8f9      	bhi.n	800b538 <__lshift+0xc0>
 800b544:	e7ea      	b.n	800b51c <__lshift+0xa4>
 800b546:	bf00      	nop
 800b548:	0800c10c 	.word	0x0800c10c
 800b54c:	0800c12e 	.word	0x0800c12e

0800b550 <__mcmp>:
 800b550:	690a      	ldr	r2, [r1, #16]
 800b552:	4603      	mov	r3, r0
 800b554:	6900      	ldr	r0, [r0, #16]
 800b556:	1a80      	subs	r0, r0, r2
 800b558:	b530      	push	{r4, r5, lr}
 800b55a:	d10e      	bne.n	800b57a <__mcmp+0x2a>
 800b55c:	3314      	adds	r3, #20
 800b55e:	3114      	adds	r1, #20
 800b560:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b564:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b568:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b56c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b570:	4295      	cmp	r5, r2
 800b572:	d003      	beq.n	800b57c <__mcmp+0x2c>
 800b574:	d205      	bcs.n	800b582 <__mcmp+0x32>
 800b576:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b57a:	bd30      	pop	{r4, r5, pc}
 800b57c:	42a3      	cmp	r3, r4
 800b57e:	d3f3      	bcc.n	800b568 <__mcmp+0x18>
 800b580:	e7fb      	b.n	800b57a <__mcmp+0x2a>
 800b582:	2001      	movs	r0, #1
 800b584:	e7f9      	b.n	800b57a <__mcmp+0x2a>
	...

0800b588 <__mdiff>:
 800b588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	4689      	mov	r9, r1
 800b58e:	4606      	mov	r6, r0
 800b590:	4611      	mov	r1, r2
 800b592:	4648      	mov	r0, r9
 800b594:	4614      	mov	r4, r2
 800b596:	f7ff ffdb 	bl	800b550 <__mcmp>
 800b59a:	1e05      	subs	r5, r0, #0
 800b59c:	d112      	bne.n	800b5c4 <__mdiff+0x3c>
 800b59e:	4629      	mov	r1, r5
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f7ff fd63 	bl	800b06c <_Balloc>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	b928      	cbnz	r0, 800b5b6 <__mdiff+0x2e>
 800b5aa:	4b3f      	ldr	r3, [pc, #252]	@ (800b6a8 <__mdiff+0x120>)
 800b5ac:	f240 2137 	movw	r1, #567	@ 0x237
 800b5b0:	483e      	ldr	r0, [pc, #248]	@ (800b6ac <__mdiff+0x124>)
 800b5b2:	f000 f9b7 	bl	800b924 <__assert_func>
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5bc:	4610      	mov	r0, r2
 800b5be:	b003      	add	sp, #12
 800b5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c4:	bfbc      	itt	lt
 800b5c6:	464b      	movlt	r3, r9
 800b5c8:	46a1      	movlt	r9, r4
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b5d0:	bfba      	itte	lt
 800b5d2:	461c      	movlt	r4, r3
 800b5d4:	2501      	movlt	r5, #1
 800b5d6:	2500      	movge	r5, #0
 800b5d8:	f7ff fd48 	bl	800b06c <_Balloc>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	b918      	cbnz	r0, 800b5e8 <__mdiff+0x60>
 800b5e0:	4b31      	ldr	r3, [pc, #196]	@ (800b6a8 <__mdiff+0x120>)
 800b5e2:	f240 2145 	movw	r1, #581	@ 0x245
 800b5e6:	e7e3      	b.n	800b5b0 <__mdiff+0x28>
 800b5e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b5ec:	6926      	ldr	r6, [r4, #16]
 800b5ee:	60c5      	str	r5, [r0, #12]
 800b5f0:	f109 0310 	add.w	r3, r9, #16
 800b5f4:	f109 0514 	add.w	r5, r9, #20
 800b5f8:	f104 0e14 	add.w	lr, r4, #20
 800b5fc:	f100 0b14 	add.w	fp, r0, #20
 800b600:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b604:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	46d9      	mov	r9, fp
 800b60c:	f04f 0c00 	mov.w	ip, #0
 800b610:	9b01      	ldr	r3, [sp, #4]
 800b612:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b616:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b61a:	9301      	str	r3, [sp, #4]
 800b61c:	fa1f f38a 	uxth.w	r3, sl
 800b620:	4619      	mov	r1, r3
 800b622:	b283      	uxth	r3, r0
 800b624:	1acb      	subs	r3, r1, r3
 800b626:	0c00      	lsrs	r0, r0, #16
 800b628:	4463      	add	r3, ip
 800b62a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b62e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b632:	b29b      	uxth	r3, r3
 800b634:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b638:	4576      	cmp	r6, lr
 800b63a:	f849 3b04 	str.w	r3, [r9], #4
 800b63e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b642:	d8e5      	bhi.n	800b610 <__mdiff+0x88>
 800b644:	1b33      	subs	r3, r6, r4
 800b646:	3b15      	subs	r3, #21
 800b648:	f023 0303 	bic.w	r3, r3, #3
 800b64c:	3415      	adds	r4, #21
 800b64e:	3304      	adds	r3, #4
 800b650:	42a6      	cmp	r6, r4
 800b652:	bf38      	it	cc
 800b654:	2304      	movcc	r3, #4
 800b656:	441d      	add	r5, r3
 800b658:	445b      	add	r3, fp
 800b65a:	461e      	mov	r6, r3
 800b65c:	462c      	mov	r4, r5
 800b65e:	4544      	cmp	r4, r8
 800b660:	d30e      	bcc.n	800b680 <__mdiff+0xf8>
 800b662:	f108 0103 	add.w	r1, r8, #3
 800b666:	1b49      	subs	r1, r1, r5
 800b668:	f021 0103 	bic.w	r1, r1, #3
 800b66c:	3d03      	subs	r5, #3
 800b66e:	45a8      	cmp	r8, r5
 800b670:	bf38      	it	cc
 800b672:	2100      	movcc	r1, #0
 800b674:	440b      	add	r3, r1
 800b676:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b67a:	b191      	cbz	r1, 800b6a2 <__mdiff+0x11a>
 800b67c:	6117      	str	r7, [r2, #16]
 800b67e:	e79d      	b.n	800b5bc <__mdiff+0x34>
 800b680:	f854 1b04 	ldr.w	r1, [r4], #4
 800b684:	46e6      	mov	lr, ip
 800b686:	0c08      	lsrs	r0, r1, #16
 800b688:	fa1c fc81 	uxtah	ip, ip, r1
 800b68c:	4471      	add	r1, lr
 800b68e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b692:	b289      	uxth	r1, r1
 800b694:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b698:	f846 1b04 	str.w	r1, [r6], #4
 800b69c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b6a0:	e7dd      	b.n	800b65e <__mdiff+0xd6>
 800b6a2:	3f01      	subs	r7, #1
 800b6a4:	e7e7      	b.n	800b676 <__mdiff+0xee>
 800b6a6:	bf00      	nop
 800b6a8:	0800c10c 	.word	0x0800c10c
 800b6ac:	0800c12e 	.word	0x0800c12e

0800b6b0 <__d2b>:
 800b6b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	2101      	movs	r1, #1
 800b6b8:	ec59 8b10 	vmov	r8, r9, d0
 800b6bc:	4616      	mov	r6, r2
 800b6be:	f7ff fcd5 	bl	800b06c <_Balloc>
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	b930      	cbnz	r0, 800b6d4 <__d2b+0x24>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	4b23      	ldr	r3, [pc, #140]	@ (800b758 <__d2b+0xa8>)
 800b6ca:	4824      	ldr	r0, [pc, #144]	@ (800b75c <__d2b+0xac>)
 800b6cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800b6d0:	f000 f928 	bl	800b924 <__assert_func>
 800b6d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b6d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6dc:	b10d      	cbz	r5, 800b6e2 <__d2b+0x32>
 800b6de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6e2:	9301      	str	r3, [sp, #4]
 800b6e4:	f1b8 0300 	subs.w	r3, r8, #0
 800b6e8:	d023      	beq.n	800b732 <__d2b+0x82>
 800b6ea:	4668      	mov	r0, sp
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	f7ff fd84 	bl	800b1fa <__lo0bits>
 800b6f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6f6:	b1d0      	cbz	r0, 800b72e <__d2b+0x7e>
 800b6f8:	f1c0 0320 	rsb	r3, r0, #32
 800b6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b700:	430b      	orrs	r3, r1
 800b702:	40c2      	lsrs	r2, r0
 800b704:	6163      	str	r3, [r4, #20]
 800b706:	9201      	str	r2, [sp, #4]
 800b708:	9b01      	ldr	r3, [sp, #4]
 800b70a:	61a3      	str	r3, [r4, #24]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	bf0c      	ite	eq
 800b710:	2201      	moveq	r2, #1
 800b712:	2202      	movne	r2, #2
 800b714:	6122      	str	r2, [r4, #16]
 800b716:	b1a5      	cbz	r5, 800b742 <__d2b+0x92>
 800b718:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b71c:	4405      	add	r5, r0
 800b71e:	603d      	str	r5, [r7, #0]
 800b720:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b724:	6030      	str	r0, [r6, #0]
 800b726:	4620      	mov	r0, r4
 800b728:	b003      	add	sp, #12
 800b72a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b72e:	6161      	str	r1, [r4, #20]
 800b730:	e7ea      	b.n	800b708 <__d2b+0x58>
 800b732:	a801      	add	r0, sp, #4
 800b734:	f7ff fd61 	bl	800b1fa <__lo0bits>
 800b738:	9b01      	ldr	r3, [sp, #4]
 800b73a:	6163      	str	r3, [r4, #20]
 800b73c:	3020      	adds	r0, #32
 800b73e:	2201      	movs	r2, #1
 800b740:	e7e8      	b.n	800b714 <__d2b+0x64>
 800b742:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b746:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b74a:	6038      	str	r0, [r7, #0]
 800b74c:	6918      	ldr	r0, [r3, #16]
 800b74e:	f7ff fd35 	bl	800b1bc <__hi0bits>
 800b752:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b756:	e7e5      	b.n	800b724 <__d2b+0x74>
 800b758:	0800c10c 	.word	0x0800c10c
 800b75c:	0800c12e 	.word	0x0800c12e

0800b760 <__sread>:
 800b760:	b510      	push	{r4, lr}
 800b762:	460c      	mov	r4, r1
 800b764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b768:	f000 f898 	bl	800b89c <_read_r>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	bfab      	itete	ge
 800b770:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b772:	89a3      	ldrhlt	r3, [r4, #12]
 800b774:	181b      	addge	r3, r3, r0
 800b776:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b77a:	bfac      	ite	ge
 800b77c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b77e:	81a3      	strhlt	r3, [r4, #12]
 800b780:	bd10      	pop	{r4, pc}

0800b782 <__swrite>:
 800b782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b786:	461f      	mov	r7, r3
 800b788:	898b      	ldrh	r3, [r1, #12]
 800b78a:	05db      	lsls	r3, r3, #23
 800b78c:	4605      	mov	r5, r0
 800b78e:	460c      	mov	r4, r1
 800b790:	4616      	mov	r6, r2
 800b792:	d505      	bpl.n	800b7a0 <__swrite+0x1e>
 800b794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b798:	2302      	movs	r3, #2
 800b79a:	2200      	movs	r2, #0
 800b79c:	f000 f86c 	bl	800b878 <_lseek_r>
 800b7a0:	89a3      	ldrh	r3, [r4, #12]
 800b7a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7aa:	81a3      	strh	r3, [r4, #12]
 800b7ac:	4632      	mov	r2, r6
 800b7ae:	463b      	mov	r3, r7
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b6:	f000 b893 	b.w	800b8e0 <_write_r>

0800b7ba <__sseek>:
 800b7ba:	b510      	push	{r4, lr}
 800b7bc:	460c      	mov	r4, r1
 800b7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c2:	f000 f859 	bl	800b878 <_lseek_r>
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	bf15      	itete	ne
 800b7cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b7ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b7d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b7d6:	81a3      	strheq	r3, [r4, #12]
 800b7d8:	bf18      	it	ne
 800b7da:	81a3      	strhne	r3, [r4, #12]
 800b7dc:	bd10      	pop	{r4, pc}

0800b7de <__sclose>:
 800b7de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e2:	f000 b88f 	b.w	800b904 <_close_r>

0800b7e6 <_realloc_r>:
 800b7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ea:	4607      	mov	r7, r0
 800b7ec:	4614      	mov	r4, r2
 800b7ee:	460d      	mov	r5, r1
 800b7f0:	b921      	cbnz	r1, 800b7fc <_realloc_r+0x16>
 800b7f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	f7ff bb00 	b.w	800adfc <_malloc_r>
 800b7fc:	b92a      	cbnz	r2, 800b80a <_realloc_r+0x24>
 800b7fe:	f000 f8c3 	bl	800b988 <_free_r>
 800b802:	4625      	mov	r5, r4
 800b804:	4628      	mov	r0, r5
 800b806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b80a:	f000 f919 	bl	800ba40 <_malloc_usable_size_r>
 800b80e:	4284      	cmp	r4, r0
 800b810:	4606      	mov	r6, r0
 800b812:	d802      	bhi.n	800b81a <_realloc_r+0x34>
 800b814:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b818:	d8f4      	bhi.n	800b804 <_realloc_r+0x1e>
 800b81a:	4621      	mov	r1, r4
 800b81c:	4638      	mov	r0, r7
 800b81e:	f7ff faed 	bl	800adfc <_malloc_r>
 800b822:	4680      	mov	r8, r0
 800b824:	b908      	cbnz	r0, 800b82a <_realloc_r+0x44>
 800b826:	4645      	mov	r5, r8
 800b828:	e7ec      	b.n	800b804 <_realloc_r+0x1e>
 800b82a:	42b4      	cmp	r4, r6
 800b82c:	4622      	mov	r2, r4
 800b82e:	4629      	mov	r1, r5
 800b830:	bf28      	it	cs
 800b832:	4632      	movcs	r2, r6
 800b834:	f7fe fafa 	bl	8009e2c <memcpy>
 800b838:	4629      	mov	r1, r5
 800b83a:	4638      	mov	r0, r7
 800b83c:	f000 f8a4 	bl	800b988 <_free_r>
 800b840:	e7f1      	b.n	800b826 <_realloc_r+0x40>

0800b842 <memmove>:
 800b842:	4288      	cmp	r0, r1
 800b844:	b510      	push	{r4, lr}
 800b846:	eb01 0402 	add.w	r4, r1, r2
 800b84a:	d902      	bls.n	800b852 <memmove+0x10>
 800b84c:	4284      	cmp	r4, r0
 800b84e:	4623      	mov	r3, r4
 800b850:	d807      	bhi.n	800b862 <memmove+0x20>
 800b852:	1e43      	subs	r3, r0, #1
 800b854:	42a1      	cmp	r1, r4
 800b856:	d008      	beq.n	800b86a <memmove+0x28>
 800b858:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b85c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b860:	e7f8      	b.n	800b854 <memmove+0x12>
 800b862:	4402      	add	r2, r0
 800b864:	4601      	mov	r1, r0
 800b866:	428a      	cmp	r2, r1
 800b868:	d100      	bne.n	800b86c <memmove+0x2a>
 800b86a:	bd10      	pop	{r4, pc}
 800b86c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b870:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b874:	e7f7      	b.n	800b866 <memmove+0x24>
	...

0800b878 <_lseek_r>:
 800b878:	b538      	push	{r3, r4, r5, lr}
 800b87a:	4d07      	ldr	r5, [pc, #28]	@ (800b898 <_lseek_r+0x20>)
 800b87c:	4604      	mov	r4, r0
 800b87e:	4608      	mov	r0, r1
 800b880:	4611      	mov	r1, r2
 800b882:	2200      	movs	r2, #0
 800b884:	602a      	str	r2, [r5, #0]
 800b886:	461a      	mov	r2, r3
 800b888:	f7f6 f93d 	bl	8001b06 <_lseek>
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	d102      	bne.n	800b896 <_lseek_r+0x1e>
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	b103      	cbz	r3, 800b896 <_lseek_r+0x1e>
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	bd38      	pop	{r3, r4, r5, pc}
 800b898:	20000c68 	.word	0x20000c68

0800b89c <_read_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	4d07      	ldr	r5, [pc, #28]	@ (800b8bc <_read_r+0x20>)
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	4608      	mov	r0, r1
 800b8a4:	4611      	mov	r1, r2
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	602a      	str	r2, [r5, #0]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	f7f6 f8cb 	bl	8001a46 <_read>
 800b8b0:	1c43      	adds	r3, r0, #1
 800b8b2:	d102      	bne.n	800b8ba <_read_r+0x1e>
 800b8b4:	682b      	ldr	r3, [r5, #0]
 800b8b6:	b103      	cbz	r3, 800b8ba <_read_r+0x1e>
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	bd38      	pop	{r3, r4, r5, pc}
 800b8bc:	20000c68 	.word	0x20000c68

0800b8c0 <_sbrk_r>:
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	4d06      	ldr	r5, [pc, #24]	@ (800b8dc <_sbrk_r+0x1c>)
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	4608      	mov	r0, r1
 800b8ca:	602b      	str	r3, [r5, #0]
 800b8cc:	f7f6 f928 	bl	8001b20 <_sbrk>
 800b8d0:	1c43      	adds	r3, r0, #1
 800b8d2:	d102      	bne.n	800b8da <_sbrk_r+0x1a>
 800b8d4:	682b      	ldr	r3, [r5, #0]
 800b8d6:	b103      	cbz	r3, 800b8da <_sbrk_r+0x1a>
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	bd38      	pop	{r3, r4, r5, pc}
 800b8dc:	20000c68 	.word	0x20000c68

0800b8e0 <_write_r>:
 800b8e0:	b538      	push	{r3, r4, r5, lr}
 800b8e2:	4d07      	ldr	r5, [pc, #28]	@ (800b900 <_write_r+0x20>)
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	4608      	mov	r0, r1
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	602a      	str	r2, [r5, #0]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	f7f6 f8c6 	bl	8001a80 <_write>
 800b8f4:	1c43      	adds	r3, r0, #1
 800b8f6:	d102      	bne.n	800b8fe <_write_r+0x1e>
 800b8f8:	682b      	ldr	r3, [r5, #0]
 800b8fa:	b103      	cbz	r3, 800b8fe <_write_r+0x1e>
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	bd38      	pop	{r3, r4, r5, pc}
 800b900:	20000c68 	.word	0x20000c68

0800b904 <_close_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4d06      	ldr	r5, [pc, #24]	@ (800b920 <_close_r+0x1c>)
 800b908:	2300      	movs	r3, #0
 800b90a:	4604      	mov	r4, r0
 800b90c:	4608      	mov	r0, r1
 800b90e:	602b      	str	r3, [r5, #0]
 800b910:	f7f6 f8d2 	bl	8001ab8 <_close>
 800b914:	1c43      	adds	r3, r0, #1
 800b916:	d102      	bne.n	800b91e <_close_r+0x1a>
 800b918:	682b      	ldr	r3, [r5, #0]
 800b91a:	b103      	cbz	r3, 800b91e <_close_r+0x1a>
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	bd38      	pop	{r3, r4, r5, pc}
 800b920:	20000c68 	.word	0x20000c68

0800b924 <__assert_func>:
 800b924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b926:	4614      	mov	r4, r2
 800b928:	461a      	mov	r2, r3
 800b92a:	4b09      	ldr	r3, [pc, #36]	@ (800b950 <__assert_func+0x2c>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4605      	mov	r5, r0
 800b930:	68d8      	ldr	r0, [r3, #12]
 800b932:	b14c      	cbz	r4, 800b948 <__assert_func+0x24>
 800b934:	4b07      	ldr	r3, [pc, #28]	@ (800b954 <__assert_func+0x30>)
 800b936:	9100      	str	r1, [sp, #0]
 800b938:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b93c:	4906      	ldr	r1, [pc, #24]	@ (800b958 <__assert_func+0x34>)
 800b93e:	462b      	mov	r3, r5
 800b940:	f000 f886 	bl	800ba50 <fiprintf>
 800b944:	f000 f8a3 	bl	800ba8e <abort>
 800b948:	4b04      	ldr	r3, [pc, #16]	@ (800b95c <__assert_func+0x38>)
 800b94a:	461c      	mov	r4, r3
 800b94c:	e7f3      	b.n	800b936 <__assert_func+0x12>
 800b94e:	bf00      	nop
 800b950:	200003d4 	.word	0x200003d4
 800b954:	0800c191 	.word	0x0800c191
 800b958:	0800c19e 	.word	0x0800c19e
 800b95c:	0800c1cc 	.word	0x0800c1cc

0800b960 <_calloc_r>:
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	fba1 5402 	umull	r5, r4, r1, r2
 800b966:	b934      	cbnz	r4, 800b976 <_calloc_r+0x16>
 800b968:	4629      	mov	r1, r5
 800b96a:	f7ff fa47 	bl	800adfc <_malloc_r>
 800b96e:	4606      	mov	r6, r0
 800b970:	b928      	cbnz	r0, 800b97e <_calloc_r+0x1e>
 800b972:	4630      	mov	r0, r6
 800b974:	bd70      	pop	{r4, r5, r6, pc}
 800b976:	220c      	movs	r2, #12
 800b978:	6002      	str	r2, [r0, #0]
 800b97a:	2600      	movs	r6, #0
 800b97c:	e7f9      	b.n	800b972 <_calloc_r+0x12>
 800b97e:	462a      	mov	r2, r5
 800b980:	4621      	mov	r1, r4
 800b982:	f7fe fa19 	bl	8009db8 <memset>
 800b986:	e7f4      	b.n	800b972 <_calloc_r+0x12>

0800b988 <_free_r>:
 800b988:	b538      	push	{r3, r4, r5, lr}
 800b98a:	4605      	mov	r5, r0
 800b98c:	2900      	cmp	r1, #0
 800b98e:	d041      	beq.n	800ba14 <_free_r+0x8c>
 800b990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b994:	1f0c      	subs	r4, r1, #4
 800b996:	2b00      	cmp	r3, #0
 800b998:	bfb8      	it	lt
 800b99a:	18e4      	addlt	r4, r4, r3
 800b99c:	f7ff fb5a 	bl	800b054 <__malloc_lock>
 800b9a0:	4a1d      	ldr	r2, [pc, #116]	@ (800ba18 <_free_r+0x90>)
 800b9a2:	6813      	ldr	r3, [r2, #0]
 800b9a4:	b933      	cbnz	r3, 800b9b4 <_free_r+0x2c>
 800b9a6:	6063      	str	r3, [r4, #4]
 800b9a8:	6014      	str	r4, [r2, #0]
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9b0:	f7ff bb56 	b.w	800b060 <__malloc_unlock>
 800b9b4:	42a3      	cmp	r3, r4
 800b9b6:	d908      	bls.n	800b9ca <_free_r+0x42>
 800b9b8:	6820      	ldr	r0, [r4, #0]
 800b9ba:	1821      	adds	r1, r4, r0
 800b9bc:	428b      	cmp	r3, r1
 800b9be:	bf01      	itttt	eq
 800b9c0:	6819      	ldreq	r1, [r3, #0]
 800b9c2:	685b      	ldreq	r3, [r3, #4]
 800b9c4:	1809      	addeq	r1, r1, r0
 800b9c6:	6021      	streq	r1, [r4, #0]
 800b9c8:	e7ed      	b.n	800b9a6 <_free_r+0x1e>
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	b10b      	cbz	r3, 800b9d4 <_free_r+0x4c>
 800b9d0:	42a3      	cmp	r3, r4
 800b9d2:	d9fa      	bls.n	800b9ca <_free_r+0x42>
 800b9d4:	6811      	ldr	r1, [r2, #0]
 800b9d6:	1850      	adds	r0, r2, r1
 800b9d8:	42a0      	cmp	r0, r4
 800b9da:	d10b      	bne.n	800b9f4 <_free_r+0x6c>
 800b9dc:	6820      	ldr	r0, [r4, #0]
 800b9de:	4401      	add	r1, r0
 800b9e0:	1850      	adds	r0, r2, r1
 800b9e2:	4283      	cmp	r3, r0
 800b9e4:	6011      	str	r1, [r2, #0]
 800b9e6:	d1e0      	bne.n	800b9aa <_free_r+0x22>
 800b9e8:	6818      	ldr	r0, [r3, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	6053      	str	r3, [r2, #4]
 800b9ee:	4408      	add	r0, r1
 800b9f0:	6010      	str	r0, [r2, #0]
 800b9f2:	e7da      	b.n	800b9aa <_free_r+0x22>
 800b9f4:	d902      	bls.n	800b9fc <_free_r+0x74>
 800b9f6:	230c      	movs	r3, #12
 800b9f8:	602b      	str	r3, [r5, #0]
 800b9fa:	e7d6      	b.n	800b9aa <_free_r+0x22>
 800b9fc:	6820      	ldr	r0, [r4, #0]
 800b9fe:	1821      	adds	r1, r4, r0
 800ba00:	428b      	cmp	r3, r1
 800ba02:	bf04      	itt	eq
 800ba04:	6819      	ldreq	r1, [r3, #0]
 800ba06:	685b      	ldreq	r3, [r3, #4]
 800ba08:	6063      	str	r3, [r4, #4]
 800ba0a:	bf04      	itt	eq
 800ba0c:	1809      	addeq	r1, r1, r0
 800ba0e:	6021      	streq	r1, [r4, #0]
 800ba10:	6054      	str	r4, [r2, #4]
 800ba12:	e7ca      	b.n	800b9aa <_free_r+0x22>
 800ba14:	bd38      	pop	{r3, r4, r5, pc}
 800ba16:	bf00      	nop
 800ba18:	20000c64 	.word	0x20000c64

0800ba1c <__ascii_mbtowc>:
 800ba1c:	b082      	sub	sp, #8
 800ba1e:	b901      	cbnz	r1, 800ba22 <__ascii_mbtowc+0x6>
 800ba20:	a901      	add	r1, sp, #4
 800ba22:	b142      	cbz	r2, 800ba36 <__ascii_mbtowc+0x1a>
 800ba24:	b14b      	cbz	r3, 800ba3a <__ascii_mbtowc+0x1e>
 800ba26:	7813      	ldrb	r3, [r2, #0]
 800ba28:	600b      	str	r3, [r1, #0]
 800ba2a:	7812      	ldrb	r2, [r2, #0]
 800ba2c:	1e10      	subs	r0, r2, #0
 800ba2e:	bf18      	it	ne
 800ba30:	2001      	movne	r0, #1
 800ba32:	b002      	add	sp, #8
 800ba34:	4770      	bx	lr
 800ba36:	4610      	mov	r0, r2
 800ba38:	e7fb      	b.n	800ba32 <__ascii_mbtowc+0x16>
 800ba3a:	f06f 0001 	mvn.w	r0, #1
 800ba3e:	e7f8      	b.n	800ba32 <__ascii_mbtowc+0x16>

0800ba40 <_malloc_usable_size_r>:
 800ba40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba44:	1f18      	subs	r0, r3, #4
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	bfbc      	itt	lt
 800ba4a:	580b      	ldrlt	r3, [r1, r0]
 800ba4c:	18c0      	addlt	r0, r0, r3
 800ba4e:	4770      	bx	lr

0800ba50 <fiprintf>:
 800ba50:	b40e      	push	{r1, r2, r3}
 800ba52:	b503      	push	{r0, r1, lr}
 800ba54:	4601      	mov	r1, r0
 800ba56:	ab03      	add	r3, sp, #12
 800ba58:	4805      	ldr	r0, [pc, #20]	@ (800ba70 <fiprintf+0x20>)
 800ba5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba5e:	6800      	ldr	r0, [r0, #0]
 800ba60:	9301      	str	r3, [sp, #4]
 800ba62:	f000 f845 	bl	800baf0 <_vfiprintf_r>
 800ba66:	b002      	add	sp, #8
 800ba68:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba6c:	b003      	add	sp, #12
 800ba6e:	4770      	bx	lr
 800ba70:	200003d4 	.word	0x200003d4

0800ba74 <__ascii_wctomb>:
 800ba74:	4603      	mov	r3, r0
 800ba76:	4608      	mov	r0, r1
 800ba78:	b141      	cbz	r1, 800ba8c <__ascii_wctomb+0x18>
 800ba7a:	2aff      	cmp	r2, #255	@ 0xff
 800ba7c:	d904      	bls.n	800ba88 <__ascii_wctomb+0x14>
 800ba7e:	228a      	movs	r2, #138	@ 0x8a
 800ba80:	601a      	str	r2, [r3, #0]
 800ba82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba86:	4770      	bx	lr
 800ba88:	700a      	strb	r2, [r1, #0]
 800ba8a:	2001      	movs	r0, #1
 800ba8c:	4770      	bx	lr

0800ba8e <abort>:
 800ba8e:	b508      	push	{r3, lr}
 800ba90:	2006      	movs	r0, #6
 800ba92:	f000 fa63 	bl	800bf5c <raise>
 800ba96:	2001      	movs	r0, #1
 800ba98:	f7f5 ffca 	bl	8001a30 <_exit>

0800ba9c <__sfputc_r>:
 800ba9c:	6893      	ldr	r3, [r2, #8]
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	b410      	push	{r4}
 800baa4:	6093      	str	r3, [r2, #8]
 800baa6:	da08      	bge.n	800baba <__sfputc_r+0x1e>
 800baa8:	6994      	ldr	r4, [r2, #24]
 800baaa:	42a3      	cmp	r3, r4
 800baac:	db01      	blt.n	800bab2 <__sfputc_r+0x16>
 800baae:	290a      	cmp	r1, #10
 800bab0:	d103      	bne.n	800baba <__sfputc_r+0x1e>
 800bab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bab6:	f000 b933 	b.w	800bd20 <__swbuf_r>
 800baba:	6813      	ldr	r3, [r2, #0]
 800babc:	1c58      	adds	r0, r3, #1
 800babe:	6010      	str	r0, [r2, #0]
 800bac0:	7019      	strb	r1, [r3, #0]
 800bac2:	4608      	mov	r0, r1
 800bac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <__sfputs_r>:
 800baca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bacc:	4606      	mov	r6, r0
 800bace:	460f      	mov	r7, r1
 800bad0:	4614      	mov	r4, r2
 800bad2:	18d5      	adds	r5, r2, r3
 800bad4:	42ac      	cmp	r4, r5
 800bad6:	d101      	bne.n	800badc <__sfputs_r+0x12>
 800bad8:	2000      	movs	r0, #0
 800bada:	e007      	b.n	800baec <__sfputs_r+0x22>
 800badc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae0:	463a      	mov	r2, r7
 800bae2:	4630      	mov	r0, r6
 800bae4:	f7ff ffda 	bl	800ba9c <__sfputc_r>
 800bae8:	1c43      	adds	r3, r0, #1
 800baea:	d1f3      	bne.n	800bad4 <__sfputs_r+0xa>
 800baec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800baf0 <_vfiprintf_r>:
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	460d      	mov	r5, r1
 800baf6:	b09d      	sub	sp, #116	@ 0x74
 800baf8:	4614      	mov	r4, r2
 800bafa:	4698      	mov	r8, r3
 800bafc:	4606      	mov	r6, r0
 800bafe:	b118      	cbz	r0, 800bb08 <_vfiprintf_r+0x18>
 800bb00:	6a03      	ldr	r3, [r0, #32]
 800bb02:	b90b      	cbnz	r3, 800bb08 <_vfiprintf_r+0x18>
 800bb04:	f7fe f922 	bl	8009d4c <__sinit>
 800bb08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb0a:	07d9      	lsls	r1, r3, #31
 800bb0c:	d405      	bmi.n	800bb1a <_vfiprintf_r+0x2a>
 800bb0e:	89ab      	ldrh	r3, [r5, #12]
 800bb10:	059a      	lsls	r2, r3, #22
 800bb12:	d402      	bmi.n	800bb1a <_vfiprintf_r+0x2a>
 800bb14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb16:	f7fe f982 	bl	8009e1e <__retarget_lock_acquire_recursive>
 800bb1a:	89ab      	ldrh	r3, [r5, #12]
 800bb1c:	071b      	lsls	r3, r3, #28
 800bb1e:	d501      	bpl.n	800bb24 <_vfiprintf_r+0x34>
 800bb20:	692b      	ldr	r3, [r5, #16]
 800bb22:	b99b      	cbnz	r3, 800bb4c <_vfiprintf_r+0x5c>
 800bb24:	4629      	mov	r1, r5
 800bb26:	4630      	mov	r0, r6
 800bb28:	f000 f938 	bl	800bd9c <__swsetup_r>
 800bb2c:	b170      	cbz	r0, 800bb4c <_vfiprintf_r+0x5c>
 800bb2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb30:	07dc      	lsls	r4, r3, #31
 800bb32:	d504      	bpl.n	800bb3e <_vfiprintf_r+0x4e>
 800bb34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb38:	b01d      	add	sp, #116	@ 0x74
 800bb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3e:	89ab      	ldrh	r3, [r5, #12]
 800bb40:	0598      	lsls	r0, r3, #22
 800bb42:	d4f7      	bmi.n	800bb34 <_vfiprintf_r+0x44>
 800bb44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb46:	f7fe f96b 	bl	8009e20 <__retarget_lock_release_recursive>
 800bb4a:	e7f3      	b.n	800bb34 <_vfiprintf_r+0x44>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb50:	2320      	movs	r3, #32
 800bb52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb56:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb5a:	2330      	movs	r3, #48	@ 0x30
 800bb5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd0c <_vfiprintf_r+0x21c>
 800bb60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb64:	f04f 0901 	mov.w	r9, #1
 800bb68:	4623      	mov	r3, r4
 800bb6a:	469a      	mov	sl, r3
 800bb6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb70:	b10a      	cbz	r2, 800bb76 <_vfiprintf_r+0x86>
 800bb72:	2a25      	cmp	r2, #37	@ 0x25
 800bb74:	d1f9      	bne.n	800bb6a <_vfiprintf_r+0x7a>
 800bb76:	ebba 0b04 	subs.w	fp, sl, r4
 800bb7a:	d00b      	beq.n	800bb94 <_vfiprintf_r+0xa4>
 800bb7c:	465b      	mov	r3, fp
 800bb7e:	4622      	mov	r2, r4
 800bb80:	4629      	mov	r1, r5
 800bb82:	4630      	mov	r0, r6
 800bb84:	f7ff ffa1 	bl	800baca <__sfputs_r>
 800bb88:	3001      	adds	r0, #1
 800bb8a:	f000 80a7 	beq.w	800bcdc <_vfiprintf_r+0x1ec>
 800bb8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb90:	445a      	add	r2, fp
 800bb92:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb94:	f89a 3000 	ldrb.w	r3, [sl]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f000 809f 	beq.w	800bcdc <_vfiprintf_r+0x1ec>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bba8:	f10a 0a01 	add.w	sl, sl, #1
 800bbac:	9304      	str	r3, [sp, #16]
 800bbae:	9307      	str	r3, [sp, #28]
 800bbb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbb6:	4654      	mov	r4, sl
 800bbb8:	2205      	movs	r2, #5
 800bbba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbbe:	4853      	ldr	r0, [pc, #332]	@ (800bd0c <_vfiprintf_r+0x21c>)
 800bbc0:	f7f4 fb36 	bl	8000230 <memchr>
 800bbc4:	9a04      	ldr	r2, [sp, #16]
 800bbc6:	b9d8      	cbnz	r0, 800bc00 <_vfiprintf_r+0x110>
 800bbc8:	06d1      	lsls	r1, r2, #27
 800bbca:	bf44      	itt	mi
 800bbcc:	2320      	movmi	r3, #32
 800bbce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbd2:	0713      	lsls	r3, r2, #28
 800bbd4:	bf44      	itt	mi
 800bbd6:	232b      	movmi	r3, #43	@ 0x2b
 800bbd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbdc:	f89a 3000 	ldrb.w	r3, [sl]
 800bbe0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbe2:	d015      	beq.n	800bc10 <_vfiprintf_r+0x120>
 800bbe4:	9a07      	ldr	r2, [sp, #28]
 800bbe6:	4654      	mov	r4, sl
 800bbe8:	2000      	movs	r0, #0
 800bbea:	f04f 0c0a 	mov.w	ip, #10
 800bbee:	4621      	mov	r1, r4
 800bbf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbf4:	3b30      	subs	r3, #48	@ 0x30
 800bbf6:	2b09      	cmp	r3, #9
 800bbf8:	d94b      	bls.n	800bc92 <_vfiprintf_r+0x1a2>
 800bbfa:	b1b0      	cbz	r0, 800bc2a <_vfiprintf_r+0x13a>
 800bbfc:	9207      	str	r2, [sp, #28]
 800bbfe:	e014      	b.n	800bc2a <_vfiprintf_r+0x13a>
 800bc00:	eba0 0308 	sub.w	r3, r0, r8
 800bc04:	fa09 f303 	lsl.w	r3, r9, r3
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	9304      	str	r3, [sp, #16]
 800bc0c:	46a2      	mov	sl, r4
 800bc0e:	e7d2      	b.n	800bbb6 <_vfiprintf_r+0xc6>
 800bc10:	9b03      	ldr	r3, [sp, #12]
 800bc12:	1d19      	adds	r1, r3, #4
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	9103      	str	r1, [sp, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bfbb      	ittet	lt
 800bc1c:	425b      	neglt	r3, r3
 800bc1e:	f042 0202 	orrlt.w	r2, r2, #2
 800bc22:	9307      	strge	r3, [sp, #28]
 800bc24:	9307      	strlt	r3, [sp, #28]
 800bc26:	bfb8      	it	lt
 800bc28:	9204      	strlt	r2, [sp, #16]
 800bc2a:	7823      	ldrb	r3, [r4, #0]
 800bc2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc2e:	d10a      	bne.n	800bc46 <_vfiprintf_r+0x156>
 800bc30:	7863      	ldrb	r3, [r4, #1]
 800bc32:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc34:	d132      	bne.n	800bc9c <_vfiprintf_r+0x1ac>
 800bc36:	9b03      	ldr	r3, [sp, #12]
 800bc38:	1d1a      	adds	r2, r3, #4
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	9203      	str	r2, [sp, #12]
 800bc3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc42:	3402      	adds	r4, #2
 800bc44:	9305      	str	r3, [sp, #20]
 800bc46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd1c <_vfiprintf_r+0x22c>
 800bc4a:	7821      	ldrb	r1, [r4, #0]
 800bc4c:	2203      	movs	r2, #3
 800bc4e:	4650      	mov	r0, sl
 800bc50:	f7f4 faee 	bl	8000230 <memchr>
 800bc54:	b138      	cbz	r0, 800bc66 <_vfiprintf_r+0x176>
 800bc56:	9b04      	ldr	r3, [sp, #16]
 800bc58:	eba0 000a 	sub.w	r0, r0, sl
 800bc5c:	2240      	movs	r2, #64	@ 0x40
 800bc5e:	4082      	lsls	r2, r0
 800bc60:	4313      	orrs	r3, r2
 800bc62:	3401      	adds	r4, #1
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc6a:	4829      	ldr	r0, [pc, #164]	@ (800bd10 <_vfiprintf_r+0x220>)
 800bc6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc70:	2206      	movs	r2, #6
 800bc72:	f7f4 fadd 	bl	8000230 <memchr>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d03f      	beq.n	800bcfa <_vfiprintf_r+0x20a>
 800bc7a:	4b26      	ldr	r3, [pc, #152]	@ (800bd14 <_vfiprintf_r+0x224>)
 800bc7c:	bb1b      	cbnz	r3, 800bcc6 <_vfiprintf_r+0x1d6>
 800bc7e:	9b03      	ldr	r3, [sp, #12]
 800bc80:	3307      	adds	r3, #7
 800bc82:	f023 0307 	bic.w	r3, r3, #7
 800bc86:	3308      	adds	r3, #8
 800bc88:	9303      	str	r3, [sp, #12]
 800bc8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc8c:	443b      	add	r3, r7
 800bc8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc90:	e76a      	b.n	800bb68 <_vfiprintf_r+0x78>
 800bc92:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc96:	460c      	mov	r4, r1
 800bc98:	2001      	movs	r0, #1
 800bc9a:	e7a8      	b.n	800bbee <_vfiprintf_r+0xfe>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	3401      	adds	r4, #1
 800bca0:	9305      	str	r3, [sp, #20]
 800bca2:	4619      	mov	r1, r3
 800bca4:	f04f 0c0a 	mov.w	ip, #10
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcae:	3a30      	subs	r2, #48	@ 0x30
 800bcb0:	2a09      	cmp	r2, #9
 800bcb2:	d903      	bls.n	800bcbc <_vfiprintf_r+0x1cc>
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d0c6      	beq.n	800bc46 <_vfiprintf_r+0x156>
 800bcb8:	9105      	str	r1, [sp, #20]
 800bcba:	e7c4      	b.n	800bc46 <_vfiprintf_r+0x156>
 800bcbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e7f0      	b.n	800bca8 <_vfiprintf_r+0x1b8>
 800bcc6:	ab03      	add	r3, sp, #12
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	462a      	mov	r2, r5
 800bccc:	4b12      	ldr	r3, [pc, #72]	@ (800bd18 <_vfiprintf_r+0x228>)
 800bcce:	a904      	add	r1, sp, #16
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f7fd fbc3 	bl	800945c <_printf_float>
 800bcd6:	4607      	mov	r7, r0
 800bcd8:	1c78      	adds	r0, r7, #1
 800bcda:	d1d6      	bne.n	800bc8a <_vfiprintf_r+0x19a>
 800bcdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcde:	07d9      	lsls	r1, r3, #31
 800bce0:	d405      	bmi.n	800bcee <_vfiprintf_r+0x1fe>
 800bce2:	89ab      	ldrh	r3, [r5, #12]
 800bce4:	059a      	lsls	r2, r3, #22
 800bce6:	d402      	bmi.n	800bcee <_vfiprintf_r+0x1fe>
 800bce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcea:	f7fe f899 	bl	8009e20 <__retarget_lock_release_recursive>
 800bcee:	89ab      	ldrh	r3, [r5, #12]
 800bcf0:	065b      	lsls	r3, r3, #25
 800bcf2:	f53f af1f 	bmi.w	800bb34 <_vfiprintf_r+0x44>
 800bcf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcf8:	e71e      	b.n	800bb38 <_vfiprintf_r+0x48>
 800bcfa:	ab03      	add	r3, sp, #12
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	462a      	mov	r2, r5
 800bd00:	4b05      	ldr	r3, [pc, #20]	@ (800bd18 <_vfiprintf_r+0x228>)
 800bd02:	a904      	add	r1, sp, #16
 800bd04:	4630      	mov	r0, r6
 800bd06:	f7fd fe41 	bl	800998c <_printf_i>
 800bd0a:	e7e4      	b.n	800bcd6 <_vfiprintf_r+0x1e6>
 800bd0c:	0800c11d 	.word	0x0800c11d
 800bd10:	0800c127 	.word	0x0800c127
 800bd14:	0800945d 	.word	0x0800945d
 800bd18:	0800bacb 	.word	0x0800bacb
 800bd1c:	0800c123 	.word	0x0800c123

0800bd20 <__swbuf_r>:
 800bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd22:	460e      	mov	r6, r1
 800bd24:	4614      	mov	r4, r2
 800bd26:	4605      	mov	r5, r0
 800bd28:	b118      	cbz	r0, 800bd32 <__swbuf_r+0x12>
 800bd2a:	6a03      	ldr	r3, [r0, #32]
 800bd2c:	b90b      	cbnz	r3, 800bd32 <__swbuf_r+0x12>
 800bd2e:	f7fe f80d 	bl	8009d4c <__sinit>
 800bd32:	69a3      	ldr	r3, [r4, #24]
 800bd34:	60a3      	str	r3, [r4, #8]
 800bd36:	89a3      	ldrh	r3, [r4, #12]
 800bd38:	071a      	lsls	r2, r3, #28
 800bd3a:	d501      	bpl.n	800bd40 <__swbuf_r+0x20>
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	b943      	cbnz	r3, 800bd52 <__swbuf_r+0x32>
 800bd40:	4621      	mov	r1, r4
 800bd42:	4628      	mov	r0, r5
 800bd44:	f000 f82a 	bl	800bd9c <__swsetup_r>
 800bd48:	b118      	cbz	r0, 800bd52 <__swbuf_r+0x32>
 800bd4a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bd4e:	4638      	mov	r0, r7
 800bd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd52:	6823      	ldr	r3, [r4, #0]
 800bd54:	6922      	ldr	r2, [r4, #16]
 800bd56:	1a98      	subs	r0, r3, r2
 800bd58:	6963      	ldr	r3, [r4, #20]
 800bd5a:	b2f6      	uxtb	r6, r6
 800bd5c:	4283      	cmp	r3, r0
 800bd5e:	4637      	mov	r7, r6
 800bd60:	dc05      	bgt.n	800bd6e <__swbuf_r+0x4e>
 800bd62:	4621      	mov	r1, r4
 800bd64:	4628      	mov	r0, r5
 800bd66:	f7ff f94d 	bl	800b004 <_fflush_r>
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	d1ed      	bne.n	800bd4a <__swbuf_r+0x2a>
 800bd6e:	68a3      	ldr	r3, [r4, #8]
 800bd70:	3b01      	subs	r3, #1
 800bd72:	60a3      	str	r3, [r4, #8]
 800bd74:	6823      	ldr	r3, [r4, #0]
 800bd76:	1c5a      	adds	r2, r3, #1
 800bd78:	6022      	str	r2, [r4, #0]
 800bd7a:	701e      	strb	r6, [r3, #0]
 800bd7c:	6962      	ldr	r2, [r4, #20]
 800bd7e:	1c43      	adds	r3, r0, #1
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d004      	beq.n	800bd8e <__swbuf_r+0x6e>
 800bd84:	89a3      	ldrh	r3, [r4, #12]
 800bd86:	07db      	lsls	r3, r3, #31
 800bd88:	d5e1      	bpl.n	800bd4e <__swbuf_r+0x2e>
 800bd8a:	2e0a      	cmp	r6, #10
 800bd8c:	d1df      	bne.n	800bd4e <__swbuf_r+0x2e>
 800bd8e:	4621      	mov	r1, r4
 800bd90:	4628      	mov	r0, r5
 800bd92:	f7ff f937 	bl	800b004 <_fflush_r>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d0d9      	beq.n	800bd4e <__swbuf_r+0x2e>
 800bd9a:	e7d6      	b.n	800bd4a <__swbuf_r+0x2a>

0800bd9c <__swsetup_r>:
 800bd9c:	b538      	push	{r3, r4, r5, lr}
 800bd9e:	4b29      	ldr	r3, [pc, #164]	@ (800be44 <__swsetup_r+0xa8>)
 800bda0:	4605      	mov	r5, r0
 800bda2:	6818      	ldr	r0, [r3, #0]
 800bda4:	460c      	mov	r4, r1
 800bda6:	b118      	cbz	r0, 800bdb0 <__swsetup_r+0x14>
 800bda8:	6a03      	ldr	r3, [r0, #32]
 800bdaa:	b90b      	cbnz	r3, 800bdb0 <__swsetup_r+0x14>
 800bdac:	f7fd ffce 	bl	8009d4c <__sinit>
 800bdb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdb4:	0719      	lsls	r1, r3, #28
 800bdb6:	d422      	bmi.n	800bdfe <__swsetup_r+0x62>
 800bdb8:	06da      	lsls	r2, r3, #27
 800bdba:	d407      	bmi.n	800bdcc <__swsetup_r+0x30>
 800bdbc:	2209      	movs	r2, #9
 800bdbe:	602a      	str	r2, [r5, #0]
 800bdc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdc4:	81a3      	strh	r3, [r4, #12]
 800bdc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdca:	e033      	b.n	800be34 <__swsetup_r+0x98>
 800bdcc:	0758      	lsls	r0, r3, #29
 800bdce:	d512      	bpl.n	800bdf6 <__swsetup_r+0x5a>
 800bdd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdd2:	b141      	cbz	r1, 800bde6 <__swsetup_r+0x4a>
 800bdd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdd8:	4299      	cmp	r1, r3
 800bdda:	d002      	beq.n	800bde2 <__swsetup_r+0x46>
 800bddc:	4628      	mov	r0, r5
 800bdde:	f7ff fdd3 	bl	800b988 <_free_r>
 800bde2:	2300      	movs	r3, #0
 800bde4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bdec:	81a3      	strh	r3, [r4, #12]
 800bdee:	2300      	movs	r3, #0
 800bdf0:	6063      	str	r3, [r4, #4]
 800bdf2:	6923      	ldr	r3, [r4, #16]
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	89a3      	ldrh	r3, [r4, #12]
 800bdf8:	f043 0308 	orr.w	r3, r3, #8
 800bdfc:	81a3      	strh	r3, [r4, #12]
 800bdfe:	6923      	ldr	r3, [r4, #16]
 800be00:	b94b      	cbnz	r3, 800be16 <__swsetup_r+0x7a>
 800be02:	89a3      	ldrh	r3, [r4, #12]
 800be04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be0c:	d003      	beq.n	800be16 <__swsetup_r+0x7a>
 800be0e:	4621      	mov	r1, r4
 800be10:	4628      	mov	r0, r5
 800be12:	f000 f83f 	bl	800be94 <__smakebuf_r>
 800be16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be1a:	f013 0201 	ands.w	r2, r3, #1
 800be1e:	d00a      	beq.n	800be36 <__swsetup_r+0x9a>
 800be20:	2200      	movs	r2, #0
 800be22:	60a2      	str	r2, [r4, #8]
 800be24:	6962      	ldr	r2, [r4, #20]
 800be26:	4252      	negs	r2, r2
 800be28:	61a2      	str	r2, [r4, #24]
 800be2a:	6922      	ldr	r2, [r4, #16]
 800be2c:	b942      	cbnz	r2, 800be40 <__swsetup_r+0xa4>
 800be2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be32:	d1c5      	bne.n	800bdc0 <__swsetup_r+0x24>
 800be34:	bd38      	pop	{r3, r4, r5, pc}
 800be36:	0799      	lsls	r1, r3, #30
 800be38:	bf58      	it	pl
 800be3a:	6962      	ldrpl	r2, [r4, #20]
 800be3c:	60a2      	str	r2, [r4, #8]
 800be3e:	e7f4      	b.n	800be2a <__swsetup_r+0x8e>
 800be40:	2000      	movs	r0, #0
 800be42:	e7f7      	b.n	800be34 <__swsetup_r+0x98>
 800be44:	200003d4 	.word	0x200003d4

0800be48 <__swhatbuf_r>:
 800be48:	b570      	push	{r4, r5, r6, lr}
 800be4a:	460c      	mov	r4, r1
 800be4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be50:	2900      	cmp	r1, #0
 800be52:	b096      	sub	sp, #88	@ 0x58
 800be54:	4615      	mov	r5, r2
 800be56:	461e      	mov	r6, r3
 800be58:	da0d      	bge.n	800be76 <__swhatbuf_r+0x2e>
 800be5a:	89a3      	ldrh	r3, [r4, #12]
 800be5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be60:	f04f 0100 	mov.w	r1, #0
 800be64:	bf14      	ite	ne
 800be66:	2340      	movne	r3, #64	@ 0x40
 800be68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be6c:	2000      	movs	r0, #0
 800be6e:	6031      	str	r1, [r6, #0]
 800be70:	602b      	str	r3, [r5, #0]
 800be72:	b016      	add	sp, #88	@ 0x58
 800be74:	bd70      	pop	{r4, r5, r6, pc}
 800be76:	466a      	mov	r2, sp
 800be78:	f000 f89c 	bl	800bfb4 <_fstat_r>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	dbec      	blt.n	800be5a <__swhatbuf_r+0x12>
 800be80:	9901      	ldr	r1, [sp, #4]
 800be82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be8a:	4259      	negs	r1, r3
 800be8c:	4159      	adcs	r1, r3
 800be8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be92:	e7eb      	b.n	800be6c <__swhatbuf_r+0x24>

0800be94 <__smakebuf_r>:
 800be94:	898b      	ldrh	r3, [r1, #12]
 800be96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be98:	079d      	lsls	r5, r3, #30
 800be9a:	4606      	mov	r6, r0
 800be9c:	460c      	mov	r4, r1
 800be9e:	d507      	bpl.n	800beb0 <__smakebuf_r+0x1c>
 800bea0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	6123      	str	r3, [r4, #16]
 800bea8:	2301      	movs	r3, #1
 800beaa:	6163      	str	r3, [r4, #20]
 800beac:	b003      	add	sp, #12
 800beae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beb0:	ab01      	add	r3, sp, #4
 800beb2:	466a      	mov	r2, sp
 800beb4:	f7ff ffc8 	bl	800be48 <__swhatbuf_r>
 800beb8:	9f00      	ldr	r7, [sp, #0]
 800beba:	4605      	mov	r5, r0
 800bebc:	4639      	mov	r1, r7
 800bebe:	4630      	mov	r0, r6
 800bec0:	f7fe ff9c 	bl	800adfc <_malloc_r>
 800bec4:	b948      	cbnz	r0, 800beda <__smakebuf_r+0x46>
 800bec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beca:	059a      	lsls	r2, r3, #22
 800becc:	d4ee      	bmi.n	800beac <__smakebuf_r+0x18>
 800bece:	f023 0303 	bic.w	r3, r3, #3
 800bed2:	f043 0302 	orr.w	r3, r3, #2
 800bed6:	81a3      	strh	r3, [r4, #12]
 800bed8:	e7e2      	b.n	800bea0 <__smakebuf_r+0xc>
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	6020      	str	r0, [r4, #0]
 800bede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bee2:	81a3      	strh	r3, [r4, #12]
 800bee4:	9b01      	ldr	r3, [sp, #4]
 800bee6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800beea:	b15b      	cbz	r3, 800bf04 <__smakebuf_r+0x70>
 800beec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bef0:	4630      	mov	r0, r6
 800bef2:	f000 f83b 	bl	800bf6c <_isatty_r>
 800bef6:	b128      	cbz	r0, 800bf04 <__smakebuf_r+0x70>
 800bef8:	89a3      	ldrh	r3, [r4, #12]
 800befa:	f023 0303 	bic.w	r3, r3, #3
 800befe:	f043 0301 	orr.w	r3, r3, #1
 800bf02:	81a3      	strh	r3, [r4, #12]
 800bf04:	89a3      	ldrh	r3, [r4, #12]
 800bf06:	431d      	orrs	r5, r3
 800bf08:	81a5      	strh	r5, [r4, #12]
 800bf0a:	e7cf      	b.n	800beac <__smakebuf_r+0x18>

0800bf0c <_raise_r>:
 800bf0c:	291f      	cmp	r1, #31
 800bf0e:	b538      	push	{r3, r4, r5, lr}
 800bf10:	4605      	mov	r5, r0
 800bf12:	460c      	mov	r4, r1
 800bf14:	d904      	bls.n	800bf20 <_raise_r+0x14>
 800bf16:	2316      	movs	r3, #22
 800bf18:	6003      	str	r3, [r0, #0]
 800bf1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf1e:	bd38      	pop	{r3, r4, r5, pc}
 800bf20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bf22:	b112      	cbz	r2, 800bf2a <_raise_r+0x1e>
 800bf24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf28:	b94b      	cbnz	r3, 800bf3e <_raise_r+0x32>
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	f000 f840 	bl	800bfb0 <_getpid_r>
 800bf30:	4622      	mov	r2, r4
 800bf32:	4601      	mov	r1, r0
 800bf34:	4628      	mov	r0, r5
 800bf36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf3a:	f000 b827 	b.w	800bf8c <_kill_r>
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d00a      	beq.n	800bf58 <_raise_r+0x4c>
 800bf42:	1c59      	adds	r1, r3, #1
 800bf44:	d103      	bne.n	800bf4e <_raise_r+0x42>
 800bf46:	2316      	movs	r3, #22
 800bf48:	6003      	str	r3, [r0, #0]
 800bf4a:	2001      	movs	r0, #1
 800bf4c:	e7e7      	b.n	800bf1e <_raise_r+0x12>
 800bf4e:	2100      	movs	r1, #0
 800bf50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bf54:	4620      	mov	r0, r4
 800bf56:	4798      	blx	r3
 800bf58:	2000      	movs	r0, #0
 800bf5a:	e7e0      	b.n	800bf1e <_raise_r+0x12>

0800bf5c <raise>:
 800bf5c:	4b02      	ldr	r3, [pc, #8]	@ (800bf68 <raise+0xc>)
 800bf5e:	4601      	mov	r1, r0
 800bf60:	6818      	ldr	r0, [r3, #0]
 800bf62:	f7ff bfd3 	b.w	800bf0c <_raise_r>
 800bf66:	bf00      	nop
 800bf68:	200003d4 	.word	0x200003d4

0800bf6c <_isatty_r>:
 800bf6c:	b538      	push	{r3, r4, r5, lr}
 800bf6e:	4d06      	ldr	r5, [pc, #24]	@ (800bf88 <_isatty_r+0x1c>)
 800bf70:	2300      	movs	r3, #0
 800bf72:	4604      	mov	r4, r0
 800bf74:	4608      	mov	r0, r1
 800bf76:	602b      	str	r3, [r5, #0]
 800bf78:	f7f5 fdba 	bl	8001af0 <_isatty>
 800bf7c:	1c43      	adds	r3, r0, #1
 800bf7e:	d102      	bne.n	800bf86 <_isatty_r+0x1a>
 800bf80:	682b      	ldr	r3, [r5, #0]
 800bf82:	b103      	cbz	r3, 800bf86 <_isatty_r+0x1a>
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	bd38      	pop	{r3, r4, r5, pc}
 800bf88:	20000c68 	.word	0x20000c68

0800bf8c <_kill_r>:
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	4d07      	ldr	r5, [pc, #28]	@ (800bfac <_kill_r+0x20>)
 800bf90:	2300      	movs	r3, #0
 800bf92:	4604      	mov	r4, r0
 800bf94:	4608      	mov	r0, r1
 800bf96:	4611      	mov	r1, r2
 800bf98:	602b      	str	r3, [r5, #0]
 800bf9a:	f7f5 fd39 	bl	8001a10 <_kill>
 800bf9e:	1c43      	adds	r3, r0, #1
 800bfa0:	d102      	bne.n	800bfa8 <_kill_r+0x1c>
 800bfa2:	682b      	ldr	r3, [r5, #0]
 800bfa4:	b103      	cbz	r3, 800bfa8 <_kill_r+0x1c>
 800bfa6:	6023      	str	r3, [r4, #0]
 800bfa8:	bd38      	pop	{r3, r4, r5, pc}
 800bfaa:	bf00      	nop
 800bfac:	20000c68 	.word	0x20000c68

0800bfb0 <_getpid_r>:
 800bfb0:	f7f5 bd26 	b.w	8001a00 <_getpid>

0800bfb4 <_fstat_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4d07      	ldr	r5, [pc, #28]	@ (800bfd4 <_fstat_r+0x20>)
 800bfb8:	2300      	movs	r3, #0
 800bfba:	4604      	mov	r4, r0
 800bfbc:	4608      	mov	r0, r1
 800bfbe:	4611      	mov	r1, r2
 800bfc0:	602b      	str	r3, [r5, #0]
 800bfc2:	f7f5 fd85 	bl	8001ad0 <_fstat>
 800bfc6:	1c43      	adds	r3, r0, #1
 800bfc8:	d102      	bne.n	800bfd0 <_fstat_r+0x1c>
 800bfca:	682b      	ldr	r3, [r5, #0]
 800bfcc:	b103      	cbz	r3, 800bfd0 <_fstat_r+0x1c>
 800bfce:	6023      	str	r3, [r4, #0]
 800bfd0:	bd38      	pop	{r3, r4, r5, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20000c68 	.word	0x20000c68

0800bfd8 <_init>:
 800bfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfda:	bf00      	nop
 800bfdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfde:	bc08      	pop	{r3}
 800bfe0:	469e      	mov	lr, r3
 800bfe2:	4770      	bx	lr

0800bfe4 <_fini>:
 800bfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe6:	bf00      	nop
 800bfe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfea:	bc08      	pop	{r3}
 800bfec:	469e      	mov	lr, r3
 800bfee:	4770      	bx	lr
