
self-balancing-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f68c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800f860  0800f860  00010860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fde8  0800fde8  00011590  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fde8  0800fde8  00010de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdf0  0800fdf0  00011590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdf0  0800fdf0  00010df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fdf4  0800fdf4  00010df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000590  20000000  0800fdf8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b4  20000590  08010388  00011590  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d44  08010388  00011d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011590  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c946  00000000  00000000  000115c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004642  00000000  00000000  0002df06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00032548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a0  00000000  00000000  00033bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d0e  00000000  00000000  00034d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a2a  00000000  00000000  0005ca86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e556c  00000000  00000000  0007d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00162a1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007518  00000000  00000000  00162a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00169f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000590 	.word	0x20000590
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f844 	.word	0x0800f844

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000594 	.word	0x20000594
 800020c:	0800f844 	.word	0x0800f844

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <MX_ADC1_Init+0x9c>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_ADC1_Init+0x98>)
 800109a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800109e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c2:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <MX_ADC1_Init+0xa0>)
 80010c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010dc:	2201      	movs	r2, #1
 80010de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010e2:	f003 fc23 	bl	800492c <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010ec:	f000 fbff 	bl	80018ee <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010f0:	2309      	movs	r3, #9
 80010f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001102:	f003 fdf5 	bl	8004cf0 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800110c:	f000 fbef 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200005ac 	.word	0x200005ac
 800111c:	40012000 	.word	0x40012000
 8001120:	0f000001 	.word	0x0f000001

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <HAL_ADC_MspInit+0x7c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d127      	bne.n	8001196 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a15      	ldr	r2, [pc, #84]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 800117e:	2302      	movs	r3, #2
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <HAL_ADC_MspInit+0x84>)
 8001192:	f004 fcfb 	bl	8005b8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40012000 	.word	0x40012000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_DMA_Init+0x3c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a0b      	ldr	r2, [pc, #44]	@ (80011e8 <MX_DMA_Init+0x3c>)
 80011bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_DMA_Init+0x3c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	200b      	movs	r0, #11
 80011d4:	f004 f895 	bl	8005302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011d8:	200b      	movs	r0, #11
 80011da:	f004 f8ae 	bl	800533a <HAL_NVIC_EnableIRQ>

}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	@ 0x28
 80011f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b73      	ldr	r3, [pc, #460]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a72      	ldr	r2, [pc, #456]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b70      	ldr	r3, [pc, #448]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b6c      	ldr	r3, [pc, #432]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a6b      	ldr	r2, [pc, #428]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b69      	ldr	r3, [pc, #420]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b65      	ldr	r3, [pc, #404]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a64      	ldr	r2, [pc, #400]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b62      	ldr	r3, [pc, #392]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b5e      	ldr	r3, [pc, #376]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a5d      	ldr	r2, [pc, #372]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b5b      	ldr	r3, [pc, #364]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b57      	ldr	r3, [pc, #348]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a56      	ldr	r2, [pc, #344]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b54      	ldr	r3, [pc, #336]	@ (80013d4 <MX_GPIO_Init+0x1e8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|LD2_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2130      	movs	r1, #48	@ 0x30
 8001292:	4851      	ldr	r0, [pc, #324]	@ (80013d8 <MX_GPIO_Init+0x1ec>)
 8001294:	f004 fe26 	bl	8005ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_DIR_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2111      	movs	r1, #17
 800129c:	484f      	ldr	r0, [pc, #316]	@ (80013dc <MX_GPIO_Init+0x1f0>)
 800129e:	f004 fe21 	bl	8005ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BTN2_GPIO_Port, LED_BTN2_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a8:	484d      	ldr	r0, [pc, #308]	@ (80013e0 <MX_GPIO_Init+0x1f4>)
 80012aa:	f004 fe1b 	bl	8005ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012b4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4846      	ldr	r0, [pc, #280]	@ (80013e0 <MX_GPIO_Init+0x1f4>)
 80012c6:	f004 fc61 	bl	8005b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC8 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80012ca:	f641 531d 	movw	r3, #7453	@ 0x1d1d
 80012ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4840      	ldr	r0, [pc, #256]	@ (80013e0 <MX_GPIO_Init+0x1f4>)
 80012e0:	f004 fc54 	bl	8005b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_DIR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|LD2_Pin;
 80012e4:	2330      	movs	r3, #48	@ 0x30
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4837      	ldr	r0, [pc, #220]	@ (80013d8 <MX_GPIO_Init+0x1ec>)
 80012fc:	f004 fc46 	bl	8005b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8001300:	2320      	movs	r3, #32
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001304:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130a:	2301      	movs	r3, #1
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4832      	ldr	r0, [pc, #200]	@ (80013e0 <MX_GPIO_Init+0x1f4>)
 8001316:	f004 fc39 	bl	8005b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 800131a:	2301      	movs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	482a      	ldr	r0, [pc, #168]	@ (80013dc <MX_GPIO_Init+0x1f0>)
 8001332:	f004 fc2b 	bl	8005b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001336:	f24f 0324 	movw	r3, #61476	@ 0xf024
 800133a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133c:	2303      	movs	r3, #3
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4824      	ldr	r0, [pc, #144]	@ (80013dc <MX_GPIO_Init+0x1f0>)
 800134c:	f004 fc1e 	bl	8005b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BTN2_Pin */
  GPIO_InitStruct.Pin = LED_BTN2_Pin;
 8001350:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BTN2_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	481d      	ldr	r0, [pc, #116]	@ (80013e0 <MX_GPIO_Init+0x1f4>)
 800136a:	f004 fc0f 	bl	8005b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800136e:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 8001372:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001374:	2303      	movs	r3, #3
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4815      	ldr	r0, [pc, #84]	@ (80013d8 <MX_GPIO_Init+0x1ec>)
 8001384:	f004 fc02 	bl	8005b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001388:	2304      	movs	r3, #4
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138c:	2303      	movs	r3, #3
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	4812      	ldr	r0, [pc, #72]	@ (80013e4 <MX_GPIO_Init+0x1f8>)
 800139c:	f004 fbf6 	bl	8005b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 80013a0:	2310      	movs	r3, #16
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4809      	ldr	r0, [pc, #36]	@ (80013dc <MX_GPIO_Init+0x1f0>)
 80013b8:	f004 fbe8 	bl	8005b8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	2017      	movs	r0, #23
 80013c2:	f003 ff9e 	bl	8005302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013c6:	2017      	movs	r0, #23
 80013c8:	f003 ffb7 	bl	800533a <HAL_NVIC_EnableIRQ>

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	@ 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020c00 	.word	0x40020c00

080013e8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <MX_I2C1_Init+0x50>)
 80013ee:	4a13      	ldr	r2, [pc, #76]	@ (800143c <MX_I2C1_Init+0x54>)
 80013f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013f2:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_I2C1_Init+0x50>)
 80013f4:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <MX_I2C1_Init+0x58>)
 80013f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_I2C1_Init+0x50>)
 8001406:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800140a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <MX_I2C1_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_I2C1_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	@ (8001438 <MX_I2C1_Init+0x50>)
 8001426:	f004 fda9 	bl	8005f7c <HAL_I2C_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001430:	f000 fa5d 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200005f4 	.word	0x200005f4
 800143c:	40005400 	.word	0x40005400
 8001440:	000186a0 	.word	0x000186a0

08001444 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a30      	ldr	r2, [pc, #192]	@ (8001524 <HAL_I2C_MspInit+0xe0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d15a      	bne.n	800151c <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b2f      	ldr	r3, [pc, #188]	@ (8001528 <HAL_I2C_MspInit+0xe4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a2e      	ldr	r2, [pc, #184]	@ (8001528 <HAL_I2C_MspInit+0xe4>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b2c      	ldr	r3, [pc, #176]	@ (8001528 <HAL_I2C_MspInit+0xe4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8001482:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001494:	2304      	movs	r3, #4
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4823      	ldr	r0, [pc, #140]	@ (800152c <HAL_I2C_MspInit+0xe8>)
 80014a0:	f004 fb74 	bl	8005b8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001528 <HAL_I2C_MspInit+0xe4>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001528 <HAL_I2C_MspInit+0xe4>)
 80014ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <HAL_I2C_MspInit+0xe4>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <HAL_I2C_MspInit+0xec>)
 80014c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001534 <HAL_I2C_MspInit+0xf0>)
 80014c4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <HAL_I2C_MspInit+0xec>)
 80014c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014cc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ce:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <HAL_I2C_MspInit+0xec>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d4:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <HAL_I2C_MspInit+0xec>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <HAL_I2C_MspInit+0xec>)
 80014dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014e0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <HAL_I2C_MspInit+0xec>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_I2C_MspInit+0xec>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <HAL_I2C_MspInit+0xec>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <HAL_I2C_MspInit+0xec>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <HAL_I2C_MspInit+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001500:	480b      	ldr	r0, [pc, #44]	@ (8001530 <HAL_I2C_MspInit+0xec>)
 8001502:	f003 ff35 	bl	8005370 <HAL_DMA_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800150c:	f000 f9ef 	bl	80018ee <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a07      	ldr	r2, [pc, #28]	@ (8001530 <HAL_I2C_MspInit+0xec>)
 8001514:	639a      	str	r2, [r3, #56]	@ 0x38
 8001516:	4a06      	ldr	r2, [pc, #24]	@ (8001530 <HAL_I2C_MspInit+0xec>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	@ 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40005400 	.word	0x40005400
 8001528:	40023800 	.word	0x40023800
 800152c:	40020400 	.word	0x40020400
 8001530:	20000648 	.word	0x20000648
 8001534:	40026010 	.word	0x40026010

08001538 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001540:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001544:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d013      	beq.n	8001578 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001550:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001554:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001558:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00b      	beq.n	8001578 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001560:	e000      	b.n	8001564 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001562:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001564:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f9      	beq.n	8001562 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800156e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001578:	687b      	ldr	r3, [r7, #4]
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158e:	f003 f937 	bl	8004800 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001592:	f000 f88f 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001596:	f7ff fe29 	bl	80011ec <MX_GPIO_Init>
  MX_DMA_Init();
 800159a:	f7ff fe07 	bl	80011ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 800159e:	f000 ff17 	bl	80023d0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80015a2:	f000 fc61 	bl	8001e68 <MX_TIM4_Init>
  MX_TIM6_Init();
 80015a6:	f000 fd0d 	bl	8001fc4 <MX_TIM6_Init>
  MX_SPI2_Init();
 80015aa:	f000 f9a7 	bl	80018fc <MX_SPI2_Init>
  MX_TIM2_Init();
 80015ae:	f000 fbaf 	bl	8001d10 <MX_TIM2_Init>
  MX_TIM7_Init();
 80015b2:	f000 fd3d 	bl	8002030 <MX_TIM7_Init>
  MX_TIM3_Init();
 80015b6:	f000 fc03 	bl	8001dc0 <MX_TIM3_Init>
  MX_TIM5_Init();
 80015ba:	f000 fca9 	bl	8001f10 <MX_TIM5_Init>
  MX_ADC1_Init();
 80015be:	f7ff fd5f 	bl	8001080 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015c2:	f7ff ff11 	bl	80013e8 <MX_I2C1_Init>
  MX_TIM10_Init();
 80015c6:	f000 fd69 	bl	800209c <MX_TIM10_Init>
  MX_USART6_UART_Init();
 80015ca:	f000 ff2b 	bl	8002424 <MX_USART6_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(50);
 80015ce:	2032      	movs	r0, #50	@ 0x32
 80015d0:	f003 f988 	bl	80048e4 <HAL_Delay>
  Robot_init(&robot);
 80015d4:	482b      	ldr	r0, [pc, #172]	@ (8001684 <main+0xfc>)
 80015d6:	f001 fc39 	bl	8002e4c <Robot_init>
//  MAX72_Add_Data(&display, &data);

//  display_data_t data2 = {&encoder_l.speed, PRINT_FLOAT, MINIDIGITS, DISPLAY_TYPE_FLOAT, 3};
//  MAX72_Add_Data(&display, &data2);

  display_data_t data3 = {&imu.angle, PRINT_FLOAT, FLOAT, DISPLAY_TYPE_FLOAT, 2};
 80015da:	4a2b      	ldr	r2, [pc, #172]	@ (8001688 <main+0x100>)
 80015dc:	463b      	mov	r3, r7
 80015de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015e2:	e883 0003 	stmia.w	r3, {r0, r1}
  MAX72_Add_Data(&display, &data3);
 80015e6:	463b      	mov	r3, r7
 80015e8:	4619      	mov	r1, r3
 80015ea:	4828      	ldr	r0, [pc, #160]	@ (800168c <main+0x104>)
 80015ec:	f002 f8f9 	bl	80037e2 <MAX72_Add_Data>

//  display_data_t data4 = {&power_module.voltage, PRINT_FLOAT, NO_SETTINGS, DISPLAY_TYPE_FLOAT, 2};
//  MAX72_Add_Data(&display, &data4);

  HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 80015f0:	2201      	movs	r2, #1
 80015f2:	4927      	ldr	r1, [pc, #156]	@ (8001690 <main+0x108>)
 80015f4:	4827      	ldr	r0, [pc, #156]	@ (8001694 <main+0x10c>)
 80015f6:	f008 f88d 	bl	8009714 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (IMU_Rx_Cplt) {
 80015fa:	4b27      	ldr	r3, [pc, #156]	@ (8001698 <main+0x110>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <main+0x86>
		  IMU_Rx_Cplt = 0; // Reset flag
 8001602:	4b25      	ldr	r3, [pc, #148]	@ (8001698 <main+0x110>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
		  IMU_Compute_Data(&imu); // Process received data
 8001608:	4824      	ldr	r0, [pc, #144]	@ (800169c <main+0x114>)
 800160a:	f001 f961 	bl	80028d0 <IMU_Compute_Data>
	  }

	  if (js_msg_ready) {
 800160e:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <main+0x118>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <main+0x9c>
		  js_msg_ready = 0; // Reset flag
 8001616:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <main+0x118>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
		  Robot_read_serial_msg(&robot, js_buffer);
 800161c:	4921      	ldr	r1, [pc, #132]	@ (80016a4 <main+0x11c>)
 800161e:	4819      	ldr	r0, [pc, #100]	@ (8001684 <main+0xfc>)
 8001620:	f001 fcb2 	bl	8002f88 <Robot_read_serial_msg>
	  }

	  static uint8_t last_cnt = 255;
	  if (last_cnt != tim6_update_cnt) { // Update every 100ms
 8001624:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <main+0x120>)
 8001626:	781a      	ldrb	r2, [r3, #0]
 8001628:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <main+0x124>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d0e4      	beq.n	80015fa <main+0x72>
	      last_cnt = tim6_update_cnt;
 8001630:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <main+0x124>)
 8001632:	781a      	ldrb	r2, [r3, #0]
 8001634:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <main+0x120>)
 8001636:	701a      	strb	r2, [r3, #0]

	      //TODO Activate
//	      PowerModule_update_data(&power_module);

	      MAX72_Update_Data(&display);
 8001638:	4814      	ldr	r0, [pc, #80]	@ (800168c <main+0x104>)
 800163a:	f002 f8fd 	bl	8003838 <MAX72_Update_Data>
	      if (tim6_update_cnt % 5 == 0) { // Update every 500ms
 800163e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <main+0x124>)
 8001640:	781a      	ldrb	r2, [r3, #0]
 8001642:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <main+0x128>)
 8001644:	fba3 1302 	umull	r1, r3, r3, r2
 8001648:	0899      	lsrs	r1, r3, #2
 800164a:	460b      	mov	r3, r1
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d111      	bne.n	800167c <main+0xf4>

	    	  // Send IMU data via UART for debugging
//	    	  transmit_IMU_data();
//			  show_calibration_messages();

	    	  if (tim6_update_cnt % 10 == 0) { // Every 1 second
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <main+0x124>)
 800165a:	781a      	ldrb	r2, [r3, #0]
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <main+0x128>)
 800165e:	fba3 1302 	umull	r1, r3, r3, r2
 8001662:	08d9      	lsrs	r1, r3, #3
 8001664:	460b      	mov	r3, r1
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d103      	bne.n	800167c <main+0xf4>
	    		  MAX72_Change_Data(&display,0);
 8001674:	2100      	movs	r1, #0
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <main+0x104>)
 8001678:	f002 f9de 	bl	8003a38 <MAX72_Change_Data>
	    	  }
	      }

	      MAX72_Scroll_Process(); // Process scrolling text
 800167c:	f002 ff02 	bl	8004484 <MAX72_Scroll_Process>
  {
 8001680:	e7bb      	b.n	80015fa <main+0x72>
 8001682:	bf00      	nop
 8001684:	200006bc 	.word	0x200006bc
 8001688:	0800f8e8 	.word	0x0800f8e8
 800168c:	20000b78 	.word	0x20000b78
 8001690:	200006aa 	.word	0x200006aa
 8001694:	20000978 	.word	0x20000978
 8001698:	200006a9 	.word	0x200006a9
 800169c:	20000a44 	.word	0x20000a44
 80016a0:	200006ba 	.word	0x200006ba
 80016a4:	200006ac 	.word	0x200006ac
 80016a8:	20000000 	.word	0x20000000
 80016ac:	200006a8 	.word	0x200006a8
 80016b0:	cccccccd 	.word	0xcccccccd

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b094      	sub	sp, #80	@ 0x50
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	2234      	movs	r2, #52	@ 0x34
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f00a fdd4 	bl	800c270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001788 <SystemClock_Config+0xd4>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	4a29      	ldr	r2, [pc, #164]	@ (8001788 <SystemClock_Config+0xd4>)
 80016e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e8:	4b27      	ldr	r3, [pc, #156]	@ (8001788 <SystemClock_Config+0xd4>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016f4:	2300      	movs	r3, #0
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4b24      	ldr	r3, [pc, #144]	@ (800178c <SystemClock_Config+0xd8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001700:	4a22      	ldr	r2, [pc, #136]	@ (800178c <SystemClock_Config+0xd8>)
 8001702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b20      	ldr	r3, [pc, #128]	@ (800178c <SystemClock_Config+0xd8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001714:	2302      	movs	r3, #2
 8001716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001718:	2301      	movs	r3, #1
 800171a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800171c:	2310      	movs	r3, #16
 800171e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001720:	2302      	movs	r3, #2
 8001722:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001724:	2300      	movs	r3, #0
 8001726:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001728:	2310      	movs	r3, #16
 800172a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800172c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001730:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001732:	2304      	movs	r3, #4
 8001734:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001736:	2302      	movs	r3, #2
 8001738:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800173a:	2302      	movs	r3, #2
 800173c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	4618      	mov	r0, r3
 8001744:	f006 fa5c 	bl	8007c00 <HAL_RCC_OscConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800174e:	f000 f8ce 	bl	80018ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2302      	movs	r3, #2
 8001758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	2102      	movs	r1, #2
 800176e:	4618      	mov	r0, r3
 8001770:	f005 fefc 	bl	800756c <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800177a:	f000 f8b8 	bl	80018ee <Error_Handler>
  }
}
 800177e:	bf00      	nop
 8001780:	3750      	adds	r7, #80	@ 0x50
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000

08001790 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a18      	ldr	r2, [pc, #96]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d10d      	bne.n	80017be <HAL_TIM_PeriodElapsedCallback+0x2e>
		tim6_update_cnt++;
 80017a2:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017ac:	701a      	strb	r2, [r3, #0]
		if (tim6_update_cnt == 250){
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2bfa      	cmp	r3, #250	@ 0xfa
 80017b4:	d11f      	bne.n	80017f6 <HAL_TIM_PeriodElapsedCallback+0x66>
			tim6_update_cnt = 0;
 80017b6:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
		speed_control(&stepper_l);
	} else if (htim->Instance == TIM10){
		// Read from IMU
		IMU_ReadData(&imu);
	}
}
 80017bc:	e01b      	b.n	80017f6 <HAL_TIM_PeriodElapsedCallback+0x66>
	} else if (htim->Instance == TIM7) {
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a11      	ldr	r2, [pc, #68]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d10e      	bne.n	80017e6 <HAL_TIM_PeriodElapsedCallback+0x56>
    if (pid.active){
 80017c8:	4b10      	ldr	r3, [pc, #64]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80017ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_TIM_PeriodElapsedCallback+0x48>
      PID_Update(&pid);
 80017d2:	480e      	ldr	r0, [pc, #56]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80017d4:	f001 fcbe 	bl	8003154 <PID_Update>
		speed_control(&stepper_r);
 80017d8:	480d      	ldr	r0, [pc, #52]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80017da:	f001 fdcf 	bl	800337c <speed_control>
		speed_control(&stepper_l);
 80017de:	480d      	ldr	r0, [pc, #52]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80017e0:	f001 fdcc 	bl	800337c <speed_control>
}
 80017e4:	e007      	b.n	80017f6 <HAL_TIM_PeriodElapsedCallback+0x66>
	} else if (htim->Instance == TIM10){
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d102      	bne.n	80017f6 <HAL_TIM_PeriodElapsedCallback+0x66>
		IMU_ReadData(&imu);
 80017f0:	480a      	ldr	r0, [pc, #40]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80017f2:	f001 f858 	bl	80028a6 <IMU_ReadData>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40001000 	.word	0x40001000
 8001804:	200006a8 	.word	0x200006a8
 8001808:	40001400 	.word	0x40001400
 800180c:	20000b34 	.word	0x20000b34
 8001810:	200009e4 	.word	0x200009e4
 8001814:	20000a20 	.word	0x20000a20
 8001818:	40014400 	.word	0x40014400
 800181c:	20000a44 	.word	0x20000a44

08001820 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_5) {
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	2b20      	cmp	r3, #32
 800182e:	d101      	bne.n	8001834 <HAL_GPIO_EXTI_Callback+0x14>
    on_click();
 8001830:	f000 fea8 	bl	8002584 <on_click>
  }
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	if (hi2c == imu.hi2c) {
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	429a      	cmp	r2, r3
 800184c:	d102      	bne.n	8001854 <HAL_I2C_MemRxCpltCallback+0x18>
		// Data received from IMU, process it
		IMU_Rx_Cplt = 1; // Set flag to indicate data is ready
 800184e:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
	}
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	20000a44 	.word	0x20000a44
 8001864:	200006a9 	.word	0x200006a9

08001868 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a11      	ldr	r2, [pc, #68]	@ (80018bc <HAL_UART_RxCpltCallback+0x54>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d11c      	bne.n	80018b4 <HAL_UART_RxCpltCallback+0x4c>

		js_buffer[rx_index++] = rx_byte;
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_UART_RxCpltCallback+0x58>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	b2d1      	uxtb	r1, r2
 8001882:	4a0f      	ldr	r2, [pc, #60]	@ (80018c0 <HAL_UART_RxCpltCallback+0x58>)
 8001884:	7011      	strb	r1, [r2, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <HAL_UART_RxCpltCallback+0x5c>)
 800188a:	7819      	ldrb	r1, [r3, #0]
 800188c:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <HAL_UART_RxCpltCallback+0x60>)
 800188e:	5499      	strb	r1, [r3, r2]

		if (rx_index >= 13) {
 8001890:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <HAL_UART_RxCpltCallback+0x58>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b0c      	cmp	r3, #12
 8001896:	d908      	bls.n	80018aa <HAL_UART_RxCpltCallback+0x42>
			js_buffer[13] = '\0';     // chiudi stringa
 8001898:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <HAL_UART_RxCpltCallback+0x60>)
 800189a:	2200      	movs	r2, #0
 800189c:	735a      	strb	r2, [r3, #13]
			js_msg_ready = 1;         // messaggio pronto
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <HAL_UART_RxCpltCallback+0x64>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
			rx_index = 0;             // ricomincia
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_UART_RxCpltCallback+0x58>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
		}

		// riparti sempre per il prossimo byte
		HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 80018aa:	2201      	movs	r2, #1
 80018ac:	4905      	ldr	r1, [pc, #20]	@ (80018c4 <HAL_UART_RxCpltCallback+0x5c>)
 80018ae:	4808      	ldr	r0, [pc, #32]	@ (80018d0 <HAL_UART_RxCpltCallback+0x68>)
 80018b0:	f007 ff30 	bl	8009714 <HAL_UART_Receive_IT>

	}
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40011400 	.word	0x40011400
 80018c0:	200006ab 	.word	0x200006ab
 80018c4:	200006aa 	.word	0x200006aa
 80018c8:	200006ac 	.word	0x200006ac
 80018cc:	200006ba 	.word	0x200006ba
 80018d0:	20000978 	.word	0x20000978

080018d4 <__io_putchar>:

 int __io_putchar(int ch){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 	ITM_SendChar(ch);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fe2a 	bl	8001538 <ITM_SendChar>
 	return ch;
 80018e4:	687b      	ldr	r3, [r7, #4]
 }
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f2:	b672      	cpsid	i
}
 80018f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f6:	bf00      	nop
 80018f8:	e7fd      	b.n	80018f6 <Error_Handler+0x8>
	...

080018fc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001900:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <MX_SPI2_Init+0x68>)
 8001902:	4a19      	ldr	r2, [pc, #100]	@ (8001968 <MX_SPI2_Init+0x6c>)
 8001904:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001906:	4b17      	ldr	r3, [pc, #92]	@ (8001964 <MX_SPI2_Init+0x68>)
 8001908:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800190c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <MX_SPI2_Init+0x68>)
 8001910:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001914:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001916:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <MX_SPI2_Init+0x68>)
 8001918:	2200      	movs	r2, #0
 800191a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <MX_SPI2_Init+0x68>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <MX_SPI2_Init+0x68>)
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <MX_SPI2_Init+0x68>)
 800192a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800192e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001930:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <MX_SPI2_Init+0x68>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001936:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <MX_SPI2_Init+0x68>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <MX_SPI2_Init+0x68>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <MX_SPI2_Init+0x68>)
 8001944:	2200      	movs	r2, #0
 8001946:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <MX_SPI2_Init+0x68>)
 800194a:	220a      	movs	r2, #10
 800194c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	@ (8001964 <MX_SPI2_Init+0x68>)
 8001950:	f006 fbf4 	bl	800813c <HAL_SPI_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800195a:	f7ff ffc8 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200006dc 	.word	0x200006dc
 8001968:	40003800 	.word	0x40003800

0800196c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	@ 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a28      	ldr	r2, [pc, #160]	@ (8001a2c <HAL_SPI_MspInit+0xc0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d14a      	bne.n	8001a24 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b27      	ldr	r3, [pc, #156]	@ (8001a30 <HAL_SPI_MspInit+0xc4>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	4a26      	ldr	r2, [pc, #152]	@ (8001a30 <HAL_SPI_MspInit+0xc4>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800199c:	6413      	str	r3, [r2, #64]	@ 0x40
 800199e:	4b24      	ldr	r3, [pc, #144]	@ (8001a30 <HAL_SPI_MspInit+0xc4>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <HAL_SPI_MspInit+0xc4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a30 <HAL_SPI_MspInit+0xc4>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <HAL_SPI_MspInit+0xc4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_SPI_MspInit+0xc4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a18      	ldr	r2, [pc, #96]	@ (8001a30 <HAL_SPI_MspInit+0xc4>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <HAL_SPI_MspInit+0xc4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019e2:	2302      	movs	r3, #2
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80019f2:	2307      	movs	r3, #7
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	480d      	ldr	r0, [pc, #52]	@ (8001a34 <HAL_SPI_MspInit+0xc8>)
 80019fe:	f004 f8c5 	bl	8005b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 8001a02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a14:	2305      	movs	r3, #5
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4806      	ldr	r0, [pc, #24]	@ (8001a38 <HAL_SPI_MspInit+0xcc>)
 8001a20:	f004 f8b4 	bl	8005b8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	@ 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40003800 	.word	0x40003800
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020400 	.word	0x40020400

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a08      	ldr	r2, [pc, #32]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a7a:	2007      	movs	r0, #7
 8001a7c:	f003 fc36 	bl	80052ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <NMI_Handler+0x4>

08001a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae2:	f002 fedf 	bl	80048a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <DMA1_Stream0_IRQHandler+0x10>)
 8001af2:	f003 fdd5 	bl	80056a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000648 	.word	0x20000648

08001b00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001b04:	2020      	movs	r0, #32
 8001b06:	f004 fa21 	bl	8005f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001b14:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b16:	f007 f8c7 	bl	8008ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200008e8 	.word	0x200008e8

08001b24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b28:	4802      	ldr	r0, [pc, #8]	@ (8001b34 <TIM6_DAC_IRQHandler+0x10>)
 8001b2a:	f007 f8bd 	bl	8008ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000858 	.word	0x20000858

08001b38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b3c:	4802      	ldr	r0, [pc, #8]	@ (8001b48 <TIM7_IRQHandler+0x10>)
 8001b3e:	f007 f8b3 	bl	8008ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200008a0 	.word	0x200008a0

08001b4c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b50:	4802      	ldr	r0, [pc, #8]	@ (8001b5c <USART6_IRQHandler+0x10>)
 8001b52:	f007 fe05 	bl	8009760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000978 	.word	0x20000978

08001b60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return 1;
 8001b64:	2301      	movs	r3, #1
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_kill>:

int _kill(int pid, int sig)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b7a:	f00a fbdd 	bl	800c338 <__errno>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2216      	movs	r2, #22
 8001b82:	601a      	str	r2, [r3, #0]
  return -1;
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_exit>:

void _exit (int status)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ffe7 	bl	8001b70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ba2:	bf00      	nop
 8001ba4:	e7fd      	b.n	8001ba2 <_exit+0x12>

08001ba6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e00a      	b.n	8001bce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bb8:	f3af 8000 	nop.w
 8001bbc:	4601      	mov	r1, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	60ba      	str	r2, [r7, #8]
 8001bc4:	b2ca      	uxtb	r2, r1
 8001bc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	dbf0      	blt.n	8001bb8 <_read+0x12>
  }

  return len;
 8001bd6:	687b      	ldr	r3, [r7, #4]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e009      	b.n	8001c06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	60ba      	str	r2, [r7, #8]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fe6a 	bl	80018d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3301      	adds	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	dbf1      	blt.n	8001bf2 <_write+0x12>
  }
  return len;
 8001c0e:	687b      	ldr	r3, [r7, #4]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_close>:

int _close(int file)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c40:	605a      	str	r2, [r3, #4]
  return 0;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_isatty>:

int _isatty(int file)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c58:	2301      	movs	r3, #1
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c88:	4a14      	ldr	r2, [pc, #80]	@ (8001cdc <_sbrk+0x5c>)
 8001c8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <_sbrk+0x60>)
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c94:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <_sbrk+0x64>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ce8 <_sbrk+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d207      	bcs.n	8001cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb0:	f00a fb42 	bl	800c338 <__errno>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cbe:	e009      	b.n	8001cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc6:	4b07      	ldr	r3, [pc, #28]	@ (8001ce4 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a05      	ldr	r2, [pc, #20]	@ (8001ce4 <_sbrk+0x64>)
 8001cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20020000 	.word	0x20020000
 8001ce0:	00000400 	.word	0x00000400
 8001ce4:	20000734 	.word	0x20000734
 8001ce8:	20000d48 	.word	0x20000d48

08001cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <SystemInit+0x20>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cf6:	4a05      	ldr	r2, [pc, #20]	@ (8001d0c <SystemInit+0x20>)
 8001cf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d16:	f107 0320 	add.w	r3, r7, #32
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	611a      	str	r2, [r3, #16]
 8001d2e:	615a      	str	r2, [r3, #20]
 8001d30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d32:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <MX_TIM2_Init+0xac>)
 8001d34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d3a:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <MX_TIM2_Init+0xac>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <MX_TIM2_Init+0xac>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d46:	4b1d      	ldr	r3, [pc, #116]	@ (8001dbc <MX_TIM2_Init+0xac>)
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <MX_TIM2_Init+0xac>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <MX_TIM2_Init+0xac>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d5a:	4818      	ldr	r0, [pc, #96]	@ (8001dbc <MX_TIM2_Init+0xac>)
 8001d5c:	f006 fd58 	bl	8008810 <HAL_TIM_PWM_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d66:	f7ff fdc2 	bl	80018ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d72:	f107 0320 	add.w	r3, r7, #32
 8001d76:	4619      	mov	r1, r3
 8001d78:	4810      	ldr	r0, [pc, #64]	@ (8001dbc <MX_TIM2_Init+0xac>)
 8001d7a:	f007 fbeb 	bl	8009554 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d84:	f7ff fdb3 	bl	80018ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d88:	2360      	movs	r3, #96	@ 0x60
 8001d8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4807      	ldr	r0, [pc, #28]	@ (8001dbc <MX_TIM2_Init+0xac>)
 8001da0:	f007 f872 	bl	8008e88 <HAL_TIM_PWM_ConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001daa:	f7ff fda0 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dae:	4803      	ldr	r0, [pc, #12]	@ (8001dbc <MX_TIM2_Init+0xac>)
 8001db0:	f000 fab0 	bl	8002314 <HAL_TIM_MspPostInit>

}
 8001db4:	bf00      	nop
 8001db6:	3728      	adds	r7, #40	@ 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000738 	.word	0x20000738

08001dc0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08c      	sub	sp, #48	@ 0x30
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	2224      	movs	r2, #36	@ 0x24
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f00a fa4e 	bl	800c270 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ddc:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <MX_TIM3_Init+0xa0>)
 8001dde:	4a21      	ldr	r2, [pc, #132]	@ (8001e64 <MX_TIM3_Init+0xa4>)
 8001de0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001de2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <MX_TIM3_Init+0xa0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <MX_TIM3_Init+0xa0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <MX_TIM3_Init+0xa0>)
 8001df0:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001df4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <MX_TIM3_Init+0xa0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	@ (8001e60 <MX_TIM3_Init+0xa0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e02:	2303      	movs	r3, #3
 8001e04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480c      	ldr	r0, [pc, #48]	@ (8001e60 <MX_TIM3_Init+0xa0>)
 8001e2e:	f006 fe07 	bl	8008a40 <HAL_TIM_Encoder_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e38:	f7ff fd59 	bl	80018ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_TIM3_Init+0xa0>)
 8001e4a:	f007 fb83 	bl	8009554 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e54:	f7ff fd4b 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	3730      	adds	r7, #48	@ 0x30
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000780 	.word	0x20000780
 8001e64:	40000400 	.word	0x40000400

08001e68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	@ 0x30
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	2224      	movs	r2, #36	@ 0x24
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f00a f9fa 	bl	800c270 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e84:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <MX_TIM4_Init+0xa0>)
 8001e86:	4a21      	ldr	r2, [pc, #132]	@ (8001f0c <MX_TIM4_Init+0xa4>)
 8001e88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <MX_TIM4_Init+0xa0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e90:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <MX_TIM4_Init+0xa0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8191;
 8001e96:	4b1c      	ldr	r3, [pc, #112]	@ (8001f08 <MX_TIM4_Init+0xa0>)
 8001e98:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001e9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <MX_TIM4_Init+0xa0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea4:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <MX_TIM4_Init+0xa0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	480c      	ldr	r0, [pc, #48]	@ (8001f08 <MX_TIM4_Init+0xa0>)
 8001ed6:	f006 fdb3 	bl	8008a40 <HAL_TIM_Encoder_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ee0:	f7ff fd05 	bl	80018ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <MX_TIM4_Init+0xa0>)
 8001ef2:	f007 fb2f 	bl	8009554 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001efc:	f7ff fcf7 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	3730      	adds	r7, #48	@ 0x30
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200007c8 	.word	0x200007c8
 8001f0c:	40000800 	.word	0x40000800

08001f10 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	@ 0x28
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f16:	f107 0320 	add.w	r3, r7, #32
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]
 8001f2e:	615a      	str	r2, [r3, #20]
 8001f30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f32:	4b22      	ldr	r3, [pc, #136]	@ (8001fbc <MX_TIM5_Init+0xac>)
 8001f34:	4a22      	ldr	r2, [pc, #136]	@ (8001fc0 <MX_TIM5_Init+0xb0>)
 8001f36:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f38:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <MX_TIM5_Init+0xac>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fbc <MX_TIM5_Init+0xac>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <MX_TIM5_Init+0xac>)
 8001f46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f4a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <MX_TIM5_Init+0xac>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <MX_TIM5_Init+0xac>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f58:	4818      	ldr	r0, [pc, #96]	@ (8001fbc <MX_TIM5_Init+0xac>)
 8001f5a:	f006 fc59 	bl	8008810 <HAL_TIM_PWM_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001f64:	f7ff fcc3 	bl	80018ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f70:	f107 0320 	add.w	r3, r7, #32
 8001f74:	4619      	mov	r1, r3
 8001f76:	4811      	ldr	r0, [pc, #68]	@ (8001fbc <MX_TIM5_Init+0xac>)
 8001f78:	f007 faec 	bl	8009554 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001f82:	f7ff fcb4 	bl	80018ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f86:	2360      	movs	r3, #96	@ 0x60
 8001f88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	2200      	movs	r2, #0
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4807      	ldr	r0, [pc, #28]	@ (8001fbc <MX_TIM5_Init+0xac>)
 8001f9e:	f006 ff73 	bl	8008e88 <HAL_TIM_PWM_ConfigChannel>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001fa8:	f7ff fca1 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001fac:	4803      	ldr	r0, [pc, #12]	@ (8001fbc <MX_TIM5_Init+0xac>)
 8001fae:	f000 f9b1 	bl	8002314 <HAL_TIM_MspPostInit>

}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	@ 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000810 	.word	0x20000810
 8001fc0:	40000c00 	.word	0x40000c00

08001fc4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fca:	463b      	mov	r3, r7
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fd2:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <MX_TIM6_Init+0x64>)
 8001fd4:	4a15      	ldr	r2, [pc, #84]	@ (800202c <MX_TIM6_Init+0x68>)
 8001fd6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <MX_TIM6_Init+0x64>)
 8001fda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fde:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <MX_TIM6_Init+0x64>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <MX_TIM6_Init+0x64>)
 8001fe8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001fec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <MX_TIM6_Init+0x64>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ff4:	480c      	ldr	r0, [pc, #48]	@ (8002028 <MX_TIM6_Init+0x64>)
 8001ff6:	f006 fb4b 	bl	8008690 <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002000:	f7ff fc75 	bl	80018ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800200c:	463b      	mov	r3, r7
 800200e:	4619      	mov	r1, r3
 8002010:	4805      	ldr	r0, [pc, #20]	@ (8002028 <MX_TIM6_Init+0x64>)
 8002012:	f007 fa9f 	bl	8009554 <HAL_TIMEx_MasterConfigSynchronization>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800201c:	f7ff fc67 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000858 	.word	0x20000858
 800202c:	40001000 	.word	0x40001000

08002030 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002036:	463b      	mov	r3, r7
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800203e:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <MX_TIM7_Init+0x64>)
 8002040:	4a15      	ldr	r2, [pc, #84]	@ (8002098 <MX_TIM7_Init+0x68>)
 8002042:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 99;
 8002044:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <MX_TIM7_Init+0x64>)
 8002046:	2263      	movs	r2, #99	@ 0x63
 8002048:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204a:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <MX_TIM7_Init+0x64>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8002050:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <MX_TIM7_Init+0x64>)
 8002052:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002056:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002058:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <MX_TIM7_Init+0x64>)
 800205a:	2200      	movs	r2, #0
 800205c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800205e:	480d      	ldr	r0, [pc, #52]	@ (8002094 <MX_TIM7_Init+0x64>)
 8002060:	f006 fb16 	bl	8008690 <HAL_TIM_Base_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800206a:	f7ff fc40 	bl	80018ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002076:	463b      	mov	r3, r7
 8002078:	4619      	mov	r1, r3
 800207a:	4806      	ldr	r0, [pc, #24]	@ (8002094 <MX_TIM7_Init+0x64>)
 800207c:	f007 fa6a 	bl	8009554 <HAL_TIMEx_MasterConfigSynchronization>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002086:	f7ff fc32 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200008a0 	.word	0x200008a0
 8002098:	40001400 	.word	0x40001400

0800209c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80020a0:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <MX_TIM10_Init+0x40>)
 80020a2:	4a0f      	ldr	r2, [pc, #60]	@ (80020e0 <MX_TIM10_Init+0x44>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 19;
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <MX_TIM10_Init+0x40>)
 80020a8:	2213      	movs	r2, #19
 80020aa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <MX_TIM10_Init+0x40>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 80020b2:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <MX_TIM10_Init+0x40>)
 80020b4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80020b8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ba:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <MX_TIM10_Init+0x40>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <MX_TIM10_Init+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80020c6:	4805      	ldr	r0, [pc, #20]	@ (80020dc <MX_TIM10_Init+0x40>)
 80020c8:	f006 fae2 	bl	8008690 <HAL_TIM_Base_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80020d2:	f7ff fc0c 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200008e8 	.word	0x200008e8
 80020e0:	40014400 	.word	0x40014400

080020e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b13      	ldr	r3, [pc, #76]	@ (8002148 <HAL_TIM_PWM_MspInit+0x64>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <HAL_TIM_PWM_MspInit+0x64>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6413      	str	r3, [r2, #64]	@ 0x40
 8002106:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <HAL_TIM_PWM_MspInit+0x64>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002112:	e012      	b.n	800213a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0c      	ldr	r2, [pc, #48]	@ (800214c <HAL_TIM_PWM_MspInit+0x68>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10d      	bne.n	800213a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <HAL_TIM_PWM_MspInit+0x64>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	4a08      	ldr	r2, [pc, #32]	@ (8002148 <HAL_TIM_PWM_MspInit+0x64>)
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	6413      	str	r3, [r2, #64]	@ 0x40
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_TIM_PWM_MspInit+0x64>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	40000c00 	.word	0x40000c00

08002150 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	@ 0x30
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a32      	ldr	r2, [pc, #200]	@ (8002238 <HAL_TIM_Encoder_MspInit+0xe8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d12c      	bne.n	80021cc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	4b31      	ldr	r3, [pc, #196]	@ (800223c <HAL_TIM_Encoder_MspInit+0xec>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	4a30      	ldr	r2, [pc, #192]	@ (800223c <HAL_TIM_Encoder_MspInit+0xec>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6413      	str	r3, [r2, #64]	@ 0x40
 8002182:	4b2e      	ldr	r3, [pc, #184]	@ (800223c <HAL_TIM_Encoder_MspInit+0xec>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	61bb      	str	r3, [r7, #24]
 800218c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	4b2a      	ldr	r3, [pc, #168]	@ (800223c <HAL_TIM_Encoder_MspInit+0xec>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	4a29      	ldr	r2, [pc, #164]	@ (800223c <HAL_TIM_Encoder_MspInit+0xec>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	@ 0x30
 800219e:	4b27      	ldr	r3, [pc, #156]	@ (800223c <HAL_TIM_Encoder_MspInit+0xec>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 80021aa:	23c0      	movs	r3, #192	@ 0xc0
 80021ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021ba:	2302      	movs	r3, #2
 80021bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	4619      	mov	r1, r3
 80021c4:	481e      	ldr	r0, [pc, #120]	@ (8002240 <HAL_TIM_Encoder_MspInit+0xf0>)
 80021c6:	f003 fce1 	bl	8005b8c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80021ca:	e030      	b.n	800222e <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xf4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d12b      	bne.n	800222e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <HAL_TIM_Encoder_MspInit+0xec>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	4a17      	ldr	r2, [pc, #92]	@ (800223c <HAL_TIM_Encoder_MspInit+0xec>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <HAL_TIM_Encoder_MspInit+0xec>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <HAL_TIM_Encoder_MspInit+0xec>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4a10      	ldr	r2, [pc, #64]	@ (800223c <HAL_TIM_Encoder_MspInit+0xec>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <HAL_TIM_Encoder_MspInit+0xec>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin|ENC2_CH2_Pin;
 800220e:	23c0      	movs	r3, #192	@ 0xc0
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800221e:	2302      	movs	r3, #2
 8002220:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	4619      	mov	r1, r3
 8002228:	4807      	ldr	r0, [pc, #28]	@ (8002248 <HAL_TIM_Encoder_MspInit+0xf8>)
 800222a:	f003 fcaf 	bl	8005b8c <HAL_GPIO_Init>
}
 800222e:	bf00      	nop
 8002230:	3730      	adds	r7, #48	@ 0x30
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40000400 	.word	0x40000400
 800223c:	40023800 	.word	0x40023800
 8002240:	40020000 	.word	0x40020000
 8002244:	40000800 	.word	0x40000800
 8002248:	40020400 	.word	0x40020400

0800224c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2a      	ldr	r2, [pc, #168]	@ (8002304 <HAL_TIM_Base_MspInit+0xb8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d116      	bne.n	800228c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	4b29      	ldr	r3, [pc, #164]	@ (8002308 <HAL_TIM_Base_MspInit+0xbc>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	4a28      	ldr	r2, [pc, #160]	@ (8002308 <HAL_TIM_Base_MspInit+0xbc>)
 8002268:	f043 0310 	orr.w	r3, r3, #16
 800226c:	6413      	str	r3, [r2, #64]	@ 0x40
 800226e:	4b26      	ldr	r3, [pc, #152]	@ (8002308 <HAL_TIM_Base_MspInit+0xbc>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	2036      	movs	r0, #54	@ 0x36
 8002280:	f003 f83f 	bl	8005302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002284:	2036      	movs	r0, #54	@ 0x36
 8002286:	f003 f858 	bl	800533a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800228a:	e036      	b.n	80022fa <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM7)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1e      	ldr	r2, [pc, #120]	@ (800230c <HAL_TIM_Base_MspInit+0xc0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d116      	bne.n	80022c4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	4b1b      	ldr	r3, [pc, #108]	@ (8002308 <HAL_TIM_Base_MspInit+0xbc>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	4a1a      	ldr	r2, [pc, #104]	@ (8002308 <HAL_TIM_Base_MspInit+0xbc>)
 80022a0:	f043 0320 	orr.w	r3, r3, #32
 80022a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a6:	4b18      	ldr	r3, [pc, #96]	@ (8002308 <HAL_TIM_Base_MspInit+0xbc>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	2037      	movs	r0, #55	@ 0x37
 80022b8:	f003 f823 	bl	8005302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022bc:	2037      	movs	r0, #55	@ 0x37
 80022be:	f003 f83c 	bl	800533a <HAL_NVIC_EnableIRQ>
}
 80022c2:	e01a      	b.n	80022fa <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a11      	ldr	r2, [pc, #68]	@ (8002310 <HAL_TIM_Base_MspInit+0xc4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d115      	bne.n	80022fa <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <HAL_TIM_Base_MspInit+0xbc>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002308 <HAL_TIM_Base_MspInit+0xbc>)
 80022d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022de:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <HAL_TIM_Base_MspInit+0xbc>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	2019      	movs	r0, #25
 80022f0:	f003 f807 	bl	8005302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022f4:	2019      	movs	r0, #25
 80022f6:	f003 f820 	bl	800533a <HAL_NVIC_EnableIRQ>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40001000 	.word	0x40001000
 8002308:	40023800 	.word	0x40023800
 800230c:	40001400 	.word	0x40001400
 8002310:	40014400 	.word	0x40014400

08002314 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	@ 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002334:	d11e      	bne.n	8002374 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	4b22      	ldr	r3, [pc, #136]	@ (80023c4 <HAL_TIM_MspPostInit+0xb0>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a21      	ldr	r2, [pc, #132]	@ (80023c4 <HAL_TIM_MspPostInit+0xb0>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b1f      	ldr	r3, [pc, #124]	@ (80023c4 <HAL_TIM_MspPostInit+0xb0>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M2_PUL_Pin;
 8002352:	2302      	movs	r3, #2
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002362:	2301      	movs	r3, #1
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_PUL_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	4816      	ldr	r0, [pc, #88]	@ (80023c8 <HAL_TIM_MspPostInit+0xb4>)
 800236e:	f003 fc0d 	bl	8005b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002372:	e022      	b.n	80023ba <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a14      	ldr	r2, [pc, #80]	@ (80023cc <HAL_TIM_MspPostInit+0xb8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d11d      	bne.n	80023ba <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <HAL_TIM_MspPostInit+0xb0>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	4a0f      	ldr	r2, [pc, #60]	@ (80023c4 <HAL_TIM_MspPostInit+0xb0>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6313      	str	r3, [r2, #48]	@ 0x30
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <HAL_TIM_MspPostInit+0xb0>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PUL_Pin;
 800239a:	2301      	movs	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023aa:	2302      	movs	r3, #2
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_PUL_GPIO_Port, &GPIO_InitStruct);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4619      	mov	r1, r3
 80023b4:	4804      	ldr	r0, [pc, #16]	@ (80023c8 <HAL_TIM_MspPostInit+0xb4>)
 80023b6:	f003 fbe9 	bl	8005b8c <HAL_GPIO_Init>
}
 80023ba:	bf00      	nop
 80023bc:	3728      	adds	r7, #40	@ 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	40000c00 	.word	0x40000c00

080023d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023d4:	4b11      	ldr	r3, [pc, #68]	@ (800241c <MX_USART2_UART_Init+0x4c>)
 80023d6:	4a12      	ldr	r2, [pc, #72]	@ (8002420 <MX_USART2_UART_Init+0x50>)
 80023d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <MX_USART2_UART_Init+0x4c>)
 80023dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <MX_USART2_UART_Init+0x4c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <MX_USART2_UART_Init+0x4c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <MX_USART2_UART_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023f4:	4b09      	ldr	r3, [pc, #36]	@ (800241c <MX_USART2_UART_Init+0x4c>)
 80023f6:	220c      	movs	r2, #12
 80023f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fa:	4b08      	ldr	r3, [pc, #32]	@ (800241c <MX_USART2_UART_Init+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002400:	4b06      	ldr	r3, [pc, #24]	@ (800241c <MX_USART2_UART_Init+0x4c>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002406:	4805      	ldr	r0, [pc, #20]	@ (800241c <MX_USART2_UART_Init+0x4c>)
 8002408:	f007 f934 	bl	8009674 <HAL_UART_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002412:	f7ff fa6c 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000930 	.word	0x20000930
 8002420:	40004400 	.word	0x40004400

08002424 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002428:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <MX_USART6_UART_Init+0x4c>)
 800242a:	4a12      	ldr	r2, [pc, #72]	@ (8002474 <MX_USART6_UART_Init+0x50>)
 800242c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800242e:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <MX_USART6_UART_Init+0x4c>)
 8002430:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002434:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002436:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <MX_USART6_UART_Init+0x4c>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <MX_USART6_UART_Init+0x4c>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002442:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <MX_USART6_UART_Init+0x4c>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8002448:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <MX_USART6_UART_Init+0x4c>)
 800244a:	2204      	movs	r2, #4
 800244c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244e:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <MX_USART6_UART_Init+0x4c>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <MX_USART6_UART_Init+0x4c>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800245a:	4805      	ldr	r0, [pc, #20]	@ (8002470 <MX_USART6_UART_Init+0x4c>)
 800245c:	f007 f90a 	bl	8009674 <HAL_UART_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002466:	f7ff fa42 	bl	80018ee <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000978 	.word	0x20000978
 8002474:	40011400 	.word	0x40011400

08002478 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	@ 0x30
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a36      	ldr	r2, [pc, #216]	@ (8002570 <HAL_UART_MspInit+0xf8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d12c      	bne.n	80024f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	4b35      	ldr	r3, [pc, #212]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	4a34      	ldr	r2, [pc, #208]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024aa:	4b32      	ldr	r3, [pc, #200]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	4a2d      	ldr	r2, [pc, #180]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024d2:	230c      	movs	r3, #12
 80024d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024de:	2303      	movs	r3, #3
 80024e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024e2:	2307      	movs	r3, #7
 80024e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	4619      	mov	r1, r3
 80024ec:	4822      	ldr	r0, [pc, #136]	@ (8002578 <HAL_UART_MspInit+0x100>)
 80024ee:	f003 fb4d 	bl	8005b8c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80024f2:	e038      	b.n	8002566 <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a20      	ldr	r2, [pc, #128]	@ (800257c <HAL_UART_MspInit+0x104>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d133      	bne.n	8002566 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	4b1c      	ldr	r3, [pc, #112]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002506:	4a1b      	ldr	r2, [pc, #108]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 8002508:	f043 0320 	orr.w	r3, r3, #32
 800250c:	6453      	str	r3, [r2, #68]	@ 0x44
 800250e:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	4a14      	ldr	r2, [pc, #80]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	6313      	str	r3, [r2, #48]	@ 0x30
 800252a:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002536:	23c0      	movs	r3, #192	@ 0xc0
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002542:	2303      	movs	r3, #3
 8002544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002546:	2308      	movs	r3, #8
 8002548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254a:	f107 031c 	add.w	r3, r7, #28
 800254e:	4619      	mov	r1, r3
 8002550:	480b      	ldr	r0, [pc, #44]	@ (8002580 <HAL_UART_MspInit+0x108>)
 8002552:	f003 fb1b 	bl	8005b8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	2047      	movs	r0, #71	@ 0x47
 800255c:	f002 fed1 	bl	8005302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002560:	2047      	movs	r0, #71	@ 0x47
 8002562:	f002 feea 	bl	800533a <HAL_NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3730      	adds	r7, #48	@ 0x30
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40004400 	.word	0x40004400
 8002574:	40023800 	.word	0x40023800
 8002578:	40020000 	.word	0x40020000
 800257c:	40011400 	.word	0x40011400
 8002580:	40020800 	.word	0x40020800

08002584 <on_click>:
#define DEBOUNCE_DELAY 100 // ms

static uint32_t last_debounce_time = 0;
// static uint8_t active = 0;

void on_click(){
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY){
 8002588:	f002 f9a0 	bl	80048cc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	4b16      	ldr	r3, [pc, #88]	@ (80025e8 <on_click+0x64>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b64      	cmp	r3, #100	@ 0x64
 8002596:	d925      	bls.n	80025e4 <on_click+0x60>
		last_debounce_time = HAL_GetTick();
 8002598:	f002 f998 	bl	80048cc <HAL_GetTick>
 800259c:	4603      	mov	r3, r0
 800259e:	4a12      	ldr	r2, [pc, #72]	@ (80025e8 <on_click+0x64>)
 80025a0:	6013      	str	r3, [r2, #0]
		// active ^= 1;

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 80025a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025a6:	4811      	ldr	r0, [pc, #68]	@ (80025ec <on_click+0x68>)
 80025a8:	f003 fcb5 	bl	8005f16 <HAL_GPIO_TogglePin>
		// } else{
		// 	set_speed(&stepper_l, 0);
		// 	set_speed(&stepper_r, 0);
		// }

		pid.active ^= 1;
 80025ac:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <on_click+0x6c>)
 80025ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025b2:	f083 0301 	eor.w	r3, r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <on_click+0x6c>)
 80025ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		if (pid.active) {
 80025be:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <on_click+0x6c>)
 80025c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <on_click+0x4c>
			PID_Reset(&pid);
 80025c8:	4809      	ldr	r0, [pc, #36]	@ (80025f0 <on_click+0x6c>)
 80025ca:	f000 febd 	bl	8003348 <PID_Reset>
		} else {
			set_speed(&stepper_l, 0);
			set_speed(&stepper_r, 0);
		}
	}
}
 80025ce:	e009      	b.n	80025e4 <on_click+0x60>
			set_speed(&stepper_l, 0);
 80025d0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80025f4 <on_click+0x70>
 80025d4:	4808      	ldr	r0, [pc, #32]	@ (80025f8 <on_click+0x74>)
 80025d6:	f000 ffc5 	bl	8003564 <set_speed>
			set_speed(&stepper_r, 0);
 80025da:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80025f4 <on_click+0x70>
 80025de:	4807      	ldr	r0, [pc, #28]	@ (80025fc <on_click+0x78>)
 80025e0:	f000 ffc0 	bl	8003564 <set_speed>
}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200009c0 	.word	0x200009c0
 80025ec:	40020800 	.word	0x40020800
 80025f0:	20000b34 	.word	0x20000b34
 80025f4:	00000000 	.word	0x00000000
 80025f8:	20000a20 	.word	0x20000a20
 80025fc:	200009e4 	.word	0x200009e4

08002600 <update_direction>:
#include <stdio.h>

float SAMPLING_PERIOD; // seconds
uint32_t HCLK;

static void update_direction(encoder_t *encoder){
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	encoder->direction = (encoder->tim->CR1 & TIM_CR1_DIR_Msk) >> TIM_CR1_DIR_Pos;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	b2da      	uxtb	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	701a      	strb	r2, [r3, #0]
	return;
 800261c:	bf00      	nop
}
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <update_displacement>:

static void update_displacement(encoder_t *encoder){
 8002628:	b5b0      	push	{r4, r5, r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

	encoder->displacement = ((float)encoder->tim->CNT - 4096) * RCF * encoder->direction_invert;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800263e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80026c0 <update_displacement+0x98>
 8002642:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002646:	ee17 0a90 	vmov	r0, s15
 800264a:	f7fd ffad 	bl	80005a8 <__aeabi_f2d>
 800264e:	a31a      	add	r3, pc, #104	@ (adr r3, 80026b8 <update_displacement+0x90>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fe f800 	bl	8000658 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4614      	mov	r4, r2
 800265e:	461d      	mov	r5, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd ff8c 	bl	8000584 <__aeabi_i2d>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4620      	mov	r0, r4
 8002672:	4629      	mov	r1, r5
 8002674:	f7fd fff0 	bl	8000658 <__aeabi_dmul>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	f7fe fae2 	bl	8000c48 <__aeabi_d2f>
 8002684:	4602      	mov	r2, r0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	605a      	str	r2, [r3, #4]
	encoder->tim->CNT = 4096;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24

	encoder->position += encoder->displacement;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	ed93 7a05 	vldr	s14, [r3, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	edd3 7a01 	vldr	s15, [r3, #4]
 80026a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	edc3 7a05 	vstr	s15, [r3, #20]
	return;
 80026aa:	bf00      	nop
}
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bdb0      	pop	{r4, r5, r7, pc}
 80026b2:	bf00      	nop
 80026b4:	f3af 8000 	nop.w
 80026b8:	7bb1a72c 	.word	0x7bb1a72c
 80026bc:	3f4921fa 	.word	0x3f4921fa
 80026c0:	45800000 	.word	0x45800000

080026c4 <compute_speed>:

static void compute_speed(encoder_t *encoder){
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	encoder->speed = encoder->displacement / SAMPLING_PERIOD;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80026d2:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <compute_speed+0x2c>)
 80026d4:	ed93 7a00 	vldr	s14, [r3]
 80026d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	200009c4 	.word	0x200009c4

080026f4 <Encoder_read>:

void Encoder_read(encoder_t *encoder){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	update_direction(encoder);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff7f 	bl	8002600 <update_direction>
	update_displacement(encoder);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ff90 	bl	8002628 <update_displacement>
	compute_speed(encoder);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ffdb 	bl	80026c4 <compute_speed>
	return;
 800270e:	bf00      	nop
}
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <Encoder_init>:

// em_tim : encoder mode timer | s_tim : sampling timer
void Encoder_init(encoder_t *encoder, TIM_HandleTypeDef *em_tim, TIM_HandleTypeDef *s_tim, int8_t direction_invert){
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	70fb      	strb	r3, [r7, #3]
	encoder->tim = em_tim->Instance;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	60da      	str	r2, [r3, #12]
	encoder->tim->CNT = 4096;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002736:	625a      	str	r2, [r3, #36]	@ 0x24
	encoder->direction_invert = direction_invert;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	741a      	strb	r2, [r3, #16]
	encoder->direction = 0;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
	encoder->displacement = 0.0f;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	605a      	str	r2, [r3, #4]
	encoder->speed = 0.0f;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
	encoder->position = 0.0f;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	615a      	str	r2, [r3, #20]
	
	HCLK = HAL_RCC_GetHCLKFreq();
 800275c:	f004 ffec 	bl	8007738 <HAL_RCC_GetHCLKFreq>
 8002760:	4603      	mov	r3, r0
 8002762:	4a11      	ldr	r2, [pc, #68]	@ (80027a8 <Encoder_init+0x90>)
 8002764:	6013      	str	r3, [r2, #0]
	SAMPLING_PERIOD = (float)(1+s_tim->Instance->ARR)*(1+s_tim->Instance->PSC)/HCLK;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276c:	3301      	adds	r3, #1
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277c:	3301      	adds	r3, #1
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002786:	ee67 6a27 	vmul.f32	s13, s14, s15
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <Encoder_init+0x90>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800279a:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <Encoder_init+0x94>)
 800279c:	edc3 7a00 	vstr	s15, [r3]
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200009c8 	.word	0x200009c8
 80027ac:	200009c4 	.word	0x200009c4

080027b0 <IMU_Init>:
		imu->az_bias = imu->az_bias - 16384.0f; // Adjust az bias to remove the offset
		imu->az= (imu->az - imu->az_bias) / 16384.0f * 9.81f; // Remove the bias from the az value
	}
}

uint8_t IMU_Init(imu_t *imu, I2C_HandleTypeDef *hi2c, uint16_t address) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	@ 0x28
 80027b4:	af04      	add	r7, sp, #16
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) {
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d101      	bne.n	80027d0 <IMU_Init+0x20>
		// I2C bus is busy, stop the I2C communication
		return 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e066      	b.n	800289e <IMU_Init+0xee>
	}

	imu->hi2c = hi2c;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	601a      	str	r2, [r3, #0]
	imu->address = address;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	809a      	strh	r2, [r3, #4]

	imu->ax = 0.0f;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	615a      	str	r2, [r3, #20]
	imu->ay = 0.0f;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
	imu->az = 0.0f;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	61da      	str	r2, [r3, #28]
	imu->vx = 0.0f;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	621a      	str	r2, [r3, #32]

	imu->wx = 0.0f;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	625a      	str	r2, [r3, #36]	@ 0x24
	imu->wy = 0.0f;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	629a      	str	r2, [r3, #40]	@ 0x28
	imu->wz = 0.0f;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	62da      	str	r2, [r3, #44]	@ 0x2c
	imu->alpha_y = 0.0f; // Initialize alpha_y to 0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	@ 0x30

	imu->angle = 0.0f;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	635a      	str	r2, [r3, #52]	@ 0x34
	imu->last_computation_time = 0;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	639a      	str	r2, [r3, #56]	@ 0x38

	imu->az_bias = 0.0f; // Initialize az bias to 0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	63da      	str	r2, [r3, #60]	@ 0x3c
	imu->calibration_mode = 1; // Calibration mode enabled by default
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	uint8_t check;
	HAL_I2C_Mem_Read(hi2c, address, WHO_AM_I_ADDR, I2C_MEMADD_SIZE_8BIT, &check, 1, 1000);
 800283a:	88f9      	ldrh	r1, [r7, #6]
 800283c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	2301      	movs	r3, #1
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	f107 0317 	add.w	r3, r7, #23
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2301      	movs	r3, #1
 800284e:	2275      	movs	r2, #117	@ 0x75
 8002850:	68b8      	ldr	r0, [r7, #8]
 8002852:	f003 fdd1 	bl	80063f8 <HAL_I2C_Mem_Read>
	if (check == 0x68) {
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b68      	cmp	r3, #104	@ 0x68
 800285a:	d11f      	bne.n	800289c <IMU_Init+0xec>
		uint8_t data = 0x00;
 800285c:	2300      	movs	r3, #0
 800285e:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, SLEEP_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8002860:	88f9      	ldrh	r1, [r7, #6]
 8002862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002866:	9302      	str	r3, [sp, #8]
 8002868:	2301      	movs	r3, #1
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	f107 0316 	add.w	r3, r7, #22
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2301      	movs	r3, #1
 8002874:	226b      	movs	r2, #107	@ 0x6b
 8002876:	68b8      	ldr	r0, [r7, #8]
 8002878:	f003 fcc4 	bl	8006204 <HAL_I2C_Mem_Write>

		data = 0x00;
 800287c:	2300      	movs	r3, #0
 800287e:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8002880:	88f9      	ldrh	r1, [r7, #6]
 8002882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002886:	9302      	str	r3, [sp, #8]
 8002888:	2301      	movs	r3, #1
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	f107 0316 	add.w	r3, r7, #22
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2301      	movs	r3, #1
 8002894:	221a      	movs	r2, #26
 8002896:	68b8      	ldr	r0, [r7, #8]
 8002898:	f003 fcb4 	bl	8006204 <HAL_I2C_Mem_Write>
	}
	return 1;
 800289c:	2301      	movs	r3, #1
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <IMU_ReadData>:

void IMU_ReadData(imu_t *imu){
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af02      	add	r7, sp, #8
 80028ac:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(imu->hi2c, imu->address, IMU_BASE_ACCEL_ADDR, I2C_MEMADD_SIZE_8BIT, (uint8_t *)imu->pData, IMU_BUFFER_SIZE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	8899      	ldrh	r1, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3306      	adds	r3, #6
 80028ba:	220e      	movs	r2, #14
 80028bc:	9201      	str	r2, [sp, #4]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2301      	movs	r3, #1
 80028c2:	223b      	movs	r2, #59	@ 0x3b
 80028c4:	f003 ffca 	bl	800685c <HAL_I2C_Mem_Read_DMA>
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <IMU_Compute_Data>:

void IMU_Compute_Data(imu_t *imu) {
 80028d0:	b5b0      	push	{r4, r5, r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	uint32_t delta_time = HAL_GetTick() - imu->last_computation_time; // Calculate time since last angle update
 80028d8:	f001 fff8 	bl	80048cc <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	60fb      	str	r3, [r7, #12]

	imu->ax = (1-IMU_EMA_ALPHA) * imu->ax + IMU_EMA_ALPHA * (((int16_t)(imu->pData[0] << 8) | imu->pData[1]) - 280.591f) / 16384.0f * 9.81f;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80028ec:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8002c28 <IMU_Compute_Data+0x358>
 80028f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	799b      	ldrb	r3, [r3, #6]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	b21b      	sxth	r3, r3
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	b21b      	sxth	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	79db      	ldrb	r3, [r3, #7]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002912:	eddf 6ac6 	vldr	s13, [pc, #792]	@ 8002c2c <IMU_Compute_Data+0x35c>
 8002916:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800291a:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8002c30 <IMU_Compute_Data+0x360>
 800291e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002922:	ed9f 6ac4 	vldr	s12, [pc, #784]	@ 8002c34 <IMU_Compute_Data+0x364>
 8002926:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800292a:	eddf 6ac3 	vldr	s13, [pc, #780]	@ 8002c38 <IMU_Compute_Data+0x368>
 800292e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->ay = (1-IMU_EMA_ALPHA) * imu->ay + IMU_EMA_ALPHA * ((int16_t)(imu->pData[2] << 8) | imu->pData[3]) / 16384.0f * 9.81f;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002942:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8002c28 <IMU_Compute_Data+0x358>
 8002946:	ee27 7a87 	vmul.f32	s14, s15, s14
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7a1b      	ldrb	r3, [r3, #8]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	b21b      	sxth	r3, r3
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	b21b      	sxth	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7a5b      	ldrb	r3, [r3, #9]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	4313      	orrs	r3, r2
 8002960:	ee07 3a90 	vmov	s15, r3
 8002964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002968:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8002c30 <IMU_Compute_Data+0x360>
 800296c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002970:	ed9f 6ab0 	vldr	s12, [pc, #704]	@ 8002c34 <IMU_Compute_Data+0x364>
 8002974:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002978:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8002c38 <IMU_Compute_Data+0x368>
 800297c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->az = (1-IMU_EMA_ALPHA) * imu->az + IMU_EMA_ALPHA * (((int16_t)(imu->pData[4] << 8) | imu->pData[5]) - 1117.735f) / 16384.0f * 9.81f;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002990:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8002c28 <IMU_Compute_Data+0x358>
 8002994:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7a9b      	ldrb	r3, [r3, #10]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	b21b      	sxth	r3, r3
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	b21b      	sxth	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	7adb      	ldrb	r3, [r3, #11]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	4313      	orrs	r3, r2
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b6:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002c3c <IMU_Compute_Data+0x36c>
 80029ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029be:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8002c30 <IMU_Compute_Data+0x360>
 80029c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029c6:	ed9f 6a9b 	vldr	s12, [pc, #620]	@ 8002c34 <IMU_Compute_Data+0x364>
 80029ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029ce:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 8002c38 <IMU_Compute_Data+0x368>
 80029d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	edc3 7a07 	vstr	s15, [r3, #28]
//		IMU_Calibrate(imu); // Call calibration function if in calibration mode
//	} else {
//		// Convert raw data to float values (/16834.0f for accelerometer -> in g, /131.0f for gyroscope)
//		imu->az = (1-IMU_EMA_ALPHA) * imu->az + IMU_EMA_ALPHA * (((int16_t)(imu->pData[4] << 8) | imu->pData[5]) - imu->az_bias)/ 16384.0f * 9.81f;
//	}
	float old_wy = imu->wy;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e4:	60bb      	str	r3, [r7, #8]
	imu->wx = (1-IMU_EMA_ALPHA) * imu->wx + IMU_EMA_ALPHA * ((int16_t)(imu->pData[8] << 8) | imu->pData[9]) / 131.0f;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80029ec:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002c28 <IMU_Compute_Data+0x358>
 80029f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7b9b      	ldrb	r3, [r3, #14]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	b21b      	sxth	r3, r3
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	b21b      	sxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7bdb      	ldrb	r3, [r3, #15]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	ee07 3a90 	vmov	s15, r3
 8002a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a12:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002c30 <IMU_Compute_Data+0x360>
 8002a16:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a1a:	ed9f 6a89 	vldr	s12, [pc, #548]	@ 8002c40 <IMU_Compute_Data+0x370>
 8002a1e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	imu->wy = (1-IMU_EMA_ALPHA) * imu->wy + IMU_EMA_ALPHA * (((int16_t)(imu->pData[10] << 8) | imu->pData[11]) - 393.589f) / 131.0f;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002a32:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8002c28 <IMU_Compute_Data+0x358>
 8002a36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7c1b      	ldrb	r3, [r3, #16]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7c5b      	ldrb	r3, [r3, #17]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a58:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8002c44 <IMU_Compute_Data+0x374>
 8002a5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a60:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8002c30 <IMU_Compute_Data+0x360>
 8002a64:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a68:	ed9f 6a75 	vldr	s12, [pc, #468]	@ 8002c40 <IMU_Compute_Data+0x370>
 8002a6c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	imu->wz = (1-IMU_EMA_ALPHA) * imu->wz + IMU_EMA_ALPHA * ((int16_t)(imu->pData[12] << 8) | imu->pData[13]) / 131.0f;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002a80:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002c28 <IMU_Compute_Data+0x358>
 8002a84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	7c9b      	ldrb	r3, [r3, #18]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	b21b      	sxth	r3, r3
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	b21b      	sxth	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	7cdb      	ldrb	r3, [r3, #19]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	ee07 3a90 	vmov	s15, r3
 8002aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa6:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002c30 <IMU_Compute_Data+0x360>
 8002aaa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002aae:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 8002c40 <IMU_Compute_Data+0x370>
 8002ab2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	imu->last_computation_time = HAL_GetTick(); // Update last computation time
 8002ac0:	f001 ff04 	bl	80048cc <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	639a      	str	r2, [r3, #56]	@ 0x38

	imu->vx = imu->vx + imu->ax * (float)delta_time / 1000.0f; // Update velocity based on accelerometer data
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	edd3 6a05 	vldr	s13, [r3, #20]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	ee07 3a90 	vmov	s15, r3
 8002adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ae4:	ed9f 6a58 	vldr	s12, [pc, #352]	@ 8002c48 <IMU_Compute_Data+0x378>
 8002ae8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->alpha_y = (imu->wy - old_wy) / ((float)delta_time / 1000.0f); // Calculate angular acceleration around y-axis
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002afc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b00:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0e:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8002c48 <IMU_Compute_Data+0x378>
 8002b12:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	if(imu->calibration_mode) {
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d02a      	beq.n	8002b80 <IMU_Compute_Data+0x2b0>
		imu->angle = -atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Use accelerometer data to compute angle in calibration mode
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b36:	eef0 0a47 	vmov.f32	s1, s14
 8002b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3e:	f00c fd03 	bl	800f548 <atan2f>
 8002b42:	eef0 7a40 	vmov.f32	s15, s0
 8002b46:	eef1 7a67 	vneg.f32	s15, s15
 8002b4a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002c4c <IMU_Compute_Data+0x37c>
 8002b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b52:	ee17 0a90 	vmov	r0, s15
 8002b56:	f7fd fd27 	bl	80005a8 <__aeabi_f2d>
 8002b5a:	a331      	add	r3, pc, #196	@ (adr r3, 8002c20 <IMU_Compute_Data+0x350>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	f7fd fea4 	bl	80008ac <__aeabi_ddiv>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f7fe f86c 	bl	8000c48 <__aeabi_d2f>
 8002b70:	4602      	mov	r2, r0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	635a      	str	r2, [r3, #52]	@ 0x34
		imu->calibration_mode = 0; // Reset calibration mode after computing angle
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}else {
		imu->angle = .996f * (imu->angle + imu->wy * (float)delta_time/1000.0f) - .004f * atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Complementary filter to combine gyroscope and accelerometer data
	}
}
 8002b7e:	e04a      	b.n	8002c16 <IMU_Compute_Data+0x346>
		imu->angle = .996f * (imu->angle + imu->wy * (float)delta_time/1000.0f) - .004f * atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Complementary filter to combine gyroscope and accelerometer data
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b9a:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8002c48 <IMU_Compute_Data+0x378>
 8002b9e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002c50 <IMU_Compute_Data+0x380>
 8002baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bae:	ee17 0a90 	vmov	r0, s15
 8002bb2:	f7fd fcf9 	bl	80005a8 <__aeabi_f2d>
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	460d      	mov	r5, r1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bc6:	eef0 0a47 	vmov.f32	s1, s14
 8002bca:	eeb0 0a67 	vmov.f32	s0, s15
 8002bce:	f00c fcbb 	bl	800f548 <atan2f>
 8002bd2:	eef0 7a40 	vmov.f32	s15, s0
 8002bd6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002c54 <IMU_Compute_Data+0x384>
 8002bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bde:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002c4c <IMU_Compute_Data+0x37c>
 8002be2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be6:	ee17 0a90 	vmov	r0, s15
 8002bea:	f7fd fcdd 	bl	80005a8 <__aeabi_f2d>
 8002bee:	a30c      	add	r3, pc, #48	@ (adr r3, 8002c20 <IMU_Compute_Data+0x350>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f7fd fe5a 	bl	80008ac <__aeabi_ddiv>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	4629      	mov	r1, r5
 8002c00:	f7fd fb72 	bl	80002e8 <__aeabi_dsub>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f7fe f81c 	bl	8000c48 <__aeabi_d2f>
 8002c10:	4602      	mov	r2, r0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	54442d18 	.word	0x54442d18
 8002c24:	400921fb 	.word	0x400921fb
 8002c28:	3f589d8a 	.word	0x3f589d8a
 8002c2c:	438c4ba6 	.word	0x438c4ba6
 8002c30:	3e1d89d9 	.word	0x3e1d89d9
 8002c34:	46800000 	.word	0x46800000
 8002c38:	411cf5c3 	.word	0x411cf5c3
 8002c3c:	448bb785 	.word	0x448bb785
 8002c40:	43030000 	.word	0x43030000
 8002c44:	43c4cb64 	.word	0x43c4cb64
 8002c48:	447a0000 	.word	0x447a0000
 8002c4c:	43340000 	.word	0x43340000
 8002c50:	3f7ef9db 	.word	0x3f7ef9db
 8002c54:	3b83126f 	.word	0x3b83126f

08002c58 <PowerModule_init>:
#include "headers/power_module.h"
#include "headers/display.h"
#include "gpio.h"

void PowerModule_init(power_module_t *power_module, ADC_HandleTypeDef *hadc){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
	power_module->warning_limit = WARNING_LIMIT; // Imposta il limite di avviso
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a34      	ldr	r2, [pc, #208]	@ (8002d38 <PowerModule_init+0xe0>)
 8002c66:	605a      	str	r2, [r3, #4]
	power_module->stop_limit = STOP_LIMIT; // Imposta il limite di stop
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a34      	ldr	r2, [pc, #208]	@ (8002d3c <PowerModule_init+0xe4>)
 8002c6c:	609a      	str	r2, [r3, #8]
	power_module->warning_issued = 0; // Inizializza il flag di avviso
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	731a      	strb	r2, [r3, #12]
	power_module->stop_issued = 0; // Inizializza il flag di stop
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	735a      	strb	r2, [r3, #13]
	power_module->hadc = *hadc; // Initialize ADC handle
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	3364      	adds	r3, #100	@ 0x64
 8002c80:	4611      	mov	r1, r2
 8002c82:	2248      	movs	r2, #72	@ 0x48
 8002c84:	4618      	mov	r0, r3
 8002c86:	f009 fb99 	bl	800c3bc <memcpy>

	HAL_ADC_Start(&power_module->hadc);  // Avvia manualmente
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3364      	adds	r3, #100	@ 0x64
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 fe90 	bl	80049b4 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&power_module->hadc, 10) == HAL_OK) {  // Timeout corto
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3364      	adds	r3, #100	@ 0x64
 8002c98:	210a      	movs	r1, #10
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 ff8f 	bl	8004bbe <HAL_ADC_PollForConversion>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d11f      	bne.n	8002ce6 <PowerModule_init+0x8e>
		power_module->voltage = HAL_ADC_GetValue(&power_module->hadc) / SLOPE - OFFSET;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3364      	adds	r3, #100	@ 0x64
 8002caa:	4618      	mov	r0, r3
 8002cac:	f002 f812 	bl	8004cd4 <HAL_ADC_GetValue>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fc56 	bl	8000564 <__aeabi_ui2d>
 8002cb8:	a31b      	add	r3, pc, #108	@ (adr r3, 8002d28 <PowerModule_init+0xd0>)
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	f7fd fdf5 	bl	80008ac <__aeabi_ddiv>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	a319      	add	r3, pc, #100	@ (adr r3, 8002d30 <PowerModule_init+0xd8>)
 8002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd0:	f7fd fb0a 	bl	80002e8 <__aeabi_dsub>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f7fd ffb4 	bl	8000c48 <__aeabi_d2f>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Stop(&power_module->hadc);  // Ferma l’ADC dopo la conversione
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3364      	adds	r3, #100	@ 0x64
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 ff34 	bl	8004b58 <HAL_ADC_Stop>

	// Inizializza l'accumulatore
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	e00a      	b.n	8002d0c <PowerModule_init+0xb4>
		power_module->accumulator[i] = power_module->voltage; // Inizializza con il primo valore letto
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b13      	cmp	r3, #19
 8002d10:	ddf1      	ble.n	8002cf6 <PowerModule_init+0x9e>
	}
	power_module->accumulator_idx = 0; // Inizializza l'indice dell'accumulatore
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	f3af 8000 	nop.w
 8002d28:	e147ae14 	.word	0xe147ae14
 8002d2c:	405c847a 	.word	0x405c847a
 8002d30:	c540196f 	.word	0xc540196f
 8002d34:	3fb12c42 	.word	0x3fb12c42
 8002d38:	41b00000 	.word	0x41b00000
 8002d3c:	41a00000 	.word	0x41a00000

08002d40 <I2C1_BusRecovery>:
#define I2C_SDA_GPIO_Port   GPIOB
#define I2C_SDA_Pin         GPIO_PIN_9

// quando HAL_I2C_Master_Receive_DMA() fallisce per colpa del bus bloccato (es. I2C_FLAG_BUSY sempre attivo),
// l’unico rimedio affidabile è resettare completamente il periferico I²C
static void I2C1_BusRecovery(void) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002d46:	463b      	mov	r3, r7
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]

    // 1) Disabilita I2C
    __HAL_I2C_DISABLE(&hi2c1);
 8002d54:	4b3a      	ldr	r3, [pc, #232]	@ (8002e40 <I2C1_BusRecovery+0x100>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b39      	ldr	r3, [pc, #228]	@ (8002e40 <I2C1_BusRecovery+0x100>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
    __HAL_RCC_I2C1_FORCE_RESET();
 8002d64:	4b37      	ldr	r3, [pc, #220]	@ (8002e44 <I2C1_BusRecovery+0x104>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4a36      	ldr	r2, [pc, #216]	@ (8002e44 <I2C1_BusRecovery+0x104>)
 8002d6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d6e:	6213      	str	r3, [r2, #32]
    __HAL_RCC_I2C1_RELEASE_RESET();
 8002d70:	4b34      	ldr	r3, [pc, #208]	@ (8002e44 <I2C1_BusRecovery+0x104>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4a33      	ldr	r2, [pc, #204]	@ (8002e44 <I2C1_BusRecovery+0x104>)
 8002d76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d7a:	6213      	str	r3, [r2, #32]

    // 2) Configura SCL e SDA come GPIO open-drain con pull-up interne
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8002d7c:	2311      	movs	r3, #17
 8002d7e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002d80:	2301      	movs	r3, #1
 8002d82:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d84:	2302      	movs	r3, #2
 8002d86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin   = I2C_SCL_Pin | I2C_SDA_Pin;
 8002d88:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d8c:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8e:	463b      	mov	r3, r7
 8002d90:	4619      	mov	r1, r3
 8002d92:	482d      	ldr	r0, [pc, #180]	@ (8002e48 <I2C1_BusRecovery+0x108>)
 8002d94:	f002 fefa 	bl	8005b8c <HAL_GPIO_Init>

    // 3) Se SDA rimane bassa, genera fino a 9 clock manuali su SCL
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++) {
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e014      	b.n	8002dc8 <I2C1_BusRecovery+0x88>
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_RESET);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002da4:	4828      	ldr	r0, [pc, #160]	@ (8002e48 <I2C1_BusRecovery+0x108>)
 8002da6:	f003 f89d 	bl	8005ee4 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8002daa:	2001      	movs	r0, #1
 8002dac:	f001 fd9a 	bl	80048e4 <HAL_Delay>
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8002db0:	2201      	movs	r2, #1
 8002db2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002db6:	4824      	ldr	r0, [pc, #144]	@ (8002e48 <I2C1_BusRecovery+0x108>)
 8002db8:	f003 f894 	bl	8005ee4 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f001 fd91 	bl	80048e4 <HAL_Delay>
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++) {
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	dc07      	bgt.n	8002dde <I2C1_BusRecovery+0x9e>
 8002dce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dd2:	481d      	ldr	r0, [pc, #116]	@ (8002e48 <I2C1_BusRecovery+0x108>)
 8002dd4:	f003 f86e 	bl	8005eb4 <HAL_GPIO_ReadPin>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0df      	beq.n	8002d9e <I2C1_BusRecovery+0x5e>
    }

    // 4) Genera un STOP: SDA da bassa → alta mentre SCL alto
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_RESET);
 8002dde:	2200      	movs	r2, #0
 8002de0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002de4:	4818      	ldr	r0, [pc, #96]	@ (8002e48 <I2C1_BusRecovery+0x108>)
 8002de6:	f003 f87d 	bl	8005ee4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002dea:	2001      	movs	r0, #1
 8002dec:	f001 fd7a 	bl	80048e4 <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8002df0:	2201      	movs	r2, #1
 8002df2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002df6:	4814      	ldr	r0, [pc, #80]	@ (8002e48 <I2C1_BusRecovery+0x108>)
 8002df8:	f003 f874 	bl	8005ee4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f001 fd71 	bl	80048e4 <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET);
 8002e02:	2201      	movs	r2, #1
 8002e04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e08:	480f      	ldr	r0, [pc, #60]	@ (8002e48 <I2C1_BusRecovery+0x108>)
 8002e0a:	f003 f86b 	bl	8005ee4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f001 fd68 	bl	80048e4 <HAL_Delay>

    // 5) Ripristina AF I2C su SCL e SDA
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e14:	2312      	movs	r3, #18
 8002e16:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;        // pull-up interne già attive
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed= GPIO_SPEED_FREQ_HIGH;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = I2C_SCL_Pin | I2C_SDA_Pin;
 8002e20:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e24:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e26:	2304      	movs	r3, #4
 8002e28:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2a:	463b      	mov	r3, r7
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4806      	ldr	r0, [pc, #24]	@ (8002e48 <I2C1_BusRecovery+0x108>)
 8002e30:	f002 feac 	bl	8005b8c <HAL_GPIO_Init>

    // 6) Ri-inizializza l’I2C
    MX_I2C1_Init();
 8002e34:	f7fe fad8 	bl	80013e8 <MX_I2C1_Init>
}
 8002e38:	bf00      	nop
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	200005f4 	.word	0x200005f4
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020400 	.word	0x40020400

08002e4c <Robot_init>:


void Robot_init(robot_t *robot) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(&htim6);						// Display timer (0.1MHz)
 8002e54:	4838      	ldr	r0, [pc, #224]	@ (8002f38 <Robot_init+0xec>)
 8002e56:	f005 fc6b 	bl	8008730 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);						// Timeline
 8002e5a:	4838      	ldr	r0, [pc, #224]	@ (8002f3c <Robot_init+0xf0>)
 8002e5c:	f005 fc68 	bl	8008730 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);						// Stepper timer
 8002e60:	4837      	ldr	r0, [pc, #220]	@ (8002f40 <Robot_init+0xf4>)
 8002e62:	f005 fc65 	bl	8008730 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		// Encoder right
 8002e66:	213c      	movs	r1, #60	@ 0x3c
 8002e68:	4836      	ldr	r0, [pc, #216]	@ (8002f44 <Robot_init+0xf8>)
 8002e6a:	f005 fe8f 	bl	8008b8c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);		// Encoder left
 8002e6e:	213c      	movs	r1, #60	@ 0x3c
 8002e70:	4835      	ldr	r0, [pc, #212]	@ (8002f48 <Robot_init+0xfc>)
 8002e72:	f005 fe8b 	bl	8008b8c <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);			// Stepper left
 8002e76:	2104      	movs	r1, #4
 8002e78:	4834      	ldr	r0, [pc, #208]	@ (8002f4c <Robot_init+0x100>)
 8002e7a:	f005 fd19 	bl	80088b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);			// Stepper right
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4833      	ldr	r0, [pc, #204]	@ (8002f50 <Robot_init+0x104>)
 8002e82:	f005 fd15 	bl	80088b0 <HAL_TIM_PWM_Start>

	MAX72_init(&display);
 8002e86:	4833      	ldr	r0, [pc, #204]	@ (8002f54 <Robot_init+0x108>)
 8002e88:	f000 fbf0 	bl	800366c <MAX72_init>

	while(!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR)){
 8002e8c:	e005      	b.n	8002e9a <Robot_init+0x4e>
		MAX72_Print_String("I2C", NO_SETTINGS);
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4831      	ldr	r0, [pc, #196]	@ (8002f58 <Robot_init+0x10c>)
 8002e92:	f000 fe3b 	bl	8003b0c <MAX72_Print_String>
		I2C1_BusRecovery(); // Attempt to recover I2C bus if IMU init fails
 8002e96:	f7ff ff53 	bl	8002d40 <I2C1_BusRecovery>
	while(!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR)){
 8002e9a:	22d0      	movs	r2, #208	@ 0xd0
 8002e9c:	492f      	ldr	r1, [pc, #188]	@ (8002f5c <Robot_init+0x110>)
 8002e9e:	4830      	ldr	r0, [pc, #192]	@ (8002f60 <Robot_init+0x114>)
 8002ea0:	f7ff fc86 	bl	80027b0 <IMU_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f1      	beq.n	8002e8e <Robot_init+0x42>
	}
	MAX72_Clear();
 8002eaa:	f000 fc81 	bl	80037b0 <MAX72_Clear>
    robot->imu = &imu;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8002f60 <Robot_init+0x114>)
 8002eb2:	601a      	str	r2, [r3, #0]

	Encoder_init(&encoder_l, &htim3, &htim7, -1);
 8002eb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002eb8:	4a20      	ldr	r2, [pc, #128]	@ (8002f3c <Robot_init+0xf0>)
 8002eba:	4922      	ldr	r1, [pc, #136]	@ (8002f44 <Robot_init+0xf8>)
 8002ebc:	4829      	ldr	r0, [pc, #164]	@ (8002f64 <Robot_init+0x118>)
 8002ebe:	f7ff fc2b 	bl	8002718 <Encoder_init>
    robot->encoder_l = &encoder_l;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a27      	ldr	r2, [pc, #156]	@ (8002f64 <Robot_init+0x118>)
 8002ec6:	605a      	str	r2, [r3, #4]
	Stepper_init(&stepper_l, &htim5, TIM_CHANNEL_1, &encoder_l, GPIOA, GPIO_PIN_4);
 8002ec8:	2310      	movs	r3, #16
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	4b26      	ldr	r3, [pc, #152]	@ (8002f68 <Robot_init+0x11c>)
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4b24      	ldr	r3, [pc, #144]	@ (8002f64 <Robot_init+0x118>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	491e      	ldr	r1, [pc, #120]	@ (8002f50 <Robot_init+0x104>)
 8002ed6:	4825      	ldr	r0, [pc, #148]	@ (8002f6c <Robot_init+0x120>)
 8002ed8:	f000 fb54 	bl	8003584 <Stepper_init>
    robot->stepper_l = &stepper_l;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a23      	ldr	r2, [pc, #140]	@ (8002f6c <Robot_init+0x120>)
 8002ee0:	60da      	str	r2, [r3, #12]
	Encoder_init(&encoder_r, &htim4, &htim7, 1);
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	4a15      	ldr	r2, [pc, #84]	@ (8002f3c <Robot_init+0xf0>)
 8002ee6:	4918      	ldr	r1, [pc, #96]	@ (8002f48 <Robot_init+0xfc>)
 8002ee8:	4821      	ldr	r0, [pc, #132]	@ (8002f70 <Robot_init+0x124>)
 8002eea:	f7ff fc15 	bl	8002718 <Encoder_init>
    robot->encoder_r = &encoder_r;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8002f70 <Robot_init+0x124>)
 8002ef2:	609a      	str	r2, [r3, #8]
	Stepper_init(&stepper_r, &htim2, TIM_CHANNEL_2, &encoder_r, GPIOB, GPIO_PIN_0);
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f74 <Robot_init+0x128>)
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	4b1c      	ldr	r3, [pc, #112]	@ (8002f70 <Robot_init+0x124>)
 8002efe:	2204      	movs	r2, #4
 8002f00:	4912      	ldr	r1, [pc, #72]	@ (8002f4c <Robot_init+0x100>)
 8002f02:	481d      	ldr	r0, [pc, #116]	@ (8002f78 <Robot_init+0x12c>)
 8002f04:	f000 fb3e 	bl	8003584 <Stepper_init>
    robot->stepper_r = &stepper_r;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8002f78 <Robot_init+0x12c>)
 8002f0c:	611a      	str	r2, [r3, #16]

	PowerModule_init(&power_module, &hadc1);
 8002f0e:	491b      	ldr	r1, [pc, #108]	@ (8002f7c <Robot_init+0x130>)
 8002f10:	481b      	ldr	r0, [pc, #108]	@ (8002f80 <Robot_init+0x134>)
 8002f12:	f7ff fea1 	bl	8002c58 <PowerModule_init>
	robot->power_module = &power_module;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a19      	ldr	r2, [pc, #100]	@ (8002f80 <Robot_init+0x134>)
 8002f1a:	615a      	str	r2, [r3, #20]

    PID_Init(&pid);
 8002f1c:	4819      	ldr	r0, [pc, #100]	@ (8002f84 <Robot_init+0x138>)
 8002f1e:	f000 f8dd 	bl	80030dc <PID_Init>
    robot->pid = &pid;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a17      	ldr	r2, [pc, #92]	@ (8002f84 <Robot_init+0x138>)
 8002f26:	619a      	str	r2, [r3, #24]

    robot->base_angle_config = 0;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	771a      	strb	r2, [r3, #28]
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000858 	.word	0x20000858
 8002f3c:	200008a0 	.word	0x200008a0
 8002f40:	200008e8 	.word	0x200008e8
 8002f44:	20000780 	.word	0x20000780
 8002f48:	200007c8 	.word	0x200007c8
 8002f4c:	20000738 	.word	0x20000738
 8002f50:	20000810 	.word	0x20000810
 8002f54:	20000b78 	.word	0x20000b78
 8002f58:	0800f8f0 	.word	0x0800f8f0
 8002f5c:	200005f4 	.word	0x200005f4
 8002f60:	20000a44 	.word	0x20000a44
 8002f64:	20000a08 	.word	0x20000a08
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	20000a20 	.word	0x20000a20
 8002f70:	200009cc 	.word	0x200009cc
 8002f74:	40020400 	.word	0x40020400
 8002f78:	200009e4 	.word	0x200009e4
 8002f7c:	200005ac 	.word	0x200005ac
 8002f80:	20000a88 	.word	0x20000a88
 8002f84:	20000b34 	.word	0x20000b34

08002f88 <Robot_read_serial_msg>:

void Robot_read_serial_msg(robot_t *robot, char *msg) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08c      	sub	sp, #48	@ 0x30
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
    static float last_base_angle_stick_val = 0.0f;
    float js_x = 0.0f, js_y = 0.0f;
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	623b      	str	r3, [r7, #32]
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
    uint8_t base_angle_config = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	76fb      	strb	r3, [r7, #27]

    // Pulizia del buffer: rimuove eventuali spazi/residui
    char clean_msg[14] = {0}; // 13 caratteri + \0
 8002fa2:	f107 030c 	add.w	r3, r7, #12
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	819a      	strh	r2, [r3, #12]
    strncpy(clean_msg, msg, 13);
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	220d      	movs	r2, #13
 8002fb6:	6839      	ldr	r1, [r7, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f009 f973 	bl	800c2a4 <strncpy>
    clean_msg[13] = '\0';
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	767b      	strb	r3, [r7, #25]

    // Parsing robusto con sscanf
    int parsed = sscanf(clean_msg, "%f;%f;%hhu", &js_x, &js_y, &base_angle_config);
 8002fc2:	f107 011c 	add.w	r1, r7, #28
 8002fc6:	f107 0220 	add.w	r2, r7, #32
 8002fca:	f107 000c 	add.w	r0, r7, #12
 8002fce:	f107 031b 	add.w	r3, r7, #27
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	493d      	ldr	r1, [pc, #244]	@ (80030cc <Robot_read_serial_msg+0x144>)
 8002fd8:	f008 f990 	bl	800b2fc <siscanf>
 8002fdc:	6278      	str	r0, [r7, #36]	@ 0x24
    if (parsed != 3) {
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d16f      	bne.n	80030c4 <Robot_read_serial_msg+0x13c>
        // Pacchetto incompleto o malformato, esci
        return;
    }

    // Gestione base angle mode
    if (base_angle_config != robot->base_angle_config) {
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7f1a      	ldrb	r2, [r3, #28]
 8002fe8:	7efb      	ldrb	r3, [r7, #27]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d008      	beq.n	8003000 <Robot_read_serial_msg+0x78>
        last_base_angle_stick_val = 0.0f;
 8002fee:	4b38      	ldr	r3, [pc, #224]	@ (80030d0 <Robot_read_serial_msg+0x148>)
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
        robot->pid->speed_sp = 0.0f; // Reset speed setpoint when changing mode
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    robot->base_angle_config = base_angle_config;
 8003000:	7efa      	ldrb	r2, [r7, #27]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	771a      	strb	r2, [r3, #28]

    if (base_angle_config == 1) {
 8003006:	7efb      	ldrb	r3, [r7, #27]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d150      	bne.n	80030ae <Robot_read_serial_msg+0x126>
        if (fabs(js_y) > last_base_angle_stick_val) {
 800300c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003010:	eeb0 7ae7 	vabs.f32	s14, s15
 8003014:	4b2e      	ldr	r3, [pc, #184]	@ (80030d0 <Robot_read_serial_msg+0x148>)
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	dd3c      	ble.n	800309e <Robot_read_serial_msg+0x116>
            robot->pid->base_angle_sp += js_y * 0.1f; // Map joystick Y to base angle setpoint
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	ed93 7a03 	vldr	s14, [r3, #12]
 800302c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003030:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80030d4 <Robot_read_serial_msg+0x14c>
 8003034:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003040:	edc3 7a03 	vstr	s15, [r3, #12]
            if (robot->pid->base_angle_sp > robot->pid->max_angle_offset)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	ed93 7a03 	vldr	s14, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305c:	dd06      	ble.n	800306c <Robot_read_serial_msg+0xe4>
                robot->pid->base_angle_sp = robot->pid->max_angle_offset;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	e018      	b.n	800309e <Robot_read_serial_msg+0x116>
            else if (robot->pid->base_angle_sp < -robot->pid->max_angle_offset)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	ed93 7a03 	vldr	s14, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800307c:	eef1 7a67 	vneg.f32	s15, s15
 8003080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003088:	d509      	bpl.n	800309e <Robot_read_serial_msg+0x116>
                robot->pid->base_angle_sp = -robot->pid->max_angle_offset;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	eef1 7a67 	vneg.f32	s15, s15
 800309a:	edc3 7a03 	vstr	s15, [r3, #12]
        }
        last_base_angle_stick_val = fabs(js_y);
 800309e:	edd7 7a07 	vldr	s15, [r7, #28]
 80030a2:	eef0 7ae7 	vabs.f32	s15, s15
 80030a6:	4b0a      	ldr	r3, [pc, #40]	@ (80030d0 <Robot_read_serial_msg+0x148>)
 80030a8:	edc3 7a00 	vstr	s15, [r3]
 80030ac:	e00b      	b.n	80030c6 <Robot_read_serial_msg+0x13e>
    } else {
        robot->pid->speed_sp = js_y * 3.14f; // Map joystick Y to speed setpoint
 80030ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80030d8 <Robot_read_serial_msg+0x150>
 80030ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030be:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 80030c2:	e000      	b.n	80030c6 <Robot_read_serial_msg+0x13e>
        return;
 80030c4:	bf00      	nop
    }
}
 80030c6:	3728      	adds	r7, #40	@ 0x28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	0800f8f4 	.word	0x0800f8f4
 80030d0:	20000b70 	.word	0x20000b70
 80030d4:	3dcccccd 	.word	0x3dcccccd
 80030d8:	4048f5c3 	.word	0x4048f5c3

080030dc <PID_Init>:


void PID_Init(pid_t *pid){
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	pid->Kp = -2.0f;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80030ea:	601a      	str	r2, [r3, #0]
	pid->Ki = -20.0f;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a15      	ldr	r2, [pc, #84]	@ (8003144 <PID_Init+0x68>)
 80030f0:	605a      	str	r2, [r3, #4]
	pid->Kd = -0.06f;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a14      	ldr	r2, [pc, #80]	@ (8003148 <PID_Init+0x6c>)
 80030f6:	609a      	str	r2, [r3, #8]

	pid->base_angle_sp = 0.0f;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	60da      	str	r2, [r3, #12]

    pid->Kp_speed = 0.4f;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a12      	ldr	r2, [pc, #72]	@ (800314c <PID_Init+0x70>)
 8003104:	619a      	str	r2, [r3, #24]
    pid->Ki_speed = 0.0f;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	61da      	str	r2, [r3, #28]
    pid->Kd_speed = 0.0008f;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a0f      	ldr	r2, [pc, #60]	@ (8003150 <PID_Init+0x74>)
 8003112:	621a      	str	r2, [r3, #32]

    pid->speed_sp = 0.0f; // Do not change, change via joystick
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	625a      	str	r2, [r3, #36]	@ 0x24

    pid->max_angle_offset = 2.0f;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->angle_sp = 0.0f; // Do not change, it is only for CubeMonitor
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	635a      	str	r2, [r3, #52]	@ 0x34

    pid->active = 0;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    PID_Reset(pid);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f907 	bl	8003348 <PID_Reset>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	c1a00000 	.word	0xc1a00000
 8003148:	bd75c28f 	.word	0xbd75c28f
 800314c:	3ecccccd 	.word	0x3ecccccd
 8003150:	3a51b717 	.word	0x3a51b717

08003154 <PID_Update>:

void PID_Update(pid_t *pid) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
    float speed_err = pid->speed_sp - (encoder_r.speed + encoder_l.speed)/2.0f;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003162:	4b72      	ldr	r3, [pc, #456]	@ (800332c <PID_Update+0x1d8>)
 8003164:	edd3 6a02 	vldr	s13, [r3, #8]
 8003168:	4b71      	ldr	r3, [pc, #452]	@ (8003330 <PID_Update+0x1dc>)
 800316a:	edd3 7a02 	vldr	s15, [r3, #8]
 800316e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003172:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003176:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800317a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800317e:	edc7 7a06 	vstr	s15, [r7, #24]

    pid->integral_speed_err += speed_err * SAMPLING_PERIOD;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003188:	4b6a      	ldr	r3, [pc, #424]	@ (8003334 <PID_Update+0x1e0>)
 800318a:	edd3 6a00 	vldr	s13, [r3]
 800318e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    float derivative_speed_err = (speed_err - pid->last_speed_err)/SAMPLING_PERIOD;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80031a6:	ed97 7a06 	vldr	s14, [r7, #24]
 80031aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80031ae:	4b61      	ldr	r3, [pc, #388]	@ (8003334 <PID_Update+0x1e0>)
 80031b0:	ed93 7a00 	vldr	s14, [r3]
 80031b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031b8:	edc7 7a05 	vstr	s15, [r7, #20]

    float angle_offset = pid->Kp_speed * speed_err + pid->Ki_speed * pid->integral_speed_err + pid->Kd_speed * derivative_speed_err;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	ed93 7a06 	vldr	s14, [r3, #24]
 80031c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80031c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	edd3 6a07 	vldr	s13, [r3, #28]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80031d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	edd3 6a08 	vldr	s13, [r3, #32]
 80031e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80031e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f0:	edc7 7a07 	vstr	s15, [r7, #28]

    if (angle_offset > pid->max_angle_offset) angle_offset = pid->max_angle_offset;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80031fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80031fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	dd03      	ble.n	8003210 <PID_Update+0xbc>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	e012      	b.n	8003236 <PID_Update+0xe2>
    else if (angle_offset < -pid->max_angle_offset) angle_offset = -pid->max_angle_offset;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003216:	eef1 7a67 	vneg.f32	s15, s15
 800321a:	ed97 7a07 	vldr	s14, [r7, #28]
 800321e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003226:	d506      	bpl.n	8003236 <PID_Update+0xe2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800322e:	eef1 7a67 	vneg.f32	s15, s15
 8003232:	edc7 7a07 	vstr	s15, [r7, #28]

    pid->angle_sp = pid->base_angle_sp + angle_offset;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	ed93 7a03 	vldr	s14, [r3, #12]
 800323c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	float error = pid->angle_sp - imu.angle;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003250:	4b39      	ldr	r3, [pc, #228]	@ (8003338 <PID_Update+0x1e4>)
 8003252:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800325a:	edc7 7a04 	vstr	s15, [r7, #16]

	pid->integral_error += error * SAMPLING_PERIOD;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	ed93 7a04 	vldr	s14, [r3, #16]
 8003264:	4b33      	ldr	r3, [pc, #204]	@ (8003334 <PID_Update+0x1e0>)
 8003266:	edd3 6a00 	vldr	s13, [r3]
 800326a:	edd7 7a04 	vldr	s15, [r7, #16]
 800326e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	edc3 7a04 	vstr	s15, [r3, #16]
	float derivative_error = (error - pid->last_error)/SAMPLING_PERIOD;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003282:	ed97 7a04 	vldr	s14, [r7, #16]
 8003286:	ee77 6a67 	vsub.f32	s13, s14, s15
 800328a:	4b2a      	ldr	r3, [pc, #168]	@ (8003334 <PID_Update+0x1e0>)
 800328c:	ed93 7a00 	vldr	s14, [r3]
 8003290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003294:	edc7 7a03 	vstr	s15, [r7, #12]

	float speed_setpoint = pid->Kp * error + 
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	ed93 7a00 	vldr	s14, [r3]
 800329e:	edd7 7a04 	vldr	s15, [r7, #16]
 80032a2:	ee27 7a27 	vmul.f32	s14, s14, s15
                            pid->Ki * pid->integral_error +
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80032b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_setpoint = pid->Kp * error + 
 80032b6:	ee37 7a27 	vadd.f32	s14, s14, s15
                            pid->Kd * derivative_error;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80032c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80032c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_setpoint = pid->Kp * error + 
 80032c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032cc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (fabs(error) > 30.0f) {
 80032d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80032d4:	eef0 7ae7 	vabs.f32	s15, s15
 80032d8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80032dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e4:	dd0d      	ble.n	8003302 <PID_Update+0x1ae>
        set_speed(&stepper_l, 0.0f);
 80032e6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800333c <PID_Update+0x1e8>
 80032ea:	4815      	ldr	r0, [pc, #84]	@ (8003340 <PID_Update+0x1ec>)
 80032ec:	f000 f93a 	bl	8003564 <set_speed>
        set_speed(&stepper_r, 0.0f);
 80032f0:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 800333c <PID_Update+0x1e8>
 80032f4:	4813      	ldr	r0, [pc, #76]	@ (8003344 <PID_Update+0x1f0>)
 80032f6:	f000 f935 	bl	8003564 <set_speed>
        PID_Reset(pid);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f824 	bl	8003348 <PID_Reset>
 8003300:	e009      	b.n	8003316 <PID_Update+0x1c2>
    }else {
        set_speed(&stepper_l, speed_setpoint);
 8003302:	ed97 0a02 	vldr	s0, [r7, #8]
 8003306:	480e      	ldr	r0, [pc, #56]	@ (8003340 <PID_Update+0x1ec>)
 8003308:	f000 f92c 	bl	8003564 <set_speed>
        set_speed(&stepper_r, speed_setpoint);
 800330c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003310:	480c      	ldr	r0, [pc, #48]	@ (8003344 <PID_Update+0x1f0>)
 8003312:	f000 f927 	bl	8003564 <set_speed>
    }

    pid->last_speed_err = speed_err;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->last_error = error;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	615a      	str	r2, [r3, #20]
}
 8003322:	bf00      	nop
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200009cc 	.word	0x200009cc
 8003330:	20000a08 	.word	0x20000a08
 8003334:	200009c4 	.word	0x200009c4
 8003338:	20000a44 	.word	0x20000a44
 800333c:	00000000 	.word	0x00000000
 8003340:	20000a20 	.word	0x20000a20
 8003344:	200009e4 	.word	0x200009e4

08003348 <PID_Reset>:

void PID_Reset(pid_t *pid) {
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
    pid->integral_error = 0.0f;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	611a      	str	r2, [r3, #16]
    pid->integral_speed_err = 0.0f;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->last_error = 0.0f;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	615a      	str	r2, [r3, #20]
    pid->last_speed_err = 0.0f;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <speed_control>:
#define AEP 30 // Actual Error Proportional gain
#define LEP 205 // Last Error Proportional gain

float freq = 0.0f; // Frequency in Hz

void speed_control(stepper_t *stepper){
 800337c:	b5b0      	push	{r4, r5, r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	Encoder_read(stepper->encoder);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff f9b3 	bl	80026f4 <Encoder_read>

	float e = stepper->setpoint_speed - stepper->encoder->speed;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	ed93 7a02 	vldr	s14, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	edd3 7a02 	vldr	s15, [r3, #8]
 800339c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a0:	edc7 7a03 	vstr	s15, [r7, #12]

	// stepper->frequency += e / ANGLE_STEP; // Integral only controller

	stepper->frequency += e * AEP + stepper->last_error * LEP; // PI controller
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80033aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80033ae:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 80033b2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	edd3 7a00 	vldr	s15, [r3]
 80033bc:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 8003550 <speed_control+0x1d4>
 80033c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80033c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	edc3 7a03 	vstr	s15, [r3, #12]
	stepper->last_error = e;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	601a      	str	r2, [r3, #0]

	uint8_t sign = stepper->frequency > 0;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	edd3 7a03 	vldr	s15, [r3, #12]
 80033de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e6:	bfcc      	ite	gt
 80033e8:	2301      	movgt	r3, #1
 80033ea:	2300      	movle	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	72fb      	strb	r3, [r7, #11]

	freq = stepper->frequency; // Store frequency for debugging
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a57      	ldr	r2, [pc, #348]	@ (8003554 <speed_control+0x1d8>)
 80033f6:	6013      	str	r3, [r2, #0]

	if (fabs(stepper->frequency) > MAX_CTRL_FREQUENCY) {
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80033fe:	eef0 7ae7 	vabs.f32	s15, s15
 8003402:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003558 <speed_control+0x1dc>
 8003406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800340a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340e:	dd3c      	ble.n	800348a <speed_control+0x10e>
		stepper->frequency = MAX_CTRL_FREQUENCY * (sign?1:-1); // Limit frequency to 9000 Hz
 8003410:	7afb      	ldrb	r3, [r7, #11]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <speed_control+0xa0>
 8003416:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800341a:	e001      	b.n	8003420 <speed_control+0xa4>
 800341c:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8003420:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003558 <speed_control+0x1dc>
 8003424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	edc3 7a03 	vstr	s15, [r3, #12]
		stepper->last_error = (sign && stepper->last_error>0) || (!sign && stepper->last_error<0) ? 0 : stepper->last_error; // Reset last error if the direction has changed
 800342e:	7afb      	ldrb	r3, [r7, #11]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00f      	beq.n	8003454 <speed_control+0xd8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	edd3 7a00 	vldr	s15, [r3]
 800343a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800343e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003442:	bfcc      	ite	gt
 8003444:	2301      	movgt	r3, #1
 8003446:	2300      	movle	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f083 0301 	eor.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d015      	beq.n	8003480 <speed_control+0x104>
 8003454:	7afb      	ldrb	r3, [r7, #11]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10f      	bne.n	800347a <speed_control+0xfe>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003468:	bf4c      	ite	mi
 800346a:	2301      	movmi	r3, #1
 800346c:	2300      	movpl	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f083 0301 	eor.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <speed_control+0x104>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	e001      	b.n	8003484 <speed_control+0x108>
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	e00f      	b.n	80034aa <speed_control+0x12e>
	} else if (fabs(stepper->frequency) < 20) {
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003490:	eef0 7ae7 	vabs.f32	s15, s15
 8003494:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800349c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a0:	d503      	bpl.n	80034aa <speed_control+0x12e>
		stepper->frequency = 0; // Stop the motor if frequency is too low
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	60da      	str	r2, [r3, #12]
	}

	HAL_GPIO_WritePin(stepper->DIR_PORT, stepper->DIR_PIN, (stepper->encoder->direction_invert > 0 ? sign : !sign));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69d8      	ldr	r0, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	8c19      	ldrh	r1, [r3, #32]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	dc06      	bgt.n	80034cc <speed_control+0x150>
 80034be:	7afb      	ldrb	r3, [r7, #11]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e000      	b.n	80034ce <speed_control+0x152>
 80034cc:	7afb      	ldrb	r3, [r7, #11]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f002 fd08 	bl	8005ee4 <HAL_GPIO_WritePin>

	stepper->tim->ARR = fabs(1/stepper->frequency)*HCLK-1; // period = (1+ARR)*(1+PSC)/HCLK;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80034da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e2:	eef0 7ae7 	vabs.f32	s15, s15
 80034e6:	ee17 0a90 	vmov	r0, s15
 80034ea:	f7fd f85d 	bl	80005a8 <__aeabi_f2d>
 80034ee:	4604      	mov	r4, r0
 80034f0:	460d      	mov	r5, r1
 80034f2:	4b1a      	ldr	r3, [pc, #104]	@ (800355c <speed_control+0x1e0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd f834 	bl	8000564 <__aeabi_ui2d>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4620      	mov	r0, r4
 8003502:	4629      	mov	r1, r5
 8003504:	f7fd f8a8 	bl	8000658 <__aeabi_dmul>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	4b12      	ldr	r3, [pc, #72]	@ (8003560 <speed_control+0x1e4>)
 8003516:	f7fc fee7 	bl	80002e8 <__aeabi_dsub>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4610      	mov	r0, r2
 8003520:	4619      	mov	r1, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695c      	ldr	r4, [r3, #20]
 8003526:	f7fd fb6f 	bl	8000c08 <__aeabi_d2uiz>
 800352a:	4603      	mov	r3, r0
 800352c:	62e3      	str	r3, [r4, #44]	@ 0x2c
	*stepper->CCR = (stepper->tim->ARR+1)/2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	0852      	lsrs	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
	stepper->tim->EGR = TIM_EGR_UG;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	2201      	movs	r2, #1
 8003544:	615a      	str	r2, [r3, #20]
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bdb0      	pop	{r4, r5, r7, pc}
 800354e:	bf00      	nop
 8003550:	434d0000 	.word	0x434d0000
 8003554:	20000b74 	.word	0x20000b74
 8003558:	460ca000 	.word	0x460ca000
 800355c:	200009c8 	.word	0x200009c8
 8003560:	3ff00000 	.word	0x3ff00000

08003564 <set_speed>:

void set_speed(stepper_t *stepper, float speed){
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	ed87 0a00 	vstr	s0, [r7]
	stepper->setpoint_speed = speed;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	609a      	str	r2, [r3, #8]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <Stepper_init>:

void Stepper_init(stepper_t *stepper, TIM_HandleTypeDef *htim, uint32_t tim_channel,
		encoder_t *encoder, GPIO_TypeDef *DIR_PORT, uint16_t DIR_PIN){
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
	stepper->angle_step = ANGLE_STEP;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a34      	ldr	r2, [pc, #208]	@ (8003668 <Stepper_init+0xe4>)
 8003596:	605a      	str	r2, [r3, #4]
	stepper->tim = htim->Instance;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	615a      	str	r2, [r3, #20]
	stepper->DIR_PORT = DIR_PORT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	61da      	str	r2, [r3, #28]
	stepper->DIR_PIN = DIR_PIN;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8bba      	ldrh	r2, [r7, #28]
 80035aa:	841a      	strh	r2, [r3, #32]
	switch (tim_channel){
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b0c      	cmp	r3, #12
 80035b0:	d838      	bhi.n	8003624 <Stepper_init+0xa0>
 80035b2:	a201      	add	r2, pc, #4	@ (adr r2, 80035b8 <Stepper_init+0x34>)
 80035b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b8:	080035ed 	.word	0x080035ed
 80035bc:	08003625 	.word	0x08003625
 80035c0:	08003625 	.word	0x08003625
 80035c4:	08003625 	.word	0x08003625
 80035c8:	080035fb 	.word	0x080035fb
 80035cc:	08003625 	.word	0x08003625
 80035d0:	08003625 	.word	0x08003625
 80035d4:	08003625 	.word	0x08003625
 80035d8:	08003609 	.word	0x08003609
 80035dc:	08003625 	.word	0x08003625
 80035e0:	08003625 	.word	0x08003625
 80035e4:	08003625 	.word	0x08003625
 80035e8:	08003617 	.word	0x08003617
	case TIM_CHANNEL_1:
		stepper->CCR = &stepper->tim->CCR1;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	619a      	str	r2, [r3, #24]
		break;
 80035f8:	e018      	b.n	800362c <Stepper_init+0xa8>
	case TIM_CHANNEL_2:
		stepper->CCR = &stepper->tim->CCR2;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	619a      	str	r2, [r3, #24]
		break;
 8003606:	e011      	b.n	800362c <Stepper_init+0xa8>
	case TIM_CHANNEL_3:
		stepper->CCR = &stepper->tim->CCR3;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	619a      	str	r2, [r3, #24]
		break;
 8003614:	e00a      	b.n	800362c <Stepper_init+0xa8>
	case TIM_CHANNEL_4:
		stepper->CCR = &stepper->tim->CCR4;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	619a      	str	r2, [r3, #24]
		break;
 8003622:	e003      	b.n	800362c <Stepper_init+0xa8>
	default:
		stepper->CCR = NULL;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	619a      	str	r2, [r3, #24]
		break;
 800362a:	bf00      	nop
	}

	if (stepper->CCR != NULL)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <Stepper_init+0xb8>
		*stepper->CCR = 0; // Disattiva il PWM (duty cycle 0)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

	stepper->encoder = encoder;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	611a      	str	r2, [r3, #16]
	stepper->setpoint_speed = 0;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
	stepper->frequency = 0;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	60da      	str	r2, [r3, #12]
	stepper->last_error = 0;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	3a80adff 	.word	0x3a80adff

0800366c <MAX72_init>:
    {0x0C, 0x01}, // Shutdown Register: normal operation
    {0x0F, 0x00}  // Display Test: off
};

void MAX72_init(display_t *display)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[8];
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8003674:	2300      	movs	r3, #0
 8003676:	75fb      	strb	r3, [r7, #23]
 8003678:	e035      	b.n	80036e6 <MAX72_init+0x7a>
        // riempi txBuf con 4 volte InitCommands[cmd]
        for (uint8_t dev=0; dev<4; dev++) {
 800367a:	2300      	movs	r3, #0
 800367c:	75bb      	strb	r3, [r7, #22]
 800367e:	e01a      	b.n	80036b6 <MAX72_init+0x4a>
            txBuf[dev*2]   = InitCommands[cmd][0];
 8003680:	7dfa      	ldrb	r2, [r7, #23]
 8003682:	7dbb      	ldrb	r3, [r7, #22]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4929      	ldr	r1, [pc, #164]	@ (800372c <MAX72_init+0xc0>)
 8003688:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 800368c:	3318      	adds	r3, #24
 800368e:	443b      	add	r3, r7
 8003690:	f803 2c0c 	strb.w	r2, [r3, #-12]
            txBuf[dev*2+1] = InitCommands[cmd][1];
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	7dba      	ldrb	r2, [r7, #22]
 8003698:	0052      	lsls	r2, r2, #1
 800369a:	3201      	adds	r2, #1
 800369c:	4923      	ldr	r1, [pc, #140]	@ (800372c <MAX72_init+0xc0>)
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	440b      	add	r3, r1
 80036a2:	7859      	ldrb	r1, [r3, #1]
 80036a4:	f102 0318 	add.w	r3, r2, #24
 80036a8:	443b      	add	r3, r7
 80036aa:	460a      	mov	r2, r1
 80036ac:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (uint8_t dev=0; dev<4; dev++) {
 80036b0:	7dbb      	ldrb	r3, [r7, #22]
 80036b2:	3301      	adds	r3, #1
 80036b4:	75bb      	strb	r3, [r7, #22]
 80036b6:	7dbb      	ldrb	r3, [r7, #22]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d9e1      	bls.n	8003680 <MAX72_init+0x14>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // CS
 80036bc:	2200      	movs	r2, #0
 80036be:	2110      	movs	r1, #16
 80036c0:	481b      	ldr	r0, [pc, #108]	@ (8003730 <MAX72_init+0xc4>)
 80036c2:	f002 fc0f 	bl	8005ee4 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 80036c6:	f107 010c 	add.w	r1, r7, #12
 80036ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036ce:	2208      	movs	r2, #8
 80036d0:	4818      	ldr	r0, [pc, #96]	@ (8003734 <MAX72_init+0xc8>)
 80036d2:	f004 fdbc 	bl	800824e <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // CS
 80036d6:	2201      	movs	r2, #1
 80036d8:	2110      	movs	r1, #16
 80036da:	4815      	ldr	r0, [pc, #84]	@ (8003730 <MAX72_init+0xc4>)
 80036dc:	f002 fc02 	bl	8005ee4 <HAL_GPIO_WritePin>
    for (uint8_t cmd=0; cmd<5; cmd++) {
 80036e0:	7dfb      	ldrb	r3, [r7, #23]
 80036e2:	3301      	adds	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d9c6      	bls.n	800367a <MAX72_init+0xe>
    }

    display->data_count = 0; // Inizializza il numero di dati a 0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    display->current_index = 0; // Inizializza l'indice corrente a 0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    display->data_duration = 5; // Imposta la durata di visualizzazione a 5 secondi
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2205      	movs	r2, #5
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    display->change_enabled = 1; // Abilita il cambio automatico dei dati
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    display->update_enabled = 1; // Abilita l'aggiornamento automatico dei dati
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    display->last_change_time = HAL_GetTick(); // Inizializza il tempo dell'ultimo cambio a ora corrente
 8003714:	f001 f8da 	bl	80048cc <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	649a      	str	r2, [r3, #72]	@ 0x48
    MAX72_Clear(); // Pulisce il display all'inizio
 800371e:	f000 f847 	bl	80037b0 <MAX72_Clear>
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	0800f95c 	.word	0x0800f95c
 8003730:	40020400 	.word	0x40020400
 8003734:	200006dc 	.word	0x200006dc

08003738 <MAX72_SendRow>:

void MAX72_SendRow(uint8_t row, uint8_t pattern[DEV_NUM])
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	6039      	str	r1, [r7, #0]
 8003742:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[8];
    // pattern[i] = dato per il modulo i
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 8003744:	2300      	movs	r3, #0
 8003746:	75fb      	strb	r3, [r7, #23]
 8003748:	e014      	b.n	8003774 <MAX72_SendRow+0x3c>
        txBuf[dev*2]   = row;          // registro DIG[row]
 800374a:	7dfb      	ldrb	r3, [r7, #23]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	3318      	adds	r3, #24
 8003750:	443b      	add	r3, r7
 8003752:	79fa      	ldrb	r2, [r7, #7]
 8003754:	f803 2c0c 	strb.w	r2, [r3, #-12]
        txBuf[dev*2+1] = pattern[dev]; // i‑esimo byte di dati
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	441a      	add	r2, r3
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	3301      	adds	r3, #1
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	3318      	adds	r3, #24
 8003768:	443b      	add	r3, r7
 800376a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 800376e:	7dfb      	ldrb	r3, [r7, #23]
 8003770:	3301      	adds	r3, #1
 8003772:	75fb      	strb	r3, [r7, #23]
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d9e7      	bls.n	800374a <MAX72_SendRow+0x12>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800377a:	2200      	movs	r2, #0
 800377c:	2110      	movs	r1, #16
 800377e:	480a      	ldr	r0, [pc, #40]	@ (80037a8 <MAX72_SendRow+0x70>)
 8003780:	f002 fbb0 	bl	8005ee4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8003784:	f107 010c 	add.w	r1, r7, #12
 8003788:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800378c:	2208      	movs	r2, #8
 800378e:	4807      	ldr	r0, [pc, #28]	@ (80037ac <MAX72_SendRow+0x74>)
 8003790:	f004 fd5d 	bl	800824e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003794:	2201      	movs	r2, #1
 8003796:	2110      	movs	r1, #16
 8003798:	4803      	ldr	r0, [pc, #12]	@ (80037a8 <MAX72_SendRow+0x70>)
 800379a:	f002 fba3 	bl	8005ee4 <HAL_GPIO_WritePin>
}
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40020400 	.word	0x40020400
 80037ac:	200006dc 	.word	0x200006dc

080037b0 <MAX72_Clear>:

void MAX72_Clear(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
	uint8_t emptyPattern[4] = {0, 0, 0, 0};
 80037b6:	2300      	movs	r3, #0
 80037b8:	603b      	str	r3, [r7, #0]
	    for (uint8_t row=1; row<=8; row++) {
 80037ba:	2301      	movs	r3, #1
 80037bc:	71fb      	strb	r3, [r7, #7]
 80037be:	e008      	b.n	80037d2 <MAX72_Clear+0x22>
	        MAX72_SendRow(row, emptyPattern);
 80037c0:	463a      	mov	r2, r7
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff ffb6 	bl	8003738 <MAX72_SendRow>
	    for (uint8_t row=1; row<=8; row++) {
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	3301      	adds	r3, #1
 80037d0:	71fb      	strb	r3, [r7, #7]
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d9f3      	bls.n	80037c0 <MAX72_Clear+0x10>
	    }
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <MAX72_Add_Data>:

void MAX72_Add_Data(display_t *display, display_data_t *data) {
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
	if (display->data_count < MAX_DATA_LENGTH) {
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037f2:	2b07      	cmp	r3, #7
 80037f4:	d813      	bhi.n	800381e <MAX72_Add_Data+0x3c>
		display->data[display->data_count] = *data; // Aggiungi i dati al display
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6839      	ldr	r1, [r7, #0]
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4413      	add	r3, r2
 8003804:	460a      	mov	r2, r1
 8003806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800380a:	e883 0003 	stmia.w	r3, {r0, r1}
		display->data_count++; // Incrementa il conteggio dei dati
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003814:	3301      	adds	r3, #1
 8003816:	b2da      	uxtb	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}

	if (display->data_count == 1) {
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003824:	2b01      	cmp	r3, #1
 8003826:	d103      	bne.n	8003830 <MAX72_Add_Data+0x4e>
		MAX72_Change_Data(display,1); // Se è il primo dato, aggiorna subito il display
 8003828:	2101      	movs	r1, #1
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f904 	bl	8003a38 <MAX72_Change_Data>
	}
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <MAX72_Update_Data>:
			break; // Esci dal ciclo dopo aver rimosso il dato
		}
	}
}

void MAX72_Update_Data(display_t *display) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	if (display->data_count == 0 || !display->update_enabled) {
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80e8 	beq.w	8003a1c <MAX72_Update_Data+0x1e4>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80e2 	beq.w	8003a1c <MAX72_Update_Data+0x1e4>
		return; // Non ci sono dati da visualizzare
	}

	display_data_t *current_data = &display->data[display->current_index];
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]

	switch (current_data->settings) {
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	791b      	ldrb	r3, [r3, #4]
 800386a:	2b03      	cmp	r3, #3
 800386c:	f200 80df 	bhi.w	8003a2e <MAX72_Update_Data+0x1f6>
 8003870:	a201      	add	r2, pc, #4	@ (adr r2, 8003878 <MAX72_Update_Data+0x40>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	08003889 	.word	0x08003889
 800387c:	080039a5 	.word	0x080039a5
 8003880:	080039d5 	.word	0x080039d5
 8003884:	080039ef 	.word	0x080039ef
		case PRINT_INT:
			switch(current_data->type) {
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	799b      	ldrb	r3, [r3, #6]
 800388c:	2b09      	cmp	r3, #9
 800388e:	f200 80c7 	bhi.w	8003a20 <MAX72_Update_Data+0x1e8>
 8003892:	a201      	add	r2, pc, #4	@ (adr r2, 8003898 <MAX72_Update_Data+0x60>)
 8003894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003898:	080038c1 	.word	0x080038c1
 800389c:	080038d5 	.word	0x080038d5
 80038a0:	080038eb 	.word	0x080038eb
 80038a4:	08003901 	.word	0x08003901
 80038a8:	08003917 	.word	0x08003917
 80038ac:	0800392d 	.word	0x0800392d
 80038b0:	08003945 	.word	0x08003945
 80038b4:	0800395d 	.word	0x0800395d
 80038b8:	08003971 	.word	0x08003971
 80038bc:	08003987 	.word	0x08003987
				case DISPLAY_TYPE_INT:
					MAX72_Print_Int(*(int *)current_data->data, current_data->string_settings);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	795b      	ldrb	r3, [r3, #5]
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f000 fb9d 	bl	800400c <MAX72_Print_Int>
					break;
 80038d2:	e066      	b.n	80039a2 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT8:
					MAX72_Print_Int((int)*(uint8_t *)current_data->data, current_data->string_settings);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	795b      	ldrb	r3, [r3, #5]
 80038e0:	4619      	mov	r1, r3
 80038e2:	4610      	mov	r0, r2
 80038e4:	f000 fb92 	bl	800400c <MAX72_Print_Int>
					break;
 80038e8:	e05b      	b.n	80039a2 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT16:
					MAX72_Print_Int((int)*(uint16_t *)current_data->data, current_data->string_settings);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	795b      	ldrb	r3, [r3, #5]
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f000 fb87 	bl	800400c <MAX72_Print_Int>
					break;
 80038fe:	e050      	b.n	80039a2 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT32:
					MAX72_Print_Int((int)*(uint32_t *)current_data->data, current_data->string_settings);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	795b      	ldrb	r3, [r3, #5]
 800390c:	4619      	mov	r1, r3
 800390e:	4610      	mov	r0, r2
 8003910:	f000 fb7c 	bl	800400c <MAX72_Print_Int>
					break;
 8003914:	e045      	b.n	80039a2 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT64:
					MAX72_Print_Int((int)*(uint64_t *)current_data->data, current_data->string_settings);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	795b      	ldrb	r3, [r3, #5]
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f000 fb71 	bl	800400c <MAX72_Print_Int>
					break;
 800392a:	e03a      	b.n	80039a2 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT8:
					MAX72_Print_Int(*(int8_t *)current_data->data, current_data->string_settings);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f993 3000 	ldrsb.w	r3, [r3]
 8003934:	461a      	mov	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	795b      	ldrb	r3, [r3, #5]
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f000 fb65 	bl	800400c <MAX72_Print_Int>
					break;
 8003942:	e02e      	b.n	80039a2 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT16:
					MAX72_Print_Int(*(int16_t *)current_data->data, current_data->string_settings);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800394c:	461a      	mov	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	795b      	ldrb	r3, [r3, #5]
 8003952:	4619      	mov	r1, r3
 8003954:	4610      	mov	r0, r2
 8003956:	f000 fb59 	bl	800400c <MAX72_Print_Int>
					break;
 800395a:	e022      	b.n	80039a2 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT32:
					MAX72_Print_Int(*(int32_t *)current_data->data, current_data->string_settings);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	795b      	ldrb	r3, [r3, #5]
 8003966:	4619      	mov	r1, r3
 8003968:	4610      	mov	r0, r2
 800396a:	f000 fb4f 	bl	800400c <MAX72_Print_Int>
					break;
 800396e:	e018      	b.n	80039a2 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT64:
					MAX72_Print_Int(*(int64_t *)current_data->data, current_data->string_settings);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	795b      	ldrb	r3, [r3, #5]
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 fb44 	bl	800400c <MAX72_Print_Int>
					break;
 8003984:	e00d      	b.n	80039a2 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_FLOAT:
					MAX72_Print_Int((int)*(float *)current_data->data, current_data->string_settings);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	edd3 7a00 	vldr	s15, [r3]
 800398e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	795b      	ldrb	r3, [r3, #5]
 8003996:	4619      	mov	r1, r3
 8003998:	ee17 0a90 	vmov	r0, s15
 800399c:	f000 fb36 	bl	800400c <MAX72_Print_Int>
					break;
 80039a0:	bf00      	nop
			}
			break;
 80039a2:	e03d      	b.n	8003a20 <MAX72_Update_Data+0x1e8>
		case PRINT_FLOAT:
			if (current_data->type == DISPLAY_TYPE_FLOAT) {
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	799b      	ldrb	r3, [r3, #6]
 80039a8:	2b09      	cmp	r3, #9
 80039aa:	d13b      	bne.n	8003a24 <MAX72_Update_Data+0x1ec>
				MAX72_Print_Float(*(float *)current_data->data, current_data->float_decimals, current_data->string_settings == 2);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	edd3 7a00 	vldr	s15, [r3]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	79da      	ldrb	r2, [r3, #7]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	795b      	ldrb	r3, [r3, #5]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	eeb0 0a67 	vmov.f32	s0, s15
 80039ce:	f000 fb79 	bl	80040c4 <MAX72_Print_Float>
			}
			break;
 80039d2:	e027      	b.n	8003a24 <MAX72_Update_Data+0x1ec>
		case PRINT_STRING:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	799b      	ldrb	r3, [r3, #6]
 80039d8:	2b0a      	cmp	r3, #10
 80039da:	d125      	bne.n	8003a28 <MAX72_Update_Data+0x1f0>
				MAX72_Print_String((const char *)current_data->data, current_data->string_settings);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	795b      	ldrb	r3, [r3, #5]
 80039e4:	4619      	mov	r1, r3
 80039e6:	4610      	mov	r0, r2
 80039e8:	f000 f890 	bl	8003b0c <MAX72_Print_String>
			}
			break;
 80039ec:	e01c      	b.n	8003a28 <MAX72_Update_Data+0x1f0>
		case PRINT_SCROLL:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	799b      	ldrb	r3, [r3, #6]
 80039f2:	2b0a      	cmp	r3, #10
 80039f4:	d11a      	bne.n	8003a2c <MAX72_Update_Data+0x1f4>
				// update scroll_state.updated if text has changed
				if (strcmp(scroll_state.text, (const char *)current_data->data) != 0) {
 80039f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a34 <MAX72_Update_Data+0x1fc>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4619      	mov	r1, r3
 8003a00:	4610      	mov	r0, r2
 8003a02:	f7fc fc05 	bl	8000210 <strcmp>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00f      	beq.n	8003a2c <MAX72_Update_Data+0x1f4>
					scroll_state.updated = 1; // Indica che il testo è stato aggiornato
 8003a0c:	4b09      	ldr	r3, [pc, #36]	@ (8003a34 <MAX72_Update_Data+0x1fc>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	739a      	strb	r2, [r3, #14]

					scroll_state.text = (const char *)current_data->data;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a07      	ldr	r2, [pc, #28]	@ (8003a34 <MAX72_Update_Data+0x1fc>)
 8003a18:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 8003a1a:	e007      	b.n	8003a2c <MAX72_Update_Data+0x1f4>
		return; // Non ci sono dati da visualizzare
 8003a1c:	bf00      	nop
 8003a1e:	e006      	b.n	8003a2e <MAX72_Update_Data+0x1f6>
			break;
 8003a20:	bf00      	nop
 8003a22:	e004      	b.n	8003a2e <MAX72_Update_Data+0x1f6>
			break;
 8003a24:	bf00      	nop
 8003a26:	e002      	b.n	8003a2e <MAX72_Update_Data+0x1f6>
			break;
 8003a28:	bf00      	nop
 8003a2a:	e000      	b.n	8003a2e <MAX72_Update_Data+0x1f6>
			break;
 8003a2c:	bf00      	nop
	}
}
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000be4 	.word	0x20000be4

08003a38 <MAX72_Change_Data>:

void MAX72_Change_Data(display_t *display, uint8_t force_change) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	70fb      	strb	r3, [r7, #3]
	if (display->data_count == 0 || (!display->change_enabled && !force_change)) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d055      	beq.n	8003afa <MAX72_Change_Data+0xc2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <MAX72_Change_Data+0x26>
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d04d      	beq.n	8003afa <MAX72_Change_Data+0xc2>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
	}

	uint32_t currentTime = HAL_GetTick();
 8003a5e:	f000 ff35 	bl	80048cc <HAL_GetTick>
 8003a62:	60f8      	str	r0, [r7, #12]
	if (!force_change && currentTime - display->last_change_time < (uint32_t)display->data_duration * 1000) {
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10d      	bne.n	8003a86 <MAX72_Change_Data+0x4e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	1ad2      	subs	r2, r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a7e:	fb01 f303 	mul.w	r3, r1, r3
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d33b      	bcc.n	8003afe <MAX72_Change_Data+0xc6>
		return;
	}
	display->current_index = (display->current_index + 1) % display->data_count;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8003a94:	fb93 f1f2 	sdiv	r1, r3, r2
 8003a98:	fb01 f202 	mul.w	r2, r1, r2
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	display->last_change_time = currentTime;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	649a      	str	r2, [r3, #72]	@ 0x48

	if (display->data[display->current_index].settings == PRINT_SCROLL) {
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	791b      	ldrb	r3, [r3, #4]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d113      	bne.n	8003ae6 <MAX72_Change_Data+0xae>
		if(!scroll_state.enabled || display->data_count > 1){
 8003abe:	4b12      	ldr	r3, [pc, #72]	@ (8003b08 <MAX72_Change_Data+0xd0>)
 8003ac0:	7b5b      	ldrb	r3, [r3, #13]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <MAX72_Change_Data+0x98>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d910      	bls.n	8003af2 <MAX72_Change_Data+0xba>
		MAX72_Scroll_Start_IT((const char *)display->data[display->current_index].data);}
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fc5e 	bl	80043a0 <MAX72_Scroll_Start_IT>
 8003ae4:	e005      	b.n	8003af2 <MAX72_Change_Data+0xba>
	} else if (scroll_state.enabled) {
 8003ae6:	4b08      	ldr	r3, [pc, #32]	@ (8003b08 <MAX72_Change_Data+0xd0>)
 8003ae8:	7b5b      	ldrb	r3, [r3, #13]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <MAX72_Change_Data+0xba>
		MAX72_Scroll_Stop();
 8003aee:	f000 fcbd 	bl	800446c <MAX72_Scroll_Stop>
	}

	MAX72_Update_Data(display); // Aggiorna i dati visualizzati)
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff fea0 	bl	8003838 <MAX72_Update_Data>
 8003af8:	e002      	b.n	8003b00 <MAX72_Change_Data+0xc8>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <MAX72_Change_Data+0xc8>
		return;
 8003afe:	bf00      	nop
}
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000be4 	.word	0x20000be4

08003b0c <MAX72_Print_String>:
//        HAL_Delay(500);
//    }
//}

void MAX72_Print_String(const char *str, uint8_t settings)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b094      	sub	sp, #80	@ 0x50
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	70fb      	strb	r3, [r7, #3]
    uint8_t len = strlen(str);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fc fbd9 	bl	80002d0 <strlen>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    if (settings == MINIDIGITS) {
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	f040 8119 	bne.w	8003d5e <MAX72_Print_String+0x252>
    	char padded[8] = {0};
 8003b2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
    	        // Calcola padding all'inizio (right align)
    	        uint8_t start = (len < 8) ? (8 - len) : 0;
 8003b36:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003b3a:	2b07      	cmp	r3, #7
 8003b3c:	d805      	bhi.n	8003b4a <MAX72_Print_String+0x3e>
 8003b3e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003b42:	f1c3 0308 	rsb	r3, r3, #8
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	e000      	b.n	8003b4c <MAX72_Print_String+0x40>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    	        // Spazi iniziali
    	        for (uint8_t i = 0; i < start; i++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8003b56:	e00b      	b.n	8003b70 <MAX72_Print_String+0x64>
    	            padded[i] = ' ';
 8003b58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003b5c:	3350      	adds	r3, #80	@ 0x50
 8003b5e:	443b      	add	r3, r7
 8003b60:	2220      	movs	r2, #32
 8003b62:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < start; i++)
 8003b66:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8003b70:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003b74:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d3ed      	bcc.n	8003b58 <MAX72_Print_String+0x4c>
    	        // Copia la stringa
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8003b82:	e012      	b.n	8003baa <MAX72_Print_String+0x9e>
    	            padded[start + i] = str[i];
 8003b84:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	441a      	add	r2, r3
 8003b8c:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8003b90:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003b94:	440b      	add	r3, r1
 8003b96:	7812      	ldrb	r2, [r2, #0]
 8003b98:	3350      	adds	r3, #80	@ 0x50
 8003b9a:	443b      	add	r3, r7
 8003b9c:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8003ba0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8003baa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003bae:	2b07      	cmp	r3, #7
 8003bb0:	d805      	bhi.n	8003bbe <MAX72_Print_String+0xb2>
 8003bb2:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8003bb6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d3e2      	bcc.n	8003b84 <MAX72_Print_String+0x78>

        char reversed[8];
        for (uint8_t i = 0; i < 8; i++)
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8003bc4:	e012      	b.n	8003bec <MAX72_Print_String+0xe0>
            reversed[i] = padded[7 - i];
 8003bc6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003bca:	f1c3 0207 	rsb	r2, r3, #7
 8003bce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003bd2:	3250      	adds	r2, #80	@ 0x50
 8003bd4:	443a      	add	r2, r7
 8003bd6:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8003bda:	3350      	adds	r3, #80	@ 0x50
 8003bdc:	443b      	add	r3, r7
 8003bde:	f803 2c28 	strb.w	r2, [r3, #-40]
        for (uint8_t i = 0; i < 8; i++)
 8003be2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003be6:	3301      	adds	r3, #1
 8003be8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8003bec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003bf0:	2b07      	cmp	r3, #7
 8003bf2:	d9e8      	bls.n	8003bc6 <MAX72_Print_String+0xba>

        for (uint8_t row = 0; row < 8; row++) {
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8003bfa:	e0aa      	b.n	8003d52 <MAX72_Print_String+0x246>
            uint8_t pat[4] = {0};
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	627b      	str	r3, [r7, #36]	@ 0x24

            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8003c06:	e090      	b.n	8003d2a <MAX72_Print_String+0x21e>
                uint8_t c1 = reversed[byte_idx * 2];
 8003c08:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	3350      	adds	r3, #80	@ 0x50
 8003c10:	443b      	add	r3, r7
 8003c12:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c16:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t c2 = reversed[byte_idx * 2 + 1];
 8003c1a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	3301      	adds	r3, #1
 8003c22:	3350      	adds	r3, #80	@ 0x50
 8003c24:	443b      	add	r3, r7
 8003c26:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c2a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                uint8_t char1_pattern = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                uint8_t char2_pattern = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                if (c1 >= '0' && c1 <= '9')
 8003c3a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003c3e:	2b2f      	cmp	r3, #47	@ 0x2f
 8003c40:	d913      	bls.n	8003c6a <MAX72_Print_String+0x15e>
 8003c42:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003c46:	2b39      	cmp	r3, #57	@ 0x39
 8003c48:	d80f      	bhi.n	8003c6a <MAX72_Print_String+0x15e>
                    char1_pattern = DIGITS[c1 - '0' + 2][row] & 0x07;
 8003c4a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003c4e:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 8003c52:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003c56:	49cd      	ldr	r1, [pc, #820]	@ (8003f8c <MAX72_Print_String+0x480>)
 8003c58:	00d2      	lsls	r2, r2, #3
 8003c5a:	440a      	add	r2, r1
 8003c5c:	4413      	add	r3, r2
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8003c68:	e019      	b.n	8003c9e <MAX72_Print_String+0x192>
                else if (c1 == '-')
 8003c6a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003c6e:	2b2d      	cmp	r3, #45	@ 0x2d
 8003c70:	d109      	bne.n	8003c86 <MAX72_Print_String+0x17a>
                    char1_pattern = DIGITS[1][row] & 0x07;
 8003c72:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003c76:	4ac5      	ldr	r2, [pc, #788]	@ (8003f8c <MAX72_Print_String+0x480>)
 8003c78:	4413      	add	r3, r2
 8003c7a:	7a1b      	ldrb	r3, [r3, #8]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8003c84:	e00b      	b.n	8003c9e <MAX72_Print_String+0x192>
                else if (c1 == '.')
 8003c86:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003c8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c8c:	d107      	bne.n	8003c9e <MAX72_Print_String+0x192>
					char1_pattern = DIGITS[0][row] & 0x07;
 8003c8e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003c92:	4abe      	ldr	r2, [pc, #760]	@ (8003f8c <MAX72_Print_String+0x480>)
 8003c94:	5cd3      	ldrb	r3, [r2, r3]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

                if (c2 >= '0' && c2 <= '9')
 8003c9e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003ca2:	2b2f      	cmp	r3, #47	@ 0x2f
 8003ca4:	d913      	bls.n	8003cce <MAX72_Print_String+0x1c2>
 8003ca6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003caa:	2b39      	cmp	r3, #57	@ 0x39
 8003cac:	d80f      	bhi.n	8003cce <MAX72_Print_String+0x1c2>
                    char2_pattern = DIGITS[c2 - '0' + 2][row] & 0x07;
 8003cae:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003cb2:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 8003cb6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003cba:	49b4      	ldr	r1, [pc, #720]	@ (8003f8c <MAX72_Print_String+0x480>)
 8003cbc:	00d2      	lsls	r2, r2, #3
 8003cbe:	440a      	add	r2, r1
 8003cc0:	4413      	add	r3, r2
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8003ccc:	e019      	b.n	8003d02 <MAX72_Print_String+0x1f6>
                else if (c2 == '-')
 8003cce:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003cd2:	2b2d      	cmp	r3, #45	@ 0x2d
 8003cd4:	d109      	bne.n	8003cea <MAX72_Print_String+0x1de>
                    char2_pattern = DIGITS[1][row] & 0x07;
 8003cd6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003cda:	4aac      	ldr	r2, [pc, #688]	@ (8003f8c <MAX72_Print_String+0x480>)
 8003cdc:	4413      	add	r3, r2
 8003cde:	7a1b      	ldrb	r3, [r3, #8]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8003ce8:	e00b      	b.n	8003d02 <MAX72_Print_String+0x1f6>
                else if (c2 == '.')
 8003cea:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003cee:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cf0:	d107      	bne.n	8003d02 <MAX72_Print_String+0x1f6>
                	char2_pattern = DIGITS[0][row] & 0x07;
 8003cf2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003cf6:	4aa5      	ldr	r2, [pc, #660]	@ (8003f8c <MAX72_Print_String+0x480>)
 8003cf8:	5cd3      	ldrb	r3, [r2, r3]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                pat[byte_idx] = (char1_pattern << 4) | char2_pattern;
 8003d02:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	b25a      	sxtb	r2, r3
 8003d0a:	f997 3049 	ldrsb.w	r3, [r7, #73]	@ 0x49
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	b25a      	sxtb	r2, r3
 8003d12:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	3350      	adds	r3, #80	@ 0x50
 8003d1a:	443b      	add	r3, r7
 8003d1c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8003d20:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003d24:	3301      	adds	r3, #1
 8003d26:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8003d2a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	f67f af6a 	bls.w	8003c08 <MAX72_Print_String+0xfc>
            }

            MAX72_SendRow(row + 1, pat);
 8003d34:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003d38:	3301      	adds	r3, #1
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fcf8 	bl	8003738 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8003d48:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8003d52:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003d56:	2b07      	cmp	r3, #7
 8003d58:	f67f af50 	bls.w	8003bfc <MAX72_Print_String+0xf0>
            for (uint8_t i = 0; i < 4; i++)
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
            MAX72_SendRow(row + 1, pat);
        }
    }
}
 8003d5c:	e150      	b.n	8004000 <MAX72_Print_String+0x4f4>
    else if (settings == FLOAT) {
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	f040 80d1 	bne.w	8003f08 <MAX72_Print_String+0x3fc>
        char reversed[4] = {0};
 8003d66:	2300      	movs	r3, #0
 8003d68:	623b      	str	r3, [r7, #32]
        int8_t dot_pos = -1;
 8003d6a:	23ff      	movs	r3, #255	@ 0xff
 8003d6c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < len; i++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003d76:	e010      	b.n	8003d9a <MAX72_Print_String+0x28e>
            if (str[i] == '.') { dot_pos = i; break; }
 8003d78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4413      	add	r3, r2
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d84:	d104      	bne.n	8003d90 <MAX72_Print_String+0x284>
 8003d86:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003d8a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8003d8e:	e00a      	b.n	8003da6 <MAX72_Print_String+0x29a>
        for (uint8_t i = 0; i < len; i++)
 8003d90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003d94:	3301      	adds	r3, #1
 8003d96:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003d9a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003d9e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d3e8      	bcc.n	8003d78 <MAX72_Print_String+0x26c>
        char no_dot_str[5] = {0};
 8003da6:	f107 0318 	add.w	r3, r7, #24
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	711a      	strb	r2, [r3, #4]
        uint8_t no_dot_len = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 8003db6:	2300      	movs	r3, #0
 8003db8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003dbc:	e019      	b.n	8003df2 <MAX72_Print_String+0x2e6>
            if (str[i] != '.') no_dot_str[no_dot_len++] = str[i];
 8003dbe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dca:	d00d      	beq.n	8003de8 <MAX72_Print_String+0x2dc>
 8003dcc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	441a      	add	r2, r3
 8003dd4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003dd8:	1c59      	adds	r1, r3, #1
 8003dda:	f887 1046 	strb.w	r1, [r7, #70]	@ 0x46
 8003dde:	7812      	ldrb	r2, [r2, #0]
 8003de0:	3350      	adds	r3, #80	@ 0x50
 8003de2:	443b      	add	r3, r7
 8003de4:	f803 2c38 	strb.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 8003de8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003dec:	3301      	adds	r3, #1
 8003dee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003df2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003df6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d203      	bcs.n	8003e06 <MAX72_Print_String+0x2fa>
 8003dfe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d9db      	bls.n	8003dbe <MAX72_Print_String+0x2b2>
        dot_pos = no_dot_len - dot_pos - 1;
 8003e06:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003e0a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < 4; i++)
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8003e20:	e01c      	b.n	8003e5c <MAX72_Print_String+0x350>
            reversed[i] = (i < no_dot_len) ? no_dot_str[no_dot_len - 1 - i] : ' ';
 8003e22:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8003e26:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d20a      	bcs.n	8003e44 <MAX72_Print_String+0x338>
 8003e2e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003e32:	1e5a      	subs	r2, r3, #1
 8003e34:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	3350      	adds	r3, #80	@ 0x50
 8003e3c:	443b      	add	r3, r7
 8003e3e:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8003e42:	e000      	b.n	8003e46 <MAX72_Print_String+0x33a>
 8003e44:	2220      	movs	r2, #32
 8003e46:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003e4a:	3350      	adds	r3, #80	@ 0x50
 8003e4c:	443b      	add	r3, r7
 8003e4e:	f803 2c30 	strb.w	r2, [r3, #-48]
        for (uint8_t i = 0; i < 4; i++)
 8003e52:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003e56:	3301      	adds	r3, #1
 8003e58:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8003e5c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d9de      	bls.n	8003e22 <MAX72_Print_String+0x316>
        for (uint8_t row = 0; row < 8; row++) {
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003e6a:	e048      	b.n	8003efe <MAX72_Print_String+0x3f2>
            for (uint8_t i = 0; i < 4; i++)
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003e72:	e01e      	b.n	8003eb2 <MAX72_Print_String+0x3a6>
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 8003e74:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003e78:	3350      	adds	r3, #80	@ 0x50
 8003e7a:	443b      	add	r3, r7
 8003e7c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003e80:	f1a3 0220 	sub.w	r2, r3, #32
 8003e84:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 8003e88:	4841      	ldr	r0, [pc, #260]	@ (8003f90 <MAX72_Print_String+0x484>)
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4413      	add	r3, r2
 8003e90:	4403      	add	r3, r0
 8003e92:	440b      	add	r3, r1
 8003e94:	3301      	adds	r3, #1
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003e9c:	00d2      	lsls	r2, r2, #3
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	3350      	adds	r3, #80	@ 0x50
 8003ea2:	443b      	add	r3, r7
 8003ea4:	f803 2c3c 	strb.w	r2, [r3, #-60]
            for (uint8_t i = 0; i < 4; i++)
 8003ea8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003eac:	3301      	adds	r3, #1
 8003eae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003eb2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d9dc      	bls.n	8003e74 <MAX72_Print_String+0x368>
            if (row == 0) pat[dot_pos] |= 0b010;
 8003eba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10e      	bne.n	8003ee0 <MAX72_Print_String+0x3d4>
 8003ec2:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8003ec6:	3350      	adds	r3, #80	@ 0x50
 8003ec8:	443b      	add	r3, r7
 8003eca:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8003ece:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8003ed2:	f042 0202 	orr.w	r2, r2, #2
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	3350      	adds	r3, #80	@ 0x50
 8003eda:	443b      	add	r3, r7
 8003edc:	f803 2c3c 	strb.w	r2, [r3, #-60]
            MAX72_SendRow(row + 1, pat);
 8003ee0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f107 0214 	add.w	r2, r7, #20
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fc22 	bl	8003738 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8003ef4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003efe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003f02:	2b07      	cmp	r3, #7
 8003f04:	d9b2      	bls.n	8003e6c <MAX72_Print_String+0x360>
}
 8003f06:	e07b      	b.n	8004000 <MAX72_Print_String+0x4f4>
        char reversed[4] = {0};
 8003f08:	2300      	movs	r3, #0
 8003f0a:	613b      	str	r3, [r7, #16]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8003f12:	e014      	b.n	8003f3e <MAX72_Print_String+0x432>
            reversed[i] = str[len - 1 - i];
 8003f14:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003f18:	1e5a      	subs	r2, r3, #1
 8003f1a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	441a      	add	r2, r3
 8003f26:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003f2a:	7812      	ldrb	r2, [r2, #0]
 8003f2c:	3350      	adds	r3, #80	@ 0x50
 8003f2e:	443b      	add	r3, r7
 8003f30:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 8003f34:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003f38:	3301      	adds	r3, #1
 8003f3a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8003f3e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d805      	bhi.n	8003f52 <MAX72_Print_String+0x446>
 8003f46:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8003f4a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d3e0      	bcc.n	8003f14 <MAX72_Print_String+0x408>
        for (uint8_t i = len; i < 4; i++)
 8003f52:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003f56:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8003f5a:	e00b      	b.n	8003f74 <MAX72_Print_String+0x468>
            reversed[i] = ' ';
 8003f5c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003f60:	3350      	adds	r3, #80	@ 0x50
 8003f62:	443b      	add	r3, r7
 8003f64:	2220      	movs	r2, #32
 8003f66:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = len; i < 4; i++)
 8003f6a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003f6e:	3301      	adds	r3, #1
 8003f70:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8003f74:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d9ef      	bls.n	8003f5c <MAX72_Print_String+0x450>
        for (uint8_t row = 0; row < 8; row++) {
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003f82:	e039      	b.n	8003ff8 <MAX72_Print_String+0x4ec>
            for (uint8_t i = 0; i < 4; i++)
 8003f84:	2300      	movs	r3, #0
 8003f86:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8003f8a:	e022      	b.n	8003fd2 <MAX72_Print_String+0x4c6>
 8003f8c:	20000360 	.word	0x20000360
 8003f90:	20000008 	.word	0x20000008
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 8003f94:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003f98:	3350      	adds	r3, #80	@ 0x50
 8003f9a:	443b      	add	r3, r7
 8003f9c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8003fa0:	f1a3 0220 	sub.w	r2, r3, #32
 8003fa4:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8003fa8:	4817      	ldr	r0, [pc, #92]	@ (8004008 <MAX72_Print_String+0x4fc>)
 8003faa:	4613      	mov	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4413      	add	r3, r2
 8003fb0:	4403      	add	r3, r0
 8003fb2:	440b      	add	r3, r1
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	781a      	ldrb	r2, [r3, #0]
 8003fb8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003fbc:	00d2      	lsls	r2, r2, #3
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	3350      	adds	r3, #80	@ 0x50
 8003fc2:	443b      	add	r3, r7
 8003fc4:	f803 2c44 	strb.w	r2, [r3, #-68]
            for (uint8_t i = 0; i < 4; i++)
 8003fc8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003fcc:	3301      	adds	r3, #1
 8003fce:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8003fd2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d9dc      	bls.n	8003f94 <MAX72_Print_String+0x488>
            MAX72_SendRow(row + 1, pat);
 8003fda:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003fde:	3301      	adds	r3, #1
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f107 020c 	add.w	r2, r7, #12
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fba5 	bl	8003738 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8003fee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003ff8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ffc:	2b07      	cmp	r3, #7
 8003ffe:	d9c1      	bls.n	8003f84 <MAX72_Print_String+0x478>
}
 8004000:	bf00      	nop
 8004002:	3750      	adds	r7, #80	@ 0x50
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20000008 	.word	0x20000008

0800400c <MAX72_Print_Int>:


void MAX72_Print_Int(int num, uint8_t minidigits)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	70fb      	strb	r3, [r7, #3]
    char sign = num < 0 ? '-' : '\0';
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	da01      	bge.n	8004022 <MAX72_Print_Int+0x16>
 800401e:	232d      	movs	r3, #45	@ 0x2d
 8004020:	e000      	b.n	8004024 <MAX72_Print_Int+0x18>
 8004022:	2300      	movs	r3, #0
 8004024:	74fb      	strb	r3, [r7, #19]
    unsigned u = (num < 0) ? (unsigned) (-num) : (unsigned) num;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	bfb8      	it	lt
 800402c:	425b      	neglt	r3, r3
 800402e:	617b      	str	r3, [r7, #20]

    char str[9]; // 8 digits + null terminator
    if (minidigits) {
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00d      	beq.n	8004052 <MAX72_Print_Int+0x46>
        // segno + 7 cifre (tot 8): taglia alle ultime 7
        u %= sign=='-'?10000000u:100000000u;
 8004036:	7cfb      	ldrb	r3, [r7, #19]
 8004038:	2b2d      	cmp	r3, #45	@ 0x2d
 800403a:	d101      	bne.n	8004040 <MAX72_Print_Int+0x34>
 800403c:	4b1d      	ldr	r3, [pc, #116]	@ (80040b4 <MAX72_Print_Int+0xa8>)
 800403e:	e000      	b.n	8004042 <MAX72_Print_Int+0x36>
 8004040:	4b1d      	ldr	r3, [pc, #116]	@ (80040b8 <MAX72_Print_Int+0xac>)
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	fbb2 f1f3 	udiv	r1, r2, r3
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	e00e      	b.n	8004070 <MAX72_Print_Int+0x64>
    } else {
        // segno + 3 cifre (tot 4): taglia alle ultime 3
        u %= sign=='-'?1000u:10000u;
 8004052:	7cfb      	ldrb	r3, [r7, #19]
 8004054:	2b2d      	cmp	r3, #45	@ 0x2d
 8004056:	d102      	bne.n	800405e <MAX72_Print_Int+0x52>
 8004058:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800405c:	e001      	b.n	8004062 <MAX72_Print_Int+0x56>
 800405e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	fbb2 f1f3 	udiv	r1, r2, r3
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	617b      	str	r3, [r7, #20]
    }

    if (sign == '-'){
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	2b2d      	cmp	r3, #45	@ 0x2d
 8004074:	d107      	bne.n	8004086 <MAX72_Print_Int+0x7a>
    	snprintf(str, sizeof(str), "-%u", u);
 8004076:	f107 0008 	add.w	r0, r7, #8
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	4a0f      	ldr	r2, [pc, #60]	@ (80040bc <MAX72_Print_Int+0xb0>)
 800407e:	2109      	movs	r1, #9
 8004080:	f007 f8e4 	bl	800b24c <sniprintf>
 8004084:	e006      	b.n	8004094 <MAX72_Print_Int+0x88>
    } else {
    	snprintf(str, sizeof(str), "%u", u);
 8004086:	f107 0008 	add.w	r0, r7, #8
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	4a0c      	ldr	r2, [pc, #48]	@ (80040c0 <MAX72_Print_Int+0xb4>)
 800408e:	2109      	movs	r1, #9
 8004090:	f007 f8dc 	bl	800b24c <sniprintf>
    }


    MAX72_Print_String(str, minidigits ? MINIDIGITS : NO_SETTINGS);
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MAX72_Print_Int+0x92>
 800409a:	2202      	movs	r2, #2
 800409c:	e000      	b.n	80040a0 <MAX72_Print_Int+0x94>
 800409e:	2200      	movs	r2, #0
 80040a0:	f107 0308 	add.w	r3, r7, #8
 80040a4:	4611      	mov	r1, r2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fd30 	bl	8003b0c <MAX72_Print_String>
//    MAX72_Print_String(str);
}
 80040ac:	bf00      	nop
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	00989680 	.word	0x00989680
 80040b8:	05f5e100 	.word	0x05f5e100
 80040bc:	0800f900 	.word	0x0800f900
 80040c0:	0800f904 	.word	0x0800f904

080040c4 <MAX72_Print_Float>:

void MAX72_Print_Float(float num, uint8_t decimals, uint8_t minidigits) {
 80040c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040c8:	b095      	sub	sp, #84	@ 0x54
 80040ca:	af04      	add	r7, sp, #16
 80040cc:	ed87 0a01 	vstr	s0, [r7, #4]
 80040d0:	4603      	mov	r3, r0
 80040d2:	460a      	mov	r2, r1
 80040d4:	70fb      	strb	r3, [r7, #3]
 80040d6:	4613      	mov	r3, r2
 80040d8:	70bb      	strb	r3, [r7, #2]
 80040da:	466b      	mov	r3, sp
 80040dc:	461e      	mov	r6, r3
    uint8_t max_chars = 8;
 80040de:	2308      	movs	r3, #8
 80040e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char str[max_chars + 1]; // +1 for null terminator
 80040e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040e8:	1c59      	adds	r1, r3, #1
 80040ea:	1e4b      	subs	r3, r1, #1
 80040ec:	623b      	str	r3, [r7, #32]
 80040ee:	460a      	mov	r2, r1
 80040f0:	2300      	movs	r3, #0
 80040f2:	4690      	mov	r8, r2
 80040f4:	4699      	mov	r9, r3
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800410a:	460a      	mov	r2, r1
 800410c:	2300      	movs	r3, #0
 800410e:	4614      	mov	r4, r2
 8004110:	461d      	mov	r5, r3
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	00eb      	lsls	r3, r5, #3
 800411c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004120:	00e2      	lsls	r2, r4, #3
 8004122:	460b      	mov	r3, r1
 8004124:	3307      	adds	r3, #7
 8004126:	08db      	lsrs	r3, r3, #3
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	ebad 0d03 	sub.w	sp, sp, r3
 800412e:	ab04      	add	r3, sp, #16
 8004130:	3300      	adds	r3, #0
 8004132:	61fb      	str	r3, [r7, #28]

    // Gestione del segno
    char sign = (num < 0) ? '-' : '\0';
 8004134:	edd7 7a01 	vldr	s15, [r7, #4]
 8004138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800413c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004140:	d501      	bpl.n	8004146 <MAX72_Print_Float+0x82>
 8004142:	232d      	movs	r3, #45	@ 0x2d
 8004144:	e000      	b.n	8004148 <MAX72_Print_Float+0x84>
 8004146:	2300      	movs	r3, #0
 8004148:	76fb      	strb	r3, [r7, #27]
    float abs_num = (num < 0) ? -num : num;
 800414a:	edd7 7a01 	vldr	s15, [r7, #4]
 800414e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004156:	d504      	bpl.n	8004162 <MAX72_Print_Float+0x9e>
 8004158:	edd7 7a01 	vldr	s15, [r7, #4]
 800415c:	eef1 7a67 	vneg.f32	s15, s15
 8004160:	e001      	b.n	8004166 <MAX72_Print_Float+0xa2>
 8004162:	edd7 7a01 	vldr	s15, [r7, #4]
 8004166:	edc7 7a05 	vstr	s15, [r7, #20]

    // Separa parte intera e decimale
    unsigned int_part = (unsigned) abs_num;
 800416a:	edd7 7a05 	vldr	s15, [r7, #20]
 800416e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004172:	ee17 3a90 	vmov	r3, s15
 8004176:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float frac_part = abs_num - int_part;
 8004178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004182:	ed97 7a05 	vldr	s14, [r7, #20]
 8004186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800418a:	edc7 7a04 	vstr	s15, [r7, #16]


    // Calcola quanti caratteri servono per la parte intera
    uint8_t int_digits = (int_part == 0) ? 0 : 1;
 800418e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf14      	ite	ne
 8004194:	2301      	movne	r3, #1
 8004196:	2300      	moveq	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    unsigned temp = int_part;
 800419e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
    while (temp >= 10) {
 80041a2:	e00a      	b.n	80041ba <MAX72_Print_Float+0xf6>
        temp /= 10;
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	4a5d      	ldr	r2, [pc, #372]	@ (800431c <MAX72_Print_Float+0x258>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	08db      	lsrs	r3, r3, #3
 80041ae:	637b      	str	r3, [r7, #52]	@ 0x34
        int_digits++;
 80041b0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80041b4:	3301      	adds	r3, #1
 80041b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    while (temp >= 10) {
 80041ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041bc:	2b09      	cmp	r3, #9
 80041be:	d8f1      	bhi.n	80041a4 <MAX72_Print_Float+0xe0>
    }

    // Calcola spazio disponibile per decimali
    uint8_t available_for_decimals = max_chars - (sign != '\0' ? 1 : 0) - int_digits - 1; // -1 per il punto decimale
 80041c0:	7efb      	ldrb	r3, [r7, #27]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	bf14      	ite	ne
 80041c6:	2301      	movne	r3, #1
 80041c8:	2300      	moveq	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]

    // Limita i decimali al minimo tra quelli richiesti e quelli disponibili
    uint8_t actual_decimals = (decimals < available_for_decimals) ? decimals : available_for_decimals;
 80041e2:	7bfa      	ldrb	r2, [r7, #15]
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	4293      	cmp	r3, r2
 80041e8:	bf28      	it	cs
 80041ea:	4613      	movcs	r3, r2
 80041ec:	73bb      	strb	r3, [r7, #14]

    // Se non c'è spazio nemmeno per un decimale, mostra solo la parte intera
    if (available_for_decimals == 0) {
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d11b      	bne.n	800422c <MAX72_Print_Float+0x168>
        if (int_part == 0) {
 80041f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <MAX72_Print_Float+0x144>
            snprintf(str, sizeof(str), "0");
 80041fa:	460b      	mov	r3, r1
 80041fc:	4a48      	ldr	r2, [pc, #288]	@ (8004320 <MAX72_Print_Float+0x25c>)
 80041fe:	4619      	mov	r1, r3
 8004200:	69f8      	ldr	r0, [r7, #28]
 8004202:	f007 f823 	bl	800b24c <sniprintf>
 8004206:	e079      	b.n	80042fc <MAX72_Print_Float+0x238>
        } else {
            if (sign != '\0') {
 8004208:	7efb      	ldrb	r3, [r7, #27]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <MAX72_Print_Float+0x15c>
                snprintf(str, sizeof(str), "%c%u", sign, int_part);
 800420e:	7efa      	ldrb	r2, [r7, #27]
 8004210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	4a43      	ldr	r2, [pc, #268]	@ (8004324 <MAX72_Print_Float+0x260>)
 8004218:	69f8      	ldr	r0, [r7, #28]
 800421a:	f007 f817 	bl	800b24c <sniprintf>
 800421e:	e06d      	b.n	80042fc <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u", int_part);
 8004220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004222:	4a41      	ldr	r2, [pc, #260]	@ (8004328 <MAX72_Print_Float+0x264>)
 8004224:	69f8      	ldr	r0, [r7, #28]
 8004226:	f007 f811 	bl	800b24c <sniprintf>
 800422a:	e067      	b.n	80042fc <MAX72_Print_Float+0x238>
            }
        }
    } else {
        // Calcola il moltiplicatore per i decimali
        unsigned multiplier = 1;
 800422c:	2301      	movs	r3, #1
 800422e:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8004230:	2300      	movs	r3, #0
 8004232:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004236:	e00a      	b.n	800424e <MAX72_Print_Float+0x18a>
            multiplier *= 10;
 8004238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8004244:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004248:	3301      	adds	r3, #1
 800424a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800424e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004252:	7bbb      	ldrb	r3, [r7, #14]
 8004254:	429a      	cmp	r2, r3
 8004256:	d3ef      	bcc.n	8004238 <MAX72_Print_Float+0x174>
        }

        // Arrotonda la parte frazionaria
        unsigned frac_digits = (unsigned) (frac_part * multiplier + 0.5f);
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004262:	edd7 7a04 	vldr	s15, [r7, #16]
 8004266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800426a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800426e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004276:	ee17 3a90 	vmov	r3, s15
 800427a:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Gestisce il caso di overflow nell'arrotondamento
        if (frac_digits >= multiplier) {
 800427c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	429a      	cmp	r2, r3
 8004282:	d304      	bcc.n	800428e <MAX72_Print_Float+0x1ca>
            int_part++;
 8004284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004286:	3301      	adds	r3, #1
 8004288:	63fb      	str	r3, [r7, #60]	@ 0x3c
            frac_digits = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Costruisce la stringa
        if (int_part == 0) {
 800428e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d118      	bne.n	80042c6 <MAX72_Print_Float+0x202>
            // Omette la parte intera se è 0
            if (sign != '\0') {
 8004294:	7efb      	ldrb	r3, [r7, #27]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00c      	beq.n	80042b4 <MAX72_Print_Float+0x1f0>
                snprintf(str, sizeof(str), "%c.%0*u", sign, actual_decimals, frac_digits);
 800429a:	4608      	mov	r0, r1
 800429c:	7ef9      	ldrb	r1, [r7, #27]
 800429e:	7bbb      	ldrb	r3, [r7, #14]
 80042a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042a2:	9201      	str	r2, [sp, #4]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	460b      	mov	r3, r1
 80042a8:	4a20      	ldr	r2, [pc, #128]	@ (800432c <MAX72_Print_Float+0x268>)
 80042aa:	4601      	mov	r1, r0
 80042ac:	69f8      	ldr	r0, [r7, #28]
 80042ae:	f006 ffcd 	bl	800b24c <sniprintf>
 80042b2:	e023      	b.n	80042fc <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), ".%0*u", actual_decimals, frac_digits);
 80042b4:	7bba      	ldrb	r2, [r7, #14]
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	4613      	mov	r3, r2
 80042bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004330 <MAX72_Print_Float+0x26c>)
 80042be:	69f8      	ldr	r0, [r7, #28]
 80042c0:	f006 ffc4 	bl	800b24c <sniprintf>
 80042c4:	e01a      	b.n	80042fc <MAX72_Print_Float+0x238>
            }
        } else {
            // Include la parte intera
            if (sign != '\0') {
 80042c6:	7efb      	ldrb	r3, [r7, #27]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00e      	beq.n	80042ea <MAX72_Print_Float+0x226>
                snprintf(str, sizeof(str), "%c%u.%0*u", sign, int_part, actual_decimals, frac_digits);
 80042cc:	4608      	mov	r0, r1
 80042ce:	7ef9      	ldrb	r1, [r7, #27]
 80042d0:	7bbb      	ldrb	r3, [r7, #14]
 80042d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042d4:	9202      	str	r2, [sp, #8]
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	460b      	mov	r3, r1
 80042de:	4a15      	ldr	r2, [pc, #84]	@ (8004334 <MAX72_Print_Float+0x270>)
 80042e0:	4601      	mov	r1, r0
 80042e2:	69f8      	ldr	r0, [r7, #28]
 80042e4:	f006 ffb2 	bl	800b24c <sniprintf>
 80042e8:	e008      	b.n	80042fc <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u.%0*u", int_part, actual_decimals, frac_digits);
 80042ea:	7bbb      	ldrb	r3, [r7, #14]
 80042ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042ee:	9201      	str	r2, [sp, #4]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f4:	4a10      	ldr	r2, [pc, #64]	@ (8004338 <MAX72_Print_Float+0x274>)
 80042f6:	69f8      	ldr	r0, [r7, #28]
 80042f8:	f006 ffa8 	bl	800b24c <sniprintf>
            }
        }
    }

    MAX72_Print_String(str, minidigits ? MINIDIGITS : FLOAT);
 80042fc:	78bb      	ldrb	r3, [r7, #2]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <MAX72_Print_Float+0x242>
 8004302:	2302      	movs	r3, #2
 8004304:	e000      	b.n	8004308 <MAX72_Print_Float+0x244>
 8004306:	2301      	movs	r3, #1
 8004308:	4619      	mov	r1, r3
 800430a:	69f8      	ldr	r0, [r7, #28]
 800430c:	f7ff fbfe 	bl	8003b0c <MAX72_Print_String>
 8004310:	46b5      	mov	sp, r6
//    MAX72_Print_String(str);
}
 8004312:	bf00      	nop
 8004314:	3744      	adds	r7, #68	@ 0x44
 8004316:	46bd      	mov	sp, r7
 8004318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800431c:	cccccccd 	.word	0xcccccccd
 8004320:	0800f908 	.word	0x0800f908
 8004324:	0800f90c 	.word	0x0800f90c
 8004328:	0800f904 	.word	0x0800f904
 800432c:	0800f914 	.word	0x0800f914
 8004330:	0800f91c 	.word	0x0800f91c
 8004334:	0800f924 	.word	0x0800f924
 8004338:	0800f930 	.word	0x0800f930

0800433c <MAX72_SendFrame>:

// Buffer: 8 rows x DEV_NUM devices
static uint8_t frame[8][DEV_NUM];

// Send full frame to display (reversed order for correct cascade)
static void MAX72_SendFrame(void) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
    for (uint8_t row = 1; row <= 8; row++) {
 8004342:	2301      	movs	r3, #1
 8004344:	71fb      	strb	r3, [r7, #7]
 8004346:	e020      	b.n	800438a <MAX72_SendFrame+0x4e>
        uint8_t pattern[DEV_NUM];
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 8004348:	2300      	movs	r3, #0
 800434a:	71bb      	strb	r3, [r7, #6]
 800434c:	e011      	b.n	8004372 <MAX72_SendFrame+0x36>
            pattern[d] = frame[row-1][DEV_NUM - 1 - d];
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	1e59      	subs	r1, r3, #1
 8004352:	79bb      	ldrb	r3, [r7, #6]
 8004354:	f1c3 0203 	rsb	r2, r3, #3
 8004358:	79bb      	ldrb	r3, [r7, #6]
 800435a:	4810      	ldr	r0, [pc, #64]	@ (800439c <MAX72_SendFrame+0x60>)
 800435c:	0089      	lsls	r1, r1, #2
 800435e:	4401      	add	r1, r0
 8004360:	440a      	add	r2, r1
 8004362:	7812      	ldrb	r2, [r2, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	443b      	add	r3, r7
 8004368:	f803 2c08 	strb.w	r2, [r3, #-8]
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 800436c:	79bb      	ldrb	r3, [r7, #6]
 800436e:	3301      	adds	r3, #1
 8004370:	71bb      	strb	r3, [r7, #6]
 8004372:	79bb      	ldrb	r3, [r7, #6]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d9ea      	bls.n	800434e <MAX72_SendFrame+0x12>
        }
        MAX72_SendRow(row, pattern);
 8004378:	463a      	mov	r2, r7
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff f9da 	bl	8003738 <MAX72_SendRow>
    for (uint8_t row = 1; row <= 8; row++) {
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	3301      	adds	r3, #1
 8004388:	71fb      	strb	r3, [r7, #7]
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d9db      	bls.n	8004348 <MAX72_SendFrame+0xc>
    }
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000bc4 	.word	0x20000bc4

080043a0 <MAX72_Scroll_Start_IT>:
}

scroll_state_t scroll_state = {0};

// Inizializza lo scrolling con un nuovo testo
void MAX72_Scroll_Start_IT(const char *text) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
    // Pulisci il frame
    memset(frame, 0, sizeof(frame));
 80043a8:	2220      	movs	r2, #32
 80043aa:	2100      	movs	r1, #0
 80043ac:	482d      	ldr	r0, [pc, #180]	@ (8004464 <MAX72_Scroll_Start_IT+0xc4>)
 80043ae:	f007 ff5f 	bl	800c270 <memset>
    MAX72_SendFrame();
 80043b2:	f7ff ffc3 	bl	800433c <MAX72_SendFrame>

    // Inizializza lo stato - CAMBIATO: inizia dal primo carattere per scorrimento inverso
    scroll_state.text = text;
 80043b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6013      	str	r3, [r2, #0]
    scroll_state.current_char_idx = 0; // Inizia dal primo carattere
 80043bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 80043be:	2200      	movs	r2, #0
 80043c0:	605a      	str	r2, [r3, #4]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80043c2:	4b29      	ldr	r3, [pc, #164]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a28      	ldr	r2, [pc, #160]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 80043c8:	6852      	ldr	r2, [r2, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b1f      	cmp	r3, #31
 80043d0:	d90e      	bls.n	80043f0 <MAX72_Scroll_Start_IT+0x50>
            scroll_state.text[scroll_state.current_char_idx] > '~') ?
 80043d2:	4b25      	ldr	r3, [pc, #148]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a24      	ldr	r2, [pc, #144]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 80043d8:	6852      	ldr	r2, [r2, #4]
 80043da:	4413      	add	r3, r2
 80043dc:	781b      	ldrb	r3, [r3, #0]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80043de:	2b7e      	cmp	r3, #126	@ 0x7e
 80043e0:	d806      	bhi.n	80043f0 <MAX72_Scroll_Start_IT+0x50>
            ' ' : scroll_state.text[scroll_state.current_char_idx];
 80043e2:	4b21      	ldr	r3, [pc, #132]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a20      	ldr	r2, [pc, #128]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 80043e8:	6852      	ldr	r2, [r2, #4]
 80043ea:	4413      	add	r3, r2
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	e000      	b.n	80043f2 <MAX72_Scroll_Start_IT+0x52>
 80043f0:	2320      	movs	r3, #32
 80043f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 80043f4:	7213      	strb	r3, [r2, #8]
    scroll_state.current_col = 0;
 80043f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	725a      	strb	r2, [r3, #9]
    scroll_state.spacing_counter = 0;
 80043fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 80043fe:	2200      	movs	r2, #0
 8004400:	729a      	strb	r2, [r3, #10]
    scroll_state.padding_counter = 0;
 8004402:	4b19      	ldr	r3, [pc, #100]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 8004404:	2200      	movs	r2, #0
 8004406:	72da      	strb	r2, [r3, #11]
    scroll_state.state = 0; // Inizia con il primo carattere
 8004408:	4b17      	ldr	r3, [pc, #92]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 800440a:	2200      	movs	r2, #0
 800440c:	731a      	strb	r2, [r3, #12]
    scroll_state.enabled = 1;
 800440e:	4b16      	ldr	r3, [pc, #88]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 8004410:	2201      	movs	r2, #1
 8004412:	735a      	strb	r2, [r3, #13]
    scroll_state.updated = 0; // Indica che lo scrolling è stato aggiornato
 8004414:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <MAX72_Scroll_Start_IT+0xc8>)
 8004416:	2200      	movs	r2, #0
 8004418:	739a      	strb	r2, [r3, #14]

    uint8_t len = strlen(text);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fb ff58 	bl	80002d0 <strlen>
 8004420:	4603      	mov	r3, r0
 8004422:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = len * GLYPH_WIDTH + (len - 1) * CHAR_SPACING;
 8004424:	7bbb      	ldrb	r3, [r7, #14]
 8004426:	461a      	mov	r2, r3
 8004428:	0052      	lsls	r2, r2, #1
 800442a:	4413      	add	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	737b      	strb	r3, [r7, #13]
    uint8_t max_chars = ((DEV_NUM * 8 < temp) ? DEV_NUM*8 : temp) - 8; // Padding iniziale di 8 colonne
 8004434:	7b7b      	ldrb	r3, [r7, #13]
 8004436:	2b20      	cmp	r3, #32
 8004438:	bf28      	it	cs
 800443a:	2320      	movcs	r3, #32
 800443c:	b2db      	uxtb	r3, r3
 800443e:	3b08      	subs	r3, #8
 8004440:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < max_chars; i++) {
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
 8004446:	e004      	b.n	8004452 <MAX72_Scroll_Start_IT+0xb2>
		MAX72_Scroll_Process(); // Processa il primo carattere per inizializzare il frame
 8004448:	f000 f81c 	bl	8004484 <MAX72_Scroll_Process>
    for (uint8_t i = 0; i < max_chars; i++) {
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	3301      	adds	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
 8004452:	7bfa      	ldrb	r2, [r7, #15]
 8004454:	7b3b      	ldrb	r3, [r7, #12]
 8004456:	429a      	cmp	r2, r3
 8004458:	d3f6      	bcc.n	8004448 <MAX72_Scroll_Start_IT+0xa8>
	}
}
 800445a:	bf00      	nop
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000bc4 	.word	0x20000bc4
 8004468:	20000be4 	.word	0x20000be4

0800446c <MAX72_Scroll_Stop>:

// Ferma lo scrolling
void MAX72_Scroll_Stop(void) {
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
    scroll_state.enabled = 0;
 8004470:	4b03      	ldr	r3, [pc, #12]	@ (8004480 <MAX72_Scroll_Stop+0x14>)
 8004472:	2200      	movs	r2, #0
 8004474:	735a      	strb	r2, [r3, #13]
}
 8004476:	bf00      	nop
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	20000be4 	.word	0x20000be4

08004484 <MAX72_Scroll_Process>:
void MAX72_Scroll_Resume(void) {
    scroll_state.enabled = 1;
}

// Funzione da chiamare nel main loop - NON bloccante
void MAX72_Scroll_Process(void) {
 8004484:	b590      	push	{r4, r7, lr}
 8004486:	b08b      	sub	sp, #44	@ 0x2c
 8004488:	af00      	add	r7, sp, #0
    if (!scroll_state.enabled || !scroll_state.text) return;
 800448a:	4b8a      	ldr	r3, [pc, #552]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 800448c:	7b5b      	ldrb	r3, [r3, #13]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8183 	beq.w	800479a <MAX72_Scroll_Process+0x316>
 8004494:	4b87      	ldr	r3, [pc, #540]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 817e 	beq.w	800479a <MAX72_Scroll_Process+0x316>

    if (scroll_state.updated) {
 800449e:	4b85      	ldr	r3, [pc, #532]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 80044a0:	7b9b      	ldrb	r3, [r3, #14]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <MAX72_Scroll_Process+0x28>
		// Se il testo è stato aggiornato, ricalcola il frame

    	// TODO RICALCOLO DEL FRAME AGGIORNATO, fino al carattere corrente

		scroll_state.updated = 0; // Reset flag
 80044a6:	4b83      	ldr	r3, [pc, #524]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	739a      	strb	r2, [r3, #14]
	}

    switch (scroll_state.state) {
 80044ac:	4b81      	ldr	r3, [pc, #516]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 80044ae:	7b1b      	ldrb	r3, [r3, #12]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	f000 80f6 	beq.w	80046a2 <MAX72_Scroll_Process+0x21e>
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	f300 816c 	bgt.w	8004794 <MAX72_Scroll_Process+0x310>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <MAX72_Scroll_Process+0x42>
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d072      	beq.n	80045aa <MAX72_Scroll_Process+0x126>
 80044c4:	e166      	b.n	8004794 <MAX72_Scroll_Process+0x310>
        case 0: // Processamento carattere
        {
            uint8_t ch = scroll_state.current_char;
 80044c6:	4b7b      	ldr	r3, [pc, #492]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 80044c8:	7a1b      	ldrb	r3, [r3, #8]
 80044ca:	737b      	strb	r3, [r7, #13]
            uint8_t *glyph = LETTERS[ch - ' '].value;
 80044cc:	7b7b      	ldrb	r3, [r7, #13]
 80044ce:	f1a3 0220 	sub.w	r2, r3, #32
 80044d2:	4613      	mov	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4413      	add	r3, r2
 80044d8:	4a77      	ldr	r2, [pc, #476]	@ (80046b8 <MAX72_Scroll_Process+0x234>)
 80044da:	4413      	add	r3, r2
 80044dc:	3301      	adds	r3, #1
 80044de:	60bb      	str	r3, [r7, #8]

            // CAMBIATO: Shift verso destra (da destra verso sinistra)
            for (uint8_t row = 0; row < 8; row++) {
 80044e0:	2300      	movs	r3, #0
 80044e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80044e6:	e047      	b.n	8004578 <MAX72_Scroll_Process+0xf4>
                uint8_t new_bit = (glyph[row] >> scroll_state.current_col) & 0x01;
 80044e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	4413      	add	r3, r2
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	4b6f      	ldr	r3, [pc, #444]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 80044f6:	7a5b      	ldrb	r3, [r3, #9]
 80044f8:	fa42 f303 	asr.w	r3, r2, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	71fb      	strb	r3, [r7, #7]
                uint8_t carry = new_bit;
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // CAMBIATO: Shift right invece di left, da device più a destra
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 800450a:	2303      	movs	r3, #3
 800450c:	623b      	str	r3, [r7, #32]
 800450e:	e02b      	b.n	8004568 <MAX72_Scroll_Process+0xe4>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8004510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004514:	4a69      	ldr	r2, [pc, #420]	@ (80046bc <MAX72_Scroll_Process+0x238>)
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	4413      	add	r3, r2
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	71bb      	strb	r3, [r7, #6]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8004526:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800452a:	4a64      	ldr	r2, [pc, #400]	@ (80046bc <MAX72_Scroll_Process+0x238>)
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	441a      	add	r2, r3
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	4413      	add	r3, r2
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	b2db      	uxtb	r3, r3
 800453a:	b25a      	sxtb	r2, r3
 800453c:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8004540:	01db      	lsls	r3, r3, #7
 8004542:	b25b      	sxtb	r3, r3
 8004544:	4313      	orrs	r3, r2
 8004546:	b25a      	sxtb	r2, r3
 8004548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800454c:	b2d1      	uxtb	r1, r2
 800454e:	4a5b      	ldr	r2, [pc, #364]	@ (80046bc <MAX72_Scroll_Process+0x238>)
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	441a      	add	r2, r3
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	4413      	add	r3, r2
 8004558:	460a      	mov	r2, r1
 800455a:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 800455c:	79bb      	ldrb	r3, [r7, #6]
 800455e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	3b01      	subs	r3, #1
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	2b00      	cmp	r3, #0
 800456c:	dad0      	bge.n	8004510 <MAX72_Scroll_Process+0x8c>
            for (uint8_t row = 0; row < 8; row++) {
 800456e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004572:	3301      	adds	r3, #1
 8004574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800457c:	2b07      	cmp	r3, #7
 800457e:	d9b3      	bls.n	80044e8 <MAX72_Scroll_Process+0x64>
                }
            }

            scroll_state.current_col++;
 8004580:	4b4c      	ldr	r3, [pc, #304]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 8004582:	7a5b      	ldrb	r3, [r3, #9]
 8004584:	3301      	adds	r3, #1
 8004586:	b2da      	uxtb	r2, r3
 8004588:	4b4a      	ldr	r3, [pc, #296]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 800458a:	725a      	strb	r2, [r3, #9]

            // Finito il carattere corrente?
            if (scroll_state.current_col >= GLYPH_WIDTH) {
 800458c:	4b49      	ldr	r3, [pc, #292]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 800458e:	7a5b      	ldrb	r3, [r3, #9]
 8004590:	2b04      	cmp	r3, #4
 8004592:	f240 80fa 	bls.w	800478a <MAX72_Scroll_Process+0x306>
                scroll_state.current_col = 0;
 8004596:	4b47      	ldr	r3, [pc, #284]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 8004598:	2200      	movs	r2, #0
 800459a:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 800459c:	4b45      	ldr	r3, [pc, #276]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 800459e:	2200      	movs	r2, #0
 80045a0:	729a      	strb	r2, [r3, #10]
                scroll_state.state = 1; // Passa agli spazi tra caratteri
 80045a2:	4b44      	ldr	r3, [pc, #272]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	731a      	strb	r2, [r3, #12]
            }
            break;
 80045a8:	e0ef      	b.n	800478a <MAX72_Scroll_Process+0x306>
        }

        case 1: // Spacing tra caratteri
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 80045aa:	2300      	movs	r3, #0
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e032      	b.n	8004616 <MAX72_Scroll_Process+0x192>
                uint8_t carry = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 80045b4:	2303      	movs	r3, #3
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	e027      	b.n	800460a <MAX72_Scroll_Process+0x186>
                    uint8_t next_carry = frame[row][d] & 0x01;
 80045ba:	7ffb      	ldrb	r3, [r7, #31]
 80045bc:	4a3f      	ldr	r2, [pc, #252]	@ (80046bc <MAX72_Scroll_Process+0x238>)
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	441a      	add	r2, r3
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	4413      	add	r3, r2
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	73bb      	strb	r3, [r7, #14]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 80045ce:	7ffb      	ldrb	r3, [r7, #31]
 80045d0:	4a3a      	ldr	r2, [pc, #232]	@ (80046bc <MAX72_Scroll_Process+0x238>)
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	441a      	add	r2, r3
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	4413      	add	r3, r2
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	b25a      	sxtb	r2, r3
 80045e2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80045e6:	01db      	lsls	r3, r3, #7
 80045e8:	b25b      	sxtb	r3, r3
 80045ea:	4313      	orrs	r3, r2
 80045ec:	b25a      	sxtb	r2, r3
 80045ee:	7ffb      	ldrb	r3, [r7, #31]
 80045f0:	b2d1      	uxtb	r1, r2
 80045f2:	4a32      	ldr	r2, [pc, #200]	@ (80046bc <MAX72_Scroll_Process+0x238>)
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	441a      	add	r2, r3
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	4413      	add	r3, r2
 80045fc:	460a      	mov	r2, r1
 80045fe:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8004600:	7bbb      	ldrb	r3, [r7, #14]
 8004602:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	3b01      	subs	r3, #1
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	dad4      	bge.n	80045ba <MAX72_Scroll_Process+0x136>
            for (uint8_t row = 0; row < 8; row++) {
 8004610:	7ffb      	ldrb	r3, [r7, #31]
 8004612:	3301      	adds	r3, #1
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	7ffb      	ldrb	r3, [r7, #31]
 8004618:	2b07      	cmp	r3, #7
 800461a:	d9c9      	bls.n	80045b0 <MAX72_Scroll_Process+0x12c>
                }
            }

            scroll_state.spacing_counter++;
 800461c:	4b25      	ldr	r3, [pc, #148]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 800461e:	7a9b      	ldrb	r3, [r3, #10]
 8004620:	3301      	adds	r3, #1
 8004622:	b2da      	uxtb	r2, r3
 8004624:	4b23      	ldr	r3, [pc, #140]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 8004626:	729a      	strb	r2, [r3, #10]

            // Finito lo spacing?
            if (scroll_state.spacing_counter >= CHAR_SPACING) {
 8004628:	4b22      	ldr	r3, [pc, #136]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 800462a:	7a9b      	ldrb	r3, [r3, #10]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80ae 	beq.w	800478e <MAX72_Scroll_Process+0x30a>
                scroll_state.spacing_counter = 0;
 8004632:	4b20      	ldr	r3, [pc, #128]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 8004634:	2200      	movs	r2, #0
 8004636:	729a      	strb	r2, [r3, #10]

                // CAMBIATO: Passa al carattere successivo (incrementa invece di decrementare)
                scroll_state.current_char_idx++;
 8004638:	4b1e      	ldr	r3, [pc, #120]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	3301      	adds	r3, #1
 800463e:	4a1d      	ldr	r2, [pc, #116]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 8004640:	6053      	str	r3, [r2, #4]
                if (scroll_state.current_char_idx >= strlen(scroll_state.text)) {
 8004642:	4b1c      	ldr	r3, [pc, #112]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	461c      	mov	r4, r3
 8004648:	4b1a      	ldr	r3, [pc, #104]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7fb fe3f 	bl	80002d0 <strlen>
 8004652:	4603      	mov	r3, r0
 8004654:	429c      	cmp	r4, r3
 8004656:	d306      	bcc.n	8004666 <MAX72_Scroll_Process+0x1e2>
                    // Finiti tutti i caratteri, passa al padding finale
                    scroll_state.state = 2;
 8004658:	4b16      	ldr	r3, [pc, #88]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 800465a:	2202      	movs	r2, #2
 800465c:	731a      	strb	r2, [r3, #12]
                    scroll_state.padding_counter = 0;
 800465e:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 8004660:	2200      	movs	r2, #0
 8004662:	72da      	strb	r2, [r3, #11]
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
                    scroll_state.state = 0;
                }
            }
            break;
 8004664:	e093      	b.n	800478e <MAX72_Scroll_Process+0x30a>
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004666:	4b13      	ldr	r3, [pc, #76]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a12      	ldr	r2, [pc, #72]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 800466c:	6852      	ldr	r2, [r2, #4]
 800466e:	4413      	add	r3, r2
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b1f      	cmp	r3, #31
 8004674:	d90e      	bls.n	8004694 <MAX72_Scroll_Process+0x210>
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8004676:	4b0f      	ldr	r3, [pc, #60]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a0e      	ldr	r2, [pc, #56]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 800467c:	6852      	ldr	r2, [r2, #4]
 800467e:	4413      	add	r3, r2
 8004680:	781b      	ldrb	r3, [r3, #0]
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004682:	2b7e      	cmp	r3, #126	@ 0x7e
 8004684:	d806      	bhi.n	8004694 <MAX72_Scroll_Process+0x210>
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
 8004686:	4b0b      	ldr	r3, [pc, #44]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a0a      	ldr	r2, [pc, #40]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 800468c:	6852      	ldr	r2, [r2, #4]
 800468e:	4413      	add	r3, r2
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	e000      	b.n	8004696 <MAX72_Scroll_Process+0x212>
 8004694:	2320      	movs	r3, #32
 8004696:	4a07      	ldr	r2, [pc, #28]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 8004698:	7213      	strb	r3, [r2, #8]
                    scroll_state.state = 0;
 800469a:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <MAX72_Scroll_Process+0x230>)
 800469c:	2200      	movs	r2, #0
 800469e:	731a      	strb	r2, [r3, #12]
            break;
 80046a0:	e075      	b.n	800478e <MAX72_Scroll_Process+0x30a>
        }

        case 2: // Padding finale
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]
 80046a6:	e039      	b.n	800471c <MAX72_Scroll_Process+0x298>
                uint8_t carry = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 80046ac:	2303      	movs	r3, #3
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	e02e      	b.n	8004710 <MAX72_Scroll_Process+0x28c>
 80046b2:	bf00      	nop
 80046b4:	20000be4 	.word	0x20000be4
 80046b8:	20000008 	.word	0x20000008
 80046bc:	20000bc4 	.word	0x20000bc4
                    uint8_t next_carry = frame[row][d] & 0x01;
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
 80046c2:	4a38      	ldr	r2, [pc, #224]	@ (80047a4 <MAX72_Scroll_Process+0x320>)
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	441a      	add	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
 80046d6:	4a33      	ldr	r2, [pc, #204]	@ (80047a4 <MAX72_Scroll_Process+0x320>)
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	441a      	add	r2, r3
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4413      	add	r3, r2
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	b25a      	sxtb	r2, r3
 80046e8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80046ec:	01db      	lsls	r3, r3, #7
 80046ee:	b25b      	sxtb	r3, r3
 80046f0:	4313      	orrs	r3, r2
 80046f2:	b25a      	sxtb	r2, r3
 80046f4:	7dfb      	ldrb	r3, [r7, #23]
 80046f6:	b2d1      	uxtb	r1, r2
 80046f8:	4a2a      	ldr	r2, [pc, #168]	@ (80047a4 <MAX72_Scroll_Process+0x320>)
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	441a      	add	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4413      	add	r3, r2
 8004702:	460a      	mov	r2, r1
 8004704:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	3b01      	subs	r3, #1
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	dad4      	bge.n	80046c0 <MAX72_Scroll_Process+0x23c>
            for (uint8_t row = 0; row < 8; row++) {
 8004716:	7dfb      	ldrb	r3, [r7, #23]
 8004718:	3301      	adds	r3, #1
 800471a:	75fb      	strb	r3, [r7, #23]
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	2b07      	cmp	r3, #7
 8004720:	d9c2      	bls.n	80046a8 <MAX72_Scroll_Process+0x224>
                }
            }

            scroll_state.padding_counter++;
 8004722:	4b21      	ldr	r3, [pc, #132]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 8004724:	7adb      	ldrb	r3, [r3, #11]
 8004726:	3301      	adds	r3, #1
 8004728:	b2da      	uxtb	r2, r3
 800472a:	4b1f      	ldr	r3, [pc, #124]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 800472c:	72da      	strb	r2, [r3, #11]

            // Finito il padding? (GLYPH_WIDTH + CHAR_SPACING)
            if (scroll_state.padding_counter >= (GLYPH_WIDTH + CHAR_SPACING)) {
 800472e:	4b1e      	ldr	r3, [pc, #120]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 8004730:	7adb      	ldrb	r3, [r3, #11]
 8004732:	2b05      	cmp	r3, #5
 8004734:	d92d      	bls.n	8004792 <MAX72_Scroll_Process+0x30e>
                // CAMBIATO: Ricomincia dal primo carattere (indice 0)
                scroll_state.current_char_idx = 0;
 8004736:	4b1c      	ldr	r3, [pc, #112]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 8004738:	2200      	movs	r2, #0
 800473a:	605a      	str	r2, [r3, #4]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 800473c:	4b1a      	ldr	r3, [pc, #104]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a19      	ldr	r2, [pc, #100]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 8004742:	6852      	ldr	r2, [r2, #4]
 8004744:	4413      	add	r3, r2
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b1f      	cmp	r3, #31
 800474a:	d90e      	bls.n	800476a <MAX72_Scroll_Process+0x2e6>
						scroll_state.text[scroll_state.current_char_idx] > '~') ?
 800474c:	4b16      	ldr	r3, [pc, #88]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a15      	ldr	r2, [pc, #84]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 8004752:	6852      	ldr	r2, [r2, #4]
 8004754:	4413      	add	r3, r2
 8004756:	781b      	ldrb	r3, [r3, #0]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004758:	2b7e      	cmp	r3, #126	@ 0x7e
 800475a:	d806      	bhi.n	800476a <MAX72_Scroll_Process+0x2e6>
						' ' : scroll_state.text[scroll_state.current_char_idx];
 800475c:	4b12      	ldr	r3, [pc, #72]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a11      	ldr	r2, [pc, #68]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 8004762:	6852      	ldr	r2, [r2, #4]
 8004764:	4413      	add	r3, r2
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	e000      	b.n	800476c <MAX72_Scroll_Process+0x2e8>
 800476a:	2320      	movs	r3, #32
 800476c:	4a0e      	ldr	r2, [pc, #56]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 800476e:	7213      	strb	r3, [r2, #8]
                scroll_state.current_col = 0;
 8004770:	4b0d      	ldr	r3, [pc, #52]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 8004772:	2200      	movs	r2, #0
 8004774:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 8004776:	4b0c      	ldr	r3, [pc, #48]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 8004778:	2200      	movs	r2, #0
 800477a:	729a      	strb	r2, [r3, #10]
                scroll_state.padding_counter = 0;
 800477c:	4b0a      	ldr	r3, [pc, #40]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 800477e:	2200      	movs	r2, #0
 8004780:	72da      	strb	r2, [r3, #11]
                scroll_state.state = 0;
 8004782:	4b09      	ldr	r3, [pc, #36]	@ (80047a8 <MAX72_Scroll_Process+0x324>)
 8004784:	2200      	movs	r2, #0
 8004786:	731a      	strb	r2, [r3, #12]
            }
            break;
 8004788:	e003      	b.n	8004792 <MAX72_Scroll_Process+0x30e>
            break;
 800478a:	bf00      	nop
 800478c:	e002      	b.n	8004794 <MAX72_Scroll_Process+0x310>
            break;
 800478e:	bf00      	nop
 8004790:	e000      	b.n	8004794 <MAX72_Scroll_Process+0x310>
            break;
 8004792:	bf00      	nop
        }
    }

    // Aggiorna il display
    MAX72_SendFrame();
 8004794:	f7ff fdd2 	bl	800433c <MAX72_SendFrame>
 8004798:	e000      	b.n	800479c <MAX72_Scroll_Process+0x318>
    if (!scroll_state.enabled || !scroll_state.text) return;
 800479a:	bf00      	nop
}
 800479c:	372c      	adds	r7, #44	@ 0x2c
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd90      	pop	{r4, r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000bc4 	.word	0x20000bc4
 80047a8:	20000be4 	.word	0x20000be4

080047ac <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80047ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80047e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80047b0:	f7fd fa9c 	bl	8001cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047b4:	480c      	ldr	r0, [pc, #48]	@ (80047e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80047b6:	490d      	ldr	r1, [pc, #52]	@ (80047ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80047b8:	4a0d      	ldr	r2, [pc, #52]	@ (80047f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80047ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047bc:	e002      	b.n	80047c4 <LoopCopyDataInit>

080047be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047c2:	3304      	adds	r3, #4

080047c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047c8:	d3f9      	bcc.n	80047be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047ca:	4a0a      	ldr	r2, [pc, #40]	@ (80047f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80047cc:	4c0a      	ldr	r4, [pc, #40]	@ (80047f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80047ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047d0:	e001      	b.n	80047d6 <LoopFillZerobss>

080047d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047d4:	3204      	adds	r2, #4

080047d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047d8:	d3fb      	bcc.n	80047d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80047da:	f007 fdb3 	bl	800c344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047de:	f7fc fed3 	bl	8001588 <main>
  bx  lr    
 80047e2:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80047e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047ec:	20000590 	.word	0x20000590
  ldr r2, =_sidata
 80047f0:	0800fdf8 	.word	0x0800fdf8
  ldr r2, =_sbss
 80047f4:	20000590 	.word	0x20000590
  ldr r4, =_ebss
 80047f8:	20000d44 	.word	0x20000d44

080047fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047fc:	e7fe      	b.n	80047fc <ADC_IRQHandler>
	...

08004800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004804:	4b0e      	ldr	r3, [pc, #56]	@ (8004840 <HAL_Init+0x40>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a0d      	ldr	r2, [pc, #52]	@ (8004840 <HAL_Init+0x40>)
 800480a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800480e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004810:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <HAL_Init+0x40>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a0a      	ldr	r2, [pc, #40]	@ (8004840 <HAL_Init+0x40>)
 8004816:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800481a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800481c:	4b08      	ldr	r3, [pc, #32]	@ (8004840 <HAL_Init+0x40>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a07      	ldr	r2, [pc, #28]	@ (8004840 <HAL_Init+0x40>)
 8004822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004828:	2003      	movs	r0, #3
 800482a:	f000 fd5f 	bl	80052ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800482e:	2000      	movs	r0, #0
 8004830:	f000 f808 	bl	8004844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004834:	f7fd f902 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40023c00 	.word	0x40023c00

08004844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800484c:	4b12      	ldr	r3, [pc, #72]	@ (8004898 <HAL_InitTick+0x54>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b12      	ldr	r3, [pc, #72]	@ (800489c <HAL_InitTick+0x58>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	4619      	mov	r1, r3
 8004856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800485a:	fbb3 f3f1 	udiv	r3, r3, r1
 800485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fd77 	bl	8005356 <HAL_SYSTICK_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e00e      	b.n	8004890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b0f      	cmp	r3, #15
 8004876:	d80a      	bhi.n	800488e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004878:	2200      	movs	r2, #0
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004880:	f000 fd3f 	bl	8005302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004884:	4a06      	ldr	r2, [pc, #24]	@ (80048a0 <HAL_InitTick+0x5c>)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	e000      	b.n	8004890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000004 	.word	0x20000004
 800489c:	200003c4 	.word	0x200003c4
 80048a0:	200003c0 	.word	0x200003c0

080048a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048a8:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <HAL_IncTick+0x20>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	4b06      	ldr	r3, [pc, #24]	@ (80048c8 <HAL_IncTick+0x24>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4413      	add	r3, r2
 80048b4:	4a04      	ldr	r2, [pc, #16]	@ (80048c8 <HAL_IncTick+0x24>)
 80048b6:	6013      	str	r3, [r2, #0]
}
 80048b8:	bf00      	nop
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	200003c4 	.word	0x200003c4
 80048c8:	20000bf4 	.word	0x20000bf4

080048cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return uwTick;
 80048d0:	4b03      	ldr	r3, [pc, #12]	@ (80048e0 <HAL_GetTick+0x14>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20000bf4 	.word	0x20000bf4

080048e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048ec:	f7ff ffee 	bl	80048cc <HAL_GetTick>
 80048f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048fc:	d005      	beq.n	800490a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <HAL_Delay+0x44>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800490a:	bf00      	nop
 800490c:	f7ff ffde 	bl	80048cc <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	429a      	cmp	r2, r3
 800491a:	d8f7      	bhi.n	800490c <HAL_Delay+0x28>
  {
  }
}
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	200003c4 	.word	0x200003c4

0800492c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e033      	b.n	80049aa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fc fbea 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b00      	cmp	r3, #0
 8004968:	d118      	bne.n	800499c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004972:	f023 0302 	bic.w	r3, r3, #2
 8004976:	f043 0202 	orr.w	r2, r3, #2
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fae8 	bl	8004f54 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498e:	f023 0303 	bic.w	r3, r3, #3
 8004992:	f043 0201 	orr.w	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	641a      	str	r2, [r3, #64]	@ 0x40
 800499a:	e001      	b.n	80049a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_Start+0x1a>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e0b2      	b.n	8004b34 <HAL_ADC_Start+0x180>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d018      	beq.n	8004a16 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80049f4:	4b52      	ldr	r3, [pc, #328]	@ (8004b40 <HAL_ADC_Start+0x18c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a52      	ldr	r2, [pc, #328]	@ (8004b44 <HAL_ADC_Start+0x190>)
 80049fa:	fba2 2303 	umull	r2, r3, r2, r3
 80049fe:	0c9a      	lsrs	r2, r3, #18
 8004a00:	4613      	mov	r3, r2
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	4413      	add	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004a08:	e002      	b.n	8004a10 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f9      	bne.n	8004a0a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d17a      	bne.n	8004b1a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004a4e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a62:	d106      	bne.n	8004a72 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a68:	f023 0206 	bic.w	r2, r3, #6
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a70:	e002      	b.n	8004a78 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a80:	4b31      	ldr	r3, [pc, #196]	@ (8004b48 <HAL_ADC_Start+0x194>)
 8004a82:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004a8c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d12a      	bne.n	8004af0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b4c <HAL_ADC_Start+0x198>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d015      	beq.n	8004ad0 <HAL_ADC_Start+0x11c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a29      	ldr	r2, [pc, #164]	@ (8004b50 <HAL_ADC_Start+0x19c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d105      	bne.n	8004aba <HAL_ADC_Start+0x106>
 8004aae:	4b26      	ldr	r3, [pc, #152]	@ (8004b48 <HAL_ADC_Start+0x194>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a25      	ldr	r2, [pc, #148]	@ (8004b54 <HAL_ADC_Start+0x1a0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d136      	bne.n	8004b32 <HAL_ADC_Start+0x17e>
 8004ac4:	4b20      	ldr	r3, [pc, #128]	@ (8004b48 <HAL_ADC_Start+0x194>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d130      	bne.n	8004b32 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d129      	bne.n	8004b32 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004aec:	609a      	str	r2, [r3, #8]
 8004aee:	e020      	b.n	8004b32 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a15      	ldr	r2, [pc, #84]	@ (8004b4c <HAL_ADC_Start+0x198>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d11b      	bne.n	8004b32 <HAL_ADC_Start+0x17e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d114      	bne.n	8004b32 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b16:	609a      	str	r2, [r3, #8]
 8004b18:	e00b      	b.n	8004b32 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	f043 0210 	orr.w	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	20000004 	.word	0x20000004
 8004b44:	431bde83 	.word	0x431bde83
 8004b48:	40012300 	.word	0x40012300
 8004b4c:	40012000 	.word	0x40012000
 8004b50:	40012100 	.word	0x40012100
 8004b54:	40012200 	.word	0x40012200

08004b58 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_ADC_Stop+0x16>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e021      	b.n	8004bb2 <HAL_ADC_Stop+0x5a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b98:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	f043 0201 	orr.w	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bda:	d113      	bne.n	8004c04 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bea:	d10b      	bne.n	8004c04 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	f043 0220 	orr.w	r2, r3, #32
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e063      	b.n	8004ccc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c04:	f7ff fe62 	bl	80048cc <HAL_GetTick>
 8004c08:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c0a:	e021      	b.n	8004c50 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c12:	d01d      	beq.n	8004c50 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <HAL_ADC_PollForConversion+0x6c>
 8004c1a:	f7ff fe57 	bl	80048cc <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d212      	bcs.n	8004c50 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d00b      	beq.n	8004c50 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	f043 0204 	orr.w	r2, r3, #4
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e03d      	b.n	8004ccc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d1d6      	bne.n	8004c0c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f06f 0212 	mvn.w	r2, #18
 8004c66:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d123      	bne.n	8004cca <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d11f      	bne.n	8004cca <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d006      	beq.n	8004ca6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d111      	bne.n	8004cca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d105      	bne.n	8004cca <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	f043 0201 	orr.w	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x1c>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e113      	b.n	8004f34 <HAL_ADC_ConfigChannel+0x244>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b09      	cmp	r3, #9
 8004d1a:	d925      	bls.n	8004d68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68d9      	ldr	r1, [r3, #12]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	4413      	add	r3, r2
 8004d30:	3b1e      	subs	r3, #30
 8004d32:	2207      	movs	r2, #7
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43da      	mvns	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	400a      	ands	r2, r1
 8004d40:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68d9      	ldr	r1, [r3, #12]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	4618      	mov	r0, r3
 8004d54:	4603      	mov	r3, r0
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	4403      	add	r3, r0
 8004d5a:	3b1e      	subs	r3, #30
 8004d5c:	409a      	lsls	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	60da      	str	r2, [r3, #12]
 8004d66:	e022      	b.n	8004dae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6919      	ldr	r1, [r3, #16]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	4613      	mov	r3, r2
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4413      	add	r3, r2
 8004d7c:	2207      	movs	r2, #7
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43da      	mvns	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	400a      	ands	r2, r1
 8004d8a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6919      	ldr	r1, [r3, #16]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	4603      	mov	r3, r0
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	4403      	add	r3, r0
 8004da4:	409a      	lsls	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b06      	cmp	r3, #6
 8004db4:	d824      	bhi.n	8004e00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3b05      	subs	r3, #5
 8004dc8:	221f      	movs	r2, #31
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43da      	mvns	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	4618      	mov	r0, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	3b05      	subs	r3, #5
 8004df2:	fa00 f203 	lsl.w	r2, r0, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8004dfe:	e04c      	b.n	8004e9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b0c      	cmp	r3, #12
 8004e06:	d824      	bhi.n	8004e52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	3b23      	subs	r3, #35	@ 0x23
 8004e1a:	221f      	movs	r2, #31
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43da      	mvns	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	400a      	ands	r2, r1
 8004e28:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	4618      	mov	r0, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	3b23      	subs	r3, #35	@ 0x23
 8004e44:	fa00 f203 	lsl.w	r2, r0, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e50:	e023      	b.n	8004e9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	3b41      	subs	r3, #65	@ 0x41
 8004e64:	221f      	movs	r2, #31
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43da      	mvns	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	400a      	ands	r2, r1
 8004e72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	4618      	mov	r0, r3
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	3b41      	subs	r3, #65	@ 0x41
 8004e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e9a:	4b29      	ldr	r3, [pc, #164]	@ (8004f40 <HAL_ADC_ConfigChannel+0x250>)
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a28      	ldr	r2, [pc, #160]	@ (8004f44 <HAL_ADC_ConfigChannel+0x254>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d10f      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x1d8>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b12      	cmp	r3, #18
 8004eae:	d10b      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f44 <HAL_ADC_ConfigChannel+0x254>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d12b      	bne.n	8004f2a <HAL_ADC_ConfigChannel+0x23a>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f48 <HAL_ADC_ConfigChannel+0x258>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <HAL_ADC_ConfigChannel+0x1f4>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b11      	cmp	r3, #17
 8004ee2:	d122      	bne.n	8004f2a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a11      	ldr	r2, [pc, #68]	@ (8004f48 <HAL_ADC_ConfigChannel+0x258>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d111      	bne.n	8004f2a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f06:	4b11      	ldr	r3, [pc, #68]	@ (8004f4c <HAL_ADC_ConfigChannel+0x25c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a11      	ldr	r2, [pc, #68]	@ (8004f50 <HAL_ADC_ConfigChannel+0x260>)
 8004f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f10:	0c9a      	lsrs	r2, r3, #18
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f1c:	e002      	b.n	8004f24 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f9      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	40012300 	.word	0x40012300
 8004f44:	40012000 	.word	0x40012000
 8004f48:	10000012 	.word	0x10000012
 8004f4c:	20000004 	.word	0x20000004
 8004f50:	431bde83 	.word	0x431bde83

08004f54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f5c:	4b79      	ldr	r3, [pc, #484]	@ (8005144 <ADC_Init+0x1f0>)
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6859      	ldr	r1, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	021a      	lsls	r2, r3, #8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004fac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6859      	ldr	r1, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6899      	ldr	r1, [r3, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	4a58      	ldr	r2, [pc, #352]	@ (8005148 <ADC_Init+0x1f4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d022      	beq.n	8005032 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ffa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6899      	ldr	r1, [r3, #8]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800501c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6899      	ldr	r1, [r3, #8]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	609a      	str	r2, [r3, #8]
 8005030:	e00f      	b.n	8005052 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005040:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005050:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0202 	bic.w	r2, r2, #2
 8005060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6899      	ldr	r1, [r3, #8]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	7e1b      	ldrb	r3, [r3, #24]
 800506c:	005a      	lsls	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01b      	beq.n	80050b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800508e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800509e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050aa:	3b01      	subs	r3, #1
 80050ac:	035a      	lsls	r2, r3, #13
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	e007      	b.n	80050c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80050d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	051a      	lsls	r2, r3, #20
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80050fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6899      	ldr	r1, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800510a:	025a      	lsls	r2, r3, #9
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005122:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6899      	ldr	r1, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	029a      	lsls	r2, r3, #10
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	609a      	str	r2, [r3, #8]
}
 8005138:	bf00      	nop
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	40012300 	.word	0x40012300
 8005148:	0f000001 	.word	0x0f000001

0800514c <__NVIC_SetPriorityGrouping>:
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800515c:	4b0c      	ldr	r3, [pc, #48]	@ (8005190 <__NVIC_SetPriorityGrouping+0x44>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005168:	4013      	ands	r3, r2
 800516a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800517c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800517e:	4a04      	ldr	r2, [pc, #16]	@ (8005190 <__NVIC_SetPriorityGrouping+0x44>)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	60d3      	str	r3, [r2, #12]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	e000ed00 	.word	0xe000ed00

08005194 <__NVIC_GetPriorityGrouping>:
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005198:	4b04      	ldr	r3, [pc, #16]	@ (80051ac <__NVIC_GetPriorityGrouping+0x18>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	0a1b      	lsrs	r3, r3, #8
 800519e:	f003 0307 	and.w	r3, r3, #7
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	e000ed00 	.word	0xe000ed00

080051b0 <__NVIC_EnableIRQ>:
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	db0b      	blt.n	80051da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	f003 021f 	and.w	r2, r3, #31
 80051c8:	4907      	ldr	r1, [pc, #28]	@ (80051e8 <__NVIC_EnableIRQ+0x38>)
 80051ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2001      	movs	r0, #1
 80051d2:	fa00 f202 	lsl.w	r2, r0, r2
 80051d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	e000e100 	.word	0xe000e100

080051ec <__NVIC_SetPriority>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	6039      	str	r1, [r7, #0]
 80051f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	db0a      	blt.n	8005216 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	490c      	ldr	r1, [pc, #48]	@ (8005238 <__NVIC_SetPriority+0x4c>)
 8005206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520a:	0112      	lsls	r2, r2, #4
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	440b      	add	r3, r1
 8005210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005214:	e00a      	b.n	800522c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	4908      	ldr	r1, [pc, #32]	@ (800523c <__NVIC_SetPriority+0x50>)
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	3b04      	subs	r3, #4
 8005224:	0112      	lsls	r2, r2, #4
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	440b      	add	r3, r1
 800522a:	761a      	strb	r2, [r3, #24]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	e000e100 	.word	0xe000e100
 800523c:	e000ed00 	.word	0xe000ed00

08005240 <NVIC_EncodePriority>:
{
 8005240:	b480      	push	{r7}
 8005242:	b089      	sub	sp, #36	@ 0x24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f1c3 0307 	rsb	r3, r3, #7
 800525a:	2b04      	cmp	r3, #4
 800525c:	bf28      	it	cs
 800525e:	2304      	movcs	r3, #4
 8005260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	3304      	adds	r3, #4
 8005266:	2b06      	cmp	r3, #6
 8005268:	d902      	bls.n	8005270 <NVIC_EncodePriority+0x30>
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	3b03      	subs	r3, #3
 800526e:	e000      	b.n	8005272 <NVIC_EncodePriority+0x32>
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005274:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43da      	mvns	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	401a      	ands	r2, r3
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005288:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	fa01 f303 	lsl.w	r3, r1, r3
 8005292:	43d9      	mvns	r1, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005298:	4313      	orrs	r3, r2
}
 800529a:	4618      	mov	r0, r3
 800529c:	3724      	adds	r7, #36	@ 0x24
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <SysTick_Config>:
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052b8:	d301      	bcc.n	80052be <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80052ba:	2301      	movs	r3, #1
 80052bc:	e00f      	b.n	80052de <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052be:	4a0a      	ldr	r2, [pc, #40]	@ (80052e8 <SysTick_Config+0x40>)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052c6:	210f      	movs	r1, #15
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052cc:	f7ff ff8e 	bl	80051ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052d0:	4b05      	ldr	r3, [pc, #20]	@ (80052e8 <SysTick_Config+0x40>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052d6:	4b04      	ldr	r3, [pc, #16]	@ (80052e8 <SysTick_Config+0x40>)
 80052d8:	2207      	movs	r2, #7
 80052da:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	e000e010 	.word	0xe000e010

080052ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff ff29 	bl	800514c <__NVIC_SetPriorityGrouping>
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005302:	b580      	push	{r7, lr}
 8005304:	b086      	sub	sp, #24
 8005306:	af00      	add	r7, sp, #0
 8005308:	4603      	mov	r3, r0
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005314:	f7ff ff3e 	bl	8005194 <__NVIC_GetPriorityGrouping>
 8005318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	6978      	ldr	r0, [r7, #20]
 8005320:	f7ff ff8e 	bl	8005240 <NVIC_EncodePriority>
 8005324:	4602      	mov	r2, r0
 8005326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800532a:	4611      	mov	r1, r2
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff ff5d 	bl	80051ec <__NVIC_SetPriority>
}
 8005332:	bf00      	nop
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	4603      	mov	r3, r0
 8005342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff ff31 	bl	80051b0 <__NVIC_EnableIRQ>
}
 800534e:	bf00      	nop
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff ffa2 	bl	80052a8 <SysTick_Config>
 8005364:	4603      	mov	r3, r0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800537c:	f7ff faa6 	bl	80048cc <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e099      	b.n	80054c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0201 	bic.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053ac:	e00f      	b.n	80053ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053ae:	f7ff fa8d 	bl	80048cc <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b05      	cmp	r3, #5
 80053ba:	d908      	bls.n	80053ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2203      	movs	r2, #3
 80053c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e078      	b.n	80054c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e8      	bne.n	80053ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4b38      	ldr	r3, [pc, #224]	@ (80054c8 <HAL_DMA_Init+0x158>)
 80053e8:	4013      	ands	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	2b04      	cmp	r3, #4
 8005426:	d107      	bne.n	8005438 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005430:	4313      	orrs	r3, r2
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f023 0307 	bic.w	r3, r3, #7
 800544e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545e:	2b04      	cmp	r3, #4
 8005460:	d117      	bne.n	8005492 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00e      	beq.n	8005492 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fb0d 	bl	8005a94 <DMA_CheckFifoParam>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2240      	movs	r2, #64	@ 0x40
 8005484:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800548e:	2301      	movs	r3, #1
 8005490:	e016      	b.n	80054c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fac4 	bl	8005a28 <DMA_CalcBaseAndBitshift>
 80054a0:	4603      	mov	r3, r0
 80054a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a8:	223f      	movs	r2, #63	@ 0x3f
 80054aa:	409a      	lsls	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	f010803f 	.word	0xf010803f

080054cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_DMA_Start_IT+0x26>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e040      	b.n	8005574 <HAL_DMA_Start_IT+0xa8>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b01      	cmp	r3, #1
 8005504:	d12f      	bne.n	8005566 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2202      	movs	r2, #2
 800550a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 fa56 	bl	80059cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005524:	223f      	movs	r2, #63	@ 0x3f
 8005526:	409a      	lsls	r2, r3
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0216 	orr.w	r2, r2, #22
 800553a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005540:	2b00      	cmp	r3, #0
 8005542:	d007      	beq.n	8005554 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0208 	orr.w	r2, r2, #8
 8005552:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e005      	b.n	8005572 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800556e:	2302      	movs	r3, #2
 8005570:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005572:	7dfb      	ldrb	r3, [r7, #23]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005588:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800558a:	f7ff f99f 	bl	80048cc <HAL_GetTick>
 800558e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d008      	beq.n	80055ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2280      	movs	r2, #128	@ 0x80
 80055a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e052      	b.n	8005654 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0216 	bic.w	r2, r2, #22
 80055bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <HAL_DMA_Abort+0x62>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d007      	beq.n	80055ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0208 	bic.w	r2, r2, #8
 80055ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055fe:	e013      	b.n	8005628 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005600:	f7ff f964 	bl	80048cc <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b05      	cmp	r3, #5
 800560c:	d90c      	bls.n	8005628 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2220      	movs	r2, #32
 8005612:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2203      	movs	r2, #3
 8005618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e015      	b.n	8005654 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e4      	bne.n	8005600 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800563a:	223f      	movs	r2, #63	@ 0x3f
 800563c:	409a      	lsls	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d004      	beq.n	800567a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2280      	movs	r2, #128	@ 0x80
 8005674:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e00c      	b.n	8005694 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2205      	movs	r2, #5
 800567e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056ac:	4b8e      	ldr	r3, [pc, #568]	@ (80058e8 <HAL_DMA_IRQHandler+0x248>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a8e      	ldr	r2, [pc, #568]	@ (80058ec <HAL_DMA_IRQHandler+0x24c>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	0a9b      	lsrs	r3, r3, #10
 80056b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ca:	2208      	movs	r2, #8
 80056cc:	409a      	lsls	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4013      	ands	r3, r2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d01a      	beq.n	800570c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d013      	beq.n	800570c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0204 	bic.w	r2, r2, #4
 80056f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f8:	2208      	movs	r2, #8
 80056fa:	409a      	lsls	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005704:	f043 0201 	orr.w	r2, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005710:	2201      	movs	r2, #1
 8005712:	409a      	lsls	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4013      	ands	r3, r2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d012      	beq.n	8005742 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572e:	2201      	movs	r2, #1
 8005730:	409a      	lsls	r2, r3
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573a:	f043 0202 	orr.w	r2, r3, #2
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005746:	2204      	movs	r2, #4
 8005748:	409a      	lsls	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4013      	ands	r3, r2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d012      	beq.n	8005778 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00b      	beq.n	8005778 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005764:	2204      	movs	r2, #4
 8005766:	409a      	lsls	r2, r3
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005770:	f043 0204 	orr.w	r2, r3, #4
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800577c:	2210      	movs	r2, #16
 800577e:	409a      	lsls	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d043      	beq.n	8005810 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d03c      	beq.n	8005810 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579a:	2210      	movs	r2, #16
 800579c:	409a      	lsls	r2, r3
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d018      	beq.n	80057e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d108      	bne.n	80057d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d024      	beq.n	8005810 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
 80057ce:	e01f      	b.n	8005810 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01b      	beq.n	8005810 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4798      	blx	r3
 80057e0:	e016      	b.n	8005810 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d107      	bne.n	8005800 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0208 	bic.w	r2, r2, #8
 80057fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005814:	2220      	movs	r2, #32
 8005816:	409a      	lsls	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 808f 	beq.w	8005940 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8087 	beq.w	8005940 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005836:	2220      	movs	r2, #32
 8005838:	409a      	lsls	r2, r3
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b05      	cmp	r3, #5
 8005848:	d136      	bne.n	80058b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0216 	bic.w	r2, r2, #22
 8005858:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695a      	ldr	r2, [r3, #20]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005868:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <HAL_DMA_IRQHandler+0x1da>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005876:	2b00      	cmp	r3, #0
 8005878:	d007      	beq.n	800588a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0208 	bic.w	r2, r2, #8
 8005888:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800588e:	223f      	movs	r2, #63	@ 0x3f
 8005890:	409a      	lsls	r2, r3
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d07e      	beq.n	80059ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	4798      	blx	r3
        }
        return;
 80058b6:	e079      	b.n	80059ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d01d      	beq.n	8005902 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10d      	bne.n	80058f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d031      	beq.n	8005940 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	4798      	blx	r3
 80058e4:	e02c      	b.n	8005940 <HAL_DMA_IRQHandler+0x2a0>
 80058e6:	bf00      	nop
 80058e8:	20000004 	.word	0x20000004
 80058ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d023      	beq.n	8005940 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
 8005900:	e01e      	b.n	8005940 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10f      	bne.n	8005930 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0210 	bic.w	r2, r2, #16
 800591e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005944:	2b00      	cmp	r3, #0
 8005946:	d032      	beq.n	80059ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d022      	beq.n	800599a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2205      	movs	r2, #5
 8005958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0201 	bic.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	3301      	adds	r3, #1
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	429a      	cmp	r2, r3
 8005976:	d307      	bcc.n	8005988 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f2      	bne.n	800596c <HAL_DMA_IRQHandler+0x2cc>
 8005986:	e000      	b.n	800598a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005988:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	4798      	blx	r3
 80059aa:	e000      	b.n	80059ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80059ac:	bf00      	nop
    }
  }
}
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80059e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b40      	cmp	r3, #64	@ 0x40
 80059f8:	d108      	bne.n	8005a0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a0a:	e007      	b.n	8005a1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	60da      	str	r2, [r3, #12]
}
 8005a1c:	bf00      	nop
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	3b10      	subs	r3, #16
 8005a38:	4a14      	ldr	r2, [pc, #80]	@ (8005a8c <DMA_CalcBaseAndBitshift+0x64>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	091b      	lsrs	r3, r3, #4
 8005a40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a42:	4a13      	ldr	r2, [pc, #76]	@ (8005a90 <DMA_CalcBaseAndBitshift+0x68>)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d909      	bls.n	8005a6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a5e:	f023 0303 	bic.w	r3, r3, #3
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a68:	e007      	b.n	8005a7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	aaaaaaab 	.word	0xaaaaaaab
 8005a90:	0800f968 	.word	0x0800f968

08005a94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11f      	bne.n	8005aee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d856      	bhi.n	8005b62 <DMA_CheckFifoParam+0xce>
 8005ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8005abc <DMA_CheckFifoParam+0x28>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005acd 	.word	0x08005acd
 8005ac0:	08005adf 	.word	0x08005adf
 8005ac4:	08005acd 	.word	0x08005acd
 8005ac8:	08005b63 	.word	0x08005b63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d046      	beq.n	8005b66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005adc:	e043      	b.n	8005b66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ae6:	d140      	bne.n	8005b6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aec:	e03d      	b.n	8005b6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af6:	d121      	bne.n	8005b3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d837      	bhi.n	8005b6e <DMA_CheckFifoParam+0xda>
 8005afe:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <DMA_CheckFifoParam+0x70>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b15 	.word	0x08005b15
 8005b08:	08005b1b 	.word	0x08005b1b
 8005b0c:	08005b15 	.word	0x08005b15
 8005b10:	08005b2d 	.word	0x08005b2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
      break;
 8005b18:	e030      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d025      	beq.n	8005b72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b2a:	e022      	b.n	8005b72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b34:	d11f      	bne.n	8005b76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b3a:	e01c      	b.n	8005b76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d903      	bls.n	8005b4a <DMA_CheckFifoParam+0xb6>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d003      	beq.n	8005b50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b48:	e018      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4e:	e015      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00e      	beq.n	8005b7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b60:	e00b      	b.n	8005b7a <DMA_CheckFifoParam+0xe6>
      break;
 8005b62:	bf00      	nop
 8005b64:	e00a      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      break;
 8005b66:	bf00      	nop
 8005b68:	e008      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      break;
 8005b6a:	bf00      	nop
 8005b6c:	e006      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      break;
 8005b6e:	bf00      	nop
 8005b70:	e004      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      break;
 8005b72:	bf00      	nop
 8005b74:	e002      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      break;   
 8005b76:	bf00      	nop
 8005b78:	e000      	b.n	8005b7c <DMA_CheckFifoParam+0xe8>
      break;
 8005b7a:	bf00      	nop
    }
  } 
  
  return status; 
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop

08005b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b089      	sub	sp, #36	@ 0x24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	e165      	b.n	8005e74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ba8:	2201      	movs	r2, #1
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	f040 8154 	bne.w	8005e6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d005      	beq.n	8005bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d130      	bne.n	8005c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	2203      	movs	r2, #3
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c14:	2201      	movs	r2, #1
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	4013      	ands	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	091b      	lsrs	r3, r3, #4
 8005c2a:	f003 0201 	and.w	r2, r3, #1
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	fa02 f303 	lsl.w	r3, r2, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d017      	beq.n	8005c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	2203      	movs	r2, #3
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4013      	ands	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d123      	bne.n	8005cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	08da      	lsrs	r2, r3, #3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3208      	adds	r2, #8
 8005c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	220f      	movs	r2, #15
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	08da      	lsrs	r2, r3, #3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3208      	adds	r2, #8
 8005cca:	69b9      	ldr	r1, [r7, #24]
 8005ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	2203      	movs	r2, #3
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f003 0203 	and.w	r2, r3, #3
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80ae 	beq.w	8005e6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	4b5d      	ldr	r3, [pc, #372]	@ (8005e8c <HAL_GPIO_Init+0x300>)
 8005d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1a:	4a5c      	ldr	r2, [pc, #368]	@ (8005e8c <HAL_GPIO_Init+0x300>)
 8005d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d22:	4b5a      	ldr	r3, [pc, #360]	@ (8005e8c <HAL_GPIO_Init+0x300>)
 8005d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d2e:	4a58      	ldr	r2, [pc, #352]	@ (8005e90 <HAL_GPIO_Init+0x304>)
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	089b      	lsrs	r3, r3, #2
 8005d34:	3302      	adds	r3, #2
 8005d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	220f      	movs	r2, #15
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	43db      	mvns	r3, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a4f      	ldr	r2, [pc, #316]	@ (8005e94 <HAL_GPIO_Init+0x308>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d025      	beq.n	8005da6 <HAL_GPIO_Init+0x21a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a4e      	ldr	r2, [pc, #312]	@ (8005e98 <HAL_GPIO_Init+0x30c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d01f      	beq.n	8005da2 <HAL_GPIO_Init+0x216>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a4d      	ldr	r2, [pc, #308]	@ (8005e9c <HAL_GPIO_Init+0x310>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d019      	beq.n	8005d9e <HAL_GPIO_Init+0x212>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8005ea0 <HAL_GPIO_Init+0x314>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d013      	beq.n	8005d9a <HAL_GPIO_Init+0x20e>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a4b      	ldr	r2, [pc, #300]	@ (8005ea4 <HAL_GPIO_Init+0x318>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00d      	beq.n	8005d96 <HAL_GPIO_Init+0x20a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a4a      	ldr	r2, [pc, #296]	@ (8005ea8 <HAL_GPIO_Init+0x31c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d007      	beq.n	8005d92 <HAL_GPIO_Init+0x206>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a49      	ldr	r2, [pc, #292]	@ (8005eac <HAL_GPIO_Init+0x320>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <HAL_GPIO_Init+0x202>
 8005d8a:	2306      	movs	r3, #6
 8005d8c:	e00c      	b.n	8005da8 <HAL_GPIO_Init+0x21c>
 8005d8e:	2307      	movs	r3, #7
 8005d90:	e00a      	b.n	8005da8 <HAL_GPIO_Init+0x21c>
 8005d92:	2305      	movs	r3, #5
 8005d94:	e008      	b.n	8005da8 <HAL_GPIO_Init+0x21c>
 8005d96:	2304      	movs	r3, #4
 8005d98:	e006      	b.n	8005da8 <HAL_GPIO_Init+0x21c>
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e004      	b.n	8005da8 <HAL_GPIO_Init+0x21c>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e002      	b.n	8005da8 <HAL_GPIO_Init+0x21c>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <HAL_GPIO_Init+0x21c>
 8005da6:	2300      	movs	r3, #0
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	f002 0203 	and.w	r2, r2, #3
 8005dae:	0092      	lsls	r2, r2, #2
 8005db0:	4093      	lsls	r3, r2
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005db8:	4935      	ldr	r1, [pc, #212]	@ (8005e90 <HAL_GPIO_Init+0x304>)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	089b      	lsrs	r3, r3, #2
 8005dbe:	3302      	adds	r3, #2
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dc6:	4b3a      	ldr	r3, [pc, #232]	@ (8005eb0 <HAL_GPIO_Init+0x324>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dea:	4a31      	ldr	r2, [pc, #196]	@ (8005eb0 <HAL_GPIO_Init+0x324>)
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005df0:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb0 <HAL_GPIO_Init+0x324>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e14:	4a26      	ldr	r2, [pc, #152]	@ (8005eb0 <HAL_GPIO_Init+0x324>)
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e1a:	4b25      	ldr	r3, [pc, #148]	@ (8005eb0 <HAL_GPIO_Init+0x324>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	43db      	mvns	r3, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4013      	ands	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb0 <HAL_GPIO_Init+0x324>)
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e44:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb0 <HAL_GPIO_Init+0x324>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e68:	4a11      	ldr	r2, [pc, #68]	@ (8005eb0 <HAL_GPIO_Init+0x324>)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	3301      	adds	r3, #1
 8005e72:	61fb      	str	r3, [r7, #28]
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	2b0f      	cmp	r3, #15
 8005e78:	f67f ae96 	bls.w	8005ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e7c:	bf00      	nop
 8005e7e:	bf00      	nop
 8005e80:	3724      	adds	r7, #36	@ 0x24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	40013800 	.word	0x40013800
 8005e94:	40020000 	.word	0x40020000
 8005e98:	40020400 	.word	0x40020400
 8005e9c:	40020800 	.word	0x40020800
 8005ea0:	40020c00 	.word	0x40020c00
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	40021400 	.word	0x40021400
 8005eac:	40021800 	.word	0x40021800
 8005eb0:	40013c00 	.word	0x40013c00

08005eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	887b      	ldrh	r3, [r7, #2]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	73fb      	strb	r3, [r7, #15]
 8005ed0:	e001      	b.n	8005ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	807b      	strh	r3, [r7, #2]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ef4:	787b      	ldrb	r3, [r7, #1]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005efa:	887a      	ldrh	r2, [r7, #2]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f00:	e003      	b.n	8005f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f02:	887b      	ldrh	r3, [r7, #2]
 8005f04:	041a      	lsls	r2, r3, #16
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	619a      	str	r2, [r3, #24]
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f28:	887a      	ldrh	r2, [r7, #2]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	041a      	lsls	r2, r3, #16
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	43d9      	mvns	r1, r3
 8005f34:	887b      	ldrh	r3, [r7, #2]
 8005f36:	400b      	ands	r3, r1
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	619a      	str	r2, [r3, #24]
}
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005f56:	4b08      	ldr	r3, [pc, #32]	@ (8005f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f58:	695a      	ldr	r2, [r3, #20]
 8005f5a:	88fb      	ldrh	r3, [r7, #6]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d006      	beq.n	8005f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f62:	4a05      	ldr	r2, [pc, #20]	@ (8005f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f64:	88fb      	ldrh	r3, [r7, #6]
 8005f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fb fc58 	bl	8001820 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f70:	bf00      	nop
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	40013c00 	.word	0x40013c00

08005f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e12b      	b.n	80061e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fb fa4e 	bl	8001444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2224      	movs	r2, #36	@ 0x24
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fe0:	f001 fbb6 	bl	8007750 <HAL_RCC_GetPCLK1Freq>
 8005fe4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4a81      	ldr	r2, [pc, #516]	@ (80061f0 <HAL_I2C_Init+0x274>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d807      	bhi.n	8006000 <HAL_I2C_Init+0x84>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a80      	ldr	r2, [pc, #512]	@ (80061f4 <HAL_I2C_Init+0x278>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	bf94      	ite	ls
 8005ff8:	2301      	movls	r3, #1
 8005ffa:	2300      	movhi	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	e006      	b.n	800600e <HAL_I2C_Init+0x92>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4a7d      	ldr	r2, [pc, #500]	@ (80061f8 <HAL_I2C_Init+0x27c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	bf94      	ite	ls
 8006008:	2301      	movls	r3, #1
 800600a:	2300      	movhi	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e0e7      	b.n	80061e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4a78      	ldr	r2, [pc, #480]	@ (80061fc <HAL_I2C_Init+0x280>)
 800601a:	fba2 2303 	umull	r2, r3, r2, r3
 800601e:	0c9b      	lsrs	r3, r3, #18
 8006020:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	4a6a      	ldr	r2, [pc, #424]	@ (80061f0 <HAL_I2C_Init+0x274>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d802      	bhi.n	8006050 <HAL_I2C_Init+0xd4>
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	3301      	adds	r3, #1
 800604e:	e009      	b.n	8006064 <HAL_I2C_Init+0xe8>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006056:	fb02 f303 	mul.w	r3, r2, r3
 800605a:	4a69      	ldr	r2, [pc, #420]	@ (8006200 <HAL_I2C_Init+0x284>)
 800605c:	fba2 2303 	umull	r2, r3, r2, r3
 8006060:	099b      	lsrs	r3, r3, #6
 8006062:	3301      	adds	r3, #1
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	430b      	orrs	r3, r1
 800606a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006076:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	495c      	ldr	r1, [pc, #368]	@ (80061f0 <HAL_I2C_Init+0x274>)
 8006080:	428b      	cmp	r3, r1
 8006082:	d819      	bhi.n	80060b8 <HAL_I2C_Init+0x13c>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	1e59      	subs	r1, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006092:	1c59      	adds	r1, r3, #1
 8006094:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006098:	400b      	ands	r3, r1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_I2C_Init+0x138>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1e59      	subs	r1, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80060ac:	3301      	adds	r3, #1
 80060ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b2:	e051      	b.n	8006158 <HAL_I2C_Init+0x1dc>
 80060b4:	2304      	movs	r3, #4
 80060b6:	e04f      	b.n	8006158 <HAL_I2C_Init+0x1dc>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d111      	bne.n	80060e4 <HAL_I2C_Init+0x168>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	1e58      	subs	r0, r3, #1
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6859      	ldr	r1, [r3, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	440b      	add	r3, r1
 80060ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80060d2:	3301      	adds	r3, #1
 80060d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d8:	2b00      	cmp	r3, #0
 80060da:	bf0c      	ite	eq
 80060dc:	2301      	moveq	r3, #1
 80060de:	2300      	movne	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	e012      	b.n	800610a <HAL_I2C_Init+0x18e>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	1e58      	subs	r0, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6859      	ldr	r1, [r3, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	0099      	lsls	r1, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060fa:	3301      	adds	r3, #1
 80060fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006100:	2b00      	cmp	r3, #0
 8006102:	bf0c      	ite	eq
 8006104:	2301      	moveq	r3, #1
 8006106:	2300      	movne	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_I2C_Init+0x196>
 800610e:	2301      	movs	r3, #1
 8006110:	e022      	b.n	8006158 <HAL_I2C_Init+0x1dc>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10e      	bne.n	8006138 <HAL_I2C_Init+0x1bc>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	1e58      	subs	r0, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6859      	ldr	r1, [r3, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	440b      	add	r3, r1
 8006128:	fbb0 f3f3 	udiv	r3, r0, r3
 800612c:	3301      	adds	r3, #1
 800612e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006136:	e00f      	b.n	8006158 <HAL_I2C_Init+0x1dc>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	1e58      	subs	r0, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6859      	ldr	r1, [r3, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	0099      	lsls	r1, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	fbb0 f3f3 	udiv	r3, r0, r3
 800614e:	3301      	adds	r3, #1
 8006150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006154:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	6809      	ldr	r1, [r1, #0]
 800615c:	4313      	orrs	r3, r2
 800615e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69da      	ldr	r2, [r3, #28]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006186:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6911      	ldr	r1, [r2, #16]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	68d2      	ldr	r2, [r2, #12]
 8006192:	4311      	orrs	r1, r2
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	430b      	orrs	r3, r1
 800619a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	000186a0 	.word	0x000186a0
 80061f4:	001e847f 	.word	0x001e847f
 80061f8:	003d08ff 	.word	0x003d08ff
 80061fc:	431bde83 	.word	0x431bde83
 8006200:	10624dd3 	.word	0x10624dd3

08006204 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	4603      	mov	r3, r0
 8006214:	817b      	strh	r3, [r7, #10]
 8006216:	460b      	mov	r3, r1
 8006218:	813b      	strh	r3, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800621e:	f7fe fb55 	bl	80048cc <HAL_GetTick>
 8006222:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b20      	cmp	r3, #32
 800622e:	f040 80d9 	bne.w	80063e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	2319      	movs	r3, #25
 8006238:	2201      	movs	r2, #1
 800623a:	496d      	ldr	r1, [pc, #436]	@ (80063f0 <HAL_I2C_Mem_Write+0x1ec>)
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 ff5f 	bl	8007100 <I2C_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
 800624a:	e0cc      	b.n	80063e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_I2C_Mem_Write+0x56>
 8006256:	2302      	movs	r3, #2
 8006258:	e0c5      	b.n	80063e6 <HAL_I2C_Mem_Write+0x1e2>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b01      	cmp	r3, #1
 800626e:	d007      	beq.n	8006280 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800628e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2221      	movs	r2, #33	@ 0x21
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2240      	movs	r2, #64	@ 0x40
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a3a      	ldr	r2, [r7, #32]
 80062aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80062b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4a4d      	ldr	r2, [pc, #308]	@ (80063f4 <HAL_I2C_Mem_Write+0x1f0>)
 80062c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062c2:	88f8      	ldrh	r0, [r7, #6]
 80062c4:	893a      	ldrh	r2, [r7, #8]
 80062c6:	8979      	ldrh	r1, [r7, #10]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	4603      	mov	r3, r0
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fc7a 	bl	8006bcc <I2C_RequestMemoryWrite>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d052      	beq.n	8006384 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e081      	b.n	80063e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f001 f824 	bl	8007334 <I2C_WaitOnTXEFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00d      	beq.n	800630e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d107      	bne.n	800630a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006308:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e06b      	b.n	80063e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006312:	781a      	ldrb	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b04      	cmp	r3, #4
 800634a:	d11b      	bne.n	8006384 <HAL_I2C_Mem_Write+0x180>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006350:	2b00      	cmp	r3, #0
 8006352:	d017      	beq.n	8006384 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637a:	b29b      	uxth	r3, r3
 800637c:	3b01      	subs	r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1aa      	bne.n	80062e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f001 f817 	bl	80073c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00d      	beq.n	80063b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d107      	bne.n	80063b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e016      	b.n	80063e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	e000      	b.n	80063e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
  }
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	00100002 	.word	0x00100002
 80063f4:	ffff0000 	.word	0xffff0000

080063f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08c      	sub	sp, #48	@ 0x30
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	4608      	mov	r0, r1
 8006402:	4611      	mov	r1, r2
 8006404:	461a      	mov	r2, r3
 8006406:	4603      	mov	r3, r0
 8006408:	817b      	strh	r3, [r7, #10]
 800640a:	460b      	mov	r3, r1
 800640c:	813b      	strh	r3, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006412:	f7fe fa5b 	bl	80048cc <HAL_GetTick>
 8006416:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b20      	cmp	r3, #32
 8006422:	f040 8214 	bne.w	800684e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	2319      	movs	r3, #25
 800642c:	2201      	movs	r2, #1
 800642e:	497b      	ldr	r1, [pc, #492]	@ (800661c <HAL_I2C_Mem_Read+0x224>)
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fe65 	bl	8007100 <I2C_WaitOnFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800643c:	2302      	movs	r3, #2
 800643e:	e207      	b.n	8006850 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <HAL_I2C_Mem_Read+0x56>
 800644a:	2302      	movs	r3, #2
 800644c:	e200      	b.n	8006850 <HAL_I2C_Mem_Read+0x458>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b01      	cmp	r3, #1
 8006462:	d007      	beq.n	8006474 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006482:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2222      	movs	r2, #34	@ 0x22
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2240      	movs	r2, #64	@ 0x40
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800649e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80064a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4a5b      	ldr	r2, [pc, #364]	@ (8006620 <HAL_I2C_Mem_Read+0x228>)
 80064b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064b6:	88f8      	ldrh	r0, [r7, #6]
 80064b8:	893a      	ldrh	r2, [r7, #8]
 80064ba:	8979      	ldrh	r1, [r7, #10]
 80064bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	4603      	mov	r3, r0
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 fc16 	bl	8006cf8 <I2C_RequestMemoryRead>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e1bc      	b.n	8006850 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d113      	bne.n	8006506 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064de:	2300      	movs	r3, #0
 80064e0:	623b      	str	r3, [r7, #32]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	623b      	str	r3, [r7, #32]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	623b      	str	r3, [r7, #32]
 80064f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	e190      	b.n	8006828 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650a:	2b01      	cmp	r3, #1
 800650c:	d11b      	bne.n	8006546 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800651c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	e170      	b.n	8006828 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800654a:	2b02      	cmp	r3, #2
 800654c:	d11b      	bne.n	8006586 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800655c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800656c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800656e:	2300      	movs	r3, #0
 8006570:	61bb      	str	r3, [r7, #24]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	e150      	b.n	8006828 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800659c:	e144      	b.n	8006828 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	f200 80f1 	bhi.w	800678a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d123      	bne.n	80065f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 ff4d 	bl	8007454 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e145      	b.n	8006850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691a      	ldr	r2, [r3, #16]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80065f6:	e117      	b.n	8006828 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d14e      	bne.n	800669e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006606:	2200      	movs	r2, #0
 8006608:	4906      	ldr	r1, [pc, #24]	@ (8006624 <HAL_I2C_Mem_Read+0x22c>)
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fd78 	bl	8007100 <I2C_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d008      	beq.n	8006628 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e11a      	b.n	8006850 <HAL_I2C_Mem_Read+0x458>
 800661a:	bf00      	nop
 800661c:	00100002 	.word	0x00100002
 8006620:	ffff0000 	.word	0xffff0000
 8006624:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006636:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691a      	ldr	r2, [r3, #16]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006674:	b2d2      	uxtb	r2, r2
 8006676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006686:	3b01      	subs	r3, #1
 8006688:	b29a      	uxth	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800669c:	e0c4      	b.n	8006828 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a4:	2200      	movs	r2, #0
 80066a6:	496c      	ldr	r1, [pc, #432]	@ (8006858 <HAL_I2C_Mem_Read+0x460>)
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 fd29 	bl	8007100 <I2C_WaitOnFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0cb      	b.n	8006850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006700:	2200      	movs	r2, #0
 8006702:	4955      	ldr	r1, [pc, #340]	@ (8006858 <HAL_I2C_Mem_Read+0x460>)
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 fcfb 	bl	8007100 <I2C_WaitOnFlagUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e09d      	b.n	8006850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691a      	ldr	r2, [r3, #16]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006772:	3b01      	subs	r3, #1
 8006774:	b29a      	uxth	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800677e:	b29b      	uxth	r3, r3
 8006780:	3b01      	subs	r3, #1
 8006782:	b29a      	uxth	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006788:	e04e      	b.n	8006828 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800678a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 fe60 	bl	8007454 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e058      	b.n	8006850 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f003 0304 	and.w	r3, r3, #4
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d124      	bne.n	8006828 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d107      	bne.n	80067f6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800682c:	2b00      	cmp	r3, #0
 800682e:	f47f aeb6 	bne.w	800659e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	e000      	b.n	8006850 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800684e:	2302      	movs	r3, #2
  }
}
 8006850:	4618      	mov	r0, r3
 8006852:	3728      	adds	r7, #40	@ 0x28
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	00010004 	.word	0x00010004

0800685c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08c      	sub	sp, #48	@ 0x30
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	4608      	mov	r0, r1
 8006866:	4611      	mov	r1, r2
 8006868:	461a      	mov	r2, r3
 800686a:	4603      	mov	r3, r0
 800686c:	817b      	strh	r3, [r7, #10]
 800686e:	460b      	mov	r3, r1
 8006870:	813b      	strh	r3, [r7, #8]
 8006872:	4613      	mov	r3, r2
 8006874:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006876:	f7fe f829 	bl	80048cc <HAL_GetTick>
 800687a:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b20      	cmp	r3, #32
 800688a:	f040 8172 	bne.w	8006b72 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800688e:	4b93      	ldr	r3, [pc, #588]	@ (8006adc <HAL_I2C_Mem_Read_DMA+0x280>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	08db      	lsrs	r3, r3, #3
 8006894:	4a92      	ldr	r2, [pc, #584]	@ (8006ae0 <HAL_I2C_Mem_Read_DMA+0x284>)
 8006896:	fba2 2303 	umull	r2, r3, r2, r3
 800689a:	0a1a      	lsrs	r2, r3, #8
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009a      	lsls	r2, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d112      	bne.n	80068da <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ce:	f043 0220 	orr.w	r2, r3, #32
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80068d6:	2302      	movs	r3, #2
 80068d8:	e14c      	b.n	8006b74 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d0df      	beq.n	80068a8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <HAL_I2C_Mem_Read_DMA+0x9a>
 80068f2:	2302      	movs	r3, #2
 80068f4:	e13e      	b.n	8006b74 <HAL_I2C_Mem_Read_DMA+0x318>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b01      	cmp	r3, #1
 800690a:	d007      	beq.n	800691c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800692a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2222      	movs	r2, #34	@ 0x22
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2240      	movs	r2, #64	@ 0x40
 8006938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006946:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800694c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4a62      	ldr	r2, [pc, #392]	@ (8006ae4 <HAL_I2C_Mem_Read_DMA+0x288>)
 800695c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800695e:	897a      	ldrh	r2, [r7, #10]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8006964:	893a      	ldrh	r2, [r7, #8]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800696a:	88fa      	ldrh	r2, [r7, #6]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 80cc 	beq.w	8006b18 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d02d      	beq.n	80069e4 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698c:	4a56      	ldr	r2, [pc, #344]	@ (8006ae8 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800698e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006994:	4a55      	ldr	r2, [pc, #340]	@ (8006aec <HAL_I2C_Mem_Read_DMA+0x290>)
 8006996:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699c:	2200      	movs	r2, #0
 800699e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a4:	2200      	movs	r2, #0
 80069a6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ac:	2200      	movs	r2, #0
 80069ae:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b4:	2200      	movs	r2, #0
 80069b6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3310      	adds	r3, #16
 80069c2:	4619      	mov	r1, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	461a      	mov	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ce:	f7fe fd7d 	bl	80054cc <HAL_DMA_Start_IT>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80069d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f040 8087 	bne.w	8006af0 <HAL_I2C_Mem_Read_DMA+0x294>
 80069e2:	e013      	b.n	8006a0c <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e0b3      	b.n	8006b74 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006a0c:	88f8      	ldrh	r0, [r7, #6]
 8006a0e:	893a      	ldrh	r2, [r7, #8]
 8006a10:	8979      	ldrh	r1, [r7, #10]
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	2323      	movs	r3, #35	@ 0x23
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 f96b 	bl	8006cf8 <I2C_RequestMemoryRead>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d023      	beq.n	8006a70 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe fe15 	bl	800565c <HAL_DMA_Abort_IT>
 8006a32:	4603      	mov	r3, r0
 8006a34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a4e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0201 	bic.w	r2, r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e081      	b.n	8006b74 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d108      	bne.n	8006a8a <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	e007      	b.n	8006a9a <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006a98:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ac6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ad6:	605a      	str	r2, [r3, #4]
 8006ad8:	e049      	b.n	8006b6e <HAL_I2C_Mem_Read_DMA+0x312>
 8006ada:	bf00      	nop
 8006adc:	20000004 	.word	0x20000004
 8006ae0:	14f8b589 	.word	0x14f8b589
 8006ae4:	ffff0000 	.word	0xffff0000
 8006ae8:	08006ec9 	.word	0x08006ec9
 8006aec:	08007087 	.word	0x08007087
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b04:	f043 0210 	orr.w	r2, r3, #16
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e02d      	b.n	8006b74 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006b18:	88f8      	ldrh	r0, [r7, #6]
 8006b1a:	893a      	ldrh	r2, [r7, #8]
 8006b1c:	8979      	ldrh	r1, [r7, #10]
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	9301      	str	r3, [sp, #4]
 8006b22:	2323      	movs	r3, #35	@ 0x23
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	4603      	mov	r3, r0
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f8e5 	bl	8006cf8 <I2C_RequestMemoryRead>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e01d      	b.n	8006b74 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b38:	2300      	movs	r3, #0
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b5c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e000      	b.n	8006b74 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8006b72:	2302      	movs	r3, #2
  }
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3728      	adds	r7, #40	@ 0x28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	817b      	strh	r3, [r7, #10]
 8006bde:	460b      	mov	r3, r1
 8006be0:	813b      	strh	r3, [r7, #8]
 8006be2:	4613      	mov	r3, r2
 8006be4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fa7c 	bl	8007100 <I2C_WaitOnFlagUntilTimeout>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00d      	beq.n	8006c2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c1c:	d103      	bne.n	8006c26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e05f      	b.n	8006cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c2a:	897b      	ldrh	r3, [r7, #10]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	461a      	mov	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	6a3a      	ldr	r2, [r7, #32]
 8006c3e:	492d      	ldr	r1, [pc, #180]	@ (8006cf4 <I2C_RequestMemoryWrite+0x128>)
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fad7 	bl	80071f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e04c      	b.n	8006cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c50:	2300      	movs	r3, #0
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c68:	6a39      	ldr	r1, [r7, #32]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fb62 	bl	8007334 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00d      	beq.n	8006c92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d107      	bne.n	8006c8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e02b      	b.n	8006cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d105      	bne.n	8006ca4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c98:	893b      	ldrh	r3, [r7, #8]
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	611a      	str	r2, [r3, #16]
 8006ca2:	e021      	b.n	8006ce8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ca4:	893b      	ldrh	r3, [r7, #8]
 8006ca6:	0a1b      	lsrs	r3, r3, #8
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cb4:	6a39      	ldr	r1, [r7, #32]
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fb3c 	bl	8007334 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00d      	beq.n	8006cde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d107      	bne.n	8006cda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e005      	b.n	8006cea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cde:	893b      	ldrh	r3, [r7, #8]
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	00010002 	.word	0x00010002

08006cf8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	4608      	mov	r0, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	461a      	mov	r2, r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	817b      	strh	r3, [r7, #10]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	813b      	strh	r3, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f9de 	bl	8007100 <I2C_WaitOnFlagUntilTimeout>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00d      	beq.n	8006d66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d58:	d103      	bne.n	8006d62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e0aa      	b.n	8006ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d66:	897b      	ldrh	r3, [r7, #10]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006d74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	6a3a      	ldr	r2, [r7, #32]
 8006d7a:	4952      	ldr	r1, [pc, #328]	@ (8006ec4 <I2C_RequestMemoryRead+0x1cc>)
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fa39 	bl	80071f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e097      	b.n	8006ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006da4:	6a39      	ldr	r1, [r7, #32]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 fac4 	bl	8007334 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00d      	beq.n	8006dce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d107      	bne.n	8006dca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e076      	b.n	8006ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006dce:	88fb      	ldrh	r3, [r7, #6]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d105      	bne.n	8006de0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006dd4:	893b      	ldrh	r3, [r7, #8]
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	611a      	str	r2, [r3, #16]
 8006dde:	e021      	b.n	8006e24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006de0:	893b      	ldrh	r3, [r7, #8]
 8006de2:	0a1b      	lsrs	r3, r3, #8
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006df0:	6a39      	ldr	r1, [r7, #32]
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 fa9e 	bl	8007334 <I2C_WaitOnTXEFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00d      	beq.n	8006e1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d107      	bne.n	8006e16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e050      	b.n	8006ebc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e1a:	893b      	ldrh	r3, [r7, #8]
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e26:	6a39      	ldr	r1, [r7, #32]
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fa83 	bl	8007334 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00d      	beq.n	8006e50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d107      	bne.n	8006e4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e035      	b.n	8006ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 f947 	bl	8007100 <I2C_WaitOnFlagUntilTimeout>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00d      	beq.n	8006e94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e86:	d103      	bne.n	8006e90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e013      	b.n	8006ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e94:	897b      	ldrh	r3, [r7, #10]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	6a3a      	ldr	r2, [r7, #32]
 8006ea8:	4906      	ldr	r1, [pc, #24]	@ (8006ec4 <I2C_RequestMemoryRead+0x1cc>)
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 f9a2 	bl	80071f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	00010002 	.word	0x00010002

08006ec8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006edc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ee4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006efa:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f08:	2200      	movs	r2, #0
 8006f0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f18:	2200      	movs	r2, #0
 8006f1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006f1c:	7cfb      	ldrb	r3, [r7, #19]
 8006f1e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006f22:	2b21      	cmp	r3, #33	@ 0x21
 8006f24:	d007      	beq.n	8006f36 <I2C_DMAXferCplt+0x6e>
 8006f26:	7cfb      	ldrb	r3, [r7, #19]
 8006f28:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006f2c:	2b22      	cmp	r3, #34	@ 0x22
 8006f2e:	d131      	bne.n	8006f94 <I2C_DMAXferCplt+0xcc>
 8006f30:	7cbb      	ldrb	r3, [r7, #18]
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	d12e      	bne.n	8006f94 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f44:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006f4c:	7cfb      	ldrb	r3, [r7, #19]
 8006f4e:	2b29      	cmp	r3, #41	@ 0x29
 8006f50:	d10a      	bne.n	8006f68 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2221      	movs	r2, #33	@ 0x21
 8006f56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2228      	movs	r2, #40	@ 0x28
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f60:	6978      	ldr	r0, [r7, #20]
 8006f62:	f7ff fe15 	bl	8006b90 <HAL_I2C_SlaveTxCpltCallback>
 8006f66:	e00c      	b.n	8006f82 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006f68:	7cfb      	ldrb	r3, [r7, #19]
 8006f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f6c:	d109      	bne.n	8006f82 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2222      	movs	r2, #34	@ 0x22
 8006f72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2228      	movs	r2, #40	@ 0x28
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f7c:	6978      	ldr	r0, [r7, #20]
 8006f7e:	f7ff fe11 	bl	8006ba4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006f90:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006f92:	e074      	b.n	800707e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d06e      	beq.n	800707e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d107      	bne.n	8006fba <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fb8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006fc8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006fd0:	d009      	beq.n	8006fe6 <I2C_DMAXferCplt+0x11e>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d006      	beq.n	8006fe6 <I2C_DMAXferCplt+0x11e>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006fde:	d002      	beq.n	8006fe6 <I2C_DMAXferCplt+0x11e>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b20      	cmp	r3, #32
 8006fe4:	d107      	bne.n	8006ff6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ff4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007004:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007014:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2200      	movs	r2, #0
 800701a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007024:	6978      	ldr	r0, [r7, #20]
 8007026:	f7ff fdc7 	bl	8006bb8 <HAL_I2C_ErrorCallback>
}
 800702a:	e028      	b.n	800707e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b40      	cmp	r3, #64	@ 0x40
 800703e:	d10a      	bne.n	8007056 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2200      	movs	r2, #0
 800704c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800704e:	6978      	ldr	r0, [r7, #20]
 8007050:	f7fa fbf4 	bl	800183c <HAL_I2C_MemRxCpltCallback>
}
 8007054:	e013      	b.n	800707e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b08      	cmp	r3, #8
 8007062:	d002      	beq.n	800706a <I2C_DMAXferCplt+0x1a2>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b20      	cmp	r3, #32
 8007068:	d103      	bne.n	8007072 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2200      	movs	r2, #0
 800706e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007070:	e002      	b.n	8007078 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2212      	movs	r2, #18
 8007076:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007078:	6978      	ldr	r0, [r7, #20]
 800707a:	f7ff fd7f 	bl	8006b7c <HAL_I2C_MasterRxCpltCallback>
}
 800707e:	bf00      	nop
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007092:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a0:	2200      	movs	r2, #0
 80070a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b0:	2200      	movs	r2, #0
 80070b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7fe fc7d 	bl	80059b4 <HAL_DMA_GetError>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d01b      	beq.n	80070f8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ce:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2220      	movs	r2, #32
 80070da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ea:	f043 0210 	orr.w	r2, r3, #16
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f7ff fd60 	bl	8006bb8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80070f8:	bf00      	nop
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	4613      	mov	r3, r2
 800710e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007110:	e048      	b.n	80071a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007118:	d044      	beq.n	80071a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800711a:	f7fd fbd7 	bl	80048cc <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d302      	bcc.n	8007130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d139      	bne.n	80071a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b01      	cmp	r3, #1
 8007138:	d10d      	bne.n	8007156 <I2C_WaitOnFlagUntilTimeout+0x56>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	43da      	mvns	r2, r3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	4013      	ands	r3, r2
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	bf0c      	ite	eq
 800714c:	2301      	moveq	r3, #1
 800714e:	2300      	movne	r3, #0
 8007150:	b2db      	uxtb	r3, r3
 8007152:	461a      	mov	r2, r3
 8007154:	e00c      	b.n	8007170 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	43da      	mvns	r2, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4013      	ands	r3, r2
 8007162:	b29b      	uxth	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	bf0c      	ite	eq
 8007168:	2301      	moveq	r3, #1
 800716a:	2300      	movne	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	461a      	mov	r2, r3
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	429a      	cmp	r2, r3
 8007174:	d116      	bne.n	80071a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2220      	movs	r2, #32
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007190:	f043 0220 	orr.w	r2, r3, #32
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e023      	b.n	80071ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	0c1b      	lsrs	r3, r3, #16
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d10d      	bne.n	80071ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	43da      	mvns	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	4013      	ands	r3, r2
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bf0c      	ite	eq
 80071c0:	2301      	moveq	r3, #1
 80071c2:	2300      	movne	r3, #0
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	461a      	mov	r2, r3
 80071c8:	e00c      	b.n	80071e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	43da      	mvns	r2, r3
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	4013      	ands	r3, r2
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	bf0c      	ite	eq
 80071dc:	2301      	moveq	r3, #1
 80071de:	2300      	movne	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	461a      	mov	r2, r3
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d093      	beq.n	8007112 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007202:	e071      	b.n	80072e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800720e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007212:	d123      	bne.n	800725c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007222:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800722c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2220      	movs	r2, #32
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007248:	f043 0204 	orr.w	r2, r3, #4
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e067      	b.n	800732c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007262:	d041      	beq.n	80072e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007264:	f7fd fb32 	bl	80048cc <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	d302      	bcc.n	800727a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d136      	bne.n	80072e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	0c1b      	lsrs	r3, r3, #16
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	d10c      	bne.n	800729e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	43da      	mvns	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4013      	ands	r3, r2
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	bf14      	ite	ne
 8007296:	2301      	movne	r3, #1
 8007298:	2300      	moveq	r3, #0
 800729a:	b2db      	uxtb	r3, r3
 800729c:	e00b      	b.n	80072b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	43da      	mvns	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4013      	ands	r3, r2
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	bf14      	ite	ne
 80072b0:	2301      	movne	r3, #1
 80072b2:	2300      	moveq	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d016      	beq.n	80072e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d4:	f043 0220 	orr.w	r2, r3, #32
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e021      	b.n	800732c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	0c1b      	lsrs	r3, r3, #16
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d10c      	bne.n	800730c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	43da      	mvns	r2, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	4013      	ands	r3, r2
 80072fe:	b29b      	uxth	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	bf14      	ite	ne
 8007304:	2301      	movne	r3, #1
 8007306:	2300      	moveq	r3, #0
 8007308:	b2db      	uxtb	r3, r3
 800730a:	e00b      	b.n	8007324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	43da      	mvns	r2, r3
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4013      	ands	r3, r2
 8007318:	b29b      	uxth	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	bf14      	ite	ne
 800731e:	2301      	movne	r3, #1
 8007320:	2300      	moveq	r3, #0
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	f47f af6d 	bne.w	8007204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007340:	e034      	b.n	80073ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 f8e3 	bl	800750e <I2C_IsAcknowledgeFailed>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e034      	b.n	80073bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007358:	d028      	beq.n	80073ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800735a:	f7fd fab7 	bl	80048cc <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	429a      	cmp	r2, r3
 8007368:	d302      	bcc.n	8007370 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d11d      	bne.n	80073ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800737a:	2b80      	cmp	r3, #128	@ 0x80
 800737c:	d016      	beq.n	80073ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007398:	f043 0220 	orr.w	r2, r3, #32
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e007      	b.n	80073bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073b6:	2b80      	cmp	r3, #128	@ 0x80
 80073b8:	d1c3      	bne.n	8007342 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073d0:	e034      	b.n	800743c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f89b 	bl	800750e <I2C_IsAcknowledgeFailed>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e034      	b.n	800744c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073e8:	d028      	beq.n	800743c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ea:	f7fd fa6f 	bl	80048cc <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d302      	bcc.n	8007400 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d11d      	bne.n	800743c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	2b04      	cmp	r3, #4
 800740c:	d016      	beq.n	800743c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007428:	f043 0220 	orr.w	r2, r3, #32
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e007      	b.n	800744c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	f003 0304 	and.w	r3, r3, #4
 8007446:	2b04      	cmp	r3, #4
 8007448:	d1c3      	bne.n	80073d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007460:	e049      	b.n	80074f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	f003 0310 	and.w	r3, r3, #16
 800746c:	2b10      	cmp	r3, #16
 800746e:	d119      	bne.n	80074a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0210 	mvn.w	r2, #16
 8007478:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2220      	movs	r2, #32
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e030      	b.n	8007506 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074a4:	f7fd fa12 	bl	80048cc <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d302      	bcc.n	80074ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d11d      	bne.n	80074f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c4:	2b40      	cmp	r3, #64	@ 0x40
 80074c6:	d016      	beq.n	80074f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2220      	movs	r2, #32
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e2:	f043 0220 	orr.w	r2, r3, #32
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e007      	b.n	8007506 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007500:	2b40      	cmp	r3, #64	@ 0x40
 8007502:	d1ae      	bne.n	8007462 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007524:	d11b      	bne.n	800755e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800752e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754a:	f043 0204 	orr.w	r2, r3, #4
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e0cc      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007580:	4b68      	ldr	r3, [pc, #416]	@ (8007724 <HAL_RCC_ClockConfig+0x1b8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 030f 	and.w	r3, r3, #15
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d90c      	bls.n	80075a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800758e:	4b65      	ldr	r3, [pc, #404]	@ (8007724 <HAL_RCC_ClockConfig+0x1b8>)
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007596:	4b63      	ldr	r3, [pc, #396]	@ (8007724 <HAL_RCC_ClockConfig+0x1b8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d001      	beq.n	80075a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e0b8      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d020      	beq.n	80075f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075c0:	4b59      	ldr	r3, [pc, #356]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	4a58      	ldr	r2, [pc, #352]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80075c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075d8:	4b53      	ldr	r3, [pc, #332]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	4a52      	ldr	r2, [pc, #328]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80075de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80075e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075e4:	4b50      	ldr	r3, [pc, #320]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	494d      	ldr	r1, [pc, #308]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d044      	beq.n	800768c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d107      	bne.n	800761a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800760a:	4b47      	ldr	r3, [pc, #284]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d119      	bne.n	800764a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e07f      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d003      	beq.n	800762a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007626:	2b03      	cmp	r3, #3
 8007628:	d107      	bne.n	800763a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800762a:	4b3f      	ldr	r3, [pc, #252]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e06f      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800763a:	4b3b      	ldr	r3, [pc, #236]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e067      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800764a:	4b37      	ldr	r3, [pc, #220]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f023 0203 	bic.w	r2, r3, #3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	4934      	ldr	r1, [pc, #208]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 8007658:	4313      	orrs	r3, r2
 800765a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800765c:	f7fd f936 	bl	80048cc <HAL_GetTick>
 8007660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007662:	e00a      	b.n	800767a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007664:	f7fd f932 	bl	80048cc <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007672:	4293      	cmp	r3, r2
 8007674:	d901      	bls.n	800767a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e04f      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800767a:	4b2b      	ldr	r3, [pc, #172]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 020c 	and.w	r2, r3, #12
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	429a      	cmp	r2, r3
 800768a:	d1eb      	bne.n	8007664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800768c:	4b25      	ldr	r3, [pc, #148]	@ (8007724 <HAL_RCC_ClockConfig+0x1b8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 030f 	and.w	r3, r3, #15
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d20c      	bcs.n	80076b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800769a:	4b22      	ldr	r3, [pc, #136]	@ (8007724 <HAL_RCC_ClockConfig+0x1b8>)
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076a2:	4b20      	ldr	r3, [pc, #128]	@ (8007724 <HAL_RCC_ClockConfig+0x1b8>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 030f 	and.w	r3, r3, #15
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d001      	beq.n	80076b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e032      	b.n	800771a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d008      	beq.n	80076d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076c0:	4b19      	ldr	r3, [pc, #100]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	4916      	ldr	r1, [pc, #88]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d009      	beq.n	80076f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076de:	4b12      	ldr	r3, [pc, #72]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	490e      	ldr	r1, [pc, #56]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076f2:	f000 f855 	bl	80077a0 <HAL_RCC_GetSysClockFreq>
 80076f6:	4602      	mov	r2, r0
 80076f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007728 <HAL_RCC_ClockConfig+0x1bc>)
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	091b      	lsrs	r3, r3, #4
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	490a      	ldr	r1, [pc, #40]	@ (800772c <HAL_RCC_ClockConfig+0x1c0>)
 8007704:	5ccb      	ldrb	r3, [r1, r3]
 8007706:	fa22 f303 	lsr.w	r3, r2, r3
 800770a:	4a09      	ldr	r2, [pc, #36]	@ (8007730 <HAL_RCC_ClockConfig+0x1c4>)
 800770c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800770e:	4b09      	ldr	r3, [pc, #36]	@ (8007734 <HAL_RCC_ClockConfig+0x1c8>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4618      	mov	r0, r3
 8007714:	f7fd f896 	bl	8004844 <HAL_InitTick>

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	40023c00 	.word	0x40023c00
 8007728:	40023800 	.word	0x40023800
 800772c:	0800f944 	.word	0x0800f944
 8007730:	20000004 	.word	0x20000004
 8007734:	200003c0 	.word	0x200003c0

08007738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007738:	b480      	push	{r7}
 800773a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800773c:	4b03      	ldr	r3, [pc, #12]	@ (800774c <HAL_RCC_GetHCLKFreq+0x14>)
 800773e:	681b      	ldr	r3, [r3, #0]
}
 8007740:	4618      	mov	r0, r3
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	20000004 	.word	0x20000004

08007750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007754:	f7ff fff0 	bl	8007738 <HAL_RCC_GetHCLKFreq>
 8007758:	4602      	mov	r2, r0
 800775a:	4b05      	ldr	r3, [pc, #20]	@ (8007770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	0a9b      	lsrs	r3, r3, #10
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	4903      	ldr	r1, [pc, #12]	@ (8007774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007766:	5ccb      	ldrb	r3, [r1, r3]
 8007768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800776c:	4618      	mov	r0, r3
 800776e:	bd80      	pop	{r7, pc}
 8007770:	40023800 	.word	0x40023800
 8007774:	0800f954 	.word	0x0800f954

08007778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800777c:	f7ff ffdc 	bl	8007738 <HAL_RCC_GetHCLKFreq>
 8007780:	4602      	mov	r2, r0
 8007782:	4b05      	ldr	r3, [pc, #20]	@ (8007798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	0b5b      	lsrs	r3, r3, #13
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	4903      	ldr	r1, [pc, #12]	@ (800779c <HAL_RCC_GetPCLK2Freq+0x24>)
 800778e:	5ccb      	ldrb	r3, [r1, r3]
 8007790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007794:	4618      	mov	r0, r3
 8007796:	bd80      	pop	{r7, pc}
 8007798:	40023800 	.word	0x40023800
 800779c:	0800f954 	.word	0x0800f954

080077a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077a4:	b0ae      	sub	sp, #184	@ 0xb8
 80077a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077c6:	4bcb      	ldr	r3, [pc, #812]	@ (8007af4 <HAL_RCC_GetSysClockFreq+0x354>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 030c 	and.w	r3, r3, #12
 80077ce:	2b0c      	cmp	r3, #12
 80077d0:	f200 8206 	bhi.w	8007be0 <HAL_RCC_GetSysClockFreq+0x440>
 80077d4:	a201      	add	r2, pc, #4	@ (adr r2, 80077dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80077d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077da:	bf00      	nop
 80077dc:	08007811 	.word	0x08007811
 80077e0:	08007be1 	.word	0x08007be1
 80077e4:	08007be1 	.word	0x08007be1
 80077e8:	08007be1 	.word	0x08007be1
 80077ec:	08007819 	.word	0x08007819
 80077f0:	08007be1 	.word	0x08007be1
 80077f4:	08007be1 	.word	0x08007be1
 80077f8:	08007be1 	.word	0x08007be1
 80077fc:	08007821 	.word	0x08007821
 8007800:	08007be1 	.word	0x08007be1
 8007804:	08007be1 	.word	0x08007be1
 8007808:	08007be1 	.word	0x08007be1
 800780c:	08007a11 	.word	0x08007a11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007810:	4bb9      	ldr	r3, [pc, #740]	@ (8007af8 <HAL_RCC_GetSysClockFreq+0x358>)
 8007812:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007816:	e1e7      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007818:	4bb8      	ldr	r3, [pc, #736]	@ (8007afc <HAL_RCC_GetSysClockFreq+0x35c>)
 800781a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800781e:	e1e3      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007820:	4bb4      	ldr	r3, [pc, #720]	@ (8007af4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800782c:	4bb1      	ldr	r3, [pc, #708]	@ (8007af4 <HAL_RCC_GetSysClockFreq+0x354>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d071      	beq.n	800791c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007838:	4bae      	ldr	r3, [pc, #696]	@ (8007af4 <HAL_RCC_GetSysClockFreq+0x354>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	099b      	lsrs	r3, r3, #6
 800783e:	2200      	movs	r2, #0
 8007840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007844:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007848:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800784c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007850:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007854:	2300      	movs	r3, #0
 8007856:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800785a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800785e:	4622      	mov	r2, r4
 8007860:	462b      	mov	r3, r5
 8007862:	f04f 0000 	mov.w	r0, #0
 8007866:	f04f 0100 	mov.w	r1, #0
 800786a:	0159      	lsls	r1, r3, #5
 800786c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007870:	0150      	lsls	r0, r2, #5
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	4621      	mov	r1, r4
 8007878:	1a51      	subs	r1, r2, r1
 800787a:	6439      	str	r1, [r7, #64]	@ 0x40
 800787c:	4629      	mov	r1, r5
 800787e:	eb63 0301 	sbc.w	r3, r3, r1
 8007882:	647b      	str	r3, [r7, #68]	@ 0x44
 8007884:	f04f 0200 	mov.w	r2, #0
 8007888:	f04f 0300 	mov.w	r3, #0
 800788c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007890:	4649      	mov	r1, r9
 8007892:	018b      	lsls	r3, r1, #6
 8007894:	4641      	mov	r1, r8
 8007896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800789a:	4641      	mov	r1, r8
 800789c:	018a      	lsls	r2, r1, #6
 800789e:	4641      	mov	r1, r8
 80078a0:	1a51      	subs	r1, r2, r1
 80078a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80078a4:	4649      	mov	r1, r9
 80078a6:	eb63 0301 	sbc.w	r3, r3, r1
 80078aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	f04f 0300 	mov.w	r3, #0
 80078b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80078b8:	4649      	mov	r1, r9
 80078ba:	00cb      	lsls	r3, r1, #3
 80078bc:	4641      	mov	r1, r8
 80078be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078c2:	4641      	mov	r1, r8
 80078c4:	00ca      	lsls	r2, r1, #3
 80078c6:	4610      	mov	r0, r2
 80078c8:	4619      	mov	r1, r3
 80078ca:	4603      	mov	r3, r0
 80078cc:	4622      	mov	r2, r4
 80078ce:	189b      	adds	r3, r3, r2
 80078d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80078d2:	462b      	mov	r3, r5
 80078d4:	460a      	mov	r2, r1
 80078d6:	eb42 0303 	adc.w	r3, r2, r3
 80078da:	637b      	str	r3, [r7, #52]	@ 0x34
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	f04f 0300 	mov.w	r3, #0
 80078e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80078e8:	4629      	mov	r1, r5
 80078ea:	024b      	lsls	r3, r1, #9
 80078ec:	4621      	mov	r1, r4
 80078ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80078f2:	4621      	mov	r1, r4
 80078f4:	024a      	lsls	r2, r1, #9
 80078f6:	4610      	mov	r0, r2
 80078f8:	4619      	mov	r1, r3
 80078fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007904:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007908:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800790c:	f7f9 f9ec 	bl	8000ce8 <__aeabi_uldivmod>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	4613      	mov	r3, r2
 8007916:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800791a:	e067      	b.n	80079ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800791c:	4b75      	ldr	r3, [pc, #468]	@ (8007af4 <HAL_RCC_GetSysClockFreq+0x354>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	099b      	lsrs	r3, r3, #6
 8007922:	2200      	movs	r2, #0
 8007924:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007928:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800792c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007934:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007936:	2300      	movs	r3, #0
 8007938:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800793a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800793e:	4622      	mov	r2, r4
 8007940:	462b      	mov	r3, r5
 8007942:	f04f 0000 	mov.w	r0, #0
 8007946:	f04f 0100 	mov.w	r1, #0
 800794a:	0159      	lsls	r1, r3, #5
 800794c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007950:	0150      	lsls	r0, r2, #5
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4621      	mov	r1, r4
 8007958:	1a51      	subs	r1, r2, r1
 800795a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800795c:	4629      	mov	r1, r5
 800795e:	eb63 0301 	sbc.w	r3, r3, r1
 8007962:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	f04f 0300 	mov.w	r3, #0
 800796c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007970:	4649      	mov	r1, r9
 8007972:	018b      	lsls	r3, r1, #6
 8007974:	4641      	mov	r1, r8
 8007976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800797a:	4641      	mov	r1, r8
 800797c:	018a      	lsls	r2, r1, #6
 800797e:	4641      	mov	r1, r8
 8007980:	ebb2 0a01 	subs.w	sl, r2, r1
 8007984:	4649      	mov	r1, r9
 8007986:	eb63 0b01 	sbc.w	fp, r3, r1
 800798a:	f04f 0200 	mov.w	r2, #0
 800798e:	f04f 0300 	mov.w	r3, #0
 8007992:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007996:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800799a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800799e:	4692      	mov	sl, r2
 80079a0:	469b      	mov	fp, r3
 80079a2:	4623      	mov	r3, r4
 80079a4:	eb1a 0303 	adds.w	r3, sl, r3
 80079a8:	623b      	str	r3, [r7, #32]
 80079aa:	462b      	mov	r3, r5
 80079ac:	eb4b 0303 	adc.w	r3, fp, r3
 80079b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	f04f 0300 	mov.w	r3, #0
 80079ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80079be:	4629      	mov	r1, r5
 80079c0:	028b      	lsls	r3, r1, #10
 80079c2:	4621      	mov	r1, r4
 80079c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80079c8:	4621      	mov	r1, r4
 80079ca:	028a      	lsls	r2, r1, #10
 80079cc:	4610      	mov	r0, r2
 80079ce:	4619      	mov	r1, r3
 80079d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079d4:	2200      	movs	r2, #0
 80079d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80079d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80079da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80079de:	f7f9 f983 	bl	8000ce8 <__aeabi_uldivmod>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4613      	mov	r3, r2
 80079e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80079ec:	4b41      	ldr	r3, [pc, #260]	@ (8007af4 <HAL_RCC_GetSysClockFreq+0x354>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	0c1b      	lsrs	r3, r3, #16
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	3301      	adds	r3, #1
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80079fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007a0e:	e0eb      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a10:	4b38      	ldr	r3, [pc, #224]	@ (8007af4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a1c:	4b35      	ldr	r3, [pc, #212]	@ (8007af4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d06b      	beq.n	8007b00 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a28:	4b32      	ldr	r3, [pc, #200]	@ (8007af4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	099b      	lsrs	r3, r3, #6
 8007a2e:	2200      	movs	r2, #0
 8007a30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007a44:	4622      	mov	r2, r4
 8007a46:	462b      	mov	r3, r5
 8007a48:	f04f 0000 	mov.w	r0, #0
 8007a4c:	f04f 0100 	mov.w	r1, #0
 8007a50:	0159      	lsls	r1, r3, #5
 8007a52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a56:	0150      	lsls	r0, r2, #5
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	1a51      	subs	r1, r2, r1
 8007a60:	61b9      	str	r1, [r7, #24]
 8007a62:	4629      	mov	r1, r5
 8007a64:	eb63 0301 	sbc.w	r3, r3, r1
 8007a68:	61fb      	str	r3, [r7, #28]
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	f04f 0300 	mov.w	r3, #0
 8007a72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007a76:	4659      	mov	r1, fp
 8007a78:	018b      	lsls	r3, r1, #6
 8007a7a:	4651      	mov	r1, sl
 8007a7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a80:	4651      	mov	r1, sl
 8007a82:	018a      	lsls	r2, r1, #6
 8007a84:	4651      	mov	r1, sl
 8007a86:	ebb2 0801 	subs.w	r8, r2, r1
 8007a8a:	4659      	mov	r1, fp
 8007a8c:	eb63 0901 	sbc.w	r9, r3, r1
 8007a90:	f04f 0200 	mov.w	r2, #0
 8007a94:	f04f 0300 	mov.w	r3, #0
 8007a98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007aa0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007aa4:	4690      	mov	r8, r2
 8007aa6:	4699      	mov	r9, r3
 8007aa8:	4623      	mov	r3, r4
 8007aaa:	eb18 0303 	adds.w	r3, r8, r3
 8007aae:	613b      	str	r3, [r7, #16]
 8007ab0:	462b      	mov	r3, r5
 8007ab2:	eb49 0303 	adc.w	r3, r9, r3
 8007ab6:	617b      	str	r3, [r7, #20]
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	f04f 0300 	mov.w	r3, #0
 8007ac0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	024b      	lsls	r3, r1, #9
 8007ac8:	4621      	mov	r1, r4
 8007aca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007ace:	4621      	mov	r1, r4
 8007ad0:	024a      	lsls	r2, r1, #9
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ada:	2200      	movs	r2, #0
 8007adc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ade:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007ae0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ae4:	f7f9 f900 	bl	8000ce8 <__aeabi_uldivmod>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4613      	mov	r3, r2
 8007aee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007af2:	e065      	b.n	8007bc0 <HAL_RCC_GetSysClockFreq+0x420>
 8007af4:	40023800 	.word	0x40023800
 8007af8:	00f42400 	.word	0x00f42400
 8007afc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b00:	4b3d      	ldr	r3, [pc, #244]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x458>)
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	099b      	lsrs	r3, r3, #6
 8007b06:	2200      	movs	r2, #0
 8007b08:	4618      	mov	r0, r3
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b10:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b12:	2300      	movs	r3, #0
 8007b14:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b16:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007b1a:	4642      	mov	r2, r8
 8007b1c:	464b      	mov	r3, r9
 8007b1e:	f04f 0000 	mov.w	r0, #0
 8007b22:	f04f 0100 	mov.w	r1, #0
 8007b26:	0159      	lsls	r1, r3, #5
 8007b28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b2c:	0150      	lsls	r0, r2, #5
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4641      	mov	r1, r8
 8007b34:	1a51      	subs	r1, r2, r1
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	4649      	mov	r1, r9
 8007b3a:	eb63 0301 	sbc.w	r3, r3, r1
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	f04f 0200 	mov.w	r2, #0
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007b4c:	4659      	mov	r1, fp
 8007b4e:	018b      	lsls	r3, r1, #6
 8007b50:	4651      	mov	r1, sl
 8007b52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b56:	4651      	mov	r1, sl
 8007b58:	018a      	lsls	r2, r1, #6
 8007b5a:	4651      	mov	r1, sl
 8007b5c:	1a54      	subs	r4, r2, r1
 8007b5e:	4659      	mov	r1, fp
 8007b60:	eb63 0501 	sbc.w	r5, r3, r1
 8007b64:	f04f 0200 	mov.w	r2, #0
 8007b68:	f04f 0300 	mov.w	r3, #0
 8007b6c:	00eb      	lsls	r3, r5, #3
 8007b6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b72:	00e2      	lsls	r2, r4, #3
 8007b74:	4614      	mov	r4, r2
 8007b76:	461d      	mov	r5, r3
 8007b78:	4643      	mov	r3, r8
 8007b7a:	18e3      	adds	r3, r4, r3
 8007b7c:	603b      	str	r3, [r7, #0]
 8007b7e:	464b      	mov	r3, r9
 8007b80:	eb45 0303 	adc.w	r3, r5, r3
 8007b84:	607b      	str	r3, [r7, #4]
 8007b86:	f04f 0200 	mov.w	r2, #0
 8007b8a:	f04f 0300 	mov.w	r3, #0
 8007b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b92:	4629      	mov	r1, r5
 8007b94:	028b      	lsls	r3, r1, #10
 8007b96:	4621      	mov	r1, r4
 8007b98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	028a      	lsls	r2, r1, #10
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ba8:	2200      	movs	r2, #0
 8007baa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007bae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007bb2:	f7f9 f899 	bl	8000ce8 <__aeabi_uldivmod>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4613      	mov	r3, r2
 8007bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x458>)
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	0f1b      	lsrs	r3, r3, #28
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8007bce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007bd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007bde:	e003      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007be0:	4b06      	ldr	r3, [pc, #24]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0x45c>)
 8007be2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007be6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007be8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	37b8      	adds	r7, #184	@ 0xb8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	00f42400 	.word	0x00f42400

08007c00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e28d      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 8083 	beq.w	8007d26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007c20:	4b94      	ldr	r3, [pc, #592]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f003 030c 	and.w	r3, r3, #12
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d019      	beq.n	8007c60 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007c2c:	4b91      	ldr	r3, [pc, #580]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f003 030c 	and.w	r3, r3, #12
        || \
 8007c34:	2b08      	cmp	r3, #8
 8007c36:	d106      	bne.n	8007c46 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007c38:	4b8e      	ldr	r3, [pc, #568]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c44:	d00c      	beq.n	8007c60 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c46:	4b8b      	ldr	r3, [pc, #556]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007c4e:	2b0c      	cmp	r3, #12
 8007c50:	d112      	bne.n	8007c78 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c52:	4b88      	ldr	r3, [pc, #544]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c5e:	d10b      	bne.n	8007c78 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c60:	4b84      	ldr	r3, [pc, #528]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d05b      	beq.n	8007d24 <HAL_RCC_OscConfig+0x124>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d157      	bne.n	8007d24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e25a      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c80:	d106      	bne.n	8007c90 <HAL_RCC_OscConfig+0x90>
 8007c82:	4b7c      	ldr	r3, [pc, #496]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a7b      	ldr	r2, [pc, #492]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	e01d      	b.n	8007ccc <HAL_RCC_OscConfig+0xcc>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c98:	d10c      	bne.n	8007cb4 <HAL_RCC_OscConfig+0xb4>
 8007c9a:	4b76      	ldr	r3, [pc, #472]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a75      	ldr	r2, [pc, #468]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	4b73      	ldr	r3, [pc, #460]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a72      	ldr	r2, [pc, #456]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	e00b      	b.n	8007ccc <HAL_RCC_OscConfig+0xcc>
 8007cb4:	4b6f      	ldr	r3, [pc, #444]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a6e      	ldr	r2, [pc, #440]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	4b6c      	ldr	r3, [pc, #432]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a6b      	ldr	r2, [pc, #428]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d013      	beq.n	8007cfc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd4:	f7fc fdfa 	bl	80048cc <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cda:	e008      	b.n	8007cee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cdc:	f7fc fdf6 	bl	80048cc <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b64      	cmp	r3, #100	@ 0x64
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e21f      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cee:	4b61      	ldr	r3, [pc, #388]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0f0      	beq.n	8007cdc <HAL_RCC_OscConfig+0xdc>
 8007cfa:	e014      	b.n	8007d26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfc:	f7fc fde6 	bl	80048cc <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d04:	f7fc fde2 	bl	80048cc <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b64      	cmp	r3, #100	@ 0x64
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e20b      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d16:	4b57      	ldr	r3, [pc, #348]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1f0      	bne.n	8007d04 <HAL_RCC_OscConfig+0x104>
 8007d22:	e000      	b.n	8007d26 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d06f      	beq.n	8007e12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007d32:	4b50      	ldr	r3, [pc, #320]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f003 030c 	and.w	r3, r3, #12
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d017      	beq.n	8007d6e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007d3e:	4b4d      	ldr	r3, [pc, #308]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f003 030c 	and.w	r3, r3, #12
        || \
 8007d46:	2b08      	cmp	r3, #8
 8007d48:	d105      	bne.n	8007d56 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00b      	beq.n	8007d6e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d56:	4b47      	ldr	r3, [pc, #284]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007d5e:	2b0c      	cmp	r3, #12
 8007d60:	d11c      	bne.n	8007d9c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d62:	4b44      	ldr	r3, [pc, #272]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d116      	bne.n	8007d9c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d6e:	4b41      	ldr	r3, [pc, #260]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d005      	beq.n	8007d86 <HAL_RCC_OscConfig+0x186>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d001      	beq.n	8007d86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e1d3      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d86:	4b3b      	ldr	r3, [pc, #236]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	4937      	ldr	r1, [pc, #220]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d9a:	e03a      	b.n	8007e12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d020      	beq.n	8007de6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007da4:	4b34      	ldr	r3, [pc, #208]	@ (8007e78 <HAL_RCC_OscConfig+0x278>)
 8007da6:	2201      	movs	r2, #1
 8007da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007daa:	f7fc fd8f 	bl	80048cc <HAL_GetTick>
 8007dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007db0:	e008      	b.n	8007dc4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007db2:	f7fc fd8b 	bl	80048cc <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d901      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e1b4      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0f0      	beq.n	8007db2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dd0:	4b28      	ldr	r3, [pc, #160]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	4925      	ldr	r1, [pc, #148]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	600b      	str	r3, [r1, #0]
 8007de4:	e015      	b.n	8007e12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007de6:	4b24      	ldr	r3, [pc, #144]	@ (8007e78 <HAL_RCC_OscConfig+0x278>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dec:	f7fc fd6e 	bl	80048cc <HAL_GetTick>
 8007df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007df4:	f7fc fd6a 	bl	80048cc <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e193      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e06:	4b1b      	ldr	r3, [pc, #108]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f0      	bne.n	8007df4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0308 	and.w	r3, r3, #8
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d036      	beq.n	8007e8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d016      	beq.n	8007e54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e26:	4b15      	ldr	r3, [pc, #84]	@ (8007e7c <HAL_RCC_OscConfig+0x27c>)
 8007e28:	2201      	movs	r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e2c:	f7fc fd4e 	bl	80048cc <HAL_GetTick>
 8007e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e32:	e008      	b.n	8007e46 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e34:	f7fc fd4a 	bl	80048cc <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d901      	bls.n	8007e46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e173      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e46:	4b0b      	ldr	r3, [pc, #44]	@ (8007e74 <HAL_RCC_OscConfig+0x274>)
 8007e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0f0      	beq.n	8007e34 <HAL_RCC_OscConfig+0x234>
 8007e52:	e01b      	b.n	8007e8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e54:	4b09      	ldr	r3, [pc, #36]	@ (8007e7c <HAL_RCC_OscConfig+0x27c>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e5a:	f7fc fd37 	bl	80048cc <HAL_GetTick>
 8007e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e60:	e00e      	b.n	8007e80 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e62:	f7fc fd33 	bl	80048cc <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d907      	bls.n	8007e80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e15c      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
 8007e74:	40023800 	.word	0x40023800
 8007e78:	42470000 	.word	0x42470000
 8007e7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e80:	4b8a      	ldr	r3, [pc, #552]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e84:	f003 0302 	and.w	r3, r3, #2
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1ea      	bne.n	8007e62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8097 	beq.w	8007fc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e9e:	4b83      	ldr	r3, [pc, #524]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10f      	bne.n	8007eca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60bb      	str	r3, [r7, #8]
 8007eae:	4b7f      	ldr	r3, [pc, #508]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007eba:	4b7c      	ldr	r3, [pc, #496]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ec2:	60bb      	str	r3, [r7, #8]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eca:	4b79      	ldr	r3, [pc, #484]	@ (80080b0 <HAL_RCC_OscConfig+0x4b0>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d118      	bne.n	8007f08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ed6:	4b76      	ldr	r3, [pc, #472]	@ (80080b0 <HAL_RCC_OscConfig+0x4b0>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a75      	ldr	r2, [pc, #468]	@ (80080b0 <HAL_RCC_OscConfig+0x4b0>)
 8007edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ee2:	f7fc fcf3 	bl	80048cc <HAL_GetTick>
 8007ee6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ee8:	e008      	b.n	8007efc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eea:	f7fc fcef 	bl	80048cc <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d901      	bls.n	8007efc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e118      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007efc:	4b6c      	ldr	r3, [pc, #432]	@ (80080b0 <HAL_RCC_OscConfig+0x4b0>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0f0      	beq.n	8007eea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d106      	bne.n	8007f1e <HAL_RCC_OscConfig+0x31e>
 8007f10:	4b66      	ldr	r3, [pc, #408]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f14:	4a65      	ldr	r2, [pc, #404]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007f16:	f043 0301 	orr.w	r3, r3, #1
 8007f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f1c:	e01c      	b.n	8007f58 <HAL_RCC_OscConfig+0x358>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	2b05      	cmp	r3, #5
 8007f24:	d10c      	bne.n	8007f40 <HAL_RCC_OscConfig+0x340>
 8007f26:	4b61      	ldr	r3, [pc, #388]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f2a:	4a60      	ldr	r2, [pc, #384]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007f2c:	f043 0304 	orr.w	r3, r3, #4
 8007f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f32:	4b5e      	ldr	r3, [pc, #376]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f36:	4a5d      	ldr	r2, [pc, #372]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007f38:	f043 0301 	orr.w	r3, r3, #1
 8007f3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f3e:	e00b      	b.n	8007f58 <HAL_RCC_OscConfig+0x358>
 8007f40:	4b5a      	ldr	r3, [pc, #360]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f44:	4a59      	ldr	r2, [pc, #356]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007f46:	f023 0301 	bic.w	r3, r3, #1
 8007f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f4c:	4b57      	ldr	r3, [pc, #348]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f50:	4a56      	ldr	r2, [pc, #344]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007f52:	f023 0304 	bic.w	r3, r3, #4
 8007f56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d015      	beq.n	8007f8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f60:	f7fc fcb4 	bl	80048cc <HAL_GetTick>
 8007f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f66:	e00a      	b.n	8007f7e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f68:	f7fc fcb0 	bl	80048cc <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d901      	bls.n	8007f7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e0d7      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0ee      	beq.n	8007f68 <HAL_RCC_OscConfig+0x368>
 8007f8a:	e014      	b.n	8007fb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f8c:	f7fc fc9e 	bl	80048cc <HAL_GetTick>
 8007f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f92:	e00a      	b.n	8007faa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f94:	f7fc fc9a 	bl	80048cc <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d901      	bls.n	8007faa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e0c1      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007faa:	4b40      	ldr	r3, [pc, #256]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1ee      	bne.n	8007f94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d105      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc0:	4a3a      	ldr	r2, [pc, #232]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007fc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 80ad 	beq.w	800812c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fd2:	4b36      	ldr	r3, [pc, #216]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 030c 	and.w	r3, r3, #12
 8007fda:	2b08      	cmp	r3, #8
 8007fdc:	d060      	beq.n	80080a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d145      	bne.n	8008072 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fe6:	4b33      	ldr	r3, [pc, #204]	@ (80080b4 <HAL_RCC_OscConfig+0x4b4>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fec:	f7fc fc6e 	bl	80048cc <HAL_GetTick>
 8007ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ff2:	e008      	b.n	8008006 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ff4:	f7fc fc6a 	bl	80048cc <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d901      	bls.n	8008006 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e093      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008006:	4b29      	ldr	r3, [pc, #164]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1f0      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69da      	ldr	r2, [r3, #28]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008020:	019b      	lsls	r3, r3, #6
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008028:	085b      	lsrs	r3, r3, #1
 800802a:	3b01      	subs	r3, #1
 800802c:	041b      	lsls	r3, r3, #16
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008034:	061b      	lsls	r3, r3, #24
 8008036:	431a      	orrs	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800803c:	071b      	lsls	r3, r3, #28
 800803e:	491b      	ldr	r1, [pc, #108]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8008040:	4313      	orrs	r3, r2
 8008042:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008044:	4b1b      	ldr	r3, [pc, #108]	@ (80080b4 <HAL_RCC_OscConfig+0x4b4>)
 8008046:	2201      	movs	r2, #1
 8008048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804a:	f7fc fc3f 	bl	80048cc <HAL_GetTick>
 800804e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008050:	e008      	b.n	8008064 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008052:	f7fc fc3b 	bl	80048cc <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b02      	cmp	r3, #2
 800805e:	d901      	bls.n	8008064 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e064      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008064:	4b11      	ldr	r3, [pc, #68]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0f0      	beq.n	8008052 <HAL_RCC_OscConfig+0x452>
 8008070:	e05c      	b.n	800812c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008072:	4b10      	ldr	r3, [pc, #64]	@ (80080b4 <HAL_RCC_OscConfig+0x4b4>)
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008078:	f7fc fc28 	bl	80048cc <HAL_GetTick>
 800807c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800807e:	e008      	b.n	8008092 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008080:	f7fc fc24 	bl	80048cc <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b02      	cmp	r3, #2
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e04d      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008092:	4b06      	ldr	r3, [pc, #24]	@ (80080ac <HAL_RCC_OscConfig+0x4ac>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1f0      	bne.n	8008080 <HAL_RCC_OscConfig+0x480>
 800809e:	e045      	b.n	800812c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d107      	bne.n	80080b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e040      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
 80080ac:	40023800 	.word	0x40023800
 80080b0:	40007000 	.word	0x40007000
 80080b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80080b8:	4b1f      	ldr	r3, [pc, #124]	@ (8008138 <HAL_RCC_OscConfig+0x538>)
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d030      	beq.n	8008128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d129      	bne.n	8008128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080de:	429a      	cmp	r2, r3
 80080e0:	d122      	bne.n	8008128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80080e8:	4013      	ands	r3, r2
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80080ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d119      	bne.n	8008128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080fe:	085b      	lsrs	r3, r3, #1
 8008100:	3b01      	subs	r3, #1
 8008102:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008104:	429a      	cmp	r2, r3
 8008106:	d10f      	bne.n	8008128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008112:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008114:	429a      	cmp	r2, r3
 8008116:	d107      	bne.n	8008128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008122:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008124:	429a      	cmp	r2, r3
 8008126:	d001      	beq.n	800812c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e000      	b.n	800812e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	40023800 	.word	0x40023800

0800813c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e07b      	b.n	8008246 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008152:	2b00      	cmp	r3, #0
 8008154:	d108      	bne.n	8008168 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800815e:	d009      	beq.n	8008174 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	61da      	str	r2, [r3, #28]
 8008166:	e005      	b.n	8008174 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d106      	bne.n	8008194 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7f9 fbec 	bl	800196c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80081bc:	431a      	orrs	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081e4:	431a      	orrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081ee:	431a      	orrs	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081f8:	ea42 0103 	orr.w	r1, r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008200:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	0c1b      	lsrs	r3, r3, #16
 8008212:	f003 0104 	and.w	r1, r3, #4
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821a:	f003 0210 	and.w	r2, r3, #16
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69da      	ldr	r2, [r3, #28]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008234:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b088      	sub	sp, #32
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	60b9      	str	r1, [r7, #8]
 8008258:	603b      	str	r3, [r7, #0]
 800825a:	4613      	mov	r3, r2
 800825c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800825e:	f7fc fb35 	bl	80048cc <HAL_GetTick>
 8008262:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008264:	88fb      	ldrh	r3, [r7, #6]
 8008266:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b01      	cmp	r3, #1
 8008272:	d001      	beq.n	8008278 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008274:	2302      	movs	r3, #2
 8008276:	e12a      	b.n	80084ce <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <HAL_SPI_Transmit+0x36>
 800827e:	88fb      	ldrh	r3, [r7, #6]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e122      	b.n	80084ce <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800828e:	2b01      	cmp	r3, #1
 8008290:	d101      	bne.n	8008296 <HAL_SPI_Transmit+0x48>
 8008292:	2302      	movs	r3, #2
 8008294:	e11b      	b.n	80084ce <HAL_SPI_Transmit+0x280>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2203      	movs	r2, #3
 80082a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	88fa      	ldrh	r2, [r7, #6]
 80082b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	88fa      	ldrh	r2, [r7, #6]
 80082bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082e4:	d10f      	bne.n	8008306 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008304:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008310:	2b40      	cmp	r3, #64	@ 0x40
 8008312:	d007      	beq.n	8008324 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008322:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800832c:	d152      	bne.n	80083d4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d002      	beq.n	800833c <HAL_SPI_Transmit+0xee>
 8008336:	8b7b      	ldrh	r3, [r7, #26]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d145      	bne.n	80083c8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008340:	881a      	ldrh	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800834c:	1c9a      	adds	r2, r3, #2
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008356:	b29b      	uxth	r3, r3
 8008358:	3b01      	subs	r3, #1
 800835a:	b29a      	uxth	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008360:	e032      	b.n	80083c8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	2b02      	cmp	r3, #2
 800836e:	d112      	bne.n	8008396 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008374:	881a      	ldrh	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008380:	1c9a      	adds	r2, r3, #2
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800838a:	b29b      	uxth	r3, r3
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008394:	e018      	b.n	80083c8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008396:	f7fc fa99 	bl	80048cc <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d803      	bhi.n	80083ae <HAL_SPI_Transmit+0x160>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083ac:	d102      	bne.n	80083b4 <HAL_SPI_Transmit+0x166>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d109      	bne.n	80083c8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e082      	b.n	80084ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1c7      	bne.n	8008362 <HAL_SPI_Transmit+0x114>
 80083d2:	e053      	b.n	800847c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <HAL_SPI_Transmit+0x194>
 80083dc:	8b7b      	ldrh	r3, [r7, #26]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d147      	bne.n	8008472 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	330c      	adds	r3, #12
 80083ec:	7812      	ldrb	r2, [r2, #0]
 80083ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f4:	1c5a      	adds	r2, r3, #1
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083fe:	b29b      	uxth	r3, r3
 8008400:	3b01      	subs	r3, #1
 8008402:	b29a      	uxth	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008408:	e033      	b.n	8008472 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f003 0302 	and.w	r3, r3, #2
 8008414:	2b02      	cmp	r3, #2
 8008416:	d113      	bne.n	8008440 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	330c      	adds	r3, #12
 8008422:	7812      	ldrb	r2, [r2, #0]
 8008424:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008434:	b29b      	uxth	r3, r3
 8008436:	3b01      	subs	r3, #1
 8008438:	b29a      	uxth	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800843e:	e018      	b.n	8008472 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008440:	f7fc fa44 	bl	80048cc <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	d803      	bhi.n	8008458 <HAL_SPI_Transmit+0x20a>
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008456:	d102      	bne.n	800845e <HAL_SPI_Transmit+0x210>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d109      	bne.n	8008472 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e02d      	b.n	80084ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008476:	b29b      	uxth	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1c6      	bne.n	800840a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800847c:	69fa      	ldr	r2, [r7, #28]
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 f8b1 	bl	80085e8 <SPI_EndRxTxTransaction>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2220      	movs	r2, #32
 8008490:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10a      	bne.n	80084b0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	617b      	str	r3, [r7, #20]
 80084ae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e000      	b.n	80084ce <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80084cc:	2300      	movs	r3, #0
  }
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3720      	adds	r7, #32
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	4613      	mov	r3, r2
 80084e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084e8:	f7fc f9f0 	bl	80048cc <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f0:	1a9b      	subs	r3, r3, r2
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	4413      	add	r3, r2
 80084f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80084f8:	f7fc f9e8 	bl	80048cc <HAL_GetTick>
 80084fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80084fe:	4b39      	ldr	r3, [pc, #228]	@ (80085e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	015b      	lsls	r3, r3, #5
 8008504:	0d1b      	lsrs	r3, r3, #20
 8008506:	69fa      	ldr	r2, [r7, #28]
 8008508:	fb02 f303 	mul.w	r3, r2, r3
 800850c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800850e:	e055      	b.n	80085bc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008516:	d051      	beq.n	80085bc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008518:	f7fc f9d8 	bl	80048cc <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	69fa      	ldr	r2, [r7, #28]
 8008524:	429a      	cmp	r2, r3
 8008526:	d902      	bls.n	800852e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d13d      	bne.n	80085aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800853c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008546:	d111      	bne.n	800856c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008550:	d004      	beq.n	800855c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800855a:	d107      	bne.n	800856c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800856a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008574:	d10f      	bne.n	8008596 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008594:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e018      	b.n	80085dc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d102      	bne.n	80085b6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	61fb      	str	r3, [r7, #28]
 80085b4:	e002      	b.n	80085bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689a      	ldr	r2, [r3, #8]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4013      	ands	r3, r2
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	bf0c      	ite	eq
 80085cc:	2301      	moveq	r3, #1
 80085ce:	2300      	movne	r3, #0
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	461a      	mov	r2, r3
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d19a      	bne.n	8008510 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3720      	adds	r7, #32
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20000004 	.word	0x20000004

080085e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2201      	movs	r2, #1
 80085fc:	2102      	movs	r1, #2
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f7ff ff6a 	bl	80084d8 <SPI_WaitFlagStateUntilTimeout>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d007      	beq.n	800861a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800860e:	f043 0220 	orr.w	r2, r3, #32
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e032      	b.n	8008680 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800861a:	4b1b      	ldr	r3, [pc, #108]	@ (8008688 <SPI_EndRxTxTransaction+0xa0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a1b      	ldr	r2, [pc, #108]	@ (800868c <SPI_EndRxTxTransaction+0xa4>)
 8008620:	fba2 2303 	umull	r2, r3, r2, r3
 8008624:	0d5b      	lsrs	r3, r3, #21
 8008626:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800862a:	fb02 f303 	mul.w	r3, r2, r3
 800862e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008638:	d112      	bne.n	8008660 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2200      	movs	r2, #0
 8008642:	2180      	movs	r1, #128	@ 0x80
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f7ff ff47 	bl	80084d8 <SPI_WaitFlagStateUntilTimeout>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d016      	beq.n	800867e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008654:	f043 0220 	orr.w	r2, r3, #32
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e00f      	b.n	8008680 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	3b01      	subs	r3, #1
 800866a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008676:	2b80      	cmp	r3, #128	@ 0x80
 8008678:	d0f2      	beq.n	8008660 <SPI_EndRxTxTransaction+0x78>
 800867a:	e000      	b.n	800867e <SPI_EndRxTxTransaction+0x96>
        break;
 800867c:	bf00      	nop
  }

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	20000004 	.word	0x20000004
 800868c:	165e9f81 	.word	0x165e9f81

08008690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e041      	b.n	8008726 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d106      	bne.n	80086bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7f9 fdc8 	bl	800224c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2202      	movs	r2, #2
 80086c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3304      	adds	r3, #4
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f000 fcc4 	bl	800905c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b01      	cmp	r3, #1
 8008742:	d001      	beq.n	8008748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e04e      	b.n	80087e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f042 0201 	orr.w	r2, r2, #1
 800875e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a23      	ldr	r2, [pc, #140]	@ (80087f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d022      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0x80>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008772:	d01d      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0x80>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a1f      	ldr	r2, [pc, #124]	@ (80087f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d018      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0x80>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a1e      	ldr	r2, [pc, #120]	@ (80087fc <HAL_TIM_Base_Start_IT+0xcc>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d013      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0x80>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a1c      	ldr	r2, [pc, #112]	@ (8008800 <HAL_TIM_Base_Start_IT+0xd0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00e      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0x80>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a1b      	ldr	r2, [pc, #108]	@ (8008804 <HAL_TIM_Base_Start_IT+0xd4>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d009      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0x80>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a19      	ldr	r2, [pc, #100]	@ (8008808 <HAL_TIM_Base_Start_IT+0xd8>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d004      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0x80>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a18      	ldr	r2, [pc, #96]	@ (800880c <HAL_TIM_Base_Start_IT+0xdc>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d111      	bne.n	80087d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f003 0307 	and.w	r3, r3, #7
 80087ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b06      	cmp	r3, #6
 80087c0:	d010      	beq.n	80087e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f042 0201 	orr.w	r2, r2, #1
 80087d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d2:	e007      	b.n	80087e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f042 0201 	orr.w	r2, r2, #1
 80087e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	40010000 	.word	0x40010000
 80087f8:	40000400 	.word	0x40000400
 80087fc:	40000800 	.word	0x40000800
 8008800:	40000c00 	.word	0x40000c00
 8008804:	40010400 	.word	0x40010400
 8008808:	40014000 	.word	0x40014000
 800880c:	40001800 	.word	0x40001800

08008810 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e041      	b.n	80088a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d106      	bne.n	800883c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7f9 fc54 	bl	80020e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3304      	adds	r3, #4
 800884c:	4619      	mov	r1, r3
 800884e:	4610      	mov	r0, r2
 8008850:	f000 fc04 	bl	800905c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d109      	bne.n	80088d4 <HAL_TIM_PWM_Start+0x24>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	bf14      	ite	ne
 80088cc:	2301      	movne	r3, #1
 80088ce:	2300      	moveq	r3, #0
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	e022      	b.n	800891a <HAL_TIM_PWM_Start+0x6a>
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d109      	bne.n	80088ee <HAL_TIM_PWM_Start+0x3e>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	bf14      	ite	ne
 80088e6:	2301      	movne	r3, #1
 80088e8:	2300      	moveq	r3, #0
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	e015      	b.n	800891a <HAL_TIM_PWM_Start+0x6a>
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d109      	bne.n	8008908 <HAL_TIM_PWM_Start+0x58>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	bf14      	ite	ne
 8008900:	2301      	movne	r3, #1
 8008902:	2300      	moveq	r3, #0
 8008904:	b2db      	uxtb	r3, r3
 8008906:	e008      	b.n	800891a <HAL_TIM_PWM_Start+0x6a>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b01      	cmp	r3, #1
 8008912:	bf14      	ite	ne
 8008914:	2301      	movne	r3, #1
 8008916:	2300      	moveq	r3, #0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e07c      	b.n	8008a1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d104      	bne.n	8008932 <HAL_TIM_PWM_Start+0x82>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2202      	movs	r2, #2
 800892c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008930:	e013      	b.n	800895a <HAL_TIM_PWM_Start+0xaa>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b04      	cmp	r3, #4
 8008936:	d104      	bne.n	8008942 <HAL_TIM_PWM_Start+0x92>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008940:	e00b      	b.n	800895a <HAL_TIM_PWM_Start+0xaa>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b08      	cmp	r3, #8
 8008946:	d104      	bne.n	8008952 <HAL_TIM_PWM_Start+0xa2>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008950:	e003      	b.n	800895a <HAL_TIM_PWM_Start+0xaa>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2202      	movs	r2, #2
 8008956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2201      	movs	r2, #1
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fdd0 	bl	8009508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a2d      	ldr	r2, [pc, #180]	@ (8008a24 <HAL_TIM_PWM_Start+0x174>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d004      	beq.n	800897c <HAL_TIM_PWM_Start+0xcc>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a2c      	ldr	r2, [pc, #176]	@ (8008a28 <HAL_TIM_PWM_Start+0x178>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d101      	bne.n	8008980 <HAL_TIM_PWM_Start+0xd0>
 800897c:	2301      	movs	r3, #1
 800897e:	e000      	b.n	8008982 <HAL_TIM_PWM_Start+0xd2>
 8008980:	2300      	movs	r3, #0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008994:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a22      	ldr	r2, [pc, #136]	@ (8008a24 <HAL_TIM_PWM_Start+0x174>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d022      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x136>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089a8:	d01d      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x136>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a1f      	ldr	r2, [pc, #124]	@ (8008a2c <HAL_TIM_PWM_Start+0x17c>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d018      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x136>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008a30 <HAL_TIM_PWM_Start+0x180>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d013      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x136>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a1c      	ldr	r2, [pc, #112]	@ (8008a34 <HAL_TIM_PWM_Start+0x184>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00e      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x136>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a16      	ldr	r2, [pc, #88]	@ (8008a28 <HAL_TIM_PWM_Start+0x178>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d009      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x136>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a18      	ldr	r2, [pc, #96]	@ (8008a38 <HAL_TIM_PWM_Start+0x188>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d004      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x136>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a16      	ldr	r2, [pc, #88]	@ (8008a3c <HAL_TIM_PWM_Start+0x18c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d111      	bne.n	8008a0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	f003 0307 	and.w	r3, r3, #7
 80089f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b06      	cmp	r3, #6
 80089f6:	d010      	beq.n	8008a1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0201 	orr.w	r2, r2, #1
 8008a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a08:	e007      	b.n	8008a1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f042 0201 	orr.w	r2, r2, #1
 8008a18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	40010000 	.word	0x40010000
 8008a28:	40010400 	.word	0x40010400
 8008a2c:	40000400 	.word	0x40000400
 8008a30:	40000800 	.word	0x40000800
 8008a34:	40000c00 	.word	0x40000c00
 8008a38:	40014000 	.word	0x40014000
 8008a3c:	40001800 	.word	0x40001800

08008a40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e097      	b.n	8008b84 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7f9 fb71 	bl	8002150 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2202      	movs	r2, #2
 8008a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	6812      	ldr	r2, [r2, #0]
 8008a80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a84:	f023 0307 	bic.w	r3, r3, #7
 8008a88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	3304      	adds	r3, #4
 8008a92:	4619      	mov	r1, r3
 8008a94:	4610      	mov	r0, r2
 8008a96:	f000 fae1 	bl	800905c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ac2:	f023 0303 	bic.w	r3, r3, #3
 8008ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	689a      	ldr	r2, [r3, #8]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008ae0:	f023 030c 	bic.w	r3, r3, #12
 8008ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008aec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	021b      	lsls	r3, r3, #8
 8008afc:	4313      	orrs	r3, r2
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	011a      	lsls	r2, r3, #4
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	031b      	lsls	r3, r3, #12
 8008b10:	4313      	orrs	r3, r2
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008b1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008b26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	4313      	orrs	r3, r2
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008b9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ba4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008bb4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d110      	bne.n	8008bde <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d102      	bne.n	8008bc8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bc2:	7b7b      	ldrb	r3, [r7, #13]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d001      	beq.n	8008bcc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e069      	b.n	8008ca0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bdc:	e031      	b.n	8008c42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b04      	cmp	r3, #4
 8008be2:	d110      	bne.n	8008c06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d102      	bne.n	8008bf0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bea:	7b3b      	ldrb	r3, [r7, #12]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d001      	beq.n	8008bf4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e055      	b.n	8008ca0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c04:	e01d      	b.n	8008c42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d108      	bne.n	8008c1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d105      	bne.n	8008c1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c12:	7b7b      	ldrb	r3, [r7, #13]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d102      	bne.n	8008c1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c18:	7b3b      	ldrb	r3, [r7, #12]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d001      	beq.n	8008c22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e03e      	b.n	8008ca0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2202      	movs	r2, #2
 8008c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2202      	movs	r2, #2
 8008c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <HAL_TIM_Encoder_Start+0xc4>
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d008      	beq.n	8008c60 <HAL_TIM_Encoder_Start+0xd4>
 8008c4e:	e00f      	b.n	8008c70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2201      	movs	r2, #1
 8008c56:	2100      	movs	r1, #0
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 fc55 	bl	8009508 <TIM_CCxChannelCmd>
      break;
 8008c5e:	e016      	b.n	8008c8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2201      	movs	r2, #1
 8008c66:	2104      	movs	r1, #4
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fc4d 	bl	8009508 <TIM_CCxChannelCmd>
      break;
 8008c6e:	e00e      	b.n	8008c8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2201      	movs	r2, #1
 8008c76:	2100      	movs	r1, #0
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fc45 	bl	8009508 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2201      	movs	r2, #1
 8008c84:	2104      	movs	r1, #4
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 fc3e 	bl	8009508 <TIM_CCxChannelCmd>
      break;
 8008c8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f042 0201 	orr.w	r2, r2, #1
 8008c9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f003 0302 	and.w	r3, r3, #2
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d020      	beq.n	8008d0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d01b      	beq.n	8008d0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f06f 0202 	mvn.w	r2, #2
 8008cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f994 	bl	8009020 <HAL_TIM_IC_CaptureCallback>
 8008cf8:	e005      	b.n	8008d06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f986 	bl	800900c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f997 	bl	8009034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	f003 0304 	and.w	r3, r3, #4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d020      	beq.n	8008d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d01b      	beq.n	8008d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f06f 0204 	mvn.w	r2, #4
 8008d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f96e 	bl	8009020 <HAL_TIM_IC_CaptureCallback>
 8008d44:	e005      	b.n	8008d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f960 	bl	800900c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f971 	bl	8009034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f003 0308 	and.w	r3, r3, #8
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d020      	beq.n	8008da4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f003 0308 	and.w	r3, r3, #8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01b      	beq.n	8008da4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f06f 0208 	mvn.w	r2, #8
 8008d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2204      	movs	r2, #4
 8008d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	f003 0303 	and.w	r3, r3, #3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f948 	bl	8009020 <HAL_TIM_IC_CaptureCallback>
 8008d90:	e005      	b.n	8008d9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f93a 	bl	800900c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f94b 	bl	8009034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f003 0310 	and.w	r3, r3, #16
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d020      	beq.n	8008df0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f003 0310 	and.w	r3, r3, #16
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d01b      	beq.n	8008df0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f06f 0210 	mvn.w	r2, #16
 8008dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f922 	bl	8009020 <HAL_TIM_IC_CaptureCallback>
 8008ddc:	e005      	b.n	8008dea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f914 	bl	800900c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f925 	bl	8009034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00c      	beq.n	8008e14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d007      	beq.n	8008e14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f06f 0201 	mvn.w	r2, #1
 8008e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7f8 fcbe 	bl	8001790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00c      	beq.n	8008e38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d007      	beq.n	8008e38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fc14 	bl	8009660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00c      	beq.n	8008e5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d007      	beq.n	8008e5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f8f6 	bl	8009048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f003 0320 	and.w	r3, r3, #32
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00c      	beq.n	8008e80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f003 0320 	and.w	r3, r3, #32
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d007      	beq.n	8008e80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f06f 0220 	mvn.w	r2, #32
 8008e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fbe6 	bl	800964c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e80:	bf00      	nop
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d101      	bne.n	8008ea6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e0ae      	b.n	8009004 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b0c      	cmp	r3, #12
 8008eb2:	f200 809f 	bhi.w	8008ff4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ebc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebc:	08008ef1 	.word	0x08008ef1
 8008ec0:	08008ff5 	.word	0x08008ff5
 8008ec4:	08008ff5 	.word	0x08008ff5
 8008ec8:	08008ff5 	.word	0x08008ff5
 8008ecc:	08008f31 	.word	0x08008f31
 8008ed0:	08008ff5 	.word	0x08008ff5
 8008ed4:	08008ff5 	.word	0x08008ff5
 8008ed8:	08008ff5 	.word	0x08008ff5
 8008edc:	08008f73 	.word	0x08008f73
 8008ee0:	08008ff5 	.word	0x08008ff5
 8008ee4:	08008ff5 	.word	0x08008ff5
 8008ee8:	08008ff5 	.word	0x08008ff5
 8008eec:	08008fb3 	.word	0x08008fb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68b9      	ldr	r1, [r7, #8]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 f956 	bl	80091a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	699a      	ldr	r2, [r3, #24]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f042 0208 	orr.w	r2, r2, #8
 8008f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	699a      	ldr	r2, [r3, #24]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 0204 	bic.w	r2, r2, #4
 8008f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6999      	ldr	r1, [r3, #24]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	691a      	ldr	r2, [r3, #16]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	619a      	str	r2, [r3, #24]
      break;
 8008f2e:	e064      	b.n	8008ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68b9      	ldr	r1, [r7, #8]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 f9a6 	bl	8009288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	699a      	ldr	r2, [r3, #24]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	699a      	ldr	r2, [r3, #24]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6999      	ldr	r1, [r3, #24]
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	021a      	lsls	r2, r3, #8
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	619a      	str	r2, [r3, #24]
      break;
 8008f70:	e043      	b.n	8008ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68b9      	ldr	r1, [r7, #8]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 f9fb 	bl	8009374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69da      	ldr	r2, [r3, #28]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f042 0208 	orr.w	r2, r2, #8
 8008f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	69da      	ldr	r2, [r3, #28]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 0204 	bic.w	r2, r2, #4
 8008f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	69d9      	ldr	r1, [r3, #28]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	691a      	ldr	r2, [r3, #16]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	61da      	str	r2, [r3, #28]
      break;
 8008fb0:	e023      	b.n	8008ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 fa4f 	bl	800945c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	69da      	ldr	r2, [r3, #28]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	69da      	ldr	r2, [r3, #28]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	69d9      	ldr	r1, [r3, #28]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	021a      	lsls	r2, r3, #8
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	61da      	str	r2, [r3, #28]
      break;
 8008ff2:	e002      	b.n	8008ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ff8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009002:	7dfb      	ldrb	r3, [r7, #23]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a43      	ldr	r2, [pc, #268]	@ (800917c <TIM_Base_SetConfig+0x120>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d013      	beq.n	800909c <TIM_Base_SetConfig+0x40>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800907a:	d00f      	beq.n	800909c <TIM_Base_SetConfig+0x40>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a40      	ldr	r2, [pc, #256]	@ (8009180 <TIM_Base_SetConfig+0x124>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d00b      	beq.n	800909c <TIM_Base_SetConfig+0x40>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a3f      	ldr	r2, [pc, #252]	@ (8009184 <TIM_Base_SetConfig+0x128>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d007      	beq.n	800909c <TIM_Base_SetConfig+0x40>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a3e      	ldr	r2, [pc, #248]	@ (8009188 <TIM_Base_SetConfig+0x12c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d003      	beq.n	800909c <TIM_Base_SetConfig+0x40>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a3d      	ldr	r2, [pc, #244]	@ (800918c <TIM_Base_SetConfig+0x130>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d108      	bne.n	80090ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a32      	ldr	r2, [pc, #200]	@ (800917c <TIM_Base_SetConfig+0x120>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d02b      	beq.n	800910e <TIM_Base_SetConfig+0xb2>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090bc:	d027      	beq.n	800910e <TIM_Base_SetConfig+0xb2>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a2f      	ldr	r2, [pc, #188]	@ (8009180 <TIM_Base_SetConfig+0x124>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d023      	beq.n	800910e <TIM_Base_SetConfig+0xb2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a2e      	ldr	r2, [pc, #184]	@ (8009184 <TIM_Base_SetConfig+0x128>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d01f      	beq.n	800910e <TIM_Base_SetConfig+0xb2>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a2d      	ldr	r2, [pc, #180]	@ (8009188 <TIM_Base_SetConfig+0x12c>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d01b      	beq.n	800910e <TIM_Base_SetConfig+0xb2>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a2c      	ldr	r2, [pc, #176]	@ (800918c <TIM_Base_SetConfig+0x130>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d017      	beq.n	800910e <TIM_Base_SetConfig+0xb2>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a2b      	ldr	r2, [pc, #172]	@ (8009190 <TIM_Base_SetConfig+0x134>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d013      	beq.n	800910e <TIM_Base_SetConfig+0xb2>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a2a      	ldr	r2, [pc, #168]	@ (8009194 <TIM_Base_SetConfig+0x138>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d00f      	beq.n	800910e <TIM_Base_SetConfig+0xb2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a29      	ldr	r2, [pc, #164]	@ (8009198 <TIM_Base_SetConfig+0x13c>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d00b      	beq.n	800910e <TIM_Base_SetConfig+0xb2>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a28      	ldr	r2, [pc, #160]	@ (800919c <TIM_Base_SetConfig+0x140>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d007      	beq.n	800910e <TIM_Base_SetConfig+0xb2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a27      	ldr	r2, [pc, #156]	@ (80091a0 <TIM_Base_SetConfig+0x144>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d003      	beq.n	800910e <TIM_Base_SetConfig+0xb2>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a26      	ldr	r2, [pc, #152]	@ (80091a4 <TIM_Base_SetConfig+0x148>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d108      	bne.n	8009120 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	4313      	orrs	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a0e      	ldr	r2, [pc, #56]	@ (800917c <TIM_Base_SetConfig+0x120>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d003      	beq.n	800914e <TIM_Base_SetConfig+0xf2>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a10      	ldr	r2, [pc, #64]	@ (800918c <TIM_Base_SetConfig+0x130>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d103      	bne.n	8009156 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	691a      	ldr	r2, [r3, #16]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f043 0204 	orr.w	r2, r3, #4
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2201      	movs	r2, #1
 8009166:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	601a      	str	r2, [r3, #0]
}
 800916e:	bf00      	nop
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	40010000 	.word	0x40010000
 8009180:	40000400 	.word	0x40000400
 8009184:	40000800 	.word	0x40000800
 8009188:	40000c00 	.word	0x40000c00
 800918c:	40010400 	.word	0x40010400
 8009190:	40014000 	.word	0x40014000
 8009194:	40014400 	.word	0x40014400
 8009198:	40014800 	.word	0x40014800
 800919c:	40001800 	.word	0x40001800
 80091a0:	40001c00 	.word	0x40001c00
 80091a4:	40002000 	.word	0x40002000

080091a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	f023 0201 	bic.w	r2, r3, #1
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f023 0303 	bic.w	r3, r3, #3
 80091de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f023 0302 	bic.w	r3, r3, #2
 80091f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a20      	ldr	r2, [pc, #128]	@ (8009280 <TIM_OC1_SetConfig+0xd8>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d003      	beq.n	800920c <TIM_OC1_SetConfig+0x64>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a1f      	ldr	r2, [pc, #124]	@ (8009284 <TIM_OC1_SetConfig+0xdc>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d10c      	bne.n	8009226 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f023 0308 	bic.w	r3, r3, #8
 8009212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	4313      	orrs	r3, r2
 800921c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f023 0304 	bic.w	r3, r3, #4
 8009224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a15      	ldr	r2, [pc, #84]	@ (8009280 <TIM_OC1_SetConfig+0xd8>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d003      	beq.n	8009236 <TIM_OC1_SetConfig+0x8e>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a14      	ldr	r2, [pc, #80]	@ (8009284 <TIM_OC1_SetConfig+0xdc>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d111      	bne.n	800925a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800923c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	4313      	orrs	r3, r2
 800924e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	4313      	orrs	r3, r2
 8009258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	621a      	str	r2, [r3, #32]
}
 8009274:	bf00      	nop
 8009276:	371c      	adds	r7, #28
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	40010000 	.word	0x40010000
 8009284:	40010400 	.word	0x40010400

08009288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	f023 0210 	bic.w	r2, r3, #16
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	021b      	lsls	r3, r3, #8
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f023 0320 	bic.w	r3, r3, #32
 80092d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	011b      	lsls	r3, r3, #4
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	4313      	orrs	r3, r2
 80092de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a22      	ldr	r2, [pc, #136]	@ (800936c <TIM_OC2_SetConfig+0xe4>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d003      	beq.n	80092f0 <TIM_OC2_SetConfig+0x68>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a21      	ldr	r2, [pc, #132]	@ (8009370 <TIM_OC2_SetConfig+0xe8>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d10d      	bne.n	800930c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	011b      	lsls	r3, r3, #4
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	4313      	orrs	r3, r2
 8009302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800930a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a17      	ldr	r2, [pc, #92]	@ (800936c <TIM_OC2_SetConfig+0xe4>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d003      	beq.n	800931c <TIM_OC2_SetConfig+0x94>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a16      	ldr	r2, [pc, #88]	@ (8009370 <TIM_OC2_SetConfig+0xe8>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d113      	bne.n	8009344 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800932a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	4313      	orrs	r3, r2
 8009342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	621a      	str	r2, [r3, #32]
}
 800935e:	bf00      	nop
 8009360:	371c      	adds	r7, #28
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	40010000 	.word	0x40010000
 8009370:	40010400 	.word	0x40010400

08009374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f023 0303 	bic.w	r3, r3, #3
 80093aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	021b      	lsls	r3, r3, #8
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a21      	ldr	r2, [pc, #132]	@ (8009454 <TIM_OC3_SetConfig+0xe0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d003      	beq.n	80093da <TIM_OC3_SetConfig+0x66>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a20      	ldr	r2, [pc, #128]	@ (8009458 <TIM_OC3_SetConfig+0xe4>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d10d      	bne.n	80093f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	021b      	lsls	r3, r3, #8
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80093f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a16      	ldr	r2, [pc, #88]	@ (8009454 <TIM_OC3_SetConfig+0xe0>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d003      	beq.n	8009406 <TIM_OC3_SetConfig+0x92>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a15      	ldr	r2, [pc, #84]	@ (8009458 <TIM_OC3_SetConfig+0xe4>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d113      	bne.n	800942e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800940c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	011b      	lsls	r3, r3, #4
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	4313      	orrs	r3, r2
 8009420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	011b      	lsls	r3, r3, #4
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	4313      	orrs	r3, r2
 800942c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	621a      	str	r2, [r3, #32]
}
 8009448:	bf00      	nop
 800944a:	371c      	adds	r7, #28
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr
 8009454:	40010000 	.word	0x40010000
 8009458:	40010400 	.word	0x40010400

0800945c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800945c:	b480      	push	{r7}
 800945e:	b087      	sub	sp, #28
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a1b      	ldr	r3, [r3, #32]
 8009470:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800948a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	021b      	lsls	r3, r3, #8
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	4313      	orrs	r3, r2
 800949e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	031b      	lsls	r3, r3, #12
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a12      	ldr	r2, [pc, #72]	@ (8009500 <TIM_OC4_SetConfig+0xa4>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d003      	beq.n	80094c4 <TIM_OC4_SetConfig+0x68>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a11      	ldr	r2, [pc, #68]	@ (8009504 <TIM_OC4_SetConfig+0xa8>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d109      	bne.n	80094d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	019b      	lsls	r3, r3, #6
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	685a      	ldr	r2, [r3, #4]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	621a      	str	r2, [r3, #32]
}
 80094f2:	bf00      	nop
 80094f4:	371c      	adds	r7, #28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	40010000 	.word	0x40010000
 8009504:	40010400 	.word	0x40010400

08009508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	f003 031f 	and.w	r3, r3, #31
 800951a:	2201      	movs	r2, #1
 800951c:	fa02 f303 	lsl.w	r3, r2, r3
 8009520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6a1a      	ldr	r2, [r3, #32]
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	43db      	mvns	r3, r3
 800952a:	401a      	ands	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6a1a      	ldr	r2, [r3, #32]
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f003 031f 	and.w	r3, r3, #31
 800953a:	6879      	ldr	r1, [r7, #4]
 800953c:	fa01 f303 	lsl.w	r3, r1, r3
 8009540:	431a      	orrs	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	621a      	str	r2, [r3, #32]
}
 8009546:	bf00      	nop
 8009548:	371c      	adds	r7, #28
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
	...

08009554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009564:	2b01      	cmp	r3, #1
 8009566:	d101      	bne.n	800956c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009568:	2302      	movs	r3, #2
 800956a:	e05a      	b.n	8009622 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2202      	movs	r2, #2
 8009578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	4313      	orrs	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a21      	ldr	r2, [pc, #132]	@ (8009630 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d022      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095b8:	d01d      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a1d      	ldr	r2, [pc, #116]	@ (8009634 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d018      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a1b      	ldr	r2, [pc, #108]	@ (8009638 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d013      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a1a      	ldr	r2, [pc, #104]	@ (800963c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d00e      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a18      	ldr	r2, [pc, #96]	@ (8009640 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d009      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a17      	ldr	r2, [pc, #92]	@ (8009644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d004      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a15      	ldr	r2, [pc, #84]	@ (8009648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d10c      	bne.n	8009610 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	4313      	orrs	r3, r2
 8009606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	40010000 	.word	0x40010000
 8009634:	40000400 	.word	0x40000400
 8009638:	40000800 	.word	0x40000800
 800963c:	40000c00 	.word	0x40000c00
 8009640:	40010400 	.word	0x40010400
 8009644:	40014000 	.word	0x40014000
 8009648:	40001800 	.word	0x40001800

0800964c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e042      	b.n	800970c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d106      	bne.n	80096a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7f8 feec 	bl	8002478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2224      	movs	r2, #36	@ 0x24
 80096a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68da      	ldr	r2, [r3, #12]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80096b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fcef 	bl	800a09c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	691a      	ldr	r2, [r3, #16]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80096cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	695a      	ldr	r2, [r3, #20]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80096dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68da      	ldr	r2, [r3, #12]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80096ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2220      	movs	r2, #32
 80096f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2220      	movs	r2, #32
 8009700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	4613      	mov	r3, r2
 8009720:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b20      	cmp	r3, #32
 800972c:	d112      	bne.n	8009754 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <HAL_UART_Receive_IT+0x26>
 8009734:	88fb      	ldrh	r3, [r7, #6]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d101      	bne.n	800973e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e00b      	b.n	8009756 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009744:	88fb      	ldrh	r3, [r7, #6]
 8009746:	461a      	mov	r2, r3
 8009748:	68b9      	ldr	r1, [r7, #8]
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f000 fad2 	bl	8009cf4 <UART_Start_Receive_IT>
 8009750:	4603      	mov	r3, r0
 8009752:	e000      	b.n	8009756 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009754:	2302      	movs	r3, #2
  }
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
	...

08009760 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b0ba      	sub	sp, #232	@ 0xe8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009786:	2300      	movs	r3, #0
 8009788:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800978c:	2300      	movs	r3, #0
 800978e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009796:	f003 030f 	and.w	r3, r3, #15
 800979a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800979e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10f      	bne.n	80097c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d009      	beq.n	80097c6 <HAL_UART_IRQHandler+0x66>
 80097b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097b6:	f003 0320 	and.w	r3, r3, #32
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fbae 	bl	8009f20 <UART_Receive_IT>
      return;
 80097c4:	e273      	b.n	8009cae <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80097c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 80de 	beq.w	800998c <HAL_UART_IRQHandler+0x22c>
 80097d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d106      	bne.n	80097ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80097dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 80d1 	beq.w	800998c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80097ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00b      	beq.n	800980e <HAL_UART_IRQHandler+0xae>
 80097f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d005      	beq.n	800980e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009806:	f043 0201 	orr.w	r2, r3, #1
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800980e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009812:	f003 0304 	and.w	r3, r3, #4
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00b      	beq.n	8009832 <HAL_UART_IRQHandler+0xd2>
 800981a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	d005      	beq.n	8009832 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800982a:	f043 0202 	orr.w	r2, r3, #2
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009836:	f003 0302 	and.w	r3, r3, #2
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00b      	beq.n	8009856 <HAL_UART_IRQHandler+0xf6>
 800983e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d005      	beq.n	8009856 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800984e:	f043 0204 	orr.w	r2, r3, #4
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800985a:	f003 0308 	and.w	r3, r3, #8
 800985e:	2b00      	cmp	r3, #0
 8009860:	d011      	beq.n	8009886 <HAL_UART_IRQHandler+0x126>
 8009862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009866:	f003 0320 	and.w	r3, r3, #32
 800986a:	2b00      	cmp	r3, #0
 800986c:	d105      	bne.n	800987a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800986e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d005      	beq.n	8009886 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800987e:	f043 0208 	orr.w	r2, r3, #8
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 820a 	beq.w	8009ca4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009894:	f003 0320 	and.w	r3, r3, #32
 8009898:	2b00      	cmp	r3, #0
 800989a:	d008      	beq.n	80098ae <HAL_UART_IRQHandler+0x14e>
 800989c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098a0:	f003 0320 	and.w	r3, r3, #32
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fb39 	bl	8009f20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b8:	2b40      	cmp	r3, #64	@ 0x40
 80098ba:	bf0c      	ite	eq
 80098bc:	2301      	moveq	r3, #1
 80098be:	2300      	movne	r3, #0
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ca:	f003 0308 	and.w	r3, r3, #8
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d103      	bne.n	80098da <HAL_UART_IRQHandler+0x17a>
 80098d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d04f      	beq.n	800997a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa44 	bl	8009d68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ea:	2b40      	cmp	r3, #64	@ 0x40
 80098ec:	d141      	bne.n	8009972 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3314      	adds	r3, #20
 80098f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098fc:	e853 3f00 	ldrex	r3, [r3]
 8009900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009904:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009908:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800990c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3314      	adds	r3, #20
 8009916:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800991a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800991e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009922:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009926:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800992a:	e841 2300 	strex	r3, r2, [r1]
 800992e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1d9      	bne.n	80098ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d013      	beq.n	800996a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009946:	4a8a      	ldr	r2, [pc, #552]	@ (8009b70 <HAL_UART_IRQHandler+0x410>)
 8009948:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800994e:	4618      	mov	r0, r3
 8009950:	f7fb fe84 	bl	800565c <HAL_DMA_Abort_IT>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d016      	beq.n	8009988 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800995e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009964:	4610      	mov	r0, r2
 8009966:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009968:	e00e      	b.n	8009988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f9ac 	bl	8009cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009970:	e00a      	b.n	8009988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f9a8 	bl	8009cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009978:	e006      	b.n	8009988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f9a4 	bl	8009cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009986:	e18d      	b.n	8009ca4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009988:	bf00      	nop
    return;
 800998a:	e18b      	b.n	8009ca4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009990:	2b01      	cmp	r3, #1
 8009992:	f040 8167 	bne.w	8009c64 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800999a:	f003 0310 	and.w	r3, r3, #16
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f000 8160 	beq.w	8009c64 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80099a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099a8:	f003 0310 	and.w	r3, r3, #16
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 8159 	beq.w	8009c64 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80099b2:	2300      	movs	r3, #0
 80099b4:	60bb      	str	r3, [r7, #8]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	60bb      	str	r3, [r7, #8]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	60bb      	str	r3, [r7, #8]
 80099c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099d2:	2b40      	cmp	r3, #64	@ 0x40
 80099d4:	f040 80ce 	bne.w	8009b74 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 80a9 	beq.w	8009b40 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80099f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099f6:	429a      	cmp	r2, r3
 80099f8:	f080 80a2 	bcs.w	8009b40 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a08:	69db      	ldr	r3, [r3, #28]
 8009a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a0e:	f000 8088 	beq.w	8009b22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	330c      	adds	r3, #12
 8009a18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	330c      	adds	r3, #12
 8009a3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009a3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a4e:	e841 2300 	strex	r3, r2, [r1]
 8009a52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1d9      	bne.n	8009a12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3314      	adds	r3, #20
 8009a64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a70:	f023 0301 	bic.w	r3, r3, #1
 8009a74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3314      	adds	r3, #20
 8009a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e1      	bne.n	8009a5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3314      	adds	r3, #20
 8009aa0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009aa4:	e853 3f00 	ldrex	r3, [r3]
 8009aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009aac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3314      	adds	r3, #20
 8009aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009abe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009ac4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009ac6:	e841 2300 	strex	r3, r2, [r1]
 8009aca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009acc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e3      	bne.n	8009a9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	330c      	adds	r3, #12
 8009ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aea:	e853 3f00 	ldrex	r3, [r3]
 8009aee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009af2:	f023 0310 	bic.w	r3, r3, #16
 8009af6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	330c      	adds	r3, #12
 8009b00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009b04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009b06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b0c:	e841 2300 	strex	r3, r2, [r1]
 8009b10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e3      	bne.n	8009ae0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fb fd2d 	bl	800557c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2202      	movs	r2, #2
 8009b26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f8cf 	bl	8009cdc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009b3e:	e0b3      	b.n	8009ca8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	f040 80ad 	bne.w	8009ca8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b58:	f040 80a6 	bne.w	8009ca8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2202      	movs	r2, #2
 8009b60:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f8b7 	bl	8009cdc <HAL_UARTEx_RxEventCallback>
      return;
 8009b6e:	e09b      	b.n	8009ca8 <HAL_UART_IRQHandler+0x548>
 8009b70:	08009e2f 	.word	0x08009e2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 808e 	beq.w	8009cac <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009b90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 8089 	beq.w	8009cac <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	330c      	adds	r3, #12
 8009ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba4:	e853 3f00 	ldrex	r3, [r3]
 8009ba8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	330c      	adds	r3, #12
 8009bba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009bbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8009bc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009bc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e3      	bne.n	8009b9a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3314      	adds	r3, #20
 8009bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bdc:	e853 3f00 	ldrex	r3, [r3]
 8009be0:	623b      	str	r3, [r7, #32]
   return(result);
 8009be2:	6a3b      	ldr	r3, [r7, #32]
 8009be4:	f023 0301 	bic.w	r3, r3, #1
 8009be8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3314      	adds	r3, #20
 8009bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009bf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e3      	bne.n	8009bd2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	330c      	adds	r3, #12
 8009c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	e853 3f00 	ldrex	r3, [r3]
 8009c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f023 0310 	bic.w	r3, r3, #16
 8009c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	330c      	adds	r3, #12
 8009c38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009c3c:	61fa      	str	r2, [r7, #28]
 8009c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c40:	69b9      	ldr	r1, [r7, #24]
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	e841 2300 	strex	r3, r2, [r1]
 8009c48:	617b      	str	r3, [r7, #20]
   return(result);
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1e3      	bne.n	8009c18 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2202      	movs	r2, #2
 8009c54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f83d 	bl	8009cdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c62:	e023      	b.n	8009cac <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d009      	beq.n	8009c84 <HAL_UART_IRQHandler+0x524>
 8009c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d003      	beq.n	8009c84 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f8e7 	bl	8009e50 <UART_Transmit_IT>
    return;
 8009c82:	e014      	b.n	8009cae <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00e      	beq.n	8009cae <HAL_UART_IRQHandler+0x54e>
 8009c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d008      	beq.n	8009cae <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f927 	bl	8009ef0 <UART_EndTransmit_IT>
    return;
 8009ca2:	e004      	b.n	8009cae <HAL_UART_IRQHandler+0x54e>
    return;
 8009ca4:	bf00      	nop
 8009ca6:	e002      	b.n	8009cae <HAL_UART_IRQHandler+0x54e>
      return;
 8009ca8:	bf00      	nop
 8009caa:	e000      	b.n	8009cae <HAL_UART_IRQHandler+0x54e>
      return;
 8009cac:	bf00      	nop
  }
}
 8009cae:	37e8      	adds	r7, #232	@ 0xe8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	88fa      	ldrh	r2, [r7, #6]
 8009d0c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	88fa      	ldrh	r2, [r7, #6]
 8009d12:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2222      	movs	r2, #34	@ 0x22
 8009d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d007      	beq.n	8009d3a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68da      	ldr	r2, [r3, #12]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d38:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	695a      	ldr	r2, [r3, #20]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f042 0201 	orr.w	r2, r2, #1
 8009d48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68da      	ldr	r2, [r3, #12]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f042 0220 	orr.w	r2, r2, #32
 8009d58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b095      	sub	sp, #84	@ 0x54
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	330c      	adds	r3, #12
 8009d76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d7a:	e853 3f00 	ldrex	r3, [r3]
 8009d7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	330c      	adds	r3, #12
 8009d8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d90:	643a      	str	r2, [r7, #64]	@ 0x40
 8009d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d98:	e841 2300 	strex	r3, r2, [r1]
 8009d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1e5      	bne.n	8009d70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3314      	adds	r3, #20
 8009daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	e853 3f00 	ldrex	r3, [r3]
 8009db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	f023 0301 	bic.w	r3, r3, #1
 8009dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3314      	adds	r3, #20
 8009dc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dcc:	e841 2300 	strex	r3, r2, [r1]
 8009dd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e5      	bne.n	8009da4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d119      	bne.n	8009e14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	330c      	adds	r3, #12
 8009de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	e853 3f00 	ldrex	r3, [r3]
 8009dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	f023 0310 	bic.w	r3, r3, #16
 8009df6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	330c      	adds	r3, #12
 8009dfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e00:	61ba      	str	r2, [r7, #24]
 8009e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e04:	6979      	ldr	r1, [r7, #20]
 8009e06:	69ba      	ldr	r2, [r7, #24]
 8009e08:	e841 2300 	strex	r3, r2, [r1]
 8009e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1e5      	bne.n	8009de0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2220      	movs	r2, #32
 8009e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009e22:	bf00      	nop
 8009e24:	3754      	adds	r7, #84	@ 0x54
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f7ff ff40 	bl	8009cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e48:	bf00      	nop
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	2b21      	cmp	r3, #33	@ 0x21
 8009e62:	d13e      	bne.n	8009ee2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e6c:	d114      	bne.n	8009e98 <UART_Transmit_IT+0x48>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d110      	bne.n	8009e98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	461a      	mov	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	1c9a      	adds	r2, r3, #2
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	621a      	str	r2, [r3, #32]
 8009e96:	e008      	b.n	8009eaa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a1b      	ldr	r3, [r3, #32]
 8009e9c:	1c59      	adds	r1, r3, #1
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	6211      	str	r1, [r2, #32]
 8009ea2:	781a      	ldrb	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10f      	bne.n	8009ede <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68da      	ldr	r2, [r3, #12]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009ecc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68da      	ldr	r2, [r3, #12]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009edc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e000      	b.n	8009ee4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ee2:	2302      	movs	r3, #2
  }
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3714      	adds	r7, #20
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68da      	ldr	r2, [r3, #12]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7ff fecf 	bl	8009cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08c      	sub	sp, #48	@ 0x30
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b22      	cmp	r3, #34	@ 0x22
 8009f3a:	f040 80aa 	bne.w	800a092 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f46:	d115      	bne.n	8009f74 <UART_Receive_IT+0x54>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d111      	bne.n	8009f74 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f54:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6c:	1c9a      	adds	r2, r3, #2
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	629a      	str	r2, [r3, #40]	@ 0x28
 8009f72:	e024      	b.n	8009fbe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f82:	d007      	beq.n	8009f94 <UART_Receive_IT+0x74>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10a      	bne.n	8009fa2 <UART_Receive_IT+0x82>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d106      	bne.n	8009fa2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f9e:	701a      	strb	r2, [r3, #0]
 8009fa0:	e008      	b.n	8009fb4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fae:	b2da      	uxtb	r2, r3
 8009fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d15d      	bne.n	800a08e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	68da      	ldr	r2, [r3, #12]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f022 0220 	bic.w	r2, r2, #32
 8009fe0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68da      	ldr	r2, [r3, #12]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	695a      	ldr	r2, [r3, #20]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f022 0201 	bic.w	r2, r2, #1
 800a000:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2220      	movs	r2, #32
 800a006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a014:	2b01      	cmp	r3, #1
 800a016:	d135      	bne.n	800a084 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	330c      	adds	r3, #12
 800a024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	e853 3f00 	ldrex	r3, [r3]
 800a02c:	613b      	str	r3, [r7, #16]
   return(result);
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f023 0310 	bic.w	r3, r3, #16
 800a034:	627b      	str	r3, [r7, #36]	@ 0x24
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	330c      	adds	r3, #12
 800a03c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a03e:	623a      	str	r2, [r7, #32]
 800a040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a042:	69f9      	ldr	r1, [r7, #28]
 800a044:	6a3a      	ldr	r2, [r7, #32]
 800a046:	e841 2300 	strex	r3, r2, [r1]
 800a04a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1e5      	bne.n	800a01e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0310 	and.w	r3, r3, #16
 800a05c:	2b10      	cmp	r3, #16
 800a05e:	d10a      	bne.n	800a076 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a060:	2300      	movs	r3, #0
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f7ff fe2d 	bl	8009cdc <HAL_UARTEx_RxEventCallback>
 800a082:	e002      	b.n	800a08a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7f7 fbef 	bl	8001868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	e002      	b.n	800a094 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	e000      	b.n	800a094 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a092:	2302      	movs	r3, #2
  }
}
 800a094:	4618      	mov	r0, r3
 800a096:	3730      	adds	r7, #48	@ 0x30
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a09c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0a0:	b0c0      	sub	sp, #256	@ 0x100
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0b8:	68d9      	ldr	r1, [r3, #12]
 800a0ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	ea40 0301 	orr.w	r3, r0, r1
 800a0c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a0c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0ca:	689a      	ldr	r2, [r3, #8]
 800a0cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	431a      	orrs	r2, r3
 800a0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	431a      	orrs	r2, r3
 800a0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0e0:	69db      	ldr	r3, [r3, #28]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a0f4:	f021 010c 	bic.w	r1, r1, #12
 800a0f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a102:	430b      	orrs	r3, r1
 800a104:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	695b      	ldr	r3, [r3, #20]
 800a10e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a116:	6999      	ldr	r1, [r3, #24]
 800a118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	ea40 0301 	orr.w	r3, r0, r1
 800a122:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	4b8f      	ldr	r3, [pc, #572]	@ (800a368 <UART_SetConfig+0x2cc>)
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d005      	beq.n	800a13c <UART_SetConfig+0xa0>
 800a130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	4b8d      	ldr	r3, [pc, #564]	@ (800a36c <UART_SetConfig+0x2d0>)
 800a138:	429a      	cmp	r2, r3
 800a13a:	d104      	bne.n	800a146 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a13c:	f7fd fb1c 	bl	8007778 <HAL_RCC_GetPCLK2Freq>
 800a140:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a144:	e003      	b.n	800a14e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a146:	f7fd fb03 	bl	8007750 <HAL_RCC_GetPCLK1Freq>
 800a14a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a152:	69db      	ldr	r3, [r3, #28]
 800a154:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a158:	f040 810c 	bne.w	800a374 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a15c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a160:	2200      	movs	r2, #0
 800a162:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a166:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a16a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a16e:	4622      	mov	r2, r4
 800a170:	462b      	mov	r3, r5
 800a172:	1891      	adds	r1, r2, r2
 800a174:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a176:	415b      	adcs	r3, r3
 800a178:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a17a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a17e:	4621      	mov	r1, r4
 800a180:	eb12 0801 	adds.w	r8, r2, r1
 800a184:	4629      	mov	r1, r5
 800a186:	eb43 0901 	adc.w	r9, r3, r1
 800a18a:	f04f 0200 	mov.w	r2, #0
 800a18e:	f04f 0300 	mov.w	r3, #0
 800a192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a19a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a19e:	4690      	mov	r8, r2
 800a1a0:	4699      	mov	r9, r3
 800a1a2:	4623      	mov	r3, r4
 800a1a4:	eb18 0303 	adds.w	r3, r8, r3
 800a1a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a1ac:	462b      	mov	r3, r5
 800a1ae:	eb49 0303 	adc.w	r3, r9, r3
 800a1b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a1b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a1c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a1c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	18db      	adds	r3, r3, r3
 800a1ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	eb42 0303 	adc.w	r3, r2, r3
 800a1d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a1dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a1e0:	f7f6 fd82 	bl	8000ce8 <__aeabi_uldivmod>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4b61      	ldr	r3, [pc, #388]	@ (800a370 <UART_SetConfig+0x2d4>)
 800a1ea:	fba3 2302 	umull	r2, r3, r3, r2
 800a1ee:	095b      	lsrs	r3, r3, #5
 800a1f0:	011c      	lsls	r4, r3, #4
 800a1f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a1fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a200:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a204:	4642      	mov	r2, r8
 800a206:	464b      	mov	r3, r9
 800a208:	1891      	adds	r1, r2, r2
 800a20a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a20c:	415b      	adcs	r3, r3
 800a20e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a210:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a214:	4641      	mov	r1, r8
 800a216:	eb12 0a01 	adds.w	sl, r2, r1
 800a21a:	4649      	mov	r1, r9
 800a21c:	eb43 0b01 	adc.w	fp, r3, r1
 800a220:	f04f 0200 	mov.w	r2, #0
 800a224:	f04f 0300 	mov.w	r3, #0
 800a228:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a22c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a234:	4692      	mov	sl, r2
 800a236:	469b      	mov	fp, r3
 800a238:	4643      	mov	r3, r8
 800a23a:	eb1a 0303 	adds.w	r3, sl, r3
 800a23e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a242:	464b      	mov	r3, r9
 800a244:	eb4b 0303 	adc.w	r3, fp, r3
 800a248:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a258:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a25c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a260:	460b      	mov	r3, r1
 800a262:	18db      	adds	r3, r3, r3
 800a264:	643b      	str	r3, [r7, #64]	@ 0x40
 800a266:	4613      	mov	r3, r2
 800a268:	eb42 0303 	adc.w	r3, r2, r3
 800a26c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a26e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a272:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a276:	f7f6 fd37 	bl	8000ce8 <__aeabi_uldivmod>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	4611      	mov	r1, r2
 800a280:	4b3b      	ldr	r3, [pc, #236]	@ (800a370 <UART_SetConfig+0x2d4>)
 800a282:	fba3 2301 	umull	r2, r3, r3, r1
 800a286:	095b      	lsrs	r3, r3, #5
 800a288:	2264      	movs	r2, #100	@ 0x64
 800a28a:	fb02 f303 	mul.w	r3, r2, r3
 800a28e:	1acb      	subs	r3, r1, r3
 800a290:	00db      	lsls	r3, r3, #3
 800a292:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a296:	4b36      	ldr	r3, [pc, #216]	@ (800a370 <UART_SetConfig+0x2d4>)
 800a298:	fba3 2302 	umull	r2, r3, r3, r2
 800a29c:	095b      	lsrs	r3, r3, #5
 800a29e:	005b      	lsls	r3, r3, #1
 800a2a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a2a4:	441c      	add	r4, r3
 800a2a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a2b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a2b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a2b8:	4642      	mov	r2, r8
 800a2ba:	464b      	mov	r3, r9
 800a2bc:	1891      	adds	r1, r2, r2
 800a2be:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a2c0:	415b      	adcs	r3, r3
 800a2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a2c8:	4641      	mov	r1, r8
 800a2ca:	1851      	adds	r1, r2, r1
 800a2cc:	6339      	str	r1, [r7, #48]	@ 0x30
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	414b      	adcs	r3, r1
 800a2d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2d4:	f04f 0200 	mov.w	r2, #0
 800a2d8:	f04f 0300 	mov.w	r3, #0
 800a2dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a2e0:	4659      	mov	r1, fp
 800a2e2:	00cb      	lsls	r3, r1, #3
 800a2e4:	4651      	mov	r1, sl
 800a2e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2ea:	4651      	mov	r1, sl
 800a2ec:	00ca      	lsls	r2, r1, #3
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	4642      	mov	r2, r8
 800a2f6:	189b      	adds	r3, r3, r2
 800a2f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a2fc:	464b      	mov	r3, r9
 800a2fe:	460a      	mov	r2, r1
 800a300:	eb42 0303 	adc.w	r3, r2, r3
 800a304:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a314:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a318:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a31c:	460b      	mov	r3, r1
 800a31e:	18db      	adds	r3, r3, r3
 800a320:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a322:	4613      	mov	r3, r2
 800a324:	eb42 0303 	adc.w	r3, r2, r3
 800a328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a32a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a32e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a332:	f7f6 fcd9 	bl	8000ce8 <__aeabi_uldivmod>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	4b0d      	ldr	r3, [pc, #52]	@ (800a370 <UART_SetConfig+0x2d4>)
 800a33c:	fba3 1302 	umull	r1, r3, r3, r2
 800a340:	095b      	lsrs	r3, r3, #5
 800a342:	2164      	movs	r1, #100	@ 0x64
 800a344:	fb01 f303 	mul.w	r3, r1, r3
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	00db      	lsls	r3, r3, #3
 800a34c:	3332      	adds	r3, #50	@ 0x32
 800a34e:	4a08      	ldr	r2, [pc, #32]	@ (800a370 <UART_SetConfig+0x2d4>)
 800a350:	fba2 2303 	umull	r2, r3, r2, r3
 800a354:	095b      	lsrs	r3, r3, #5
 800a356:	f003 0207 	and.w	r2, r3, #7
 800a35a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4422      	add	r2, r4
 800a362:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a364:	e106      	b.n	800a574 <UART_SetConfig+0x4d8>
 800a366:	bf00      	nop
 800a368:	40011000 	.word	0x40011000
 800a36c:	40011400 	.word	0x40011400
 800a370:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a378:	2200      	movs	r2, #0
 800a37a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a37e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a382:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a386:	4642      	mov	r2, r8
 800a388:	464b      	mov	r3, r9
 800a38a:	1891      	adds	r1, r2, r2
 800a38c:	6239      	str	r1, [r7, #32]
 800a38e:	415b      	adcs	r3, r3
 800a390:	627b      	str	r3, [r7, #36]	@ 0x24
 800a392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a396:	4641      	mov	r1, r8
 800a398:	1854      	adds	r4, r2, r1
 800a39a:	4649      	mov	r1, r9
 800a39c:	eb43 0501 	adc.w	r5, r3, r1
 800a3a0:	f04f 0200 	mov.w	r2, #0
 800a3a4:	f04f 0300 	mov.w	r3, #0
 800a3a8:	00eb      	lsls	r3, r5, #3
 800a3aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3ae:	00e2      	lsls	r2, r4, #3
 800a3b0:	4614      	mov	r4, r2
 800a3b2:	461d      	mov	r5, r3
 800a3b4:	4643      	mov	r3, r8
 800a3b6:	18e3      	adds	r3, r4, r3
 800a3b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a3bc:	464b      	mov	r3, r9
 800a3be:	eb45 0303 	adc.w	r3, r5, r3
 800a3c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a3d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a3d6:	f04f 0200 	mov.w	r2, #0
 800a3da:	f04f 0300 	mov.w	r3, #0
 800a3de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	008b      	lsls	r3, r1, #2
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	008a      	lsls	r2, r1, #2
 800a3f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a3f4:	f7f6 fc78 	bl	8000ce8 <__aeabi_uldivmod>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	4b60      	ldr	r3, [pc, #384]	@ (800a580 <UART_SetConfig+0x4e4>)
 800a3fe:	fba3 2302 	umull	r2, r3, r3, r2
 800a402:	095b      	lsrs	r3, r3, #5
 800a404:	011c      	lsls	r4, r3, #4
 800a406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a40a:	2200      	movs	r2, #0
 800a40c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a410:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a414:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a418:	4642      	mov	r2, r8
 800a41a:	464b      	mov	r3, r9
 800a41c:	1891      	adds	r1, r2, r2
 800a41e:	61b9      	str	r1, [r7, #24]
 800a420:	415b      	adcs	r3, r3
 800a422:	61fb      	str	r3, [r7, #28]
 800a424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a428:	4641      	mov	r1, r8
 800a42a:	1851      	adds	r1, r2, r1
 800a42c:	6139      	str	r1, [r7, #16]
 800a42e:	4649      	mov	r1, r9
 800a430:	414b      	adcs	r3, r1
 800a432:	617b      	str	r3, [r7, #20]
 800a434:	f04f 0200 	mov.w	r2, #0
 800a438:	f04f 0300 	mov.w	r3, #0
 800a43c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a440:	4659      	mov	r1, fp
 800a442:	00cb      	lsls	r3, r1, #3
 800a444:	4651      	mov	r1, sl
 800a446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a44a:	4651      	mov	r1, sl
 800a44c:	00ca      	lsls	r2, r1, #3
 800a44e:	4610      	mov	r0, r2
 800a450:	4619      	mov	r1, r3
 800a452:	4603      	mov	r3, r0
 800a454:	4642      	mov	r2, r8
 800a456:	189b      	adds	r3, r3, r2
 800a458:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a45c:	464b      	mov	r3, r9
 800a45e:	460a      	mov	r2, r1
 800a460:	eb42 0303 	adc.w	r3, r2, r3
 800a464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a472:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a474:	f04f 0200 	mov.w	r2, #0
 800a478:	f04f 0300 	mov.w	r3, #0
 800a47c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a480:	4649      	mov	r1, r9
 800a482:	008b      	lsls	r3, r1, #2
 800a484:	4641      	mov	r1, r8
 800a486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a48a:	4641      	mov	r1, r8
 800a48c:	008a      	lsls	r2, r1, #2
 800a48e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a492:	f7f6 fc29 	bl	8000ce8 <__aeabi_uldivmod>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4611      	mov	r1, r2
 800a49c:	4b38      	ldr	r3, [pc, #224]	@ (800a580 <UART_SetConfig+0x4e4>)
 800a49e:	fba3 2301 	umull	r2, r3, r3, r1
 800a4a2:	095b      	lsrs	r3, r3, #5
 800a4a4:	2264      	movs	r2, #100	@ 0x64
 800a4a6:	fb02 f303 	mul.w	r3, r2, r3
 800a4aa:	1acb      	subs	r3, r1, r3
 800a4ac:	011b      	lsls	r3, r3, #4
 800a4ae:	3332      	adds	r3, #50	@ 0x32
 800a4b0:	4a33      	ldr	r2, [pc, #204]	@ (800a580 <UART_SetConfig+0x4e4>)
 800a4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b6:	095b      	lsrs	r3, r3, #5
 800a4b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4bc:	441c      	add	r4, r3
 800a4be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a4c6:	677a      	str	r2, [r7, #116]	@ 0x74
 800a4c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a4cc:	4642      	mov	r2, r8
 800a4ce:	464b      	mov	r3, r9
 800a4d0:	1891      	adds	r1, r2, r2
 800a4d2:	60b9      	str	r1, [r7, #8]
 800a4d4:	415b      	adcs	r3, r3
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4dc:	4641      	mov	r1, r8
 800a4de:	1851      	adds	r1, r2, r1
 800a4e0:	6039      	str	r1, [r7, #0]
 800a4e2:	4649      	mov	r1, r9
 800a4e4:	414b      	adcs	r3, r1
 800a4e6:	607b      	str	r3, [r7, #4]
 800a4e8:	f04f 0200 	mov.w	r2, #0
 800a4ec:	f04f 0300 	mov.w	r3, #0
 800a4f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a4f4:	4659      	mov	r1, fp
 800a4f6:	00cb      	lsls	r3, r1, #3
 800a4f8:	4651      	mov	r1, sl
 800a4fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4fe:	4651      	mov	r1, sl
 800a500:	00ca      	lsls	r2, r1, #3
 800a502:	4610      	mov	r0, r2
 800a504:	4619      	mov	r1, r3
 800a506:	4603      	mov	r3, r0
 800a508:	4642      	mov	r2, r8
 800a50a:	189b      	adds	r3, r3, r2
 800a50c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a50e:	464b      	mov	r3, r9
 800a510:	460a      	mov	r2, r1
 800a512:	eb42 0303 	adc.w	r3, r2, r3
 800a516:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	663b      	str	r3, [r7, #96]	@ 0x60
 800a522:	667a      	str	r2, [r7, #100]	@ 0x64
 800a524:	f04f 0200 	mov.w	r2, #0
 800a528:	f04f 0300 	mov.w	r3, #0
 800a52c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a530:	4649      	mov	r1, r9
 800a532:	008b      	lsls	r3, r1, #2
 800a534:	4641      	mov	r1, r8
 800a536:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a53a:	4641      	mov	r1, r8
 800a53c:	008a      	lsls	r2, r1, #2
 800a53e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a542:	f7f6 fbd1 	bl	8000ce8 <__aeabi_uldivmod>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	4b0d      	ldr	r3, [pc, #52]	@ (800a580 <UART_SetConfig+0x4e4>)
 800a54c:	fba3 1302 	umull	r1, r3, r3, r2
 800a550:	095b      	lsrs	r3, r3, #5
 800a552:	2164      	movs	r1, #100	@ 0x64
 800a554:	fb01 f303 	mul.w	r3, r1, r3
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	011b      	lsls	r3, r3, #4
 800a55c:	3332      	adds	r3, #50	@ 0x32
 800a55e:	4a08      	ldr	r2, [pc, #32]	@ (800a580 <UART_SetConfig+0x4e4>)
 800a560:	fba2 2303 	umull	r2, r3, r2, r3
 800a564:	095b      	lsrs	r3, r3, #5
 800a566:	f003 020f 	and.w	r2, r3, #15
 800a56a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4422      	add	r2, r4
 800a572:	609a      	str	r2, [r3, #8]
}
 800a574:	bf00      	nop
 800a576:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a57a:	46bd      	mov	sp, r7
 800a57c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a580:	51eb851f 	.word	0x51eb851f

0800a584 <__cvt>:
 800a584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a588:	ec57 6b10 	vmov	r6, r7, d0
 800a58c:	2f00      	cmp	r7, #0
 800a58e:	460c      	mov	r4, r1
 800a590:	4619      	mov	r1, r3
 800a592:	463b      	mov	r3, r7
 800a594:	bfbb      	ittet	lt
 800a596:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a59a:	461f      	movlt	r7, r3
 800a59c:	2300      	movge	r3, #0
 800a59e:	232d      	movlt	r3, #45	@ 0x2d
 800a5a0:	700b      	strb	r3, [r1, #0]
 800a5a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a5a8:	4691      	mov	r9, r2
 800a5aa:	f023 0820 	bic.w	r8, r3, #32
 800a5ae:	bfbc      	itt	lt
 800a5b0:	4632      	movlt	r2, r6
 800a5b2:	4616      	movlt	r6, r2
 800a5b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a5b8:	d005      	beq.n	800a5c6 <__cvt+0x42>
 800a5ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a5be:	d100      	bne.n	800a5c2 <__cvt+0x3e>
 800a5c0:	3401      	adds	r4, #1
 800a5c2:	2102      	movs	r1, #2
 800a5c4:	e000      	b.n	800a5c8 <__cvt+0x44>
 800a5c6:	2103      	movs	r1, #3
 800a5c8:	ab03      	add	r3, sp, #12
 800a5ca:	9301      	str	r3, [sp, #4]
 800a5cc:	ab02      	add	r3, sp, #8
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	ec47 6b10 	vmov	d0, r6, r7
 800a5d4:	4653      	mov	r3, sl
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	f001 ff96 	bl	800c508 <_dtoa_r>
 800a5dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	d119      	bne.n	800a618 <__cvt+0x94>
 800a5e4:	f019 0f01 	tst.w	r9, #1
 800a5e8:	d00e      	beq.n	800a608 <__cvt+0x84>
 800a5ea:	eb00 0904 	add.w	r9, r0, r4
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	4639      	mov	r1, r7
 800a5f6:	f7f6 fa97 	bl	8000b28 <__aeabi_dcmpeq>
 800a5fa:	b108      	cbz	r0, 800a600 <__cvt+0x7c>
 800a5fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a600:	2230      	movs	r2, #48	@ 0x30
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	454b      	cmp	r3, r9
 800a606:	d31e      	bcc.n	800a646 <__cvt+0xc2>
 800a608:	9b03      	ldr	r3, [sp, #12]
 800a60a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a60c:	1b5b      	subs	r3, r3, r5
 800a60e:	4628      	mov	r0, r5
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	b004      	add	sp, #16
 800a614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a618:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a61c:	eb00 0904 	add.w	r9, r0, r4
 800a620:	d1e5      	bne.n	800a5ee <__cvt+0x6a>
 800a622:	7803      	ldrb	r3, [r0, #0]
 800a624:	2b30      	cmp	r3, #48	@ 0x30
 800a626:	d10a      	bne.n	800a63e <__cvt+0xba>
 800a628:	2200      	movs	r2, #0
 800a62a:	2300      	movs	r3, #0
 800a62c:	4630      	mov	r0, r6
 800a62e:	4639      	mov	r1, r7
 800a630:	f7f6 fa7a 	bl	8000b28 <__aeabi_dcmpeq>
 800a634:	b918      	cbnz	r0, 800a63e <__cvt+0xba>
 800a636:	f1c4 0401 	rsb	r4, r4, #1
 800a63a:	f8ca 4000 	str.w	r4, [sl]
 800a63e:	f8da 3000 	ldr.w	r3, [sl]
 800a642:	4499      	add	r9, r3
 800a644:	e7d3      	b.n	800a5ee <__cvt+0x6a>
 800a646:	1c59      	adds	r1, r3, #1
 800a648:	9103      	str	r1, [sp, #12]
 800a64a:	701a      	strb	r2, [r3, #0]
 800a64c:	e7d9      	b.n	800a602 <__cvt+0x7e>

0800a64e <__exponent>:
 800a64e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a650:	2900      	cmp	r1, #0
 800a652:	bfba      	itte	lt
 800a654:	4249      	neglt	r1, r1
 800a656:	232d      	movlt	r3, #45	@ 0x2d
 800a658:	232b      	movge	r3, #43	@ 0x2b
 800a65a:	2909      	cmp	r1, #9
 800a65c:	7002      	strb	r2, [r0, #0]
 800a65e:	7043      	strb	r3, [r0, #1]
 800a660:	dd29      	ble.n	800a6b6 <__exponent+0x68>
 800a662:	f10d 0307 	add.w	r3, sp, #7
 800a666:	461d      	mov	r5, r3
 800a668:	270a      	movs	r7, #10
 800a66a:	461a      	mov	r2, r3
 800a66c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a670:	fb07 1416 	mls	r4, r7, r6, r1
 800a674:	3430      	adds	r4, #48	@ 0x30
 800a676:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a67a:	460c      	mov	r4, r1
 800a67c:	2c63      	cmp	r4, #99	@ 0x63
 800a67e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a682:	4631      	mov	r1, r6
 800a684:	dcf1      	bgt.n	800a66a <__exponent+0x1c>
 800a686:	3130      	adds	r1, #48	@ 0x30
 800a688:	1e94      	subs	r4, r2, #2
 800a68a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a68e:	1c41      	adds	r1, r0, #1
 800a690:	4623      	mov	r3, r4
 800a692:	42ab      	cmp	r3, r5
 800a694:	d30a      	bcc.n	800a6ac <__exponent+0x5e>
 800a696:	f10d 0309 	add.w	r3, sp, #9
 800a69a:	1a9b      	subs	r3, r3, r2
 800a69c:	42ac      	cmp	r4, r5
 800a69e:	bf88      	it	hi
 800a6a0:	2300      	movhi	r3, #0
 800a6a2:	3302      	adds	r3, #2
 800a6a4:	4403      	add	r3, r0
 800a6a6:	1a18      	subs	r0, r3, r0
 800a6a8:	b003      	add	sp, #12
 800a6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a6b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a6b4:	e7ed      	b.n	800a692 <__exponent+0x44>
 800a6b6:	2330      	movs	r3, #48	@ 0x30
 800a6b8:	3130      	adds	r1, #48	@ 0x30
 800a6ba:	7083      	strb	r3, [r0, #2]
 800a6bc:	70c1      	strb	r1, [r0, #3]
 800a6be:	1d03      	adds	r3, r0, #4
 800a6c0:	e7f1      	b.n	800a6a6 <__exponent+0x58>
	...

0800a6c4 <_printf_float>:
 800a6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c8:	b08d      	sub	sp, #52	@ 0x34
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a6d0:	4616      	mov	r6, r2
 800a6d2:	461f      	mov	r7, r3
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	f001 fe5d 	bl	800c394 <_localeconv_r>
 800a6da:	6803      	ldr	r3, [r0, #0]
 800a6dc:	9304      	str	r3, [sp, #16]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7f5 fdf6 	bl	80002d0 <strlen>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a6ec:	9005      	str	r0, [sp, #20]
 800a6ee:	3307      	adds	r3, #7
 800a6f0:	f023 0307 	bic.w	r3, r3, #7
 800a6f4:	f103 0208 	add.w	r2, r3, #8
 800a6f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a6fc:	f8d4 b000 	ldr.w	fp, [r4]
 800a700:	f8c8 2000 	str.w	r2, [r8]
 800a704:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a708:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a70c:	9307      	str	r3, [sp, #28]
 800a70e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a712:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a71a:	4b9c      	ldr	r3, [pc, #624]	@ (800a98c <_printf_float+0x2c8>)
 800a71c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a720:	f7f6 fa34 	bl	8000b8c <__aeabi_dcmpun>
 800a724:	bb70      	cbnz	r0, 800a784 <_printf_float+0xc0>
 800a726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a72a:	4b98      	ldr	r3, [pc, #608]	@ (800a98c <_printf_float+0x2c8>)
 800a72c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a730:	f7f6 fa0e 	bl	8000b50 <__aeabi_dcmple>
 800a734:	bb30      	cbnz	r0, 800a784 <_printf_float+0xc0>
 800a736:	2200      	movs	r2, #0
 800a738:	2300      	movs	r3, #0
 800a73a:	4640      	mov	r0, r8
 800a73c:	4649      	mov	r1, r9
 800a73e:	f7f6 f9fd 	bl	8000b3c <__aeabi_dcmplt>
 800a742:	b110      	cbz	r0, 800a74a <_printf_float+0x86>
 800a744:	232d      	movs	r3, #45	@ 0x2d
 800a746:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a74a:	4a91      	ldr	r2, [pc, #580]	@ (800a990 <_printf_float+0x2cc>)
 800a74c:	4b91      	ldr	r3, [pc, #580]	@ (800a994 <_printf_float+0x2d0>)
 800a74e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a752:	bf8c      	ite	hi
 800a754:	4690      	movhi	r8, r2
 800a756:	4698      	movls	r8, r3
 800a758:	2303      	movs	r3, #3
 800a75a:	6123      	str	r3, [r4, #16]
 800a75c:	f02b 0304 	bic.w	r3, fp, #4
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	f04f 0900 	mov.w	r9, #0
 800a766:	9700      	str	r7, [sp, #0]
 800a768:	4633      	mov	r3, r6
 800a76a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a76c:	4621      	mov	r1, r4
 800a76e:	4628      	mov	r0, r5
 800a770:	f000 f9d2 	bl	800ab18 <_printf_common>
 800a774:	3001      	adds	r0, #1
 800a776:	f040 808d 	bne.w	800a894 <_printf_float+0x1d0>
 800a77a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a77e:	b00d      	add	sp, #52	@ 0x34
 800a780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a784:	4642      	mov	r2, r8
 800a786:	464b      	mov	r3, r9
 800a788:	4640      	mov	r0, r8
 800a78a:	4649      	mov	r1, r9
 800a78c:	f7f6 f9fe 	bl	8000b8c <__aeabi_dcmpun>
 800a790:	b140      	cbz	r0, 800a7a4 <_printf_float+0xe0>
 800a792:	464b      	mov	r3, r9
 800a794:	2b00      	cmp	r3, #0
 800a796:	bfbc      	itt	lt
 800a798:	232d      	movlt	r3, #45	@ 0x2d
 800a79a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a79e:	4a7e      	ldr	r2, [pc, #504]	@ (800a998 <_printf_float+0x2d4>)
 800a7a0:	4b7e      	ldr	r3, [pc, #504]	@ (800a99c <_printf_float+0x2d8>)
 800a7a2:	e7d4      	b.n	800a74e <_printf_float+0x8a>
 800a7a4:	6863      	ldr	r3, [r4, #4]
 800a7a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a7aa:	9206      	str	r2, [sp, #24]
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	d13b      	bne.n	800a828 <_printf_float+0x164>
 800a7b0:	2306      	movs	r3, #6
 800a7b2:	6063      	str	r3, [r4, #4]
 800a7b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	6022      	str	r2, [r4, #0]
 800a7bc:	9303      	str	r3, [sp, #12]
 800a7be:	ab0a      	add	r3, sp, #40	@ 0x28
 800a7c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a7c4:	ab09      	add	r3, sp, #36	@ 0x24
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	6861      	ldr	r1, [r4, #4]
 800a7ca:	ec49 8b10 	vmov	d0, r8, r9
 800a7ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f7ff fed6 	bl	800a584 <__cvt>
 800a7d8:	9b06      	ldr	r3, [sp, #24]
 800a7da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a7dc:	2b47      	cmp	r3, #71	@ 0x47
 800a7de:	4680      	mov	r8, r0
 800a7e0:	d129      	bne.n	800a836 <_printf_float+0x172>
 800a7e2:	1cc8      	adds	r0, r1, #3
 800a7e4:	db02      	blt.n	800a7ec <_printf_float+0x128>
 800a7e6:	6863      	ldr	r3, [r4, #4]
 800a7e8:	4299      	cmp	r1, r3
 800a7ea:	dd41      	ble.n	800a870 <_printf_float+0x1ac>
 800a7ec:	f1aa 0a02 	sub.w	sl, sl, #2
 800a7f0:	fa5f fa8a 	uxtb.w	sl, sl
 800a7f4:	3901      	subs	r1, #1
 800a7f6:	4652      	mov	r2, sl
 800a7f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a7fc:	9109      	str	r1, [sp, #36]	@ 0x24
 800a7fe:	f7ff ff26 	bl	800a64e <__exponent>
 800a802:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a804:	1813      	adds	r3, r2, r0
 800a806:	2a01      	cmp	r2, #1
 800a808:	4681      	mov	r9, r0
 800a80a:	6123      	str	r3, [r4, #16]
 800a80c:	dc02      	bgt.n	800a814 <_printf_float+0x150>
 800a80e:	6822      	ldr	r2, [r4, #0]
 800a810:	07d2      	lsls	r2, r2, #31
 800a812:	d501      	bpl.n	800a818 <_printf_float+0x154>
 800a814:	3301      	adds	r3, #1
 800a816:	6123      	str	r3, [r4, #16]
 800a818:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d0a2      	beq.n	800a766 <_printf_float+0xa2>
 800a820:	232d      	movs	r3, #45	@ 0x2d
 800a822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a826:	e79e      	b.n	800a766 <_printf_float+0xa2>
 800a828:	9a06      	ldr	r2, [sp, #24]
 800a82a:	2a47      	cmp	r2, #71	@ 0x47
 800a82c:	d1c2      	bne.n	800a7b4 <_printf_float+0xf0>
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1c0      	bne.n	800a7b4 <_printf_float+0xf0>
 800a832:	2301      	movs	r3, #1
 800a834:	e7bd      	b.n	800a7b2 <_printf_float+0xee>
 800a836:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a83a:	d9db      	bls.n	800a7f4 <_printf_float+0x130>
 800a83c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a840:	d118      	bne.n	800a874 <_printf_float+0x1b0>
 800a842:	2900      	cmp	r1, #0
 800a844:	6863      	ldr	r3, [r4, #4]
 800a846:	dd0b      	ble.n	800a860 <_printf_float+0x19c>
 800a848:	6121      	str	r1, [r4, #16]
 800a84a:	b913      	cbnz	r3, 800a852 <_printf_float+0x18e>
 800a84c:	6822      	ldr	r2, [r4, #0]
 800a84e:	07d0      	lsls	r0, r2, #31
 800a850:	d502      	bpl.n	800a858 <_printf_float+0x194>
 800a852:	3301      	adds	r3, #1
 800a854:	440b      	add	r3, r1
 800a856:	6123      	str	r3, [r4, #16]
 800a858:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a85a:	f04f 0900 	mov.w	r9, #0
 800a85e:	e7db      	b.n	800a818 <_printf_float+0x154>
 800a860:	b913      	cbnz	r3, 800a868 <_printf_float+0x1a4>
 800a862:	6822      	ldr	r2, [r4, #0]
 800a864:	07d2      	lsls	r2, r2, #31
 800a866:	d501      	bpl.n	800a86c <_printf_float+0x1a8>
 800a868:	3302      	adds	r3, #2
 800a86a:	e7f4      	b.n	800a856 <_printf_float+0x192>
 800a86c:	2301      	movs	r3, #1
 800a86e:	e7f2      	b.n	800a856 <_printf_float+0x192>
 800a870:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a876:	4299      	cmp	r1, r3
 800a878:	db05      	blt.n	800a886 <_printf_float+0x1c2>
 800a87a:	6823      	ldr	r3, [r4, #0]
 800a87c:	6121      	str	r1, [r4, #16]
 800a87e:	07d8      	lsls	r0, r3, #31
 800a880:	d5ea      	bpl.n	800a858 <_printf_float+0x194>
 800a882:	1c4b      	adds	r3, r1, #1
 800a884:	e7e7      	b.n	800a856 <_printf_float+0x192>
 800a886:	2900      	cmp	r1, #0
 800a888:	bfd4      	ite	le
 800a88a:	f1c1 0202 	rsble	r2, r1, #2
 800a88e:	2201      	movgt	r2, #1
 800a890:	4413      	add	r3, r2
 800a892:	e7e0      	b.n	800a856 <_printf_float+0x192>
 800a894:	6823      	ldr	r3, [r4, #0]
 800a896:	055a      	lsls	r2, r3, #21
 800a898:	d407      	bmi.n	800a8aa <_printf_float+0x1e6>
 800a89a:	6923      	ldr	r3, [r4, #16]
 800a89c:	4642      	mov	r2, r8
 800a89e:	4631      	mov	r1, r6
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	47b8      	blx	r7
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	d12b      	bne.n	800a900 <_printf_float+0x23c>
 800a8a8:	e767      	b.n	800a77a <_printf_float+0xb6>
 800a8aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a8ae:	f240 80dd 	bls.w	800aa6c <_printf_float+0x3a8>
 800a8b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f7f6 f935 	bl	8000b28 <__aeabi_dcmpeq>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d033      	beq.n	800a92a <_printf_float+0x266>
 800a8c2:	4a37      	ldr	r2, [pc, #220]	@ (800a9a0 <_printf_float+0x2dc>)
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	4631      	mov	r1, r6
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	47b8      	blx	r7
 800a8cc:	3001      	adds	r0, #1
 800a8ce:	f43f af54 	beq.w	800a77a <_printf_float+0xb6>
 800a8d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a8d6:	4543      	cmp	r3, r8
 800a8d8:	db02      	blt.n	800a8e0 <_printf_float+0x21c>
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	07d8      	lsls	r0, r3, #31
 800a8de:	d50f      	bpl.n	800a900 <_printf_float+0x23c>
 800a8e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8e4:	4631      	mov	r1, r6
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	47b8      	blx	r7
 800a8ea:	3001      	adds	r0, #1
 800a8ec:	f43f af45 	beq.w	800a77a <_printf_float+0xb6>
 800a8f0:	f04f 0900 	mov.w	r9, #0
 800a8f4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a8f8:	f104 0a1a 	add.w	sl, r4, #26
 800a8fc:	45c8      	cmp	r8, r9
 800a8fe:	dc09      	bgt.n	800a914 <_printf_float+0x250>
 800a900:	6823      	ldr	r3, [r4, #0]
 800a902:	079b      	lsls	r3, r3, #30
 800a904:	f100 8103 	bmi.w	800ab0e <_printf_float+0x44a>
 800a908:	68e0      	ldr	r0, [r4, #12]
 800a90a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a90c:	4298      	cmp	r0, r3
 800a90e:	bfb8      	it	lt
 800a910:	4618      	movlt	r0, r3
 800a912:	e734      	b.n	800a77e <_printf_float+0xba>
 800a914:	2301      	movs	r3, #1
 800a916:	4652      	mov	r2, sl
 800a918:	4631      	mov	r1, r6
 800a91a:	4628      	mov	r0, r5
 800a91c:	47b8      	blx	r7
 800a91e:	3001      	adds	r0, #1
 800a920:	f43f af2b 	beq.w	800a77a <_printf_float+0xb6>
 800a924:	f109 0901 	add.w	r9, r9, #1
 800a928:	e7e8      	b.n	800a8fc <_printf_float+0x238>
 800a92a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	dc39      	bgt.n	800a9a4 <_printf_float+0x2e0>
 800a930:	4a1b      	ldr	r2, [pc, #108]	@ (800a9a0 <_printf_float+0x2dc>)
 800a932:	2301      	movs	r3, #1
 800a934:	4631      	mov	r1, r6
 800a936:	4628      	mov	r0, r5
 800a938:	47b8      	blx	r7
 800a93a:	3001      	adds	r0, #1
 800a93c:	f43f af1d 	beq.w	800a77a <_printf_float+0xb6>
 800a940:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a944:	ea59 0303 	orrs.w	r3, r9, r3
 800a948:	d102      	bne.n	800a950 <_printf_float+0x28c>
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	07d9      	lsls	r1, r3, #31
 800a94e:	d5d7      	bpl.n	800a900 <_printf_float+0x23c>
 800a950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a954:	4631      	mov	r1, r6
 800a956:	4628      	mov	r0, r5
 800a958:	47b8      	blx	r7
 800a95a:	3001      	adds	r0, #1
 800a95c:	f43f af0d 	beq.w	800a77a <_printf_float+0xb6>
 800a960:	f04f 0a00 	mov.w	sl, #0
 800a964:	f104 0b1a 	add.w	fp, r4, #26
 800a968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a96a:	425b      	negs	r3, r3
 800a96c:	4553      	cmp	r3, sl
 800a96e:	dc01      	bgt.n	800a974 <_printf_float+0x2b0>
 800a970:	464b      	mov	r3, r9
 800a972:	e793      	b.n	800a89c <_printf_float+0x1d8>
 800a974:	2301      	movs	r3, #1
 800a976:	465a      	mov	r2, fp
 800a978:	4631      	mov	r1, r6
 800a97a:	4628      	mov	r0, r5
 800a97c:	47b8      	blx	r7
 800a97e:	3001      	adds	r0, #1
 800a980:	f43f aefb 	beq.w	800a77a <_printf_float+0xb6>
 800a984:	f10a 0a01 	add.w	sl, sl, #1
 800a988:	e7ee      	b.n	800a968 <_printf_float+0x2a4>
 800a98a:	bf00      	nop
 800a98c:	7fefffff 	.word	0x7fefffff
 800a990:	0800f974 	.word	0x0800f974
 800a994:	0800f970 	.word	0x0800f970
 800a998:	0800f97c 	.word	0x0800f97c
 800a99c:	0800f978 	.word	0x0800f978
 800a9a0:	0800fac5 	.word	0x0800fac5
 800a9a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9aa:	4553      	cmp	r3, sl
 800a9ac:	bfa8      	it	ge
 800a9ae:	4653      	movge	r3, sl
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	4699      	mov	r9, r3
 800a9b4:	dc36      	bgt.n	800aa24 <_printf_float+0x360>
 800a9b6:	f04f 0b00 	mov.w	fp, #0
 800a9ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9be:	f104 021a 	add.w	r2, r4, #26
 800a9c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9c4:	9306      	str	r3, [sp, #24]
 800a9c6:	eba3 0309 	sub.w	r3, r3, r9
 800a9ca:	455b      	cmp	r3, fp
 800a9cc:	dc31      	bgt.n	800aa32 <_printf_float+0x36e>
 800a9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9d0:	459a      	cmp	sl, r3
 800a9d2:	dc3a      	bgt.n	800aa4a <_printf_float+0x386>
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	07da      	lsls	r2, r3, #31
 800a9d8:	d437      	bmi.n	800aa4a <_printf_float+0x386>
 800a9da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9dc:	ebaa 0903 	sub.w	r9, sl, r3
 800a9e0:	9b06      	ldr	r3, [sp, #24]
 800a9e2:	ebaa 0303 	sub.w	r3, sl, r3
 800a9e6:	4599      	cmp	r9, r3
 800a9e8:	bfa8      	it	ge
 800a9ea:	4699      	movge	r9, r3
 800a9ec:	f1b9 0f00 	cmp.w	r9, #0
 800a9f0:	dc33      	bgt.n	800aa5a <_printf_float+0x396>
 800a9f2:	f04f 0800 	mov.w	r8, #0
 800a9f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9fa:	f104 0b1a 	add.w	fp, r4, #26
 800a9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa00:	ebaa 0303 	sub.w	r3, sl, r3
 800aa04:	eba3 0309 	sub.w	r3, r3, r9
 800aa08:	4543      	cmp	r3, r8
 800aa0a:	f77f af79 	ble.w	800a900 <_printf_float+0x23c>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	465a      	mov	r2, fp
 800aa12:	4631      	mov	r1, r6
 800aa14:	4628      	mov	r0, r5
 800aa16:	47b8      	blx	r7
 800aa18:	3001      	adds	r0, #1
 800aa1a:	f43f aeae 	beq.w	800a77a <_printf_float+0xb6>
 800aa1e:	f108 0801 	add.w	r8, r8, #1
 800aa22:	e7ec      	b.n	800a9fe <_printf_float+0x33a>
 800aa24:	4642      	mov	r2, r8
 800aa26:	4631      	mov	r1, r6
 800aa28:	4628      	mov	r0, r5
 800aa2a:	47b8      	blx	r7
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	d1c2      	bne.n	800a9b6 <_printf_float+0x2f2>
 800aa30:	e6a3      	b.n	800a77a <_printf_float+0xb6>
 800aa32:	2301      	movs	r3, #1
 800aa34:	4631      	mov	r1, r6
 800aa36:	4628      	mov	r0, r5
 800aa38:	9206      	str	r2, [sp, #24]
 800aa3a:	47b8      	blx	r7
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	f43f ae9c 	beq.w	800a77a <_printf_float+0xb6>
 800aa42:	9a06      	ldr	r2, [sp, #24]
 800aa44:	f10b 0b01 	add.w	fp, fp, #1
 800aa48:	e7bb      	b.n	800a9c2 <_printf_float+0x2fe>
 800aa4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa4e:	4631      	mov	r1, r6
 800aa50:	4628      	mov	r0, r5
 800aa52:	47b8      	blx	r7
 800aa54:	3001      	adds	r0, #1
 800aa56:	d1c0      	bne.n	800a9da <_printf_float+0x316>
 800aa58:	e68f      	b.n	800a77a <_printf_float+0xb6>
 800aa5a:	9a06      	ldr	r2, [sp, #24]
 800aa5c:	464b      	mov	r3, r9
 800aa5e:	4442      	add	r2, r8
 800aa60:	4631      	mov	r1, r6
 800aa62:	4628      	mov	r0, r5
 800aa64:	47b8      	blx	r7
 800aa66:	3001      	adds	r0, #1
 800aa68:	d1c3      	bne.n	800a9f2 <_printf_float+0x32e>
 800aa6a:	e686      	b.n	800a77a <_printf_float+0xb6>
 800aa6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa70:	f1ba 0f01 	cmp.w	sl, #1
 800aa74:	dc01      	bgt.n	800aa7a <_printf_float+0x3b6>
 800aa76:	07db      	lsls	r3, r3, #31
 800aa78:	d536      	bpl.n	800aae8 <_printf_float+0x424>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	4642      	mov	r2, r8
 800aa7e:	4631      	mov	r1, r6
 800aa80:	4628      	mov	r0, r5
 800aa82:	47b8      	blx	r7
 800aa84:	3001      	adds	r0, #1
 800aa86:	f43f ae78 	beq.w	800a77a <_printf_float+0xb6>
 800aa8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b8      	blx	r7
 800aa94:	3001      	adds	r0, #1
 800aa96:	f43f ae70 	beq.w	800a77a <_printf_float+0xb6>
 800aa9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800aaa6:	f7f6 f83f 	bl	8000b28 <__aeabi_dcmpeq>
 800aaaa:	b9c0      	cbnz	r0, 800aade <_printf_float+0x41a>
 800aaac:	4653      	mov	r3, sl
 800aaae:	f108 0201 	add.w	r2, r8, #1
 800aab2:	4631      	mov	r1, r6
 800aab4:	4628      	mov	r0, r5
 800aab6:	47b8      	blx	r7
 800aab8:	3001      	adds	r0, #1
 800aaba:	d10c      	bne.n	800aad6 <_printf_float+0x412>
 800aabc:	e65d      	b.n	800a77a <_printf_float+0xb6>
 800aabe:	2301      	movs	r3, #1
 800aac0:	465a      	mov	r2, fp
 800aac2:	4631      	mov	r1, r6
 800aac4:	4628      	mov	r0, r5
 800aac6:	47b8      	blx	r7
 800aac8:	3001      	adds	r0, #1
 800aaca:	f43f ae56 	beq.w	800a77a <_printf_float+0xb6>
 800aace:	f108 0801 	add.w	r8, r8, #1
 800aad2:	45d0      	cmp	r8, sl
 800aad4:	dbf3      	blt.n	800aabe <_printf_float+0x3fa>
 800aad6:	464b      	mov	r3, r9
 800aad8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aadc:	e6df      	b.n	800a89e <_printf_float+0x1da>
 800aade:	f04f 0800 	mov.w	r8, #0
 800aae2:	f104 0b1a 	add.w	fp, r4, #26
 800aae6:	e7f4      	b.n	800aad2 <_printf_float+0x40e>
 800aae8:	2301      	movs	r3, #1
 800aaea:	4642      	mov	r2, r8
 800aaec:	e7e1      	b.n	800aab2 <_printf_float+0x3ee>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	464a      	mov	r2, r9
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	47b8      	blx	r7
 800aaf8:	3001      	adds	r0, #1
 800aafa:	f43f ae3e 	beq.w	800a77a <_printf_float+0xb6>
 800aafe:	f108 0801 	add.w	r8, r8, #1
 800ab02:	68e3      	ldr	r3, [r4, #12]
 800ab04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab06:	1a5b      	subs	r3, r3, r1
 800ab08:	4543      	cmp	r3, r8
 800ab0a:	dcf0      	bgt.n	800aaee <_printf_float+0x42a>
 800ab0c:	e6fc      	b.n	800a908 <_printf_float+0x244>
 800ab0e:	f04f 0800 	mov.w	r8, #0
 800ab12:	f104 0919 	add.w	r9, r4, #25
 800ab16:	e7f4      	b.n	800ab02 <_printf_float+0x43e>

0800ab18 <_printf_common>:
 800ab18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab1c:	4616      	mov	r6, r2
 800ab1e:	4698      	mov	r8, r3
 800ab20:	688a      	ldr	r2, [r1, #8]
 800ab22:	690b      	ldr	r3, [r1, #16]
 800ab24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	bfb8      	it	lt
 800ab2c:	4613      	movlt	r3, r2
 800ab2e:	6033      	str	r3, [r6, #0]
 800ab30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab34:	4607      	mov	r7, r0
 800ab36:	460c      	mov	r4, r1
 800ab38:	b10a      	cbz	r2, 800ab3e <_printf_common+0x26>
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	6033      	str	r3, [r6, #0]
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	0699      	lsls	r1, r3, #26
 800ab42:	bf42      	ittt	mi
 800ab44:	6833      	ldrmi	r3, [r6, #0]
 800ab46:	3302      	addmi	r3, #2
 800ab48:	6033      	strmi	r3, [r6, #0]
 800ab4a:	6825      	ldr	r5, [r4, #0]
 800ab4c:	f015 0506 	ands.w	r5, r5, #6
 800ab50:	d106      	bne.n	800ab60 <_printf_common+0x48>
 800ab52:	f104 0a19 	add.w	sl, r4, #25
 800ab56:	68e3      	ldr	r3, [r4, #12]
 800ab58:	6832      	ldr	r2, [r6, #0]
 800ab5a:	1a9b      	subs	r3, r3, r2
 800ab5c:	42ab      	cmp	r3, r5
 800ab5e:	dc26      	bgt.n	800abae <_printf_common+0x96>
 800ab60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab64:	6822      	ldr	r2, [r4, #0]
 800ab66:	3b00      	subs	r3, #0
 800ab68:	bf18      	it	ne
 800ab6a:	2301      	movne	r3, #1
 800ab6c:	0692      	lsls	r2, r2, #26
 800ab6e:	d42b      	bmi.n	800abc8 <_printf_common+0xb0>
 800ab70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab74:	4641      	mov	r1, r8
 800ab76:	4638      	mov	r0, r7
 800ab78:	47c8      	blx	r9
 800ab7a:	3001      	adds	r0, #1
 800ab7c:	d01e      	beq.n	800abbc <_printf_common+0xa4>
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	6922      	ldr	r2, [r4, #16]
 800ab82:	f003 0306 	and.w	r3, r3, #6
 800ab86:	2b04      	cmp	r3, #4
 800ab88:	bf02      	ittt	eq
 800ab8a:	68e5      	ldreq	r5, [r4, #12]
 800ab8c:	6833      	ldreq	r3, [r6, #0]
 800ab8e:	1aed      	subeq	r5, r5, r3
 800ab90:	68a3      	ldr	r3, [r4, #8]
 800ab92:	bf0c      	ite	eq
 800ab94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab98:	2500      	movne	r5, #0
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	bfc4      	itt	gt
 800ab9e:	1a9b      	subgt	r3, r3, r2
 800aba0:	18ed      	addgt	r5, r5, r3
 800aba2:	2600      	movs	r6, #0
 800aba4:	341a      	adds	r4, #26
 800aba6:	42b5      	cmp	r5, r6
 800aba8:	d11a      	bne.n	800abe0 <_printf_common+0xc8>
 800abaa:	2000      	movs	r0, #0
 800abac:	e008      	b.n	800abc0 <_printf_common+0xa8>
 800abae:	2301      	movs	r3, #1
 800abb0:	4652      	mov	r2, sl
 800abb2:	4641      	mov	r1, r8
 800abb4:	4638      	mov	r0, r7
 800abb6:	47c8      	blx	r9
 800abb8:	3001      	adds	r0, #1
 800abba:	d103      	bne.n	800abc4 <_printf_common+0xac>
 800abbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc4:	3501      	adds	r5, #1
 800abc6:	e7c6      	b.n	800ab56 <_printf_common+0x3e>
 800abc8:	18e1      	adds	r1, r4, r3
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	2030      	movs	r0, #48	@ 0x30
 800abce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abd2:	4422      	add	r2, r4
 800abd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800abdc:	3302      	adds	r3, #2
 800abde:	e7c7      	b.n	800ab70 <_printf_common+0x58>
 800abe0:	2301      	movs	r3, #1
 800abe2:	4622      	mov	r2, r4
 800abe4:	4641      	mov	r1, r8
 800abe6:	4638      	mov	r0, r7
 800abe8:	47c8      	blx	r9
 800abea:	3001      	adds	r0, #1
 800abec:	d0e6      	beq.n	800abbc <_printf_common+0xa4>
 800abee:	3601      	adds	r6, #1
 800abf0:	e7d9      	b.n	800aba6 <_printf_common+0x8e>
	...

0800abf4 <_printf_i>:
 800abf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abf8:	7e0f      	ldrb	r7, [r1, #24]
 800abfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800abfc:	2f78      	cmp	r7, #120	@ 0x78
 800abfe:	4691      	mov	r9, r2
 800ac00:	4680      	mov	r8, r0
 800ac02:	460c      	mov	r4, r1
 800ac04:	469a      	mov	sl, r3
 800ac06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac0a:	d807      	bhi.n	800ac1c <_printf_i+0x28>
 800ac0c:	2f62      	cmp	r7, #98	@ 0x62
 800ac0e:	d80a      	bhi.n	800ac26 <_printf_i+0x32>
 800ac10:	2f00      	cmp	r7, #0
 800ac12:	f000 80d1 	beq.w	800adb8 <_printf_i+0x1c4>
 800ac16:	2f58      	cmp	r7, #88	@ 0x58
 800ac18:	f000 80b8 	beq.w	800ad8c <_printf_i+0x198>
 800ac1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac24:	e03a      	b.n	800ac9c <_printf_i+0xa8>
 800ac26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac2a:	2b15      	cmp	r3, #21
 800ac2c:	d8f6      	bhi.n	800ac1c <_printf_i+0x28>
 800ac2e:	a101      	add	r1, pc, #4	@ (adr r1, 800ac34 <_printf_i+0x40>)
 800ac30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac34:	0800ac8d 	.word	0x0800ac8d
 800ac38:	0800aca1 	.word	0x0800aca1
 800ac3c:	0800ac1d 	.word	0x0800ac1d
 800ac40:	0800ac1d 	.word	0x0800ac1d
 800ac44:	0800ac1d 	.word	0x0800ac1d
 800ac48:	0800ac1d 	.word	0x0800ac1d
 800ac4c:	0800aca1 	.word	0x0800aca1
 800ac50:	0800ac1d 	.word	0x0800ac1d
 800ac54:	0800ac1d 	.word	0x0800ac1d
 800ac58:	0800ac1d 	.word	0x0800ac1d
 800ac5c:	0800ac1d 	.word	0x0800ac1d
 800ac60:	0800ad9f 	.word	0x0800ad9f
 800ac64:	0800accb 	.word	0x0800accb
 800ac68:	0800ad59 	.word	0x0800ad59
 800ac6c:	0800ac1d 	.word	0x0800ac1d
 800ac70:	0800ac1d 	.word	0x0800ac1d
 800ac74:	0800adc1 	.word	0x0800adc1
 800ac78:	0800ac1d 	.word	0x0800ac1d
 800ac7c:	0800accb 	.word	0x0800accb
 800ac80:	0800ac1d 	.word	0x0800ac1d
 800ac84:	0800ac1d 	.word	0x0800ac1d
 800ac88:	0800ad61 	.word	0x0800ad61
 800ac8c:	6833      	ldr	r3, [r6, #0]
 800ac8e:	1d1a      	adds	r2, r3, #4
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	6032      	str	r2, [r6, #0]
 800ac94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e09c      	b.n	800adda <_printf_i+0x1e6>
 800aca0:	6833      	ldr	r3, [r6, #0]
 800aca2:	6820      	ldr	r0, [r4, #0]
 800aca4:	1d19      	adds	r1, r3, #4
 800aca6:	6031      	str	r1, [r6, #0]
 800aca8:	0606      	lsls	r6, r0, #24
 800acaa:	d501      	bpl.n	800acb0 <_printf_i+0xbc>
 800acac:	681d      	ldr	r5, [r3, #0]
 800acae:	e003      	b.n	800acb8 <_printf_i+0xc4>
 800acb0:	0645      	lsls	r5, r0, #25
 800acb2:	d5fb      	bpl.n	800acac <_printf_i+0xb8>
 800acb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acb8:	2d00      	cmp	r5, #0
 800acba:	da03      	bge.n	800acc4 <_printf_i+0xd0>
 800acbc:	232d      	movs	r3, #45	@ 0x2d
 800acbe:	426d      	negs	r5, r5
 800acc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acc4:	4858      	ldr	r0, [pc, #352]	@ (800ae28 <_printf_i+0x234>)
 800acc6:	230a      	movs	r3, #10
 800acc8:	e011      	b.n	800acee <_printf_i+0xfa>
 800acca:	6821      	ldr	r1, [r4, #0]
 800accc:	6833      	ldr	r3, [r6, #0]
 800acce:	0608      	lsls	r0, r1, #24
 800acd0:	f853 5b04 	ldr.w	r5, [r3], #4
 800acd4:	d402      	bmi.n	800acdc <_printf_i+0xe8>
 800acd6:	0649      	lsls	r1, r1, #25
 800acd8:	bf48      	it	mi
 800acda:	b2ad      	uxthmi	r5, r5
 800acdc:	2f6f      	cmp	r7, #111	@ 0x6f
 800acde:	4852      	ldr	r0, [pc, #328]	@ (800ae28 <_printf_i+0x234>)
 800ace0:	6033      	str	r3, [r6, #0]
 800ace2:	bf14      	ite	ne
 800ace4:	230a      	movne	r3, #10
 800ace6:	2308      	moveq	r3, #8
 800ace8:	2100      	movs	r1, #0
 800acea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800acee:	6866      	ldr	r6, [r4, #4]
 800acf0:	60a6      	str	r6, [r4, #8]
 800acf2:	2e00      	cmp	r6, #0
 800acf4:	db05      	blt.n	800ad02 <_printf_i+0x10e>
 800acf6:	6821      	ldr	r1, [r4, #0]
 800acf8:	432e      	orrs	r6, r5
 800acfa:	f021 0104 	bic.w	r1, r1, #4
 800acfe:	6021      	str	r1, [r4, #0]
 800ad00:	d04b      	beq.n	800ad9a <_printf_i+0x1a6>
 800ad02:	4616      	mov	r6, r2
 800ad04:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad08:	fb03 5711 	mls	r7, r3, r1, r5
 800ad0c:	5dc7      	ldrb	r7, [r0, r7]
 800ad0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad12:	462f      	mov	r7, r5
 800ad14:	42bb      	cmp	r3, r7
 800ad16:	460d      	mov	r5, r1
 800ad18:	d9f4      	bls.n	800ad04 <_printf_i+0x110>
 800ad1a:	2b08      	cmp	r3, #8
 800ad1c:	d10b      	bne.n	800ad36 <_printf_i+0x142>
 800ad1e:	6823      	ldr	r3, [r4, #0]
 800ad20:	07df      	lsls	r7, r3, #31
 800ad22:	d508      	bpl.n	800ad36 <_printf_i+0x142>
 800ad24:	6923      	ldr	r3, [r4, #16]
 800ad26:	6861      	ldr	r1, [r4, #4]
 800ad28:	4299      	cmp	r1, r3
 800ad2a:	bfde      	ittt	le
 800ad2c:	2330      	movle	r3, #48	@ 0x30
 800ad2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad32:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ad36:	1b92      	subs	r2, r2, r6
 800ad38:	6122      	str	r2, [r4, #16]
 800ad3a:	f8cd a000 	str.w	sl, [sp]
 800ad3e:	464b      	mov	r3, r9
 800ad40:	aa03      	add	r2, sp, #12
 800ad42:	4621      	mov	r1, r4
 800ad44:	4640      	mov	r0, r8
 800ad46:	f7ff fee7 	bl	800ab18 <_printf_common>
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	d14a      	bne.n	800ade4 <_printf_i+0x1f0>
 800ad4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad52:	b004      	add	sp, #16
 800ad54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	f043 0320 	orr.w	r3, r3, #32
 800ad5e:	6023      	str	r3, [r4, #0]
 800ad60:	4832      	ldr	r0, [pc, #200]	@ (800ae2c <_printf_i+0x238>)
 800ad62:	2778      	movs	r7, #120	@ 0x78
 800ad64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	6831      	ldr	r1, [r6, #0]
 800ad6c:	061f      	lsls	r7, r3, #24
 800ad6e:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad72:	d402      	bmi.n	800ad7a <_printf_i+0x186>
 800ad74:	065f      	lsls	r7, r3, #25
 800ad76:	bf48      	it	mi
 800ad78:	b2ad      	uxthmi	r5, r5
 800ad7a:	6031      	str	r1, [r6, #0]
 800ad7c:	07d9      	lsls	r1, r3, #31
 800ad7e:	bf44      	itt	mi
 800ad80:	f043 0320 	orrmi.w	r3, r3, #32
 800ad84:	6023      	strmi	r3, [r4, #0]
 800ad86:	b11d      	cbz	r5, 800ad90 <_printf_i+0x19c>
 800ad88:	2310      	movs	r3, #16
 800ad8a:	e7ad      	b.n	800ace8 <_printf_i+0xf4>
 800ad8c:	4826      	ldr	r0, [pc, #152]	@ (800ae28 <_printf_i+0x234>)
 800ad8e:	e7e9      	b.n	800ad64 <_printf_i+0x170>
 800ad90:	6823      	ldr	r3, [r4, #0]
 800ad92:	f023 0320 	bic.w	r3, r3, #32
 800ad96:	6023      	str	r3, [r4, #0]
 800ad98:	e7f6      	b.n	800ad88 <_printf_i+0x194>
 800ad9a:	4616      	mov	r6, r2
 800ad9c:	e7bd      	b.n	800ad1a <_printf_i+0x126>
 800ad9e:	6833      	ldr	r3, [r6, #0]
 800ada0:	6825      	ldr	r5, [r4, #0]
 800ada2:	6961      	ldr	r1, [r4, #20]
 800ada4:	1d18      	adds	r0, r3, #4
 800ada6:	6030      	str	r0, [r6, #0]
 800ada8:	062e      	lsls	r6, r5, #24
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	d501      	bpl.n	800adb2 <_printf_i+0x1be>
 800adae:	6019      	str	r1, [r3, #0]
 800adb0:	e002      	b.n	800adb8 <_printf_i+0x1c4>
 800adb2:	0668      	lsls	r0, r5, #25
 800adb4:	d5fb      	bpl.n	800adae <_printf_i+0x1ba>
 800adb6:	8019      	strh	r1, [r3, #0]
 800adb8:	2300      	movs	r3, #0
 800adba:	6123      	str	r3, [r4, #16]
 800adbc:	4616      	mov	r6, r2
 800adbe:	e7bc      	b.n	800ad3a <_printf_i+0x146>
 800adc0:	6833      	ldr	r3, [r6, #0]
 800adc2:	1d1a      	adds	r2, r3, #4
 800adc4:	6032      	str	r2, [r6, #0]
 800adc6:	681e      	ldr	r6, [r3, #0]
 800adc8:	6862      	ldr	r2, [r4, #4]
 800adca:	2100      	movs	r1, #0
 800adcc:	4630      	mov	r0, r6
 800adce:	f7f5 fa2f 	bl	8000230 <memchr>
 800add2:	b108      	cbz	r0, 800add8 <_printf_i+0x1e4>
 800add4:	1b80      	subs	r0, r0, r6
 800add6:	6060      	str	r0, [r4, #4]
 800add8:	6863      	ldr	r3, [r4, #4]
 800adda:	6123      	str	r3, [r4, #16]
 800addc:	2300      	movs	r3, #0
 800adde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ade2:	e7aa      	b.n	800ad3a <_printf_i+0x146>
 800ade4:	6923      	ldr	r3, [r4, #16]
 800ade6:	4632      	mov	r2, r6
 800ade8:	4649      	mov	r1, r9
 800adea:	4640      	mov	r0, r8
 800adec:	47d0      	blx	sl
 800adee:	3001      	adds	r0, #1
 800adf0:	d0ad      	beq.n	800ad4e <_printf_i+0x15a>
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	079b      	lsls	r3, r3, #30
 800adf6:	d413      	bmi.n	800ae20 <_printf_i+0x22c>
 800adf8:	68e0      	ldr	r0, [r4, #12]
 800adfa:	9b03      	ldr	r3, [sp, #12]
 800adfc:	4298      	cmp	r0, r3
 800adfe:	bfb8      	it	lt
 800ae00:	4618      	movlt	r0, r3
 800ae02:	e7a6      	b.n	800ad52 <_printf_i+0x15e>
 800ae04:	2301      	movs	r3, #1
 800ae06:	4632      	mov	r2, r6
 800ae08:	4649      	mov	r1, r9
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	47d0      	blx	sl
 800ae0e:	3001      	adds	r0, #1
 800ae10:	d09d      	beq.n	800ad4e <_printf_i+0x15a>
 800ae12:	3501      	adds	r5, #1
 800ae14:	68e3      	ldr	r3, [r4, #12]
 800ae16:	9903      	ldr	r1, [sp, #12]
 800ae18:	1a5b      	subs	r3, r3, r1
 800ae1a:	42ab      	cmp	r3, r5
 800ae1c:	dcf2      	bgt.n	800ae04 <_printf_i+0x210>
 800ae1e:	e7eb      	b.n	800adf8 <_printf_i+0x204>
 800ae20:	2500      	movs	r5, #0
 800ae22:	f104 0619 	add.w	r6, r4, #25
 800ae26:	e7f5      	b.n	800ae14 <_printf_i+0x220>
 800ae28:	0800f980 	.word	0x0800f980
 800ae2c:	0800f991 	.word	0x0800f991

0800ae30 <_scanf_float>:
 800ae30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae34:	b087      	sub	sp, #28
 800ae36:	4691      	mov	r9, r2
 800ae38:	9303      	str	r3, [sp, #12]
 800ae3a:	688b      	ldr	r3, [r1, #8]
 800ae3c:	1e5a      	subs	r2, r3, #1
 800ae3e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ae42:	bf81      	itttt	hi
 800ae44:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ae48:	eb03 0b05 	addhi.w	fp, r3, r5
 800ae4c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ae50:	608b      	strhi	r3, [r1, #8]
 800ae52:	680b      	ldr	r3, [r1, #0]
 800ae54:	460a      	mov	r2, r1
 800ae56:	f04f 0500 	mov.w	r5, #0
 800ae5a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ae5e:	f842 3b1c 	str.w	r3, [r2], #28
 800ae62:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ae66:	4680      	mov	r8, r0
 800ae68:	460c      	mov	r4, r1
 800ae6a:	bf98      	it	ls
 800ae6c:	f04f 0b00 	movls.w	fp, #0
 800ae70:	9201      	str	r2, [sp, #4]
 800ae72:	4616      	mov	r6, r2
 800ae74:	46aa      	mov	sl, r5
 800ae76:	462f      	mov	r7, r5
 800ae78:	9502      	str	r5, [sp, #8]
 800ae7a:	68a2      	ldr	r2, [r4, #8]
 800ae7c:	b15a      	cbz	r2, 800ae96 <_scanf_float+0x66>
 800ae7e:	f8d9 3000 	ldr.w	r3, [r9]
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	2b4e      	cmp	r3, #78	@ 0x4e
 800ae86:	d863      	bhi.n	800af50 <_scanf_float+0x120>
 800ae88:	2b40      	cmp	r3, #64	@ 0x40
 800ae8a:	d83b      	bhi.n	800af04 <_scanf_float+0xd4>
 800ae8c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ae90:	b2c8      	uxtb	r0, r1
 800ae92:	280e      	cmp	r0, #14
 800ae94:	d939      	bls.n	800af0a <_scanf_float+0xda>
 800ae96:	b11f      	cbz	r7, 800aea0 <_scanf_float+0x70>
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae9e:	6023      	str	r3, [r4, #0]
 800aea0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800aea4:	f1ba 0f01 	cmp.w	sl, #1
 800aea8:	f200 8114 	bhi.w	800b0d4 <_scanf_float+0x2a4>
 800aeac:	9b01      	ldr	r3, [sp, #4]
 800aeae:	429e      	cmp	r6, r3
 800aeb0:	f200 8105 	bhi.w	800b0be <_scanf_float+0x28e>
 800aeb4:	2001      	movs	r0, #1
 800aeb6:	b007      	add	sp, #28
 800aeb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aebc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800aec0:	2a0d      	cmp	r2, #13
 800aec2:	d8e8      	bhi.n	800ae96 <_scanf_float+0x66>
 800aec4:	a101      	add	r1, pc, #4	@ (adr r1, 800aecc <_scanf_float+0x9c>)
 800aec6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aeca:	bf00      	nop
 800aecc:	0800b015 	.word	0x0800b015
 800aed0:	0800ae97 	.word	0x0800ae97
 800aed4:	0800ae97 	.word	0x0800ae97
 800aed8:	0800ae97 	.word	0x0800ae97
 800aedc:	0800b071 	.word	0x0800b071
 800aee0:	0800b04b 	.word	0x0800b04b
 800aee4:	0800ae97 	.word	0x0800ae97
 800aee8:	0800ae97 	.word	0x0800ae97
 800aeec:	0800b023 	.word	0x0800b023
 800aef0:	0800ae97 	.word	0x0800ae97
 800aef4:	0800ae97 	.word	0x0800ae97
 800aef8:	0800ae97 	.word	0x0800ae97
 800aefc:	0800ae97 	.word	0x0800ae97
 800af00:	0800afdf 	.word	0x0800afdf
 800af04:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800af08:	e7da      	b.n	800aec0 <_scanf_float+0x90>
 800af0a:	290e      	cmp	r1, #14
 800af0c:	d8c3      	bhi.n	800ae96 <_scanf_float+0x66>
 800af0e:	a001      	add	r0, pc, #4	@ (adr r0, 800af14 <_scanf_float+0xe4>)
 800af10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800af14:	0800afcf 	.word	0x0800afcf
 800af18:	0800ae97 	.word	0x0800ae97
 800af1c:	0800afcf 	.word	0x0800afcf
 800af20:	0800b05f 	.word	0x0800b05f
 800af24:	0800ae97 	.word	0x0800ae97
 800af28:	0800af71 	.word	0x0800af71
 800af2c:	0800afb5 	.word	0x0800afb5
 800af30:	0800afb5 	.word	0x0800afb5
 800af34:	0800afb5 	.word	0x0800afb5
 800af38:	0800afb5 	.word	0x0800afb5
 800af3c:	0800afb5 	.word	0x0800afb5
 800af40:	0800afb5 	.word	0x0800afb5
 800af44:	0800afb5 	.word	0x0800afb5
 800af48:	0800afb5 	.word	0x0800afb5
 800af4c:	0800afb5 	.word	0x0800afb5
 800af50:	2b6e      	cmp	r3, #110	@ 0x6e
 800af52:	d809      	bhi.n	800af68 <_scanf_float+0x138>
 800af54:	2b60      	cmp	r3, #96	@ 0x60
 800af56:	d8b1      	bhi.n	800aebc <_scanf_float+0x8c>
 800af58:	2b54      	cmp	r3, #84	@ 0x54
 800af5a:	d07b      	beq.n	800b054 <_scanf_float+0x224>
 800af5c:	2b59      	cmp	r3, #89	@ 0x59
 800af5e:	d19a      	bne.n	800ae96 <_scanf_float+0x66>
 800af60:	2d07      	cmp	r5, #7
 800af62:	d198      	bne.n	800ae96 <_scanf_float+0x66>
 800af64:	2508      	movs	r5, #8
 800af66:	e02f      	b.n	800afc8 <_scanf_float+0x198>
 800af68:	2b74      	cmp	r3, #116	@ 0x74
 800af6a:	d073      	beq.n	800b054 <_scanf_float+0x224>
 800af6c:	2b79      	cmp	r3, #121	@ 0x79
 800af6e:	e7f6      	b.n	800af5e <_scanf_float+0x12e>
 800af70:	6821      	ldr	r1, [r4, #0]
 800af72:	05c8      	lsls	r0, r1, #23
 800af74:	d51e      	bpl.n	800afb4 <_scanf_float+0x184>
 800af76:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800af7a:	6021      	str	r1, [r4, #0]
 800af7c:	3701      	adds	r7, #1
 800af7e:	f1bb 0f00 	cmp.w	fp, #0
 800af82:	d003      	beq.n	800af8c <_scanf_float+0x15c>
 800af84:	3201      	adds	r2, #1
 800af86:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800af8a:	60a2      	str	r2, [r4, #8]
 800af8c:	68a3      	ldr	r3, [r4, #8]
 800af8e:	3b01      	subs	r3, #1
 800af90:	60a3      	str	r3, [r4, #8]
 800af92:	6923      	ldr	r3, [r4, #16]
 800af94:	3301      	adds	r3, #1
 800af96:	6123      	str	r3, [r4, #16]
 800af98:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800af9c:	3b01      	subs	r3, #1
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f8c9 3004 	str.w	r3, [r9, #4]
 800afa4:	f340 8082 	ble.w	800b0ac <_scanf_float+0x27c>
 800afa8:	f8d9 3000 	ldr.w	r3, [r9]
 800afac:	3301      	adds	r3, #1
 800afae:	f8c9 3000 	str.w	r3, [r9]
 800afb2:	e762      	b.n	800ae7a <_scanf_float+0x4a>
 800afb4:	eb1a 0105 	adds.w	r1, sl, r5
 800afb8:	f47f af6d 	bne.w	800ae96 <_scanf_float+0x66>
 800afbc:	6822      	ldr	r2, [r4, #0]
 800afbe:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800afc2:	6022      	str	r2, [r4, #0]
 800afc4:	460d      	mov	r5, r1
 800afc6:	468a      	mov	sl, r1
 800afc8:	f806 3b01 	strb.w	r3, [r6], #1
 800afcc:	e7de      	b.n	800af8c <_scanf_float+0x15c>
 800afce:	6822      	ldr	r2, [r4, #0]
 800afd0:	0610      	lsls	r0, r2, #24
 800afd2:	f57f af60 	bpl.w	800ae96 <_scanf_float+0x66>
 800afd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800afda:	6022      	str	r2, [r4, #0]
 800afdc:	e7f4      	b.n	800afc8 <_scanf_float+0x198>
 800afde:	f1ba 0f00 	cmp.w	sl, #0
 800afe2:	d10c      	bne.n	800affe <_scanf_float+0x1ce>
 800afe4:	b977      	cbnz	r7, 800b004 <_scanf_float+0x1d4>
 800afe6:	6822      	ldr	r2, [r4, #0]
 800afe8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800afec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800aff0:	d108      	bne.n	800b004 <_scanf_float+0x1d4>
 800aff2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aff6:	6022      	str	r2, [r4, #0]
 800aff8:	f04f 0a01 	mov.w	sl, #1
 800affc:	e7e4      	b.n	800afc8 <_scanf_float+0x198>
 800affe:	f1ba 0f02 	cmp.w	sl, #2
 800b002:	d050      	beq.n	800b0a6 <_scanf_float+0x276>
 800b004:	2d01      	cmp	r5, #1
 800b006:	d002      	beq.n	800b00e <_scanf_float+0x1de>
 800b008:	2d04      	cmp	r5, #4
 800b00a:	f47f af44 	bne.w	800ae96 <_scanf_float+0x66>
 800b00e:	3501      	adds	r5, #1
 800b010:	b2ed      	uxtb	r5, r5
 800b012:	e7d9      	b.n	800afc8 <_scanf_float+0x198>
 800b014:	f1ba 0f01 	cmp.w	sl, #1
 800b018:	f47f af3d 	bne.w	800ae96 <_scanf_float+0x66>
 800b01c:	f04f 0a02 	mov.w	sl, #2
 800b020:	e7d2      	b.n	800afc8 <_scanf_float+0x198>
 800b022:	b975      	cbnz	r5, 800b042 <_scanf_float+0x212>
 800b024:	2f00      	cmp	r7, #0
 800b026:	f47f af37 	bne.w	800ae98 <_scanf_float+0x68>
 800b02a:	6822      	ldr	r2, [r4, #0]
 800b02c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b030:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b034:	f040 8103 	bne.w	800b23e <_scanf_float+0x40e>
 800b038:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b03c:	6022      	str	r2, [r4, #0]
 800b03e:	2501      	movs	r5, #1
 800b040:	e7c2      	b.n	800afc8 <_scanf_float+0x198>
 800b042:	2d03      	cmp	r5, #3
 800b044:	d0e3      	beq.n	800b00e <_scanf_float+0x1de>
 800b046:	2d05      	cmp	r5, #5
 800b048:	e7df      	b.n	800b00a <_scanf_float+0x1da>
 800b04a:	2d02      	cmp	r5, #2
 800b04c:	f47f af23 	bne.w	800ae96 <_scanf_float+0x66>
 800b050:	2503      	movs	r5, #3
 800b052:	e7b9      	b.n	800afc8 <_scanf_float+0x198>
 800b054:	2d06      	cmp	r5, #6
 800b056:	f47f af1e 	bne.w	800ae96 <_scanf_float+0x66>
 800b05a:	2507      	movs	r5, #7
 800b05c:	e7b4      	b.n	800afc8 <_scanf_float+0x198>
 800b05e:	6822      	ldr	r2, [r4, #0]
 800b060:	0591      	lsls	r1, r2, #22
 800b062:	f57f af18 	bpl.w	800ae96 <_scanf_float+0x66>
 800b066:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b06a:	6022      	str	r2, [r4, #0]
 800b06c:	9702      	str	r7, [sp, #8]
 800b06e:	e7ab      	b.n	800afc8 <_scanf_float+0x198>
 800b070:	6822      	ldr	r2, [r4, #0]
 800b072:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b076:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b07a:	d005      	beq.n	800b088 <_scanf_float+0x258>
 800b07c:	0550      	lsls	r0, r2, #21
 800b07e:	f57f af0a 	bpl.w	800ae96 <_scanf_float+0x66>
 800b082:	2f00      	cmp	r7, #0
 800b084:	f000 80db 	beq.w	800b23e <_scanf_float+0x40e>
 800b088:	0591      	lsls	r1, r2, #22
 800b08a:	bf58      	it	pl
 800b08c:	9902      	ldrpl	r1, [sp, #8]
 800b08e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b092:	bf58      	it	pl
 800b094:	1a79      	subpl	r1, r7, r1
 800b096:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b09a:	bf58      	it	pl
 800b09c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b0a0:	6022      	str	r2, [r4, #0]
 800b0a2:	2700      	movs	r7, #0
 800b0a4:	e790      	b.n	800afc8 <_scanf_float+0x198>
 800b0a6:	f04f 0a03 	mov.w	sl, #3
 800b0aa:	e78d      	b.n	800afc8 <_scanf_float+0x198>
 800b0ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b0b0:	4649      	mov	r1, r9
 800b0b2:	4640      	mov	r0, r8
 800b0b4:	4798      	blx	r3
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	f43f aedf 	beq.w	800ae7a <_scanf_float+0x4a>
 800b0bc:	e6eb      	b.n	800ae96 <_scanf_float+0x66>
 800b0be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b0c6:	464a      	mov	r2, r9
 800b0c8:	4640      	mov	r0, r8
 800b0ca:	4798      	blx	r3
 800b0cc:	6923      	ldr	r3, [r4, #16]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	6123      	str	r3, [r4, #16]
 800b0d2:	e6eb      	b.n	800aeac <_scanf_float+0x7c>
 800b0d4:	1e6b      	subs	r3, r5, #1
 800b0d6:	2b06      	cmp	r3, #6
 800b0d8:	d824      	bhi.n	800b124 <_scanf_float+0x2f4>
 800b0da:	2d02      	cmp	r5, #2
 800b0dc:	d836      	bhi.n	800b14c <_scanf_float+0x31c>
 800b0de:	9b01      	ldr	r3, [sp, #4]
 800b0e0:	429e      	cmp	r6, r3
 800b0e2:	f67f aee7 	bls.w	800aeb4 <_scanf_float+0x84>
 800b0e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b0ee:	464a      	mov	r2, r9
 800b0f0:	4640      	mov	r0, r8
 800b0f2:	4798      	blx	r3
 800b0f4:	6923      	ldr	r3, [r4, #16]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	6123      	str	r3, [r4, #16]
 800b0fa:	e7f0      	b.n	800b0de <_scanf_float+0x2ae>
 800b0fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b100:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b104:	464a      	mov	r2, r9
 800b106:	4640      	mov	r0, r8
 800b108:	4798      	blx	r3
 800b10a:	6923      	ldr	r3, [r4, #16]
 800b10c:	3b01      	subs	r3, #1
 800b10e:	6123      	str	r3, [r4, #16]
 800b110:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b114:	fa5f fa8a 	uxtb.w	sl, sl
 800b118:	f1ba 0f02 	cmp.w	sl, #2
 800b11c:	d1ee      	bne.n	800b0fc <_scanf_float+0x2cc>
 800b11e:	3d03      	subs	r5, #3
 800b120:	b2ed      	uxtb	r5, r5
 800b122:	1b76      	subs	r6, r6, r5
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	05da      	lsls	r2, r3, #23
 800b128:	d530      	bpl.n	800b18c <_scanf_float+0x35c>
 800b12a:	055b      	lsls	r3, r3, #21
 800b12c:	d511      	bpl.n	800b152 <_scanf_float+0x322>
 800b12e:	9b01      	ldr	r3, [sp, #4]
 800b130:	429e      	cmp	r6, r3
 800b132:	f67f aebf 	bls.w	800aeb4 <_scanf_float+0x84>
 800b136:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b13a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b13e:	464a      	mov	r2, r9
 800b140:	4640      	mov	r0, r8
 800b142:	4798      	blx	r3
 800b144:	6923      	ldr	r3, [r4, #16]
 800b146:	3b01      	subs	r3, #1
 800b148:	6123      	str	r3, [r4, #16]
 800b14a:	e7f0      	b.n	800b12e <_scanf_float+0x2fe>
 800b14c:	46aa      	mov	sl, r5
 800b14e:	46b3      	mov	fp, r6
 800b150:	e7de      	b.n	800b110 <_scanf_float+0x2e0>
 800b152:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b156:	6923      	ldr	r3, [r4, #16]
 800b158:	2965      	cmp	r1, #101	@ 0x65
 800b15a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b15e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800b162:	6123      	str	r3, [r4, #16]
 800b164:	d00c      	beq.n	800b180 <_scanf_float+0x350>
 800b166:	2945      	cmp	r1, #69	@ 0x45
 800b168:	d00a      	beq.n	800b180 <_scanf_float+0x350>
 800b16a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b16e:	464a      	mov	r2, r9
 800b170:	4640      	mov	r0, r8
 800b172:	4798      	blx	r3
 800b174:	6923      	ldr	r3, [r4, #16]
 800b176:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b17a:	3b01      	subs	r3, #1
 800b17c:	1eb5      	subs	r5, r6, #2
 800b17e:	6123      	str	r3, [r4, #16]
 800b180:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b184:	464a      	mov	r2, r9
 800b186:	4640      	mov	r0, r8
 800b188:	4798      	blx	r3
 800b18a:	462e      	mov	r6, r5
 800b18c:	6822      	ldr	r2, [r4, #0]
 800b18e:	f012 0210 	ands.w	r2, r2, #16
 800b192:	d001      	beq.n	800b198 <_scanf_float+0x368>
 800b194:	2000      	movs	r0, #0
 800b196:	e68e      	b.n	800aeb6 <_scanf_float+0x86>
 800b198:	7032      	strb	r2, [r6, #0]
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b1a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1a4:	d125      	bne.n	800b1f2 <_scanf_float+0x3c2>
 800b1a6:	9b02      	ldr	r3, [sp, #8]
 800b1a8:	429f      	cmp	r7, r3
 800b1aa:	d00a      	beq.n	800b1c2 <_scanf_float+0x392>
 800b1ac:	1bda      	subs	r2, r3, r7
 800b1ae:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b1b2:	429e      	cmp	r6, r3
 800b1b4:	bf28      	it	cs
 800b1b6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b1ba:	4922      	ldr	r1, [pc, #136]	@ (800b244 <_scanf_float+0x414>)
 800b1bc:	4630      	mov	r0, r6
 800b1be:	f000 f87b 	bl	800b2b8 <siprintf>
 800b1c2:	9901      	ldr	r1, [sp, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	4640      	mov	r0, r8
 800b1c8:	f000 ffb2 	bl	800c130 <_strtod_r>
 800b1cc:	9b03      	ldr	r3, [sp, #12]
 800b1ce:	6821      	ldr	r1, [r4, #0]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f011 0f02 	tst.w	r1, #2
 800b1d6:	ec57 6b10 	vmov	r6, r7, d0
 800b1da:	f103 0204 	add.w	r2, r3, #4
 800b1de:	d015      	beq.n	800b20c <_scanf_float+0x3dc>
 800b1e0:	9903      	ldr	r1, [sp, #12]
 800b1e2:	600a      	str	r2, [r1, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	e9c3 6700 	strd	r6, r7, [r3]
 800b1ea:	68e3      	ldr	r3, [r4, #12]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	60e3      	str	r3, [r4, #12]
 800b1f0:	e7d0      	b.n	800b194 <_scanf_float+0x364>
 800b1f2:	9b04      	ldr	r3, [sp, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d0e4      	beq.n	800b1c2 <_scanf_float+0x392>
 800b1f8:	9905      	ldr	r1, [sp, #20]
 800b1fa:	230a      	movs	r3, #10
 800b1fc:	3101      	adds	r1, #1
 800b1fe:	4640      	mov	r0, r8
 800b200:	f001 f816 	bl	800c230 <_strtol_r>
 800b204:	9b04      	ldr	r3, [sp, #16]
 800b206:	9e05      	ldr	r6, [sp, #20]
 800b208:	1ac2      	subs	r2, r0, r3
 800b20a:	e7d0      	b.n	800b1ae <_scanf_float+0x37e>
 800b20c:	f011 0f04 	tst.w	r1, #4
 800b210:	9903      	ldr	r1, [sp, #12]
 800b212:	600a      	str	r2, [r1, #0]
 800b214:	d1e6      	bne.n	800b1e4 <_scanf_float+0x3b4>
 800b216:	681d      	ldr	r5, [r3, #0]
 800b218:	4632      	mov	r2, r6
 800b21a:	463b      	mov	r3, r7
 800b21c:	4630      	mov	r0, r6
 800b21e:	4639      	mov	r1, r7
 800b220:	f7f5 fcb4 	bl	8000b8c <__aeabi_dcmpun>
 800b224:	b128      	cbz	r0, 800b232 <_scanf_float+0x402>
 800b226:	4808      	ldr	r0, [pc, #32]	@ (800b248 <_scanf_float+0x418>)
 800b228:	f001 f8de 	bl	800c3e8 <nanf>
 800b22c:	ed85 0a00 	vstr	s0, [r5]
 800b230:	e7db      	b.n	800b1ea <_scanf_float+0x3ba>
 800b232:	4630      	mov	r0, r6
 800b234:	4639      	mov	r1, r7
 800b236:	f7f5 fd07 	bl	8000c48 <__aeabi_d2f>
 800b23a:	6028      	str	r0, [r5, #0]
 800b23c:	e7d5      	b.n	800b1ea <_scanf_float+0x3ba>
 800b23e:	2700      	movs	r7, #0
 800b240:	e62e      	b.n	800aea0 <_scanf_float+0x70>
 800b242:	bf00      	nop
 800b244:	0800f9a2 	.word	0x0800f9a2
 800b248:	0800fb5e 	.word	0x0800fb5e

0800b24c <sniprintf>:
 800b24c:	b40c      	push	{r2, r3}
 800b24e:	b530      	push	{r4, r5, lr}
 800b250:	4b18      	ldr	r3, [pc, #96]	@ (800b2b4 <sniprintf+0x68>)
 800b252:	1e0c      	subs	r4, r1, #0
 800b254:	681d      	ldr	r5, [r3, #0]
 800b256:	b09d      	sub	sp, #116	@ 0x74
 800b258:	da08      	bge.n	800b26c <sniprintf+0x20>
 800b25a:	238b      	movs	r3, #139	@ 0x8b
 800b25c:	602b      	str	r3, [r5, #0]
 800b25e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b262:	b01d      	add	sp, #116	@ 0x74
 800b264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b268:	b002      	add	sp, #8
 800b26a:	4770      	bx	lr
 800b26c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b270:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b274:	f04f 0300 	mov.w	r3, #0
 800b278:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b27a:	bf14      	ite	ne
 800b27c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b280:	4623      	moveq	r3, r4
 800b282:	9304      	str	r3, [sp, #16]
 800b284:	9307      	str	r3, [sp, #28]
 800b286:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b28a:	9002      	str	r0, [sp, #8]
 800b28c:	9006      	str	r0, [sp, #24]
 800b28e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b292:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b294:	ab21      	add	r3, sp, #132	@ 0x84
 800b296:	a902      	add	r1, sp, #8
 800b298:	4628      	mov	r0, r5
 800b29a:	9301      	str	r3, [sp, #4]
 800b29c:	f002 fae2 	bl	800d864 <_svfiprintf_r>
 800b2a0:	1c43      	adds	r3, r0, #1
 800b2a2:	bfbc      	itt	lt
 800b2a4:	238b      	movlt	r3, #139	@ 0x8b
 800b2a6:	602b      	strlt	r3, [r5, #0]
 800b2a8:	2c00      	cmp	r4, #0
 800b2aa:	d0da      	beq.n	800b262 <sniprintf+0x16>
 800b2ac:	9b02      	ldr	r3, [sp, #8]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	701a      	strb	r2, [r3, #0]
 800b2b2:	e7d6      	b.n	800b262 <sniprintf+0x16>
 800b2b4:	20000540 	.word	0x20000540

0800b2b8 <siprintf>:
 800b2b8:	b40e      	push	{r1, r2, r3}
 800b2ba:	b510      	push	{r4, lr}
 800b2bc:	b09d      	sub	sp, #116	@ 0x74
 800b2be:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b2c0:	9002      	str	r0, [sp, #8]
 800b2c2:	9006      	str	r0, [sp, #24]
 800b2c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b2c8:	480a      	ldr	r0, [pc, #40]	@ (800b2f4 <siprintf+0x3c>)
 800b2ca:	9107      	str	r1, [sp, #28]
 800b2cc:	9104      	str	r1, [sp, #16]
 800b2ce:	490a      	ldr	r1, [pc, #40]	@ (800b2f8 <siprintf+0x40>)
 800b2d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2d4:	9105      	str	r1, [sp, #20]
 800b2d6:	2400      	movs	r4, #0
 800b2d8:	a902      	add	r1, sp, #8
 800b2da:	6800      	ldr	r0, [r0, #0]
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b2e0:	f002 fac0 	bl	800d864 <_svfiprintf_r>
 800b2e4:	9b02      	ldr	r3, [sp, #8]
 800b2e6:	701c      	strb	r4, [r3, #0]
 800b2e8:	b01d      	add	sp, #116	@ 0x74
 800b2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2ee:	b003      	add	sp, #12
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	20000540 	.word	0x20000540
 800b2f8:	ffff0208 	.word	0xffff0208

0800b2fc <siscanf>:
 800b2fc:	b40e      	push	{r1, r2, r3}
 800b2fe:	b570      	push	{r4, r5, r6, lr}
 800b300:	b09d      	sub	sp, #116	@ 0x74
 800b302:	ac21      	add	r4, sp, #132	@ 0x84
 800b304:	2500      	movs	r5, #0
 800b306:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800b30a:	f854 6b04 	ldr.w	r6, [r4], #4
 800b30e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b312:	951b      	str	r5, [sp, #108]	@ 0x6c
 800b314:	9002      	str	r0, [sp, #8]
 800b316:	9006      	str	r0, [sp, #24]
 800b318:	f7f4 ffda 	bl	80002d0 <strlen>
 800b31c:	4b0b      	ldr	r3, [pc, #44]	@ (800b34c <siscanf+0x50>)
 800b31e:	9003      	str	r0, [sp, #12]
 800b320:	9007      	str	r0, [sp, #28]
 800b322:	480b      	ldr	r0, [pc, #44]	@ (800b350 <siscanf+0x54>)
 800b324:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b326:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b32a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b32e:	4632      	mov	r2, r6
 800b330:	4623      	mov	r3, r4
 800b332:	a902      	add	r1, sp, #8
 800b334:	6800      	ldr	r0, [r0, #0]
 800b336:	950f      	str	r5, [sp, #60]	@ 0x3c
 800b338:	9514      	str	r5, [sp, #80]	@ 0x50
 800b33a:	9401      	str	r4, [sp, #4]
 800b33c:	f002 fbe8 	bl	800db10 <__ssvfiscanf_r>
 800b340:	b01d      	add	sp, #116	@ 0x74
 800b342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b346:	b003      	add	sp, #12
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	0800b377 	.word	0x0800b377
 800b350:	20000540 	.word	0x20000540

0800b354 <__sread>:
 800b354:	b510      	push	{r4, lr}
 800b356:	460c      	mov	r4, r1
 800b358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b35c:	f000 ffc8 	bl	800c2f0 <_read_r>
 800b360:	2800      	cmp	r0, #0
 800b362:	bfab      	itete	ge
 800b364:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b366:	89a3      	ldrhlt	r3, [r4, #12]
 800b368:	181b      	addge	r3, r3, r0
 800b36a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b36e:	bfac      	ite	ge
 800b370:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b372:	81a3      	strhlt	r3, [r4, #12]
 800b374:	bd10      	pop	{r4, pc}

0800b376 <__seofread>:
 800b376:	2000      	movs	r0, #0
 800b378:	4770      	bx	lr

0800b37a <__swrite>:
 800b37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b37e:	461f      	mov	r7, r3
 800b380:	898b      	ldrh	r3, [r1, #12]
 800b382:	05db      	lsls	r3, r3, #23
 800b384:	4605      	mov	r5, r0
 800b386:	460c      	mov	r4, r1
 800b388:	4616      	mov	r6, r2
 800b38a:	d505      	bpl.n	800b398 <__swrite+0x1e>
 800b38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b390:	2302      	movs	r3, #2
 800b392:	2200      	movs	r2, #0
 800b394:	f000 ff9a 	bl	800c2cc <_lseek_r>
 800b398:	89a3      	ldrh	r3, [r4, #12]
 800b39a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b39e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3a2:	81a3      	strh	r3, [r4, #12]
 800b3a4:	4632      	mov	r2, r6
 800b3a6:	463b      	mov	r3, r7
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ae:	f000 bfb1 	b.w	800c314 <_write_r>

0800b3b2 <__sseek>:
 800b3b2:	b510      	push	{r4, lr}
 800b3b4:	460c      	mov	r4, r1
 800b3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ba:	f000 ff87 	bl	800c2cc <_lseek_r>
 800b3be:	1c43      	adds	r3, r0, #1
 800b3c0:	89a3      	ldrh	r3, [r4, #12]
 800b3c2:	bf15      	itete	ne
 800b3c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b3c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b3ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b3ce:	81a3      	strheq	r3, [r4, #12]
 800b3d0:	bf18      	it	ne
 800b3d2:	81a3      	strhne	r3, [r4, #12]
 800b3d4:	bd10      	pop	{r4, pc}

0800b3d6 <__sclose>:
 800b3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3da:	f000 bfdf 	b.w	800c39c <_close_r>
	...

0800b3e0 <std>:
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	e9c0 3300 	strd	r3, r3, [r0]
 800b3ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3ee:	6083      	str	r3, [r0, #8]
 800b3f0:	8181      	strh	r1, [r0, #12]
 800b3f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b3f4:	81c2      	strh	r2, [r0, #14]
 800b3f6:	6183      	str	r3, [r0, #24]
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	2208      	movs	r2, #8
 800b3fc:	305c      	adds	r0, #92	@ 0x5c
 800b3fe:	f000 ff37 	bl	800c270 <memset>
 800b402:	4b0d      	ldr	r3, [pc, #52]	@ (800b438 <std+0x58>)
 800b404:	6263      	str	r3, [r4, #36]	@ 0x24
 800b406:	4b0d      	ldr	r3, [pc, #52]	@ (800b43c <std+0x5c>)
 800b408:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b40a:	4b0d      	ldr	r3, [pc, #52]	@ (800b440 <std+0x60>)
 800b40c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b40e:	4b0d      	ldr	r3, [pc, #52]	@ (800b444 <std+0x64>)
 800b410:	6323      	str	r3, [r4, #48]	@ 0x30
 800b412:	4b0d      	ldr	r3, [pc, #52]	@ (800b448 <std+0x68>)
 800b414:	6224      	str	r4, [r4, #32]
 800b416:	429c      	cmp	r4, r3
 800b418:	d006      	beq.n	800b428 <std+0x48>
 800b41a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b41e:	4294      	cmp	r4, r2
 800b420:	d002      	beq.n	800b428 <std+0x48>
 800b422:	33d0      	adds	r3, #208	@ 0xd0
 800b424:	429c      	cmp	r4, r3
 800b426:	d105      	bne.n	800b434 <std+0x54>
 800b428:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b430:	f000 bfac 	b.w	800c38c <__retarget_lock_init_recursive>
 800b434:	bd10      	pop	{r4, pc}
 800b436:	bf00      	nop
 800b438:	0800b355 	.word	0x0800b355
 800b43c:	0800b37b 	.word	0x0800b37b
 800b440:	0800b3b3 	.word	0x0800b3b3
 800b444:	0800b3d7 	.word	0x0800b3d7
 800b448:	20000bf8 	.word	0x20000bf8

0800b44c <stdio_exit_handler>:
 800b44c:	4a02      	ldr	r2, [pc, #8]	@ (800b458 <stdio_exit_handler+0xc>)
 800b44e:	4903      	ldr	r1, [pc, #12]	@ (800b45c <stdio_exit_handler+0x10>)
 800b450:	4803      	ldr	r0, [pc, #12]	@ (800b460 <stdio_exit_handler+0x14>)
 800b452:	f000 beef 	b.w	800c234 <_fwalk_sglue>
 800b456:	bf00      	nop
 800b458:	200003c8 	.word	0x200003c8
 800b45c:	0800e38d 	.word	0x0800e38d
 800b460:	20000544 	.word	0x20000544

0800b464 <cleanup_stdio>:
 800b464:	6841      	ldr	r1, [r0, #4]
 800b466:	4b0c      	ldr	r3, [pc, #48]	@ (800b498 <cleanup_stdio+0x34>)
 800b468:	4299      	cmp	r1, r3
 800b46a:	b510      	push	{r4, lr}
 800b46c:	4604      	mov	r4, r0
 800b46e:	d001      	beq.n	800b474 <cleanup_stdio+0x10>
 800b470:	f002 ff8c 	bl	800e38c <_fflush_r>
 800b474:	68a1      	ldr	r1, [r4, #8]
 800b476:	4b09      	ldr	r3, [pc, #36]	@ (800b49c <cleanup_stdio+0x38>)
 800b478:	4299      	cmp	r1, r3
 800b47a:	d002      	beq.n	800b482 <cleanup_stdio+0x1e>
 800b47c:	4620      	mov	r0, r4
 800b47e:	f002 ff85 	bl	800e38c <_fflush_r>
 800b482:	68e1      	ldr	r1, [r4, #12]
 800b484:	4b06      	ldr	r3, [pc, #24]	@ (800b4a0 <cleanup_stdio+0x3c>)
 800b486:	4299      	cmp	r1, r3
 800b488:	d004      	beq.n	800b494 <cleanup_stdio+0x30>
 800b48a:	4620      	mov	r0, r4
 800b48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b490:	f002 bf7c 	b.w	800e38c <_fflush_r>
 800b494:	bd10      	pop	{r4, pc}
 800b496:	bf00      	nop
 800b498:	20000bf8 	.word	0x20000bf8
 800b49c:	20000c60 	.word	0x20000c60
 800b4a0:	20000cc8 	.word	0x20000cc8

0800b4a4 <global_stdio_init.part.0>:
 800b4a4:	b510      	push	{r4, lr}
 800b4a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b4d4 <global_stdio_init.part.0+0x30>)
 800b4a8:	4c0b      	ldr	r4, [pc, #44]	@ (800b4d8 <global_stdio_init.part.0+0x34>)
 800b4aa:	4a0c      	ldr	r2, [pc, #48]	@ (800b4dc <global_stdio_init.part.0+0x38>)
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	2104      	movs	r1, #4
 800b4b4:	f7ff ff94 	bl	800b3e0 <std>
 800b4b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4bc:	2201      	movs	r2, #1
 800b4be:	2109      	movs	r1, #9
 800b4c0:	f7ff ff8e 	bl	800b3e0 <std>
 800b4c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b4c8:	2202      	movs	r2, #2
 800b4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ce:	2112      	movs	r1, #18
 800b4d0:	f7ff bf86 	b.w	800b3e0 <std>
 800b4d4:	20000d30 	.word	0x20000d30
 800b4d8:	20000bf8 	.word	0x20000bf8
 800b4dc:	0800b44d 	.word	0x0800b44d

0800b4e0 <__sfp_lock_acquire>:
 800b4e0:	4801      	ldr	r0, [pc, #4]	@ (800b4e8 <__sfp_lock_acquire+0x8>)
 800b4e2:	f000 bf54 	b.w	800c38e <__retarget_lock_acquire_recursive>
 800b4e6:	bf00      	nop
 800b4e8:	20000d35 	.word	0x20000d35

0800b4ec <__sfp_lock_release>:
 800b4ec:	4801      	ldr	r0, [pc, #4]	@ (800b4f4 <__sfp_lock_release+0x8>)
 800b4ee:	f000 bf4f 	b.w	800c390 <__retarget_lock_release_recursive>
 800b4f2:	bf00      	nop
 800b4f4:	20000d35 	.word	0x20000d35

0800b4f8 <__sinit>:
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	f7ff fff0 	bl	800b4e0 <__sfp_lock_acquire>
 800b500:	6a23      	ldr	r3, [r4, #32]
 800b502:	b11b      	cbz	r3, 800b50c <__sinit+0x14>
 800b504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b508:	f7ff bff0 	b.w	800b4ec <__sfp_lock_release>
 800b50c:	4b04      	ldr	r3, [pc, #16]	@ (800b520 <__sinit+0x28>)
 800b50e:	6223      	str	r3, [r4, #32]
 800b510:	4b04      	ldr	r3, [pc, #16]	@ (800b524 <__sinit+0x2c>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1f5      	bne.n	800b504 <__sinit+0xc>
 800b518:	f7ff ffc4 	bl	800b4a4 <global_stdio_init.part.0>
 800b51c:	e7f2      	b.n	800b504 <__sinit+0xc>
 800b51e:	bf00      	nop
 800b520:	0800b465 	.word	0x0800b465
 800b524:	20000d30 	.word	0x20000d30

0800b528 <sulp>:
 800b528:	b570      	push	{r4, r5, r6, lr}
 800b52a:	4604      	mov	r4, r0
 800b52c:	460d      	mov	r5, r1
 800b52e:	ec45 4b10 	vmov	d0, r4, r5
 800b532:	4616      	mov	r6, r2
 800b534:	f003 faca 	bl	800eacc <__ulp>
 800b538:	ec51 0b10 	vmov	r0, r1, d0
 800b53c:	b17e      	cbz	r6, 800b55e <sulp+0x36>
 800b53e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b542:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b546:	2b00      	cmp	r3, #0
 800b548:	dd09      	ble.n	800b55e <sulp+0x36>
 800b54a:	051b      	lsls	r3, r3, #20
 800b54c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b550:	2400      	movs	r4, #0
 800b552:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b556:	4622      	mov	r2, r4
 800b558:	462b      	mov	r3, r5
 800b55a:	f7f5 f87d 	bl	8000658 <__aeabi_dmul>
 800b55e:	ec41 0b10 	vmov	d0, r0, r1
 800b562:	bd70      	pop	{r4, r5, r6, pc}
 800b564:	0000      	movs	r0, r0
	...

0800b568 <_strtod_l>:
 800b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	b09f      	sub	sp, #124	@ 0x7c
 800b56e:	460c      	mov	r4, r1
 800b570:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b572:	2200      	movs	r2, #0
 800b574:	921a      	str	r2, [sp, #104]	@ 0x68
 800b576:	9005      	str	r0, [sp, #20]
 800b578:	f04f 0a00 	mov.w	sl, #0
 800b57c:	f04f 0b00 	mov.w	fp, #0
 800b580:	460a      	mov	r2, r1
 800b582:	9219      	str	r2, [sp, #100]	@ 0x64
 800b584:	7811      	ldrb	r1, [r2, #0]
 800b586:	292b      	cmp	r1, #43	@ 0x2b
 800b588:	d04a      	beq.n	800b620 <_strtod_l+0xb8>
 800b58a:	d838      	bhi.n	800b5fe <_strtod_l+0x96>
 800b58c:	290d      	cmp	r1, #13
 800b58e:	d832      	bhi.n	800b5f6 <_strtod_l+0x8e>
 800b590:	2908      	cmp	r1, #8
 800b592:	d832      	bhi.n	800b5fa <_strtod_l+0x92>
 800b594:	2900      	cmp	r1, #0
 800b596:	d03b      	beq.n	800b610 <_strtod_l+0xa8>
 800b598:	2200      	movs	r2, #0
 800b59a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b59c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b59e:	782a      	ldrb	r2, [r5, #0]
 800b5a0:	2a30      	cmp	r2, #48	@ 0x30
 800b5a2:	f040 80b2 	bne.w	800b70a <_strtod_l+0x1a2>
 800b5a6:	786a      	ldrb	r2, [r5, #1]
 800b5a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b5ac:	2a58      	cmp	r2, #88	@ 0x58
 800b5ae:	d16e      	bne.n	800b68e <_strtod_l+0x126>
 800b5b0:	9302      	str	r3, [sp, #8]
 800b5b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5b4:	9301      	str	r3, [sp, #4]
 800b5b6:	ab1a      	add	r3, sp, #104	@ 0x68
 800b5b8:	9300      	str	r3, [sp, #0]
 800b5ba:	4a8f      	ldr	r2, [pc, #572]	@ (800b7f8 <_strtod_l+0x290>)
 800b5bc:	9805      	ldr	r0, [sp, #20]
 800b5be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b5c0:	a919      	add	r1, sp, #100	@ 0x64
 800b5c2:	f001 fe23 	bl	800d20c <__gethex>
 800b5c6:	f010 060f 	ands.w	r6, r0, #15
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	d005      	beq.n	800b5da <_strtod_l+0x72>
 800b5ce:	2e06      	cmp	r6, #6
 800b5d0:	d128      	bne.n	800b624 <_strtod_l+0xbc>
 800b5d2:	3501      	adds	r5, #1
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b5d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800b5da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f040 858e 	bne.w	800c0fe <_strtod_l+0xb96>
 800b5e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5e4:	b1cb      	cbz	r3, 800b61a <_strtod_l+0xb2>
 800b5e6:	4652      	mov	r2, sl
 800b5e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b5ec:	ec43 2b10 	vmov	d0, r2, r3
 800b5f0:	b01f      	add	sp, #124	@ 0x7c
 800b5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f6:	2920      	cmp	r1, #32
 800b5f8:	d1ce      	bne.n	800b598 <_strtod_l+0x30>
 800b5fa:	3201      	adds	r2, #1
 800b5fc:	e7c1      	b.n	800b582 <_strtod_l+0x1a>
 800b5fe:	292d      	cmp	r1, #45	@ 0x2d
 800b600:	d1ca      	bne.n	800b598 <_strtod_l+0x30>
 800b602:	2101      	movs	r1, #1
 800b604:	910e      	str	r1, [sp, #56]	@ 0x38
 800b606:	1c51      	adds	r1, r2, #1
 800b608:	9119      	str	r1, [sp, #100]	@ 0x64
 800b60a:	7852      	ldrb	r2, [r2, #1]
 800b60c:	2a00      	cmp	r2, #0
 800b60e:	d1c5      	bne.n	800b59c <_strtod_l+0x34>
 800b610:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b612:	9419      	str	r4, [sp, #100]	@ 0x64
 800b614:	2b00      	cmp	r3, #0
 800b616:	f040 8570 	bne.w	800c0fa <_strtod_l+0xb92>
 800b61a:	4652      	mov	r2, sl
 800b61c:	465b      	mov	r3, fp
 800b61e:	e7e5      	b.n	800b5ec <_strtod_l+0x84>
 800b620:	2100      	movs	r1, #0
 800b622:	e7ef      	b.n	800b604 <_strtod_l+0x9c>
 800b624:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b626:	b13a      	cbz	r2, 800b638 <_strtod_l+0xd0>
 800b628:	2135      	movs	r1, #53	@ 0x35
 800b62a:	a81c      	add	r0, sp, #112	@ 0x70
 800b62c:	f003 fb48 	bl	800ecc0 <__copybits>
 800b630:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b632:	9805      	ldr	r0, [sp, #20]
 800b634:	f002 ff1e 	bl	800e474 <_Bfree>
 800b638:	3e01      	subs	r6, #1
 800b63a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b63c:	2e04      	cmp	r6, #4
 800b63e:	d806      	bhi.n	800b64e <_strtod_l+0xe6>
 800b640:	e8df f006 	tbb	[pc, r6]
 800b644:	201d0314 	.word	0x201d0314
 800b648:	14          	.byte	0x14
 800b649:	00          	.byte	0x00
 800b64a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b64e:	05e1      	lsls	r1, r4, #23
 800b650:	bf48      	it	mi
 800b652:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b656:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b65a:	0d1b      	lsrs	r3, r3, #20
 800b65c:	051b      	lsls	r3, r3, #20
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1bb      	bne.n	800b5da <_strtod_l+0x72>
 800b662:	f000 fe69 	bl	800c338 <__errno>
 800b666:	2322      	movs	r3, #34	@ 0x22
 800b668:	6003      	str	r3, [r0, #0]
 800b66a:	e7b6      	b.n	800b5da <_strtod_l+0x72>
 800b66c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b670:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b674:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b678:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b67c:	e7e7      	b.n	800b64e <_strtod_l+0xe6>
 800b67e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b800 <_strtod_l+0x298>
 800b682:	e7e4      	b.n	800b64e <_strtod_l+0xe6>
 800b684:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b688:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b68c:	e7df      	b.n	800b64e <_strtod_l+0xe6>
 800b68e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b690:	1c5a      	adds	r2, r3, #1
 800b692:	9219      	str	r2, [sp, #100]	@ 0x64
 800b694:	785b      	ldrb	r3, [r3, #1]
 800b696:	2b30      	cmp	r3, #48	@ 0x30
 800b698:	d0f9      	beq.n	800b68e <_strtod_l+0x126>
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d09d      	beq.n	800b5da <_strtod_l+0x72>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	2700      	movs	r7, #0
 800b6a2:	9308      	str	r3, [sp, #32]
 800b6a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800b6a8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b6aa:	46b9      	mov	r9, r7
 800b6ac:	220a      	movs	r2, #10
 800b6ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b6b0:	7805      	ldrb	r5, [r0, #0]
 800b6b2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b6b6:	b2d9      	uxtb	r1, r3
 800b6b8:	2909      	cmp	r1, #9
 800b6ba:	d928      	bls.n	800b70e <_strtod_l+0x1a6>
 800b6bc:	494f      	ldr	r1, [pc, #316]	@ (800b7fc <_strtod_l+0x294>)
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f000 fdde 	bl	800c280 <strncmp>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d032      	beq.n	800b72e <_strtod_l+0x1c6>
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	462a      	mov	r2, r5
 800b6cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800b6ce:	464d      	mov	r5, r9
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2a65      	cmp	r2, #101	@ 0x65
 800b6d4:	d001      	beq.n	800b6da <_strtod_l+0x172>
 800b6d6:	2a45      	cmp	r2, #69	@ 0x45
 800b6d8:	d114      	bne.n	800b704 <_strtod_l+0x19c>
 800b6da:	b91d      	cbnz	r5, 800b6e4 <_strtod_l+0x17c>
 800b6dc:	9a08      	ldr	r2, [sp, #32]
 800b6de:	4302      	orrs	r2, r0
 800b6e0:	d096      	beq.n	800b610 <_strtod_l+0xa8>
 800b6e2:	2500      	movs	r5, #0
 800b6e4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b6e6:	1c62      	adds	r2, r4, #1
 800b6e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6ea:	7862      	ldrb	r2, [r4, #1]
 800b6ec:	2a2b      	cmp	r2, #43	@ 0x2b
 800b6ee:	d07a      	beq.n	800b7e6 <_strtod_l+0x27e>
 800b6f0:	2a2d      	cmp	r2, #45	@ 0x2d
 800b6f2:	d07e      	beq.n	800b7f2 <_strtod_l+0x28a>
 800b6f4:	f04f 0c00 	mov.w	ip, #0
 800b6f8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b6fc:	2909      	cmp	r1, #9
 800b6fe:	f240 8085 	bls.w	800b80c <_strtod_l+0x2a4>
 800b702:	9419      	str	r4, [sp, #100]	@ 0x64
 800b704:	f04f 0800 	mov.w	r8, #0
 800b708:	e0a5      	b.n	800b856 <_strtod_l+0x2ee>
 800b70a:	2300      	movs	r3, #0
 800b70c:	e7c8      	b.n	800b6a0 <_strtod_l+0x138>
 800b70e:	f1b9 0f08 	cmp.w	r9, #8
 800b712:	bfd8      	it	le
 800b714:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b716:	f100 0001 	add.w	r0, r0, #1
 800b71a:	bfda      	itte	le
 800b71c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b720:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b722:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b726:	f109 0901 	add.w	r9, r9, #1
 800b72a:	9019      	str	r0, [sp, #100]	@ 0x64
 800b72c:	e7bf      	b.n	800b6ae <_strtod_l+0x146>
 800b72e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b730:	1c5a      	adds	r2, r3, #1
 800b732:	9219      	str	r2, [sp, #100]	@ 0x64
 800b734:	785a      	ldrb	r2, [r3, #1]
 800b736:	f1b9 0f00 	cmp.w	r9, #0
 800b73a:	d03b      	beq.n	800b7b4 <_strtod_l+0x24c>
 800b73c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b73e:	464d      	mov	r5, r9
 800b740:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b744:	2b09      	cmp	r3, #9
 800b746:	d912      	bls.n	800b76e <_strtod_l+0x206>
 800b748:	2301      	movs	r3, #1
 800b74a:	e7c2      	b.n	800b6d2 <_strtod_l+0x16a>
 800b74c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b74e:	1c5a      	adds	r2, r3, #1
 800b750:	9219      	str	r2, [sp, #100]	@ 0x64
 800b752:	785a      	ldrb	r2, [r3, #1]
 800b754:	3001      	adds	r0, #1
 800b756:	2a30      	cmp	r2, #48	@ 0x30
 800b758:	d0f8      	beq.n	800b74c <_strtod_l+0x1e4>
 800b75a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b75e:	2b08      	cmp	r3, #8
 800b760:	f200 84d2 	bhi.w	800c108 <_strtod_l+0xba0>
 800b764:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b766:	900a      	str	r0, [sp, #40]	@ 0x28
 800b768:	2000      	movs	r0, #0
 800b76a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b76c:	4605      	mov	r5, r0
 800b76e:	3a30      	subs	r2, #48	@ 0x30
 800b770:	f100 0301 	add.w	r3, r0, #1
 800b774:	d018      	beq.n	800b7a8 <_strtod_l+0x240>
 800b776:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b778:	4419      	add	r1, r3
 800b77a:	910a      	str	r1, [sp, #40]	@ 0x28
 800b77c:	462e      	mov	r6, r5
 800b77e:	f04f 0e0a 	mov.w	lr, #10
 800b782:	1c71      	adds	r1, r6, #1
 800b784:	eba1 0c05 	sub.w	ip, r1, r5
 800b788:	4563      	cmp	r3, ip
 800b78a:	dc15      	bgt.n	800b7b8 <_strtod_l+0x250>
 800b78c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b790:	182b      	adds	r3, r5, r0
 800b792:	2b08      	cmp	r3, #8
 800b794:	f105 0501 	add.w	r5, r5, #1
 800b798:	4405      	add	r5, r0
 800b79a:	dc1a      	bgt.n	800b7d2 <_strtod_l+0x26a>
 800b79c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b79e:	230a      	movs	r3, #10
 800b7a0:	fb03 2301 	mla	r3, r3, r1, r2
 800b7a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7aa:	1c51      	adds	r1, r2, #1
 800b7ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800b7ae:	7852      	ldrb	r2, [r2, #1]
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	e7c5      	b.n	800b740 <_strtod_l+0x1d8>
 800b7b4:	4648      	mov	r0, r9
 800b7b6:	e7ce      	b.n	800b756 <_strtod_l+0x1ee>
 800b7b8:	2e08      	cmp	r6, #8
 800b7ba:	dc05      	bgt.n	800b7c8 <_strtod_l+0x260>
 800b7bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b7be:	fb0e f606 	mul.w	r6, lr, r6
 800b7c2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b7c4:	460e      	mov	r6, r1
 800b7c6:	e7dc      	b.n	800b782 <_strtod_l+0x21a>
 800b7c8:	2910      	cmp	r1, #16
 800b7ca:	bfd8      	it	le
 800b7cc:	fb0e f707 	mulle.w	r7, lr, r7
 800b7d0:	e7f8      	b.n	800b7c4 <_strtod_l+0x25c>
 800b7d2:	2b0f      	cmp	r3, #15
 800b7d4:	bfdc      	itt	le
 800b7d6:	230a      	movle	r3, #10
 800b7d8:	fb03 2707 	mlale	r7, r3, r7, r2
 800b7dc:	e7e3      	b.n	800b7a6 <_strtod_l+0x23e>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e77a      	b.n	800b6dc <_strtod_l+0x174>
 800b7e6:	f04f 0c00 	mov.w	ip, #0
 800b7ea:	1ca2      	adds	r2, r4, #2
 800b7ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7ee:	78a2      	ldrb	r2, [r4, #2]
 800b7f0:	e782      	b.n	800b6f8 <_strtod_l+0x190>
 800b7f2:	f04f 0c01 	mov.w	ip, #1
 800b7f6:	e7f8      	b.n	800b7ea <_strtod_l+0x282>
 800b7f8:	0800fb74 	.word	0x0800fb74
 800b7fc:	0800f9a7 	.word	0x0800f9a7
 800b800:	7ff00000 	.word	0x7ff00000
 800b804:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b806:	1c51      	adds	r1, r2, #1
 800b808:	9119      	str	r1, [sp, #100]	@ 0x64
 800b80a:	7852      	ldrb	r2, [r2, #1]
 800b80c:	2a30      	cmp	r2, #48	@ 0x30
 800b80e:	d0f9      	beq.n	800b804 <_strtod_l+0x29c>
 800b810:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b814:	2908      	cmp	r1, #8
 800b816:	f63f af75 	bhi.w	800b704 <_strtod_l+0x19c>
 800b81a:	3a30      	subs	r2, #48	@ 0x30
 800b81c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b81e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b820:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b822:	f04f 080a 	mov.w	r8, #10
 800b826:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b828:	1c56      	adds	r6, r2, #1
 800b82a:	9619      	str	r6, [sp, #100]	@ 0x64
 800b82c:	7852      	ldrb	r2, [r2, #1]
 800b82e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b832:	f1be 0f09 	cmp.w	lr, #9
 800b836:	d939      	bls.n	800b8ac <_strtod_l+0x344>
 800b838:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b83a:	1a76      	subs	r6, r6, r1
 800b83c:	2e08      	cmp	r6, #8
 800b83e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b842:	dc03      	bgt.n	800b84c <_strtod_l+0x2e4>
 800b844:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b846:	4588      	cmp	r8, r1
 800b848:	bfa8      	it	ge
 800b84a:	4688      	movge	r8, r1
 800b84c:	f1bc 0f00 	cmp.w	ip, #0
 800b850:	d001      	beq.n	800b856 <_strtod_l+0x2ee>
 800b852:	f1c8 0800 	rsb	r8, r8, #0
 800b856:	2d00      	cmp	r5, #0
 800b858:	d14e      	bne.n	800b8f8 <_strtod_l+0x390>
 800b85a:	9908      	ldr	r1, [sp, #32]
 800b85c:	4308      	orrs	r0, r1
 800b85e:	f47f aebc 	bne.w	800b5da <_strtod_l+0x72>
 800b862:	2b00      	cmp	r3, #0
 800b864:	f47f aed4 	bne.w	800b610 <_strtod_l+0xa8>
 800b868:	2a69      	cmp	r2, #105	@ 0x69
 800b86a:	d028      	beq.n	800b8be <_strtod_l+0x356>
 800b86c:	dc25      	bgt.n	800b8ba <_strtod_l+0x352>
 800b86e:	2a49      	cmp	r2, #73	@ 0x49
 800b870:	d025      	beq.n	800b8be <_strtod_l+0x356>
 800b872:	2a4e      	cmp	r2, #78	@ 0x4e
 800b874:	f47f aecc 	bne.w	800b610 <_strtod_l+0xa8>
 800b878:	499a      	ldr	r1, [pc, #616]	@ (800bae4 <_strtod_l+0x57c>)
 800b87a:	a819      	add	r0, sp, #100	@ 0x64
 800b87c:	f001 fee8 	bl	800d650 <__match>
 800b880:	2800      	cmp	r0, #0
 800b882:	f43f aec5 	beq.w	800b610 <_strtod_l+0xa8>
 800b886:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	2b28      	cmp	r3, #40	@ 0x28
 800b88c:	d12e      	bne.n	800b8ec <_strtod_l+0x384>
 800b88e:	4996      	ldr	r1, [pc, #600]	@ (800bae8 <_strtod_l+0x580>)
 800b890:	aa1c      	add	r2, sp, #112	@ 0x70
 800b892:	a819      	add	r0, sp, #100	@ 0x64
 800b894:	f001 fef0 	bl	800d678 <__hexnan>
 800b898:	2805      	cmp	r0, #5
 800b89a:	d127      	bne.n	800b8ec <_strtod_l+0x384>
 800b89c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b89e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b8a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b8a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b8aa:	e696      	b.n	800b5da <_strtod_l+0x72>
 800b8ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8ae:	fb08 2101 	mla	r1, r8, r1, r2
 800b8b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b8b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8b8:	e7b5      	b.n	800b826 <_strtod_l+0x2be>
 800b8ba:	2a6e      	cmp	r2, #110	@ 0x6e
 800b8bc:	e7da      	b.n	800b874 <_strtod_l+0x30c>
 800b8be:	498b      	ldr	r1, [pc, #556]	@ (800baec <_strtod_l+0x584>)
 800b8c0:	a819      	add	r0, sp, #100	@ 0x64
 800b8c2:	f001 fec5 	bl	800d650 <__match>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	f43f aea2 	beq.w	800b610 <_strtod_l+0xa8>
 800b8cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8ce:	4988      	ldr	r1, [pc, #544]	@ (800baf0 <_strtod_l+0x588>)
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	a819      	add	r0, sp, #100	@ 0x64
 800b8d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b8d6:	f001 febb 	bl	800d650 <__match>
 800b8da:	b910      	cbnz	r0, 800b8e2 <_strtod_l+0x37a>
 800b8dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8de:	3301      	adds	r3, #1
 800b8e0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b8e2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800bb00 <_strtod_l+0x598>
 800b8e6:	f04f 0a00 	mov.w	sl, #0
 800b8ea:	e676      	b.n	800b5da <_strtod_l+0x72>
 800b8ec:	4881      	ldr	r0, [pc, #516]	@ (800baf4 <_strtod_l+0x58c>)
 800b8ee:	f000 fd73 	bl	800c3d8 <nan>
 800b8f2:	ec5b ab10 	vmov	sl, fp, d0
 800b8f6:	e670      	b.n	800b5da <_strtod_l+0x72>
 800b8f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8fa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b8fc:	eba8 0303 	sub.w	r3, r8, r3
 800b900:	f1b9 0f00 	cmp.w	r9, #0
 800b904:	bf08      	it	eq
 800b906:	46a9      	moveq	r9, r5
 800b908:	2d10      	cmp	r5, #16
 800b90a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b90c:	462c      	mov	r4, r5
 800b90e:	bfa8      	it	ge
 800b910:	2410      	movge	r4, #16
 800b912:	f7f4 fe27 	bl	8000564 <__aeabi_ui2d>
 800b916:	2d09      	cmp	r5, #9
 800b918:	4682      	mov	sl, r0
 800b91a:	468b      	mov	fp, r1
 800b91c:	dc13      	bgt.n	800b946 <_strtod_l+0x3de>
 800b91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b920:	2b00      	cmp	r3, #0
 800b922:	f43f ae5a 	beq.w	800b5da <_strtod_l+0x72>
 800b926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b928:	dd78      	ble.n	800ba1c <_strtod_l+0x4b4>
 800b92a:	2b16      	cmp	r3, #22
 800b92c:	dc5f      	bgt.n	800b9ee <_strtod_l+0x486>
 800b92e:	4972      	ldr	r1, [pc, #456]	@ (800baf8 <_strtod_l+0x590>)
 800b930:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b934:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b938:	4652      	mov	r2, sl
 800b93a:	465b      	mov	r3, fp
 800b93c:	f7f4 fe8c 	bl	8000658 <__aeabi_dmul>
 800b940:	4682      	mov	sl, r0
 800b942:	468b      	mov	fp, r1
 800b944:	e649      	b.n	800b5da <_strtod_l+0x72>
 800b946:	4b6c      	ldr	r3, [pc, #432]	@ (800baf8 <_strtod_l+0x590>)
 800b948:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b94c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b950:	f7f4 fe82 	bl	8000658 <__aeabi_dmul>
 800b954:	4682      	mov	sl, r0
 800b956:	4638      	mov	r0, r7
 800b958:	468b      	mov	fp, r1
 800b95a:	f7f4 fe03 	bl	8000564 <__aeabi_ui2d>
 800b95e:	4602      	mov	r2, r0
 800b960:	460b      	mov	r3, r1
 800b962:	4650      	mov	r0, sl
 800b964:	4659      	mov	r1, fp
 800b966:	f7f4 fcc1 	bl	80002ec <__adddf3>
 800b96a:	2d0f      	cmp	r5, #15
 800b96c:	4682      	mov	sl, r0
 800b96e:	468b      	mov	fp, r1
 800b970:	ddd5      	ble.n	800b91e <_strtod_l+0x3b6>
 800b972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b974:	1b2c      	subs	r4, r5, r4
 800b976:	441c      	add	r4, r3
 800b978:	2c00      	cmp	r4, #0
 800b97a:	f340 8093 	ble.w	800baa4 <_strtod_l+0x53c>
 800b97e:	f014 030f 	ands.w	r3, r4, #15
 800b982:	d00a      	beq.n	800b99a <_strtod_l+0x432>
 800b984:	495c      	ldr	r1, [pc, #368]	@ (800baf8 <_strtod_l+0x590>)
 800b986:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b98a:	4652      	mov	r2, sl
 800b98c:	465b      	mov	r3, fp
 800b98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b992:	f7f4 fe61 	bl	8000658 <__aeabi_dmul>
 800b996:	4682      	mov	sl, r0
 800b998:	468b      	mov	fp, r1
 800b99a:	f034 040f 	bics.w	r4, r4, #15
 800b99e:	d073      	beq.n	800ba88 <_strtod_l+0x520>
 800b9a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b9a4:	dd49      	ble.n	800ba3a <_strtod_l+0x4d2>
 800b9a6:	2400      	movs	r4, #0
 800b9a8:	46a0      	mov	r8, r4
 800b9aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b9ac:	46a1      	mov	r9, r4
 800b9ae:	9a05      	ldr	r2, [sp, #20]
 800b9b0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800bb00 <_strtod_l+0x598>
 800b9b4:	2322      	movs	r3, #34	@ 0x22
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	f04f 0a00 	mov.w	sl, #0
 800b9bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f43f ae0b 	beq.w	800b5da <_strtod_l+0x72>
 800b9c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9c6:	9805      	ldr	r0, [sp, #20]
 800b9c8:	f002 fd54 	bl	800e474 <_Bfree>
 800b9cc:	9805      	ldr	r0, [sp, #20]
 800b9ce:	4649      	mov	r1, r9
 800b9d0:	f002 fd50 	bl	800e474 <_Bfree>
 800b9d4:	9805      	ldr	r0, [sp, #20]
 800b9d6:	4641      	mov	r1, r8
 800b9d8:	f002 fd4c 	bl	800e474 <_Bfree>
 800b9dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9de:	9805      	ldr	r0, [sp, #20]
 800b9e0:	f002 fd48 	bl	800e474 <_Bfree>
 800b9e4:	9805      	ldr	r0, [sp, #20]
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	f002 fd44 	bl	800e474 <_Bfree>
 800b9ec:	e5f5      	b.n	800b5da <_strtod_l+0x72>
 800b9ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	dbbc      	blt.n	800b972 <_strtod_l+0x40a>
 800b9f8:	4c3f      	ldr	r4, [pc, #252]	@ (800baf8 <_strtod_l+0x590>)
 800b9fa:	f1c5 050f 	rsb	r5, r5, #15
 800b9fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba02:	4652      	mov	r2, sl
 800ba04:	465b      	mov	r3, fp
 800ba06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba0a:	f7f4 fe25 	bl	8000658 <__aeabi_dmul>
 800ba0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba10:	1b5d      	subs	r5, r3, r5
 800ba12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba1a:	e78f      	b.n	800b93c <_strtod_l+0x3d4>
 800ba1c:	3316      	adds	r3, #22
 800ba1e:	dba8      	blt.n	800b972 <_strtod_l+0x40a>
 800ba20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba22:	eba3 0808 	sub.w	r8, r3, r8
 800ba26:	4b34      	ldr	r3, [pc, #208]	@ (800baf8 <_strtod_l+0x590>)
 800ba28:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ba2c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ba30:	4650      	mov	r0, sl
 800ba32:	4659      	mov	r1, fp
 800ba34:	f7f4 ff3a 	bl	80008ac <__aeabi_ddiv>
 800ba38:	e782      	b.n	800b940 <_strtod_l+0x3d8>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	4f2f      	ldr	r7, [pc, #188]	@ (800bafc <_strtod_l+0x594>)
 800ba3e:	1124      	asrs	r4, r4, #4
 800ba40:	4650      	mov	r0, sl
 800ba42:	4659      	mov	r1, fp
 800ba44:	461e      	mov	r6, r3
 800ba46:	2c01      	cmp	r4, #1
 800ba48:	dc21      	bgt.n	800ba8e <_strtod_l+0x526>
 800ba4a:	b10b      	cbz	r3, 800ba50 <_strtod_l+0x4e8>
 800ba4c:	4682      	mov	sl, r0
 800ba4e:	468b      	mov	fp, r1
 800ba50:	492a      	ldr	r1, [pc, #168]	@ (800bafc <_strtod_l+0x594>)
 800ba52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ba56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ba5a:	4652      	mov	r2, sl
 800ba5c:	465b      	mov	r3, fp
 800ba5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba62:	f7f4 fdf9 	bl	8000658 <__aeabi_dmul>
 800ba66:	4b26      	ldr	r3, [pc, #152]	@ (800bb00 <_strtod_l+0x598>)
 800ba68:	460a      	mov	r2, r1
 800ba6a:	400b      	ands	r3, r1
 800ba6c:	4925      	ldr	r1, [pc, #148]	@ (800bb04 <_strtod_l+0x59c>)
 800ba6e:	428b      	cmp	r3, r1
 800ba70:	4682      	mov	sl, r0
 800ba72:	d898      	bhi.n	800b9a6 <_strtod_l+0x43e>
 800ba74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ba78:	428b      	cmp	r3, r1
 800ba7a:	bf86      	itte	hi
 800ba7c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800bb08 <_strtod_l+0x5a0>
 800ba80:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ba84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ba88:	2300      	movs	r3, #0
 800ba8a:	9308      	str	r3, [sp, #32]
 800ba8c:	e076      	b.n	800bb7c <_strtod_l+0x614>
 800ba8e:	07e2      	lsls	r2, r4, #31
 800ba90:	d504      	bpl.n	800ba9c <_strtod_l+0x534>
 800ba92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba96:	f7f4 fddf 	bl	8000658 <__aeabi_dmul>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	3601      	adds	r6, #1
 800ba9e:	1064      	asrs	r4, r4, #1
 800baa0:	3708      	adds	r7, #8
 800baa2:	e7d0      	b.n	800ba46 <_strtod_l+0x4de>
 800baa4:	d0f0      	beq.n	800ba88 <_strtod_l+0x520>
 800baa6:	4264      	negs	r4, r4
 800baa8:	f014 020f 	ands.w	r2, r4, #15
 800baac:	d00a      	beq.n	800bac4 <_strtod_l+0x55c>
 800baae:	4b12      	ldr	r3, [pc, #72]	@ (800baf8 <_strtod_l+0x590>)
 800bab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bab4:	4650      	mov	r0, sl
 800bab6:	4659      	mov	r1, fp
 800bab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babc:	f7f4 fef6 	bl	80008ac <__aeabi_ddiv>
 800bac0:	4682      	mov	sl, r0
 800bac2:	468b      	mov	fp, r1
 800bac4:	1124      	asrs	r4, r4, #4
 800bac6:	d0df      	beq.n	800ba88 <_strtod_l+0x520>
 800bac8:	2c1f      	cmp	r4, #31
 800baca:	dd1f      	ble.n	800bb0c <_strtod_l+0x5a4>
 800bacc:	2400      	movs	r4, #0
 800bace:	46a0      	mov	r8, r4
 800bad0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bad2:	46a1      	mov	r9, r4
 800bad4:	9a05      	ldr	r2, [sp, #20]
 800bad6:	2322      	movs	r3, #34	@ 0x22
 800bad8:	f04f 0a00 	mov.w	sl, #0
 800badc:	f04f 0b00 	mov.w	fp, #0
 800bae0:	6013      	str	r3, [r2, #0]
 800bae2:	e76b      	b.n	800b9bc <_strtod_l+0x454>
 800bae4:	0800f97d 	.word	0x0800f97d
 800bae8:	0800fb60 	.word	0x0800fb60
 800baec:	0800f975 	.word	0x0800f975
 800baf0:	0800f9b4 	.word	0x0800f9b4
 800baf4:	0800fb5e 	.word	0x0800fb5e
 800baf8:	0800fce8 	.word	0x0800fce8
 800bafc:	0800fcc0 	.word	0x0800fcc0
 800bb00:	7ff00000 	.word	0x7ff00000
 800bb04:	7ca00000 	.word	0x7ca00000
 800bb08:	7fefffff 	.word	0x7fefffff
 800bb0c:	f014 0310 	ands.w	r3, r4, #16
 800bb10:	bf18      	it	ne
 800bb12:	236a      	movne	r3, #106	@ 0x6a
 800bb14:	4ea9      	ldr	r6, [pc, #676]	@ (800bdbc <_strtod_l+0x854>)
 800bb16:	9308      	str	r3, [sp, #32]
 800bb18:	4650      	mov	r0, sl
 800bb1a:	4659      	mov	r1, fp
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	07e7      	lsls	r7, r4, #31
 800bb20:	d504      	bpl.n	800bb2c <_strtod_l+0x5c4>
 800bb22:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb26:	f7f4 fd97 	bl	8000658 <__aeabi_dmul>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	1064      	asrs	r4, r4, #1
 800bb2e:	f106 0608 	add.w	r6, r6, #8
 800bb32:	d1f4      	bne.n	800bb1e <_strtod_l+0x5b6>
 800bb34:	b10b      	cbz	r3, 800bb3a <_strtod_l+0x5d2>
 800bb36:	4682      	mov	sl, r0
 800bb38:	468b      	mov	fp, r1
 800bb3a:	9b08      	ldr	r3, [sp, #32]
 800bb3c:	b1b3      	cbz	r3, 800bb6c <_strtod_l+0x604>
 800bb3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bb42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	4659      	mov	r1, fp
 800bb4a:	dd0f      	ble.n	800bb6c <_strtod_l+0x604>
 800bb4c:	2b1f      	cmp	r3, #31
 800bb4e:	dd56      	ble.n	800bbfe <_strtod_l+0x696>
 800bb50:	2b34      	cmp	r3, #52	@ 0x34
 800bb52:	bfde      	ittt	le
 800bb54:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800bb58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bb5c:	4093      	lslle	r3, r2
 800bb5e:	f04f 0a00 	mov.w	sl, #0
 800bb62:	bfcc      	ite	gt
 800bb64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bb68:	ea03 0b01 	andle.w	fp, r3, r1
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	2300      	movs	r3, #0
 800bb70:	4650      	mov	r0, sl
 800bb72:	4659      	mov	r1, fp
 800bb74:	f7f4 ffd8 	bl	8000b28 <__aeabi_dcmpeq>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d1a7      	bne.n	800bacc <_strtod_l+0x564>
 800bb7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bb82:	9805      	ldr	r0, [sp, #20]
 800bb84:	462b      	mov	r3, r5
 800bb86:	464a      	mov	r2, r9
 800bb88:	f002 fcdc 	bl	800e544 <__s2b>
 800bb8c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f43f af09 	beq.w	800b9a6 <_strtod_l+0x43e>
 800bb94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb98:	2a00      	cmp	r2, #0
 800bb9a:	eba3 0308 	sub.w	r3, r3, r8
 800bb9e:	bfa8      	it	ge
 800bba0:	2300      	movge	r3, #0
 800bba2:	9312      	str	r3, [sp, #72]	@ 0x48
 800bba4:	2400      	movs	r4, #0
 800bba6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bbaa:	9316      	str	r3, [sp, #88]	@ 0x58
 800bbac:	46a0      	mov	r8, r4
 800bbae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbb0:	9805      	ldr	r0, [sp, #20]
 800bbb2:	6859      	ldr	r1, [r3, #4]
 800bbb4:	f002 fc1e 	bl	800e3f4 <_Balloc>
 800bbb8:	4681      	mov	r9, r0
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	f43f aef7 	beq.w	800b9ae <_strtod_l+0x446>
 800bbc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbc2:	691a      	ldr	r2, [r3, #16]
 800bbc4:	3202      	adds	r2, #2
 800bbc6:	f103 010c 	add.w	r1, r3, #12
 800bbca:	0092      	lsls	r2, r2, #2
 800bbcc:	300c      	adds	r0, #12
 800bbce:	f000 fbf5 	bl	800c3bc <memcpy>
 800bbd2:	ec4b ab10 	vmov	d0, sl, fp
 800bbd6:	9805      	ldr	r0, [sp, #20]
 800bbd8:	aa1c      	add	r2, sp, #112	@ 0x70
 800bbda:	a91b      	add	r1, sp, #108	@ 0x6c
 800bbdc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bbe0:	f002 ffe4 	bl	800ebac <__d2b>
 800bbe4:	901a      	str	r0, [sp, #104]	@ 0x68
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	f43f aee1 	beq.w	800b9ae <_strtod_l+0x446>
 800bbec:	9805      	ldr	r0, [sp, #20]
 800bbee:	2101      	movs	r1, #1
 800bbf0:	f002 fd3e 	bl	800e670 <__i2b>
 800bbf4:	4680      	mov	r8, r0
 800bbf6:	b948      	cbnz	r0, 800bc0c <_strtod_l+0x6a4>
 800bbf8:	f04f 0800 	mov.w	r8, #0
 800bbfc:	e6d7      	b.n	800b9ae <_strtod_l+0x446>
 800bbfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc02:	fa02 f303 	lsl.w	r3, r2, r3
 800bc06:	ea03 0a0a 	and.w	sl, r3, sl
 800bc0a:	e7af      	b.n	800bb6c <_strtod_l+0x604>
 800bc0c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bc0e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bc10:	2d00      	cmp	r5, #0
 800bc12:	bfab      	itete	ge
 800bc14:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bc16:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bc18:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bc1a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bc1c:	bfac      	ite	ge
 800bc1e:	18ef      	addge	r7, r5, r3
 800bc20:	1b5e      	sublt	r6, r3, r5
 800bc22:	9b08      	ldr	r3, [sp, #32]
 800bc24:	1aed      	subs	r5, r5, r3
 800bc26:	4415      	add	r5, r2
 800bc28:	4b65      	ldr	r3, [pc, #404]	@ (800bdc0 <_strtod_l+0x858>)
 800bc2a:	3d01      	subs	r5, #1
 800bc2c:	429d      	cmp	r5, r3
 800bc2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bc32:	da50      	bge.n	800bcd6 <_strtod_l+0x76e>
 800bc34:	1b5b      	subs	r3, r3, r5
 800bc36:	2b1f      	cmp	r3, #31
 800bc38:	eba2 0203 	sub.w	r2, r2, r3
 800bc3c:	f04f 0101 	mov.w	r1, #1
 800bc40:	dc3d      	bgt.n	800bcbe <_strtod_l+0x756>
 800bc42:	fa01 f303 	lsl.w	r3, r1, r3
 800bc46:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc48:	2300      	movs	r3, #0
 800bc4a:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc4c:	18bd      	adds	r5, r7, r2
 800bc4e:	9b08      	ldr	r3, [sp, #32]
 800bc50:	42af      	cmp	r7, r5
 800bc52:	4416      	add	r6, r2
 800bc54:	441e      	add	r6, r3
 800bc56:	463b      	mov	r3, r7
 800bc58:	bfa8      	it	ge
 800bc5a:	462b      	movge	r3, r5
 800bc5c:	42b3      	cmp	r3, r6
 800bc5e:	bfa8      	it	ge
 800bc60:	4633      	movge	r3, r6
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	bfc2      	ittt	gt
 800bc66:	1aed      	subgt	r5, r5, r3
 800bc68:	1af6      	subgt	r6, r6, r3
 800bc6a:	1aff      	subgt	r7, r7, r3
 800bc6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	dd16      	ble.n	800bca0 <_strtod_l+0x738>
 800bc72:	4641      	mov	r1, r8
 800bc74:	9805      	ldr	r0, [sp, #20]
 800bc76:	461a      	mov	r2, r3
 800bc78:	f002 fdb2 	bl	800e7e0 <__pow5mult>
 800bc7c:	4680      	mov	r8, r0
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d0ba      	beq.n	800bbf8 <_strtod_l+0x690>
 800bc82:	4601      	mov	r1, r0
 800bc84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bc86:	9805      	ldr	r0, [sp, #20]
 800bc88:	f002 fd08 	bl	800e69c <__multiply>
 800bc8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	f43f ae8d 	beq.w	800b9ae <_strtod_l+0x446>
 800bc94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc96:	9805      	ldr	r0, [sp, #20]
 800bc98:	f002 fbec 	bl	800e474 <_Bfree>
 800bc9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc9e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bca0:	2d00      	cmp	r5, #0
 800bca2:	dc1d      	bgt.n	800bce0 <_strtod_l+0x778>
 800bca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	dd23      	ble.n	800bcf2 <_strtod_l+0x78a>
 800bcaa:	4649      	mov	r1, r9
 800bcac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bcae:	9805      	ldr	r0, [sp, #20]
 800bcb0:	f002 fd96 	bl	800e7e0 <__pow5mult>
 800bcb4:	4681      	mov	r9, r0
 800bcb6:	b9e0      	cbnz	r0, 800bcf2 <_strtod_l+0x78a>
 800bcb8:	f04f 0900 	mov.w	r9, #0
 800bcbc:	e677      	b.n	800b9ae <_strtod_l+0x446>
 800bcbe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bcc2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bcc6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bcca:	35e2      	adds	r5, #226	@ 0xe2
 800bccc:	fa01 f305 	lsl.w	r3, r1, r5
 800bcd0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcd2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bcd4:	e7ba      	b.n	800bc4c <_strtod_l+0x6e4>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcda:	2301      	movs	r3, #1
 800bcdc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcde:	e7b5      	b.n	800bc4c <_strtod_l+0x6e4>
 800bce0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bce2:	9805      	ldr	r0, [sp, #20]
 800bce4:	462a      	mov	r2, r5
 800bce6:	f002 fdd5 	bl	800e894 <__lshift>
 800bcea:	901a      	str	r0, [sp, #104]	@ 0x68
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d1d9      	bne.n	800bca4 <_strtod_l+0x73c>
 800bcf0:	e65d      	b.n	800b9ae <_strtod_l+0x446>
 800bcf2:	2e00      	cmp	r6, #0
 800bcf4:	dd07      	ble.n	800bd06 <_strtod_l+0x79e>
 800bcf6:	4649      	mov	r1, r9
 800bcf8:	9805      	ldr	r0, [sp, #20]
 800bcfa:	4632      	mov	r2, r6
 800bcfc:	f002 fdca 	bl	800e894 <__lshift>
 800bd00:	4681      	mov	r9, r0
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d0d8      	beq.n	800bcb8 <_strtod_l+0x750>
 800bd06:	2f00      	cmp	r7, #0
 800bd08:	dd08      	ble.n	800bd1c <_strtod_l+0x7b4>
 800bd0a:	4641      	mov	r1, r8
 800bd0c:	9805      	ldr	r0, [sp, #20]
 800bd0e:	463a      	mov	r2, r7
 800bd10:	f002 fdc0 	bl	800e894 <__lshift>
 800bd14:	4680      	mov	r8, r0
 800bd16:	2800      	cmp	r0, #0
 800bd18:	f43f ae49 	beq.w	800b9ae <_strtod_l+0x446>
 800bd1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd1e:	9805      	ldr	r0, [sp, #20]
 800bd20:	464a      	mov	r2, r9
 800bd22:	f002 fe3f 	bl	800e9a4 <__mdiff>
 800bd26:	4604      	mov	r4, r0
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	f43f ae40 	beq.w	800b9ae <_strtod_l+0x446>
 800bd2e:	68c3      	ldr	r3, [r0, #12]
 800bd30:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd32:	2300      	movs	r3, #0
 800bd34:	60c3      	str	r3, [r0, #12]
 800bd36:	4641      	mov	r1, r8
 800bd38:	f002 fe18 	bl	800e96c <__mcmp>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	da45      	bge.n	800bdcc <_strtod_l+0x864>
 800bd40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd42:	ea53 030a 	orrs.w	r3, r3, sl
 800bd46:	d16b      	bne.n	800be20 <_strtod_l+0x8b8>
 800bd48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d167      	bne.n	800be20 <_strtod_l+0x8b8>
 800bd50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd54:	0d1b      	lsrs	r3, r3, #20
 800bd56:	051b      	lsls	r3, r3, #20
 800bd58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd5c:	d960      	bls.n	800be20 <_strtod_l+0x8b8>
 800bd5e:	6963      	ldr	r3, [r4, #20]
 800bd60:	b913      	cbnz	r3, 800bd68 <_strtod_l+0x800>
 800bd62:	6923      	ldr	r3, [r4, #16]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	dd5b      	ble.n	800be20 <_strtod_l+0x8b8>
 800bd68:	4621      	mov	r1, r4
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	9805      	ldr	r0, [sp, #20]
 800bd6e:	f002 fd91 	bl	800e894 <__lshift>
 800bd72:	4641      	mov	r1, r8
 800bd74:	4604      	mov	r4, r0
 800bd76:	f002 fdf9 	bl	800e96c <__mcmp>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	dd50      	ble.n	800be20 <_strtod_l+0x8b8>
 800bd7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd82:	9a08      	ldr	r2, [sp, #32]
 800bd84:	0d1b      	lsrs	r3, r3, #20
 800bd86:	051b      	lsls	r3, r3, #20
 800bd88:	2a00      	cmp	r2, #0
 800bd8a:	d06a      	beq.n	800be62 <_strtod_l+0x8fa>
 800bd8c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd90:	d867      	bhi.n	800be62 <_strtod_l+0x8fa>
 800bd92:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bd96:	f67f ae9d 	bls.w	800bad4 <_strtod_l+0x56c>
 800bd9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bdc4 <_strtod_l+0x85c>)
 800bd9c:	4650      	mov	r0, sl
 800bd9e:	4659      	mov	r1, fp
 800bda0:	2200      	movs	r2, #0
 800bda2:	f7f4 fc59 	bl	8000658 <__aeabi_dmul>
 800bda6:	4b08      	ldr	r3, [pc, #32]	@ (800bdc8 <_strtod_l+0x860>)
 800bda8:	400b      	ands	r3, r1
 800bdaa:	4682      	mov	sl, r0
 800bdac:	468b      	mov	fp, r1
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f47f ae08 	bne.w	800b9c4 <_strtod_l+0x45c>
 800bdb4:	9a05      	ldr	r2, [sp, #20]
 800bdb6:	2322      	movs	r3, #34	@ 0x22
 800bdb8:	6013      	str	r3, [r2, #0]
 800bdba:	e603      	b.n	800b9c4 <_strtod_l+0x45c>
 800bdbc:	0800fb88 	.word	0x0800fb88
 800bdc0:	fffffc02 	.word	0xfffffc02
 800bdc4:	39500000 	.word	0x39500000
 800bdc8:	7ff00000 	.word	0x7ff00000
 800bdcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bdd0:	d165      	bne.n	800be9e <_strtod_l+0x936>
 800bdd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bdd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdd8:	b35a      	cbz	r2, 800be32 <_strtod_l+0x8ca>
 800bdda:	4a9f      	ldr	r2, [pc, #636]	@ (800c058 <_strtod_l+0xaf0>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d12b      	bne.n	800be38 <_strtod_l+0x8d0>
 800bde0:	9b08      	ldr	r3, [sp, #32]
 800bde2:	4651      	mov	r1, sl
 800bde4:	b303      	cbz	r3, 800be28 <_strtod_l+0x8c0>
 800bde6:	4b9d      	ldr	r3, [pc, #628]	@ (800c05c <_strtod_l+0xaf4>)
 800bde8:	465a      	mov	r2, fp
 800bdea:	4013      	ands	r3, r2
 800bdec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bdf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bdf4:	d81b      	bhi.n	800be2e <_strtod_l+0x8c6>
 800bdf6:	0d1b      	lsrs	r3, r3, #20
 800bdf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bdfc:	fa02 f303 	lsl.w	r3, r2, r3
 800be00:	4299      	cmp	r1, r3
 800be02:	d119      	bne.n	800be38 <_strtod_l+0x8d0>
 800be04:	4b96      	ldr	r3, [pc, #600]	@ (800c060 <_strtod_l+0xaf8>)
 800be06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be08:	429a      	cmp	r2, r3
 800be0a:	d102      	bne.n	800be12 <_strtod_l+0x8aa>
 800be0c:	3101      	adds	r1, #1
 800be0e:	f43f adce 	beq.w	800b9ae <_strtod_l+0x446>
 800be12:	4b92      	ldr	r3, [pc, #584]	@ (800c05c <_strtod_l+0xaf4>)
 800be14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be16:	401a      	ands	r2, r3
 800be18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800be1c:	f04f 0a00 	mov.w	sl, #0
 800be20:	9b08      	ldr	r3, [sp, #32]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d1b9      	bne.n	800bd9a <_strtod_l+0x832>
 800be26:	e5cd      	b.n	800b9c4 <_strtod_l+0x45c>
 800be28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be2c:	e7e8      	b.n	800be00 <_strtod_l+0x898>
 800be2e:	4613      	mov	r3, r2
 800be30:	e7e6      	b.n	800be00 <_strtod_l+0x898>
 800be32:	ea53 030a 	orrs.w	r3, r3, sl
 800be36:	d0a2      	beq.n	800bd7e <_strtod_l+0x816>
 800be38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be3a:	b1db      	cbz	r3, 800be74 <_strtod_l+0x90c>
 800be3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be3e:	4213      	tst	r3, r2
 800be40:	d0ee      	beq.n	800be20 <_strtod_l+0x8b8>
 800be42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be44:	9a08      	ldr	r2, [sp, #32]
 800be46:	4650      	mov	r0, sl
 800be48:	4659      	mov	r1, fp
 800be4a:	b1bb      	cbz	r3, 800be7c <_strtod_l+0x914>
 800be4c:	f7ff fb6c 	bl	800b528 <sulp>
 800be50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be54:	ec53 2b10 	vmov	r2, r3, d0
 800be58:	f7f4 fa48 	bl	80002ec <__adddf3>
 800be5c:	4682      	mov	sl, r0
 800be5e:	468b      	mov	fp, r1
 800be60:	e7de      	b.n	800be20 <_strtod_l+0x8b8>
 800be62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800be66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800be6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800be6e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800be72:	e7d5      	b.n	800be20 <_strtod_l+0x8b8>
 800be74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be76:	ea13 0f0a 	tst.w	r3, sl
 800be7a:	e7e1      	b.n	800be40 <_strtod_l+0x8d8>
 800be7c:	f7ff fb54 	bl	800b528 <sulp>
 800be80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be84:	ec53 2b10 	vmov	r2, r3, d0
 800be88:	f7f4 fa2e 	bl	80002e8 <__aeabi_dsub>
 800be8c:	2200      	movs	r2, #0
 800be8e:	2300      	movs	r3, #0
 800be90:	4682      	mov	sl, r0
 800be92:	468b      	mov	fp, r1
 800be94:	f7f4 fe48 	bl	8000b28 <__aeabi_dcmpeq>
 800be98:	2800      	cmp	r0, #0
 800be9a:	d0c1      	beq.n	800be20 <_strtod_l+0x8b8>
 800be9c:	e61a      	b.n	800bad4 <_strtod_l+0x56c>
 800be9e:	4641      	mov	r1, r8
 800bea0:	4620      	mov	r0, r4
 800bea2:	f002 fedb 	bl	800ec5c <__ratio>
 800bea6:	ec57 6b10 	vmov	r6, r7, d0
 800beaa:	2200      	movs	r2, #0
 800beac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800beb0:	4630      	mov	r0, r6
 800beb2:	4639      	mov	r1, r7
 800beb4:	f7f4 fe4c 	bl	8000b50 <__aeabi_dcmple>
 800beb8:	2800      	cmp	r0, #0
 800beba:	d06f      	beq.n	800bf9c <_strtod_l+0xa34>
 800bebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d17a      	bne.n	800bfb8 <_strtod_l+0xa50>
 800bec2:	f1ba 0f00 	cmp.w	sl, #0
 800bec6:	d158      	bne.n	800bf7a <_strtod_l+0xa12>
 800bec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d15a      	bne.n	800bf88 <_strtod_l+0xa20>
 800bed2:	4b64      	ldr	r3, [pc, #400]	@ (800c064 <_strtod_l+0xafc>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	4630      	mov	r0, r6
 800bed8:	4639      	mov	r1, r7
 800beda:	f7f4 fe2f 	bl	8000b3c <__aeabi_dcmplt>
 800bede:	2800      	cmp	r0, #0
 800bee0:	d159      	bne.n	800bf96 <_strtod_l+0xa2e>
 800bee2:	4630      	mov	r0, r6
 800bee4:	4639      	mov	r1, r7
 800bee6:	4b60      	ldr	r3, [pc, #384]	@ (800c068 <_strtod_l+0xb00>)
 800bee8:	2200      	movs	r2, #0
 800beea:	f7f4 fbb5 	bl	8000658 <__aeabi_dmul>
 800beee:	4606      	mov	r6, r0
 800bef0:	460f      	mov	r7, r1
 800bef2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bef6:	9606      	str	r6, [sp, #24]
 800bef8:	9307      	str	r3, [sp, #28]
 800befa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800befe:	4d57      	ldr	r5, [pc, #348]	@ (800c05c <_strtod_l+0xaf4>)
 800bf00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf06:	401d      	ands	r5, r3
 800bf08:	4b58      	ldr	r3, [pc, #352]	@ (800c06c <_strtod_l+0xb04>)
 800bf0a:	429d      	cmp	r5, r3
 800bf0c:	f040 80b2 	bne.w	800c074 <_strtod_l+0xb0c>
 800bf10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bf16:	ec4b ab10 	vmov	d0, sl, fp
 800bf1a:	f002 fdd7 	bl	800eacc <__ulp>
 800bf1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf22:	ec51 0b10 	vmov	r0, r1, d0
 800bf26:	f7f4 fb97 	bl	8000658 <__aeabi_dmul>
 800bf2a:	4652      	mov	r2, sl
 800bf2c:	465b      	mov	r3, fp
 800bf2e:	f7f4 f9dd 	bl	80002ec <__adddf3>
 800bf32:	460b      	mov	r3, r1
 800bf34:	4949      	ldr	r1, [pc, #292]	@ (800c05c <_strtod_l+0xaf4>)
 800bf36:	4a4e      	ldr	r2, [pc, #312]	@ (800c070 <_strtod_l+0xb08>)
 800bf38:	4019      	ands	r1, r3
 800bf3a:	4291      	cmp	r1, r2
 800bf3c:	4682      	mov	sl, r0
 800bf3e:	d942      	bls.n	800bfc6 <_strtod_l+0xa5e>
 800bf40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf42:	4b47      	ldr	r3, [pc, #284]	@ (800c060 <_strtod_l+0xaf8>)
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d103      	bne.n	800bf50 <_strtod_l+0x9e8>
 800bf48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	f43f ad2f 	beq.w	800b9ae <_strtod_l+0x446>
 800bf50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c060 <_strtod_l+0xaf8>
 800bf54:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bf58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf5a:	9805      	ldr	r0, [sp, #20]
 800bf5c:	f002 fa8a 	bl	800e474 <_Bfree>
 800bf60:	9805      	ldr	r0, [sp, #20]
 800bf62:	4649      	mov	r1, r9
 800bf64:	f002 fa86 	bl	800e474 <_Bfree>
 800bf68:	9805      	ldr	r0, [sp, #20]
 800bf6a:	4641      	mov	r1, r8
 800bf6c:	f002 fa82 	bl	800e474 <_Bfree>
 800bf70:	9805      	ldr	r0, [sp, #20]
 800bf72:	4621      	mov	r1, r4
 800bf74:	f002 fa7e 	bl	800e474 <_Bfree>
 800bf78:	e619      	b.n	800bbae <_strtod_l+0x646>
 800bf7a:	f1ba 0f01 	cmp.w	sl, #1
 800bf7e:	d103      	bne.n	800bf88 <_strtod_l+0xa20>
 800bf80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	f43f ada6 	beq.w	800bad4 <_strtod_l+0x56c>
 800bf88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c038 <_strtod_l+0xad0>
 800bf8c:	4f35      	ldr	r7, [pc, #212]	@ (800c064 <_strtod_l+0xafc>)
 800bf8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf92:	2600      	movs	r6, #0
 800bf94:	e7b1      	b.n	800befa <_strtod_l+0x992>
 800bf96:	4f34      	ldr	r7, [pc, #208]	@ (800c068 <_strtod_l+0xb00>)
 800bf98:	2600      	movs	r6, #0
 800bf9a:	e7aa      	b.n	800bef2 <_strtod_l+0x98a>
 800bf9c:	4b32      	ldr	r3, [pc, #200]	@ (800c068 <_strtod_l+0xb00>)
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	4639      	mov	r1, r7
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f7f4 fb58 	bl	8000658 <__aeabi_dmul>
 800bfa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460f      	mov	r7, r1
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d09f      	beq.n	800bef2 <_strtod_l+0x98a>
 800bfb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bfb6:	e7a0      	b.n	800befa <_strtod_l+0x992>
 800bfb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c040 <_strtod_l+0xad8>
 800bfbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bfc0:	ec57 6b17 	vmov	r6, r7, d7
 800bfc4:	e799      	b.n	800befa <_strtod_l+0x992>
 800bfc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bfca:	9b08      	ldr	r3, [sp, #32]
 800bfcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1c1      	bne.n	800bf58 <_strtod_l+0x9f0>
 800bfd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bfd8:	0d1b      	lsrs	r3, r3, #20
 800bfda:	051b      	lsls	r3, r3, #20
 800bfdc:	429d      	cmp	r5, r3
 800bfde:	d1bb      	bne.n	800bf58 <_strtod_l+0x9f0>
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	4639      	mov	r1, r7
 800bfe4:	f7f4 fe98 	bl	8000d18 <__aeabi_d2lz>
 800bfe8:	f7f4 fb08 	bl	80005fc <__aeabi_l2d>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	4630      	mov	r0, r6
 800bff2:	4639      	mov	r1, r7
 800bff4:	f7f4 f978 	bl	80002e8 <__aeabi_dsub>
 800bff8:	460b      	mov	r3, r1
 800bffa:	4602      	mov	r2, r0
 800bffc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c000:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c006:	ea46 060a 	orr.w	r6, r6, sl
 800c00a:	431e      	orrs	r6, r3
 800c00c:	d06f      	beq.n	800c0ee <_strtod_l+0xb86>
 800c00e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c048 <_strtod_l+0xae0>)
 800c010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c014:	f7f4 fd92 	bl	8000b3c <__aeabi_dcmplt>
 800c018:	2800      	cmp	r0, #0
 800c01a:	f47f acd3 	bne.w	800b9c4 <_strtod_l+0x45c>
 800c01e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c050 <_strtod_l+0xae8>)
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c028:	f7f4 fda6 	bl	8000b78 <__aeabi_dcmpgt>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d093      	beq.n	800bf58 <_strtod_l+0x9f0>
 800c030:	e4c8      	b.n	800b9c4 <_strtod_l+0x45c>
 800c032:	bf00      	nop
 800c034:	f3af 8000 	nop.w
 800c038:	00000000 	.word	0x00000000
 800c03c:	bff00000 	.word	0xbff00000
 800c040:	00000000 	.word	0x00000000
 800c044:	3ff00000 	.word	0x3ff00000
 800c048:	94a03595 	.word	0x94a03595
 800c04c:	3fdfffff 	.word	0x3fdfffff
 800c050:	35afe535 	.word	0x35afe535
 800c054:	3fe00000 	.word	0x3fe00000
 800c058:	000fffff 	.word	0x000fffff
 800c05c:	7ff00000 	.word	0x7ff00000
 800c060:	7fefffff 	.word	0x7fefffff
 800c064:	3ff00000 	.word	0x3ff00000
 800c068:	3fe00000 	.word	0x3fe00000
 800c06c:	7fe00000 	.word	0x7fe00000
 800c070:	7c9fffff 	.word	0x7c9fffff
 800c074:	9b08      	ldr	r3, [sp, #32]
 800c076:	b323      	cbz	r3, 800c0c2 <_strtod_l+0xb5a>
 800c078:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c07c:	d821      	bhi.n	800c0c2 <_strtod_l+0xb5a>
 800c07e:	a328      	add	r3, pc, #160	@ (adr r3, 800c120 <_strtod_l+0xbb8>)
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	4630      	mov	r0, r6
 800c086:	4639      	mov	r1, r7
 800c088:	f7f4 fd62 	bl	8000b50 <__aeabi_dcmple>
 800c08c:	b1a0      	cbz	r0, 800c0b8 <_strtod_l+0xb50>
 800c08e:	4639      	mov	r1, r7
 800c090:	4630      	mov	r0, r6
 800c092:	f7f4 fdb9 	bl	8000c08 <__aeabi_d2uiz>
 800c096:	2801      	cmp	r0, #1
 800c098:	bf38      	it	cc
 800c09a:	2001      	movcc	r0, #1
 800c09c:	f7f4 fa62 	bl	8000564 <__aeabi_ui2d>
 800c0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	460f      	mov	r7, r1
 800c0a6:	b9fb      	cbnz	r3, 800c0e8 <_strtod_l+0xb80>
 800c0a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0ac:	9014      	str	r0, [sp, #80]	@ 0x50
 800c0ae:	9315      	str	r3, [sp, #84]	@ 0x54
 800c0b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c0b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c0b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c0ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c0be:	1b5b      	subs	r3, r3, r5
 800c0c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c0c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c0c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c0ca:	f002 fcff 	bl	800eacc <__ulp>
 800c0ce:	4650      	mov	r0, sl
 800c0d0:	ec53 2b10 	vmov	r2, r3, d0
 800c0d4:	4659      	mov	r1, fp
 800c0d6:	f7f4 fabf 	bl	8000658 <__aeabi_dmul>
 800c0da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c0de:	f7f4 f905 	bl	80002ec <__adddf3>
 800c0e2:	4682      	mov	sl, r0
 800c0e4:	468b      	mov	fp, r1
 800c0e6:	e770      	b.n	800bfca <_strtod_l+0xa62>
 800c0e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c0ec:	e7e0      	b.n	800c0b0 <_strtod_l+0xb48>
 800c0ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800c128 <_strtod_l+0xbc0>)
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	f7f4 fd22 	bl	8000b3c <__aeabi_dcmplt>
 800c0f8:	e798      	b.n	800c02c <_strtod_l+0xac4>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800c0fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c100:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c102:	6013      	str	r3, [r2, #0]
 800c104:	f7ff ba6d 	b.w	800b5e2 <_strtod_l+0x7a>
 800c108:	2a65      	cmp	r2, #101	@ 0x65
 800c10a:	f43f ab68 	beq.w	800b7de <_strtod_l+0x276>
 800c10e:	2a45      	cmp	r2, #69	@ 0x45
 800c110:	f43f ab65 	beq.w	800b7de <_strtod_l+0x276>
 800c114:	2301      	movs	r3, #1
 800c116:	f7ff bba0 	b.w	800b85a <_strtod_l+0x2f2>
 800c11a:	bf00      	nop
 800c11c:	f3af 8000 	nop.w
 800c120:	ffc00000 	.word	0xffc00000
 800c124:	41dfffff 	.word	0x41dfffff
 800c128:	94a03595 	.word	0x94a03595
 800c12c:	3fcfffff 	.word	0x3fcfffff

0800c130 <_strtod_r>:
 800c130:	4b01      	ldr	r3, [pc, #4]	@ (800c138 <_strtod_r+0x8>)
 800c132:	f7ff ba19 	b.w	800b568 <_strtod_l>
 800c136:	bf00      	nop
 800c138:	200003d4 	.word	0x200003d4

0800c13c <_strtol_l.isra.0>:
 800c13c:	2b24      	cmp	r3, #36	@ 0x24
 800c13e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c142:	4686      	mov	lr, r0
 800c144:	4690      	mov	r8, r2
 800c146:	d801      	bhi.n	800c14c <_strtol_l.isra.0+0x10>
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d106      	bne.n	800c15a <_strtol_l.isra.0+0x1e>
 800c14c:	f000 f8f4 	bl	800c338 <__errno>
 800c150:	2316      	movs	r3, #22
 800c152:	6003      	str	r3, [r0, #0]
 800c154:	2000      	movs	r0, #0
 800c156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c15a:	4834      	ldr	r0, [pc, #208]	@ (800c22c <_strtol_l.isra.0+0xf0>)
 800c15c:	460d      	mov	r5, r1
 800c15e:	462a      	mov	r2, r5
 800c160:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c164:	5d06      	ldrb	r6, [r0, r4]
 800c166:	f016 0608 	ands.w	r6, r6, #8
 800c16a:	d1f8      	bne.n	800c15e <_strtol_l.isra.0+0x22>
 800c16c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c16e:	d110      	bne.n	800c192 <_strtol_l.isra.0+0x56>
 800c170:	782c      	ldrb	r4, [r5, #0]
 800c172:	2601      	movs	r6, #1
 800c174:	1c95      	adds	r5, r2, #2
 800c176:	f033 0210 	bics.w	r2, r3, #16
 800c17a:	d115      	bne.n	800c1a8 <_strtol_l.isra.0+0x6c>
 800c17c:	2c30      	cmp	r4, #48	@ 0x30
 800c17e:	d10d      	bne.n	800c19c <_strtol_l.isra.0+0x60>
 800c180:	782a      	ldrb	r2, [r5, #0]
 800c182:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c186:	2a58      	cmp	r2, #88	@ 0x58
 800c188:	d108      	bne.n	800c19c <_strtol_l.isra.0+0x60>
 800c18a:	786c      	ldrb	r4, [r5, #1]
 800c18c:	3502      	adds	r5, #2
 800c18e:	2310      	movs	r3, #16
 800c190:	e00a      	b.n	800c1a8 <_strtol_l.isra.0+0x6c>
 800c192:	2c2b      	cmp	r4, #43	@ 0x2b
 800c194:	bf04      	itt	eq
 800c196:	782c      	ldrbeq	r4, [r5, #0]
 800c198:	1c95      	addeq	r5, r2, #2
 800c19a:	e7ec      	b.n	800c176 <_strtol_l.isra.0+0x3a>
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1f6      	bne.n	800c18e <_strtol_l.isra.0+0x52>
 800c1a0:	2c30      	cmp	r4, #48	@ 0x30
 800c1a2:	bf14      	ite	ne
 800c1a4:	230a      	movne	r3, #10
 800c1a6:	2308      	moveq	r3, #8
 800c1a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c1ac:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	fbbc f9f3 	udiv	r9, ip, r3
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800c1bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c1c0:	2f09      	cmp	r7, #9
 800c1c2:	d80f      	bhi.n	800c1e4 <_strtol_l.isra.0+0xa8>
 800c1c4:	463c      	mov	r4, r7
 800c1c6:	42a3      	cmp	r3, r4
 800c1c8:	dd1b      	ble.n	800c202 <_strtol_l.isra.0+0xc6>
 800c1ca:	1c57      	adds	r7, r2, #1
 800c1cc:	d007      	beq.n	800c1de <_strtol_l.isra.0+0xa2>
 800c1ce:	4581      	cmp	r9, r0
 800c1d0:	d314      	bcc.n	800c1fc <_strtol_l.isra.0+0xc0>
 800c1d2:	d101      	bne.n	800c1d8 <_strtol_l.isra.0+0x9c>
 800c1d4:	45a2      	cmp	sl, r4
 800c1d6:	db11      	blt.n	800c1fc <_strtol_l.isra.0+0xc0>
 800c1d8:	fb00 4003 	mla	r0, r0, r3, r4
 800c1dc:	2201      	movs	r2, #1
 800c1de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1e2:	e7eb      	b.n	800c1bc <_strtol_l.isra.0+0x80>
 800c1e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c1e8:	2f19      	cmp	r7, #25
 800c1ea:	d801      	bhi.n	800c1f0 <_strtol_l.isra.0+0xb4>
 800c1ec:	3c37      	subs	r4, #55	@ 0x37
 800c1ee:	e7ea      	b.n	800c1c6 <_strtol_l.isra.0+0x8a>
 800c1f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c1f4:	2f19      	cmp	r7, #25
 800c1f6:	d804      	bhi.n	800c202 <_strtol_l.isra.0+0xc6>
 800c1f8:	3c57      	subs	r4, #87	@ 0x57
 800c1fa:	e7e4      	b.n	800c1c6 <_strtol_l.isra.0+0x8a>
 800c1fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c200:	e7ed      	b.n	800c1de <_strtol_l.isra.0+0xa2>
 800c202:	1c53      	adds	r3, r2, #1
 800c204:	d108      	bne.n	800c218 <_strtol_l.isra.0+0xdc>
 800c206:	2322      	movs	r3, #34	@ 0x22
 800c208:	f8ce 3000 	str.w	r3, [lr]
 800c20c:	4660      	mov	r0, ip
 800c20e:	f1b8 0f00 	cmp.w	r8, #0
 800c212:	d0a0      	beq.n	800c156 <_strtol_l.isra.0+0x1a>
 800c214:	1e69      	subs	r1, r5, #1
 800c216:	e006      	b.n	800c226 <_strtol_l.isra.0+0xea>
 800c218:	b106      	cbz	r6, 800c21c <_strtol_l.isra.0+0xe0>
 800c21a:	4240      	negs	r0, r0
 800c21c:	f1b8 0f00 	cmp.w	r8, #0
 800c220:	d099      	beq.n	800c156 <_strtol_l.isra.0+0x1a>
 800c222:	2a00      	cmp	r2, #0
 800c224:	d1f6      	bne.n	800c214 <_strtol_l.isra.0+0xd8>
 800c226:	f8c8 1000 	str.w	r1, [r8]
 800c22a:	e794      	b.n	800c156 <_strtol_l.isra.0+0x1a>
 800c22c:	0800fbb1 	.word	0x0800fbb1

0800c230 <_strtol_r>:
 800c230:	f7ff bf84 	b.w	800c13c <_strtol_l.isra.0>

0800c234 <_fwalk_sglue>:
 800c234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c238:	4607      	mov	r7, r0
 800c23a:	4688      	mov	r8, r1
 800c23c:	4614      	mov	r4, r2
 800c23e:	2600      	movs	r6, #0
 800c240:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c244:	f1b9 0901 	subs.w	r9, r9, #1
 800c248:	d505      	bpl.n	800c256 <_fwalk_sglue+0x22>
 800c24a:	6824      	ldr	r4, [r4, #0]
 800c24c:	2c00      	cmp	r4, #0
 800c24e:	d1f7      	bne.n	800c240 <_fwalk_sglue+0xc>
 800c250:	4630      	mov	r0, r6
 800c252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c256:	89ab      	ldrh	r3, [r5, #12]
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d907      	bls.n	800c26c <_fwalk_sglue+0x38>
 800c25c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c260:	3301      	adds	r3, #1
 800c262:	d003      	beq.n	800c26c <_fwalk_sglue+0x38>
 800c264:	4629      	mov	r1, r5
 800c266:	4638      	mov	r0, r7
 800c268:	47c0      	blx	r8
 800c26a:	4306      	orrs	r6, r0
 800c26c:	3568      	adds	r5, #104	@ 0x68
 800c26e:	e7e9      	b.n	800c244 <_fwalk_sglue+0x10>

0800c270 <memset>:
 800c270:	4402      	add	r2, r0
 800c272:	4603      	mov	r3, r0
 800c274:	4293      	cmp	r3, r2
 800c276:	d100      	bne.n	800c27a <memset+0xa>
 800c278:	4770      	bx	lr
 800c27a:	f803 1b01 	strb.w	r1, [r3], #1
 800c27e:	e7f9      	b.n	800c274 <memset+0x4>

0800c280 <strncmp>:
 800c280:	b510      	push	{r4, lr}
 800c282:	b16a      	cbz	r2, 800c2a0 <strncmp+0x20>
 800c284:	3901      	subs	r1, #1
 800c286:	1884      	adds	r4, r0, r2
 800c288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c28c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c290:	429a      	cmp	r2, r3
 800c292:	d103      	bne.n	800c29c <strncmp+0x1c>
 800c294:	42a0      	cmp	r0, r4
 800c296:	d001      	beq.n	800c29c <strncmp+0x1c>
 800c298:	2a00      	cmp	r2, #0
 800c29a:	d1f5      	bne.n	800c288 <strncmp+0x8>
 800c29c:	1ad0      	subs	r0, r2, r3
 800c29e:	bd10      	pop	{r4, pc}
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	e7fc      	b.n	800c29e <strncmp+0x1e>

0800c2a4 <strncpy>:
 800c2a4:	b510      	push	{r4, lr}
 800c2a6:	3901      	subs	r1, #1
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	b132      	cbz	r2, 800c2ba <strncpy+0x16>
 800c2ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c2b0:	f803 4b01 	strb.w	r4, [r3], #1
 800c2b4:	3a01      	subs	r2, #1
 800c2b6:	2c00      	cmp	r4, #0
 800c2b8:	d1f7      	bne.n	800c2aa <strncpy+0x6>
 800c2ba:	441a      	add	r2, r3
 800c2bc:	2100      	movs	r1, #0
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d100      	bne.n	800c2c4 <strncpy+0x20>
 800c2c2:	bd10      	pop	{r4, pc}
 800c2c4:	f803 1b01 	strb.w	r1, [r3], #1
 800c2c8:	e7f9      	b.n	800c2be <strncpy+0x1a>
	...

0800c2cc <_lseek_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4d07      	ldr	r5, [pc, #28]	@ (800c2ec <_lseek_r+0x20>)
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	4608      	mov	r0, r1
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	602a      	str	r2, [r5, #0]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	f7f5 fcc3 	bl	8001c66 <_lseek>
 800c2e0:	1c43      	adds	r3, r0, #1
 800c2e2:	d102      	bne.n	800c2ea <_lseek_r+0x1e>
 800c2e4:	682b      	ldr	r3, [r5, #0]
 800c2e6:	b103      	cbz	r3, 800c2ea <_lseek_r+0x1e>
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	bd38      	pop	{r3, r4, r5, pc}
 800c2ec:	20000d38 	.word	0x20000d38

0800c2f0 <_read_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d07      	ldr	r5, [pc, #28]	@ (800c310 <_read_r+0x20>)
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	602a      	str	r2, [r5, #0]
 800c2fe:	461a      	mov	r2, r3
 800c300:	f7f5 fc51 	bl	8001ba6 <_read>
 800c304:	1c43      	adds	r3, r0, #1
 800c306:	d102      	bne.n	800c30e <_read_r+0x1e>
 800c308:	682b      	ldr	r3, [r5, #0]
 800c30a:	b103      	cbz	r3, 800c30e <_read_r+0x1e>
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	bd38      	pop	{r3, r4, r5, pc}
 800c310:	20000d38 	.word	0x20000d38

0800c314 <_write_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4d07      	ldr	r5, [pc, #28]	@ (800c334 <_write_r+0x20>)
 800c318:	4604      	mov	r4, r0
 800c31a:	4608      	mov	r0, r1
 800c31c:	4611      	mov	r1, r2
 800c31e:	2200      	movs	r2, #0
 800c320:	602a      	str	r2, [r5, #0]
 800c322:	461a      	mov	r2, r3
 800c324:	f7f5 fc5c 	bl	8001be0 <_write>
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	d102      	bne.n	800c332 <_write_r+0x1e>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	b103      	cbz	r3, 800c332 <_write_r+0x1e>
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	20000d38 	.word	0x20000d38

0800c338 <__errno>:
 800c338:	4b01      	ldr	r3, [pc, #4]	@ (800c340 <__errno+0x8>)
 800c33a:	6818      	ldr	r0, [r3, #0]
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop
 800c340:	20000540 	.word	0x20000540

0800c344 <__libc_init_array>:
 800c344:	b570      	push	{r4, r5, r6, lr}
 800c346:	4d0d      	ldr	r5, [pc, #52]	@ (800c37c <__libc_init_array+0x38>)
 800c348:	4c0d      	ldr	r4, [pc, #52]	@ (800c380 <__libc_init_array+0x3c>)
 800c34a:	1b64      	subs	r4, r4, r5
 800c34c:	10a4      	asrs	r4, r4, #2
 800c34e:	2600      	movs	r6, #0
 800c350:	42a6      	cmp	r6, r4
 800c352:	d109      	bne.n	800c368 <__libc_init_array+0x24>
 800c354:	4d0b      	ldr	r5, [pc, #44]	@ (800c384 <__libc_init_array+0x40>)
 800c356:	4c0c      	ldr	r4, [pc, #48]	@ (800c388 <__libc_init_array+0x44>)
 800c358:	f003 fa74 	bl	800f844 <_init>
 800c35c:	1b64      	subs	r4, r4, r5
 800c35e:	10a4      	asrs	r4, r4, #2
 800c360:	2600      	movs	r6, #0
 800c362:	42a6      	cmp	r6, r4
 800c364:	d105      	bne.n	800c372 <__libc_init_array+0x2e>
 800c366:	bd70      	pop	{r4, r5, r6, pc}
 800c368:	f855 3b04 	ldr.w	r3, [r5], #4
 800c36c:	4798      	blx	r3
 800c36e:	3601      	adds	r6, #1
 800c370:	e7ee      	b.n	800c350 <__libc_init_array+0xc>
 800c372:	f855 3b04 	ldr.w	r3, [r5], #4
 800c376:	4798      	blx	r3
 800c378:	3601      	adds	r6, #1
 800c37a:	e7f2      	b.n	800c362 <__libc_init_array+0x1e>
 800c37c:	0800fdf0 	.word	0x0800fdf0
 800c380:	0800fdf0 	.word	0x0800fdf0
 800c384:	0800fdf0 	.word	0x0800fdf0
 800c388:	0800fdf4 	.word	0x0800fdf4

0800c38c <__retarget_lock_init_recursive>:
 800c38c:	4770      	bx	lr

0800c38e <__retarget_lock_acquire_recursive>:
 800c38e:	4770      	bx	lr

0800c390 <__retarget_lock_release_recursive>:
 800c390:	4770      	bx	lr
	...

0800c394 <_localeconv_r>:
 800c394:	4800      	ldr	r0, [pc, #0]	@ (800c398 <_localeconv_r+0x4>)
 800c396:	4770      	bx	lr
 800c398:	200004c4 	.word	0x200004c4

0800c39c <_close_r>:
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4d06      	ldr	r5, [pc, #24]	@ (800c3b8 <_close_r+0x1c>)
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	4608      	mov	r0, r1
 800c3a6:	602b      	str	r3, [r5, #0]
 800c3a8:	f7f5 fc36 	bl	8001c18 <_close>
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	d102      	bne.n	800c3b6 <_close_r+0x1a>
 800c3b0:	682b      	ldr	r3, [r5, #0]
 800c3b2:	b103      	cbz	r3, 800c3b6 <_close_r+0x1a>
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	bd38      	pop	{r3, r4, r5, pc}
 800c3b8:	20000d38 	.word	0x20000d38

0800c3bc <memcpy>:
 800c3bc:	440a      	add	r2, r1
 800c3be:	4291      	cmp	r1, r2
 800c3c0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c3c4:	d100      	bne.n	800c3c8 <memcpy+0xc>
 800c3c6:	4770      	bx	lr
 800c3c8:	b510      	push	{r4, lr}
 800c3ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3d2:	4291      	cmp	r1, r2
 800c3d4:	d1f9      	bne.n	800c3ca <memcpy+0xe>
 800c3d6:	bd10      	pop	{r4, pc}

0800c3d8 <nan>:
 800c3d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c3e0 <nan+0x8>
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	00000000 	.word	0x00000000
 800c3e4:	7ff80000 	.word	0x7ff80000

0800c3e8 <nanf>:
 800c3e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c3f0 <nanf+0x8>
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	7fc00000 	.word	0x7fc00000

0800c3f4 <quorem>:
 800c3f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f8:	6903      	ldr	r3, [r0, #16]
 800c3fa:	690c      	ldr	r4, [r1, #16]
 800c3fc:	42a3      	cmp	r3, r4
 800c3fe:	4607      	mov	r7, r0
 800c400:	db7e      	blt.n	800c500 <quorem+0x10c>
 800c402:	3c01      	subs	r4, #1
 800c404:	f101 0814 	add.w	r8, r1, #20
 800c408:	00a3      	lsls	r3, r4, #2
 800c40a:	f100 0514 	add.w	r5, r0, #20
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c414:	9301      	str	r3, [sp, #4]
 800c416:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c41a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c41e:	3301      	adds	r3, #1
 800c420:	429a      	cmp	r2, r3
 800c422:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c426:	fbb2 f6f3 	udiv	r6, r2, r3
 800c42a:	d32e      	bcc.n	800c48a <quorem+0x96>
 800c42c:	f04f 0a00 	mov.w	sl, #0
 800c430:	46c4      	mov	ip, r8
 800c432:	46ae      	mov	lr, r5
 800c434:	46d3      	mov	fp, sl
 800c436:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c43a:	b298      	uxth	r0, r3
 800c43c:	fb06 a000 	mla	r0, r6, r0, sl
 800c440:	0c02      	lsrs	r2, r0, #16
 800c442:	0c1b      	lsrs	r3, r3, #16
 800c444:	fb06 2303 	mla	r3, r6, r3, r2
 800c448:	f8de 2000 	ldr.w	r2, [lr]
 800c44c:	b280      	uxth	r0, r0
 800c44e:	b292      	uxth	r2, r2
 800c450:	1a12      	subs	r2, r2, r0
 800c452:	445a      	add	r2, fp
 800c454:	f8de 0000 	ldr.w	r0, [lr]
 800c458:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c462:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c466:	b292      	uxth	r2, r2
 800c468:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c46c:	45e1      	cmp	r9, ip
 800c46e:	f84e 2b04 	str.w	r2, [lr], #4
 800c472:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c476:	d2de      	bcs.n	800c436 <quorem+0x42>
 800c478:	9b00      	ldr	r3, [sp, #0]
 800c47a:	58eb      	ldr	r3, [r5, r3]
 800c47c:	b92b      	cbnz	r3, 800c48a <quorem+0x96>
 800c47e:	9b01      	ldr	r3, [sp, #4]
 800c480:	3b04      	subs	r3, #4
 800c482:	429d      	cmp	r5, r3
 800c484:	461a      	mov	r2, r3
 800c486:	d32f      	bcc.n	800c4e8 <quorem+0xf4>
 800c488:	613c      	str	r4, [r7, #16]
 800c48a:	4638      	mov	r0, r7
 800c48c:	f002 fa6e 	bl	800e96c <__mcmp>
 800c490:	2800      	cmp	r0, #0
 800c492:	db25      	blt.n	800c4e0 <quorem+0xec>
 800c494:	4629      	mov	r1, r5
 800c496:	2000      	movs	r0, #0
 800c498:	f858 2b04 	ldr.w	r2, [r8], #4
 800c49c:	f8d1 c000 	ldr.w	ip, [r1]
 800c4a0:	fa1f fe82 	uxth.w	lr, r2
 800c4a4:	fa1f f38c 	uxth.w	r3, ip
 800c4a8:	eba3 030e 	sub.w	r3, r3, lr
 800c4ac:	4403      	add	r3, r0
 800c4ae:	0c12      	lsrs	r2, r2, #16
 800c4b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c4b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4be:	45c1      	cmp	r9, r8
 800c4c0:	f841 3b04 	str.w	r3, [r1], #4
 800c4c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c4c8:	d2e6      	bcs.n	800c498 <quorem+0xa4>
 800c4ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4d2:	b922      	cbnz	r2, 800c4de <quorem+0xea>
 800c4d4:	3b04      	subs	r3, #4
 800c4d6:	429d      	cmp	r5, r3
 800c4d8:	461a      	mov	r2, r3
 800c4da:	d30b      	bcc.n	800c4f4 <quorem+0x100>
 800c4dc:	613c      	str	r4, [r7, #16]
 800c4de:	3601      	adds	r6, #1
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	b003      	add	sp, #12
 800c4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e8:	6812      	ldr	r2, [r2, #0]
 800c4ea:	3b04      	subs	r3, #4
 800c4ec:	2a00      	cmp	r2, #0
 800c4ee:	d1cb      	bne.n	800c488 <quorem+0x94>
 800c4f0:	3c01      	subs	r4, #1
 800c4f2:	e7c6      	b.n	800c482 <quorem+0x8e>
 800c4f4:	6812      	ldr	r2, [r2, #0]
 800c4f6:	3b04      	subs	r3, #4
 800c4f8:	2a00      	cmp	r2, #0
 800c4fa:	d1ef      	bne.n	800c4dc <quorem+0xe8>
 800c4fc:	3c01      	subs	r4, #1
 800c4fe:	e7ea      	b.n	800c4d6 <quorem+0xe2>
 800c500:	2000      	movs	r0, #0
 800c502:	e7ee      	b.n	800c4e2 <quorem+0xee>
 800c504:	0000      	movs	r0, r0
	...

0800c508 <_dtoa_r>:
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	69c7      	ldr	r7, [r0, #28]
 800c50e:	b097      	sub	sp, #92	@ 0x5c
 800c510:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c514:	ec55 4b10 	vmov	r4, r5, d0
 800c518:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c51a:	9107      	str	r1, [sp, #28]
 800c51c:	4681      	mov	r9, r0
 800c51e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c520:	9311      	str	r3, [sp, #68]	@ 0x44
 800c522:	b97f      	cbnz	r7, 800c544 <_dtoa_r+0x3c>
 800c524:	2010      	movs	r0, #16
 800c526:	f001 fc69 	bl	800ddfc <malloc>
 800c52a:	4602      	mov	r2, r0
 800c52c:	f8c9 001c 	str.w	r0, [r9, #28]
 800c530:	b920      	cbnz	r0, 800c53c <_dtoa_r+0x34>
 800c532:	4ba9      	ldr	r3, [pc, #676]	@ (800c7d8 <_dtoa_r+0x2d0>)
 800c534:	21ef      	movs	r1, #239	@ 0xef
 800c536:	48a9      	ldr	r0, [pc, #676]	@ (800c7dc <_dtoa_r+0x2d4>)
 800c538:	f002 fd16 	bl	800ef68 <__assert_func>
 800c53c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c540:	6007      	str	r7, [r0, #0]
 800c542:	60c7      	str	r7, [r0, #12]
 800c544:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c548:	6819      	ldr	r1, [r3, #0]
 800c54a:	b159      	cbz	r1, 800c564 <_dtoa_r+0x5c>
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	604a      	str	r2, [r1, #4]
 800c550:	2301      	movs	r3, #1
 800c552:	4093      	lsls	r3, r2
 800c554:	608b      	str	r3, [r1, #8]
 800c556:	4648      	mov	r0, r9
 800c558:	f001 ff8c 	bl	800e474 <_Bfree>
 800c55c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c560:	2200      	movs	r2, #0
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	1e2b      	subs	r3, r5, #0
 800c566:	bfb9      	ittee	lt
 800c568:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c56c:	9305      	strlt	r3, [sp, #20]
 800c56e:	2300      	movge	r3, #0
 800c570:	6033      	strge	r3, [r6, #0]
 800c572:	9f05      	ldr	r7, [sp, #20]
 800c574:	4b9a      	ldr	r3, [pc, #616]	@ (800c7e0 <_dtoa_r+0x2d8>)
 800c576:	bfbc      	itt	lt
 800c578:	2201      	movlt	r2, #1
 800c57a:	6032      	strlt	r2, [r6, #0]
 800c57c:	43bb      	bics	r3, r7
 800c57e:	d112      	bne.n	800c5a6 <_dtoa_r+0x9e>
 800c580:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c582:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c586:	6013      	str	r3, [r2, #0]
 800c588:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c58c:	4323      	orrs	r3, r4
 800c58e:	f000 855a 	beq.w	800d046 <_dtoa_r+0xb3e>
 800c592:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c594:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c7f4 <_dtoa_r+0x2ec>
 800c598:	2b00      	cmp	r3, #0
 800c59a:	f000 855c 	beq.w	800d056 <_dtoa_r+0xb4e>
 800c59e:	f10a 0303 	add.w	r3, sl, #3
 800c5a2:	f000 bd56 	b.w	800d052 <_dtoa_r+0xb4a>
 800c5a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	ec51 0b17 	vmov	r0, r1, d7
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c5b6:	f7f4 fab7 	bl	8000b28 <__aeabi_dcmpeq>
 800c5ba:	4680      	mov	r8, r0
 800c5bc:	b158      	cbz	r0, 800c5d6 <_dtoa_r+0xce>
 800c5be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c5c6:	b113      	cbz	r3, 800c5ce <_dtoa_r+0xc6>
 800c5c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c5ca:	4b86      	ldr	r3, [pc, #536]	@ (800c7e4 <_dtoa_r+0x2dc>)
 800c5cc:	6013      	str	r3, [r2, #0]
 800c5ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c7f8 <_dtoa_r+0x2f0>
 800c5d2:	f000 bd40 	b.w	800d056 <_dtoa_r+0xb4e>
 800c5d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c5da:	aa14      	add	r2, sp, #80	@ 0x50
 800c5dc:	a915      	add	r1, sp, #84	@ 0x54
 800c5de:	4648      	mov	r0, r9
 800c5e0:	f002 fae4 	bl	800ebac <__d2b>
 800c5e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c5e8:	9002      	str	r0, [sp, #8]
 800c5ea:	2e00      	cmp	r6, #0
 800c5ec:	d078      	beq.n	800c6e0 <_dtoa_r+0x1d8>
 800c5ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c5f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c5fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c600:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c604:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c608:	4619      	mov	r1, r3
 800c60a:	2200      	movs	r2, #0
 800c60c:	4b76      	ldr	r3, [pc, #472]	@ (800c7e8 <_dtoa_r+0x2e0>)
 800c60e:	f7f3 fe6b 	bl	80002e8 <__aeabi_dsub>
 800c612:	a36b      	add	r3, pc, #428	@ (adr r3, 800c7c0 <_dtoa_r+0x2b8>)
 800c614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c618:	f7f4 f81e 	bl	8000658 <__aeabi_dmul>
 800c61c:	a36a      	add	r3, pc, #424	@ (adr r3, 800c7c8 <_dtoa_r+0x2c0>)
 800c61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c622:	f7f3 fe63 	bl	80002ec <__adddf3>
 800c626:	4604      	mov	r4, r0
 800c628:	4630      	mov	r0, r6
 800c62a:	460d      	mov	r5, r1
 800c62c:	f7f3 ffaa 	bl	8000584 <__aeabi_i2d>
 800c630:	a367      	add	r3, pc, #412	@ (adr r3, 800c7d0 <_dtoa_r+0x2c8>)
 800c632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c636:	f7f4 f80f 	bl	8000658 <__aeabi_dmul>
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	4620      	mov	r0, r4
 800c640:	4629      	mov	r1, r5
 800c642:	f7f3 fe53 	bl	80002ec <__adddf3>
 800c646:	4604      	mov	r4, r0
 800c648:	460d      	mov	r5, r1
 800c64a:	f7f4 fab5 	bl	8000bb8 <__aeabi_d2iz>
 800c64e:	2200      	movs	r2, #0
 800c650:	4607      	mov	r7, r0
 800c652:	2300      	movs	r3, #0
 800c654:	4620      	mov	r0, r4
 800c656:	4629      	mov	r1, r5
 800c658:	f7f4 fa70 	bl	8000b3c <__aeabi_dcmplt>
 800c65c:	b140      	cbz	r0, 800c670 <_dtoa_r+0x168>
 800c65e:	4638      	mov	r0, r7
 800c660:	f7f3 ff90 	bl	8000584 <__aeabi_i2d>
 800c664:	4622      	mov	r2, r4
 800c666:	462b      	mov	r3, r5
 800c668:	f7f4 fa5e 	bl	8000b28 <__aeabi_dcmpeq>
 800c66c:	b900      	cbnz	r0, 800c670 <_dtoa_r+0x168>
 800c66e:	3f01      	subs	r7, #1
 800c670:	2f16      	cmp	r7, #22
 800c672:	d852      	bhi.n	800c71a <_dtoa_r+0x212>
 800c674:	4b5d      	ldr	r3, [pc, #372]	@ (800c7ec <_dtoa_r+0x2e4>)
 800c676:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c682:	f7f4 fa5b 	bl	8000b3c <__aeabi_dcmplt>
 800c686:	2800      	cmp	r0, #0
 800c688:	d049      	beq.n	800c71e <_dtoa_r+0x216>
 800c68a:	3f01      	subs	r7, #1
 800c68c:	2300      	movs	r3, #0
 800c68e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c690:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c692:	1b9b      	subs	r3, r3, r6
 800c694:	1e5a      	subs	r2, r3, #1
 800c696:	bf45      	ittet	mi
 800c698:	f1c3 0301 	rsbmi	r3, r3, #1
 800c69c:	9300      	strmi	r3, [sp, #0]
 800c69e:	2300      	movpl	r3, #0
 800c6a0:	2300      	movmi	r3, #0
 800c6a2:	9206      	str	r2, [sp, #24]
 800c6a4:	bf54      	ite	pl
 800c6a6:	9300      	strpl	r3, [sp, #0]
 800c6a8:	9306      	strmi	r3, [sp, #24]
 800c6aa:	2f00      	cmp	r7, #0
 800c6ac:	db39      	blt.n	800c722 <_dtoa_r+0x21a>
 800c6ae:	9b06      	ldr	r3, [sp, #24]
 800c6b0:	970d      	str	r7, [sp, #52]	@ 0x34
 800c6b2:	443b      	add	r3, r7
 800c6b4:	9306      	str	r3, [sp, #24]
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	9308      	str	r3, [sp, #32]
 800c6ba:	9b07      	ldr	r3, [sp, #28]
 800c6bc:	2b09      	cmp	r3, #9
 800c6be:	d863      	bhi.n	800c788 <_dtoa_r+0x280>
 800c6c0:	2b05      	cmp	r3, #5
 800c6c2:	bfc4      	itt	gt
 800c6c4:	3b04      	subgt	r3, #4
 800c6c6:	9307      	strgt	r3, [sp, #28]
 800c6c8:	9b07      	ldr	r3, [sp, #28]
 800c6ca:	f1a3 0302 	sub.w	r3, r3, #2
 800c6ce:	bfcc      	ite	gt
 800c6d0:	2400      	movgt	r4, #0
 800c6d2:	2401      	movle	r4, #1
 800c6d4:	2b03      	cmp	r3, #3
 800c6d6:	d863      	bhi.n	800c7a0 <_dtoa_r+0x298>
 800c6d8:	e8df f003 	tbb	[pc, r3]
 800c6dc:	2b375452 	.word	0x2b375452
 800c6e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c6e4:	441e      	add	r6, r3
 800c6e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c6ea:	2b20      	cmp	r3, #32
 800c6ec:	bfc1      	itttt	gt
 800c6ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c6f2:	409f      	lslgt	r7, r3
 800c6f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c6f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c6fc:	bfd6      	itet	le
 800c6fe:	f1c3 0320 	rsble	r3, r3, #32
 800c702:	ea47 0003 	orrgt.w	r0, r7, r3
 800c706:	fa04 f003 	lslle.w	r0, r4, r3
 800c70a:	f7f3 ff2b 	bl	8000564 <__aeabi_ui2d>
 800c70e:	2201      	movs	r2, #1
 800c710:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c714:	3e01      	subs	r6, #1
 800c716:	9212      	str	r2, [sp, #72]	@ 0x48
 800c718:	e776      	b.n	800c608 <_dtoa_r+0x100>
 800c71a:	2301      	movs	r3, #1
 800c71c:	e7b7      	b.n	800c68e <_dtoa_r+0x186>
 800c71e:	9010      	str	r0, [sp, #64]	@ 0x40
 800c720:	e7b6      	b.n	800c690 <_dtoa_r+0x188>
 800c722:	9b00      	ldr	r3, [sp, #0]
 800c724:	1bdb      	subs	r3, r3, r7
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	427b      	negs	r3, r7
 800c72a:	9308      	str	r3, [sp, #32]
 800c72c:	2300      	movs	r3, #0
 800c72e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c730:	e7c3      	b.n	800c6ba <_dtoa_r+0x1b2>
 800c732:	2301      	movs	r3, #1
 800c734:	9309      	str	r3, [sp, #36]	@ 0x24
 800c736:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c738:	eb07 0b03 	add.w	fp, r7, r3
 800c73c:	f10b 0301 	add.w	r3, fp, #1
 800c740:	2b01      	cmp	r3, #1
 800c742:	9303      	str	r3, [sp, #12]
 800c744:	bfb8      	it	lt
 800c746:	2301      	movlt	r3, #1
 800c748:	e006      	b.n	800c758 <_dtoa_r+0x250>
 800c74a:	2301      	movs	r3, #1
 800c74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c74e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c750:	2b00      	cmp	r3, #0
 800c752:	dd28      	ble.n	800c7a6 <_dtoa_r+0x29e>
 800c754:	469b      	mov	fp, r3
 800c756:	9303      	str	r3, [sp, #12]
 800c758:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c75c:	2100      	movs	r1, #0
 800c75e:	2204      	movs	r2, #4
 800c760:	f102 0514 	add.w	r5, r2, #20
 800c764:	429d      	cmp	r5, r3
 800c766:	d926      	bls.n	800c7b6 <_dtoa_r+0x2ae>
 800c768:	6041      	str	r1, [r0, #4]
 800c76a:	4648      	mov	r0, r9
 800c76c:	f001 fe42 	bl	800e3f4 <_Balloc>
 800c770:	4682      	mov	sl, r0
 800c772:	2800      	cmp	r0, #0
 800c774:	d142      	bne.n	800c7fc <_dtoa_r+0x2f4>
 800c776:	4b1e      	ldr	r3, [pc, #120]	@ (800c7f0 <_dtoa_r+0x2e8>)
 800c778:	4602      	mov	r2, r0
 800c77a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c77e:	e6da      	b.n	800c536 <_dtoa_r+0x2e>
 800c780:	2300      	movs	r3, #0
 800c782:	e7e3      	b.n	800c74c <_dtoa_r+0x244>
 800c784:	2300      	movs	r3, #0
 800c786:	e7d5      	b.n	800c734 <_dtoa_r+0x22c>
 800c788:	2401      	movs	r4, #1
 800c78a:	2300      	movs	r3, #0
 800c78c:	9307      	str	r3, [sp, #28]
 800c78e:	9409      	str	r4, [sp, #36]	@ 0x24
 800c790:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800c794:	2200      	movs	r2, #0
 800c796:	f8cd b00c 	str.w	fp, [sp, #12]
 800c79a:	2312      	movs	r3, #18
 800c79c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c79e:	e7db      	b.n	800c758 <_dtoa_r+0x250>
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7a4:	e7f4      	b.n	800c790 <_dtoa_r+0x288>
 800c7a6:	f04f 0b01 	mov.w	fp, #1
 800c7aa:	f8cd b00c 	str.w	fp, [sp, #12]
 800c7ae:	465b      	mov	r3, fp
 800c7b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c7b4:	e7d0      	b.n	800c758 <_dtoa_r+0x250>
 800c7b6:	3101      	adds	r1, #1
 800c7b8:	0052      	lsls	r2, r2, #1
 800c7ba:	e7d1      	b.n	800c760 <_dtoa_r+0x258>
 800c7bc:	f3af 8000 	nop.w
 800c7c0:	636f4361 	.word	0x636f4361
 800c7c4:	3fd287a7 	.word	0x3fd287a7
 800c7c8:	8b60c8b3 	.word	0x8b60c8b3
 800c7cc:	3fc68a28 	.word	0x3fc68a28
 800c7d0:	509f79fb 	.word	0x509f79fb
 800c7d4:	3fd34413 	.word	0x3fd34413
 800c7d8:	0800f9be 	.word	0x0800f9be
 800c7dc:	0800f9d5 	.word	0x0800f9d5
 800c7e0:	7ff00000 	.word	0x7ff00000
 800c7e4:	0800fac6 	.word	0x0800fac6
 800c7e8:	3ff80000 	.word	0x3ff80000
 800c7ec:	0800fce8 	.word	0x0800fce8
 800c7f0:	0800fa2d 	.word	0x0800fa2d
 800c7f4:	0800f9ba 	.word	0x0800f9ba
 800c7f8:	0800fac5 	.word	0x0800fac5
 800c7fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c800:	6018      	str	r0, [r3, #0]
 800c802:	9b03      	ldr	r3, [sp, #12]
 800c804:	2b0e      	cmp	r3, #14
 800c806:	f200 80a1 	bhi.w	800c94c <_dtoa_r+0x444>
 800c80a:	2c00      	cmp	r4, #0
 800c80c:	f000 809e 	beq.w	800c94c <_dtoa_r+0x444>
 800c810:	2f00      	cmp	r7, #0
 800c812:	dd33      	ble.n	800c87c <_dtoa_r+0x374>
 800c814:	4b9c      	ldr	r3, [pc, #624]	@ (800ca88 <_dtoa_r+0x580>)
 800c816:	f007 020f 	and.w	r2, r7, #15
 800c81a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c81e:	ed93 7b00 	vldr	d7, [r3]
 800c822:	05f8      	lsls	r0, r7, #23
 800c824:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c828:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c82c:	d516      	bpl.n	800c85c <_dtoa_r+0x354>
 800c82e:	4b97      	ldr	r3, [pc, #604]	@ (800ca8c <_dtoa_r+0x584>)
 800c830:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c834:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c838:	f7f4 f838 	bl	80008ac <__aeabi_ddiv>
 800c83c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c840:	f004 040f 	and.w	r4, r4, #15
 800c844:	2603      	movs	r6, #3
 800c846:	4d91      	ldr	r5, [pc, #580]	@ (800ca8c <_dtoa_r+0x584>)
 800c848:	b954      	cbnz	r4, 800c860 <_dtoa_r+0x358>
 800c84a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c84e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c852:	f7f4 f82b 	bl	80008ac <__aeabi_ddiv>
 800c856:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c85a:	e028      	b.n	800c8ae <_dtoa_r+0x3a6>
 800c85c:	2602      	movs	r6, #2
 800c85e:	e7f2      	b.n	800c846 <_dtoa_r+0x33e>
 800c860:	07e1      	lsls	r1, r4, #31
 800c862:	d508      	bpl.n	800c876 <_dtoa_r+0x36e>
 800c864:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c868:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c86c:	f7f3 fef4 	bl	8000658 <__aeabi_dmul>
 800c870:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c874:	3601      	adds	r6, #1
 800c876:	1064      	asrs	r4, r4, #1
 800c878:	3508      	adds	r5, #8
 800c87a:	e7e5      	b.n	800c848 <_dtoa_r+0x340>
 800c87c:	f000 80af 	beq.w	800c9de <_dtoa_r+0x4d6>
 800c880:	427c      	negs	r4, r7
 800c882:	4b81      	ldr	r3, [pc, #516]	@ (800ca88 <_dtoa_r+0x580>)
 800c884:	4d81      	ldr	r5, [pc, #516]	@ (800ca8c <_dtoa_r+0x584>)
 800c886:	f004 020f 	and.w	r2, r4, #15
 800c88a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c892:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c896:	f7f3 fedf 	bl	8000658 <__aeabi_dmul>
 800c89a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c89e:	1124      	asrs	r4, r4, #4
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	2602      	movs	r6, #2
 800c8a4:	2c00      	cmp	r4, #0
 800c8a6:	f040 808f 	bne.w	800c9c8 <_dtoa_r+0x4c0>
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1d3      	bne.n	800c856 <_dtoa_r+0x34e>
 800c8ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c8b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f000 8094 	beq.w	800c9e2 <_dtoa_r+0x4da>
 800c8ba:	4b75      	ldr	r3, [pc, #468]	@ (800ca90 <_dtoa_r+0x588>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	4620      	mov	r0, r4
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	f7f4 f93b 	bl	8000b3c <__aeabi_dcmplt>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	f000 808b 	beq.w	800c9e2 <_dtoa_r+0x4da>
 800c8cc:	9b03      	ldr	r3, [sp, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f000 8087 	beq.w	800c9e2 <_dtoa_r+0x4da>
 800c8d4:	f1bb 0f00 	cmp.w	fp, #0
 800c8d8:	dd34      	ble.n	800c944 <_dtoa_r+0x43c>
 800c8da:	4620      	mov	r0, r4
 800c8dc:	4b6d      	ldr	r3, [pc, #436]	@ (800ca94 <_dtoa_r+0x58c>)
 800c8de:	2200      	movs	r2, #0
 800c8e0:	4629      	mov	r1, r5
 800c8e2:	f7f3 feb9 	bl	8000658 <__aeabi_dmul>
 800c8e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8ea:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c8ee:	3601      	adds	r6, #1
 800c8f0:	465c      	mov	r4, fp
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	f7f3 fe46 	bl	8000584 <__aeabi_i2d>
 800c8f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8fc:	f7f3 feac 	bl	8000658 <__aeabi_dmul>
 800c900:	4b65      	ldr	r3, [pc, #404]	@ (800ca98 <_dtoa_r+0x590>)
 800c902:	2200      	movs	r2, #0
 800c904:	f7f3 fcf2 	bl	80002ec <__adddf3>
 800c908:	4605      	mov	r5, r0
 800c90a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c90e:	2c00      	cmp	r4, #0
 800c910:	d16a      	bne.n	800c9e8 <_dtoa_r+0x4e0>
 800c912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c916:	4b61      	ldr	r3, [pc, #388]	@ (800ca9c <_dtoa_r+0x594>)
 800c918:	2200      	movs	r2, #0
 800c91a:	f7f3 fce5 	bl	80002e8 <__aeabi_dsub>
 800c91e:	4602      	mov	r2, r0
 800c920:	460b      	mov	r3, r1
 800c922:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c926:	462a      	mov	r2, r5
 800c928:	4633      	mov	r3, r6
 800c92a:	f7f4 f925 	bl	8000b78 <__aeabi_dcmpgt>
 800c92e:	2800      	cmp	r0, #0
 800c930:	f040 8298 	bne.w	800ce64 <_dtoa_r+0x95c>
 800c934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c938:	462a      	mov	r2, r5
 800c93a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c93e:	f7f4 f8fd 	bl	8000b3c <__aeabi_dcmplt>
 800c942:	bb38      	cbnz	r0, 800c994 <_dtoa_r+0x48c>
 800c944:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c948:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c94c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c94e:	2b00      	cmp	r3, #0
 800c950:	f2c0 8157 	blt.w	800cc02 <_dtoa_r+0x6fa>
 800c954:	2f0e      	cmp	r7, #14
 800c956:	f300 8154 	bgt.w	800cc02 <_dtoa_r+0x6fa>
 800c95a:	4b4b      	ldr	r3, [pc, #300]	@ (800ca88 <_dtoa_r+0x580>)
 800c95c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c960:	ed93 7b00 	vldr	d7, [r3]
 800c964:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c966:	2b00      	cmp	r3, #0
 800c968:	ed8d 7b00 	vstr	d7, [sp]
 800c96c:	f280 80e5 	bge.w	800cb3a <_dtoa_r+0x632>
 800c970:	9b03      	ldr	r3, [sp, #12]
 800c972:	2b00      	cmp	r3, #0
 800c974:	f300 80e1 	bgt.w	800cb3a <_dtoa_r+0x632>
 800c978:	d10c      	bne.n	800c994 <_dtoa_r+0x48c>
 800c97a:	4b48      	ldr	r3, [pc, #288]	@ (800ca9c <_dtoa_r+0x594>)
 800c97c:	2200      	movs	r2, #0
 800c97e:	ec51 0b17 	vmov	r0, r1, d7
 800c982:	f7f3 fe69 	bl	8000658 <__aeabi_dmul>
 800c986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c98a:	f7f4 f8eb 	bl	8000b64 <__aeabi_dcmpge>
 800c98e:	2800      	cmp	r0, #0
 800c990:	f000 8266 	beq.w	800ce60 <_dtoa_r+0x958>
 800c994:	2400      	movs	r4, #0
 800c996:	4625      	mov	r5, r4
 800c998:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c99a:	4656      	mov	r6, sl
 800c99c:	ea6f 0803 	mvn.w	r8, r3
 800c9a0:	2700      	movs	r7, #0
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	4648      	mov	r0, r9
 800c9a6:	f001 fd65 	bl	800e474 <_Bfree>
 800c9aa:	2d00      	cmp	r5, #0
 800c9ac:	f000 80bd 	beq.w	800cb2a <_dtoa_r+0x622>
 800c9b0:	b12f      	cbz	r7, 800c9be <_dtoa_r+0x4b6>
 800c9b2:	42af      	cmp	r7, r5
 800c9b4:	d003      	beq.n	800c9be <_dtoa_r+0x4b6>
 800c9b6:	4639      	mov	r1, r7
 800c9b8:	4648      	mov	r0, r9
 800c9ba:	f001 fd5b 	bl	800e474 <_Bfree>
 800c9be:	4629      	mov	r1, r5
 800c9c0:	4648      	mov	r0, r9
 800c9c2:	f001 fd57 	bl	800e474 <_Bfree>
 800c9c6:	e0b0      	b.n	800cb2a <_dtoa_r+0x622>
 800c9c8:	07e2      	lsls	r2, r4, #31
 800c9ca:	d505      	bpl.n	800c9d8 <_dtoa_r+0x4d0>
 800c9cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9d0:	f7f3 fe42 	bl	8000658 <__aeabi_dmul>
 800c9d4:	3601      	adds	r6, #1
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	1064      	asrs	r4, r4, #1
 800c9da:	3508      	adds	r5, #8
 800c9dc:	e762      	b.n	800c8a4 <_dtoa_r+0x39c>
 800c9de:	2602      	movs	r6, #2
 800c9e0:	e765      	b.n	800c8ae <_dtoa_r+0x3a6>
 800c9e2:	9c03      	ldr	r4, [sp, #12]
 800c9e4:	46b8      	mov	r8, r7
 800c9e6:	e784      	b.n	800c8f2 <_dtoa_r+0x3ea>
 800c9e8:	4b27      	ldr	r3, [pc, #156]	@ (800ca88 <_dtoa_r+0x580>)
 800c9ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c9ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c9f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c9f4:	4454      	add	r4, sl
 800c9f6:	2900      	cmp	r1, #0
 800c9f8:	d054      	beq.n	800caa4 <_dtoa_r+0x59c>
 800c9fa:	4929      	ldr	r1, [pc, #164]	@ (800caa0 <_dtoa_r+0x598>)
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	f7f3 ff55 	bl	80008ac <__aeabi_ddiv>
 800ca02:	4633      	mov	r3, r6
 800ca04:	462a      	mov	r2, r5
 800ca06:	f7f3 fc6f 	bl	80002e8 <__aeabi_dsub>
 800ca0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ca0e:	4656      	mov	r6, sl
 800ca10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca14:	f7f4 f8d0 	bl	8000bb8 <__aeabi_d2iz>
 800ca18:	4605      	mov	r5, r0
 800ca1a:	f7f3 fdb3 	bl	8000584 <__aeabi_i2d>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	460b      	mov	r3, r1
 800ca22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca26:	f7f3 fc5f 	bl	80002e8 <__aeabi_dsub>
 800ca2a:	3530      	adds	r5, #48	@ 0x30
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	460b      	mov	r3, r1
 800ca30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca34:	f806 5b01 	strb.w	r5, [r6], #1
 800ca38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ca3c:	f7f4 f87e 	bl	8000b3c <__aeabi_dcmplt>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d172      	bne.n	800cb2a <_dtoa_r+0x622>
 800ca44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca48:	4911      	ldr	r1, [pc, #68]	@ (800ca90 <_dtoa_r+0x588>)
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	f7f3 fc4c 	bl	80002e8 <__aeabi_dsub>
 800ca50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ca54:	f7f4 f872 	bl	8000b3c <__aeabi_dcmplt>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	f040 80b4 	bne.w	800cbc6 <_dtoa_r+0x6be>
 800ca5e:	42a6      	cmp	r6, r4
 800ca60:	f43f af70 	beq.w	800c944 <_dtoa_r+0x43c>
 800ca64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ca68:	4b0a      	ldr	r3, [pc, #40]	@ (800ca94 <_dtoa_r+0x58c>)
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f7f3 fdf4 	bl	8000658 <__aeabi_dmul>
 800ca70:	4b08      	ldr	r3, [pc, #32]	@ (800ca94 <_dtoa_r+0x58c>)
 800ca72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ca76:	2200      	movs	r2, #0
 800ca78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca7c:	f7f3 fdec 	bl	8000658 <__aeabi_dmul>
 800ca80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca84:	e7c4      	b.n	800ca10 <_dtoa_r+0x508>
 800ca86:	bf00      	nop
 800ca88:	0800fce8 	.word	0x0800fce8
 800ca8c:	0800fcc0 	.word	0x0800fcc0
 800ca90:	3ff00000 	.word	0x3ff00000
 800ca94:	40240000 	.word	0x40240000
 800ca98:	401c0000 	.word	0x401c0000
 800ca9c:	40140000 	.word	0x40140000
 800caa0:	3fe00000 	.word	0x3fe00000
 800caa4:	4631      	mov	r1, r6
 800caa6:	4628      	mov	r0, r5
 800caa8:	f7f3 fdd6 	bl	8000658 <__aeabi_dmul>
 800caac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cab0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cab2:	4656      	mov	r6, sl
 800cab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cab8:	f7f4 f87e 	bl	8000bb8 <__aeabi_d2iz>
 800cabc:	4605      	mov	r5, r0
 800cabe:	f7f3 fd61 	bl	8000584 <__aeabi_i2d>
 800cac2:	4602      	mov	r2, r0
 800cac4:	460b      	mov	r3, r1
 800cac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800caca:	f7f3 fc0d 	bl	80002e8 <__aeabi_dsub>
 800cace:	3530      	adds	r5, #48	@ 0x30
 800cad0:	f806 5b01 	strb.w	r5, [r6], #1
 800cad4:	4602      	mov	r2, r0
 800cad6:	460b      	mov	r3, r1
 800cad8:	42a6      	cmp	r6, r4
 800cada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cade:	f04f 0200 	mov.w	r2, #0
 800cae2:	d124      	bne.n	800cb2e <_dtoa_r+0x626>
 800cae4:	4baf      	ldr	r3, [pc, #700]	@ (800cda4 <_dtoa_r+0x89c>)
 800cae6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800caea:	f7f3 fbff 	bl	80002ec <__adddf3>
 800caee:	4602      	mov	r2, r0
 800caf0:	460b      	mov	r3, r1
 800caf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800caf6:	f7f4 f83f 	bl	8000b78 <__aeabi_dcmpgt>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d163      	bne.n	800cbc6 <_dtoa_r+0x6be>
 800cafe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cb02:	49a8      	ldr	r1, [pc, #672]	@ (800cda4 <_dtoa_r+0x89c>)
 800cb04:	2000      	movs	r0, #0
 800cb06:	f7f3 fbef 	bl	80002e8 <__aeabi_dsub>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb12:	f7f4 f813 	bl	8000b3c <__aeabi_dcmplt>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	f43f af14 	beq.w	800c944 <_dtoa_r+0x43c>
 800cb1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cb1e:	1e73      	subs	r3, r6, #1
 800cb20:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb26:	2b30      	cmp	r3, #48	@ 0x30
 800cb28:	d0f8      	beq.n	800cb1c <_dtoa_r+0x614>
 800cb2a:	4647      	mov	r7, r8
 800cb2c:	e03b      	b.n	800cba6 <_dtoa_r+0x69e>
 800cb2e:	4b9e      	ldr	r3, [pc, #632]	@ (800cda8 <_dtoa_r+0x8a0>)
 800cb30:	f7f3 fd92 	bl	8000658 <__aeabi_dmul>
 800cb34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb38:	e7bc      	b.n	800cab4 <_dtoa_r+0x5ac>
 800cb3a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cb3e:	4656      	mov	r6, sl
 800cb40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb44:	4620      	mov	r0, r4
 800cb46:	4629      	mov	r1, r5
 800cb48:	f7f3 feb0 	bl	80008ac <__aeabi_ddiv>
 800cb4c:	f7f4 f834 	bl	8000bb8 <__aeabi_d2iz>
 800cb50:	4680      	mov	r8, r0
 800cb52:	f7f3 fd17 	bl	8000584 <__aeabi_i2d>
 800cb56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb5a:	f7f3 fd7d 	bl	8000658 <__aeabi_dmul>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	460b      	mov	r3, r1
 800cb62:	4620      	mov	r0, r4
 800cb64:	4629      	mov	r1, r5
 800cb66:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cb6a:	f7f3 fbbd 	bl	80002e8 <__aeabi_dsub>
 800cb6e:	f806 4b01 	strb.w	r4, [r6], #1
 800cb72:	9d03      	ldr	r5, [sp, #12]
 800cb74:	eba6 040a 	sub.w	r4, r6, sl
 800cb78:	42a5      	cmp	r5, r4
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	d133      	bne.n	800cbe8 <_dtoa_r+0x6e0>
 800cb80:	f7f3 fbb4 	bl	80002ec <__adddf3>
 800cb84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb88:	4604      	mov	r4, r0
 800cb8a:	460d      	mov	r5, r1
 800cb8c:	f7f3 fff4 	bl	8000b78 <__aeabi_dcmpgt>
 800cb90:	b9c0      	cbnz	r0, 800cbc4 <_dtoa_r+0x6bc>
 800cb92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb96:	4620      	mov	r0, r4
 800cb98:	4629      	mov	r1, r5
 800cb9a:	f7f3 ffc5 	bl	8000b28 <__aeabi_dcmpeq>
 800cb9e:	b110      	cbz	r0, 800cba6 <_dtoa_r+0x69e>
 800cba0:	f018 0f01 	tst.w	r8, #1
 800cba4:	d10e      	bne.n	800cbc4 <_dtoa_r+0x6bc>
 800cba6:	9902      	ldr	r1, [sp, #8]
 800cba8:	4648      	mov	r0, r9
 800cbaa:	f001 fc63 	bl	800e474 <_Bfree>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	7033      	strb	r3, [r6, #0]
 800cbb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cbb4:	3701      	adds	r7, #1
 800cbb6:	601f      	str	r7, [r3, #0]
 800cbb8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 824b 	beq.w	800d056 <_dtoa_r+0xb4e>
 800cbc0:	601e      	str	r6, [r3, #0]
 800cbc2:	e248      	b.n	800d056 <_dtoa_r+0xb4e>
 800cbc4:	46b8      	mov	r8, r7
 800cbc6:	4633      	mov	r3, r6
 800cbc8:	461e      	mov	r6, r3
 800cbca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbce:	2a39      	cmp	r2, #57	@ 0x39
 800cbd0:	d106      	bne.n	800cbe0 <_dtoa_r+0x6d8>
 800cbd2:	459a      	cmp	sl, r3
 800cbd4:	d1f8      	bne.n	800cbc8 <_dtoa_r+0x6c0>
 800cbd6:	2230      	movs	r2, #48	@ 0x30
 800cbd8:	f108 0801 	add.w	r8, r8, #1
 800cbdc:	f88a 2000 	strb.w	r2, [sl]
 800cbe0:	781a      	ldrb	r2, [r3, #0]
 800cbe2:	3201      	adds	r2, #1
 800cbe4:	701a      	strb	r2, [r3, #0]
 800cbe6:	e7a0      	b.n	800cb2a <_dtoa_r+0x622>
 800cbe8:	4b6f      	ldr	r3, [pc, #444]	@ (800cda8 <_dtoa_r+0x8a0>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	f7f3 fd34 	bl	8000658 <__aeabi_dmul>
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	4604      	mov	r4, r0
 800cbf6:	460d      	mov	r5, r1
 800cbf8:	f7f3 ff96 	bl	8000b28 <__aeabi_dcmpeq>
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	d09f      	beq.n	800cb40 <_dtoa_r+0x638>
 800cc00:	e7d1      	b.n	800cba6 <_dtoa_r+0x69e>
 800cc02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc04:	2a00      	cmp	r2, #0
 800cc06:	f000 80ea 	beq.w	800cdde <_dtoa_r+0x8d6>
 800cc0a:	9a07      	ldr	r2, [sp, #28]
 800cc0c:	2a01      	cmp	r2, #1
 800cc0e:	f300 80cd 	bgt.w	800cdac <_dtoa_r+0x8a4>
 800cc12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cc14:	2a00      	cmp	r2, #0
 800cc16:	f000 80c1 	beq.w	800cd9c <_dtoa_r+0x894>
 800cc1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cc1e:	9c08      	ldr	r4, [sp, #32]
 800cc20:	9e00      	ldr	r6, [sp, #0]
 800cc22:	9a00      	ldr	r2, [sp, #0]
 800cc24:	441a      	add	r2, r3
 800cc26:	9200      	str	r2, [sp, #0]
 800cc28:	9a06      	ldr	r2, [sp, #24]
 800cc2a:	2101      	movs	r1, #1
 800cc2c:	441a      	add	r2, r3
 800cc2e:	4648      	mov	r0, r9
 800cc30:	9206      	str	r2, [sp, #24]
 800cc32:	f001 fd1d 	bl	800e670 <__i2b>
 800cc36:	4605      	mov	r5, r0
 800cc38:	b166      	cbz	r6, 800cc54 <_dtoa_r+0x74c>
 800cc3a:	9b06      	ldr	r3, [sp, #24]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	dd09      	ble.n	800cc54 <_dtoa_r+0x74c>
 800cc40:	42b3      	cmp	r3, r6
 800cc42:	9a00      	ldr	r2, [sp, #0]
 800cc44:	bfa8      	it	ge
 800cc46:	4633      	movge	r3, r6
 800cc48:	1ad2      	subs	r2, r2, r3
 800cc4a:	9200      	str	r2, [sp, #0]
 800cc4c:	9a06      	ldr	r2, [sp, #24]
 800cc4e:	1af6      	subs	r6, r6, r3
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	9306      	str	r3, [sp, #24]
 800cc54:	9b08      	ldr	r3, [sp, #32]
 800cc56:	b30b      	cbz	r3, 800cc9c <_dtoa_r+0x794>
 800cc58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 80c6 	beq.w	800cdec <_dtoa_r+0x8e4>
 800cc60:	2c00      	cmp	r4, #0
 800cc62:	f000 80c0 	beq.w	800cde6 <_dtoa_r+0x8de>
 800cc66:	4629      	mov	r1, r5
 800cc68:	4622      	mov	r2, r4
 800cc6a:	4648      	mov	r0, r9
 800cc6c:	f001 fdb8 	bl	800e7e0 <__pow5mult>
 800cc70:	9a02      	ldr	r2, [sp, #8]
 800cc72:	4601      	mov	r1, r0
 800cc74:	4605      	mov	r5, r0
 800cc76:	4648      	mov	r0, r9
 800cc78:	f001 fd10 	bl	800e69c <__multiply>
 800cc7c:	9902      	ldr	r1, [sp, #8]
 800cc7e:	4680      	mov	r8, r0
 800cc80:	4648      	mov	r0, r9
 800cc82:	f001 fbf7 	bl	800e474 <_Bfree>
 800cc86:	9b08      	ldr	r3, [sp, #32]
 800cc88:	1b1b      	subs	r3, r3, r4
 800cc8a:	9308      	str	r3, [sp, #32]
 800cc8c:	f000 80b1 	beq.w	800cdf2 <_dtoa_r+0x8ea>
 800cc90:	9a08      	ldr	r2, [sp, #32]
 800cc92:	4641      	mov	r1, r8
 800cc94:	4648      	mov	r0, r9
 800cc96:	f001 fda3 	bl	800e7e0 <__pow5mult>
 800cc9a:	9002      	str	r0, [sp, #8]
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	4648      	mov	r0, r9
 800cca0:	f001 fce6 	bl	800e670 <__i2b>
 800cca4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cca6:	4604      	mov	r4, r0
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f000 81d8 	beq.w	800d05e <_dtoa_r+0xb56>
 800ccae:	461a      	mov	r2, r3
 800ccb0:	4601      	mov	r1, r0
 800ccb2:	4648      	mov	r0, r9
 800ccb4:	f001 fd94 	bl	800e7e0 <__pow5mult>
 800ccb8:	9b07      	ldr	r3, [sp, #28]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	f300 809f 	bgt.w	800ce00 <_dtoa_r+0x8f8>
 800ccc2:	9b04      	ldr	r3, [sp, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f040 8097 	bne.w	800cdf8 <_dtoa_r+0x8f0>
 800ccca:	9b05      	ldr	r3, [sp, #20]
 800cccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f040 8093 	bne.w	800cdfc <_dtoa_r+0x8f4>
 800ccd6:	9b05      	ldr	r3, [sp, #20]
 800ccd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ccdc:	0d1b      	lsrs	r3, r3, #20
 800ccde:	051b      	lsls	r3, r3, #20
 800cce0:	b133      	cbz	r3, 800ccf0 <_dtoa_r+0x7e8>
 800cce2:	9b00      	ldr	r3, [sp, #0]
 800cce4:	3301      	adds	r3, #1
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	9b06      	ldr	r3, [sp, #24]
 800ccea:	3301      	adds	r3, #1
 800ccec:	9306      	str	r3, [sp, #24]
 800ccee:	2301      	movs	r3, #1
 800ccf0:	9308      	str	r3, [sp, #32]
 800ccf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f000 81b8 	beq.w	800d06a <_dtoa_r+0xb62>
 800ccfa:	6923      	ldr	r3, [r4, #16]
 800ccfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd00:	6918      	ldr	r0, [r3, #16]
 800cd02:	f001 fc69 	bl	800e5d8 <__hi0bits>
 800cd06:	f1c0 0020 	rsb	r0, r0, #32
 800cd0a:	9b06      	ldr	r3, [sp, #24]
 800cd0c:	4418      	add	r0, r3
 800cd0e:	f010 001f 	ands.w	r0, r0, #31
 800cd12:	f000 8082 	beq.w	800ce1a <_dtoa_r+0x912>
 800cd16:	f1c0 0320 	rsb	r3, r0, #32
 800cd1a:	2b04      	cmp	r3, #4
 800cd1c:	dd73      	ble.n	800ce06 <_dtoa_r+0x8fe>
 800cd1e:	9b00      	ldr	r3, [sp, #0]
 800cd20:	f1c0 001c 	rsb	r0, r0, #28
 800cd24:	4403      	add	r3, r0
 800cd26:	9300      	str	r3, [sp, #0]
 800cd28:	9b06      	ldr	r3, [sp, #24]
 800cd2a:	4403      	add	r3, r0
 800cd2c:	4406      	add	r6, r0
 800cd2e:	9306      	str	r3, [sp, #24]
 800cd30:	9b00      	ldr	r3, [sp, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	dd05      	ble.n	800cd42 <_dtoa_r+0x83a>
 800cd36:	9902      	ldr	r1, [sp, #8]
 800cd38:	461a      	mov	r2, r3
 800cd3a:	4648      	mov	r0, r9
 800cd3c:	f001 fdaa 	bl	800e894 <__lshift>
 800cd40:	9002      	str	r0, [sp, #8]
 800cd42:	9b06      	ldr	r3, [sp, #24]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	dd05      	ble.n	800cd54 <_dtoa_r+0x84c>
 800cd48:	4621      	mov	r1, r4
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	4648      	mov	r0, r9
 800cd4e:	f001 fda1 	bl	800e894 <__lshift>
 800cd52:	4604      	mov	r4, r0
 800cd54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d061      	beq.n	800ce1e <_dtoa_r+0x916>
 800cd5a:	9802      	ldr	r0, [sp, #8]
 800cd5c:	4621      	mov	r1, r4
 800cd5e:	f001 fe05 	bl	800e96c <__mcmp>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	da5b      	bge.n	800ce1e <_dtoa_r+0x916>
 800cd66:	2300      	movs	r3, #0
 800cd68:	9902      	ldr	r1, [sp, #8]
 800cd6a:	220a      	movs	r2, #10
 800cd6c:	4648      	mov	r0, r9
 800cd6e:	f001 fba3 	bl	800e4b8 <__multadd>
 800cd72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd74:	9002      	str	r0, [sp, #8]
 800cd76:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	f000 8177 	beq.w	800d06e <_dtoa_r+0xb66>
 800cd80:	4629      	mov	r1, r5
 800cd82:	2300      	movs	r3, #0
 800cd84:	220a      	movs	r2, #10
 800cd86:	4648      	mov	r0, r9
 800cd88:	f001 fb96 	bl	800e4b8 <__multadd>
 800cd8c:	f1bb 0f00 	cmp.w	fp, #0
 800cd90:	4605      	mov	r5, r0
 800cd92:	dc6f      	bgt.n	800ce74 <_dtoa_r+0x96c>
 800cd94:	9b07      	ldr	r3, [sp, #28]
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	dc49      	bgt.n	800ce2e <_dtoa_r+0x926>
 800cd9a:	e06b      	b.n	800ce74 <_dtoa_r+0x96c>
 800cd9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cd9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cda2:	e73c      	b.n	800cc1e <_dtoa_r+0x716>
 800cda4:	3fe00000 	.word	0x3fe00000
 800cda8:	40240000 	.word	0x40240000
 800cdac:	9b03      	ldr	r3, [sp, #12]
 800cdae:	1e5c      	subs	r4, r3, #1
 800cdb0:	9b08      	ldr	r3, [sp, #32]
 800cdb2:	42a3      	cmp	r3, r4
 800cdb4:	db09      	blt.n	800cdca <_dtoa_r+0x8c2>
 800cdb6:	1b1c      	subs	r4, r3, r4
 800cdb8:	9b03      	ldr	r3, [sp, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	f6bf af30 	bge.w	800cc20 <_dtoa_r+0x718>
 800cdc0:	9b00      	ldr	r3, [sp, #0]
 800cdc2:	9a03      	ldr	r2, [sp, #12]
 800cdc4:	1a9e      	subs	r6, r3, r2
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	e72b      	b.n	800cc22 <_dtoa_r+0x71a>
 800cdca:	9b08      	ldr	r3, [sp, #32]
 800cdcc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cdce:	9408      	str	r4, [sp, #32]
 800cdd0:	1ae3      	subs	r3, r4, r3
 800cdd2:	441a      	add	r2, r3
 800cdd4:	9e00      	ldr	r6, [sp, #0]
 800cdd6:	9b03      	ldr	r3, [sp, #12]
 800cdd8:	920d      	str	r2, [sp, #52]	@ 0x34
 800cdda:	2400      	movs	r4, #0
 800cddc:	e721      	b.n	800cc22 <_dtoa_r+0x71a>
 800cdde:	9c08      	ldr	r4, [sp, #32]
 800cde0:	9e00      	ldr	r6, [sp, #0]
 800cde2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cde4:	e728      	b.n	800cc38 <_dtoa_r+0x730>
 800cde6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cdea:	e751      	b.n	800cc90 <_dtoa_r+0x788>
 800cdec:	9a08      	ldr	r2, [sp, #32]
 800cdee:	9902      	ldr	r1, [sp, #8]
 800cdf0:	e750      	b.n	800cc94 <_dtoa_r+0x78c>
 800cdf2:	f8cd 8008 	str.w	r8, [sp, #8]
 800cdf6:	e751      	b.n	800cc9c <_dtoa_r+0x794>
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	e779      	b.n	800ccf0 <_dtoa_r+0x7e8>
 800cdfc:	9b04      	ldr	r3, [sp, #16]
 800cdfe:	e777      	b.n	800ccf0 <_dtoa_r+0x7e8>
 800ce00:	2300      	movs	r3, #0
 800ce02:	9308      	str	r3, [sp, #32]
 800ce04:	e779      	b.n	800ccfa <_dtoa_r+0x7f2>
 800ce06:	d093      	beq.n	800cd30 <_dtoa_r+0x828>
 800ce08:	9a00      	ldr	r2, [sp, #0]
 800ce0a:	331c      	adds	r3, #28
 800ce0c:	441a      	add	r2, r3
 800ce0e:	9200      	str	r2, [sp, #0]
 800ce10:	9a06      	ldr	r2, [sp, #24]
 800ce12:	441a      	add	r2, r3
 800ce14:	441e      	add	r6, r3
 800ce16:	9206      	str	r2, [sp, #24]
 800ce18:	e78a      	b.n	800cd30 <_dtoa_r+0x828>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	e7f4      	b.n	800ce08 <_dtoa_r+0x900>
 800ce1e:	9b03      	ldr	r3, [sp, #12]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	46b8      	mov	r8, r7
 800ce24:	dc20      	bgt.n	800ce68 <_dtoa_r+0x960>
 800ce26:	469b      	mov	fp, r3
 800ce28:	9b07      	ldr	r3, [sp, #28]
 800ce2a:	2b02      	cmp	r3, #2
 800ce2c:	dd1e      	ble.n	800ce6c <_dtoa_r+0x964>
 800ce2e:	f1bb 0f00 	cmp.w	fp, #0
 800ce32:	f47f adb1 	bne.w	800c998 <_dtoa_r+0x490>
 800ce36:	4621      	mov	r1, r4
 800ce38:	465b      	mov	r3, fp
 800ce3a:	2205      	movs	r2, #5
 800ce3c:	4648      	mov	r0, r9
 800ce3e:	f001 fb3b 	bl	800e4b8 <__multadd>
 800ce42:	4601      	mov	r1, r0
 800ce44:	4604      	mov	r4, r0
 800ce46:	9802      	ldr	r0, [sp, #8]
 800ce48:	f001 fd90 	bl	800e96c <__mcmp>
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	f77f ada3 	ble.w	800c998 <_dtoa_r+0x490>
 800ce52:	4656      	mov	r6, sl
 800ce54:	2331      	movs	r3, #49	@ 0x31
 800ce56:	f806 3b01 	strb.w	r3, [r6], #1
 800ce5a:	f108 0801 	add.w	r8, r8, #1
 800ce5e:	e59f      	b.n	800c9a0 <_dtoa_r+0x498>
 800ce60:	9c03      	ldr	r4, [sp, #12]
 800ce62:	46b8      	mov	r8, r7
 800ce64:	4625      	mov	r5, r4
 800ce66:	e7f4      	b.n	800ce52 <_dtoa_r+0x94a>
 800ce68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ce6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f000 8101 	beq.w	800d076 <_dtoa_r+0xb6e>
 800ce74:	2e00      	cmp	r6, #0
 800ce76:	dd05      	ble.n	800ce84 <_dtoa_r+0x97c>
 800ce78:	4629      	mov	r1, r5
 800ce7a:	4632      	mov	r2, r6
 800ce7c:	4648      	mov	r0, r9
 800ce7e:	f001 fd09 	bl	800e894 <__lshift>
 800ce82:	4605      	mov	r5, r0
 800ce84:	9b08      	ldr	r3, [sp, #32]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d05c      	beq.n	800cf44 <_dtoa_r+0xa3c>
 800ce8a:	6869      	ldr	r1, [r5, #4]
 800ce8c:	4648      	mov	r0, r9
 800ce8e:	f001 fab1 	bl	800e3f4 <_Balloc>
 800ce92:	4606      	mov	r6, r0
 800ce94:	b928      	cbnz	r0, 800cea2 <_dtoa_r+0x99a>
 800ce96:	4b82      	ldr	r3, [pc, #520]	@ (800d0a0 <_dtoa_r+0xb98>)
 800ce98:	4602      	mov	r2, r0
 800ce9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ce9e:	f7ff bb4a 	b.w	800c536 <_dtoa_r+0x2e>
 800cea2:	692a      	ldr	r2, [r5, #16]
 800cea4:	3202      	adds	r2, #2
 800cea6:	0092      	lsls	r2, r2, #2
 800cea8:	f105 010c 	add.w	r1, r5, #12
 800ceac:	300c      	adds	r0, #12
 800ceae:	f7ff fa85 	bl	800c3bc <memcpy>
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	4631      	mov	r1, r6
 800ceb6:	4648      	mov	r0, r9
 800ceb8:	f001 fcec 	bl	800e894 <__lshift>
 800cebc:	f10a 0301 	add.w	r3, sl, #1
 800cec0:	9300      	str	r3, [sp, #0]
 800cec2:	eb0a 030b 	add.w	r3, sl, fp
 800cec6:	9308      	str	r3, [sp, #32]
 800cec8:	9b04      	ldr	r3, [sp, #16]
 800ceca:	f003 0301 	and.w	r3, r3, #1
 800cece:	462f      	mov	r7, r5
 800ced0:	9306      	str	r3, [sp, #24]
 800ced2:	4605      	mov	r5, r0
 800ced4:	9b00      	ldr	r3, [sp, #0]
 800ced6:	9802      	ldr	r0, [sp, #8]
 800ced8:	4621      	mov	r1, r4
 800ceda:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800cede:	f7ff fa89 	bl	800c3f4 <quorem>
 800cee2:	4603      	mov	r3, r0
 800cee4:	3330      	adds	r3, #48	@ 0x30
 800cee6:	9003      	str	r0, [sp, #12]
 800cee8:	4639      	mov	r1, r7
 800ceea:	9802      	ldr	r0, [sp, #8]
 800ceec:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceee:	f001 fd3d 	bl	800e96c <__mcmp>
 800cef2:	462a      	mov	r2, r5
 800cef4:	9004      	str	r0, [sp, #16]
 800cef6:	4621      	mov	r1, r4
 800cef8:	4648      	mov	r0, r9
 800cefa:	f001 fd53 	bl	800e9a4 <__mdiff>
 800cefe:	68c2      	ldr	r2, [r0, #12]
 800cf00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf02:	4606      	mov	r6, r0
 800cf04:	bb02      	cbnz	r2, 800cf48 <_dtoa_r+0xa40>
 800cf06:	4601      	mov	r1, r0
 800cf08:	9802      	ldr	r0, [sp, #8]
 800cf0a:	f001 fd2f 	bl	800e96c <__mcmp>
 800cf0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf10:	4602      	mov	r2, r0
 800cf12:	4631      	mov	r1, r6
 800cf14:	4648      	mov	r0, r9
 800cf16:	920c      	str	r2, [sp, #48]	@ 0x30
 800cf18:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf1a:	f001 faab 	bl	800e474 <_Bfree>
 800cf1e:	9b07      	ldr	r3, [sp, #28]
 800cf20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cf22:	9e00      	ldr	r6, [sp, #0]
 800cf24:	ea42 0103 	orr.w	r1, r2, r3
 800cf28:	9b06      	ldr	r3, [sp, #24]
 800cf2a:	4319      	orrs	r1, r3
 800cf2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf2e:	d10d      	bne.n	800cf4c <_dtoa_r+0xa44>
 800cf30:	2b39      	cmp	r3, #57	@ 0x39
 800cf32:	d027      	beq.n	800cf84 <_dtoa_r+0xa7c>
 800cf34:	9a04      	ldr	r2, [sp, #16]
 800cf36:	2a00      	cmp	r2, #0
 800cf38:	dd01      	ble.n	800cf3e <_dtoa_r+0xa36>
 800cf3a:	9b03      	ldr	r3, [sp, #12]
 800cf3c:	3331      	adds	r3, #49	@ 0x31
 800cf3e:	f88b 3000 	strb.w	r3, [fp]
 800cf42:	e52e      	b.n	800c9a2 <_dtoa_r+0x49a>
 800cf44:	4628      	mov	r0, r5
 800cf46:	e7b9      	b.n	800cebc <_dtoa_r+0x9b4>
 800cf48:	2201      	movs	r2, #1
 800cf4a:	e7e2      	b.n	800cf12 <_dtoa_r+0xa0a>
 800cf4c:	9904      	ldr	r1, [sp, #16]
 800cf4e:	2900      	cmp	r1, #0
 800cf50:	db04      	blt.n	800cf5c <_dtoa_r+0xa54>
 800cf52:	9807      	ldr	r0, [sp, #28]
 800cf54:	4301      	orrs	r1, r0
 800cf56:	9806      	ldr	r0, [sp, #24]
 800cf58:	4301      	orrs	r1, r0
 800cf5a:	d120      	bne.n	800cf9e <_dtoa_r+0xa96>
 800cf5c:	2a00      	cmp	r2, #0
 800cf5e:	ddee      	ble.n	800cf3e <_dtoa_r+0xa36>
 800cf60:	9902      	ldr	r1, [sp, #8]
 800cf62:	9300      	str	r3, [sp, #0]
 800cf64:	2201      	movs	r2, #1
 800cf66:	4648      	mov	r0, r9
 800cf68:	f001 fc94 	bl	800e894 <__lshift>
 800cf6c:	4621      	mov	r1, r4
 800cf6e:	9002      	str	r0, [sp, #8]
 800cf70:	f001 fcfc 	bl	800e96c <__mcmp>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	9b00      	ldr	r3, [sp, #0]
 800cf78:	dc02      	bgt.n	800cf80 <_dtoa_r+0xa78>
 800cf7a:	d1e0      	bne.n	800cf3e <_dtoa_r+0xa36>
 800cf7c:	07da      	lsls	r2, r3, #31
 800cf7e:	d5de      	bpl.n	800cf3e <_dtoa_r+0xa36>
 800cf80:	2b39      	cmp	r3, #57	@ 0x39
 800cf82:	d1da      	bne.n	800cf3a <_dtoa_r+0xa32>
 800cf84:	2339      	movs	r3, #57	@ 0x39
 800cf86:	f88b 3000 	strb.w	r3, [fp]
 800cf8a:	4633      	mov	r3, r6
 800cf8c:	461e      	mov	r6, r3
 800cf8e:	3b01      	subs	r3, #1
 800cf90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cf94:	2a39      	cmp	r2, #57	@ 0x39
 800cf96:	d04e      	beq.n	800d036 <_dtoa_r+0xb2e>
 800cf98:	3201      	adds	r2, #1
 800cf9a:	701a      	strb	r2, [r3, #0]
 800cf9c:	e501      	b.n	800c9a2 <_dtoa_r+0x49a>
 800cf9e:	2a00      	cmp	r2, #0
 800cfa0:	dd03      	ble.n	800cfaa <_dtoa_r+0xaa2>
 800cfa2:	2b39      	cmp	r3, #57	@ 0x39
 800cfa4:	d0ee      	beq.n	800cf84 <_dtoa_r+0xa7c>
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	e7c9      	b.n	800cf3e <_dtoa_r+0xa36>
 800cfaa:	9a00      	ldr	r2, [sp, #0]
 800cfac:	9908      	ldr	r1, [sp, #32]
 800cfae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cfb2:	428a      	cmp	r2, r1
 800cfb4:	d028      	beq.n	800d008 <_dtoa_r+0xb00>
 800cfb6:	9902      	ldr	r1, [sp, #8]
 800cfb8:	2300      	movs	r3, #0
 800cfba:	220a      	movs	r2, #10
 800cfbc:	4648      	mov	r0, r9
 800cfbe:	f001 fa7b 	bl	800e4b8 <__multadd>
 800cfc2:	42af      	cmp	r7, r5
 800cfc4:	9002      	str	r0, [sp, #8]
 800cfc6:	f04f 0300 	mov.w	r3, #0
 800cfca:	f04f 020a 	mov.w	r2, #10
 800cfce:	4639      	mov	r1, r7
 800cfd0:	4648      	mov	r0, r9
 800cfd2:	d107      	bne.n	800cfe4 <_dtoa_r+0xadc>
 800cfd4:	f001 fa70 	bl	800e4b8 <__multadd>
 800cfd8:	4607      	mov	r7, r0
 800cfda:	4605      	mov	r5, r0
 800cfdc:	9b00      	ldr	r3, [sp, #0]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	9300      	str	r3, [sp, #0]
 800cfe2:	e777      	b.n	800ced4 <_dtoa_r+0x9cc>
 800cfe4:	f001 fa68 	bl	800e4b8 <__multadd>
 800cfe8:	4629      	mov	r1, r5
 800cfea:	4607      	mov	r7, r0
 800cfec:	2300      	movs	r3, #0
 800cfee:	220a      	movs	r2, #10
 800cff0:	4648      	mov	r0, r9
 800cff2:	f001 fa61 	bl	800e4b8 <__multadd>
 800cff6:	4605      	mov	r5, r0
 800cff8:	e7f0      	b.n	800cfdc <_dtoa_r+0xad4>
 800cffa:	f1bb 0f00 	cmp.w	fp, #0
 800cffe:	bfcc      	ite	gt
 800d000:	465e      	movgt	r6, fp
 800d002:	2601      	movle	r6, #1
 800d004:	4456      	add	r6, sl
 800d006:	2700      	movs	r7, #0
 800d008:	9902      	ldr	r1, [sp, #8]
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	2201      	movs	r2, #1
 800d00e:	4648      	mov	r0, r9
 800d010:	f001 fc40 	bl	800e894 <__lshift>
 800d014:	4621      	mov	r1, r4
 800d016:	9002      	str	r0, [sp, #8]
 800d018:	f001 fca8 	bl	800e96c <__mcmp>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	dcb4      	bgt.n	800cf8a <_dtoa_r+0xa82>
 800d020:	d102      	bne.n	800d028 <_dtoa_r+0xb20>
 800d022:	9b00      	ldr	r3, [sp, #0]
 800d024:	07db      	lsls	r3, r3, #31
 800d026:	d4b0      	bmi.n	800cf8a <_dtoa_r+0xa82>
 800d028:	4633      	mov	r3, r6
 800d02a:	461e      	mov	r6, r3
 800d02c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d030:	2a30      	cmp	r2, #48	@ 0x30
 800d032:	d0fa      	beq.n	800d02a <_dtoa_r+0xb22>
 800d034:	e4b5      	b.n	800c9a2 <_dtoa_r+0x49a>
 800d036:	459a      	cmp	sl, r3
 800d038:	d1a8      	bne.n	800cf8c <_dtoa_r+0xa84>
 800d03a:	2331      	movs	r3, #49	@ 0x31
 800d03c:	f108 0801 	add.w	r8, r8, #1
 800d040:	f88a 3000 	strb.w	r3, [sl]
 800d044:	e4ad      	b.n	800c9a2 <_dtoa_r+0x49a>
 800d046:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d048:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d0a4 <_dtoa_r+0xb9c>
 800d04c:	b11b      	cbz	r3, 800d056 <_dtoa_r+0xb4e>
 800d04e:	f10a 0308 	add.w	r3, sl, #8
 800d052:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d054:	6013      	str	r3, [r2, #0]
 800d056:	4650      	mov	r0, sl
 800d058:	b017      	add	sp, #92	@ 0x5c
 800d05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05e:	9b07      	ldr	r3, [sp, #28]
 800d060:	2b01      	cmp	r3, #1
 800d062:	f77f ae2e 	ble.w	800ccc2 <_dtoa_r+0x7ba>
 800d066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d068:	9308      	str	r3, [sp, #32]
 800d06a:	2001      	movs	r0, #1
 800d06c:	e64d      	b.n	800cd0a <_dtoa_r+0x802>
 800d06e:	f1bb 0f00 	cmp.w	fp, #0
 800d072:	f77f aed9 	ble.w	800ce28 <_dtoa_r+0x920>
 800d076:	4656      	mov	r6, sl
 800d078:	9802      	ldr	r0, [sp, #8]
 800d07a:	4621      	mov	r1, r4
 800d07c:	f7ff f9ba 	bl	800c3f4 <quorem>
 800d080:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d084:	f806 3b01 	strb.w	r3, [r6], #1
 800d088:	eba6 020a 	sub.w	r2, r6, sl
 800d08c:	4593      	cmp	fp, r2
 800d08e:	ddb4      	ble.n	800cffa <_dtoa_r+0xaf2>
 800d090:	9902      	ldr	r1, [sp, #8]
 800d092:	2300      	movs	r3, #0
 800d094:	220a      	movs	r2, #10
 800d096:	4648      	mov	r0, r9
 800d098:	f001 fa0e 	bl	800e4b8 <__multadd>
 800d09c:	9002      	str	r0, [sp, #8]
 800d09e:	e7eb      	b.n	800d078 <_dtoa_r+0xb70>
 800d0a0:	0800fa2d 	.word	0x0800fa2d
 800d0a4:	0800f9b1 	.word	0x0800f9b1

0800d0a8 <_free_r>:
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	2900      	cmp	r1, #0
 800d0ae:	d041      	beq.n	800d134 <_free_r+0x8c>
 800d0b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0b4:	1f0c      	subs	r4, r1, #4
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	bfb8      	it	lt
 800d0ba:	18e4      	addlt	r4, r4, r3
 800d0bc:	f001 f98e 	bl	800e3dc <__malloc_lock>
 800d0c0:	4a1d      	ldr	r2, [pc, #116]	@ (800d138 <_free_r+0x90>)
 800d0c2:	6813      	ldr	r3, [r2, #0]
 800d0c4:	b933      	cbnz	r3, 800d0d4 <_free_r+0x2c>
 800d0c6:	6063      	str	r3, [r4, #4]
 800d0c8:	6014      	str	r4, [r2, #0]
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0d0:	f001 b98a 	b.w	800e3e8 <__malloc_unlock>
 800d0d4:	42a3      	cmp	r3, r4
 800d0d6:	d908      	bls.n	800d0ea <_free_r+0x42>
 800d0d8:	6820      	ldr	r0, [r4, #0]
 800d0da:	1821      	adds	r1, r4, r0
 800d0dc:	428b      	cmp	r3, r1
 800d0de:	bf01      	itttt	eq
 800d0e0:	6819      	ldreq	r1, [r3, #0]
 800d0e2:	685b      	ldreq	r3, [r3, #4]
 800d0e4:	1809      	addeq	r1, r1, r0
 800d0e6:	6021      	streq	r1, [r4, #0]
 800d0e8:	e7ed      	b.n	800d0c6 <_free_r+0x1e>
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	b10b      	cbz	r3, 800d0f4 <_free_r+0x4c>
 800d0f0:	42a3      	cmp	r3, r4
 800d0f2:	d9fa      	bls.n	800d0ea <_free_r+0x42>
 800d0f4:	6811      	ldr	r1, [r2, #0]
 800d0f6:	1850      	adds	r0, r2, r1
 800d0f8:	42a0      	cmp	r0, r4
 800d0fa:	d10b      	bne.n	800d114 <_free_r+0x6c>
 800d0fc:	6820      	ldr	r0, [r4, #0]
 800d0fe:	4401      	add	r1, r0
 800d100:	1850      	adds	r0, r2, r1
 800d102:	4283      	cmp	r3, r0
 800d104:	6011      	str	r1, [r2, #0]
 800d106:	d1e0      	bne.n	800d0ca <_free_r+0x22>
 800d108:	6818      	ldr	r0, [r3, #0]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	6053      	str	r3, [r2, #4]
 800d10e:	4408      	add	r0, r1
 800d110:	6010      	str	r0, [r2, #0]
 800d112:	e7da      	b.n	800d0ca <_free_r+0x22>
 800d114:	d902      	bls.n	800d11c <_free_r+0x74>
 800d116:	230c      	movs	r3, #12
 800d118:	602b      	str	r3, [r5, #0]
 800d11a:	e7d6      	b.n	800d0ca <_free_r+0x22>
 800d11c:	6820      	ldr	r0, [r4, #0]
 800d11e:	1821      	adds	r1, r4, r0
 800d120:	428b      	cmp	r3, r1
 800d122:	bf04      	itt	eq
 800d124:	6819      	ldreq	r1, [r3, #0]
 800d126:	685b      	ldreq	r3, [r3, #4]
 800d128:	6063      	str	r3, [r4, #4]
 800d12a:	bf04      	itt	eq
 800d12c:	1809      	addeq	r1, r1, r0
 800d12e:	6021      	streq	r1, [r4, #0]
 800d130:	6054      	str	r4, [r2, #4]
 800d132:	e7ca      	b.n	800d0ca <_free_r+0x22>
 800d134:	bd38      	pop	{r3, r4, r5, pc}
 800d136:	bf00      	nop
 800d138:	20000d40 	.word	0x20000d40

0800d13c <rshift>:
 800d13c:	6903      	ldr	r3, [r0, #16]
 800d13e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d142:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d146:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d14a:	f100 0414 	add.w	r4, r0, #20
 800d14e:	dd45      	ble.n	800d1dc <rshift+0xa0>
 800d150:	f011 011f 	ands.w	r1, r1, #31
 800d154:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d158:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d15c:	d10c      	bne.n	800d178 <rshift+0x3c>
 800d15e:	f100 0710 	add.w	r7, r0, #16
 800d162:	4629      	mov	r1, r5
 800d164:	42b1      	cmp	r1, r6
 800d166:	d334      	bcc.n	800d1d2 <rshift+0x96>
 800d168:	1a9b      	subs	r3, r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	1eea      	subs	r2, r5, #3
 800d16e:	4296      	cmp	r6, r2
 800d170:	bf38      	it	cc
 800d172:	2300      	movcc	r3, #0
 800d174:	4423      	add	r3, r4
 800d176:	e015      	b.n	800d1a4 <rshift+0x68>
 800d178:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d17c:	f1c1 0820 	rsb	r8, r1, #32
 800d180:	40cf      	lsrs	r7, r1
 800d182:	f105 0e04 	add.w	lr, r5, #4
 800d186:	46a1      	mov	r9, r4
 800d188:	4576      	cmp	r6, lr
 800d18a:	46f4      	mov	ip, lr
 800d18c:	d815      	bhi.n	800d1ba <rshift+0x7e>
 800d18e:	1a9a      	subs	r2, r3, r2
 800d190:	0092      	lsls	r2, r2, #2
 800d192:	3a04      	subs	r2, #4
 800d194:	3501      	adds	r5, #1
 800d196:	42ae      	cmp	r6, r5
 800d198:	bf38      	it	cc
 800d19a:	2200      	movcc	r2, #0
 800d19c:	18a3      	adds	r3, r4, r2
 800d19e:	50a7      	str	r7, [r4, r2]
 800d1a0:	b107      	cbz	r7, 800d1a4 <rshift+0x68>
 800d1a2:	3304      	adds	r3, #4
 800d1a4:	1b1a      	subs	r2, r3, r4
 800d1a6:	42a3      	cmp	r3, r4
 800d1a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d1ac:	bf08      	it	eq
 800d1ae:	2300      	moveq	r3, #0
 800d1b0:	6102      	str	r2, [r0, #16]
 800d1b2:	bf08      	it	eq
 800d1b4:	6143      	streq	r3, [r0, #20]
 800d1b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1ba:	f8dc c000 	ldr.w	ip, [ip]
 800d1be:	fa0c fc08 	lsl.w	ip, ip, r8
 800d1c2:	ea4c 0707 	orr.w	r7, ip, r7
 800d1c6:	f849 7b04 	str.w	r7, [r9], #4
 800d1ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d1ce:	40cf      	lsrs	r7, r1
 800d1d0:	e7da      	b.n	800d188 <rshift+0x4c>
 800d1d2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d1d6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d1da:	e7c3      	b.n	800d164 <rshift+0x28>
 800d1dc:	4623      	mov	r3, r4
 800d1de:	e7e1      	b.n	800d1a4 <rshift+0x68>

0800d1e0 <__hexdig_fun>:
 800d1e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d1e4:	2b09      	cmp	r3, #9
 800d1e6:	d802      	bhi.n	800d1ee <__hexdig_fun+0xe>
 800d1e8:	3820      	subs	r0, #32
 800d1ea:	b2c0      	uxtb	r0, r0
 800d1ec:	4770      	bx	lr
 800d1ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d1f2:	2b05      	cmp	r3, #5
 800d1f4:	d801      	bhi.n	800d1fa <__hexdig_fun+0x1a>
 800d1f6:	3847      	subs	r0, #71	@ 0x47
 800d1f8:	e7f7      	b.n	800d1ea <__hexdig_fun+0xa>
 800d1fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d1fe:	2b05      	cmp	r3, #5
 800d200:	d801      	bhi.n	800d206 <__hexdig_fun+0x26>
 800d202:	3827      	subs	r0, #39	@ 0x27
 800d204:	e7f1      	b.n	800d1ea <__hexdig_fun+0xa>
 800d206:	2000      	movs	r0, #0
 800d208:	4770      	bx	lr
	...

0800d20c <__gethex>:
 800d20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d210:	b085      	sub	sp, #20
 800d212:	468a      	mov	sl, r1
 800d214:	9302      	str	r3, [sp, #8]
 800d216:	680b      	ldr	r3, [r1, #0]
 800d218:	9001      	str	r0, [sp, #4]
 800d21a:	4690      	mov	r8, r2
 800d21c:	1c9c      	adds	r4, r3, #2
 800d21e:	46a1      	mov	r9, r4
 800d220:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d224:	2830      	cmp	r0, #48	@ 0x30
 800d226:	d0fa      	beq.n	800d21e <__gethex+0x12>
 800d228:	eba9 0303 	sub.w	r3, r9, r3
 800d22c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d230:	f7ff ffd6 	bl	800d1e0 <__hexdig_fun>
 800d234:	4605      	mov	r5, r0
 800d236:	2800      	cmp	r0, #0
 800d238:	d168      	bne.n	800d30c <__gethex+0x100>
 800d23a:	49a0      	ldr	r1, [pc, #640]	@ (800d4bc <__gethex+0x2b0>)
 800d23c:	2201      	movs	r2, #1
 800d23e:	4648      	mov	r0, r9
 800d240:	f7ff f81e 	bl	800c280 <strncmp>
 800d244:	4607      	mov	r7, r0
 800d246:	2800      	cmp	r0, #0
 800d248:	d167      	bne.n	800d31a <__gethex+0x10e>
 800d24a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d24e:	4626      	mov	r6, r4
 800d250:	f7ff ffc6 	bl	800d1e0 <__hexdig_fun>
 800d254:	2800      	cmp	r0, #0
 800d256:	d062      	beq.n	800d31e <__gethex+0x112>
 800d258:	4623      	mov	r3, r4
 800d25a:	7818      	ldrb	r0, [r3, #0]
 800d25c:	2830      	cmp	r0, #48	@ 0x30
 800d25e:	4699      	mov	r9, r3
 800d260:	f103 0301 	add.w	r3, r3, #1
 800d264:	d0f9      	beq.n	800d25a <__gethex+0x4e>
 800d266:	f7ff ffbb 	bl	800d1e0 <__hexdig_fun>
 800d26a:	fab0 f580 	clz	r5, r0
 800d26e:	096d      	lsrs	r5, r5, #5
 800d270:	f04f 0b01 	mov.w	fp, #1
 800d274:	464a      	mov	r2, r9
 800d276:	4616      	mov	r6, r2
 800d278:	3201      	adds	r2, #1
 800d27a:	7830      	ldrb	r0, [r6, #0]
 800d27c:	f7ff ffb0 	bl	800d1e0 <__hexdig_fun>
 800d280:	2800      	cmp	r0, #0
 800d282:	d1f8      	bne.n	800d276 <__gethex+0x6a>
 800d284:	498d      	ldr	r1, [pc, #564]	@ (800d4bc <__gethex+0x2b0>)
 800d286:	2201      	movs	r2, #1
 800d288:	4630      	mov	r0, r6
 800d28a:	f7fe fff9 	bl	800c280 <strncmp>
 800d28e:	2800      	cmp	r0, #0
 800d290:	d13f      	bne.n	800d312 <__gethex+0x106>
 800d292:	b944      	cbnz	r4, 800d2a6 <__gethex+0x9a>
 800d294:	1c74      	adds	r4, r6, #1
 800d296:	4622      	mov	r2, r4
 800d298:	4616      	mov	r6, r2
 800d29a:	3201      	adds	r2, #1
 800d29c:	7830      	ldrb	r0, [r6, #0]
 800d29e:	f7ff ff9f 	bl	800d1e0 <__hexdig_fun>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d1f8      	bne.n	800d298 <__gethex+0x8c>
 800d2a6:	1ba4      	subs	r4, r4, r6
 800d2a8:	00a7      	lsls	r7, r4, #2
 800d2aa:	7833      	ldrb	r3, [r6, #0]
 800d2ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d2b0:	2b50      	cmp	r3, #80	@ 0x50
 800d2b2:	d13e      	bne.n	800d332 <__gethex+0x126>
 800d2b4:	7873      	ldrb	r3, [r6, #1]
 800d2b6:	2b2b      	cmp	r3, #43	@ 0x2b
 800d2b8:	d033      	beq.n	800d322 <__gethex+0x116>
 800d2ba:	2b2d      	cmp	r3, #45	@ 0x2d
 800d2bc:	d034      	beq.n	800d328 <__gethex+0x11c>
 800d2be:	1c71      	adds	r1, r6, #1
 800d2c0:	2400      	movs	r4, #0
 800d2c2:	7808      	ldrb	r0, [r1, #0]
 800d2c4:	f7ff ff8c 	bl	800d1e0 <__hexdig_fun>
 800d2c8:	1e43      	subs	r3, r0, #1
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	2b18      	cmp	r3, #24
 800d2ce:	d830      	bhi.n	800d332 <__gethex+0x126>
 800d2d0:	f1a0 0210 	sub.w	r2, r0, #16
 800d2d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d2d8:	f7ff ff82 	bl	800d1e0 <__hexdig_fun>
 800d2dc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d2e0:	fa5f fc8c 	uxtb.w	ip, ip
 800d2e4:	f1bc 0f18 	cmp.w	ip, #24
 800d2e8:	f04f 030a 	mov.w	r3, #10
 800d2ec:	d91e      	bls.n	800d32c <__gethex+0x120>
 800d2ee:	b104      	cbz	r4, 800d2f2 <__gethex+0xe6>
 800d2f0:	4252      	negs	r2, r2
 800d2f2:	4417      	add	r7, r2
 800d2f4:	f8ca 1000 	str.w	r1, [sl]
 800d2f8:	b1ed      	cbz	r5, 800d336 <__gethex+0x12a>
 800d2fa:	f1bb 0f00 	cmp.w	fp, #0
 800d2fe:	bf0c      	ite	eq
 800d300:	2506      	moveq	r5, #6
 800d302:	2500      	movne	r5, #0
 800d304:	4628      	mov	r0, r5
 800d306:	b005      	add	sp, #20
 800d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30c:	2500      	movs	r5, #0
 800d30e:	462c      	mov	r4, r5
 800d310:	e7b0      	b.n	800d274 <__gethex+0x68>
 800d312:	2c00      	cmp	r4, #0
 800d314:	d1c7      	bne.n	800d2a6 <__gethex+0x9a>
 800d316:	4627      	mov	r7, r4
 800d318:	e7c7      	b.n	800d2aa <__gethex+0x9e>
 800d31a:	464e      	mov	r6, r9
 800d31c:	462f      	mov	r7, r5
 800d31e:	2501      	movs	r5, #1
 800d320:	e7c3      	b.n	800d2aa <__gethex+0x9e>
 800d322:	2400      	movs	r4, #0
 800d324:	1cb1      	adds	r1, r6, #2
 800d326:	e7cc      	b.n	800d2c2 <__gethex+0xb6>
 800d328:	2401      	movs	r4, #1
 800d32a:	e7fb      	b.n	800d324 <__gethex+0x118>
 800d32c:	fb03 0002 	mla	r0, r3, r2, r0
 800d330:	e7ce      	b.n	800d2d0 <__gethex+0xc4>
 800d332:	4631      	mov	r1, r6
 800d334:	e7de      	b.n	800d2f4 <__gethex+0xe8>
 800d336:	eba6 0309 	sub.w	r3, r6, r9
 800d33a:	3b01      	subs	r3, #1
 800d33c:	4629      	mov	r1, r5
 800d33e:	2b07      	cmp	r3, #7
 800d340:	dc0a      	bgt.n	800d358 <__gethex+0x14c>
 800d342:	9801      	ldr	r0, [sp, #4]
 800d344:	f001 f856 	bl	800e3f4 <_Balloc>
 800d348:	4604      	mov	r4, r0
 800d34a:	b940      	cbnz	r0, 800d35e <__gethex+0x152>
 800d34c:	4b5c      	ldr	r3, [pc, #368]	@ (800d4c0 <__gethex+0x2b4>)
 800d34e:	4602      	mov	r2, r0
 800d350:	21e4      	movs	r1, #228	@ 0xe4
 800d352:	485c      	ldr	r0, [pc, #368]	@ (800d4c4 <__gethex+0x2b8>)
 800d354:	f001 fe08 	bl	800ef68 <__assert_func>
 800d358:	3101      	adds	r1, #1
 800d35a:	105b      	asrs	r3, r3, #1
 800d35c:	e7ef      	b.n	800d33e <__gethex+0x132>
 800d35e:	f100 0a14 	add.w	sl, r0, #20
 800d362:	2300      	movs	r3, #0
 800d364:	4655      	mov	r5, sl
 800d366:	469b      	mov	fp, r3
 800d368:	45b1      	cmp	r9, r6
 800d36a:	d337      	bcc.n	800d3dc <__gethex+0x1d0>
 800d36c:	f845 bb04 	str.w	fp, [r5], #4
 800d370:	eba5 050a 	sub.w	r5, r5, sl
 800d374:	10ad      	asrs	r5, r5, #2
 800d376:	6125      	str	r5, [r4, #16]
 800d378:	4658      	mov	r0, fp
 800d37a:	f001 f92d 	bl	800e5d8 <__hi0bits>
 800d37e:	016d      	lsls	r5, r5, #5
 800d380:	f8d8 6000 	ldr.w	r6, [r8]
 800d384:	1a2d      	subs	r5, r5, r0
 800d386:	42b5      	cmp	r5, r6
 800d388:	dd54      	ble.n	800d434 <__gethex+0x228>
 800d38a:	1bad      	subs	r5, r5, r6
 800d38c:	4629      	mov	r1, r5
 800d38e:	4620      	mov	r0, r4
 800d390:	f001 fcb9 	bl	800ed06 <__any_on>
 800d394:	4681      	mov	r9, r0
 800d396:	b178      	cbz	r0, 800d3b8 <__gethex+0x1ac>
 800d398:	1e6b      	subs	r3, r5, #1
 800d39a:	1159      	asrs	r1, r3, #5
 800d39c:	f003 021f 	and.w	r2, r3, #31
 800d3a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d3a4:	f04f 0901 	mov.w	r9, #1
 800d3a8:	fa09 f202 	lsl.w	r2, r9, r2
 800d3ac:	420a      	tst	r2, r1
 800d3ae:	d003      	beq.n	800d3b8 <__gethex+0x1ac>
 800d3b0:	454b      	cmp	r3, r9
 800d3b2:	dc36      	bgt.n	800d422 <__gethex+0x216>
 800d3b4:	f04f 0902 	mov.w	r9, #2
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f7ff febe 	bl	800d13c <rshift>
 800d3c0:	442f      	add	r7, r5
 800d3c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3c6:	42bb      	cmp	r3, r7
 800d3c8:	da42      	bge.n	800d450 <__gethex+0x244>
 800d3ca:	9801      	ldr	r0, [sp, #4]
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	f001 f851 	bl	800e474 <_Bfree>
 800d3d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	6013      	str	r3, [r2, #0]
 800d3d8:	25a3      	movs	r5, #163	@ 0xa3
 800d3da:	e793      	b.n	800d304 <__gethex+0xf8>
 800d3dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d3e0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d3e2:	d012      	beq.n	800d40a <__gethex+0x1fe>
 800d3e4:	2b20      	cmp	r3, #32
 800d3e6:	d104      	bne.n	800d3f2 <__gethex+0x1e6>
 800d3e8:	f845 bb04 	str.w	fp, [r5], #4
 800d3ec:	f04f 0b00 	mov.w	fp, #0
 800d3f0:	465b      	mov	r3, fp
 800d3f2:	7830      	ldrb	r0, [r6, #0]
 800d3f4:	9303      	str	r3, [sp, #12]
 800d3f6:	f7ff fef3 	bl	800d1e0 <__hexdig_fun>
 800d3fa:	9b03      	ldr	r3, [sp, #12]
 800d3fc:	f000 000f 	and.w	r0, r0, #15
 800d400:	4098      	lsls	r0, r3
 800d402:	ea4b 0b00 	orr.w	fp, fp, r0
 800d406:	3304      	adds	r3, #4
 800d408:	e7ae      	b.n	800d368 <__gethex+0x15c>
 800d40a:	45b1      	cmp	r9, r6
 800d40c:	d8ea      	bhi.n	800d3e4 <__gethex+0x1d8>
 800d40e:	492b      	ldr	r1, [pc, #172]	@ (800d4bc <__gethex+0x2b0>)
 800d410:	9303      	str	r3, [sp, #12]
 800d412:	2201      	movs	r2, #1
 800d414:	4630      	mov	r0, r6
 800d416:	f7fe ff33 	bl	800c280 <strncmp>
 800d41a:	9b03      	ldr	r3, [sp, #12]
 800d41c:	2800      	cmp	r0, #0
 800d41e:	d1e1      	bne.n	800d3e4 <__gethex+0x1d8>
 800d420:	e7a2      	b.n	800d368 <__gethex+0x15c>
 800d422:	1ea9      	subs	r1, r5, #2
 800d424:	4620      	mov	r0, r4
 800d426:	f001 fc6e 	bl	800ed06 <__any_on>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d0c2      	beq.n	800d3b4 <__gethex+0x1a8>
 800d42e:	f04f 0903 	mov.w	r9, #3
 800d432:	e7c1      	b.n	800d3b8 <__gethex+0x1ac>
 800d434:	da09      	bge.n	800d44a <__gethex+0x23e>
 800d436:	1b75      	subs	r5, r6, r5
 800d438:	4621      	mov	r1, r4
 800d43a:	9801      	ldr	r0, [sp, #4]
 800d43c:	462a      	mov	r2, r5
 800d43e:	f001 fa29 	bl	800e894 <__lshift>
 800d442:	1b7f      	subs	r7, r7, r5
 800d444:	4604      	mov	r4, r0
 800d446:	f100 0a14 	add.w	sl, r0, #20
 800d44a:	f04f 0900 	mov.w	r9, #0
 800d44e:	e7b8      	b.n	800d3c2 <__gethex+0x1b6>
 800d450:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d454:	42bd      	cmp	r5, r7
 800d456:	dd6f      	ble.n	800d538 <__gethex+0x32c>
 800d458:	1bed      	subs	r5, r5, r7
 800d45a:	42ae      	cmp	r6, r5
 800d45c:	dc34      	bgt.n	800d4c8 <__gethex+0x2bc>
 800d45e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d462:	2b02      	cmp	r3, #2
 800d464:	d022      	beq.n	800d4ac <__gethex+0x2a0>
 800d466:	2b03      	cmp	r3, #3
 800d468:	d024      	beq.n	800d4b4 <__gethex+0x2a8>
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d115      	bne.n	800d49a <__gethex+0x28e>
 800d46e:	42ae      	cmp	r6, r5
 800d470:	d113      	bne.n	800d49a <__gethex+0x28e>
 800d472:	2e01      	cmp	r6, #1
 800d474:	d10b      	bne.n	800d48e <__gethex+0x282>
 800d476:	9a02      	ldr	r2, [sp, #8]
 800d478:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d47c:	6013      	str	r3, [r2, #0]
 800d47e:	2301      	movs	r3, #1
 800d480:	6123      	str	r3, [r4, #16]
 800d482:	f8ca 3000 	str.w	r3, [sl]
 800d486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d488:	2562      	movs	r5, #98	@ 0x62
 800d48a:	601c      	str	r4, [r3, #0]
 800d48c:	e73a      	b.n	800d304 <__gethex+0xf8>
 800d48e:	1e71      	subs	r1, r6, #1
 800d490:	4620      	mov	r0, r4
 800d492:	f001 fc38 	bl	800ed06 <__any_on>
 800d496:	2800      	cmp	r0, #0
 800d498:	d1ed      	bne.n	800d476 <__gethex+0x26a>
 800d49a:	9801      	ldr	r0, [sp, #4]
 800d49c:	4621      	mov	r1, r4
 800d49e:	f000 ffe9 	bl	800e474 <_Bfree>
 800d4a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	6013      	str	r3, [r2, #0]
 800d4a8:	2550      	movs	r5, #80	@ 0x50
 800d4aa:	e72b      	b.n	800d304 <__gethex+0xf8>
 800d4ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1f3      	bne.n	800d49a <__gethex+0x28e>
 800d4b2:	e7e0      	b.n	800d476 <__gethex+0x26a>
 800d4b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d1dd      	bne.n	800d476 <__gethex+0x26a>
 800d4ba:	e7ee      	b.n	800d49a <__gethex+0x28e>
 800d4bc:	0800f9a7 	.word	0x0800f9a7
 800d4c0:	0800fa2d 	.word	0x0800fa2d
 800d4c4:	0800fa3e 	.word	0x0800fa3e
 800d4c8:	1e6f      	subs	r7, r5, #1
 800d4ca:	f1b9 0f00 	cmp.w	r9, #0
 800d4ce:	d130      	bne.n	800d532 <__gethex+0x326>
 800d4d0:	b127      	cbz	r7, 800d4dc <__gethex+0x2d0>
 800d4d2:	4639      	mov	r1, r7
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f001 fc16 	bl	800ed06 <__any_on>
 800d4da:	4681      	mov	r9, r0
 800d4dc:	117a      	asrs	r2, r7, #5
 800d4de:	2301      	movs	r3, #1
 800d4e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d4e4:	f007 071f 	and.w	r7, r7, #31
 800d4e8:	40bb      	lsls	r3, r7
 800d4ea:	4213      	tst	r3, r2
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	bf18      	it	ne
 800d4f2:	f049 0902 	orrne.w	r9, r9, #2
 800d4f6:	f7ff fe21 	bl	800d13c <rshift>
 800d4fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d4fe:	1b76      	subs	r6, r6, r5
 800d500:	2502      	movs	r5, #2
 800d502:	f1b9 0f00 	cmp.w	r9, #0
 800d506:	d047      	beq.n	800d598 <__gethex+0x38c>
 800d508:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	d015      	beq.n	800d53c <__gethex+0x330>
 800d510:	2b03      	cmp	r3, #3
 800d512:	d017      	beq.n	800d544 <__gethex+0x338>
 800d514:	2b01      	cmp	r3, #1
 800d516:	d109      	bne.n	800d52c <__gethex+0x320>
 800d518:	f019 0f02 	tst.w	r9, #2
 800d51c:	d006      	beq.n	800d52c <__gethex+0x320>
 800d51e:	f8da 3000 	ldr.w	r3, [sl]
 800d522:	ea49 0903 	orr.w	r9, r9, r3
 800d526:	f019 0f01 	tst.w	r9, #1
 800d52a:	d10e      	bne.n	800d54a <__gethex+0x33e>
 800d52c:	f045 0510 	orr.w	r5, r5, #16
 800d530:	e032      	b.n	800d598 <__gethex+0x38c>
 800d532:	f04f 0901 	mov.w	r9, #1
 800d536:	e7d1      	b.n	800d4dc <__gethex+0x2d0>
 800d538:	2501      	movs	r5, #1
 800d53a:	e7e2      	b.n	800d502 <__gethex+0x2f6>
 800d53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d53e:	f1c3 0301 	rsb	r3, r3, #1
 800d542:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d546:	2b00      	cmp	r3, #0
 800d548:	d0f0      	beq.n	800d52c <__gethex+0x320>
 800d54a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d54e:	f104 0314 	add.w	r3, r4, #20
 800d552:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d556:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d55a:	f04f 0c00 	mov.w	ip, #0
 800d55e:	4618      	mov	r0, r3
 800d560:	f853 2b04 	ldr.w	r2, [r3], #4
 800d564:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800d568:	d01b      	beq.n	800d5a2 <__gethex+0x396>
 800d56a:	3201      	adds	r2, #1
 800d56c:	6002      	str	r2, [r0, #0]
 800d56e:	2d02      	cmp	r5, #2
 800d570:	f104 0314 	add.w	r3, r4, #20
 800d574:	d13c      	bne.n	800d5f0 <__gethex+0x3e4>
 800d576:	f8d8 2000 	ldr.w	r2, [r8]
 800d57a:	3a01      	subs	r2, #1
 800d57c:	42b2      	cmp	r2, r6
 800d57e:	d109      	bne.n	800d594 <__gethex+0x388>
 800d580:	1171      	asrs	r1, r6, #5
 800d582:	2201      	movs	r2, #1
 800d584:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d588:	f006 061f 	and.w	r6, r6, #31
 800d58c:	fa02 f606 	lsl.w	r6, r2, r6
 800d590:	421e      	tst	r6, r3
 800d592:	d13a      	bne.n	800d60a <__gethex+0x3fe>
 800d594:	f045 0520 	orr.w	r5, r5, #32
 800d598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d59a:	601c      	str	r4, [r3, #0]
 800d59c:	9b02      	ldr	r3, [sp, #8]
 800d59e:	601f      	str	r7, [r3, #0]
 800d5a0:	e6b0      	b.n	800d304 <__gethex+0xf8>
 800d5a2:	4299      	cmp	r1, r3
 800d5a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d5a8:	d8d9      	bhi.n	800d55e <__gethex+0x352>
 800d5aa:	68a3      	ldr	r3, [r4, #8]
 800d5ac:	459b      	cmp	fp, r3
 800d5ae:	db17      	blt.n	800d5e0 <__gethex+0x3d4>
 800d5b0:	6861      	ldr	r1, [r4, #4]
 800d5b2:	9801      	ldr	r0, [sp, #4]
 800d5b4:	3101      	adds	r1, #1
 800d5b6:	f000 ff1d 	bl	800e3f4 <_Balloc>
 800d5ba:	4681      	mov	r9, r0
 800d5bc:	b918      	cbnz	r0, 800d5c6 <__gethex+0x3ba>
 800d5be:	4b1a      	ldr	r3, [pc, #104]	@ (800d628 <__gethex+0x41c>)
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	2184      	movs	r1, #132	@ 0x84
 800d5c4:	e6c5      	b.n	800d352 <__gethex+0x146>
 800d5c6:	6922      	ldr	r2, [r4, #16]
 800d5c8:	3202      	adds	r2, #2
 800d5ca:	f104 010c 	add.w	r1, r4, #12
 800d5ce:	0092      	lsls	r2, r2, #2
 800d5d0:	300c      	adds	r0, #12
 800d5d2:	f7fe fef3 	bl	800c3bc <memcpy>
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	9801      	ldr	r0, [sp, #4]
 800d5da:	f000 ff4b 	bl	800e474 <_Bfree>
 800d5de:	464c      	mov	r4, r9
 800d5e0:	6923      	ldr	r3, [r4, #16]
 800d5e2:	1c5a      	adds	r2, r3, #1
 800d5e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d5e8:	6122      	str	r2, [r4, #16]
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	615a      	str	r2, [r3, #20]
 800d5ee:	e7be      	b.n	800d56e <__gethex+0x362>
 800d5f0:	6922      	ldr	r2, [r4, #16]
 800d5f2:	455a      	cmp	r2, fp
 800d5f4:	dd0b      	ble.n	800d60e <__gethex+0x402>
 800d5f6:	2101      	movs	r1, #1
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f7ff fd9f 	bl	800d13c <rshift>
 800d5fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d602:	3701      	adds	r7, #1
 800d604:	42bb      	cmp	r3, r7
 800d606:	f6ff aee0 	blt.w	800d3ca <__gethex+0x1be>
 800d60a:	2501      	movs	r5, #1
 800d60c:	e7c2      	b.n	800d594 <__gethex+0x388>
 800d60e:	f016 061f 	ands.w	r6, r6, #31
 800d612:	d0fa      	beq.n	800d60a <__gethex+0x3fe>
 800d614:	4453      	add	r3, sl
 800d616:	f1c6 0620 	rsb	r6, r6, #32
 800d61a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d61e:	f000 ffdb 	bl	800e5d8 <__hi0bits>
 800d622:	42b0      	cmp	r0, r6
 800d624:	dbe7      	blt.n	800d5f6 <__gethex+0x3ea>
 800d626:	e7f0      	b.n	800d60a <__gethex+0x3fe>
 800d628:	0800fa2d 	.word	0x0800fa2d

0800d62c <L_shift>:
 800d62c:	f1c2 0208 	rsb	r2, r2, #8
 800d630:	0092      	lsls	r2, r2, #2
 800d632:	b570      	push	{r4, r5, r6, lr}
 800d634:	f1c2 0620 	rsb	r6, r2, #32
 800d638:	6843      	ldr	r3, [r0, #4]
 800d63a:	6804      	ldr	r4, [r0, #0]
 800d63c:	fa03 f506 	lsl.w	r5, r3, r6
 800d640:	432c      	orrs	r4, r5
 800d642:	40d3      	lsrs	r3, r2
 800d644:	6004      	str	r4, [r0, #0]
 800d646:	f840 3f04 	str.w	r3, [r0, #4]!
 800d64a:	4288      	cmp	r0, r1
 800d64c:	d3f4      	bcc.n	800d638 <L_shift+0xc>
 800d64e:	bd70      	pop	{r4, r5, r6, pc}

0800d650 <__match>:
 800d650:	b530      	push	{r4, r5, lr}
 800d652:	6803      	ldr	r3, [r0, #0]
 800d654:	3301      	adds	r3, #1
 800d656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d65a:	b914      	cbnz	r4, 800d662 <__match+0x12>
 800d65c:	6003      	str	r3, [r0, #0]
 800d65e:	2001      	movs	r0, #1
 800d660:	bd30      	pop	{r4, r5, pc}
 800d662:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d666:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d66a:	2d19      	cmp	r5, #25
 800d66c:	bf98      	it	ls
 800d66e:	3220      	addls	r2, #32
 800d670:	42a2      	cmp	r2, r4
 800d672:	d0f0      	beq.n	800d656 <__match+0x6>
 800d674:	2000      	movs	r0, #0
 800d676:	e7f3      	b.n	800d660 <__match+0x10>

0800d678 <__hexnan>:
 800d678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67c:	680b      	ldr	r3, [r1, #0]
 800d67e:	6801      	ldr	r1, [r0, #0]
 800d680:	115e      	asrs	r6, r3, #5
 800d682:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d686:	f013 031f 	ands.w	r3, r3, #31
 800d68a:	b087      	sub	sp, #28
 800d68c:	bf18      	it	ne
 800d68e:	3604      	addne	r6, #4
 800d690:	2500      	movs	r5, #0
 800d692:	1f37      	subs	r7, r6, #4
 800d694:	4682      	mov	sl, r0
 800d696:	4690      	mov	r8, r2
 800d698:	9301      	str	r3, [sp, #4]
 800d69a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d69e:	46b9      	mov	r9, r7
 800d6a0:	463c      	mov	r4, r7
 800d6a2:	9502      	str	r5, [sp, #8]
 800d6a4:	46ab      	mov	fp, r5
 800d6a6:	784a      	ldrb	r2, [r1, #1]
 800d6a8:	1c4b      	adds	r3, r1, #1
 800d6aa:	9303      	str	r3, [sp, #12]
 800d6ac:	b342      	cbz	r2, 800d700 <__hexnan+0x88>
 800d6ae:	4610      	mov	r0, r2
 800d6b0:	9105      	str	r1, [sp, #20]
 800d6b2:	9204      	str	r2, [sp, #16]
 800d6b4:	f7ff fd94 	bl	800d1e0 <__hexdig_fun>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d151      	bne.n	800d760 <__hexnan+0xe8>
 800d6bc:	9a04      	ldr	r2, [sp, #16]
 800d6be:	9905      	ldr	r1, [sp, #20]
 800d6c0:	2a20      	cmp	r2, #32
 800d6c2:	d818      	bhi.n	800d6f6 <__hexnan+0x7e>
 800d6c4:	9b02      	ldr	r3, [sp, #8]
 800d6c6:	459b      	cmp	fp, r3
 800d6c8:	dd13      	ble.n	800d6f2 <__hexnan+0x7a>
 800d6ca:	454c      	cmp	r4, r9
 800d6cc:	d206      	bcs.n	800d6dc <__hexnan+0x64>
 800d6ce:	2d07      	cmp	r5, #7
 800d6d0:	dc04      	bgt.n	800d6dc <__hexnan+0x64>
 800d6d2:	462a      	mov	r2, r5
 800d6d4:	4649      	mov	r1, r9
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f7ff ffa8 	bl	800d62c <L_shift>
 800d6dc:	4544      	cmp	r4, r8
 800d6de:	d952      	bls.n	800d786 <__hexnan+0x10e>
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	f1a4 0904 	sub.w	r9, r4, #4
 800d6e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6ea:	f8cd b008 	str.w	fp, [sp, #8]
 800d6ee:	464c      	mov	r4, r9
 800d6f0:	461d      	mov	r5, r3
 800d6f2:	9903      	ldr	r1, [sp, #12]
 800d6f4:	e7d7      	b.n	800d6a6 <__hexnan+0x2e>
 800d6f6:	2a29      	cmp	r2, #41	@ 0x29
 800d6f8:	d157      	bne.n	800d7aa <__hexnan+0x132>
 800d6fa:	3102      	adds	r1, #2
 800d6fc:	f8ca 1000 	str.w	r1, [sl]
 800d700:	f1bb 0f00 	cmp.w	fp, #0
 800d704:	d051      	beq.n	800d7aa <__hexnan+0x132>
 800d706:	454c      	cmp	r4, r9
 800d708:	d206      	bcs.n	800d718 <__hexnan+0xa0>
 800d70a:	2d07      	cmp	r5, #7
 800d70c:	dc04      	bgt.n	800d718 <__hexnan+0xa0>
 800d70e:	462a      	mov	r2, r5
 800d710:	4649      	mov	r1, r9
 800d712:	4620      	mov	r0, r4
 800d714:	f7ff ff8a 	bl	800d62c <L_shift>
 800d718:	4544      	cmp	r4, r8
 800d71a:	d936      	bls.n	800d78a <__hexnan+0x112>
 800d71c:	f1a8 0204 	sub.w	r2, r8, #4
 800d720:	4623      	mov	r3, r4
 800d722:	f853 1b04 	ldr.w	r1, [r3], #4
 800d726:	f842 1f04 	str.w	r1, [r2, #4]!
 800d72a:	429f      	cmp	r7, r3
 800d72c:	d2f9      	bcs.n	800d722 <__hexnan+0xaa>
 800d72e:	1b3b      	subs	r3, r7, r4
 800d730:	f023 0303 	bic.w	r3, r3, #3
 800d734:	3304      	adds	r3, #4
 800d736:	3401      	adds	r4, #1
 800d738:	3e03      	subs	r6, #3
 800d73a:	42b4      	cmp	r4, r6
 800d73c:	bf88      	it	hi
 800d73e:	2304      	movhi	r3, #4
 800d740:	4443      	add	r3, r8
 800d742:	2200      	movs	r2, #0
 800d744:	f843 2b04 	str.w	r2, [r3], #4
 800d748:	429f      	cmp	r7, r3
 800d74a:	d2fb      	bcs.n	800d744 <__hexnan+0xcc>
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	b91b      	cbnz	r3, 800d758 <__hexnan+0xe0>
 800d750:	4547      	cmp	r7, r8
 800d752:	d128      	bne.n	800d7a6 <__hexnan+0x12e>
 800d754:	2301      	movs	r3, #1
 800d756:	603b      	str	r3, [r7, #0]
 800d758:	2005      	movs	r0, #5
 800d75a:	b007      	add	sp, #28
 800d75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d760:	3501      	adds	r5, #1
 800d762:	2d08      	cmp	r5, #8
 800d764:	f10b 0b01 	add.w	fp, fp, #1
 800d768:	dd06      	ble.n	800d778 <__hexnan+0x100>
 800d76a:	4544      	cmp	r4, r8
 800d76c:	d9c1      	bls.n	800d6f2 <__hexnan+0x7a>
 800d76e:	2300      	movs	r3, #0
 800d770:	f844 3c04 	str.w	r3, [r4, #-4]
 800d774:	2501      	movs	r5, #1
 800d776:	3c04      	subs	r4, #4
 800d778:	6822      	ldr	r2, [r4, #0]
 800d77a:	f000 000f 	and.w	r0, r0, #15
 800d77e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d782:	6020      	str	r0, [r4, #0]
 800d784:	e7b5      	b.n	800d6f2 <__hexnan+0x7a>
 800d786:	2508      	movs	r5, #8
 800d788:	e7b3      	b.n	800d6f2 <__hexnan+0x7a>
 800d78a:	9b01      	ldr	r3, [sp, #4]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d0dd      	beq.n	800d74c <__hexnan+0xd4>
 800d790:	f1c3 0320 	rsb	r3, r3, #32
 800d794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d798:	40da      	lsrs	r2, r3
 800d79a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d79e:	4013      	ands	r3, r2
 800d7a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d7a4:	e7d2      	b.n	800d74c <__hexnan+0xd4>
 800d7a6:	3f04      	subs	r7, #4
 800d7a8:	e7d0      	b.n	800d74c <__hexnan+0xd4>
 800d7aa:	2004      	movs	r0, #4
 800d7ac:	e7d5      	b.n	800d75a <__hexnan+0xe2>

0800d7ae <__ssputs_r>:
 800d7ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b2:	688e      	ldr	r6, [r1, #8]
 800d7b4:	461f      	mov	r7, r3
 800d7b6:	42be      	cmp	r6, r7
 800d7b8:	680b      	ldr	r3, [r1, #0]
 800d7ba:	4682      	mov	sl, r0
 800d7bc:	460c      	mov	r4, r1
 800d7be:	4690      	mov	r8, r2
 800d7c0:	d82d      	bhi.n	800d81e <__ssputs_r+0x70>
 800d7c2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7c6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d7ca:	d026      	beq.n	800d81a <__ssputs_r+0x6c>
 800d7cc:	6965      	ldr	r5, [r4, #20]
 800d7ce:	6909      	ldr	r1, [r1, #16]
 800d7d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7d4:	eba3 0901 	sub.w	r9, r3, r1
 800d7d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7dc:	1c7b      	adds	r3, r7, #1
 800d7de:	444b      	add	r3, r9
 800d7e0:	106d      	asrs	r5, r5, #1
 800d7e2:	429d      	cmp	r5, r3
 800d7e4:	bf38      	it	cc
 800d7e6:	461d      	movcc	r5, r3
 800d7e8:	0553      	lsls	r3, r2, #21
 800d7ea:	d527      	bpl.n	800d83c <__ssputs_r+0x8e>
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	f000 fb2f 	bl	800de50 <_malloc_r>
 800d7f2:	4606      	mov	r6, r0
 800d7f4:	b360      	cbz	r0, 800d850 <__ssputs_r+0xa2>
 800d7f6:	6921      	ldr	r1, [r4, #16]
 800d7f8:	464a      	mov	r2, r9
 800d7fa:	f7fe fddf 	bl	800c3bc <memcpy>
 800d7fe:	89a3      	ldrh	r3, [r4, #12]
 800d800:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d808:	81a3      	strh	r3, [r4, #12]
 800d80a:	6126      	str	r6, [r4, #16]
 800d80c:	6165      	str	r5, [r4, #20]
 800d80e:	444e      	add	r6, r9
 800d810:	eba5 0509 	sub.w	r5, r5, r9
 800d814:	6026      	str	r6, [r4, #0]
 800d816:	60a5      	str	r5, [r4, #8]
 800d818:	463e      	mov	r6, r7
 800d81a:	42be      	cmp	r6, r7
 800d81c:	d900      	bls.n	800d820 <__ssputs_r+0x72>
 800d81e:	463e      	mov	r6, r7
 800d820:	6820      	ldr	r0, [r4, #0]
 800d822:	4632      	mov	r2, r6
 800d824:	4641      	mov	r1, r8
 800d826:	f001 fb74 	bl	800ef12 <memmove>
 800d82a:	68a3      	ldr	r3, [r4, #8]
 800d82c:	1b9b      	subs	r3, r3, r6
 800d82e:	60a3      	str	r3, [r4, #8]
 800d830:	6823      	ldr	r3, [r4, #0]
 800d832:	4433      	add	r3, r6
 800d834:	6023      	str	r3, [r4, #0]
 800d836:	2000      	movs	r0, #0
 800d838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d83c:	462a      	mov	r2, r5
 800d83e:	f001 fabd 	bl	800edbc <_realloc_r>
 800d842:	4606      	mov	r6, r0
 800d844:	2800      	cmp	r0, #0
 800d846:	d1e0      	bne.n	800d80a <__ssputs_r+0x5c>
 800d848:	6921      	ldr	r1, [r4, #16]
 800d84a:	4650      	mov	r0, sl
 800d84c:	f7ff fc2c 	bl	800d0a8 <_free_r>
 800d850:	230c      	movs	r3, #12
 800d852:	f8ca 3000 	str.w	r3, [sl]
 800d856:	89a3      	ldrh	r3, [r4, #12]
 800d858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d85c:	81a3      	strh	r3, [r4, #12]
 800d85e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d862:	e7e9      	b.n	800d838 <__ssputs_r+0x8a>

0800d864 <_svfiprintf_r>:
 800d864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d868:	4698      	mov	r8, r3
 800d86a:	898b      	ldrh	r3, [r1, #12]
 800d86c:	061b      	lsls	r3, r3, #24
 800d86e:	b09d      	sub	sp, #116	@ 0x74
 800d870:	4607      	mov	r7, r0
 800d872:	460d      	mov	r5, r1
 800d874:	4614      	mov	r4, r2
 800d876:	d510      	bpl.n	800d89a <_svfiprintf_r+0x36>
 800d878:	690b      	ldr	r3, [r1, #16]
 800d87a:	b973      	cbnz	r3, 800d89a <_svfiprintf_r+0x36>
 800d87c:	2140      	movs	r1, #64	@ 0x40
 800d87e:	f000 fae7 	bl	800de50 <_malloc_r>
 800d882:	6028      	str	r0, [r5, #0]
 800d884:	6128      	str	r0, [r5, #16]
 800d886:	b930      	cbnz	r0, 800d896 <_svfiprintf_r+0x32>
 800d888:	230c      	movs	r3, #12
 800d88a:	603b      	str	r3, [r7, #0]
 800d88c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d890:	b01d      	add	sp, #116	@ 0x74
 800d892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d896:	2340      	movs	r3, #64	@ 0x40
 800d898:	616b      	str	r3, [r5, #20]
 800d89a:	2300      	movs	r3, #0
 800d89c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d89e:	2320      	movs	r3, #32
 800d8a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8a8:	2330      	movs	r3, #48	@ 0x30
 800d8aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800da48 <_svfiprintf_r+0x1e4>
 800d8ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8b2:	f04f 0901 	mov.w	r9, #1
 800d8b6:	4623      	mov	r3, r4
 800d8b8:	469a      	mov	sl, r3
 800d8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8be:	b10a      	cbz	r2, 800d8c4 <_svfiprintf_r+0x60>
 800d8c0:	2a25      	cmp	r2, #37	@ 0x25
 800d8c2:	d1f9      	bne.n	800d8b8 <_svfiprintf_r+0x54>
 800d8c4:	ebba 0b04 	subs.w	fp, sl, r4
 800d8c8:	d00b      	beq.n	800d8e2 <_svfiprintf_r+0x7e>
 800d8ca:	465b      	mov	r3, fp
 800d8cc:	4622      	mov	r2, r4
 800d8ce:	4629      	mov	r1, r5
 800d8d0:	4638      	mov	r0, r7
 800d8d2:	f7ff ff6c 	bl	800d7ae <__ssputs_r>
 800d8d6:	3001      	adds	r0, #1
 800d8d8:	f000 80a7 	beq.w	800da2a <_svfiprintf_r+0x1c6>
 800d8dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8de:	445a      	add	r2, fp
 800d8e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	f000 809f 	beq.w	800da2a <_svfiprintf_r+0x1c6>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d8f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8f6:	f10a 0a01 	add.w	sl, sl, #1
 800d8fa:	9304      	str	r3, [sp, #16]
 800d8fc:	9307      	str	r3, [sp, #28]
 800d8fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d902:	931a      	str	r3, [sp, #104]	@ 0x68
 800d904:	4654      	mov	r4, sl
 800d906:	2205      	movs	r2, #5
 800d908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d90c:	484e      	ldr	r0, [pc, #312]	@ (800da48 <_svfiprintf_r+0x1e4>)
 800d90e:	f7f2 fc8f 	bl	8000230 <memchr>
 800d912:	9a04      	ldr	r2, [sp, #16]
 800d914:	b9d8      	cbnz	r0, 800d94e <_svfiprintf_r+0xea>
 800d916:	06d0      	lsls	r0, r2, #27
 800d918:	bf44      	itt	mi
 800d91a:	2320      	movmi	r3, #32
 800d91c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d920:	0711      	lsls	r1, r2, #28
 800d922:	bf44      	itt	mi
 800d924:	232b      	movmi	r3, #43	@ 0x2b
 800d926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d92a:	f89a 3000 	ldrb.w	r3, [sl]
 800d92e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d930:	d015      	beq.n	800d95e <_svfiprintf_r+0xfa>
 800d932:	9a07      	ldr	r2, [sp, #28]
 800d934:	4654      	mov	r4, sl
 800d936:	2000      	movs	r0, #0
 800d938:	f04f 0c0a 	mov.w	ip, #10
 800d93c:	4621      	mov	r1, r4
 800d93e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d942:	3b30      	subs	r3, #48	@ 0x30
 800d944:	2b09      	cmp	r3, #9
 800d946:	d94b      	bls.n	800d9e0 <_svfiprintf_r+0x17c>
 800d948:	b1b0      	cbz	r0, 800d978 <_svfiprintf_r+0x114>
 800d94a:	9207      	str	r2, [sp, #28]
 800d94c:	e014      	b.n	800d978 <_svfiprintf_r+0x114>
 800d94e:	eba0 0308 	sub.w	r3, r0, r8
 800d952:	fa09 f303 	lsl.w	r3, r9, r3
 800d956:	4313      	orrs	r3, r2
 800d958:	9304      	str	r3, [sp, #16]
 800d95a:	46a2      	mov	sl, r4
 800d95c:	e7d2      	b.n	800d904 <_svfiprintf_r+0xa0>
 800d95e:	9b03      	ldr	r3, [sp, #12]
 800d960:	1d19      	adds	r1, r3, #4
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	9103      	str	r1, [sp, #12]
 800d966:	2b00      	cmp	r3, #0
 800d968:	bfbb      	ittet	lt
 800d96a:	425b      	neglt	r3, r3
 800d96c:	f042 0202 	orrlt.w	r2, r2, #2
 800d970:	9307      	strge	r3, [sp, #28]
 800d972:	9307      	strlt	r3, [sp, #28]
 800d974:	bfb8      	it	lt
 800d976:	9204      	strlt	r2, [sp, #16]
 800d978:	7823      	ldrb	r3, [r4, #0]
 800d97a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d97c:	d10a      	bne.n	800d994 <_svfiprintf_r+0x130>
 800d97e:	7863      	ldrb	r3, [r4, #1]
 800d980:	2b2a      	cmp	r3, #42	@ 0x2a
 800d982:	d132      	bne.n	800d9ea <_svfiprintf_r+0x186>
 800d984:	9b03      	ldr	r3, [sp, #12]
 800d986:	1d1a      	adds	r2, r3, #4
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	9203      	str	r2, [sp, #12]
 800d98c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d990:	3402      	adds	r4, #2
 800d992:	9305      	str	r3, [sp, #20]
 800d994:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800da58 <_svfiprintf_r+0x1f4>
 800d998:	7821      	ldrb	r1, [r4, #0]
 800d99a:	2203      	movs	r2, #3
 800d99c:	4650      	mov	r0, sl
 800d99e:	f7f2 fc47 	bl	8000230 <memchr>
 800d9a2:	b138      	cbz	r0, 800d9b4 <_svfiprintf_r+0x150>
 800d9a4:	9b04      	ldr	r3, [sp, #16]
 800d9a6:	eba0 000a 	sub.w	r0, r0, sl
 800d9aa:	2240      	movs	r2, #64	@ 0x40
 800d9ac:	4082      	lsls	r2, r0
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	3401      	adds	r4, #1
 800d9b2:	9304      	str	r3, [sp, #16]
 800d9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9b8:	4824      	ldr	r0, [pc, #144]	@ (800da4c <_svfiprintf_r+0x1e8>)
 800d9ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d9be:	2206      	movs	r2, #6
 800d9c0:	f7f2 fc36 	bl	8000230 <memchr>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d036      	beq.n	800da36 <_svfiprintf_r+0x1d2>
 800d9c8:	4b21      	ldr	r3, [pc, #132]	@ (800da50 <_svfiprintf_r+0x1ec>)
 800d9ca:	bb1b      	cbnz	r3, 800da14 <_svfiprintf_r+0x1b0>
 800d9cc:	9b03      	ldr	r3, [sp, #12]
 800d9ce:	3307      	adds	r3, #7
 800d9d0:	f023 0307 	bic.w	r3, r3, #7
 800d9d4:	3308      	adds	r3, #8
 800d9d6:	9303      	str	r3, [sp, #12]
 800d9d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9da:	4433      	add	r3, r6
 800d9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9de:	e76a      	b.n	800d8b6 <_svfiprintf_r+0x52>
 800d9e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	2001      	movs	r0, #1
 800d9e8:	e7a8      	b.n	800d93c <_svfiprintf_r+0xd8>
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	3401      	adds	r4, #1
 800d9ee:	9305      	str	r3, [sp, #20]
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	f04f 0c0a 	mov.w	ip, #10
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9fc:	3a30      	subs	r2, #48	@ 0x30
 800d9fe:	2a09      	cmp	r2, #9
 800da00:	d903      	bls.n	800da0a <_svfiprintf_r+0x1a6>
 800da02:	2b00      	cmp	r3, #0
 800da04:	d0c6      	beq.n	800d994 <_svfiprintf_r+0x130>
 800da06:	9105      	str	r1, [sp, #20]
 800da08:	e7c4      	b.n	800d994 <_svfiprintf_r+0x130>
 800da0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800da0e:	4604      	mov	r4, r0
 800da10:	2301      	movs	r3, #1
 800da12:	e7f0      	b.n	800d9f6 <_svfiprintf_r+0x192>
 800da14:	ab03      	add	r3, sp, #12
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	462a      	mov	r2, r5
 800da1a:	4b0e      	ldr	r3, [pc, #56]	@ (800da54 <_svfiprintf_r+0x1f0>)
 800da1c:	a904      	add	r1, sp, #16
 800da1e:	4638      	mov	r0, r7
 800da20:	f7fc fe50 	bl	800a6c4 <_printf_float>
 800da24:	1c42      	adds	r2, r0, #1
 800da26:	4606      	mov	r6, r0
 800da28:	d1d6      	bne.n	800d9d8 <_svfiprintf_r+0x174>
 800da2a:	89ab      	ldrh	r3, [r5, #12]
 800da2c:	065b      	lsls	r3, r3, #25
 800da2e:	f53f af2d 	bmi.w	800d88c <_svfiprintf_r+0x28>
 800da32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da34:	e72c      	b.n	800d890 <_svfiprintf_r+0x2c>
 800da36:	ab03      	add	r3, sp, #12
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	462a      	mov	r2, r5
 800da3c:	4b05      	ldr	r3, [pc, #20]	@ (800da54 <_svfiprintf_r+0x1f0>)
 800da3e:	a904      	add	r1, sp, #16
 800da40:	4638      	mov	r0, r7
 800da42:	f7fd f8d7 	bl	800abf4 <_printf_i>
 800da46:	e7ed      	b.n	800da24 <_svfiprintf_r+0x1c0>
 800da48:	0800fa9e 	.word	0x0800fa9e
 800da4c:	0800faa8 	.word	0x0800faa8
 800da50:	0800a6c5 	.word	0x0800a6c5
 800da54:	0800d7af 	.word	0x0800d7af
 800da58:	0800faa4 	.word	0x0800faa4

0800da5c <_sungetc_r>:
 800da5c:	b538      	push	{r3, r4, r5, lr}
 800da5e:	1c4b      	adds	r3, r1, #1
 800da60:	4614      	mov	r4, r2
 800da62:	d103      	bne.n	800da6c <_sungetc_r+0x10>
 800da64:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800da68:	4628      	mov	r0, r5
 800da6a:	bd38      	pop	{r3, r4, r5, pc}
 800da6c:	8993      	ldrh	r3, [r2, #12]
 800da6e:	f023 0320 	bic.w	r3, r3, #32
 800da72:	8193      	strh	r3, [r2, #12]
 800da74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da76:	6852      	ldr	r2, [r2, #4]
 800da78:	b2cd      	uxtb	r5, r1
 800da7a:	b18b      	cbz	r3, 800daa0 <_sungetc_r+0x44>
 800da7c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800da7e:	4293      	cmp	r3, r2
 800da80:	dd08      	ble.n	800da94 <_sungetc_r+0x38>
 800da82:	6823      	ldr	r3, [r4, #0]
 800da84:	1e5a      	subs	r2, r3, #1
 800da86:	6022      	str	r2, [r4, #0]
 800da88:	f803 5c01 	strb.w	r5, [r3, #-1]
 800da8c:	6863      	ldr	r3, [r4, #4]
 800da8e:	3301      	adds	r3, #1
 800da90:	6063      	str	r3, [r4, #4]
 800da92:	e7e9      	b.n	800da68 <_sungetc_r+0xc>
 800da94:	4621      	mov	r1, r4
 800da96:	f001 f957 	bl	800ed48 <__submore>
 800da9a:	2800      	cmp	r0, #0
 800da9c:	d0f1      	beq.n	800da82 <_sungetc_r+0x26>
 800da9e:	e7e1      	b.n	800da64 <_sungetc_r+0x8>
 800daa0:	6921      	ldr	r1, [r4, #16]
 800daa2:	6823      	ldr	r3, [r4, #0]
 800daa4:	b151      	cbz	r1, 800dabc <_sungetc_r+0x60>
 800daa6:	4299      	cmp	r1, r3
 800daa8:	d208      	bcs.n	800dabc <_sungetc_r+0x60>
 800daaa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800daae:	42a9      	cmp	r1, r5
 800dab0:	d104      	bne.n	800dabc <_sungetc_r+0x60>
 800dab2:	3b01      	subs	r3, #1
 800dab4:	3201      	adds	r2, #1
 800dab6:	6023      	str	r3, [r4, #0]
 800dab8:	6062      	str	r2, [r4, #4]
 800daba:	e7d5      	b.n	800da68 <_sungetc_r+0xc>
 800dabc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800dac0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dac4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dac6:	2303      	movs	r3, #3
 800dac8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800daca:	4623      	mov	r3, r4
 800dacc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800dad0:	6023      	str	r3, [r4, #0]
 800dad2:	2301      	movs	r3, #1
 800dad4:	e7dc      	b.n	800da90 <_sungetc_r+0x34>

0800dad6 <__ssrefill_r>:
 800dad6:	b510      	push	{r4, lr}
 800dad8:	460c      	mov	r4, r1
 800dada:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800dadc:	b169      	cbz	r1, 800dafa <__ssrefill_r+0x24>
 800dade:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dae2:	4299      	cmp	r1, r3
 800dae4:	d001      	beq.n	800daea <__ssrefill_r+0x14>
 800dae6:	f7ff fadf 	bl	800d0a8 <_free_r>
 800daea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800daec:	6063      	str	r3, [r4, #4]
 800daee:	2000      	movs	r0, #0
 800daf0:	6360      	str	r0, [r4, #52]	@ 0x34
 800daf2:	b113      	cbz	r3, 800dafa <__ssrefill_r+0x24>
 800daf4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800daf6:	6023      	str	r3, [r4, #0]
 800daf8:	bd10      	pop	{r4, pc}
 800dafa:	6923      	ldr	r3, [r4, #16]
 800dafc:	6023      	str	r3, [r4, #0]
 800dafe:	2300      	movs	r3, #0
 800db00:	6063      	str	r3, [r4, #4]
 800db02:	89a3      	ldrh	r3, [r4, #12]
 800db04:	f043 0320 	orr.w	r3, r3, #32
 800db08:	81a3      	strh	r3, [r4, #12]
 800db0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db0e:	e7f3      	b.n	800daf8 <__ssrefill_r+0x22>

0800db10 <__ssvfiscanf_r>:
 800db10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db14:	460c      	mov	r4, r1
 800db16:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800db1a:	2100      	movs	r1, #0
 800db1c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800db20:	49a6      	ldr	r1, [pc, #664]	@ (800ddbc <__ssvfiscanf_r+0x2ac>)
 800db22:	91a0      	str	r1, [sp, #640]	@ 0x280
 800db24:	f10d 0804 	add.w	r8, sp, #4
 800db28:	49a5      	ldr	r1, [pc, #660]	@ (800ddc0 <__ssvfiscanf_r+0x2b0>)
 800db2a:	4fa6      	ldr	r7, [pc, #664]	@ (800ddc4 <__ssvfiscanf_r+0x2b4>)
 800db2c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800db30:	4606      	mov	r6, r0
 800db32:	91a1      	str	r1, [sp, #644]	@ 0x284
 800db34:	9300      	str	r3, [sp, #0]
 800db36:	f892 9000 	ldrb.w	r9, [r2]
 800db3a:	f1b9 0f00 	cmp.w	r9, #0
 800db3e:	f000 8158 	beq.w	800ddf2 <__ssvfiscanf_r+0x2e2>
 800db42:	f817 3009 	ldrb.w	r3, [r7, r9]
 800db46:	f013 0308 	ands.w	r3, r3, #8
 800db4a:	f102 0501 	add.w	r5, r2, #1
 800db4e:	d019      	beq.n	800db84 <__ssvfiscanf_r+0x74>
 800db50:	6863      	ldr	r3, [r4, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	dd0f      	ble.n	800db76 <__ssvfiscanf_r+0x66>
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	781a      	ldrb	r2, [r3, #0]
 800db5a:	5cba      	ldrb	r2, [r7, r2]
 800db5c:	0712      	lsls	r2, r2, #28
 800db5e:	d401      	bmi.n	800db64 <__ssvfiscanf_r+0x54>
 800db60:	462a      	mov	r2, r5
 800db62:	e7e8      	b.n	800db36 <__ssvfiscanf_r+0x26>
 800db64:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800db66:	3201      	adds	r2, #1
 800db68:	9245      	str	r2, [sp, #276]	@ 0x114
 800db6a:	6862      	ldr	r2, [r4, #4]
 800db6c:	3301      	adds	r3, #1
 800db6e:	3a01      	subs	r2, #1
 800db70:	6062      	str	r2, [r4, #4]
 800db72:	6023      	str	r3, [r4, #0]
 800db74:	e7ec      	b.n	800db50 <__ssvfiscanf_r+0x40>
 800db76:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800db78:	4621      	mov	r1, r4
 800db7a:	4630      	mov	r0, r6
 800db7c:	4798      	blx	r3
 800db7e:	2800      	cmp	r0, #0
 800db80:	d0e9      	beq.n	800db56 <__ssvfiscanf_r+0x46>
 800db82:	e7ed      	b.n	800db60 <__ssvfiscanf_r+0x50>
 800db84:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800db88:	f040 8085 	bne.w	800dc96 <__ssvfiscanf_r+0x186>
 800db8c:	9341      	str	r3, [sp, #260]	@ 0x104
 800db8e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800db90:	7853      	ldrb	r3, [r2, #1]
 800db92:	2b2a      	cmp	r3, #42	@ 0x2a
 800db94:	bf02      	ittt	eq
 800db96:	2310      	moveq	r3, #16
 800db98:	1c95      	addeq	r5, r2, #2
 800db9a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800db9c:	220a      	movs	r2, #10
 800db9e:	46aa      	mov	sl, r5
 800dba0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800dba4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800dba8:	2b09      	cmp	r3, #9
 800dbaa:	d91e      	bls.n	800dbea <__ssvfiscanf_r+0xda>
 800dbac:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800ddc8 <__ssvfiscanf_r+0x2b8>
 800dbb0:	2203      	movs	r2, #3
 800dbb2:	4658      	mov	r0, fp
 800dbb4:	f7f2 fb3c 	bl	8000230 <memchr>
 800dbb8:	b138      	cbz	r0, 800dbca <__ssvfiscanf_r+0xba>
 800dbba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dbbc:	eba0 000b 	sub.w	r0, r0, fp
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	4083      	lsls	r3, r0
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	9341      	str	r3, [sp, #260]	@ 0x104
 800dbc8:	4655      	mov	r5, sl
 800dbca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dbce:	2b78      	cmp	r3, #120	@ 0x78
 800dbd0:	d806      	bhi.n	800dbe0 <__ssvfiscanf_r+0xd0>
 800dbd2:	2b57      	cmp	r3, #87	@ 0x57
 800dbd4:	d810      	bhi.n	800dbf8 <__ssvfiscanf_r+0xe8>
 800dbd6:	2b25      	cmp	r3, #37	@ 0x25
 800dbd8:	d05d      	beq.n	800dc96 <__ssvfiscanf_r+0x186>
 800dbda:	d857      	bhi.n	800dc8c <__ssvfiscanf_r+0x17c>
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d075      	beq.n	800dccc <__ssvfiscanf_r+0x1bc>
 800dbe0:	2303      	movs	r3, #3
 800dbe2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800dbe4:	230a      	movs	r3, #10
 800dbe6:	9342      	str	r3, [sp, #264]	@ 0x108
 800dbe8:	e088      	b.n	800dcfc <__ssvfiscanf_r+0x1ec>
 800dbea:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800dbec:	fb02 1103 	mla	r1, r2, r3, r1
 800dbf0:	3930      	subs	r1, #48	@ 0x30
 800dbf2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800dbf4:	4655      	mov	r5, sl
 800dbf6:	e7d2      	b.n	800db9e <__ssvfiscanf_r+0x8e>
 800dbf8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800dbfc:	2a20      	cmp	r2, #32
 800dbfe:	d8ef      	bhi.n	800dbe0 <__ssvfiscanf_r+0xd0>
 800dc00:	a101      	add	r1, pc, #4	@ (adr r1, 800dc08 <__ssvfiscanf_r+0xf8>)
 800dc02:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dc06:	bf00      	nop
 800dc08:	0800dcdb 	.word	0x0800dcdb
 800dc0c:	0800dbe1 	.word	0x0800dbe1
 800dc10:	0800dbe1 	.word	0x0800dbe1
 800dc14:	0800dd35 	.word	0x0800dd35
 800dc18:	0800dbe1 	.word	0x0800dbe1
 800dc1c:	0800dbe1 	.word	0x0800dbe1
 800dc20:	0800dbe1 	.word	0x0800dbe1
 800dc24:	0800dbe1 	.word	0x0800dbe1
 800dc28:	0800dbe1 	.word	0x0800dbe1
 800dc2c:	0800dbe1 	.word	0x0800dbe1
 800dc30:	0800dbe1 	.word	0x0800dbe1
 800dc34:	0800dd4b 	.word	0x0800dd4b
 800dc38:	0800dd31 	.word	0x0800dd31
 800dc3c:	0800dc93 	.word	0x0800dc93
 800dc40:	0800dc93 	.word	0x0800dc93
 800dc44:	0800dc93 	.word	0x0800dc93
 800dc48:	0800dbe1 	.word	0x0800dbe1
 800dc4c:	0800dced 	.word	0x0800dced
 800dc50:	0800dbe1 	.word	0x0800dbe1
 800dc54:	0800dbe1 	.word	0x0800dbe1
 800dc58:	0800dbe1 	.word	0x0800dbe1
 800dc5c:	0800dbe1 	.word	0x0800dbe1
 800dc60:	0800dd5b 	.word	0x0800dd5b
 800dc64:	0800dcf5 	.word	0x0800dcf5
 800dc68:	0800dcd3 	.word	0x0800dcd3
 800dc6c:	0800dbe1 	.word	0x0800dbe1
 800dc70:	0800dbe1 	.word	0x0800dbe1
 800dc74:	0800dd57 	.word	0x0800dd57
 800dc78:	0800dbe1 	.word	0x0800dbe1
 800dc7c:	0800dd31 	.word	0x0800dd31
 800dc80:	0800dbe1 	.word	0x0800dbe1
 800dc84:	0800dbe1 	.word	0x0800dbe1
 800dc88:	0800dcdb 	.word	0x0800dcdb
 800dc8c:	3b45      	subs	r3, #69	@ 0x45
 800dc8e:	2b02      	cmp	r3, #2
 800dc90:	d8a6      	bhi.n	800dbe0 <__ssvfiscanf_r+0xd0>
 800dc92:	2305      	movs	r3, #5
 800dc94:	e031      	b.n	800dcfa <__ssvfiscanf_r+0x1ea>
 800dc96:	6863      	ldr	r3, [r4, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	dd0d      	ble.n	800dcb8 <__ssvfiscanf_r+0x1a8>
 800dc9c:	6823      	ldr	r3, [r4, #0]
 800dc9e:	781a      	ldrb	r2, [r3, #0]
 800dca0:	454a      	cmp	r2, r9
 800dca2:	f040 80a6 	bne.w	800ddf2 <__ssvfiscanf_r+0x2e2>
 800dca6:	3301      	adds	r3, #1
 800dca8:	6862      	ldr	r2, [r4, #4]
 800dcaa:	6023      	str	r3, [r4, #0]
 800dcac:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800dcae:	3a01      	subs	r2, #1
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	6062      	str	r2, [r4, #4]
 800dcb4:	9345      	str	r3, [sp, #276]	@ 0x114
 800dcb6:	e753      	b.n	800db60 <__ssvfiscanf_r+0x50>
 800dcb8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dcba:	4621      	mov	r1, r4
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	4798      	blx	r3
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	d0eb      	beq.n	800dc9c <__ssvfiscanf_r+0x18c>
 800dcc4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	f040 808b 	bne.w	800dde2 <__ssvfiscanf_r+0x2d2>
 800dccc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcd0:	e08b      	b.n	800ddea <__ssvfiscanf_r+0x2da>
 800dcd2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dcd4:	f042 0220 	orr.w	r2, r2, #32
 800dcd8:	9241      	str	r2, [sp, #260]	@ 0x104
 800dcda:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dcdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dce0:	9241      	str	r2, [sp, #260]	@ 0x104
 800dce2:	2210      	movs	r2, #16
 800dce4:	2b6e      	cmp	r3, #110	@ 0x6e
 800dce6:	9242      	str	r2, [sp, #264]	@ 0x108
 800dce8:	d902      	bls.n	800dcf0 <__ssvfiscanf_r+0x1e0>
 800dcea:	e005      	b.n	800dcf8 <__ssvfiscanf_r+0x1e8>
 800dcec:	2300      	movs	r3, #0
 800dcee:	9342      	str	r3, [sp, #264]	@ 0x108
 800dcf0:	2303      	movs	r3, #3
 800dcf2:	e002      	b.n	800dcfa <__ssvfiscanf_r+0x1ea>
 800dcf4:	2308      	movs	r3, #8
 800dcf6:	9342      	str	r3, [sp, #264]	@ 0x108
 800dcf8:	2304      	movs	r3, #4
 800dcfa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800dcfc:	6863      	ldr	r3, [r4, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	dd39      	ble.n	800dd76 <__ssvfiscanf_r+0x266>
 800dd02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dd04:	0659      	lsls	r1, r3, #25
 800dd06:	d404      	bmi.n	800dd12 <__ssvfiscanf_r+0x202>
 800dd08:	6823      	ldr	r3, [r4, #0]
 800dd0a:	781a      	ldrb	r2, [r3, #0]
 800dd0c:	5cba      	ldrb	r2, [r7, r2]
 800dd0e:	0712      	lsls	r2, r2, #28
 800dd10:	d438      	bmi.n	800dd84 <__ssvfiscanf_r+0x274>
 800dd12:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800dd14:	2b02      	cmp	r3, #2
 800dd16:	dc47      	bgt.n	800dda8 <__ssvfiscanf_r+0x298>
 800dd18:	466b      	mov	r3, sp
 800dd1a:	4622      	mov	r2, r4
 800dd1c:	a941      	add	r1, sp, #260	@ 0x104
 800dd1e:	4630      	mov	r0, r6
 800dd20:	f000 f928 	bl	800df74 <_scanf_chars>
 800dd24:	2801      	cmp	r0, #1
 800dd26:	d064      	beq.n	800ddf2 <__ssvfiscanf_r+0x2e2>
 800dd28:	2802      	cmp	r0, #2
 800dd2a:	f47f af19 	bne.w	800db60 <__ssvfiscanf_r+0x50>
 800dd2e:	e7c9      	b.n	800dcc4 <__ssvfiscanf_r+0x1b4>
 800dd30:	220a      	movs	r2, #10
 800dd32:	e7d7      	b.n	800dce4 <__ssvfiscanf_r+0x1d4>
 800dd34:	4629      	mov	r1, r5
 800dd36:	4640      	mov	r0, r8
 800dd38:	f000 fa6a 	bl	800e210 <__sccl>
 800dd3c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dd3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd42:	9341      	str	r3, [sp, #260]	@ 0x104
 800dd44:	4605      	mov	r5, r0
 800dd46:	2301      	movs	r3, #1
 800dd48:	e7d7      	b.n	800dcfa <__ssvfiscanf_r+0x1ea>
 800dd4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dd4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd50:	9341      	str	r3, [sp, #260]	@ 0x104
 800dd52:	2300      	movs	r3, #0
 800dd54:	e7d1      	b.n	800dcfa <__ssvfiscanf_r+0x1ea>
 800dd56:	2302      	movs	r3, #2
 800dd58:	e7cf      	b.n	800dcfa <__ssvfiscanf_r+0x1ea>
 800dd5a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800dd5c:	06c3      	lsls	r3, r0, #27
 800dd5e:	f53f aeff 	bmi.w	800db60 <__ssvfiscanf_r+0x50>
 800dd62:	9b00      	ldr	r3, [sp, #0]
 800dd64:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dd66:	1d19      	adds	r1, r3, #4
 800dd68:	9100      	str	r1, [sp, #0]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	07c0      	lsls	r0, r0, #31
 800dd6e:	bf4c      	ite	mi
 800dd70:	801a      	strhmi	r2, [r3, #0]
 800dd72:	601a      	strpl	r2, [r3, #0]
 800dd74:	e6f4      	b.n	800db60 <__ssvfiscanf_r+0x50>
 800dd76:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dd78:	4621      	mov	r1, r4
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	4798      	blx	r3
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	d0bf      	beq.n	800dd02 <__ssvfiscanf_r+0x1f2>
 800dd82:	e79f      	b.n	800dcc4 <__ssvfiscanf_r+0x1b4>
 800dd84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dd86:	3201      	adds	r2, #1
 800dd88:	9245      	str	r2, [sp, #276]	@ 0x114
 800dd8a:	6862      	ldr	r2, [r4, #4]
 800dd8c:	3a01      	subs	r2, #1
 800dd8e:	2a00      	cmp	r2, #0
 800dd90:	6062      	str	r2, [r4, #4]
 800dd92:	dd02      	ble.n	800dd9a <__ssvfiscanf_r+0x28a>
 800dd94:	3301      	adds	r3, #1
 800dd96:	6023      	str	r3, [r4, #0]
 800dd98:	e7b6      	b.n	800dd08 <__ssvfiscanf_r+0x1f8>
 800dd9a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dd9c:	4621      	mov	r1, r4
 800dd9e:	4630      	mov	r0, r6
 800dda0:	4798      	blx	r3
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d0b0      	beq.n	800dd08 <__ssvfiscanf_r+0x1f8>
 800dda6:	e78d      	b.n	800dcc4 <__ssvfiscanf_r+0x1b4>
 800dda8:	2b04      	cmp	r3, #4
 800ddaa:	dc0f      	bgt.n	800ddcc <__ssvfiscanf_r+0x2bc>
 800ddac:	466b      	mov	r3, sp
 800ddae:	4622      	mov	r2, r4
 800ddb0:	a941      	add	r1, sp, #260	@ 0x104
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	f000 f938 	bl	800e028 <_scanf_i>
 800ddb8:	e7b4      	b.n	800dd24 <__ssvfiscanf_r+0x214>
 800ddba:	bf00      	nop
 800ddbc:	0800da5d 	.word	0x0800da5d
 800ddc0:	0800dad7 	.word	0x0800dad7
 800ddc4:	0800fbb1 	.word	0x0800fbb1
 800ddc8:	0800faa4 	.word	0x0800faa4
 800ddcc:	4b0a      	ldr	r3, [pc, #40]	@ (800ddf8 <__ssvfiscanf_r+0x2e8>)
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f43f aec6 	beq.w	800db60 <__ssvfiscanf_r+0x50>
 800ddd4:	466b      	mov	r3, sp
 800ddd6:	4622      	mov	r2, r4
 800ddd8:	a941      	add	r1, sp, #260	@ 0x104
 800ddda:	4630      	mov	r0, r6
 800dddc:	f7fd f828 	bl	800ae30 <_scanf_float>
 800dde0:	e7a0      	b.n	800dd24 <__ssvfiscanf_r+0x214>
 800dde2:	89a3      	ldrh	r3, [r4, #12]
 800dde4:	065b      	lsls	r3, r3, #25
 800dde6:	f53f af71 	bmi.w	800dccc <__ssvfiscanf_r+0x1bc>
 800ddea:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800ddee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddf2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ddf4:	e7f9      	b.n	800ddea <__ssvfiscanf_r+0x2da>
 800ddf6:	bf00      	nop
 800ddf8:	0800ae31 	.word	0x0800ae31

0800ddfc <malloc>:
 800ddfc:	4b02      	ldr	r3, [pc, #8]	@ (800de08 <malloc+0xc>)
 800ddfe:	4601      	mov	r1, r0
 800de00:	6818      	ldr	r0, [r3, #0]
 800de02:	f000 b825 	b.w	800de50 <_malloc_r>
 800de06:	bf00      	nop
 800de08:	20000540 	.word	0x20000540

0800de0c <sbrk_aligned>:
 800de0c:	b570      	push	{r4, r5, r6, lr}
 800de0e:	4e0f      	ldr	r6, [pc, #60]	@ (800de4c <sbrk_aligned+0x40>)
 800de10:	460c      	mov	r4, r1
 800de12:	6831      	ldr	r1, [r6, #0]
 800de14:	4605      	mov	r5, r0
 800de16:	b911      	cbnz	r1, 800de1e <sbrk_aligned+0x12>
 800de18:	f001 f896 	bl	800ef48 <_sbrk_r>
 800de1c:	6030      	str	r0, [r6, #0]
 800de1e:	4621      	mov	r1, r4
 800de20:	4628      	mov	r0, r5
 800de22:	f001 f891 	bl	800ef48 <_sbrk_r>
 800de26:	1c43      	adds	r3, r0, #1
 800de28:	d103      	bne.n	800de32 <sbrk_aligned+0x26>
 800de2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800de2e:	4620      	mov	r0, r4
 800de30:	bd70      	pop	{r4, r5, r6, pc}
 800de32:	1cc4      	adds	r4, r0, #3
 800de34:	f024 0403 	bic.w	r4, r4, #3
 800de38:	42a0      	cmp	r0, r4
 800de3a:	d0f8      	beq.n	800de2e <sbrk_aligned+0x22>
 800de3c:	1a21      	subs	r1, r4, r0
 800de3e:	4628      	mov	r0, r5
 800de40:	f001 f882 	bl	800ef48 <_sbrk_r>
 800de44:	3001      	adds	r0, #1
 800de46:	d1f2      	bne.n	800de2e <sbrk_aligned+0x22>
 800de48:	e7ef      	b.n	800de2a <sbrk_aligned+0x1e>
 800de4a:	bf00      	nop
 800de4c:	20000d3c 	.word	0x20000d3c

0800de50 <_malloc_r>:
 800de50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de54:	1ccd      	adds	r5, r1, #3
 800de56:	f025 0503 	bic.w	r5, r5, #3
 800de5a:	3508      	adds	r5, #8
 800de5c:	2d0c      	cmp	r5, #12
 800de5e:	bf38      	it	cc
 800de60:	250c      	movcc	r5, #12
 800de62:	2d00      	cmp	r5, #0
 800de64:	4606      	mov	r6, r0
 800de66:	db01      	blt.n	800de6c <_malloc_r+0x1c>
 800de68:	42a9      	cmp	r1, r5
 800de6a:	d904      	bls.n	800de76 <_malloc_r+0x26>
 800de6c:	230c      	movs	r3, #12
 800de6e:	6033      	str	r3, [r6, #0]
 800de70:	2000      	movs	r0, #0
 800de72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df4c <_malloc_r+0xfc>
 800de7a:	f000 faaf 	bl	800e3dc <__malloc_lock>
 800de7e:	f8d8 3000 	ldr.w	r3, [r8]
 800de82:	461c      	mov	r4, r3
 800de84:	bb44      	cbnz	r4, 800ded8 <_malloc_r+0x88>
 800de86:	4629      	mov	r1, r5
 800de88:	4630      	mov	r0, r6
 800de8a:	f7ff ffbf 	bl	800de0c <sbrk_aligned>
 800de8e:	1c43      	adds	r3, r0, #1
 800de90:	4604      	mov	r4, r0
 800de92:	d158      	bne.n	800df46 <_malloc_r+0xf6>
 800de94:	f8d8 4000 	ldr.w	r4, [r8]
 800de98:	4627      	mov	r7, r4
 800de9a:	2f00      	cmp	r7, #0
 800de9c:	d143      	bne.n	800df26 <_malloc_r+0xd6>
 800de9e:	2c00      	cmp	r4, #0
 800dea0:	d04b      	beq.n	800df3a <_malloc_r+0xea>
 800dea2:	6823      	ldr	r3, [r4, #0]
 800dea4:	4639      	mov	r1, r7
 800dea6:	4630      	mov	r0, r6
 800dea8:	eb04 0903 	add.w	r9, r4, r3
 800deac:	f001 f84c 	bl	800ef48 <_sbrk_r>
 800deb0:	4581      	cmp	r9, r0
 800deb2:	d142      	bne.n	800df3a <_malloc_r+0xea>
 800deb4:	6821      	ldr	r1, [r4, #0]
 800deb6:	1a6d      	subs	r5, r5, r1
 800deb8:	4629      	mov	r1, r5
 800deba:	4630      	mov	r0, r6
 800debc:	f7ff ffa6 	bl	800de0c <sbrk_aligned>
 800dec0:	3001      	adds	r0, #1
 800dec2:	d03a      	beq.n	800df3a <_malloc_r+0xea>
 800dec4:	6823      	ldr	r3, [r4, #0]
 800dec6:	442b      	add	r3, r5
 800dec8:	6023      	str	r3, [r4, #0]
 800deca:	f8d8 3000 	ldr.w	r3, [r8]
 800dece:	685a      	ldr	r2, [r3, #4]
 800ded0:	bb62      	cbnz	r2, 800df2c <_malloc_r+0xdc>
 800ded2:	f8c8 7000 	str.w	r7, [r8]
 800ded6:	e00f      	b.n	800def8 <_malloc_r+0xa8>
 800ded8:	6822      	ldr	r2, [r4, #0]
 800deda:	1b52      	subs	r2, r2, r5
 800dedc:	d420      	bmi.n	800df20 <_malloc_r+0xd0>
 800dede:	2a0b      	cmp	r2, #11
 800dee0:	d917      	bls.n	800df12 <_malloc_r+0xc2>
 800dee2:	1961      	adds	r1, r4, r5
 800dee4:	42a3      	cmp	r3, r4
 800dee6:	6025      	str	r5, [r4, #0]
 800dee8:	bf18      	it	ne
 800deea:	6059      	strne	r1, [r3, #4]
 800deec:	6863      	ldr	r3, [r4, #4]
 800deee:	bf08      	it	eq
 800def0:	f8c8 1000 	streq.w	r1, [r8]
 800def4:	5162      	str	r2, [r4, r5]
 800def6:	604b      	str	r3, [r1, #4]
 800def8:	4630      	mov	r0, r6
 800defa:	f000 fa75 	bl	800e3e8 <__malloc_unlock>
 800defe:	f104 000b 	add.w	r0, r4, #11
 800df02:	1d23      	adds	r3, r4, #4
 800df04:	f020 0007 	bic.w	r0, r0, #7
 800df08:	1ac2      	subs	r2, r0, r3
 800df0a:	bf1c      	itt	ne
 800df0c:	1a1b      	subne	r3, r3, r0
 800df0e:	50a3      	strne	r3, [r4, r2]
 800df10:	e7af      	b.n	800de72 <_malloc_r+0x22>
 800df12:	6862      	ldr	r2, [r4, #4]
 800df14:	42a3      	cmp	r3, r4
 800df16:	bf0c      	ite	eq
 800df18:	f8c8 2000 	streq.w	r2, [r8]
 800df1c:	605a      	strne	r2, [r3, #4]
 800df1e:	e7eb      	b.n	800def8 <_malloc_r+0xa8>
 800df20:	4623      	mov	r3, r4
 800df22:	6864      	ldr	r4, [r4, #4]
 800df24:	e7ae      	b.n	800de84 <_malloc_r+0x34>
 800df26:	463c      	mov	r4, r7
 800df28:	687f      	ldr	r7, [r7, #4]
 800df2a:	e7b6      	b.n	800de9a <_malloc_r+0x4a>
 800df2c:	461a      	mov	r2, r3
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	42a3      	cmp	r3, r4
 800df32:	d1fb      	bne.n	800df2c <_malloc_r+0xdc>
 800df34:	2300      	movs	r3, #0
 800df36:	6053      	str	r3, [r2, #4]
 800df38:	e7de      	b.n	800def8 <_malloc_r+0xa8>
 800df3a:	230c      	movs	r3, #12
 800df3c:	6033      	str	r3, [r6, #0]
 800df3e:	4630      	mov	r0, r6
 800df40:	f000 fa52 	bl	800e3e8 <__malloc_unlock>
 800df44:	e794      	b.n	800de70 <_malloc_r+0x20>
 800df46:	6005      	str	r5, [r0, #0]
 800df48:	e7d6      	b.n	800def8 <_malloc_r+0xa8>
 800df4a:	bf00      	nop
 800df4c:	20000d40 	.word	0x20000d40

0800df50 <__ascii_mbtowc>:
 800df50:	b082      	sub	sp, #8
 800df52:	b901      	cbnz	r1, 800df56 <__ascii_mbtowc+0x6>
 800df54:	a901      	add	r1, sp, #4
 800df56:	b142      	cbz	r2, 800df6a <__ascii_mbtowc+0x1a>
 800df58:	b14b      	cbz	r3, 800df6e <__ascii_mbtowc+0x1e>
 800df5a:	7813      	ldrb	r3, [r2, #0]
 800df5c:	600b      	str	r3, [r1, #0]
 800df5e:	7812      	ldrb	r2, [r2, #0]
 800df60:	1e10      	subs	r0, r2, #0
 800df62:	bf18      	it	ne
 800df64:	2001      	movne	r0, #1
 800df66:	b002      	add	sp, #8
 800df68:	4770      	bx	lr
 800df6a:	4610      	mov	r0, r2
 800df6c:	e7fb      	b.n	800df66 <__ascii_mbtowc+0x16>
 800df6e:	f06f 0001 	mvn.w	r0, #1
 800df72:	e7f8      	b.n	800df66 <__ascii_mbtowc+0x16>

0800df74 <_scanf_chars>:
 800df74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df78:	4615      	mov	r5, r2
 800df7a:	688a      	ldr	r2, [r1, #8]
 800df7c:	4680      	mov	r8, r0
 800df7e:	460c      	mov	r4, r1
 800df80:	b932      	cbnz	r2, 800df90 <_scanf_chars+0x1c>
 800df82:	698a      	ldr	r2, [r1, #24]
 800df84:	2a00      	cmp	r2, #0
 800df86:	bf14      	ite	ne
 800df88:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800df8c:	2201      	moveq	r2, #1
 800df8e:	608a      	str	r2, [r1, #8]
 800df90:	6822      	ldr	r2, [r4, #0]
 800df92:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e024 <_scanf_chars+0xb0>
 800df96:	06d1      	lsls	r1, r2, #27
 800df98:	bf5f      	itttt	pl
 800df9a:	681a      	ldrpl	r2, [r3, #0]
 800df9c:	1d11      	addpl	r1, r2, #4
 800df9e:	6019      	strpl	r1, [r3, #0]
 800dfa0:	6816      	ldrpl	r6, [r2, #0]
 800dfa2:	2700      	movs	r7, #0
 800dfa4:	69a0      	ldr	r0, [r4, #24]
 800dfa6:	b188      	cbz	r0, 800dfcc <_scanf_chars+0x58>
 800dfa8:	2801      	cmp	r0, #1
 800dfaa:	d107      	bne.n	800dfbc <_scanf_chars+0x48>
 800dfac:	682b      	ldr	r3, [r5, #0]
 800dfae:	781a      	ldrb	r2, [r3, #0]
 800dfb0:	6963      	ldr	r3, [r4, #20]
 800dfb2:	5c9b      	ldrb	r3, [r3, r2]
 800dfb4:	b953      	cbnz	r3, 800dfcc <_scanf_chars+0x58>
 800dfb6:	2f00      	cmp	r7, #0
 800dfb8:	d031      	beq.n	800e01e <_scanf_chars+0xaa>
 800dfba:	e022      	b.n	800e002 <_scanf_chars+0x8e>
 800dfbc:	2802      	cmp	r0, #2
 800dfbe:	d120      	bne.n	800e002 <_scanf_chars+0x8e>
 800dfc0:	682b      	ldr	r3, [r5, #0]
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800dfc8:	071b      	lsls	r3, r3, #28
 800dfca:	d41a      	bmi.n	800e002 <_scanf_chars+0x8e>
 800dfcc:	6823      	ldr	r3, [r4, #0]
 800dfce:	06da      	lsls	r2, r3, #27
 800dfd0:	bf5e      	ittt	pl
 800dfd2:	682b      	ldrpl	r3, [r5, #0]
 800dfd4:	781b      	ldrbpl	r3, [r3, #0]
 800dfd6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800dfda:	682a      	ldr	r2, [r5, #0]
 800dfdc:	686b      	ldr	r3, [r5, #4]
 800dfde:	3201      	adds	r2, #1
 800dfe0:	602a      	str	r2, [r5, #0]
 800dfe2:	68a2      	ldr	r2, [r4, #8]
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	3a01      	subs	r2, #1
 800dfe8:	606b      	str	r3, [r5, #4]
 800dfea:	3701      	adds	r7, #1
 800dfec:	60a2      	str	r2, [r4, #8]
 800dfee:	b142      	cbz	r2, 800e002 <_scanf_chars+0x8e>
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	dcd7      	bgt.n	800dfa4 <_scanf_chars+0x30>
 800dff4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dff8:	4629      	mov	r1, r5
 800dffa:	4640      	mov	r0, r8
 800dffc:	4798      	blx	r3
 800dffe:	2800      	cmp	r0, #0
 800e000:	d0d0      	beq.n	800dfa4 <_scanf_chars+0x30>
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	f013 0310 	ands.w	r3, r3, #16
 800e008:	d105      	bne.n	800e016 <_scanf_chars+0xa2>
 800e00a:	68e2      	ldr	r2, [r4, #12]
 800e00c:	3201      	adds	r2, #1
 800e00e:	60e2      	str	r2, [r4, #12]
 800e010:	69a2      	ldr	r2, [r4, #24]
 800e012:	b102      	cbz	r2, 800e016 <_scanf_chars+0xa2>
 800e014:	7033      	strb	r3, [r6, #0]
 800e016:	6923      	ldr	r3, [r4, #16]
 800e018:	443b      	add	r3, r7
 800e01a:	6123      	str	r3, [r4, #16]
 800e01c:	2000      	movs	r0, #0
 800e01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e022:	bf00      	nop
 800e024:	0800fbb1 	.word	0x0800fbb1

0800e028 <_scanf_i>:
 800e028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02c:	4698      	mov	r8, r3
 800e02e:	4b74      	ldr	r3, [pc, #464]	@ (800e200 <_scanf_i+0x1d8>)
 800e030:	460c      	mov	r4, r1
 800e032:	4682      	mov	sl, r0
 800e034:	4616      	mov	r6, r2
 800e036:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e03a:	b087      	sub	sp, #28
 800e03c:	ab03      	add	r3, sp, #12
 800e03e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e042:	4b70      	ldr	r3, [pc, #448]	@ (800e204 <_scanf_i+0x1dc>)
 800e044:	69a1      	ldr	r1, [r4, #24]
 800e046:	4a70      	ldr	r2, [pc, #448]	@ (800e208 <_scanf_i+0x1e0>)
 800e048:	2903      	cmp	r1, #3
 800e04a:	bf08      	it	eq
 800e04c:	461a      	moveq	r2, r3
 800e04e:	68a3      	ldr	r3, [r4, #8]
 800e050:	9201      	str	r2, [sp, #4]
 800e052:	1e5a      	subs	r2, r3, #1
 800e054:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e058:	bf88      	it	hi
 800e05a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e05e:	4627      	mov	r7, r4
 800e060:	bf82      	ittt	hi
 800e062:	eb03 0905 	addhi.w	r9, r3, r5
 800e066:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e06a:	60a3      	strhi	r3, [r4, #8]
 800e06c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e070:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e074:	bf98      	it	ls
 800e076:	f04f 0900 	movls.w	r9, #0
 800e07a:	6023      	str	r3, [r4, #0]
 800e07c:	463d      	mov	r5, r7
 800e07e:	f04f 0b00 	mov.w	fp, #0
 800e082:	6831      	ldr	r1, [r6, #0]
 800e084:	ab03      	add	r3, sp, #12
 800e086:	7809      	ldrb	r1, [r1, #0]
 800e088:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e08c:	2202      	movs	r2, #2
 800e08e:	f7f2 f8cf 	bl	8000230 <memchr>
 800e092:	b328      	cbz	r0, 800e0e0 <_scanf_i+0xb8>
 800e094:	f1bb 0f01 	cmp.w	fp, #1
 800e098:	d159      	bne.n	800e14e <_scanf_i+0x126>
 800e09a:	6862      	ldr	r2, [r4, #4]
 800e09c:	b92a      	cbnz	r2, 800e0aa <_scanf_i+0x82>
 800e09e:	6822      	ldr	r2, [r4, #0]
 800e0a0:	2108      	movs	r1, #8
 800e0a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e0a6:	6061      	str	r1, [r4, #4]
 800e0a8:	6022      	str	r2, [r4, #0]
 800e0aa:	6822      	ldr	r2, [r4, #0]
 800e0ac:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e0b0:	6022      	str	r2, [r4, #0]
 800e0b2:	68a2      	ldr	r2, [r4, #8]
 800e0b4:	1e51      	subs	r1, r2, #1
 800e0b6:	60a1      	str	r1, [r4, #8]
 800e0b8:	b192      	cbz	r2, 800e0e0 <_scanf_i+0xb8>
 800e0ba:	6832      	ldr	r2, [r6, #0]
 800e0bc:	1c51      	adds	r1, r2, #1
 800e0be:	6031      	str	r1, [r6, #0]
 800e0c0:	7812      	ldrb	r2, [r2, #0]
 800e0c2:	f805 2b01 	strb.w	r2, [r5], #1
 800e0c6:	6872      	ldr	r2, [r6, #4]
 800e0c8:	3a01      	subs	r2, #1
 800e0ca:	2a00      	cmp	r2, #0
 800e0cc:	6072      	str	r2, [r6, #4]
 800e0ce:	dc07      	bgt.n	800e0e0 <_scanf_i+0xb8>
 800e0d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e0d4:	4631      	mov	r1, r6
 800e0d6:	4650      	mov	r0, sl
 800e0d8:	4790      	blx	r2
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	f040 8085 	bne.w	800e1ea <_scanf_i+0x1c2>
 800e0e0:	f10b 0b01 	add.w	fp, fp, #1
 800e0e4:	f1bb 0f03 	cmp.w	fp, #3
 800e0e8:	d1cb      	bne.n	800e082 <_scanf_i+0x5a>
 800e0ea:	6863      	ldr	r3, [r4, #4]
 800e0ec:	b90b      	cbnz	r3, 800e0f2 <_scanf_i+0xca>
 800e0ee:	230a      	movs	r3, #10
 800e0f0:	6063      	str	r3, [r4, #4]
 800e0f2:	6863      	ldr	r3, [r4, #4]
 800e0f4:	4945      	ldr	r1, [pc, #276]	@ (800e20c <_scanf_i+0x1e4>)
 800e0f6:	6960      	ldr	r0, [r4, #20]
 800e0f8:	1ac9      	subs	r1, r1, r3
 800e0fa:	f000 f889 	bl	800e210 <__sccl>
 800e0fe:	f04f 0b00 	mov.w	fp, #0
 800e102:	68a3      	ldr	r3, [r4, #8]
 800e104:	6822      	ldr	r2, [r4, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d03d      	beq.n	800e186 <_scanf_i+0x15e>
 800e10a:	6831      	ldr	r1, [r6, #0]
 800e10c:	6960      	ldr	r0, [r4, #20]
 800e10e:	f891 c000 	ldrb.w	ip, [r1]
 800e112:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e116:	2800      	cmp	r0, #0
 800e118:	d035      	beq.n	800e186 <_scanf_i+0x15e>
 800e11a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e11e:	d124      	bne.n	800e16a <_scanf_i+0x142>
 800e120:	0510      	lsls	r0, r2, #20
 800e122:	d522      	bpl.n	800e16a <_scanf_i+0x142>
 800e124:	f10b 0b01 	add.w	fp, fp, #1
 800e128:	f1b9 0f00 	cmp.w	r9, #0
 800e12c:	d003      	beq.n	800e136 <_scanf_i+0x10e>
 800e12e:	3301      	adds	r3, #1
 800e130:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800e134:	60a3      	str	r3, [r4, #8]
 800e136:	6873      	ldr	r3, [r6, #4]
 800e138:	3b01      	subs	r3, #1
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	6073      	str	r3, [r6, #4]
 800e13e:	dd1b      	ble.n	800e178 <_scanf_i+0x150>
 800e140:	6833      	ldr	r3, [r6, #0]
 800e142:	3301      	adds	r3, #1
 800e144:	6033      	str	r3, [r6, #0]
 800e146:	68a3      	ldr	r3, [r4, #8]
 800e148:	3b01      	subs	r3, #1
 800e14a:	60a3      	str	r3, [r4, #8]
 800e14c:	e7d9      	b.n	800e102 <_scanf_i+0xda>
 800e14e:	f1bb 0f02 	cmp.w	fp, #2
 800e152:	d1ae      	bne.n	800e0b2 <_scanf_i+0x8a>
 800e154:	6822      	ldr	r2, [r4, #0]
 800e156:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e15a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e15e:	d1c4      	bne.n	800e0ea <_scanf_i+0xc2>
 800e160:	2110      	movs	r1, #16
 800e162:	6061      	str	r1, [r4, #4]
 800e164:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e168:	e7a2      	b.n	800e0b0 <_scanf_i+0x88>
 800e16a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e16e:	6022      	str	r2, [r4, #0]
 800e170:	780b      	ldrb	r3, [r1, #0]
 800e172:	f805 3b01 	strb.w	r3, [r5], #1
 800e176:	e7de      	b.n	800e136 <_scanf_i+0x10e>
 800e178:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e17c:	4631      	mov	r1, r6
 800e17e:	4650      	mov	r0, sl
 800e180:	4798      	blx	r3
 800e182:	2800      	cmp	r0, #0
 800e184:	d0df      	beq.n	800e146 <_scanf_i+0x11e>
 800e186:	6823      	ldr	r3, [r4, #0]
 800e188:	05d9      	lsls	r1, r3, #23
 800e18a:	d50d      	bpl.n	800e1a8 <_scanf_i+0x180>
 800e18c:	42bd      	cmp	r5, r7
 800e18e:	d909      	bls.n	800e1a4 <_scanf_i+0x17c>
 800e190:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e194:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e198:	4632      	mov	r2, r6
 800e19a:	4650      	mov	r0, sl
 800e19c:	4798      	blx	r3
 800e19e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800e1a2:	464d      	mov	r5, r9
 800e1a4:	42bd      	cmp	r5, r7
 800e1a6:	d028      	beq.n	800e1fa <_scanf_i+0x1d2>
 800e1a8:	6822      	ldr	r2, [r4, #0]
 800e1aa:	f012 0210 	ands.w	r2, r2, #16
 800e1ae:	d113      	bne.n	800e1d8 <_scanf_i+0x1b0>
 800e1b0:	702a      	strb	r2, [r5, #0]
 800e1b2:	6863      	ldr	r3, [r4, #4]
 800e1b4:	9e01      	ldr	r6, [sp, #4]
 800e1b6:	4639      	mov	r1, r7
 800e1b8:	4650      	mov	r0, sl
 800e1ba:	47b0      	blx	r6
 800e1bc:	f8d8 3000 	ldr.w	r3, [r8]
 800e1c0:	6821      	ldr	r1, [r4, #0]
 800e1c2:	1d1a      	adds	r2, r3, #4
 800e1c4:	f8c8 2000 	str.w	r2, [r8]
 800e1c8:	f011 0f20 	tst.w	r1, #32
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	d00f      	beq.n	800e1f0 <_scanf_i+0x1c8>
 800e1d0:	6018      	str	r0, [r3, #0]
 800e1d2:	68e3      	ldr	r3, [r4, #12]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	60e3      	str	r3, [r4, #12]
 800e1d8:	6923      	ldr	r3, [r4, #16]
 800e1da:	1bed      	subs	r5, r5, r7
 800e1dc:	445d      	add	r5, fp
 800e1de:	442b      	add	r3, r5
 800e1e0:	6123      	str	r3, [r4, #16]
 800e1e2:	2000      	movs	r0, #0
 800e1e4:	b007      	add	sp, #28
 800e1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ea:	f04f 0b00 	mov.w	fp, #0
 800e1ee:	e7ca      	b.n	800e186 <_scanf_i+0x15e>
 800e1f0:	07ca      	lsls	r2, r1, #31
 800e1f2:	bf4c      	ite	mi
 800e1f4:	8018      	strhmi	r0, [r3, #0]
 800e1f6:	6018      	strpl	r0, [r3, #0]
 800e1f8:	e7eb      	b.n	800e1d2 <_scanf_i+0x1aa>
 800e1fa:	2001      	movs	r0, #1
 800e1fc:	e7f2      	b.n	800e1e4 <_scanf_i+0x1bc>
 800e1fe:	bf00      	nop
 800e200:	0800f938 	.word	0x0800f938
 800e204:	0800c231 	.word	0x0800c231
 800e208:	0800eef5 	.word	0x0800eef5
 800e20c:	0800fabf 	.word	0x0800fabf

0800e210 <__sccl>:
 800e210:	b570      	push	{r4, r5, r6, lr}
 800e212:	780b      	ldrb	r3, [r1, #0]
 800e214:	4604      	mov	r4, r0
 800e216:	2b5e      	cmp	r3, #94	@ 0x5e
 800e218:	bf0b      	itete	eq
 800e21a:	784b      	ldrbeq	r3, [r1, #1]
 800e21c:	1c4a      	addne	r2, r1, #1
 800e21e:	1c8a      	addeq	r2, r1, #2
 800e220:	2100      	movne	r1, #0
 800e222:	bf08      	it	eq
 800e224:	2101      	moveq	r1, #1
 800e226:	3801      	subs	r0, #1
 800e228:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e22c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e230:	42a8      	cmp	r0, r5
 800e232:	d1fb      	bne.n	800e22c <__sccl+0x1c>
 800e234:	b90b      	cbnz	r3, 800e23a <__sccl+0x2a>
 800e236:	1e50      	subs	r0, r2, #1
 800e238:	bd70      	pop	{r4, r5, r6, pc}
 800e23a:	f081 0101 	eor.w	r1, r1, #1
 800e23e:	54e1      	strb	r1, [r4, r3]
 800e240:	4610      	mov	r0, r2
 800e242:	4602      	mov	r2, r0
 800e244:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e248:	2d2d      	cmp	r5, #45	@ 0x2d
 800e24a:	d005      	beq.n	800e258 <__sccl+0x48>
 800e24c:	2d5d      	cmp	r5, #93	@ 0x5d
 800e24e:	d016      	beq.n	800e27e <__sccl+0x6e>
 800e250:	2d00      	cmp	r5, #0
 800e252:	d0f1      	beq.n	800e238 <__sccl+0x28>
 800e254:	462b      	mov	r3, r5
 800e256:	e7f2      	b.n	800e23e <__sccl+0x2e>
 800e258:	7846      	ldrb	r6, [r0, #1]
 800e25a:	2e5d      	cmp	r6, #93	@ 0x5d
 800e25c:	d0fa      	beq.n	800e254 <__sccl+0x44>
 800e25e:	42b3      	cmp	r3, r6
 800e260:	dcf8      	bgt.n	800e254 <__sccl+0x44>
 800e262:	3002      	adds	r0, #2
 800e264:	461a      	mov	r2, r3
 800e266:	3201      	adds	r2, #1
 800e268:	4296      	cmp	r6, r2
 800e26a:	54a1      	strb	r1, [r4, r2]
 800e26c:	dcfb      	bgt.n	800e266 <__sccl+0x56>
 800e26e:	1af2      	subs	r2, r6, r3
 800e270:	3a01      	subs	r2, #1
 800e272:	1c5d      	adds	r5, r3, #1
 800e274:	42b3      	cmp	r3, r6
 800e276:	bfa8      	it	ge
 800e278:	2200      	movge	r2, #0
 800e27a:	18ab      	adds	r3, r5, r2
 800e27c:	e7e1      	b.n	800e242 <__sccl+0x32>
 800e27e:	4610      	mov	r0, r2
 800e280:	e7da      	b.n	800e238 <__sccl+0x28>
	...

0800e284 <__sflush_r>:
 800e284:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e28c:	0716      	lsls	r6, r2, #28
 800e28e:	4605      	mov	r5, r0
 800e290:	460c      	mov	r4, r1
 800e292:	d454      	bmi.n	800e33e <__sflush_r+0xba>
 800e294:	684b      	ldr	r3, [r1, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	dc02      	bgt.n	800e2a0 <__sflush_r+0x1c>
 800e29a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	dd48      	ble.n	800e332 <__sflush_r+0xae>
 800e2a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e2a2:	2e00      	cmp	r6, #0
 800e2a4:	d045      	beq.n	800e332 <__sflush_r+0xae>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e2ac:	682f      	ldr	r7, [r5, #0]
 800e2ae:	6a21      	ldr	r1, [r4, #32]
 800e2b0:	602b      	str	r3, [r5, #0]
 800e2b2:	d030      	beq.n	800e316 <__sflush_r+0x92>
 800e2b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e2b6:	89a3      	ldrh	r3, [r4, #12]
 800e2b8:	0759      	lsls	r1, r3, #29
 800e2ba:	d505      	bpl.n	800e2c8 <__sflush_r+0x44>
 800e2bc:	6863      	ldr	r3, [r4, #4]
 800e2be:	1ad2      	subs	r2, r2, r3
 800e2c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e2c2:	b10b      	cbz	r3, 800e2c8 <__sflush_r+0x44>
 800e2c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e2c6:	1ad2      	subs	r2, r2, r3
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e2cc:	6a21      	ldr	r1, [r4, #32]
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	47b0      	blx	r6
 800e2d2:	1c43      	adds	r3, r0, #1
 800e2d4:	89a3      	ldrh	r3, [r4, #12]
 800e2d6:	d106      	bne.n	800e2e6 <__sflush_r+0x62>
 800e2d8:	6829      	ldr	r1, [r5, #0]
 800e2da:	291d      	cmp	r1, #29
 800e2dc:	d82b      	bhi.n	800e336 <__sflush_r+0xb2>
 800e2de:	4a2a      	ldr	r2, [pc, #168]	@ (800e388 <__sflush_r+0x104>)
 800e2e0:	40ca      	lsrs	r2, r1
 800e2e2:	07d6      	lsls	r6, r2, #31
 800e2e4:	d527      	bpl.n	800e336 <__sflush_r+0xb2>
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	6062      	str	r2, [r4, #4]
 800e2ea:	04d9      	lsls	r1, r3, #19
 800e2ec:	6922      	ldr	r2, [r4, #16]
 800e2ee:	6022      	str	r2, [r4, #0]
 800e2f0:	d504      	bpl.n	800e2fc <__sflush_r+0x78>
 800e2f2:	1c42      	adds	r2, r0, #1
 800e2f4:	d101      	bne.n	800e2fa <__sflush_r+0x76>
 800e2f6:	682b      	ldr	r3, [r5, #0]
 800e2f8:	b903      	cbnz	r3, 800e2fc <__sflush_r+0x78>
 800e2fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800e2fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e2fe:	602f      	str	r7, [r5, #0]
 800e300:	b1b9      	cbz	r1, 800e332 <__sflush_r+0xae>
 800e302:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e306:	4299      	cmp	r1, r3
 800e308:	d002      	beq.n	800e310 <__sflush_r+0x8c>
 800e30a:	4628      	mov	r0, r5
 800e30c:	f7fe fecc 	bl	800d0a8 <_free_r>
 800e310:	2300      	movs	r3, #0
 800e312:	6363      	str	r3, [r4, #52]	@ 0x34
 800e314:	e00d      	b.n	800e332 <__sflush_r+0xae>
 800e316:	2301      	movs	r3, #1
 800e318:	4628      	mov	r0, r5
 800e31a:	47b0      	blx	r6
 800e31c:	4602      	mov	r2, r0
 800e31e:	1c50      	adds	r0, r2, #1
 800e320:	d1c9      	bne.n	800e2b6 <__sflush_r+0x32>
 800e322:	682b      	ldr	r3, [r5, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d0c6      	beq.n	800e2b6 <__sflush_r+0x32>
 800e328:	2b1d      	cmp	r3, #29
 800e32a:	d001      	beq.n	800e330 <__sflush_r+0xac>
 800e32c:	2b16      	cmp	r3, #22
 800e32e:	d11e      	bne.n	800e36e <__sflush_r+0xea>
 800e330:	602f      	str	r7, [r5, #0]
 800e332:	2000      	movs	r0, #0
 800e334:	e022      	b.n	800e37c <__sflush_r+0xf8>
 800e336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e33a:	b21b      	sxth	r3, r3
 800e33c:	e01b      	b.n	800e376 <__sflush_r+0xf2>
 800e33e:	690f      	ldr	r7, [r1, #16]
 800e340:	2f00      	cmp	r7, #0
 800e342:	d0f6      	beq.n	800e332 <__sflush_r+0xae>
 800e344:	0793      	lsls	r3, r2, #30
 800e346:	680e      	ldr	r6, [r1, #0]
 800e348:	bf08      	it	eq
 800e34a:	694b      	ldreq	r3, [r1, #20]
 800e34c:	600f      	str	r7, [r1, #0]
 800e34e:	bf18      	it	ne
 800e350:	2300      	movne	r3, #0
 800e352:	eba6 0807 	sub.w	r8, r6, r7
 800e356:	608b      	str	r3, [r1, #8]
 800e358:	f1b8 0f00 	cmp.w	r8, #0
 800e35c:	dde9      	ble.n	800e332 <__sflush_r+0xae>
 800e35e:	6a21      	ldr	r1, [r4, #32]
 800e360:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e362:	4643      	mov	r3, r8
 800e364:	463a      	mov	r2, r7
 800e366:	4628      	mov	r0, r5
 800e368:	47b0      	blx	r6
 800e36a:	2800      	cmp	r0, #0
 800e36c:	dc08      	bgt.n	800e380 <__sflush_r+0xfc>
 800e36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e376:	81a3      	strh	r3, [r4, #12]
 800e378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e380:	4407      	add	r7, r0
 800e382:	eba8 0800 	sub.w	r8, r8, r0
 800e386:	e7e7      	b.n	800e358 <__sflush_r+0xd4>
 800e388:	20400001 	.word	0x20400001

0800e38c <_fflush_r>:
 800e38c:	b538      	push	{r3, r4, r5, lr}
 800e38e:	690b      	ldr	r3, [r1, #16]
 800e390:	4605      	mov	r5, r0
 800e392:	460c      	mov	r4, r1
 800e394:	b913      	cbnz	r3, 800e39c <_fflush_r+0x10>
 800e396:	2500      	movs	r5, #0
 800e398:	4628      	mov	r0, r5
 800e39a:	bd38      	pop	{r3, r4, r5, pc}
 800e39c:	b118      	cbz	r0, 800e3a6 <_fflush_r+0x1a>
 800e39e:	6a03      	ldr	r3, [r0, #32]
 800e3a0:	b90b      	cbnz	r3, 800e3a6 <_fflush_r+0x1a>
 800e3a2:	f7fd f8a9 	bl	800b4f8 <__sinit>
 800e3a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d0f3      	beq.n	800e396 <_fflush_r+0xa>
 800e3ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e3b0:	07d0      	lsls	r0, r2, #31
 800e3b2:	d404      	bmi.n	800e3be <_fflush_r+0x32>
 800e3b4:	0599      	lsls	r1, r3, #22
 800e3b6:	d402      	bmi.n	800e3be <_fflush_r+0x32>
 800e3b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e3ba:	f7fd ffe8 	bl	800c38e <__retarget_lock_acquire_recursive>
 800e3be:	4628      	mov	r0, r5
 800e3c0:	4621      	mov	r1, r4
 800e3c2:	f7ff ff5f 	bl	800e284 <__sflush_r>
 800e3c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e3c8:	07da      	lsls	r2, r3, #31
 800e3ca:	4605      	mov	r5, r0
 800e3cc:	d4e4      	bmi.n	800e398 <_fflush_r+0xc>
 800e3ce:	89a3      	ldrh	r3, [r4, #12]
 800e3d0:	059b      	lsls	r3, r3, #22
 800e3d2:	d4e1      	bmi.n	800e398 <_fflush_r+0xc>
 800e3d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e3d6:	f7fd ffdb 	bl	800c390 <__retarget_lock_release_recursive>
 800e3da:	e7dd      	b.n	800e398 <_fflush_r+0xc>

0800e3dc <__malloc_lock>:
 800e3dc:	4801      	ldr	r0, [pc, #4]	@ (800e3e4 <__malloc_lock+0x8>)
 800e3de:	f7fd bfd6 	b.w	800c38e <__retarget_lock_acquire_recursive>
 800e3e2:	bf00      	nop
 800e3e4:	20000d34 	.word	0x20000d34

0800e3e8 <__malloc_unlock>:
 800e3e8:	4801      	ldr	r0, [pc, #4]	@ (800e3f0 <__malloc_unlock+0x8>)
 800e3ea:	f7fd bfd1 	b.w	800c390 <__retarget_lock_release_recursive>
 800e3ee:	bf00      	nop
 800e3f0:	20000d34 	.word	0x20000d34

0800e3f4 <_Balloc>:
 800e3f4:	b570      	push	{r4, r5, r6, lr}
 800e3f6:	69c6      	ldr	r6, [r0, #28]
 800e3f8:	4604      	mov	r4, r0
 800e3fa:	460d      	mov	r5, r1
 800e3fc:	b976      	cbnz	r6, 800e41c <_Balloc+0x28>
 800e3fe:	2010      	movs	r0, #16
 800e400:	f7ff fcfc 	bl	800ddfc <malloc>
 800e404:	4602      	mov	r2, r0
 800e406:	61e0      	str	r0, [r4, #28]
 800e408:	b920      	cbnz	r0, 800e414 <_Balloc+0x20>
 800e40a:	4b18      	ldr	r3, [pc, #96]	@ (800e46c <_Balloc+0x78>)
 800e40c:	4818      	ldr	r0, [pc, #96]	@ (800e470 <_Balloc+0x7c>)
 800e40e:	216b      	movs	r1, #107	@ 0x6b
 800e410:	f000 fdaa 	bl	800ef68 <__assert_func>
 800e414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e418:	6006      	str	r6, [r0, #0]
 800e41a:	60c6      	str	r6, [r0, #12]
 800e41c:	69e6      	ldr	r6, [r4, #28]
 800e41e:	68f3      	ldr	r3, [r6, #12]
 800e420:	b183      	cbz	r3, 800e444 <_Balloc+0x50>
 800e422:	69e3      	ldr	r3, [r4, #28]
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e42a:	b9b8      	cbnz	r0, 800e45c <_Balloc+0x68>
 800e42c:	2101      	movs	r1, #1
 800e42e:	fa01 f605 	lsl.w	r6, r1, r5
 800e432:	1d72      	adds	r2, r6, #5
 800e434:	0092      	lsls	r2, r2, #2
 800e436:	4620      	mov	r0, r4
 800e438:	f000 fdb4 	bl	800efa4 <_calloc_r>
 800e43c:	b160      	cbz	r0, 800e458 <_Balloc+0x64>
 800e43e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e442:	e00e      	b.n	800e462 <_Balloc+0x6e>
 800e444:	2221      	movs	r2, #33	@ 0x21
 800e446:	2104      	movs	r1, #4
 800e448:	4620      	mov	r0, r4
 800e44a:	f000 fdab 	bl	800efa4 <_calloc_r>
 800e44e:	69e3      	ldr	r3, [r4, #28]
 800e450:	60f0      	str	r0, [r6, #12]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d1e4      	bne.n	800e422 <_Balloc+0x2e>
 800e458:	2000      	movs	r0, #0
 800e45a:	bd70      	pop	{r4, r5, r6, pc}
 800e45c:	6802      	ldr	r2, [r0, #0]
 800e45e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e462:	2300      	movs	r3, #0
 800e464:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e468:	e7f7      	b.n	800e45a <_Balloc+0x66>
 800e46a:	bf00      	nop
 800e46c:	0800f9be 	.word	0x0800f9be
 800e470:	0800faca 	.word	0x0800faca

0800e474 <_Bfree>:
 800e474:	b570      	push	{r4, r5, r6, lr}
 800e476:	69c6      	ldr	r6, [r0, #28]
 800e478:	4605      	mov	r5, r0
 800e47a:	460c      	mov	r4, r1
 800e47c:	b976      	cbnz	r6, 800e49c <_Bfree+0x28>
 800e47e:	2010      	movs	r0, #16
 800e480:	f7ff fcbc 	bl	800ddfc <malloc>
 800e484:	4602      	mov	r2, r0
 800e486:	61e8      	str	r0, [r5, #28]
 800e488:	b920      	cbnz	r0, 800e494 <_Bfree+0x20>
 800e48a:	4b09      	ldr	r3, [pc, #36]	@ (800e4b0 <_Bfree+0x3c>)
 800e48c:	4809      	ldr	r0, [pc, #36]	@ (800e4b4 <_Bfree+0x40>)
 800e48e:	218f      	movs	r1, #143	@ 0x8f
 800e490:	f000 fd6a 	bl	800ef68 <__assert_func>
 800e494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e498:	6006      	str	r6, [r0, #0]
 800e49a:	60c6      	str	r6, [r0, #12]
 800e49c:	b13c      	cbz	r4, 800e4ae <_Bfree+0x3a>
 800e49e:	69eb      	ldr	r3, [r5, #28]
 800e4a0:	6862      	ldr	r2, [r4, #4]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4a8:	6021      	str	r1, [r4, #0]
 800e4aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4ae:	bd70      	pop	{r4, r5, r6, pc}
 800e4b0:	0800f9be 	.word	0x0800f9be
 800e4b4:	0800faca 	.word	0x0800faca

0800e4b8 <__multadd>:
 800e4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4bc:	690d      	ldr	r5, [r1, #16]
 800e4be:	4607      	mov	r7, r0
 800e4c0:	460c      	mov	r4, r1
 800e4c2:	461e      	mov	r6, r3
 800e4c4:	f101 0c14 	add.w	ip, r1, #20
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	f8dc 3000 	ldr.w	r3, [ip]
 800e4ce:	b299      	uxth	r1, r3
 800e4d0:	fb02 6101 	mla	r1, r2, r1, r6
 800e4d4:	0c1e      	lsrs	r6, r3, #16
 800e4d6:	0c0b      	lsrs	r3, r1, #16
 800e4d8:	fb02 3306 	mla	r3, r2, r6, r3
 800e4dc:	b289      	uxth	r1, r1
 800e4de:	3001      	adds	r0, #1
 800e4e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e4e4:	4285      	cmp	r5, r0
 800e4e6:	f84c 1b04 	str.w	r1, [ip], #4
 800e4ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e4ee:	dcec      	bgt.n	800e4ca <__multadd+0x12>
 800e4f0:	b30e      	cbz	r6, 800e536 <__multadd+0x7e>
 800e4f2:	68a3      	ldr	r3, [r4, #8]
 800e4f4:	42ab      	cmp	r3, r5
 800e4f6:	dc19      	bgt.n	800e52c <__multadd+0x74>
 800e4f8:	6861      	ldr	r1, [r4, #4]
 800e4fa:	4638      	mov	r0, r7
 800e4fc:	3101      	adds	r1, #1
 800e4fe:	f7ff ff79 	bl	800e3f4 <_Balloc>
 800e502:	4680      	mov	r8, r0
 800e504:	b928      	cbnz	r0, 800e512 <__multadd+0x5a>
 800e506:	4602      	mov	r2, r0
 800e508:	4b0c      	ldr	r3, [pc, #48]	@ (800e53c <__multadd+0x84>)
 800e50a:	480d      	ldr	r0, [pc, #52]	@ (800e540 <__multadd+0x88>)
 800e50c:	21ba      	movs	r1, #186	@ 0xba
 800e50e:	f000 fd2b 	bl	800ef68 <__assert_func>
 800e512:	6922      	ldr	r2, [r4, #16]
 800e514:	3202      	adds	r2, #2
 800e516:	f104 010c 	add.w	r1, r4, #12
 800e51a:	0092      	lsls	r2, r2, #2
 800e51c:	300c      	adds	r0, #12
 800e51e:	f7fd ff4d 	bl	800c3bc <memcpy>
 800e522:	4621      	mov	r1, r4
 800e524:	4638      	mov	r0, r7
 800e526:	f7ff ffa5 	bl	800e474 <_Bfree>
 800e52a:	4644      	mov	r4, r8
 800e52c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e530:	3501      	adds	r5, #1
 800e532:	615e      	str	r6, [r3, #20]
 800e534:	6125      	str	r5, [r4, #16]
 800e536:	4620      	mov	r0, r4
 800e538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e53c:	0800fa2d 	.word	0x0800fa2d
 800e540:	0800faca 	.word	0x0800faca

0800e544 <__s2b>:
 800e544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e548:	460c      	mov	r4, r1
 800e54a:	4615      	mov	r5, r2
 800e54c:	461f      	mov	r7, r3
 800e54e:	2209      	movs	r2, #9
 800e550:	3308      	adds	r3, #8
 800e552:	4606      	mov	r6, r0
 800e554:	fb93 f3f2 	sdiv	r3, r3, r2
 800e558:	2100      	movs	r1, #0
 800e55a:	2201      	movs	r2, #1
 800e55c:	429a      	cmp	r2, r3
 800e55e:	db09      	blt.n	800e574 <__s2b+0x30>
 800e560:	4630      	mov	r0, r6
 800e562:	f7ff ff47 	bl	800e3f4 <_Balloc>
 800e566:	b940      	cbnz	r0, 800e57a <__s2b+0x36>
 800e568:	4602      	mov	r2, r0
 800e56a:	4b19      	ldr	r3, [pc, #100]	@ (800e5d0 <__s2b+0x8c>)
 800e56c:	4819      	ldr	r0, [pc, #100]	@ (800e5d4 <__s2b+0x90>)
 800e56e:	21d3      	movs	r1, #211	@ 0xd3
 800e570:	f000 fcfa 	bl	800ef68 <__assert_func>
 800e574:	0052      	lsls	r2, r2, #1
 800e576:	3101      	adds	r1, #1
 800e578:	e7f0      	b.n	800e55c <__s2b+0x18>
 800e57a:	9b08      	ldr	r3, [sp, #32]
 800e57c:	6143      	str	r3, [r0, #20]
 800e57e:	2d09      	cmp	r5, #9
 800e580:	f04f 0301 	mov.w	r3, #1
 800e584:	6103      	str	r3, [r0, #16]
 800e586:	dd16      	ble.n	800e5b6 <__s2b+0x72>
 800e588:	f104 0909 	add.w	r9, r4, #9
 800e58c:	46c8      	mov	r8, r9
 800e58e:	442c      	add	r4, r5
 800e590:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e594:	4601      	mov	r1, r0
 800e596:	3b30      	subs	r3, #48	@ 0x30
 800e598:	220a      	movs	r2, #10
 800e59a:	4630      	mov	r0, r6
 800e59c:	f7ff ff8c 	bl	800e4b8 <__multadd>
 800e5a0:	45a0      	cmp	r8, r4
 800e5a2:	d1f5      	bne.n	800e590 <__s2b+0x4c>
 800e5a4:	f1a5 0408 	sub.w	r4, r5, #8
 800e5a8:	444c      	add	r4, r9
 800e5aa:	1b2d      	subs	r5, r5, r4
 800e5ac:	1963      	adds	r3, r4, r5
 800e5ae:	42bb      	cmp	r3, r7
 800e5b0:	db04      	blt.n	800e5bc <__s2b+0x78>
 800e5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5b6:	340a      	adds	r4, #10
 800e5b8:	2509      	movs	r5, #9
 800e5ba:	e7f6      	b.n	800e5aa <__s2b+0x66>
 800e5bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e5c0:	4601      	mov	r1, r0
 800e5c2:	3b30      	subs	r3, #48	@ 0x30
 800e5c4:	220a      	movs	r2, #10
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	f7ff ff76 	bl	800e4b8 <__multadd>
 800e5cc:	e7ee      	b.n	800e5ac <__s2b+0x68>
 800e5ce:	bf00      	nop
 800e5d0:	0800fa2d 	.word	0x0800fa2d
 800e5d4:	0800faca 	.word	0x0800faca

0800e5d8 <__hi0bits>:
 800e5d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e5dc:	4603      	mov	r3, r0
 800e5de:	bf36      	itet	cc
 800e5e0:	0403      	lslcc	r3, r0, #16
 800e5e2:	2000      	movcs	r0, #0
 800e5e4:	2010      	movcc	r0, #16
 800e5e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e5ea:	bf3c      	itt	cc
 800e5ec:	021b      	lslcc	r3, r3, #8
 800e5ee:	3008      	addcc	r0, #8
 800e5f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e5f4:	bf3c      	itt	cc
 800e5f6:	011b      	lslcc	r3, r3, #4
 800e5f8:	3004      	addcc	r0, #4
 800e5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5fe:	bf3c      	itt	cc
 800e600:	009b      	lslcc	r3, r3, #2
 800e602:	3002      	addcc	r0, #2
 800e604:	2b00      	cmp	r3, #0
 800e606:	db05      	blt.n	800e614 <__hi0bits+0x3c>
 800e608:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e60c:	f100 0001 	add.w	r0, r0, #1
 800e610:	bf08      	it	eq
 800e612:	2020      	moveq	r0, #32
 800e614:	4770      	bx	lr

0800e616 <__lo0bits>:
 800e616:	6803      	ldr	r3, [r0, #0]
 800e618:	4602      	mov	r2, r0
 800e61a:	f013 0007 	ands.w	r0, r3, #7
 800e61e:	d00b      	beq.n	800e638 <__lo0bits+0x22>
 800e620:	07d9      	lsls	r1, r3, #31
 800e622:	d421      	bmi.n	800e668 <__lo0bits+0x52>
 800e624:	0798      	lsls	r0, r3, #30
 800e626:	bf49      	itett	mi
 800e628:	085b      	lsrmi	r3, r3, #1
 800e62a:	089b      	lsrpl	r3, r3, #2
 800e62c:	2001      	movmi	r0, #1
 800e62e:	6013      	strmi	r3, [r2, #0]
 800e630:	bf5c      	itt	pl
 800e632:	6013      	strpl	r3, [r2, #0]
 800e634:	2002      	movpl	r0, #2
 800e636:	4770      	bx	lr
 800e638:	b299      	uxth	r1, r3
 800e63a:	b909      	cbnz	r1, 800e640 <__lo0bits+0x2a>
 800e63c:	0c1b      	lsrs	r3, r3, #16
 800e63e:	2010      	movs	r0, #16
 800e640:	b2d9      	uxtb	r1, r3
 800e642:	b909      	cbnz	r1, 800e648 <__lo0bits+0x32>
 800e644:	3008      	adds	r0, #8
 800e646:	0a1b      	lsrs	r3, r3, #8
 800e648:	0719      	lsls	r1, r3, #28
 800e64a:	bf04      	itt	eq
 800e64c:	091b      	lsreq	r3, r3, #4
 800e64e:	3004      	addeq	r0, #4
 800e650:	0799      	lsls	r1, r3, #30
 800e652:	bf04      	itt	eq
 800e654:	089b      	lsreq	r3, r3, #2
 800e656:	3002      	addeq	r0, #2
 800e658:	07d9      	lsls	r1, r3, #31
 800e65a:	d403      	bmi.n	800e664 <__lo0bits+0x4e>
 800e65c:	085b      	lsrs	r3, r3, #1
 800e65e:	f100 0001 	add.w	r0, r0, #1
 800e662:	d003      	beq.n	800e66c <__lo0bits+0x56>
 800e664:	6013      	str	r3, [r2, #0]
 800e666:	4770      	bx	lr
 800e668:	2000      	movs	r0, #0
 800e66a:	4770      	bx	lr
 800e66c:	2020      	movs	r0, #32
 800e66e:	4770      	bx	lr

0800e670 <__i2b>:
 800e670:	b510      	push	{r4, lr}
 800e672:	460c      	mov	r4, r1
 800e674:	2101      	movs	r1, #1
 800e676:	f7ff febd 	bl	800e3f4 <_Balloc>
 800e67a:	4602      	mov	r2, r0
 800e67c:	b928      	cbnz	r0, 800e68a <__i2b+0x1a>
 800e67e:	4b05      	ldr	r3, [pc, #20]	@ (800e694 <__i2b+0x24>)
 800e680:	4805      	ldr	r0, [pc, #20]	@ (800e698 <__i2b+0x28>)
 800e682:	f240 1145 	movw	r1, #325	@ 0x145
 800e686:	f000 fc6f 	bl	800ef68 <__assert_func>
 800e68a:	2301      	movs	r3, #1
 800e68c:	6144      	str	r4, [r0, #20]
 800e68e:	6103      	str	r3, [r0, #16]
 800e690:	bd10      	pop	{r4, pc}
 800e692:	bf00      	nop
 800e694:	0800fa2d 	.word	0x0800fa2d
 800e698:	0800faca 	.word	0x0800faca

0800e69c <__multiply>:
 800e69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a0:	4617      	mov	r7, r2
 800e6a2:	690a      	ldr	r2, [r1, #16]
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	bfa8      	it	ge
 800e6aa:	463b      	movge	r3, r7
 800e6ac:	4689      	mov	r9, r1
 800e6ae:	bfa4      	itt	ge
 800e6b0:	460f      	movge	r7, r1
 800e6b2:	4699      	movge	r9, r3
 800e6b4:	693d      	ldr	r5, [r7, #16]
 800e6b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	6879      	ldr	r1, [r7, #4]
 800e6be:	eb05 060a 	add.w	r6, r5, sl
 800e6c2:	42b3      	cmp	r3, r6
 800e6c4:	b085      	sub	sp, #20
 800e6c6:	bfb8      	it	lt
 800e6c8:	3101      	addlt	r1, #1
 800e6ca:	f7ff fe93 	bl	800e3f4 <_Balloc>
 800e6ce:	b930      	cbnz	r0, 800e6de <__multiply+0x42>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	4b41      	ldr	r3, [pc, #260]	@ (800e7d8 <__multiply+0x13c>)
 800e6d4:	4841      	ldr	r0, [pc, #260]	@ (800e7dc <__multiply+0x140>)
 800e6d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e6da:	f000 fc45 	bl	800ef68 <__assert_func>
 800e6de:	f100 0414 	add.w	r4, r0, #20
 800e6e2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e6e6:	4623      	mov	r3, r4
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	4573      	cmp	r3, lr
 800e6ec:	d320      	bcc.n	800e730 <__multiply+0x94>
 800e6ee:	f107 0814 	add.w	r8, r7, #20
 800e6f2:	f109 0114 	add.w	r1, r9, #20
 800e6f6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e6fa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e6fe:	9302      	str	r3, [sp, #8]
 800e700:	1beb      	subs	r3, r5, r7
 800e702:	3b15      	subs	r3, #21
 800e704:	f023 0303 	bic.w	r3, r3, #3
 800e708:	3304      	adds	r3, #4
 800e70a:	3715      	adds	r7, #21
 800e70c:	42bd      	cmp	r5, r7
 800e70e:	bf38      	it	cc
 800e710:	2304      	movcc	r3, #4
 800e712:	9301      	str	r3, [sp, #4]
 800e714:	9b02      	ldr	r3, [sp, #8]
 800e716:	9103      	str	r1, [sp, #12]
 800e718:	428b      	cmp	r3, r1
 800e71a:	d80c      	bhi.n	800e736 <__multiply+0x9a>
 800e71c:	2e00      	cmp	r6, #0
 800e71e:	dd03      	ble.n	800e728 <__multiply+0x8c>
 800e720:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e724:	2b00      	cmp	r3, #0
 800e726:	d055      	beq.n	800e7d4 <__multiply+0x138>
 800e728:	6106      	str	r6, [r0, #16]
 800e72a:	b005      	add	sp, #20
 800e72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e730:	f843 2b04 	str.w	r2, [r3], #4
 800e734:	e7d9      	b.n	800e6ea <__multiply+0x4e>
 800e736:	f8b1 a000 	ldrh.w	sl, [r1]
 800e73a:	f1ba 0f00 	cmp.w	sl, #0
 800e73e:	d01f      	beq.n	800e780 <__multiply+0xe4>
 800e740:	46c4      	mov	ip, r8
 800e742:	46a1      	mov	r9, r4
 800e744:	2700      	movs	r7, #0
 800e746:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e74a:	f8d9 3000 	ldr.w	r3, [r9]
 800e74e:	fa1f fb82 	uxth.w	fp, r2
 800e752:	b29b      	uxth	r3, r3
 800e754:	fb0a 330b 	mla	r3, sl, fp, r3
 800e758:	443b      	add	r3, r7
 800e75a:	f8d9 7000 	ldr.w	r7, [r9]
 800e75e:	0c12      	lsrs	r2, r2, #16
 800e760:	0c3f      	lsrs	r7, r7, #16
 800e762:	fb0a 7202 	mla	r2, sl, r2, r7
 800e766:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e770:	4565      	cmp	r5, ip
 800e772:	f849 3b04 	str.w	r3, [r9], #4
 800e776:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e77a:	d8e4      	bhi.n	800e746 <__multiply+0xaa>
 800e77c:	9b01      	ldr	r3, [sp, #4]
 800e77e:	50e7      	str	r7, [r4, r3]
 800e780:	9b03      	ldr	r3, [sp, #12]
 800e782:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e786:	3104      	adds	r1, #4
 800e788:	f1b9 0f00 	cmp.w	r9, #0
 800e78c:	d020      	beq.n	800e7d0 <__multiply+0x134>
 800e78e:	6823      	ldr	r3, [r4, #0]
 800e790:	4647      	mov	r7, r8
 800e792:	46a4      	mov	ip, r4
 800e794:	f04f 0a00 	mov.w	sl, #0
 800e798:	f8b7 b000 	ldrh.w	fp, [r7]
 800e79c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e7a0:	fb09 220b 	mla	r2, r9, fp, r2
 800e7a4:	4452      	add	r2, sl
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7ac:	f84c 3b04 	str.w	r3, [ip], #4
 800e7b0:	f857 3b04 	ldr.w	r3, [r7], #4
 800e7b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e7b8:	f8bc 3000 	ldrh.w	r3, [ip]
 800e7bc:	fb09 330a 	mla	r3, r9, sl, r3
 800e7c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e7c4:	42bd      	cmp	r5, r7
 800e7c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e7ca:	d8e5      	bhi.n	800e798 <__multiply+0xfc>
 800e7cc:	9a01      	ldr	r2, [sp, #4]
 800e7ce:	50a3      	str	r3, [r4, r2]
 800e7d0:	3404      	adds	r4, #4
 800e7d2:	e79f      	b.n	800e714 <__multiply+0x78>
 800e7d4:	3e01      	subs	r6, #1
 800e7d6:	e7a1      	b.n	800e71c <__multiply+0x80>
 800e7d8:	0800fa2d 	.word	0x0800fa2d
 800e7dc:	0800faca 	.word	0x0800faca

0800e7e0 <__pow5mult>:
 800e7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7e4:	4615      	mov	r5, r2
 800e7e6:	f012 0203 	ands.w	r2, r2, #3
 800e7ea:	4607      	mov	r7, r0
 800e7ec:	460e      	mov	r6, r1
 800e7ee:	d007      	beq.n	800e800 <__pow5mult+0x20>
 800e7f0:	4c25      	ldr	r4, [pc, #148]	@ (800e888 <__pow5mult+0xa8>)
 800e7f2:	3a01      	subs	r2, #1
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7fa:	f7ff fe5d 	bl	800e4b8 <__multadd>
 800e7fe:	4606      	mov	r6, r0
 800e800:	10ad      	asrs	r5, r5, #2
 800e802:	d03d      	beq.n	800e880 <__pow5mult+0xa0>
 800e804:	69fc      	ldr	r4, [r7, #28]
 800e806:	b97c      	cbnz	r4, 800e828 <__pow5mult+0x48>
 800e808:	2010      	movs	r0, #16
 800e80a:	f7ff faf7 	bl	800ddfc <malloc>
 800e80e:	4602      	mov	r2, r0
 800e810:	61f8      	str	r0, [r7, #28]
 800e812:	b928      	cbnz	r0, 800e820 <__pow5mult+0x40>
 800e814:	4b1d      	ldr	r3, [pc, #116]	@ (800e88c <__pow5mult+0xac>)
 800e816:	481e      	ldr	r0, [pc, #120]	@ (800e890 <__pow5mult+0xb0>)
 800e818:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e81c:	f000 fba4 	bl	800ef68 <__assert_func>
 800e820:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e824:	6004      	str	r4, [r0, #0]
 800e826:	60c4      	str	r4, [r0, #12]
 800e828:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e82c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e830:	b94c      	cbnz	r4, 800e846 <__pow5mult+0x66>
 800e832:	f240 2171 	movw	r1, #625	@ 0x271
 800e836:	4638      	mov	r0, r7
 800e838:	f7ff ff1a 	bl	800e670 <__i2b>
 800e83c:	2300      	movs	r3, #0
 800e83e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e842:	4604      	mov	r4, r0
 800e844:	6003      	str	r3, [r0, #0]
 800e846:	f04f 0900 	mov.w	r9, #0
 800e84a:	07eb      	lsls	r3, r5, #31
 800e84c:	d50a      	bpl.n	800e864 <__pow5mult+0x84>
 800e84e:	4631      	mov	r1, r6
 800e850:	4622      	mov	r2, r4
 800e852:	4638      	mov	r0, r7
 800e854:	f7ff ff22 	bl	800e69c <__multiply>
 800e858:	4631      	mov	r1, r6
 800e85a:	4680      	mov	r8, r0
 800e85c:	4638      	mov	r0, r7
 800e85e:	f7ff fe09 	bl	800e474 <_Bfree>
 800e862:	4646      	mov	r6, r8
 800e864:	106d      	asrs	r5, r5, #1
 800e866:	d00b      	beq.n	800e880 <__pow5mult+0xa0>
 800e868:	6820      	ldr	r0, [r4, #0]
 800e86a:	b938      	cbnz	r0, 800e87c <__pow5mult+0x9c>
 800e86c:	4622      	mov	r2, r4
 800e86e:	4621      	mov	r1, r4
 800e870:	4638      	mov	r0, r7
 800e872:	f7ff ff13 	bl	800e69c <__multiply>
 800e876:	6020      	str	r0, [r4, #0]
 800e878:	f8c0 9000 	str.w	r9, [r0]
 800e87c:	4604      	mov	r4, r0
 800e87e:	e7e4      	b.n	800e84a <__pow5mult+0x6a>
 800e880:	4630      	mov	r0, r6
 800e882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e886:	bf00      	nop
 800e888:	0800fcb4 	.word	0x0800fcb4
 800e88c:	0800f9be 	.word	0x0800f9be
 800e890:	0800faca 	.word	0x0800faca

0800e894 <__lshift>:
 800e894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e898:	460c      	mov	r4, r1
 800e89a:	6849      	ldr	r1, [r1, #4]
 800e89c:	6923      	ldr	r3, [r4, #16]
 800e89e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e8a2:	68a3      	ldr	r3, [r4, #8]
 800e8a4:	4607      	mov	r7, r0
 800e8a6:	4691      	mov	r9, r2
 800e8a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e8ac:	f108 0601 	add.w	r6, r8, #1
 800e8b0:	42b3      	cmp	r3, r6
 800e8b2:	db0b      	blt.n	800e8cc <__lshift+0x38>
 800e8b4:	4638      	mov	r0, r7
 800e8b6:	f7ff fd9d 	bl	800e3f4 <_Balloc>
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	b948      	cbnz	r0, 800e8d2 <__lshift+0x3e>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	4b28      	ldr	r3, [pc, #160]	@ (800e964 <__lshift+0xd0>)
 800e8c2:	4829      	ldr	r0, [pc, #164]	@ (800e968 <__lshift+0xd4>)
 800e8c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e8c8:	f000 fb4e 	bl	800ef68 <__assert_func>
 800e8cc:	3101      	adds	r1, #1
 800e8ce:	005b      	lsls	r3, r3, #1
 800e8d0:	e7ee      	b.n	800e8b0 <__lshift+0x1c>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	f100 0114 	add.w	r1, r0, #20
 800e8d8:	f100 0210 	add.w	r2, r0, #16
 800e8dc:	4618      	mov	r0, r3
 800e8de:	4553      	cmp	r3, sl
 800e8e0:	db33      	blt.n	800e94a <__lshift+0xb6>
 800e8e2:	6920      	ldr	r0, [r4, #16]
 800e8e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8e8:	f104 0314 	add.w	r3, r4, #20
 800e8ec:	f019 091f 	ands.w	r9, r9, #31
 800e8f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e8f8:	d02b      	beq.n	800e952 <__lshift+0xbe>
 800e8fa:	f1c9 0e20 	rsb	lr, r9, #32
 800e8fe:	468a      	mov	sl, r1
 800e900:	2200      	movs	r2, #0
 800e902:	6818      	ldr	r0, [r3, #0]
 800e904:	fa00 f009 	lsl.w	r0, r0, r9
 800e908:	4310      	orrs	r0, r2
 800e90a:	f84a 0b04 	str.w	r0, [sl], #4
 800e90e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e912:	459c      	cmp	ip, r3
 800e914:	fa22 f20e 	lsr.w	r2, r2, lr
 800e918:	d8f3      	bhi.n	800e902 <__lshift+0x6e>
 800e91a:	ebac 0304 	sub.w	r3, ip, r4
 800e91e:	3b15      	subs	r3, #21
 800e920:	f023 0303 	bic.w	r3, r3, #3
 800e924:	3304      	adds	r3, #4
 800e926:	f104 0015 	add.w	r0, r4, #21
 800e92a:	4560      	cmp	r0, ip
 800e92c:	bf88      	it	hi
 800e92e:	2304      	movhi	r3, #4
 800e930:	50ca      	str	r2, [r1, r3]
 800e932:	b10a      	cbz	r2, 800e938 <__lshift+0xa4>
 800e934:	f108 0602 	add.w	r6, r8, #2
 800e938:	3e01      	subs	r6, #1
 800e93a:	4638      	mov	r0, r7
 800e93c:	612e      	str	r6, [r5, #16]
 800e93e:	4621      	mov	r1, r4
 800e940:	f7ff fd98 	bl	800e474 <_Bfree>
 800e944:	4628      	mov	r0, r5
 800e946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e94a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e94e:	3301      	adds	r3, #1
 800e950:	e7c5      	b.n	800e8de <__lshift+0x4a>
 800e952:	3904      	subs	r1, #4
 800e954:	f853 2b04 	ldr.w	r2, [r3], #4
 800e958:	f841 2f04 	str.w	r2, [r1, #4]!
 800e95c:	459c      	cmp	ip, r3
 800e95e:	d8f9      	bhi.n	800e954 <__lshift+0xc0>
 800e960:	e7ea      	b.n	800e938 <__lshift+0xa4>
 800e962:	bf00      	nop
 800e964:	0800fa2d 	.word	0x0800fa2d
 800e968:	0800faca 	.word	0x0800faca

0800e96c <__mcmp>:
 800e96c:	690a      	ldr	r2, [r1, #16]
 800e96e:	4603      	mov	r3, r0
 800e970:	6900      	ldr	r0, [r0, #16]
 800e972:	1a80      	subs	r0, r0, r2
 800e974:	b530      	push	{r4, r5, lr}
 800e976:	d10e      	bne.n	800e996 <__mcmp+0x2a>
 800e978:	3314      	adds	r3, #20
 800e97a:	3114      	adds	r1, #20
 800e97c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e980:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e984:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e988:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e98c:	4295      	cmp	r5, r2
 800e98e:	d003      	beq.n	800e998 <__mcmp+0x2c>
 800e990:	d205      	bcs.n	800e99e <__mcmp+0x32>
 800e992:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e996:	bd30      	pop	{r4, r5, pc}
 800e998:	42a3      	cmp	r3, r4
 800e99a:	d3f3      	bcc.n	800e984 <__mcmp+0x18>
 800e99c:	e7fb      	b.n	800e996 <__mcmp+0x2a>
 800e99e:	2001      	movs	r0, #1
 800e9a0:	e7f9      	b.n	800e996 <__mcmp+0x2a>
	...

0800e9a4 <__mdiff>:
 800e9a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a8:	4689      	mov	r9, r1
 800e9aa:	4606      	mov	r6, r0
 800e9ac:	4611      	mov	r1, r2
 800e9ae:	4648      	mov	r0, r9
 800e9b0:	4614      	mov	r4, r2
 800e9b2:	f7ff ffdb 	bl	800e96c <__mcmp>
 800e9b6:	1e05      	subs	r5, r0, #0
 800e9b8:	d112      	bne.n	800e9e0 <__mdiff+0x3c>
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	4630      	mov	r0, r6
 800e9be:	f7ff fd19 	bl	800e3f4 <_Balloc>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	b928      	cbnz	r0, 800e9d2 <__mdiff+0x2e>
 800e9c6:	4b3f      	ldr	r3, [pc, #252]	@ (800eac4 <__mdiff+0x120>)
 800e9c8:	f240 2137 	movw	r1, #567	@ 0x237
 800e9cc:	483e      	ldr	r0, [pc, #248]	@ (800eac8 <__mdiff+0x124>)
 800e9ce:	f000 facb 	bl	800ef68 <__assert_func>
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9d8:	4610      	mov	r0, r2
 800e9da:	b003      	add	sp, #12
 800e9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e0:	bfbc      	itt	lt
 800e9e2:	464b      	movlt	r3, r9
 800e9e4:	46a1      	movlt	r9, r4
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e9ec:	bfba      	itte	lt
 800e9ee:	461c      	movlt	r4, r3
 800e9f0:	2501      	movlt	r5, #1
 800e9f2:	2500      	movge	r5, #0
 800e9f4:	f7ff fcfe 	bl	800e3f4 <_Balloc>
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	b918      	cbnz	r0, 800ea04 <__mdiff+0x60>
 800e9fc:	4b31      	ldr	r3, [pc, #196]	@ (800eac4 <__mdiff+0x120>)
 800e9fe:	f240 2145 	movw	r1, #581	@ 0x245
 800ea02:	e7e3      	b.n	800e9cc <__mdiff+0x28>
 800ea04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ea08:	6926      	ldr	r6, [r4, #16]
 800ea0a:	60c5      	str	r5, [r0, #12]
 800ea0c:	f109 0310 	add.w	r3, r9, #16
 800ea10:	f109 0514 	add.w	r5, r9, #20
 800ea14:	f104 0e14 	add.w	lr, r4, #20
 800ea18:	f100 0b14 	add.w	fp, r0, #20
 800ea1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ea20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ea24:	9301      	str	r3, [sp, #4]
 800ea26:	46d9      	mov	r9, fp
 800ea28:	f04f 0c00 	mov.w	ip, #0
 800ea2c:	9b01      	ldr	r3, [sp, #4]
 800ea2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ea32:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ea36:	9301      	str	r3, [sp, #4]
 800ea38:	fa1f f38a 	uxth.w	r3, sl
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	b283      	uxth	r3, r0
 800ea40:	1acb      	subs	r3, r1, r3
 800ea42:	0c00      	lsrs	r0, r0, #16
 800ea44:	4463      	add	r3, ip
 800ea46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ea4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ea54:	4576      	cmp	r6, lr
 800ea56:	f849 3b04 	str.w	r3, [r9], #4
 800ea5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ea5e:	d8e5      	bhi.n	800ea2c <__mdiff+0x88>
 800ea60:	1b33      	subs	r3, r6, r4
 800ea62:	3b15      	subs	r3, #21
 800ea64:	f023 0303 	bic.w	r3, r3, #3
 800ea68:	3415      	adds	r4, #21
 800ea6a:	3304      	adds	r3, #4
 800ea6c:	42a6      	cmp	r6, r4
 800ea6e:	bf38      	it	cc
 800ea70:	2304      	movcc	r3, #4
 800ea72:	441d      	add	r5, r3
 800ea74:	445b      	add	r3, fp
 800ea76:	461e      	mov	r6, r3
 800ea78:	462c      	mov	r4, r5
 800ea7a:	4544      	cmp	r4, r8
 800ea7c:	d30e      	bcc.n	800ea9c <__mdiff+0xf8>
 800ea7e:	f108 0103 	add.w	r1, r8, #3
 800ea82:	1b49      	subs	r1, r1, r5
 800ea84:	f021 0103 	bic.w	r1, r1, #3
 800ea88:	3d03      	subs	r5, #3
 800ea8a:	45a8      	cmp	r8, r5
 800ea8c:	bf38      	it	cc
 800ea8e:	2100      	movcc	r1, #0
 800ea90:	440b      	add	r3, r1
 800ea92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ea96:	b191      	cbz	r1, 800eabe <__mdiff+0x11a>
 800ea98:	6117      	str	r7, [r2, #16]
 800ea9a:	e79d      	b.n	800e9d8 <__mdiff+0x34>
 800ea9c:	f854 1b04 	ldr.w	r1, [r4], #4
 800eaa0:	46e6      	mov	lr, ip
 800eaa2:	0c08      	lsrs	r0, r1, #16
 800eaa4:	fa1c fc81 	uxtah	ip, ip, r1
 800eaa8:	4471      	add	r1, lr
 800eaaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eaae:	b289      	uxth	r1, r1
 800eab0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eab4:	f846 1b04 	str.w	r1, [r6], #4
 800eab8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eabc:	e7dd      	b.n	800ea7a <__mdiff+0xd6>
 800eabe:	3f01      	subs	r7, #1
 800eac0:	e7e7      	b.n	800ea92 <__mdiff+0xee>
 800eac2:	bf00      	nop
 800eac4:	0800fa2d 	.word	0x0800fa2d
 800eac8:	0800faca 	.word	0x0800faca

0800eacc <__ulp>:
 800eacc:	b082      	sub	sp, #8
 800eace:	ed8d 0b00 	vstr	d0, [sp]
 800ead2:	9a01      	ldr	r2, [sp, #4]
 800ead4:	4b0f      	ldr	r3, [pc, #60]	@ (800eb14 <__ulp+0x48>)
 800ead6:	4013      	ands	r3, r2
 800ead8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800eadc:	2b00      	cmp	r3, #0
 800eade:	dc08      	bgt.n	800eaf2 <__ulp+0x26>
 800eae0:	425b      	negs	r3, r3
 800eae2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800eae6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eaea:	da04      	bge.n	800eaf6 <__ulp+0x2a>
 800eaec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800eaf0:	4113      	asrs	r3, r2
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	e008      	b.n	800eb08 <__ulp+0x3c>
 800eaf6:	f1a2 0314 	sub.w	r3, r2, #20
 800eafa:	2b1e      	cmp	r3, #30
 800eafc:	bfda      	itte	le
 800eafe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800eb02:	40da      	lsrle	r2, r3
 800eb04:	2201      	movgt	r2, #1
 800eb06:	2300      	movs	r3, #0
 800eb08:	4619      	mov	r1, r3
 800eb0a:	4610      	mov	r0, r2
 800eb0c:	ec41 0b10 	vmov	d0, r0, r1
 800eb10:	b002      	add	sp, #8
 800eb12:	4770      	bx	lr
 800eb14:	7ff00000 	.word	0x7ff00000

0800eb18 <__b2d>:
 800eb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb1c:	6906      	ldr	r6, [r0, #16]
 800eb1e:	f100 0814 	add.w	r8, r0, #20
 800eb22:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800eb26:	1f37      	subs	r7, r6, #4
 800eb28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eb2c:	4610      	mov	r0, r2
 800eb2e:	f7ff fd53 	bl	800e5d8 <__hi0bits>
 800eb32:	f1c0 0320 	rsb	r3, r0, #32
 800eb36:	280a      	cmp	r0, #10
 800eb38:	600b      	str	r3, [r1, #0]
 800eb3a:	491b      	ldr	r1, [pc, #108]	@ (800eba8 <__b2d+0x90>)
 800eb3c:	dc15      	bgt.n	800eb6a <__b2d+0x52>
 800eb3e:	f1c0 0c0b 	rsb	ip, r0, #11
 800eb42:	fa22 f30c 	lsr.w	r3, r2, ip
 800eb46:	45b8      	cmp	r8, r7
 800eb48:	ea43 0501 	orr.w	r5, r3, r1
 800eb4c:	bf34      	ite	cc
 800eb4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eb52:	2300      	movcs	r3, #0
 800eb54:	3015      	adds	r0, #21
 800eb56:	fa02 f000 	lsl.w	r0, r2, r0
 800eb5a:	fa23 f30c 	lsr.w	r3, r3, ip
 800eb5e:	4303      	orrs	r3, r0
 800eb60:	461c      	mov	r4, r3
 800eb62:	ec45 4b10 	vmov	d0, r4, r5
 800eb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb6a:	45b8      	cmp	r8, r7
 800eb6c:	bf3a      	itte	cc
 800eb6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eb72:	f1a6 0708 	subcc.w	r7, r6, #8
 800eb76:	2300      	movcs	r3, #0
 800eb78:	380b      	subs	r0, #11
 800eb7a:	d012      	beq.n	800eba2 <__b2d+0x8a>
 800eb7c:	f1c0 0120 	rsb	r1, r0, #32
 800eb80:	fa23 f401 	lsr.w	r4, r3, r1
 800eb84:	4082      	lsls	r2, r0
 800eb86:	4322      	orrs	r2, r4
 800eb88:	4547      	cmp	r7, r8
 800eb8a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800eb8e:	bf8c      	ite	hi
 800eb90:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800eb94:	2200      	movls	r2, #0
 800eb96:	4083      	lsls	r3, r0
 800eb98:	40ca      	lsrs	r2, r1
 800eb9a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	e7de      	b.n	800eb60 <__b2d+0x48>
 800eba2:	ea42 0501 	orr.w	r5, r2, r1
 800eba6:	e7db      	b.n	800eb60 <__b2d+0x48>
 800eba8:	3ff00000 	.word	0x3ff00000

0800ebac <__d2b>:
 800ebac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ebb0:	460f      	mov	r7, r1
 800ebb2:	2101      	movs	r1, #1
 800ebb4:	ec59 8b10 	vmov	r8, r9, d0
 800ebb8:	4616      	mov	r6, r2
 800ebba:	f7ff fc1b 	bl	800e3f4 <_Balloc>
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	b930      	cbnz	r0, 800ebd0 <__d2b+0x24>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	4b23      	ldr	r3, [pc, #140]	@ (800ec54 <__d2b+0xa8>)
 800ebc6:	4824      	ldr	r0, [pc, #144]	@ (800ec58 <__d2b+0xac>)
 800ebc8:	f240 310f 	movw	r1, #783	@ 0x30f
 800ebcc:	f000 f9cc 	bl	800ef68 <__assert_func>
 800ebd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ebd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ebd8:	b10d      	cbz	r5, 800ebde <__d2b+0x32>
 800ebda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ebde:	9301      	str	r3, [sp, #4]
 800ebe0:	f1b8 0300 	subs.w	r3, r8, #0
 800ebe4:	d023      	beq.n	800ec2e <__d2b+0x82>
 800ebe6:	4668      	mov	r0, sp
 800ebe8:	9300      	str	r3, [sp, #0]
 800ebea:	f7ff fd14 	bl	800e616 <__lo0bits>
 800ebee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ebf2:	b1d0      	cbz	r0, 800ec2a <__d2b+0x7e>
 800ebf4:	f1c0 0320 	rsb	r3, r0, #32
 800ebf8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebfc:	430b      	orrs	r3, r1
 800ebfe:	40c2      	lsrs	r2, r0
 800ec00:	6163      	str	r3, [r4, #20]
 800ec02:	9201      	str	r2, [sp, #4]
 800ec04:	9b01      	ldr	r3, [sp, #4]
 800ec06:	61a3      	str	r3, [r4, #24]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	bf0c      	ite	eq
 800ec0c:	2201      	moveq	r2, #1
 800ec0e:	2202      	movne	r2, #2
 800ec10:	6122      	str	r2, [r4, #16]
 800ec12:	b1a5      	cbz	r5, 800ec3e <__d2b+0x92>
 800ec14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ec18:	4405      	add	r5, r0
 800ec1a:	603d      	str	r5, [r7, #0]
 800ec1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ec20:	6030      	str	r0, [r6, #0]
 800ec22:	4620      	mov	r0, r4
 800ec24:	b003      	add	sp, #12
 800ec26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec2a:	6161      	str	r1, [r4, #20]
 800ec2c:	e7ea      	b.n	800ec04 <__d2b+0x58>
 800ec2e:	a801      	add	r0, sp, #4
 800ec30:	f7ff fcf1 	bl	800e616 <__lo0bits>
 800ec34:	9b01      	ldr	r3, [sp, #4]
 800ec36:	6163      	str	r3, [r4, #20]
 800ec38:	3020      	adds	r0, #32
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	e7e8      	b.n	800ec10 <__d2b+0x64>
 800ec3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ec46:	6038      	str	r0, [r7, #0]
 800ec48:	6918      	ldr	r0, [r3, #16]
 800ec4a:	f7ff fcc5 	bl	800e5d8 <__hi0bits>
 800ec4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec52:	e7e5      	b.n	800ec20 <__d2b+0x74>
 800ec54:	0800fa2d 	.word	0x0800fa2d
 800ec58:	0800faca 	.word	0x0800faca

0800ec5c <__ratio>:
 800ec5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec60:	b085      	sub	sp, #20
 800ec62:	e9cd 1000 	strd	r1, r0, [sp]
 800ec66:	a902      	add	r1, sp, #8
 800ec68:	f7ff ff56 	bl	800eb18 <__b2d>
 800ec6c:	9800      	ldr	r0, [sp, #0]
 800ec6e:	a903      	add	r1, sp, #12
 800ec70:	ec55 4b10 	vmov	r4, r5, d0
 800ec74:	f7ff ff50 	bl	800eb18 <__b2d>
 800ec78:	9b01      	ldr	r3, [sp, #4]
 800ec7a:	6919      	ldr	r1, [r3, #16]
 800ec7c:	9b00      	ldr	r3, [sp, #0]
 800ec7e:	691b      	ldr	r3, [r3, #16]
 800ec80:	1ac9      	subs	r1, r1, r3
 800ec82:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ec86:	1a9b      	subs	r3, r3, r2
 800ec88:	ec5b ab10 	vmov	sl, fp, d0
 800ec8c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	bfce      	itee	gt
 800ec94:	462a      	movgt	r2, r5
 800ec96:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ec9a:	465a      	movle	r2, fp
 800ec9c:	462f      	mov	r7, r5
 800ec9e:	46d9      	mov	r9, fp
 800eca0:	bfcc      	ite	gt
 800eca2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eca6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ecaa:	464b      	mov	r3, r9
 800ecac:	4652      	mov	r2, sl
 800ecae:	4620      	mov	r0, r4
 800ecb0:	4639      	mov	r1, r7
 800ecb2:	f7f1 fdfb 	bl	80008ac <__aeabi_ddiv>
 800ecb6:	ec41 0b10 	vmov	d0, r0, r1
 800ecba:	b005      	add	sp, #20
 800ecbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ecc0 <__copybits>:
 800ecc0:	3901      	subs	r1, #1
 800ecc2:	b570      	push	{r4, r5, r6, lr}
 800ecc4:	1149      	asrs	r1, r1, #5
 800ecc6:	6914      	ldr	r4, [r2, #16]
 800ecc8:	3101      	adds	r1, #1
 800ecca:	f102 0314 	add.w	r3, r2, #20
 800ecce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ecd2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ecd6:	1f05      	subs	r5, r0, #4
 800ecd8:	42a3      	cmp	r3, r4
 800ecda:	d30c      	bcc.n	800ecf6 <__copybits+0x36>
 800ecdc:	1aa3      	subs	r3, r4, r2
 800ecde:	3b11      	subs	r3, #17
 800ece0:	f023 0303 	bic.w	r3, r3, #3
 800ece4:	3211      	adds	r2, #17
 800ece6:	42a2      	cmp	r2, r4
 800ece8:	bf88      	it	hi
 800ecea:	2300      	movhi	r3, #0
 800ecec:	4418      	add	r0, r3
 800ecee:	2300      	movs	r3, #0
 800ecf0:	4288      	cmp	r0, r1
 800ecf2:	d305      	bcc.n	800ed00 <__copybits+0x40>
 800ecf4:	bd70      	pop	{r4, r5, r6, pc}
 800ecf6:	f853 6b04 	ldr.w	r6, [r3], #4
 800ecfa:	f845 6f04 	str.w	r6, [r5, #4]!
 800ecfe:	e7eb      	b.n	800ecd8 <__copybits+0x18>
 800ed00:	f840 3b04 	str.w	r3, [r0], #4
 800ed04:	e7f4      	b.n	800ecf0 <__copybits+0x30>

0800ed06 <__any_on>:
 800ed06:	f100 0214 	add.w	r2, r0, #20
 800ed0a:	6900      	ldr	r0, [r0, #16]
 800ed0c:	114b      	asrs	r3, r1, #5
 800ed0e:	4298      	cmp	r0, r3
 800ed10:	b510      	push	{r4, lr}
 800ed12:	db11      	blt.n	800ed38 <__any_on+0x32>
 800ed14:	dd0a      	ble.n	800ed2c <__any_on+0x26>
 800ed16:	f011 011f 	ands.w	r1, r1, #31
 800ed1a:	d007      	beq.n	800ed2c <__any_on+0x26>
 800ed1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ed20:	fa24 f001 	lsr.w	r0, r4, r1
 800ed24:	fa00 f101 	lsl.w	r1, r0, r1
 800ed28:	428c      	cmp	r4, r1
 800ed2a:	d10b      	bne.n	800ed44 <__any_on+0x3e>
 800ed2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d803      	bhi.n	800ed3c <__any_on+0x36>
 800ed34:	2000      	movs	r0, #0
 800ed36:	bd10      	pop	{r4, pc}
 800ed38:	4603      	mov	r3, r0
 800ed3a:	e7f7      	b.n	800ed2c <__any_on+0x26>
 800ed3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed40:	2900      	cmp	r1, #0
 800ed42:	d0f5      	beq.n	800ed30 <__any_on+0x2a>
 800ed44:	2001      	movs	r0, #1
 800ed46:	e7f6      	b.n	800ed36 <__any_on+0x30>

0800ed48 <__submore>:
 800ed48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed4c:	460c      	mov	r4, r1
 800ed4e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ed50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed54:	4299      	cmp	r1, r3
 800ed56:	d11d      	bne.n	800ed94 <__submore+0x4c>
 800ed58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ed5c:	f7ff f878 	bl	800de50 <_malloc_r>
 800ed60:	b918      	cbnz	r0, 800ed6a <__submore+0x22>
 800ed62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed6e:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ed70:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ed74:	6360      	str	r0, [r4, #52]	@ 0x34
 800ed76:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ed7a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ed7e:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ed82:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ed86:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ed8a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ed8e:	6020      	str	r0, [r4, #0]
 800ed90:	2000      	movs	r0, #0
 800ed92:	e7e8      	b.n	800ed66 <__submore+0x1e>
 800ed94:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ed96:	0077      	lsls	r7, r6, #1
 800ed98:	463a      	mov	r2, r7
 800ed9a:	f000 f80f 	bl	800edbc <_realloc_r>
 800ed9e:	4605      	mov	r5, r0
 800eda0:	2800      	cmp	r0, #0
 800eda2:	d0de      	beq.n	800ed62 <__submore+0x1a>
 800eda4:	eb00 0806 	add.w	r8, r0, r6
 800eda8:	4601      	mov	r1, r0
 800edaa:	4632      	mov	r2, r6
 800edac:	4640      	mov	r0, r8
 800edae:	f7fd fb05 	bl	800c3bc <memcpy>
 800edb2:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800edb6:	f8c4 8000 	str.w	r8, [r4]
 800edba:	e7e9      	b.n	800ed90 <__submore+0x48>

0800edbc <_realloc_r>:
 800edbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc0:	4607      	mov	r7, r0
 800edc2:	4614      	mov	r4, r2
 800edc4:	460d      	mov	r5, r1
 800edc6:	b921      	cbnz	r1, 800edd2 <_realloc_r+0x16>
 800edc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edcc:	4611      	mov	r1, r2
 800edce:	f7ff b83f 	b.w	800de50 <_malloc_r>
 800edd2:	b92a      	cbnz	r2, 800ede0 <_realloc_r+0x24>
 800edd4:	f7fe f968 	bl	800d0a8 <_free_r>
 800edd8:	4625      	mov	r5, r4
 800edda:	4628      	mov	r0, r5
 800eddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede0:	f000 f8f4 	bl	800efcc <_malloc_usable_size_r>
 800ede4:	4284      	cmp	r4, r0
 800ede6:	4606      	mov	r6, r0
 800ede8:	d802      	bhi.n	800edf0 <_realloc_r+0x34>
 800edea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800edee:	d8f4      	bhi.n	800edda <_realloc_r+0x1e>
 800edf0:	4621      	mov	r1, r4
 800edf2:	4638      	mov	r0, r7
 800edf4:	f7ff f82c 	bl	800de50 <_malloc_r>
 800edf8:	4680      	mov	r8, r0
 800edfa:	b908      	cbnz	r0, 800ee00 <_realloc_r+0x44>
 800edfc:	4645      	mov	r5, r8
 800edfe:	e7ec      	b.n	800edda <_realloc_r+0x1e>
 800ee00:	42b4      	cmp	r4, r6
 800ee02:	4622      	mov	r2, r4
 800ee04:	4629      	mov	r1, r5
 800ee06:	bf28      	it	cs
 800ee08:	4632      	movcs	r2, r6
 800ee0a:	f7fd fad7 	bl	800c3bc <memcpy>
 800ee0e:	4629      	mov	r1, r5
 800ee10:	4638      	mov	r0, r7
 800ee12:	f7fe f949 	bl	800d0a8 <_free_r>
 800ee16:	e7f1      	b.n	800edfc <_realloc_r+0x40>

0800ee18 <_strtoul_l.isra.0>:
 800ee18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee1c:	4e34      	ldr	r6, [pc, #208]	@ (800eef0 <_strtoul_l.isra.0+0xd8>)
 800ee1e:	4686      	mov	lr, r0
 800ee20:	460d      	mov	r5, r1
 800ee22:	4628      	mov	r0, r5
 800ee24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee28:	5d37      	ldrb	r7, [r6, r4]
 800ee2a:	f017 0708 	ands.w	r7, r7, #8
 800ee2e:	d1f8      	bne.n	800ee22 <_strtoul_l.isra.0+0xa>
 800ee30:	2c2d      	cmp	r4, #45	@ 0x2d
 800ee32:	d110      	bne.n	800ee56 <_strtoul_l.isra.0+0x3e>
 800ee34:	782c      	ldrb	r4, [r5, #0]
 800ee36:	2701      	movs	r7, #1
 800ee38:	1c85      	adds	r5, r0, #2
 800ee3a:	f033 0010 	bics.w	r0, r3, #16
 800ee3e:	d115      	bne.n	800ee6c <_strtoul_l.isra.0+0x54>
 800ee40:	2c30      	cmp	r4, #48	@ 0x30
 800ee42:	d10d      	bne.n	800ee60 <_strtoul_l.isra.0+0x48>
 800ee44:	7828      	ldrb	r0, [r5, #0]
 800ee46:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ee4a:	2858      	cmp	r0, #88	@ 0x58
 800ee4c:	d108      	bne.n	800ee60 <_strtoul_l.isra.0+0x48>
 800ee4e:	786c      	ldrb	r4, [r5, #1]
 800ee50:	3502      	adds	r5, #2
 800ee52:	2310      	movs	r3, #16
 800ee54:	e00a      	b.n	800ee6c <_strtoul_l.isra.0+0x54>
 800ee56:	2c2b      	cmp	r4, #43	@ 0x2b
 800ee58:	bf04      	itt	eq
 800ee5a:	782c      	ldrbeq	r4, [r5, #0]
 800ee5c:	1c85      	addeq	r5, r0, #2
 800ee5e:	e7ec      	b.n	800ee3a <_strtoul_l.isra.0+0x22>
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d1f6      	bne.n	800ee52 <_strtoul_l.isra.0+0x3a>
 800ee64:	2c30      	cmp	r4, #48	@ 0x30
 800ee66:	bf14      	ite	ne
 800ee68:	230a      	movne	r3, #10
 800ee6a:	2308      	moveq	r3, #8
 800ee6c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800ee70:	2600      	movs	r6, #0
 800ee72:	fbb8 f8f3 	udiv	r8, r8, r3
 800ee76:	fb03 f908 	mul.w	r9, r3, r8
 800ee7a:	ea6f 0909 	mvn.w	r9, r9
 800ee7e:	4630      	mov	r0, r6
 800ee80:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ee84:	f1bc 0f09 	cmp.w	ip, #9
 800ee88:	d810      	bhi.n	800eeac <_strtoul_l.isra.0+0x94>
 800ee8a:	4664      	mov	r4, ip
 800ee8c:	42a3      	cmp	r3, r4
 800ee8e:	dd1e      	ble.n	800eece <_strtoul_l.isra.0+0xb6>
 800ee90:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800ee94:	d007      	beq.n	800eea6 <_strtoul_l.isra.0+0x8e>
 800ee96:	4580      	cmp	r8, r0
 800ee98:	d316      	bcc.n	800eec8 <_strtoul_l.isra.0+0xb0>
 800ee9a:	d101      	bne.n	800eea0 <_strtoul_l.isra.0+0x88>
 800ee9c:	45a1      	cmp	r9, r4
 800ee9e:	db13      	blt.n	800eec8 <_strtoul_l.isra.0+0xb0>
 800eea0:	fb00 4003 	mla	r0, r0, r3, r4
 800eea4:	2601      	movs	r6, #1
 800eea6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eeaa:	e7e9      	b.n	800ee80 <_strtoul_l.isra.0+0x68>
 800eeac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800eeb0:	f1bc 0f19 	cmp.w	ip, #25
 800eeb4:	d801      	bhi.n	800eeba <_strtoul_l.isra.0+0xa2>
 800eeb6:	3c37      	subs	r4, #55	@ 0x37
 800eeb8:	e7e8      	b.n	800ee8c <_strtoul_l.isra.0+0x74>
 800eeba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800eebe:	f1bc 0f19 	cmp.w	ip, #25
 800eec2:	d804      	bhi.n	800eece <_strtoul_l.isra.0+0xb6>
 800eec4:	3c57      	subs	r4, #87	@ 0x57
 800eec6:	e7e1      	b.n	800ee8c <_strtoul_l.isra.0+0x74>
 800eec8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800eecc:	e7eb      	b.n	800eea6 <_strtoul_l.isra.0+0x8e>
 800eece:	1c73      	adds	r3, r6, #1
 800eed0:	d106      	bne.n	800eee0 <_strtoul_l.isra.0+0xc8>
 800eed2:	2322      	movs	r3, #34	@ 0x22
 800eed4:	f8ce 3000 	str.w	r3, [lr]
 800eed8:	4630      	mov	r0, r6
 800eeda:	b932      	cbnz	r2, 800eeea <_strtoul_l.isra.0+0xd2>
 800eedc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eee0:	b107      	cbz	r7, 800eee4 <_strtoul_l.isra.0+0xcc>
 800eee2:	4240      	negs	r0, r0
 800eee4:	2a00      	cmp	r2, #0
 800eee6:	d0f9      	beq.n	800eedc <_strtoul_l.isra.0+0xc4>
 800eee8:	b106      	cbz	r6, 800eeec <_strtoul_l.isra.0+0xd4>
 800eeea:	1e69      	subs	r1, r5, #1
 800eeec:	6011      	str	r1, [r2, #0]
 800eeee:	e7f5      	b.n	800eedc <_strtoul_l.isra.0+0xc4>
 800eef0:	0800fbb1 	.word	0x0800fbb1

0800eef4 <_strtoul_r>:
 800eef4:	f7ff bf90 	b.w	800ee18 <_strtoul_l.isra.0>

0800eef8 <__ascii_wctomb>:
 800eef8:	4603      	mov	r3, r0
 800eefa:	4608      	mov	r0, r1
 800eefc:	b141      	cbz	r1, 800ef10 <__ascii_wctomb+0x18>
 800eefe:	2aff      	cmp	r2, #255	@ 0xff
 800ef00:	d904      	bls.n	800ef0c <__ascii_wctomb+0x14>
 800ef02:	228a      	movs	r2, #138	@ 0x8a
 800ef04:	601a      	str	r2, [r3, #0]
 800ef06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef0a:	4770      	bx	lr
 800ef0c:	700a      	strb	r2, [r1, #0]
 800ef0e:	2001      	movs	r0, #1
 800ef10:	4770      	bx	lr

0800ef12 <memmove>:
 800ef12:	4288      	cmp	r0, r1
 800ef14:	b510      	push	{r4, lr}
 800ef16:	eb01 0402 	add.w	r4, r1, r2
 800ef1a:	d902      	bls.n	800ef22 <memmove+0x10>
 800ef1c:	4284      	cmp	r4, r0
 800ef1e:	4623      	mov	r3, r4
 800ef20:	d807      	bhi.n	800ef32 <memmove+0x20>
 800ef22:	1e43      	subs	r3, r0, #1
 800ef24:	42a1      	cmp	r1, r4
 800ef26:	d008      	beq.n	800ef3a <memmove+0x28>
 800ef28:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef30:	e7f8      	b.n	800ef24 <memmove+0x12>
 800ef32:	4402      	add	r2, r0
 800ef34:	4601      	mov	r1, r0
 800ef36:	428a      	cmp	r2, r1
 800ef38:	d100      	bne.n	800ef3c <memmove+0x2a>
 800ef3a:	bd10      	pop	{r4, pc}
 800ef3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef40:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef44:	e7f7      	b.n	800ef36 <memmove+0x24>
	...

0800ef48 <_sbrk_r>:
 800ef48:	b538      	push	{r3, r4, r5, lr}
 800ef4a:	4d06      	ldr	r5, [pc, #24]	@ (800ef64 <_sbrk_r+0x1c>)
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	4604      	mov	r4, r0
 800ef50:	4608      	mov	r0, r1
 800ef52:	602b      	str	r3, [r5, #0]
 800ef54:	f7f2 fe94 	bl	8001c80 <_sbrk>
 800ef58:	1c43      	adds	r3, r0, #1
 800ef5a:	d102      	bne.n	800ef62 <_sbrk_r+0x1a>
 800ef5c:	682b      	ldr	r3, [r5, #0]
 800ef5e:	b103      	cbz	r3, 800ef62 <_sbrk_r+0x1a>
 800ef60:	6023      	str	r3, [r4, #0]
 800ef62:	bd38      	pop	{r3, r4, r5, pc}
 800ef64:	20000d38 	.word	0x20000d38

0800ef68 <__assert_func>:
 800ef68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef6a:	4614      	mov	r4, r2
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	4b09      	ldr	r3, [pc, #36]	@ (800ef94 <__assert_func+0x2c>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4605      	mov	r5, r0
 800ef74:	68d8      	ldr	r0, [r3, #12]
 800ef76:	b14c      	cbz	r4, 800ef8c <__assert_func+0x24>
 800ef78:	4b07      	ldr	r3, [pc, #28]	@ (800ef98 <__assert_func+0x30>)
 800ef7a:	9100      	str	r1, [sp, #0]
 800ef7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef80:	4906      	ldr	r1, [pc, #24]	@ (800ef9c <__assert_func+0x34>)
 800ef82:	462b      	mov	r3, r5
 800ef84:	f000 f82a 	bl	800efdc <fiprintf>
 800ef88:	f000 f83a 	bl	800f000 <abort>
 800ef8c:	4b04      	ldr	r3, [pc, #16]	@ (800efa0 <__assert_func+0x38>)
 800ef8e:	461c      	mov	r4, r3
 800ef90:	e7f3      	b.n	800ef7a <__assert_func+0x12>
 800ef92:	bf00      	nop
 800ef94:	20000540 	.word	0x20000540
 800ef98:	0800fb23 	.word	0x0800fb23
 800ef9c:	0800fb30 	.word	0x0800fb30
 800efa0:	0800fb5e 	.word	0x0800fb5e

0800efa4 <_calloc_r>:
 800efa4:	b570      	push	{r4, r5, r6, lr}
 800efa6:	fba1 5402 	umull	r5, r4, r1, r2
 800efaa:	b934      	cbnz	r4, 800efba <_calloc_r+0x16>
 800efac:	4629      	mov	r1, r5
 800efae:	f7fe ff4f 	bl	800de50 <_malloc_r>
 800efb2:	4606      	mov	r6, r0
 800efb4:	b928      	cbnz	r0, 800efc2 <_calloc_r+0x1e>
 800efb6:	4630      	mov	r0, r6
 800efb8:	bd70      	pop	{r4, r5, r6, pc}
 800efba:	220c      	movs	r2, #12
 800efbc:	6002      	str	r2, [r0, #0]
 800efbe:	2600      	movs	r6, #0
 800efc0:	e7f9      	b.n	800efb6 <_calloc_r+0x12>
 800efc2:	462a      	mov	r2, r5
 800efc4:	4621      	mov	r1, r4
 800efc6:	f7fd f953 	bl	800c270 <memset>
 800efca:	e7f4      	b.n	800efb6 <_calloc_r+0x12>

0800efcc <_malloc_usable_size_r>:
 800efcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efd0:	1f18      	subs	r0, r3, #4
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	bfbc      	itt	lt
 800efd6:	580b      	ldrlt	r3, [r1, r0]
 800efd8:	18c0      	addlt	r0, r0, r3
 800efda:	4770      	bx	lr

0800efdc <fiprintf>:
 800efdc:	b40e      	push	{r1, r2, r3}
 800efde:	b503      	push	{r0, r1, lr}
 800efe0:	4601      	mov	r1, r0
 800efe2:	ab03      	add	r3, sp, #12
 800efe4:	4805      	ldr	r0, [pc, #20]	@ (800effc <fiprintf+0x20>)
 800efe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800efea:	6800      	ldr	r0, [r0, #0]
 800efec:	9301      	str	r3, [sp, #4]
 800efee:	f000 f837 	bl	800f060 <_vfiprintf_r>
 800eff2:	b002      	add	sp, #8
 800eff4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eff8:	b003      	add	sp, #12
 800effa:	4770      	bx	lr
 800effc:	20000540 	.word	0x20000540

0800f000 <abort>:
 800f000:	b508      	push	{r3, lr}
 800f002:	2006      	movs	r0, #6
 800f004:	f000 fa62 	bl	800f4cc <raise>
 800f008:	2001      	movs	r0, #1
 800f00a:	f7f2 fdc1 	bl	8001b90 <_exit>

0800f00e <__sfputc_r>:
 800f00e:	6893      	ldr	r3, [r2, #8]
 800f010:	3b01      	subs	r3, #1
 800f012:	2b00      	cmp	r3, #0
 800f014:	b410      	push	{r4}
 800f016:	6093      	str	r3, [r2, #8]
 800f018:	da08      	bge.n	800f02c <__sfputc_r+0x1e>
 800f01a:	6994      	ldr	r4, [r2, #24]
 800f01c:	42a3      	cmp	r3, r4
 800f01e:	db01      	blt.n	800f024 <__sfputc_r+0x16>
 800f020:	290a      	cmp	r1, #10
 800f022:	d103      	bne.n	800f02c <__sfputc_r+0x1e>
 800f024:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f028:	f000 b932 	b.w	800f290 <__swbuf_r>
 800f02c:	6813      	ldr	r3, [r2, #0]
 800f02e:	1c58      	adds	r0, r3, #1
 800f030:	6010      	str	r0, [r2, #0]
 800f032:	7019      	strb	r1, [r3, #0]
 800f034:	4608      	mov	r0, r1
 800f036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <__sfputs_r>:
 800f03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f03e:	4606      	mov	r6, r0
 800f040:	460f      	mov	r7, r1
 800f042:	4614      	mov	r4, r2
 800f044:	18d5      	adds	r5, r2, r3
 800f046:	42ac      	cmp	r4, r5
 800f048:	d101      	bne.n	800f04e <__sfputs_r+0x12>
 800f04a:	2000      	movs	r0, #0
 800f04c:	e007      	b.n	800f05e <__sfputs_r+0x22>
 800f04e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f052:	463a      	mov	r2, r7
 800f054:	4630      	mov	r0, r6
 800f056:	f7ff ffda 	bl	800f00e <__sfputc_r>
 800f05a:	1c43      	adds	r3, r0, #1
 800f05c:	d1f3      	bne.n	800f046 <__sfputs_r+0xa>
 800f05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f060 <_vfiprintf_r>:
 800f060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f064:	460d      	mov	r5, r1
 800f066:	b09d      	sub	sp, #116	@ 0x74
 800f068:	4614      	mov	r4, r2
 800f06a:	4698      	mov	r8, r3
 800f06c:	4606      	mov	r6, r0
 800f06e:	b118      	cbz	r0, 800f078 <_vfiprintf_r+0x18>
 800f070:	6a03      	ldr	r3, [r0, #32]
 800f072:	b90b      	cbnz	r3, 800f078 <_vfiprintf_r+0x18>
 800f074:	f7fc fa40 	bl	800b4f8 <__sinit>
 800f078:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f07a:	07d9      	lsls	r1, r3, #31
 800f07c:	d405      	bmi.n	800f08a <_vfiprintf_r+0x2a>
 800f07e:	89ab      	ldrh	r3, [r5, #12]
 800f080:	059a      	lsls	r2, r3, #22
 800f082:	d402      	bmi.n	800f08a <_vfiprintf_r+0x2a>
 800f084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f086:	f7fd f982 	bl	800c38e <__retarget_lock_acquire_recursive>
 800f08a:	89ab      	ldrh	r3, [r5, #12]
 800f08c:	071b      	lsls	r3, r3, #28
 800f08e:	d501      	bpl.n	800f094 <_vfiprintf_r+0x34>
 800f090:	692b      	ldr	r3, [r5, #16]
 800f092:	b99b      	cbnz	r3, 800f0bc <_vfiprintf_r+0x5c>
 800f094:	4629      	mov	r1, r5
 800f096:	4630      	mov	r0, r6
 800f098:	f000 f938 	bl	800f30c <__swsetup_r>
 800f09c:	b170      	cbz	r0, 800f0bc <_vfiprintf_r+0x5c>
 800f09e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0a0:	07dc      	lsls	r4, r3, #31
 800f0a2:	d504      	bpl.n	800f0ae <_vfiprintf_r+0x4e>
 800f0a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0a8:	b01d      	add	sp, #116	@ 0x74
 800f0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ae:	89ab      	ldrh	r3, [r5, #12]
 800f0b0:	0598      	lsls	r0, r3, #22
 800f0b2:	d4f7      	bmi.n	800f0a4 <_vfiprintf_r+0x44>
 800f0b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0b6:	f7fd f96b 	bl	800c390 <__retarget_lock_release_recursive>
 800f0ba:	e7f3      	b.n	800f0a4 <_vfiprintf_r+0x44>
 800f0bc:	2300      	movs	r3, #0
 800f0be:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0c0:	2320      	movs	r3, #32
 800f0c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f0c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0ca:	2330      	movs	r3, #48	@ 0x30
 800f0cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f27c <_vfiprintf_r+0x21c>
 800f0d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f0d4:	f04f 0901 	mov.w	r9, #1
 800f0d8:	4623      	mov	r3, r4
 800f0da:	469a      	mov	sl, r3
 800f0dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0e0:	b10a      	cbz	r2, 800f0e6 <_vfiprintf_r+0x86>
 800f0e2:	2a25      	cmp	r2, #37	@ 0x25
 800f0e4:	d1f9      	bne.n	800f0da <_vfiprintf_r+0x7a>
 800f0e6:	ebba 0b04 	subs.w	fp, sl, r4
 800f0ea:	d00b      	beq.n	800f104 <_vfiprintf_r+0xa4>
 800f0ec:	465b      	mov	r3, fp
 800f0ee:	4622      	mov	r2, r4
 800f0f0:	4629      	mov	r1, r5
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	f7ff ffa2 	bl	800f03c <__sfputs_r>
 800f0f8:	3001      	adds	r0, #1
 800f0fa:	f000 80a7 	beq.w	800f24c <_vfiprintf_r+0x1ec>
 800f0fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f100:	445a      	add	r2, fp
 800f102:	9209      	str	r2, [sp, #36]	@ 0x24
 800f104:	f89a 3000 	ldrb.w	r3, [sl]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	f000 809f 	beq.w	800f24c <_vfiprintf_r+0x1ec>
 800f10e:	2300      	movs	r3, #0
 800f110:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f118:	f10a 0a01 	add.w	sl, sl, #1
 800f11c:	9304      	str	r3, [sp, #16]
 800f11e:	9307      	str	r3, [sp, #28]
 800f120:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f124:	931a      	str	r3, [sp, #104]	@ 0x68
 800f126:	4654      	mov	r4, sl
 800f128:	2205      	movs	r2, #5
 800f12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f12e:	4853      	ldr	r0, [pc, #332]	@ (800f27c <_vfiprintf_r+0x21c>)
 800f130:	f7f1 f87e 	bl	8000230 <memchr>
 800f134:	9a04      	ldr	r2, [sp, #16]
 800f136:	b9d8      	cbnz	r0, 800f170 <_vfiprintf_r+0x110>
 800f138:	06d1      	lsls	r1, r2, #27
 800f13a:	bf44      	itt	mi
 800f13c:	2320      	movmi	r3, #32
 800f13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f142:	0713      	lsls	r3, r2, #28
 800f144:	bf44      	itt	mi
 800f146:	232b      	movmi	r3, #43	@ 0x2b
 800f148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f14c:	f89a 3000 	ldrb.w	r3, [sl]
 800f150:	2b2a      	cmp	r3, #42	@ 0x2a
 800f152:	d015      	beq.n	800f180 <_vfiprintf_r+0x120>
 800f154:	9a07      	ldr	r2, [sp, #28]
 800f156:	4654      	mov	r4, sl
 800f158:	2000      	movs	r0, #0
 800f15a:	f04f 0c0a 	mov.w	ip, #10
 800f15e:	4621      	mov	r1, r4
 800f160:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f164:	3b30      	subs	r3, #48	@ 0x30
 800f166:	2b09      	cmp	r3, #9
 800f168:	d94b      	bls.n	800f202 <_vfiprintf_r+0x1a2>
 800f16a:	b1b0      	cbz	r0, 800f19a <_vfiprintf_r+0x13a>
 800f16c:	9207      	str	r2, [sp, #28]
 800f16e:	e014      	b.n	800f19a <_vfiprintf_r+0x13a>
 800f170:	eba0 0308 	sub.w	r3, r0, r8
 800f174:	fa09 f303 	lsl.w	r3, r9, r3
 800f178:	4313      	orrs	r3, r2
 800f17a:	9304      	str	r3, [sp, #16]
 800f17c:	46a2      	mov	sl, r4
 800f17e:	e7d2      	b.n	800f126 <_vfiprintf_r+0xc6>
 800f180:	9b03      	ldr	r3, [sp, #12]
 800f182:	1d19      	adds	r1, r3, #4
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	9103      	str	r1, [sp, #12]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	bfbb      	ittet	lt
 800f18c:	425b      	neglt	r3, r3
 800f18e:	f042 0202 	orrlt.w	r2, r2, #2
 800f192:	9307      	strge	r3, [sp, #28]
 800f194:	9307      	strlt	r3, [sp, #28]
 800f196:	bfb8      	it	lt
 800f198:	9204      	strlt	r2, [sp, #16]
 800f19a:	7823      	ldrb	r3, [r4, #0]
 800f19c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f19e:	d10a      	bne.n	800f1b6 <_vfiprintf_r+0x156>
 800f1a0:	7863      	ldrb	r3, [r4, #1]
 800f1a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1a4:	d132      	bne.n	800f20c <_vfiprintf_r+0x1ac>
 800f1a6:	9b03      	ldr	r3, [sp, #12]
 800f1a8:	1d1a      	adds	r2, r3, #4
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	9203      	str	r2, [sp, #12]
 800f1ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1b2:	3402      	adds	r4, #2
 800f1b4:	9305      	str	r3, [sp, #20]
 800f1b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f28c <_vfiprintf_r+0x22c>
 800f1ba:	7821      	ldrb	r1, [r4, #0]
 800f1bc:	2203      	movs	r2, #3
 800f1be:	4650      	mov	r0, sl
 800f1c0:	f7f1 f836 	bl	8000230 <memchr>
 800f1c4:	b138      	cbz	r0, 800f1d6 <_vfiprintf_r+0x176>
 800f1c6:	9b04      	ldr	r3, [sp, #16]
 800f1c8:	eba0 000a 	sub.w	r0, r0, sl
 800f1cc:	2240      	movs	r2, #64	@ 0x40
 800f1ce:	4082      	lsls	r2, r0
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	3401      	adds	r4, #1
 800f1d4:	9304      	str	r3, [sp, #16]
 800f1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1da:	4829      	ldr	r0, [pc, #164]	@ (800f280 <_vfiprintf_r+0x220>)
 800f1dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f1e0:	2206      	movs	r2, #6
 800f1e2:	f7f1 f825 	bl	8000230 <memchr>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d03f      	beq.n	800f26a <_vfiprintf_r+0x20a>
 800f1ea:	4b26      	ldr	r3, [pc, #152]	@ (800f284 <_vfiprintf_r+0x224>)
 800f1ec:	bb1b      	cbnz	r3, 800f236 <_vfiprintf_r+0x1d6>
 800f1ee:	9b03      	ldr	r3, [sp, #12]
 800f1f0:	3307      	adds	r3, #7
 800f1f2:	f023 0307 	bic.w	r3, r3, #7
 800f1f6:	3308      	adds	r3, #8
 800f1f8:	9303      	str	r3, [sp, #12]
 800f1fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1fc:	443b      	add	r3, r7
 800f1fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800f200:	e76a      	b.n	800f0d8 <_vfiprintf_r+0x78>
 800f202:	fb0c 3202 	mla	r2, ip, r2, r3
 800f206:	460c      	mov	r4, r1
 800f208:	2001      	movs	r0, #1
 800f20a:	e7a8      	b.n	800f15e <_vfiprintf_r+0xfe>
 800f20c:	2300      	movs	r3, #0
 800f20e:	3401      	adds	r4, #1
 800f210:	9305      	str	r3, [sp, #20]
 800f212:	4619      	mov	r1, r3
 800f214:	f04f 0c0a 	mov.w	ip, #10
 800f218:	4620      	mov	r0, r4
 800f21a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f21e:	3a30      	subs	r2, #48	@ 0x30
 800f220:	2a09      	cmp	r2, #9
 800f222:	d903      	bls.n	800f22c <_vfiprintf_r+0x1cc>
 800f224:	2b00      	cmp	r3, #0
 800f226:	d0c6      	beq.n	800f1b6 <_vfiprintf_r+0x156>
 800f228:	9105      	str	r1, [sp, #20]
 800f22a:	e7c4      	b.n	800f1b6 <_vfiprintf_r+0x156>
 800f22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f230:	4604      	mov	r4, r0
 800f232:	2301      	movs	r3, #1
 800f234:	e7f0      	b.n	800f218 <_vfiprintf_r+0x1b8>
 800f236:	ab03      	add	r3, sp, #12
 800f238:	9300      	str	r3, [sp, #0]
 800f23a:	462a      	mov	r2, r5
 800f23c:	4b12      	ldr	r3, [pc, #72]	@ (800f288 <_vfiprintf_r+0x228>)
 800f23e:	a904      	add	r1, sp, #16
 800f240:	4630      	mov	r0, r6
 800f242:	f7fb fa3f 	bl	800a6c4 <_printf_float>
 800f246:	4607      	mov	r7, r0
 800f248:	1c78      	adds	r0, r7, #1
 800f24a:	d1d6      	bne.n	800f1fa <_vfiprintf_r+0x19a>
 800f24c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f24e:	07d9      	lsls	r1, r3, #31
 800f250:	d405      	bmi.n	800f25e <_vfiprintf_r+0x1fe>
 800f252:	89ab      	ldrh	r3, [r5, #12]
 800f254:	059a      	lsls	r2, r3, #22
 800f256:	d402      	bmi.n	800f25e <_vfiprintf_r+0x1fe>
 800f258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f25a:	f7fd f899 	bl	800c390 <__retarget_lock_release_recursive>
 800f25e:	89ab      	ldrh	r3, [r5, #12]
 800f260:	065b      	lsls	r3, r3, #25
 800f262:	f53f af1f 	bmi.w	800f0a4 <_vfiprintf_r+0x44>
 800f266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f268:	e71e      	b.n	800f0a8 <_vfiprintf_r+0x48>
 800f26a:	ab03      	add	r3, sp, #12
 800f26c:	9300      	str	r3, [sp, #0]
 800f26e:	462a      	mov	r2, r5
 800f270:	4b05      	ldr	r3, [pc, #20]	@ (800f288 <_vfiprintf_r+0x228>)
 800f272:	a904      	add	r1, sp, #16
 800f274:	4630      	mov	r0, r6
 800f276:	f7fb fcbd 	bl	800abf4 <_printf_i>
 800f27a:	e7e4      	b.n	800f246 <_vfiprintf_r+0x1e6>
 800f27c:	0800fa9e 	.word	0x0800fa9e
 800f280:	0800faa8 	.word	0x0800faa8
 800f284:	0800a6c5 	.word	0x0800a6c5
 800f288:	0800f03d 	.word	0x0800f03d
 800f28c:	0800faa4 	.word	0x0800faa4

0800f290 <__swbuf_r>:
 800f290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f292:	460e      	mov	r6, r1
 800f294:	4614      	mov	r4, r2
 800f296:	4605      	mov	r5, r0
 800f298:	b118      	cbz	r0, 800f2a2 <__swbuf_r+0x12>
 800f29a:	6a03      	ldr	r3, [r0, #32]
 800f29c:	b90b      	cbnz	r3, 800f2a2 <__swbuf_r+0x12>
 800f29e:	f7fc f92b 	bl	800b4f8 <__sinit>
 800f2a2:	69a3      	ldr	r3, [r4, #24]
 800f2a4:	60a3      	str	r3, [r4, #8]
 800f2a6:	89a3      	ldrh	r3, [r4, #12]
 800f2a8:	071a      	lsls	r2, r3, #28
 800f2aa:	d501      	bpl.n	800f2b0 <__swbuf_r+0x20>
 800f2ac:	6923      	ldr	r3, [r4, #16]
 800f2ae:	b943      	cbnz	r3, 800f2c2 <__swbuf_r+0x32>
 800f2b0:	4621      	mov	r1, r4
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	f000 f82a 	bl	800f30c <__swsetup_r>
 800f2b8:	b118      	cbz	r0, 800f2c2 <__swbuf_r+0x32>
 800f2ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f2be:	4638      	mov	r0, r7
 800f2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2c2:	6823      	ldr	r3, [r4, #0]
 800f2c4:	6922      	ldr	r2, [r4, #16]
 800f2c6:	1a98      	subs	r0, r3, r2
 800f2c8:	6963      	ldr	r3, [r4, #20]
 800f2ca:	b2f6      	uxtb	r6, r6
 800f2cc:	4283      	cmp	r3, r0
 800f2ce:	4637      	mov	r7, r6
 800f2d0:	dc05      	bgt.n	800f2de <__swbuf_r+0x4e>
 800f2d2:	4621      	mov	r1, r4
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	f7ff f859 	bl	800e38c <_fflush_r>
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	d1ed      	bne.n	800f2ba <__swbuf_r+0x2a>
 800f2de:	68a3      	ldr	r3, [r4, #8]
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	60a3      	str	r3, [r4, #8]
 800f2e4:	6823      	ldr	r3, [r4, #0]
 800f2e6:	1c5a      	adds	r2, r3, #1
 800f2e8:	6022      	str	r2, [r4, #0]
 800f2ea:	701e      	strb	r6, [r3, #0]
 800f2ec:	6962      	ldr	r2, [r4, #20]
 800f2ee:	1c43      	adds	r3, r0, #1
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d004      	beq.n	800f2fe <__swbuf_r+0x6e>
 800f2f4:	89a3      	ldrh	r3, [r4, #12]
 800f2f6:	07db      	lsls	r3, r3, #31
 800f2f8:	d5e1      	bpl.n	800f2be <__swbuf_r+0x2e>
 800f2fa:	2e0a      	cmp	r6, #10
 800f2fc:	d1df      	bne.n	800f2be <__swbuf_r+0x2e>
 800f2fe:	4621      	mov	r1, r4
 800f300:	4628      	mov	r0, r5
 800f302:	f7ff f843 	bl	800e38c <_fflush_r>
 800f306:	2800      	cmp	r0, #0
 800f308:	d0d9      	beq.n	800f2be <__swbuf_r+0x2e>
 800f30a:	e7d6      	b.n	800f2ba <__swbuf_r+0x2a>

0800f30c <__swsetup_r>:
 800f30c:	b538      	push	{r3, r4, r5, lr}
 800f30e:	4b29      	ldr	r3, [pc, #164]	@ (800f3b4 <__swsetup_r+0xa8>)
 800f310:	4605      	mov	r5, r0
 800f312:	6818      	ldr	r0, [r3, #0]
 800f314:	460c      	mov	r4, r1
 800f316:	b118      	cbz	r0, 800f320 <__swsetup_r+0x14>
 800f318:	6a03      	ldr	r3, [r0, #32]
 800f31a:	b90b      	cbnz	r3, 800f320 <__swsetup_r+0x14>
 800f31c:	f7fc f8ec 	bl	800b4f8 <__sinit>
 800f320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f324:	0719      	lsls	r1, r3, #28
 800f326:	d422      	bmi.n	800f36e <__swsetup_r+0x62>
 800f328:	06da      	lsls	r2, r3, #27
 800f32a:	d407      	bmi.n	800f33c <__swsetup_r+0x30>
 800f32c:	2209      	movs	r2, #9
 800f32e:	602a      	str	r2, [r5, #0]
 800f330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f334:	81a3      	strh	r3, [r4, #12]
 800f336:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f33a:	e033      	b.n	800f3a4 <__swsetup_r+0x98>
 800f33c:	0758      	lsls	r0, r3, #29
 800f33e:	d512      	bpl.n	800f366 <__swsetup_r+0x5a>
 800f340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f342:	b141      	cbz	r1, 800f356 <__swsetup_r+0x4a>
 800f344:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f348:	4299      	cmp	r1, r3
 800f34a:	d002      	beq.n	800f352 <__swsetup_r+0x46>
 800f34c:	4628      	mov	r0, r5
 800f34e:	f7fd feab 	bl	800d0a8 <_free_r>
 800f352:	2300      	movs	r3, #0
 800f354:	6363      	str	r3, [r4, #52]	@ 0x34
 800f356:	89a3      	ldrh	r3, [r4, #12]
 800f358:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f35c:	81a3      	strh	r3, [r4, #12]
 800f35e:	2300      	movs	r3, #0
 800f360:	6063      	str	r3, [r4, #4]
 800f362:	6923      	ldr	r3, [r4, #16]
 800f364:	6023      	str	r3, [r4, #0]
 800f366:	89a3      	ldrh	r3, [r4, #12]
 800f368:	f043 0308 	orr.w	r3, r3, #8
 800f36c:	81a3      	strh	r3, [r4, #12]
 800f36e:	6923      	ldr	r3, [r4, #16]
 800f370:	b94b      	cbnz	r3, 800f386 <__swsetup_r+0x7a>
 800f372:	89a3      	ldrh	r3, [r4, #12]
 800f374:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f37c:	d003      	beq.n	800f386 <__swsetup_r+0x7a>
 800f37e:	4621      	mov	r1, r4
 800f380:	4628      	mov	r0, r5
 800f382:	f000 f83f 	bl	800f404 <__smakebuf_r>
 800f386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f38a:	f013 0201 	ands.w	r2, r3, #1
 800f38e:	d00a      	beq.n	800f3a6 <__swsetup_r+0x9a>
 800f390:	2200      	movs	r2, #0
 800f392:	60a2      	str	r2, [r4, #8]
 800f394:	6962      	ldr	r2, [r4, #20]
 800f396:	4252      	negs	r2, r2
 800f398:	61a2      	str	r2, [r4, #24]
 800f39a:	6922      	ldr	r2, [r4, #16]
 800f39c:	b942      	cbnz	r2, 800f3b0 <__swsetup_r+0xa4>
 800f39e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f3a2:	d1c5      	bne.n	800f330 <__swsetup_r+0x24>
 800f3a4:	bd38      	pop	{r3, r4, r5, pc}
 800f3a6:	0799      	lsls	r1, r3, #30
 800f3a8:	bf58      	it	pl
 800f3aa:	6962      	ldrpl	r2, [r4, #20]
 800f3ac:	60a2      	str	r2, [r4, #8]
 800f3ae:	e7f4      	b.n	800f39a <__swsetup_r+0x8e>
 800f3b0:	2000      	movs	r0, #0
 800f3b2:	e7f7      	b.n	800f3a4 <__swsetup_r+0x98>
 800f3b4:	20000540 	.word	0x20000540

0800f3b8 <__swhatbuf_r>:
 800f3b8:	b570      	push	{r4, r5, r6, lr}
 800f3ba:	460c      	mov	r4, r1
 800f3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3c0:	2900      	cmp	r1, #0
 800f3c2:	b096      	sub	sp, #88	@ 0x58
 800f3c4:	4615      	mov	r5, r2
 800f3c6:	461e      	mov	r6, r3
 800f3c8:	da0d      	bge.n	800f3e6 <__swhatbuf_r+0x2e>
 800f3ca:	89a3      	ldrh	r3, [r4, #12]
 800f3cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f3d0:	f04f 0100 	mov.w	r1, #0
 800f3d4:	bf14      	ite	ne
 800f3d6:	2340      	movne	r3, #64	@ 0x40
 800f3d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f3dc:	2000      	movs	r0, #0
 800f3de:	6031      	str	r1, [r6, #0]
 800f3e0:	602b      	str	r3, [r5, #0]
 800f3e2:	b016      	add	sp, #88	@ 0x58
 800f3e4:	bd70      	pop	{r4, r5, r6, pc}
 800f3e6:	466a      	mov	r2, sp
 800f3e8:	f000 f89c 	bl	800f524 <_fstat_r>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	dbec      	blt.n	800f3ca <__swhatbuf_r+0x12>
 800f3f0:	9901      	ldr	r1, [sp, #4]
 800f3f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f3f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f3fa:	4259      	negs	r1, r3
 800f3fc:	4159      	adcs	r1, r3
 800f3fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f402:	e7eb      	b.n	800f3dc <__swhatbuf_r+0x24>

0800f404 <__smakebuf_r>:
 800f404:	898b      	ldrh	r3, [r1, #12]
 800f406:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f408:	079d      	lsls	r5, r3, #30
 800f40a:	4606      	mov	r6, r0
 800f40c:	460c      	mov	r4, r1
 800f40e:	d507      	bpl.n	800f420 <__smakebuf_r+0x1c>
 800f410:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f414:	6023      	str	r3, [r4, #0]
 800f416:	6123      	str	r3, [r4, #16]
 800f418:	2301      	movs	r3, #1
 800f41a:	6163      	str	r3, [r4, #20]
 800f41c:	b003      	add	sp, #12
 800f41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f420:	ab01      	add	r3, sp, #4
 800f422:	466a      	mov	r2, sp
 800f424:	f7ff ffc8 	bl	800f3b8 <__swhatbuf_r>
 800f428:	9f00      	ldr	r7, [sp, #0]
 800f42a:	4605      	mov	r5, r0
 800f42c:	4639      	mov	r1, r7
 800f42e:	4630      	mov	r0, r6
 800f430:	f7fe fd0e 	bl	800de50 <_malloc_r>
 800f434:	b948      	cbnz	r0, 800f44a <__smakebuf_r+0x46>
 800f436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f43a:	059a      	lsls	r2, r3, #22
 800f43c:	d4ee      	bmi.n	800f41c <__smakebuf_r+0x18>
 800f43e:	f023 0303 	bic.w	r3, r3, #3
 800f442:	f043 0302 	orr.w	r3, r3, #2
 800f446:	81a3      	strh	r3, [r4, #12]
 800f448:	e7e2      	b.n	800f410 <__smakebuf_r+0xc>
 800f44a:	89a3      	ldrh	r3, [r4, #12]
 800f44c:	6020      	str	r0, [r4, #0]
 800f44e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f452:	81a3      	strh	r3, [r4, #12]
 800f454:	9b01      	ldr	r3, [sp, #4]
 800f456:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f45a:	b15b      	cbz	r3, 800f474 <__smakebuf_r+0x70>
 800f45c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f460:	4630      	mov	r0, r6
 800f462:	f000 f83b 	bl	800f4dc <_isatty_r>
 800f466:	b128      	cbz	r0, 800f474 <__smakebuf_r+0x70>
 800f468:	89a3      	ldrh	r3, [r4, #12]
 800f46a:	f023 0303 	bic.w	r3, r3, #3
 800f46e:	f043 0301 	orr.w	r3, r3, #1
 800f472:	81a3      	strh	r3, [r4, #12]
 800f474:	89a3      	ldrh	r3, [r4, #12]
 800f476:	431d      	orrs	r5, r3
 800f478:	81a5      	strh	r5, [r4, #12]
 800f47a:	e7cf      	b.n	800f41c <__smakebuf_r+0x18>

0800f47c <_raise_r>:
 800f47c:	291f      	cmp	r1, #31
 800f47e:	b538      	push	{r3, r4, r5, lr}
 800f480:	4605      	mov	r5, r0
 800f482:	460c      	mov	r4, r1
 800f484:	d904      	bls.n	800f490 <_raise_r+0x14>
 800f486:	2316      	movs	r3, #22
 800f488:	6003      	str	r3, [r0, #0]
 800f48a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f48e:	bd38      	pop	{r3, r4, r5, pc}
 800f490:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f492:	b112      	cbz	r2, 800f49a <_raise_r+0x1e>
 800f494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f498:	b94b      	cbnz	r3, 800f4ae <_raise_r+0x32>
 800f49a:	4628      	mov	r0, r5
 800f49c:	f000 f840 	bl	800f520 <_getpid_r>
 800f4a0:	4622      	mov	r2, r4
 800f4a2:	4601      	mov	r1, r0
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4aa:	f000 b827 	b.w	800f4fc <_kill_r>
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d00a      	beq.n	800f4c8 <_raise_r+0x4c>
 800f4b2:	1c59      	adds	r1, r3, #1
 800f4b4:	d103      	bne.n	800f4be <_raise_r+0x42>
 800f4b6:	2316      	movs	r3, #22
 800f4b8:	6003      	str	r3, [r0, #0]
 800f4ba:	2001      	movs	r0, #1
 800f4bc:	e7e7      	b.n	800f48e <_raise_r+0x12>
 800f4be:	2100      	movs	r1, #0
 800f4c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	4798      	blx	r3
 800f4c8:	2000      	movs	r0, #0
 800f4ca:	e7e0      	b.n	800f48e <_raise_r+0x12>

0800f4cc <raise>:
 800f4cc:	4b02      	ldr	r3, [pc, #8]	@ (800f4d8 <raise+0xc>)
 800f4ce:	4601      	mov	r1, r0
 800f4d0:	6818      	ldr	r0, [r3, #0]
 800f4d2:	f7ff bfd3 	b.w	800f47c <_raise_r>
 800f4d6:	bf00      	nop
 800f4d8:	20000540 	.word	0x20000540

0800f4dc <_isatty_r>:
 800f4dc:	b538      	push	{r3, r4, r5, lr}
 800f4de:	4d06      	ldr	r5, [pc, #24]	@ (800f4f8 <_isatty_r+0x1c>)
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	4604      	mov	r4, r0
 800f4e4:	4608      	mov	r0, r1
 800f4e6:	602b      	str	r3, [r5, #0]
 800f4e8:	f7f2 fbb2 	bl	8001c50 <_isatty>
 800f4ec:	1c43      	adds	r3, r0, #1
 800f4ee:	d102      	bne.n	800f4f6 <_isatty_r+0x1a>
 800f4f0:	682b      	ldr	r3, [r5, #0]
 800f4f2:	b103      	cbz	r3, 800f4f6 <_isatty_r+0x1a>
 800f4f4:	6023      	str	r3, [r4, #0]
 800f4f6:	bd38      	pop	{r3, r4, r5, pc}
 800f4f8:	20000d38 	.word	0x20000d38

0800f4fc <_kill_r>:
 800f4fc:	b538      	push	{r3, r4, r5, lr}
 800f4fe:	4d07      	ldr	r5, [pc, #28]	@ (800f51c <_kill_r+0x20>)
 800f500:	2300      	movs	r3, #0
 800f502:	4604      	mov	r4, r0
 800f504:	4608      	mov	r0, r1
 800f506:	4611      	mov	r1, r2
 800f508:	602b      	str	r3, [r5, #0]
 800f50a:	f7f2 fb31 	bl	8001b70 <_kill>
 800f50e:	1c43      	adds	r3, r0, #1
 800f510:	d102      	bne.n	800f518 <_kill_r+0x1c>
 800f512:	682b      	ldr	r3, [r5, #0]
 800f514:	b103      	cbz	r3, 800f518 <_kill_r+0x1c>
 800f516:	6023      	str	r3, [r4, #0]
 800f518:	bd38      	pop	{r3, r4, r5, pc}
 800f51a:	bf00      	nop
 800f51c:	20000d38 	.word	0x20000d38

0800f520 <_getpid_r>:
 800f520:	f7f2 bb1e 	b.w	8001b60 <_getpid>

0800f524 <_fstat_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d07      	ldr	r5, [pc, #28]	@ (800f544 <_fstat_r+0x20>)
 800f528:	2300      	movs	r3, #0
 800f52a:	4604      	mov	r4, r0
 800f52c:	4608      	mov	r0, r1
 800f52e:	4611      	mov	r1, r2
 800f530:	602b      	str	r3, [r5, #0]
 800f532:	f7f2 fb7d 	bl	8001c30 <_fstat>
 800f536:	1c43      	adds	r3, r0, #1
 800f538:	d102      	bne.n	800f540 <_fstat_r+0x1c>
 800f53a:	682b      	ldr	r3, [r5, #0]
 800f53c:	b103      	cbz	r3, 800f540 <_fstat_r+0x1c>
 800f53e:	6023      	str	r3, [r4, #0]
 800f540:	bd38      	pop	{r3, r4, r5, pc}
 800f542:	bf00      	nop
 800f544:	20000d38 	.word	0x20000d38

0800f548 <atan2f>:
 800f548:	f000 b800 	b.w	800f54c <__ieee754_atan2f>

0800f54c <__ieee754_atan2f>:
 800f54c:	ee10 2a90 	vmov	r2, s1
 800f550:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800f554:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f558:	b510      	push	{r4, lr}
 800f55a:	eef0 7a40 	vmov.f32	s15, s0
 800f55e:	d806      	bhi.n	800f56e <__ieee754_atan2f+0x22>
 800f560:	ee10 0a10 	vmov	r0, s0
 800f564:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800f568:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f56c:	d904      	bls.n	800f578 <__ieee754_atan2f+0x2c>
 800f56e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f572:	eeb0 0a67 	vmov.f32	s0, s15
 800f576:	bd10      	pop	{r4, pc}
 800f578:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800f57c:	d103      	bne.n	800f586 <__ieee754_atan2f+0x3a>
 800f57e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f582:	f000 b883 	b.w	800f68c <atanf>
 800f586:	1794      	asrs	r4, r2, #30
 800f588:	f004 0402 	and.w	r4, r4, #2
 800f58c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f590:	b943      	cbnz	r3, 800f5a4 <__ieee754_atan2f+0x58>
 800f592:	2c02      	cmp	r4, #2
 800f594:	d05e      	beq.n	800f654 <__ieee754_atan2f+0x108>
 800f596:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f668 <__ieee754_atan2f+0x11c>
 800f59a:	2c03      	cmp	r4, #3
 800f59c:	bf08      	it	eq
 800f59e:	eef0 7a47 	vmoveq.f32	s15, s14
 800f5a2:	e7e6      	b.n	800f572 <__ieee754_atan2f+0x26>
 800f5a4:	b941      	cbnz	r1, 800f5b8 <__ieee754_atan2f+0x6c>
 800f5a6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800f66c <__ieee754_atan2f+0x120>
 800f5aa:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800f670 <__ieee754_atan2f+0x124>
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	bfa8      	it	ge
 800f5b2:	eef0 7a47 	vmovge.f32	s15, s14
 800f5b6:	e7dc      	b.n	800f572 <__ieee754_atan2f+0x26>
 800f5b8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f5bc:	d110      	bne.n	800f5e0 <__ieee754_atan2f+0x94>
 800f5be:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f5c2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800f5c6:	d107      	bne.n	800f5d8 <__ieee754_atan2f+0x8c>
 800f5c8:	2c02      	cmp	r4, #2
 800f5ca:	d846      	bhi.n	800f65a <__ieee754_atan2f+0x10e>
 800f5cc:	4b29      	ldr	r3, [pc, #164]	@ (800f674 <__ieee754_atan2f+0x128>)
 800f5ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f5d2:	edd3 7a00 	vldr	s15, [r3]
 800f5d6:	e7cc      	b.n	800f572 <__ieee754_atan2f+0x26>
 800f5d8:	2c02      	cmp	r4, #2
 800f5da:	d841      	bhi.n	800f660 <__ieee754_atan2f+0x114>
 800f5dc:	4b26      	ldr	r3, [pc, #152]	@ (800f678 <__ieee754_atan2f+0x12c>)
 800f5de:	e7f6      	b.n	800f5ce <__ieee754_atan2f+0x82>
 800f5e0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f5e4:	d0df      	beq.n	800f5a6 <__ieee754_atan2f+0x5a>
 800f5e6:	1a5b      	subs	r3, r3, r1
 800f5e8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800f5ec:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f5f0:	da1a      	bge.n	800f628 <__ieee754_atan2f+0xdc>
 800f5f2:	2a00      	cmp	r2, #0
 800f5f4:	da01      	bge.n	800f5fa <__ieee754_atan2f+0xae>
 800f5f6:	313c      	adds	r1, #60	@ 0x3c
 800f5f8:	db19      	blt.n	800f62e <__ieee754_atan2f+0xe2>
 800f5fa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f5fe:	f000 f919 	bl	800f834 <fabsf>
 800f602:	f000 f843 	bl	800f68c <atanf>
 800f606:	eef0 7a40 	vmov.f32	s15, s0
 800f60a:	2c01      	cmp	r4, #1
 800f60c:	d012      	beq.n	800f634 <__ieee754_atan2f+0xe8>
 800f60e:	2c02      	cmp	r4, #2
 800f610:	d017      	beq.n	800f642 <__ieee754_atan2f+0xf6>
 800f612:	2c00      	cmp	r4, #0
 800f614:	d0ad      	beq.n	800f572 <__ieee754_atan2f+0x26>
 800f616:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800f67c <__ieee754_atan2f+0x130>
 800f61a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f61e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800f680 <__ieee754_atan2f+0x134>
 800f622:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f626:	e7a4      	b.n	800f572 <__ieee754_atan2f+0x26>
 800f628:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800f670 <__ieee754_atan2f+0x124>
 800f62c:	e7ed      	b.n	800f60a <__ieee754_atan2f+0xbe>
 800f62e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f684 <__ieee754_atan2f+0x138>
 800f632:	e7ea      	b.n	800f60a <__ieee754_atan2f+0xbe>
 800f634:	ee17 3a90 	vmov	r3, s15
 800f638:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f63c:	ee07 3a90 	vmov	s15, r3
 800f640:	e797      	b.n	800f572 <__ieee754_atan2f+0x26>
 800f642:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800f67c <__ieee754_atan2f+0x130>
 800f646:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f64a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800f680 <__ieee754_atan2f+0x134>
 800f64e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f652:	e78e      	b.n	800f572 <__ieee754_atan2f+0x26>
 800f654:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800f680 <__ieee754_atan2f+0x134>
 800f658:	e78b      	b.n	800f572 <__ieee754_atan2f+0x26>
 800f65a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800f688 <__ieee754_atan2f+0x13c>
 800f65e:	e788      	b.n	800f572 <__ieee754_atan2f+0x26>
 800f660:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800f684 <__ieee754_atan2f+0x138>
 800f664:	e785      	b.n	800f572 <__ieee754_atan2f+0x26>
 800f666:	bf00      	nop
 800f668:	c0490fdb 	.word	0xc0490fdb
 800f66c:	bfc90fdb 	.word	0xbfc90fdb
 800f670:	3fc90fdb 	.word	0x3fc90fdb
 800f674:	0800fdbc 	.word	0x0800fdbc
 800f678:	0800fdb0 	.word	0x0800fdb0
 800f67c:	33bbbd2e 	.word	0x33bbbd2e
 800f680:	40490fdb 	.word	0x40490fdb
 800f684:	00000000 	.word	0x00000000
 800f688:	3f490fdb 	.word	0x3f490fdb

0800f68c <atanf>:
 800f68c:	b538      	push	{r3, r4, r5, lr}
 800f68e:	ee10 5a10 	vmov	r5, s0
 800f692:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800f696:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800f69a:	eef0 7a40 	vmov.f32	s15, s0
 800f69e:	d310      	bcc.n	800f6c2 <atanf+0x36>
 800f6a0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800f6a4:	d904      	bls.n	800f6b0 <atanf+0x24>
 800f6a6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f6aa:	eeb0 0a67 	vmov.f32	s0, s15
 800f6ae:	bd38      	pop	{r3, r4, r5, pc}
 800f6b0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800f7e8 <atanf+0x15c>
 800f6b4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800f7ec <atanf+0x160>
 800f6b8:	2d00      	cmp	r5, #0
 800f6ba:	bfc8      	it	gt
 800f6bc:	eef0 7a47 	vmovgt.f32	s15, s14
 800f6c0:	e7f3      	b.n	800f6aa <atanf+0x1e>
 800f6c2:	4b4b      	ldr	r3, [pc, #300]	@ (800f7f0 <atanf+0x164>)
 800f6c4:	429c      	cmp	r4, r3
 800f6c6:	d810      	bhi.n	800f6ea <atanf+0x5e>
 800f6c8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800f6cc:	d20a      	bcs.n	800f6e4 <atanf+0x58>
 800f6ce:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800f7f4 <atanf+0x168>
 800f6d2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f6d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f6da:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e2:	dce2      	bgt.n	800f6aa <atanf+0x1e>
 800f6e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f6e8:	e013      	b.n	800f712 <atanf+0x86>
 800f6ea:	f000 f8a3 	bl	800f834 <fabsf>
 800f6ee:	4b42      	ldr	r3, [pc, #264]	@ (800f7f8 <atanf+0x16c>)
 800f6f0:	429c      	cmp	r4, r3
 800f6f2:	d84f      	bhi.n	800f794 <atanf+0x108>
 800f6f4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800f6f8:	429c      	cmp	r4, r3
 800f6fa:	d841      	bhi.n	800f780 <atanf+0xf4>
 800f6fc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800f700:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f704:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f708:	2300      	movs	r3, #0
 800f70a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f70e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f712:	1c5a      	adds	r2, r3, #1
 800f714:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f718:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800f7fc <atanf+0x170>
 800f71c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800f800 <atanf+0x174>
 800f720:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800f804 <atanf+0x178>
 800f724:	ee66 6a06 	vmul.f32	s13, s12, s12
 800f728:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f72c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800f808 <atanf+0x17c>
 800f730:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f734:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800f80c <atanf+0x180>
 800f738:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f73c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f810 <atanf+0x184>
 800f740:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f744:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800f814 <atanf+0x188>
 800f748:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f74c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800f818 <atanf+0x18c>
 800f750:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f754:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800f81c <atanf+0x190>
 800f758:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f75c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800f820 <atanf+0x194>
 800f760:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f764:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800f824 <atanf+0x198>
 800f768:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f76c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f770:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f774:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f778:	d121      	bne.n	800f7be <atanf+0x132>
 800f77a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f77e:	e794      	b.n	800f6aa <atanf+0x1e>
 800f780:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f784:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f788:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f78c:	2301      	movs	r3, #1
 800f78e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f792:	e7be      	b.n	800f712 <atanf+0x86>
 800f794:	4b24      	ldr	r3, [pc, #144]	@ (800f828 <atanf+0x19c>)
 800f796:	429c      	cmp	r4, r3
 800f798:	d80b      	bhi.n	800f7b2 <atanf+0x126>
 800f79a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800f79e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f7a2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f7a6:	2302      	movs	r3, #2
 800f7a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f7ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7b0:	e7af      	b.n	800f712 <atanf+0x86>
 800f7b2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f7b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f7ba:	2303      	movs	r3, #3
 800f7bc:	e7a9      	b.n	800f712 <atanf+0x86>
 800f7be:	4a1b      	ldr	r2, [pc, #108]	@ (800f82c <atanf+0x1a0>)
 800f7c0:	491b      	ldr	r1, [pc, #108]	@ (800f830 <atanf+0x1a4>)
 800f7c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f7c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f7ca:	edd3 6a00 	vldr	s13, [r3]
 800f7ce:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f7d2:	2d00      	cmp	r5, #0
 800f7d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f7d8:	edd2 7a00 	vldr	s15, [r2]
 800f7dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f7e0:	bfb8      	it	lt
 800f7e2:	eef1 7a67 	vneglt.f32	s15, s15
 800f7e6:	e760      	b.n	800f6aa <atanf+0x1e>
 800f7e8:	bfc90fdb 	.word	0xbfc90fdb
 800f7ec:	3fc90fdb 	.word	0x3fc90fdb
 800f7f0:	3edfffff 	.word	0x3edfffff
 800f7f4:	7149f2ca 	.word	0x7149f2ca
 800f7f8:	3f97ffff 	.word	0x3f97ffff
 800f7fc:	3c8569d7 	.word	0x3c8569d7
 800f800:	3d4bda59 	.word	0x3d4bda59
 800f804:	bd6ef16b 	.word	0xbd6ef16b
 800f808:	3d886b35 	.word	0x3d886b35
 800f80c:	3dba2e6e 	.word	0x3dba2e6e
 800f810:	3e124925 	.word	0x3e124925
 800f814:	3eaaaaab 	.word	0x3eaaaaab
 800f818:	bd15a221 	.word	0xbd15a221
 800f81c:	bd9d8795 	.word	0xbd9d8795
 800f820:	bde38e38 	.word	0xbde38e38
 800f824:	be4ccccd 	.word	0xbe4ccccd
 800f828:	401bffff 	.word	0x401bffff
 800f82c:	0800fdd8 	.word	0x0800fdd8
 800f830:	0800fdc8 	.word	0x0800fdc8

0800f834 <fabsf>:
 800f834:	ee10 3a10 	vmov	r3, s0
 800f838:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f83c:	ee00 3a10 	vmov	s0, r3
 800f840:	4770      	bx	lr
	...

0800f844 <_init>:
 800f844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f846:	bf00      	nop
 800f848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f84a:	bc08      	pop	{r3}
 800f84c:	469e      	mov	lr, r3
 800f84e:	4770      	bx	lr

0800f850 <_fini>:
 800f850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f852:	bf00      	nop
 800f854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f856:	bc08      	pop	{r3}
 800f858:	469e      	mov	lr, r3
 800f85a:	4770      	bx	lr
