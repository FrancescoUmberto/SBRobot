
self-balancing-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800c678  0800c678  0000d678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb1c  0800cb1c  0000e590  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cb1c  0800cb1c  0000db1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb24  0800cb24  0000e590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb24  0800cb24  0000db24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb28  0800cb28  0000db28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000590  20000000  0800cb2c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000744  20000590  0800d0bc  0000e590  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cd4  0800d0bc  0000ecd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e590  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c039  00000000  00000000  0000e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000460f  00000000  00000000  0002a5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  0002ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001182  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027caa  00000000  00000000  000313f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ffb2  00000000  00000000  0005909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e54b4  00000000  00000000  0007904e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e14  00000000  00000000  0015e548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0016535c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000590 	.word	0x20000590
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c660 	.word	0x0800c660

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000594 	.word	0x20000594
 800020c:	0800c660 	.word	0x0800c660

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f000 b988 	b.w	8001010 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	468e      	mov	lr, r1
 8000d20:	4604      	mov	r4, r0
 8000d22:	4688      	mov	r8, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d14a      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4617      	mov	r7, r2
 8000d2c:	d962      	bls.n	8000df4 <__udivmoddi4+0xdc>
 8000d2e:	fab2 f682 	clz	r6, r2
 8000d32:	b14e      	cbz	r6, 8000d48 <__udivmoddi4+0x30>
 8000d34:	f1c6 0320 	rsb	r3, r6, #32
 8000d38:	fa01 f806 	lsl.w	r8, r1, r6
 8000d3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d40:	40b7      	lsls	r7, r6
 8000d42:	ea43 0808 	orr.w	r8, r3, r8
 8000d46:	40b4      	lsls	r4, r6
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d54:	0c23      	lsrs	r3, r4, #16
 8000d56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x62>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d6c:	f080 80ea 	bcs.w	8000f44 <__udivmoddi4+0x22c>
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f240 80e7 	bls.w	8000f44 <__udivmoddi4+0x22c>
 8000d76:	3902      	subs	r1, #2
 8000d78:	443b      	add	r3, r7
 8000d7a:	1a9a      	subs	r2, r3, r2
 8000d7c:	b2a3      	uxth	r3, r4
 8000d7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d8e:	459c      	cmp	ip, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x8e>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d98:	f080 80d6 	bcs.w	8000f48 <__udivmoddi4+0x230>
 8000d9c:	459c      	cmp	ip, r3
 8000d9e:	f240 80d3 	bls.w	8000f48 <__udivmoddi4+0x230>
 8000da2:	443b      	add	r3, r7
 8000da4:	3802      	subs	r0, #2
 8000da6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000daa:	eba3 030c 	sub.w	r3, r3, ip
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11d      	cbz	r5, 8000dba <__udivmoddi4+0xa2>
 8000db2:	40f3      	lsrs	r3, r6
 8000db4:	2200      	movs	r2, #0
 8000db6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d905      	bls.n	8000dce <__udivmoddi4+0xb6>
 8000dc2:	b10d      	cbz	r5, 8000dc8 <__udivmoddi4+0xb0>
 8000dc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e7f5      	b.n	8000dba <__udivmoddi4+0xa2>
 8000dce:	fab3 f183 	clz	r1, r3
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d146      	bne.n	8000e64 <__udivmoddi4+0x14c>
 8000dd6:	4573      	cmp	r3, lr
 8000dd8:	d302      	bcc.n	8000de0 <__udivmoddi4+0xc8>
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	f200 8105 	bhi.w	8000fea <__udivmoddi4+0x2d2>
 8000de0:	1a84      	subs	r4, r0, r2
 8000de2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	4690      	mov	r8, r2
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d0e5      	beq.n	8000dba <__udivmoddi4+0xa2>
 8000dee:	e9c5 4800 	strd	r4, r8, [r5]
 8000df2:	e7e2      	b.n	8000dba <__udivmoddi4+0xa2>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f000 8090 	beq.w	8000f1a <__udivmoddi4+0x202>
 8000dfa:	fab2 f682 	clz	r6, r2
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f040 80a4 	bne.w	8000f4c <__udivmoddi4+0x234>
 8000e04:	1a8a      	subs	r2, r1, r2
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	b280      	uxth	r0, r0
 8000e0e:	b2bc      	uxth	r4, r7
 8000e10:	2101      	movs	r1, #1
 8000e12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x11e>
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x11c>
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	f200 80e0 	bhi.w	8000ff4 <__udivmoddi4+0x2dc>
 8000e34:	46c4      	mov	ip, r8
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e44:	fb02 f404 	mul.w	r4, r2, r4
 8000e48:	429c      	cmp	r4, r3
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x144>
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x142>
 8000e54:	429c      	cmp	r4, r3
 8000e56:	f200 80ca 	bhi.w	8000fee <__udivmoddi4+0x2d6>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	1b1b      	subs	r3, r3, r4
 8000e5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e62:	e7a5      	b.n	8000db0 <__udivmoddi4+0x98>
 8000e64:	f1c1 0620 	rsb	r6, r1, #32
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	fa0e f401 	lsl.w	r4, lr, r1
 8000e74:	fa20 f306 	lsr.w	r3, r0, r6
 8000e78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e80:	4323      	orrs	r3, r4
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	fa1f fc87 	uxth.w	ip, r7
 8000e8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e8e:	0c1c      	lsrs	r4, r3, #16
 8000e90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea2:	d909      	bls.n	8000eb8 <__udivmoddi4+0x1a0>
 8000ea4:	193c      	adds	r4, r7, r4
 8000ea6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eaa:	f080 809c 	bcs.w	8000fe6 <__udivmoddi4+0x2ce>
 8000eae:	45a6      	cmp	lr, r4
 8000eb0:	f240 8099 	bls.w	8000fe6 <__udivmoddi4+0x2ce>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	eba4 040e 	sub.w	r4, r4, lr
 8000ebc:	fa1f fe83 	uxth.w	lr, r3
 8000ec0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ecc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed0:	45a4      	cmp	ip, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x1ce>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000eda:	f080 8082 	bcs.w	8000fe2 <__udivmoddi4+0x2ca>
 8000ede:	45a4      	cmp	ip, r4
 8000ee0:	d97f      	bls.n	8000fe2 <__udivmoddi4+0x2ca>
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	443c      	add	r4, r7
 8000ee6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eea:	eba4 040c 	sub.w	r4, r4, ip
 8000eee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ef2:	4564      	cmp	r4, ip
 8000ef4:	4673      	mov	r3, lr
 8000ef6:	46e1      	mov	r9, ip
 8000ef8:	d362      	bcc.n	8000fc0 <__udivmoddi4+0x2a8>
 8000efa:	d05f      	beq.n	8000fbc <__udivmoddi4+0x2a4>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x1fe>
 8000efe:	ebb8 0203 	subs.w	r2, r8, r3
 8000f02:	eb64 0409 	sbc.w	r4, r4, r9
 8000f06:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f0e:	431e      	orrs	r6, r3
 8000f10:	40cc      	lsrs	r4, r1
 8000f12:	e9c5 6400 	strd	r6, r4, [r5]
 8000f16:	2100      	movs	r1, #0
 8000f18:	e74f      	b.n	8000dba <__udivmoddi4+0xa2>
 8000f1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f1e:	0c01      	lsrs	r1, r0, #16
 8000f20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f24:	b280      	uxth	r0, r0
 8000f26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	463c      	mov	r4, r7
 8000f30:	46b8      	mov	r8, r7
 8000f32:	46be      	mov	lr, r7
 8000f34:	2620      	movs	r6, #32
 8000f36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f3a:	eba2 0208 	sub.w	r2, r2, r8
 8000f3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f42:	e766      	b.n	8000e12 <__udivmoddi4+0xfa>
 8000f44:	4601      	mov	r1, r0
 8000f46:	e718      	b.n	8000d7a <__udivmoddi4+0x62>
 8000f48:	4610      	mov	r0, r2
 8000f4a:	e72c      	b.n	8000da6 <__udivmoddi4+0x8e>
 8000f4c:	f1c6 0220 	rsb	r2, r6, #32
 8000f50:	fa2e f302 	lsr.w	r3, lr, r2
 8000f54:	40b7      	lsls	r7, r6
 8000f56:	40b1      	lsls	r1, r6
 8000f58:	fa20 f202 	lsr.w	r2, r0, r2
 8000f5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f60:	430a      	orrs	r2, r1
 8000f62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f66:	b2bc      	uxth	r4, r7
 8000f68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f6c:	0c11      	lsrs	r1, r2, #16
 8000f6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f72:	fb08 f904 	mul.w	r9, r8, r4
 8000f76:	40b0      	lsls	r0, r6
 8000f78:	4589      	cmp	r9, r1
 8000f7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f7e:	b280      	uxth	r0, r0
 8000f80:	d93e      	bls.n	8001000 <__udivmoddi4+0x2e8>
 8000f82:	1879      	adds	r1, r7, r1
 8000f84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f88:	d201      	bcs.n	8000f8e <__udivmoddi4+0x276>
 8000f8a:	4589      	cmp	r9, r1
 8000f8c:	d81f      	bhi.n	8000fce <__udivmoddi4+0x2b6>
 8000f8e:	eba1 0109 	sub.w	r1, r1, r9
 8000f92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f96:	fb09 f804 	mul.w	r8, r9, r4
 8000f9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa4:	4542      	cmp	r2, r8
 8000fa6:	d229      	bcs.n	8000ffc <__udivmoddi4+0x2e4>
 8000fa8:	18ba      	adds	r2, r7, r2
 8000faa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fae:	d2c4      	bcs.n	8000f3a <__udivmoddi4+0x222>
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d2c2      	bcs.n	8000f3a <__udivmoddi4+0x222>
 8000fb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fb8:	443a      	add	r2, r7
 8000fba:	e7be      	b.n	8000f3a <__udivmoddi4+0x222>
 8000fbc:	45f0      	cmp	r8, lr
 8000fbe:	d29d      	bcs.n	8000efc <__udivmoddi4+0x1e4>
 8000fc0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fc4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fc8:	3801      	subs	r0, #1
 8000fca:	46e1      	mov	r9, ip
 8000fcc:	e796      	b.n	8000efc <__udivmoddi4+0x1e4>
 8000fce:	eba7 0909 	sub.w	r9, r7, r9
 8000fd2:	4449      	add	r1, r9
 8000fd4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fd8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fdc:	fb09 f804 	mul.w	r8, r9, r4
 8000fe0:	e7db      	b.n	8000f9a <__udivmoddi4+0x282>
 8000fe2:	4673      	mov	r3, lr
 8000fe4:	e77f      	b.n	8000ee6 <__udivmoddi4+0x1ce>
 8000fe6:	4650      	mov	r0, sl
 8000fe8:	e766      	b.n	8000eb8 <__udivmoddi4+0x1a0>
 8000fea:	4608      	mov	r0, r1
 8000fec:	e6fd      	b.n	8000dea <__udivmoddi4+0xd2>
 8000fee:	443b      	add	r3, r7
 8000ff0:	3a02      	subs	r2, #2
 8000ff2:	e733      	b.n	8000e5c <__udivmoddi4+0x144>
 8000ff4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff8:	443b      	add	r3, r7
 8000ffa:	e71c      	b.n	8000e36 <__udivmoddi4+0x11e>
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	e79c      	b.n	8000f3a <__udivmoddi4+0x222>
 8001000:	eba1 0109 	sub.w	r1, r1, r9
 8001004:	46c4      	mov	ip, r8
 8001006:	fbb1 f9fe 	udiv	r9, r1, lr
 800100a:	fb09 f804 	mul.w	r8, r9, r4
 800100e:	e7c4      	b.n	8000f9a <__udivmoddi4+0x282>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001026:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001028:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <MX_ADC1_Init+0x9c>)
 800102a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800102c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <MX_ADC1_Init+0x98>)
 800102e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001032:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001034:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800103a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_ADC1_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001056:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <MX_ADC1_Init+0xa0>)
 8001058:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_ADC1_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001062:	2201      	movs	r2, #1
 8001064:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001070:	2201      	movs	r2, #1
 8001072:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001076:	f003 fa1d 	bl	80044b4 <HAL_ADC_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001080:	f000 fba9 	bl	80017d6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001084:	2309      	movs	r3, #9
 8001086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001088:	2301      	movs	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001096:	f003 fbef 	bl	8004878 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010a0:	f000 fb99 	bl	80017d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200005ac 	.word	0x200005ac
 80010b0:	40012000 	.word	0x40012000
 80010b4:	0f000001 	.word	0x0f000001

080010b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <HAL_ADC_MspInit+0x7c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d127      	bne.n	800112a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	4a15      	ldr	r2, [pc, #84]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 8001112:	2302      	movs	r3, #2
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001116:	2303      	movs	r3, #3
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	@ (800113c <HAL_ADC_MspInit+0x84>)
 8001126:	f004 fa85 	bl	8005634 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	@ 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40012000 	.word	0x40012000
 8001138:	40023800 	.word	0x40023800
 800113c:	40020400 	.word	0x40020400

08001140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_DMA_Init+0x3c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <MX_DMA_Init+0x3c>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_DMA_Init+0x3c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	200b      	movs	r0, #11
 8001168:	f003 fe8f 	bl	8004e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800116c:	200b      	movs	r0, #11
 800116e:	f003 fea8 	bl	8004ec2 <HAL_NVIC_EnableIRQ>

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b73      	ldr	r3, [pc, #460]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a72      	ldr	r2, [pc, #456]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b70      	ldr	r3, [pc, #448]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a6b      	ldr	r2, [pc, #428]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b69      	ldr	r3, [pc, #420]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b65      	ldr	r3, [pc, #404]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a64      	ldr	r2, [pc, #400]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b62      	ldr	r3, [pc, #392]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a5d      	ldr	r2, [pc, #372]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b57      	ldr	r3, [pc, #348]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a56      	ldr	r2, [pc, #344]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b54      	ldr	r3, [pc, #336]	@ (8001368 <MX_GPIO_Init+0x1e8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2130      	movs	r1, #48	@ 0x30
 8001226:	4851      	ldr	r0, [pc, #324]	@ (800136c <MX_GPIO_Init+0x1ec>)
 8001228:	f004 fbb0 	bl	800598c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_DIR_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2111      	movs	r1, #17
 8001230:	484f      	ldr	r0, [pc, #316]	@ (8001370 <MX_GPIO_Init+0x1f0>)
 8001232:	f004 fbab 	bl	800598c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BTN2_GPIO_Port, LED_BTN2_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800123c:	484d      	ldr	r0, [pc, #308]	@ (8001374 <MX_GPIO_Init+0x1f4>)
 800123e:	f004 fba5 	bl	800598c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001242:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001248:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4846      	ldr	r0, [pc, #280]	@ (8001374 <MX_GPIO_Init+0x1f4>)
 800125a:	f004 f9eb 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC6 PC7 PC8 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800125e:	f641 53dd 	movw	r3, #7645	@ 0x1ddd
 8001262:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001264:	2303      	movs	r3, #3
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4840      	ldr	r0, [pc, #256]	@ (8001374 <MX_GPIO_Init+0x1f4>)
 8001274:	f004 f9de 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_DIR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|LD2_Pin;
 8001278:	2330      	movs	r3, #48	@ 0x30
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4837      	ldr	r0, [pc, #220]	@ (800136c <MX_GPIO_Init+0x1ec>)
 8001290:	f004 f9d0 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8001294:	2320      	movs	r3, #32
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001298:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4832      	ldr	r0, [pc, #200]	@ (8001374 <MX_GPIO_Init+0x1f4>)
 80012aa:	f004 f9c3 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 80012ae:	2301      	movs	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	482a      	ldr	r0, [pc, #168]	@ (8001370 <MX_GPIO_Init+0x1f0>)
 80012c6:	f004 f9b5 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80012ca:	f24f 0324 	movw	r3, #61476	@ 0xf024
 80012ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4824      	ldr	r0, [pc, #144]	@ (8001370 <MX_GPIO_Init+0x1f0>)
 80012e0:	f004 f9a8 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BTN2_Pin */
  GPIO_InitStruct.Pin = LED_BTN2_Pin;
 80012e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BTN2_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	481d      	ldr	r0, [pc, #116]	@ (8001374 <MX_GPIO_Init+0x1f4>)
 80012fe:	f004 f999 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001302:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 8001306:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001308:	2303      	movs	r3, #3
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4815      	ldr	r0, [pc, #84]	@ (800136c <MX_GPIO_Init+0x1ec>)
 8001318:	f004 f98c 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800131c:	2304      	movs	r3, #4
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001320:	2303      	movs	r3, #3
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4812      	ldr	r0, [pc, #72]	@ (8001378 <MX_GPIO_Init+0x1f8>)
 8001330:	f004 f980 	bl	8005634 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8001334:	2310      	movs	r3, #16
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4809      	ldr	r0, [pc, #36]	@ (8001370 <MX_GPIO_Init+0x1f0>)
 800134c:	f004 f972 	bl	8005634 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2017      	movs	r0, #23
 8001356:	f003 fd98 	bl	8004e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800135a:	2017      	movs	r0, #23
 800135c:	f003 fdb1 	bl	8004ec2 <HAL_NVIC_EnableIRQ>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	@ 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00

0800137c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_I2C1_Init+0x50>)
 8001382:	4a13      	ldr	r2, [pc, #76]	@ (80013d0 <MX_I2C1_Init+0x54>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_I2C1_Init+0x50>)
 8001388:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <MX_I2C1_Init+0x58>)
 800138a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_I2C1_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_I2C1_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_I2C1_Init+0x50>)
 800139a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800139e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_I2C1_Init+0x50>)
 80013ba:	f004 fb33 	bl	8005a24 <HAL_I2C_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013c4:	f000 fa07 	bl	80017d6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200005f4 	.word	0x200005f4
 80013d0:	40005400 	.word	0x40005400
 80013d4:	000186a0 	.word	0x000186a0

080013d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a30      	ldr	r2, [pc, #192]	@ (80014b8 <HAL_I2C_MspInit+0xe0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d15a      	bne.n	80014b0 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b2f      	ldr	r3, [pc, #188]	@ (80014bc <HAL_I2C_MspInit+0xe4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a2e      	ldr	r2, [pc, #184]	@ (80014bc <HAL_I2C_MspInit+0xe4>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <HAL_I2C_MspInit+0xe4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8001416:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141c:	2312      	movs	r3, #18
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001428:	2304      	movs	r3, #4
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4823      	ldr	r0, [pc, #140]	@ (80014c0 <HAL_I2C_MspInit+0xe8>)
 8001434:	f004 f8fe 	bl	8005634 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <HAL_I2C_MspInit+0xe4>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	4a1e      	ldr	r2, [pc, #120]	@ (80014bc <HAL_I2C_MspInit+0xe4>)
 8001442:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001446:	6413      	str	r3, [r2, #64]	@ 0x40
 8001448:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <HAL_I2C_MspInit+0xe4>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001456:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <HAL_I2C_MspInit+0xf0>)
 8001458:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 800145c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001460:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001462:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001470:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001474:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001484:	2200      	movs	r2, #0
 8001486:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001488:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800148e:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001494:	480b      	ldr	r0, [pc, #44]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 8001496:	f003 fd2f 	bl	8004ef8 <HAL_DMA_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80014a0:	f000 f999 	bl	80017d6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a07      	ldr	r2, [pc, #28]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 80014a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80014aa:	4a06      	ldr	r2, [pc, #24]	@ (80014c4 <HAL_I2C_MspInit+0xec>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	@ 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40005400 	.word	0x40005400
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020400 	.word	0x40020400
 80014c4:	20000648 	.word	0x20000648
 80014c8:	40026010 	.word	0x40026010

080014cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80014ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00b      	beq.n	800150c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014f4:	e000      	b.n	80014f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f9      	beq.n	80014f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001502:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800150c:	687b      	ldr	r3, [r7, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001522:	f002 ff31 	bl	8004388 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001526:	f000 f875 	bl	8001614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152a:	f7ff fe29 	bl	8001180 <MX_GPIO_Init>
  MX_DMA_Init();
 800152e:	f7ff fe07 	bl	8001140 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001532:	f000 feb7 	bl	80022a4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001536:	f000 fc01 	bl	8001d3c <MX_TIM4_Init>
  MX_TIM6_Init();
 800153a:	f000 fcad 	bl	8001e98 <MX_TIM6_Init>
  MX_SPI2_Init();
 800153e:	f000 f951 	bl	80017e4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001542:	f000 fb4f 	bl	8001be4 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001546:	f000 fcdd 	bl	8001f04 <MX_TIM7_Init>
  MX_TIM3_Init();
 800154a:	f000 fba3 	bl	8001c94 <MX_TIM3_Init>
  MX_TIM5_Init();
 800154e:	f000 fc49 	bl	8001de4 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001552:	f7ff fd5f 	bl	8001014 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001556:	f7ff ff11 	bl	800137c <MX_I2C1_Init>
  MX_TIM10_Init();
 800155a:	f000 fd09 	bl	8001f70 <MX_TIM10_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(50);
 800155e:	2032      	movs	r0, #50	@ 0x32
 8001560:	f002 ff84 	bl	800446c <HAL_Delay>
  Robot_init(&robot);
 8001564:	4823      	ldr	r0, [pc, #140]	@ (80015f4 <main+0xd8>)
 8001566:	f001 fb65 	bl	8002c34 <Robot_init>
//  MAX72_Add_Data(&display, &data);

//  display_data_t data2 = {&encoder_l.speed, PRINT_FLOAT, MINIDIGITS, DISPLAY_TYPE_FLOAT, 3};
//  MAX72_Add_Data(&display, &data2);

  display_data_t data3 = {&imu.angle, PRINT_FLOAT, FLOAT, DISPLAY_TYPE_FLOAT, 2};
 800156a:	4a23      	ldr	r2, [pc, #140]	@ (80015f8 <main+0xdc>)
 800156c:	463b      	mov	r3, r7
 800156e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001572:	e883 0003 	stmia.w	r3, {r0, r1}
  MAX72_Add_Data(&display, &data3);
 8001576:	463b      	mov	r3, r7
 8001578:	4619      	mov	r1, r3
 800157a:	4820      	ldr	r0, [pc, #128]	@ (80015fc <main+0xe0>)
 800157c:	f001 fef5 	bl	800336a <MAX72_Add_Data>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (IMU_Rx_Cplt) {
 8001580:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <main+0xe4>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <main+0x78>
		  IMU_Rx_Cplt = 0; // Reset flag
 8001588:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <main+0xe4>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
		  IMU_Compute_Data(&imu); // Process received data
 800158e:	481d      	ldr	r0, [pc, #116]	@ (8001604 <main+0xe8>)
 8001590:	f001 f892 	bl	80026b8 <IMU_Compute_Data>
	  }

	  static uint8_t last_cnt = 255;
	  if (last_cnt != tim6_update_cnt) { // Update every 100ms
 8001594:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <main+0xec>)
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <main+0xf0>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d0ef      	beq.n	8001580 <main+0x64>
	      last_cnt = tim6_update_cnt;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <main+0xf0>)
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <main+0xec>)
 80015a6:	701a      	strb	r2, [r3, #0]

	      //TODO Activate
//	      PowerModule_update_data(&power_module);

	      MAX72_Update_Data(&display);
 80015a8:	4814      	ldr	r0, [pc, #80]	@ (80015fc <main+0xe0>)
 80015aa:	f001 ff09 	bl	80033c0 <MAX72_Update_Data>
	      if (tim6_update_cnt % 5 == 0) { // Update every 500ms
 80015ae:	4b17      	ldr	r3, [pc, #92]	@ (800160c <main+0xf0>)
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <main+0xf4>)
 80015b4:	fba3 1302 	umull	r1, r3, r3, r2
 80015b8:	0899      	lsrs	r1, r3, #2
 80015ba:	460b      	mov	r3, r1
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d111      	bne.n	80015ec <main+0xd0>

	    	  // Send IMU data via UART for debugging
//	    	  transmit_IMU_data();
//			  show_calibration_messages();

	    	  if (tim6_update_cnt % 10 == 0) { // Every 1 second
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <main+0xf0>)
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <main+0xf4>)
 80015ce:	fba3 1302 	umull	r1, r3, r3, r2
 80015d2:	08d9      	lsrs	r1, r3, #3
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d103      	bne.n	80015ec <main+0xd0>
	    		  MAX72_Change_Data(&display,0);
 80015e4:	2100      	movs	r1, #0
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <main+0xe0>)
 80015e8:	f001 ffea 	bl	80035c0 <MAX72_Change_Data>
	    	  }
	      }

	      MAX72_Scroll_Process(); // Process scrolling text
 80015ec:	f002 fd0e 	bl	800400c <MAX72_Scroll_Process>
  {
 80015f0:	e7c6      	b.n	8001580 <main+0x64>
 80015f2:	bf00      	nop
 80015f4:	200006ac 	.word	0x200006ac
 80015f8:	0800c700 	.word	0x0800c700
 80015fc:	20000b08 	.word	0x20000b08
 8001600:	200006a9 	.word	0x200006a9
 8001604:	200009e0 	.word	0x200009e0
 8001608:	20000000 	.word	0x20000000
 800160c:	200006a8 	.word	0x200006a8
 8001610:	cccccccd 	.word	0xcccccccd

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b094      	sub	sp, #80	@ 0x50
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	2234      	movs	r2, #52	@ 0x34
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f008 fdcf 	bl	800a1c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	4b2a      	ldr	r3, [pc, #168]	@ (80016e8 <SystemClock_Config+0xd4>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	4a29      	ldr	r2, [pc, #164]	@ (80016e8 <SystemClock_Config+0xd4>)
 8001642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001646:	6413      	str	r3, [r2, #64]	@ 0x40
 8001648:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <SystemClock_Config+0xd4>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001654:	2300      	movs	r3, #0
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <SystemClock_Config+0xd8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001660:	4a22      	ldr	r2, [pc, #136]	@ (80016ec <SystemClock_Config+0xd8>)
 8001662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b20      	ldr	r3, [pc, #128]	@ (80016ec <SystemClock_Config+0xd8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001674:	2302      	movs	r3, #2
 8001676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001678:	2301      	movs	r3, #1
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800167c:	2310      	movs	r3, #16
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001680:	2302      	movs	r3, #2
 8001682:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001684:	2300      	movs	r3, #0
 8001686:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001688:	2310      	movs	r3, #16
 800168a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800168c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001690:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001692:	2304      	movs	r3, #4
 8001694:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001696:	2302      	movs	r3, #2
 8001698:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800169a:	2302      	movs	r3, #2
 800169c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4618      	mov	r0, r3
 80016a4:	f006 f800 	bl	80076a8 <HAL_RCC_OscConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016ae:	f000 f892 	bl	80017d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b2:	230f      	movs	r3, #15
 80016b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b6:	2302      	movs	r3, #2
 80016b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	2102      	movs	r1, #2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f005 fca0 	bl	8007014 <HAL_RCC_ClockConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80016da:	f000 f87c 	bl	80017d6 <Error_Handler>
  }
}
 80016de:	bf00      	nop
 80016e0:	3750      	adds	r7, #80	@ 0x50
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40007000 	.word	0x40007000

080016f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a15      	ldr	r2, [pc, #84]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d10d      	bne.n	800171e <HAL_TIM_PeriodElapsedCallback+0x2e>
		tim6_update_cnt++;
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800170c:	701a      	strb	r2, [r3, #0]
		if (tim6_update_cnt == 250){
 800170e:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2bfa      	cmp	r3, #250	@ 0xfa
 8001714:	d11a      	bne.n	800174c <HAL_TIM_PeriodElapsedCallback+0x5c>
			tim6_update_cnt = 0;
 8001716:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
		speed_control(&stepper_l);
	} else if (htim->Instance == TIM10){
		// Read from IMU
		IMU_ReadData(&imu);
	}
}
 800171c:	e016      	b.n	800174c <HAL_TIM_PeriodElapsedCallback+0x5c>
	} else if (htim->Instance == TIM7) {
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d109      	bne.n	800173c <HAL_TIM_PeriodElapsedCallback+0x4c>
		PID_Update(&pid);
 8001728:	480d      	ldr	r0, [pc, #52]	@ (8001760 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800172a:	f001 fb45 	bl	8002db8 <PID_Update>
		speed_control(&stepper_r);
 800172e:	480d      	ldr	r0, [pc, #52]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001730:	f001 fbe8 	bl	8002f04 <speed_control>
		speed_control(&stepper_l);
 8001734:	480c      	ldr	r0, [pc, #48]	@ (8001768 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001736:	f001 fbe5 	bl	8002f04 <speed_control>
}
 800173a:	e007      	b.n	800174c <HAL_TIM_PeriodElapsedCallback+0x5c>
	} else if (htim->Instance == TIM10){
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d102      	bne.n	800174c <HAL_TIM_PeriodElapsedCallback+0x5c>
		IMU_ReadData(&imu);
 8001746:	480a      	ldr	r0, [pc, #40]	@ (8001770 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001748:	f000 ff9f 	bl	800268a <IMU_ReadData>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40001000 	.word	0x40001000
 8001758:	200006a8 	.word	0x200006a8
 800175c:	40001400 	.word	0x40001400
 8001760:	20000ad0 	.word	0x20000ad0
 8001764:	20000984 	.word	0x20000984
 8001768:	200009bc 	.word	0x200009bc
 800176c:	40014400 	.word	0x40014400
 8001770:	200009e0 	.word	0x200009e0

08001774 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_5) {
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	2b20      	cmp	r3, #32
 8001782:	d101      	bne.n	8001788 <HAL_GPIO_EXTI_Callback+0x14>
    on_click();
 8001784:	f000 fe00 	bl	8002388 <on_click>
  }
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	if (hi2c == imu.hi2c) {
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <HAL_I2C_MemRxCpltCallback+0x24>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d102      	bne.n	80017a8 <HAL_I2C_MemRxCpltCallback+0x18>
		// Data received from IMU, process it
		IMU_Rx_Cplt = 1; // Set flag to indicate data is ready
 80017a2:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_I2C_MemRxCpltCallback+0x28>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
	}
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	200009e0 	.word	0x200009e0
 80017b8:	200006a9 	.word	0x200006a9

080017bc <__io_putchar>:

int __io_putchar(int ch){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fe80 	bl	80014cc <ITM_SendChar>
	return ch;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017da:	b672      	cpsid	i
}
 80017dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017de:	bf00      	nop
 80017e0:	e7fd      	b.n	80017de <Error_Handler+0x8>
	...

080017e4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <MX_SPI2_Init+0x68>)
 80017ea:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <MX_SPI2_Init+0x6c>)
 80017ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ee:	4b17      	ldr	r3, [pc, #92]	@ (800184c <MX_SPI2_Init+0x68>)
 80017f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <MX_SPI2_Init+0x68>)
 80017f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017fc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017fe:	4b13      	ldr	r3, [pc, #76]	@ (800184c <MX_SPI2_Init+0x68>)
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <MX_SPI2_Init+0x68>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800180a:	4b10      	ldr	r3, [pc, #64]	@ (800184c <MX_SPI2_Init+0x68>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001810:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <MX_SPI2_Init+0x68>)
 8001812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001816:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_SPI2_Init+0x68>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <MX_SPI2_Init+0x68>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_SPI2_Init+0x68>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	@ (800184c <MX_SPI2_Init+0x68>)
 800182c:	2200      	movs	r2, #0
 800182e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <MX_SPI2_Init+0x68>)
 8001832:	220a      	movs	r2, #10
 8001834:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_SPI2_Init+0x68>)
 8001838:	f006 f9d4 	bl	8007be4 <HAL_SPI_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001842:	f7ff ffc8 	bl	80017d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200006c4 	.word	0x200006c4
 8001850:	40003800 	.word	0x40003800

08001854 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	@ 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a28      	ldr	r2, [pc, #160]	@ (8001914 <HAL_SPI_MspInit+0xc0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d14a      	bne.n	800190c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <HAL_SPI_MspInit+0xc4>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	4a26      	ldr	r2, [pc, #152]	@ (8001918 <HAL_SPI_MspInit+0xc4>)
 8001880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001884:	6413      	str	r3, [r2, #64]	@ 0x40
 8001886:	4b24      	ldr	r3, [pc, #144]	@ (8001918 <HAL_SPI_MspInit+0xc4>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <HAL_SPI_MspInit+0xc4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a1f      	ldr	r2, [pc, #124]	@ (8001918 <HAL_SPI_MspInit+0xc4>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <HAL_SPI_MspInit+0xc4>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <HAL_SPI_MspInit+0xc4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a18      	ldr	r2, [pc, #96]	@ (8001918 <HAL_SPI_MspInit+0xc4>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <HAL_SPI_MspInit+0xc4>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018ca:	2302      	movs	r3, #2
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80018da:	2307      	movs	r3, #7
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	480d      	ldr	r0, [pc, #52]	@ (800191c <HAL_SPI_MspInit+0xc8>)
 80018e6:	f003 fea5 	bl	8005634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 80018ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018fc:	2305      	movs	r3, #5
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4806      	ldr	r0, [pc, #24]	@ (8001920 <HAL_SPI_MspInit+0xcc>)
 8001908:	f003 fe94 	bl	8005634 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	@ 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40003800 	.word	0x40003800
 8001918:	40023800 	.word	0x40023800
 800191c:	40020800 	.word	0x40020800
 8001920:	40020400 	.word	0x40020400

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	4a0f      	ldr	r2, [pc, #60]	@ (8001970 <HAL_MspInit+0x4c>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001938:	6453      	str	r3, [r2, #68]	@ 0x44
 800193a:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <HAL_MspInit+0x4c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_MspInit+0x4c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001962:	2007      	movs	r0, #7
 8001964:	f003 fa86 	bl	8004e74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <NMI_Handler+0x4>

0800197c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <MemManage_Handler+0x4>

0800198c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <BusFault_Handler+0x4>

08001994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <UsageFault_Handler+0x4>

0800199c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ca:	f002 fd2f 	bl	800442c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <DMA1_Stream0_IRQHandler+0x10>)
 80019da:	f003 fbb5 	bl	8005148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000648 	.word	0x20000648

080019e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 80019ec:	2020      	movs	r0, #32
 80019ee:	f004 f801 	bl	80059f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80019fc:	4802      	ldr	r0, [pc, #8]	@ (8001a08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019fe:	f006 fea7 	bl	8008750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200008d0 	.word	0x200008d0

08001a0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <TIM6_DAC_IRQHandler+0x10>)
 8001a12:	f006 fe9d 	bl	8008750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000840 	.word	0x20000840

08001a20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <TIM7_IRQHandler+0x10>)
 8001a26:	f006 fe93 	bl	8008750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000888 	.word	0x20000888

08001a34 <_getpid>:
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	2301      	movs	r3, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_kill>:
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	f008 fc0d 	bl	800a26c <__errno>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2216      	movs	r2, #22
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_exit>:
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ffe7 	bl	8001a44 <_kill>
 8001a76:	bf00      	nop
 8001a78:	e7fd      	b.n	8001a76 <_exit+0x12>

08001a7a <_read>:
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e00a      	b.n	8001aa2 <_read+0x28>
 8001a8c:	f3af 8000 	nop.w
 8001a90:	4601      	mov	r1, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	60ba      	str	r2, [r7, #8]
 8001a98:	b2ca      	uxtb	r2, r1
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dbf0      	blt.n	8001a8c <_read+0x12>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_write>:
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e009      	b.n	8001ada <_write+0x26>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	60ba      	str	r2, [r7, #8]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fe74 	bl	80017bc <__io_putchar>
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	dbf1      	blt.n	8001ac6 <_write+0x12>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_close>:
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_fstat>:
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	2300      	movs	r3, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_isatty>:
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_lseek>:
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	2300      	movs	r3, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_sbrk>:
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	4a14      	ldr	r2, [pc, #80]	@ (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	@ (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
 8001b84:	f008 fb72 	bl	800a26c <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
 8001b94:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	@ (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20020000 	.word	0x20020000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	2000071c 	.word	0x2000071c
 8001bbc:	20000cd8 	.word	0x20000cd8

08001bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <SystemInit+0x20>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bca:	4a05      	ldr	r2, [pc, #20]	@ (8001be0 <SystemInit+0x20>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	@ 0x28
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bea:	f107 0320 	add.w	r3, r7, #32
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c06:	4b22      	ldr	r3, [pc, #136]	@ (8001c90 <MX_TIM2_Init+0xac>)
 8001c08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c0e:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <MX_TIM2_Init+0xac>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <MX_TIM2_Init+0xac>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <MX_TIM2_Init+0xac>)
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c22:	4b1b      	ldr	r3, [pc, #108]	@ (8001c90 <MX_TIM2_Init+0xac>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c28:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <MX_TIM2_Init+0xac>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c2e:	4818      	ldr	r0, [pc, #96]	@ (8001c90 <MX_TIM2_Init+0xac>)
 8001c30:	f006 fb42 	bl	80082b8 <HAL_TIM_PWM_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c3a:	f7ff fdcc 	bl	80017d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c46:	f107 0320 	add.w	r3, r7, #32
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4810      	ldr	r0, [pc, #64]	@ (8001c90 <MX_TIM2_Init+0xac>)
 8001c4e:	f007 f9d5 	bl	8008ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c58:	f7ff fdbd 	bl	80017d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5c:	2360      	movs	r3, #96	@ 0x60
 8001c5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	2204      	movs	r2, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4807      	ldr	r0, [pc, #28]	@ (8001c90 <MX_TIM2_Init+0xac>)
 8001c74:	f006 fe5c 	bl	8008930 <HAL_TIM_PWM_ConfigChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001c7e:	f7ff fdaa 	bl	80017d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c82:	4803      	ldr	r0, [pc, #12]	@ (8001c90 <MX_TIM2_Init+0xac>)
 8001c84:	f000 fab0 	bl	80021e8 <HAL_TIM_MspPostInit>

}
 8001c88:	bf00      	nop
 8001c8a:	3728      	adds	r7, #40	@ 0x28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000720 	.word	0x20000720

08001c94 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	@ 0x30
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2224      	movs	r2, #36	@ 0x24
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f008 fa8f 	bl	800a1c6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cb0:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <MX_TIM3_Init+0xa0>)
 8001cb2:	4a21      	ldr	r2, [pc, #132]	@ (8001d38 <MX_TIM3_Init+0xa4>)
 8001cb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <MX_TIM3_Init+0xa0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d34 <MX_TIM3_Init+0xa0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <MX_TIM3_Init+0xa0>)
 8001cc4:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001cc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cca:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <MX_TIM3_Init+0xa0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd0:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <MX_TIM3_Init+0xa0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480c      	ldr	r0, [pc, #48]	@ (8001d34 <MX_TIM3_Init+0xa0>)
 8001d02:	f006 fbf1 	bl	80084e8 <HAL_TIM_Encoder_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d0c:	f7ff fd63 	bl	80017d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	@ (8001d34 <MX_TIM3_Init+0xa0>)
 8001d1e:	f007 f96d 	bl	8008ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d28:	f7ff fd55 	bl	80017d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	3730      	adds	r7, #48	@ 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000768 	.word	0x20000768
 8001d38:	40000400 	.word	0x40000400

08001d3c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	@ 0x30
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	2224      	movs	r2, #36	@ 0x24
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f008 fa3b 	bl	800a1c6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d58:	4b20      	ldr	r3, [pc, #128]	@ (8001ddc <MX_TIM4_Init+0xa0>)
 8001d5a:	4a21      	ldr	r2, [pc, #132]	@ (8001de0 <MX_TIM4_Init+0xa4>)
 8001d5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ddc <MX_TIM4_Init+0xa0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	4b1d      	ldr	r3, [pc, #116]	@ (8001ddc <MX_TIM4_Init+0xa0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8191;
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ddc <MX_TIM4_Init+0xa0>)
 8001d6c:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001d70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <MX_TIM4_Init+0xa0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d78:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <MX_TIM4_Init+0xa0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d86:	2301      	movs	r3, #1
 8001d88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d96:	2301      	movs	r3, #1
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	4619      	mov	r1, r3
 8001da8:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <MX_TIM4_Init+0xa0>)
 8001daa:	f006 fb9d 	bl	80084e8 <HAL_TIM_Encoder_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001db4:	f7ff fd0f 	bl	80017d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4805      	ldr	r0, [pc, #20]	@ (8001ddc <MX_TIM4_Init+0xa0>)
 8001dc6:	f007 f919 	bl	8008ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001dd0:	f7ff fd01 	bl	80017d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	3730      	adds	r7, #48	@ 0x30
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200007b0 	.word	0x200007b0
 8001de0:	40000800 	.word	0x40000800

08001de4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	@ 0x28
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dea:	f107 0320 	add.w	r3, r7, #32
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	611a      	str	r2, [r3, #16]
 8001e02:	615a      	str	r2, [r3, #20]
 8001e04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e06:	4b22      	ldr	r3, [pc, #136]	@ (8001e90 <MX_TIM5_Init+0xac>)
 8001e08:	4a22      	ldr	r2, [pc, #136]	@ (8001e94 <MX_TIM5_Init+0xb0>)
 8001e0a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e0c:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <MX_TIM5_Init+0xac>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e12:	4b1f      	ldr	r3, [pc, #124]	@ (8001e90 <MX_TIM5_Init+0xac>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e18:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <MX_TIM5_Init+0xac>)
 8001e1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e1e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <MX_TIM5_Init+0xac>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <MX_TIM5_Init+0xac>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e2c:	4818      	ldr	r0, [pc, #96]	@ (8001e90 <MX_TIM5_Init+0xac>)
 8001e2e:	f006 fa43 	bl	80082b8 <HAL_TIM_PWM_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001e38:	f7ff fccd 	bl	80017d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e44:	f107 0320 	add.w	r3, r7, #32
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4811      	ldr	r0, [pc, #68]	@ (8001e90 <MX_TIM5_Init+0xac>)
 8001e4c:	f007 f8d6 	bl	8008ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001e56:	f7ff fcbe 	bl	80017d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5a:	2360      	movs	r3, #96	@ 0x60
 8001e5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4807      	ldr	r0, [pc, #28]	@ (8001e90 <MX_TIM5_Init+0xac>)
 8001e72:	f006 fd5d 	bl	8008930 <HAL_TIM_PWM_ConfigChannel>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001e7c:	f7ff fcab 	bl	80017d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e80:	4803      	ldr	r0, [pc, #12]	@ (8001e90 <MX_TIM5_Init+0xac>)
 8001e82:	f000 f9b1 	bl	80021e8 <HAL_TIM_MspPostInit>

}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	@ 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200007f8 	.word	0x200007f8
 8001e94:	40000c00 	.word	0x40000c00

08001e98 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001ea8:	4a15      	ldr	r2, [pc, #84]	@ (8001f00 <MX_TIM6_Init+0x68>)
 8001eaa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8001eac:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001eae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eb2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001ebc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001ec0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ec8:	480c      	ldr	r0, [pc, #48]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001eca:	f006 f935 	bl	8008138 <HAL_TIM_Base_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ed4:	f7ff fc7f 	bl	80017d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_TIM6_Init+0x64>)
 8001ee6:	f007 f889 	bl	8008ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ef0:	f7ff fc71 	bl	80017d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000840 	.word	0x20000840
 8001f00:	40001000 	.word	0x40001000

08001f04 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f14:	4a15      	ldr	r2, [pc, #84]	@ (8001f6c <MX_TIM7_Init+0x68>)
 8001f16:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 99;
 8001f18:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f1a:	2263      	movs	r2, #99	@ 0x63
 8001f1c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1e:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8001f24:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f26:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001f2a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f32:	480d      	ldr	r0, [pc, #52]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f34:	f006 f900 	bl	8008138 <HAL_TIM_Base_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001f3e:	f7ff fc4a 	bl	80017d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4806      	ldr	r0, [pc, #24]	@ (8001f68 <MX_TIM7_Init+0x64>)
 8001f50:	f007 f854 	bl	8008ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001f5a:	f7ff fc3c 	bl	80017d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000888 	.word	0x20000888
 8001f6c:	40001400 	.word	0x40001400

08001f70 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f74:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <MX_TIM10_Init+0x40>)
 8001f76:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb4 <MX_TIM10_Init+0x44>)
 8001f78:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 19;
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <MX_TIM10_Init+0x40>)
 8001f7c:	2213      	movs	r2, #19
 8001f7e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f80:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <MX_TIM10_Init+0x40>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 8001f86:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <MX_TIM10_Init+0x40>)
 8001f88:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001f8c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <MX_TIM10_Init+0x40>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <MX_TIM10_Init+0x40>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <MX_TIM10_Init+0x40>)
 8001f9c:	f006 f8cc 	bl	8008138 <HAL_TIM_Base_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001fa6:	f7ff fc16 	bl	80017d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200008d0 	.word	0x200008d0
 8001fb4:	40014400 	.word	0x40014400

08001fb8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b13      	ldr	r3, [pc, #76]	@ (800201c <HAL_TIM_PWM_MspInit+0x64>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	4a12      	ldr	r2, [pc, #72]	@ (800201c <HAL_TIM_PWM_MspInit+0x64>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fda:	4b10      	ldr	r3, [pc, #64]	@ (800201c <HAL_TIM_PWM_MspInit+0x64>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001fe6:	e012      	b.n	800200e <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0c      	ldr	r2, [pc, #48]	@ (8002020 <HAL_TIM_PWM_MspInit+0x68>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10d      	bne.n	800200e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	4b09      	ldr	r3, [pc, #36]	@ (800201c <HAL_TIM_PWM_MspInit+0x64>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	4a08      	ldr	r2, [pc, #32]	@ (800201c <HAL_TIM_PWM_MspInit+0x64>)
 8001ffc:	f043 0308 	orr.w	r3, r3, #8
 8002000:	6413      	str	r3, [r2, #64]	@ 0x40
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_TIM_PWM_MspInit+0x64>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40000c00 	.word	0x40000c00

08002024 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08c      	sub	sp, #48	@ 0x30
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a32      	ldr	r2, [pc, #200]	@ (800210c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d12c      	bne.n	80020a0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	4b31      	ldr	r3, [pc, #196]	@ (8002110 <HAL_TIM_Encoder_MspInit+0xec>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	4a30      	ldr	r2, [pc, #192]	@ (8002110 <HAL_TIM_Encoder_MspInit+0xec>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6413      	str	r3, [r2, #64]	@ 0x40
 8002056:	4b2e      	ldr	r3, [pc, #184]	@ (8002110 <HAL_TIM_Encoder_MspInit+0xec>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	4b2a      	ldr	r3, [pc, #168]	@ (8002110 <HAL_TIM_Encoder_MspInit+0xec>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	4a29      	ldr	r2, [pc, #164]	@ (8002110 <HAL_TIM_Encoder_MspInit+0xec>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6313      	str	r3, [r2, #48]	@ 0x30
 8002072:	4b27      	ldr	r3, [pc, #156]	@ (8002110 <HAL_TIM_Encoder_MspInit+0xec>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 800207e:	23c0      	movs	r3, #192	@ 0xc0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800208e:	2302      	movs	r3, #2
 8002090:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f107 031c 	add.w	r3, r7, #28
 8002096:	4619      	mov	r1, r3
 8002098:	481e      	ldr	r0, [pc, #120]	@ (8002114 <HAL_TIM_Encoder_MspInit+0xf0>)
 800209a:	f003 facb 	bl	8005634 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800209e:	e030      	b.n	8002102 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <HAL_TIM_Encoder_MspInit+0xf4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12b      	bne.n	8002102 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <HAL_TIM_Encoder_MspInit+0xec>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	4a17      	ldr	r2, [pc, #92]	@ (8002110 <HAL_TIM_Encoder_MspInit+0xec>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ba:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <HAL_TIM_Encoder_MspInit+0xec>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <HAL_TIM_Encoder_MspInit+0xec>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4a10      	ldr	r2, [pc, #64]	@ (8002110 <HAL_TIM_Encoder_MspInit+0xec>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_TIM_Encoder_MspInit+0xec>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin|ENC2_CH2_Pin;
 80020e2:	23c0      	movs	r3, #192	@ 0xc0
 80020e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020f2:	2302      	movs	r3, #2
 80020f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	4619      	mov	r1, r3
 80020fc:	4807      	ldr	r0, [pc, #28]	@ (800211c <HAL_TIM_Encoder_MspInit+0xf8>)
 80020fe:	f003 fa99 	bl	8005634 <HAL_GPIO_Init>
}
 8002102:	bf00      	nop
 8002104:	3730      	adds	r7, #48	@ 0x30
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40000400 	.word	0x40000400
 8002110:	40023800 	.word	0x40023800
 8002114:	40020000 	.word	0x40020000
 8002118:	40000800 	.word	0x40000800
 800211c:	40020400 	.word	0x40020400

08002120 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2a      	ldr	r2, [pc, #168]	@ (80021d8 <HAL_TIM_Base_MspInit+0xb8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d116      	bne.n	8002160 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	4b29      	ldr	r3, [pc, #164]	@ (80021dc <HAL_TIM_Base_MspInit+0xbc>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	4a28      	ldr	r2, [pc, #160]	@ (80021dc <HAL_TIM_Base_MspInit+0xbc>)
 800213c:	f043 0310 	orr.w	r3, r3, #16
 8002140:	6413      	str	r3, [r2, #64]	@ 0x40
 8002142:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <HAL_TIM_Base_MspInit+0xbc>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	2036      	movs	r0, #54	@ 0x36
 8002154:	f002 fe99 	bl	8004e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002158:	2036      	movs	r0, #54	@ 0x36
 800215a:	f002 feb2 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800215e:	e036      	b.n	80021ce <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM7)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1e      	ldr	r2, [pc, #120]	@ (80021e0 <HAL_TIM_Base_MspInit+0xc0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d116      	bne.n	8002198 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	4b1b      	ldr	r3, [pc, #108]	@ (80021dc <HAL_TIM_Base_MspInit+0xbc>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	4a1a      	ldr	r2, [pc, #104]	@ (80021dc <HAL_TIM_Base_MspInit+0xbc>)
 8002174:	f043 0320 	orr.w	r3, r3, #32
 8002178:	6413      	str	r3, [r2, #64]	@ 0x40
 800217a:	4b18      	ldr	r3, [pc, #96]	@ (80021dc <HAL_TIM_Base_MspInit+0xbc>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	2037      	movs	r0, #55	@ 0x37
 800218c:	f002 fe7d 	bl	8004e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002190:	2037      	movs	r0, #55	@ 0x37
 8002192:	f002 fe96 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
}
 8002196:	e01a      	b.n	80021ce <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a11      	ldr	r2, [pc, #68]	@ (80021e4 <HAL_TIM_Base_MspInit+0xc4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d115      	bne.n	80021ce <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <HAL_TIM_Base_MspInit+0xbc>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	4a0c      	ldr	r2, [pc, #48]	@ (80021dc <HAL_TIM_Base_MspInit+0xbc>)
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b2:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <HAL_TIM_Base_MspInit+0xbc>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	2019      	movs	r0, #25
 80021c4:	f002 fe61 	bl	8004e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021c8:	2019      	movs	r0, #25
 80021ca:	f002 fe7a 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40001000 	.word	0x40001000
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40001400 	.word	0x40001400
 80021e4:	40014400 	.word	0x40014400

080021e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	@ 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002208:	d11e      	bne.n	8002248 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <HAL_TIM_MspPostInit+0xb0>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4a21      	ldr	r2, [pc, #132]	@ (8002298 <HAL_TIM_MspPostInit+0xb0>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4b1f      	ldr	r3, [pc, #124]	@ (8002298 <HAL_TIM_MspPostInit+0xb0>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M2_PUL_Pin;
 8002226:	2302      	movs	r3, #2
 8002228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002236:	2301      	movs	r3, #1
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_PUL_GPIO_Port, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	4816      	ldr	r0, [pc, #88]	@ (800229c <HAL_TIM_MspPostInit+0xb4>)
 8002242:	f003 f9f7 	bl	8005634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002246:	e022      	b.n	800228e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a14      	ldr	r2, [pc, #80]	@ (80022a0 <HAL_TIM_MspPostInit+0xb8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d11d      	bne.n	800228e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <HAL_TIM_MspPostInit+0xb0>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a0f      	ldr	r2, [pc, #60]	@ (8002298 <HAL_TIM_MspPostInit+0xb0>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <HAL_TIM_MspPostInit+0xb0>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PUL_Pin;
 800226e:	2301      	movs	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800227e:	2302      	movs	r3, #2
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_PUL_GPIO_Port, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4804      	ldr	r0, [pc, #16]	@ (800229c <HAL_TIM_MspPostInit+0xb4>)
 800228a:	f003 f9d3 	bl	8005634 <HAL_GPIO_Init>
}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	@ 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40020000 	.word	0x40020000
 80022a0:	40000c00 	.word	0x40000c00

080022a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <MX_USART2_UART_Init+0x4c>)
 80022aa:	4a12      	ldr	r2, [pc, #72]	@ (80022f4 <MX_USART2_UART_Init+0x50>)
 80022ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ae:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <MX_USART2_UART_Init+0x4c>)
 80022b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <MX_USART2_UART_Init+0x4c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022bc:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <MX_USART2_UART_Init+0x4c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022c2:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <MX_USART2_UART_Init+0x4c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022c8:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <MX_USART2_UART_Init+0x4c>)
 80022ca:	220c      	movs	r2, #12
 80022cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ce:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <MX_USART2_UART_Init+0x4c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <MX_USART2_UART_Init+0x4c>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022da:	4805      	ldr	r0, [pc, #20]	@ (80022f0 <MX_USART2_UART_Init+0x4c>)
 80022dc:	f006 ff1e 	bl	800911c <HAL_UART_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022e6:	f7ff fa76 	bl	80017d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000918 	.word	0x20000918
 80022f4:	40004400 	.word	0x40004400

080022f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	@ 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a19      	ldr	r2, [pc, #100]	@ (800237c <HAL_UART_MspInit+0x84>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d12b      	bne.n	8002372 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <HAL_UART_MspInit+0x88>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	4a17      	ldr	r2, [pc, #92]	@ (8002380 <HAL_UART_MspInit+0x88>)
 8002324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002328:	6413      	str	r3, [r2, #64]	@ 0x40
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <HAL_UART_MspInit+0x88>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <HAL_UART_MspInit+0x88>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a10      	ldr	r2, [pc, #64]	@ (8002380 <HAL_UART_MspInit+0x88>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <HAL_UART_MspInit+0x88>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002352:	230c      	movs	r3, #12
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002362:	2307      	movs	r3, #7
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	@ (8002384 <HAL_UART_MspInit+0x8c>)
 800236e:	f003 f961 	bl	8005634 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	@ 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40004400 	.word	0x40004400
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000

08002388 <on_click>:
#define DEBOUNCE_DELAY 100 // ms

static uint32_t last_debounce_time = 0;
static uint8_t active = 0;

void on_click(){
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY){
 800238c:	f002 f862 	bl	8004454 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	4b18      	ldr	r3, [pc, #96]	@ (80023f4 <on_click+0x6c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b64      	cmp	r3, #100	@ 0x64
 800239a:	d929      	bls.n	80023f0 <on_click+0x68>
		last_debounce_time = HAL_GetTick();
 800239c:	f002 f85a 	bl	8004454 <HAL_GetTick>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4a14      	ldr	r2, [pc, #80]	@ (80023f4 <on_click+0x6c>)
 80023a4:	6013      	str	r3, [r2, #0]
		active ^= 1;
 80023a6:	4b14      	ldr	r3, [pc, #80]	@ (80023f8 <on_click+0x70>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	f083 0301 	eor.w	r3, r3, #1
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b11      	ldr	r3, [pc, #68]	@ (80023f8 <on_click+0x70>)
 80023b2:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 80023b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023b8:	4810      	ldr	r0, [pc, #64]	@ (80023fc <on_click+0x74>)
 80023ba:	f003 fb00 	bl	80059be <HAL_GPIO_TogglePin>

		if(active){
 80023be:	4b0e      	ldr	r3, [pc, #56]	@ (80023f8 <on_click+0x70>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <on_click+0x54>
			set_speed(&stepper_l, 3);
 80023c6:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80023ca:	480d      	ldr	r0, [pc, #52]	@ (8002400 <on_click+0x78>)
 80023cc:	f000 fe8e 	bl	80030ec <set_speed>
			set_speed(&stepper_r, 3);
 80023d0:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80023d4:	480b      	ldr	r0, [pc, #44]	@ (8002404 <on_click+0x7c>)
 80023d6:	f000 fe89 	bl	80030ec <set_speed>
		} else{
			set_speed(&stepper_l, 0);
			set_speed(&stepper_r, 0);
		}
	}
}
 80023da:	e009      	b.n	80023f0 <on_click+0x68>
			set_speed(&stepper_l, 0);
 80023dc:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8002408 <on_click+0x80>
 80023e0:	4807      	ldr	r0, [pc, #28]	@ (8002400 <on_click+0x78>)
 80023e2:	f000 fe83 	bl	80030ec <set_speed>
			set_speed(&stepper_r, 0);
 80023e6:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002408 <on_click+0x80>
 80023ea:	4806      	ldr	r0, [pc, #24]	@ (8002404 <on_click+0x7c>)
 80023ec:	f000 fe7e 	bl	80030ec <set_speed>
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000960 	.word	0x20000960
 80023f8:	20000964 	.word	0x20000964
 80023fc:	40020800 	.word	0x40020800
 8002400:	200009bc 	.word	0x200009bc
 8002404:	20000984 	.word	0x20000984
 8002408:	00000000 	.word	0x00000000

0800240c <update_direction>:
#include <stdio.h>

float SAMPLING_PERIOD; // seconds
uint32_t HCLK;

static void update_direction(encoder_t *encoder){
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	encoder->direction = (encoder->tim->CR1 & TIM_CR1_DIR_Msk) >> TIM_CR1_DIR_Pos;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	b2da      	uxtb	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	701a      	strb	r2, [r3, #0]
	return;
 8002428:	bf00      	nop
}
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	0000      	movs	r0, r0
	...

08002438 <update_displacement>:

static void update_displacement(encoder_t *encoder){
 8002438:	b5b0      	push	{r4, r5, r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

	encoder->displacement = ((float)encoder->tim->CNT - 4096) * DCF * encoder->direction_invert;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80024b8 <update_displacement+0x80>
 8002452:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002456:	ee17 0a90 	vmov	r0, s15
 800245a:	f7fe f8a5 	bl	80005a8 <__aeabi_f2d>
 800245e:	a314      	add	r3, pc, #80	@ (adr r3, 80024b0 <update_displacement+0x78>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f7fe f8f8 	bl	8000658 <__aeabi_dmul>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4614      	mov	r4, r2
 800246e:	461d      	mov	r5, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe f884 	bl	8000584 <__aeabi_i2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4620      	mov	r0, r4
 8002482:	4629      	mov	r1, r5
 8002484:	f7fe f8e8 	bl	8000658 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	f7fe fbda 	bl	8000c48 <__aeabi_d2f>
 8002494:	4602      	mov	r2, r0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	605a      	str	r2, [r3, #4]
	encoder->tim->CNT = 4096;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024a2:	625a      	str	r2, [r3, #36]	@ 0x24
	return;
 80024a4:	bf00      	nop
}
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bdb0      	pop	{r4, r5, r7, pc}
 80024ac:	f3af 8000 	nop.w
 80024b0:	7bb1a72c 	.word	0x7bb1a72c
 80024b4:	3f4921fa 	.word	0x3f4921fa
 80024b8:	45800000 	.word	0x45800000

080024bc <compute_speed>:

static void compute_speed(encoder_t *encoder){
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	encoder->speed = encoder->displacement / SAMPLING_PERIOD;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80024ca:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <compute_speed+0x2c>)
 80024cc:	ed93 7a00 	vldr	s14, [r3]
 80024d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000968 	.word	0x20000968

080024ec <Encoder_read>:

void Encoder_read(encoder_t *encoder){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	update_direction(encoder);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff89 	bl	800240c <update_direction>
	update_displacement(encoder);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ff9c 	bl	8002438 <update_displacement>
	compute_speed(encoder);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ffdb 	bl	80024bc <compute_speed>
	return;
 8002506:	bf00      	nop
}
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <Encoder_init>:

// em_tim : encoder mode timer | s_tim : sampling timer
void Encoder_init(encoder_t *encoder, TIM_HandleTypeDef *em_tim, TIM_HandleTypeDef *s_tim, int8_t direction_invert){
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	70fb      	strb	r3, [r7, #3]
	encoder->tim = em_tim->Instance;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	60da      	str	r2, [r3, #12]
	encoder->tim->CNT = 4096;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800252e:	625a      	str	r2, [r3, #36]	@ 0x24
	encoder->direction_invert = direction_invert;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	741a      	strb	r2, [r3, #16]

	encoder->speed = 0;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
	HCLK = HAL_RCC_GetHCLKFreq();
 800253e:	f004 fe4f 	bl	80071e0 <HAL_RCC_GetHCLKFreq>
 8002542:	4603      	mov	r3, r0
 8002544:	4a11      	ldr	r2, [pc, #68]	@ (800258c <Encoder_init+0x7c>)
 8002546:	6013      	str	r3, [r2, #0]
	SAMPLING_PERIOD = (float)(1+s_tim->Instance->ARR)*(1+s_tim->Instance->PSC)/HCLK;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254e:	3301      	adds	r3, #1
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	3301      	adds	r3, #1
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002568:	ee67 6a27 	vmul.f32	s13, s14, s15
 800256c:	4b07      	ldr	r3, [pc, #28]	@ (800258c <Encoder_init+0x7c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	ee07 3a90 	vmov	s15, r3
 8002574:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800257c:	4b04      	ldr	r3, [pc, #16]	@ (8002590 <Encoder_init+0x80>)
 800257e:	edc3 7a00 	vstr	s15, [r3]
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000096c 	.word	0x2000096c
 8002590:	20000968 	.word	0x20000968

08002594 <IMU_Init>:
		imu->az_bias = imu->az_bias - 16384.0f; // Adjust az bias to remove the offset
		imu->az= (imu->az - imu->az_bias) / 16384.0f * 9.81f; // Remove the bias from the az value
	}
}

uint8_t IMU_Init(imu_t *imu, I2C_HandleTypeDef *hi2c, uint16_t address) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	@ 0x28
 8002598:	af04      	add	r7, sp, #16
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) {
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d101      	bne.n	80025b4 <IMU_Init+0x20>
		// I2C bus is busy, stop the I2C communication
		return 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e066      	b.n	8002682 <IMU_Init+0xee>
	}

	imu->hi2c = hi2c;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	601a      	str	r2, [r3, #0]
	imu->address = address;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	88fa      	ldrh	r2, [r7, #6]
 80025be:	809a      	strh	r2, [r3, #4]

	imu->ax = 0.0f;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	615a      	str	r2, [r3, #20]
	imu->ay = 0.0f;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
	imu->az = 0.0f;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	61da      	str	r2, [r3, #28]
	imu->vx = 0.0f;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	621a      	str	r2, [r3, #32]

	imu->wx = 0.0f;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	@ 0x24
	imu->wy = 0.0f;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	629a      	str	r2, [r3, #40]	@ 0x28
	imu->wz = 0.0f;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	imu->alpha_y = 0.0f; // Initialize alpha_y to 0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30

	imu->angle = 0.0f;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	635a      	str	r2, [r3, #52]	@ 0x34
	imu->last_computation_time = 0;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	639a      	str	r2, [r3, #56]	@ 0x38

	imu->az_bias = 0.0f; // Initialize az bias to 0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	63da      	str	r2, [r3, #60]	@ 0x3c
	imu->calibration_mode = 1; // Calibration mode enabled by default
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	uint8_t check;
	HAL_I2C_Mem_Read(hi2c, address, WHO_AM_I_ADDR, I2C_MEMADD_SIZE_8BIT, &check, 1, 1000);
 800261e:	88f9      	ldrh	r1, [r7, #6]
 8002620:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002624:	9302      	str	r3, [sp, #8]
 8002626:	2301      	movs	r3, #1
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	f107 0317 	add.w	r3, r7, #23
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2301      	movs	r3, #1
 8002632:	2275      	movs	r2, #117	@ 0x75
 8002634:	68b8      	ldr	r0, [r7, #8]
 8002636:	f003 fc33 	bl	8005ea0 <HAL_I2C_Mem_Read>
	if (check == 0x68) {
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	2b68      	cmp	r3, #104	@ 0x68
 800263e:	d11f      	bne.n	8002680 <IMU_Init+0xec>
		uint8_t data = 0x00;
 8002640:	2300      	movs	r3, #0
 8002642:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, SLEEP_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8002644:	88f9      	ldrh	r1, [r7, #6]
 8002646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800264a:	9302      	str	r3, [sp, #8]
 800264c:	2301      	movs	r3, #1
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	f107 0316 	add.w	r3, r7, #22
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2301      	movs	r3, #1
 8002658:	226b      	movs	r2, #107	@ 0x6b
 800265a:	68b8      	ldr	r0, [r7, #8]
 800265c:	f003 fb26 	bl	8005cac <HAL_I2C_Mem_Write>

		data = 0x00;
 8002660:	2300      	movs	r3, #0
 8002662:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8002664:	88f9      	ldrh	r1, [r7, #6]
 8002666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	2301      	movs	r3, #1
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	f107 0316 	add.w	r3, r7, #22
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2301      	movs	r3, #1
 8002678:	221a      	movs	r2, #26
 800267a:	68b8      	ldr	r0, [r7, #8]
 800267c:	f003 fb16 	bl	8005cac <HAL_I2C_Mem_Write>
	}
	return 1;
 8002680:	2301      	movs	r3, #1
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <IMU_ReadData>:

void IMU_ReadData(imu_t *imu){
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af02      	add	r7, sp, #8
 8002690:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(imu->hi2c, imu->address, IMU_BASE_ACCEL_ADDR, I2C_MEMADD_SIZE_8BIT, (uint8_t *)imu->pData, IMU_BUFFER_SIZE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	8899      	ldrh	r1, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3306      	adds	r3, #6
 800269e:	220e      	movs	r2, #14
 80026a0:	9201      	str	r2, [sp, #4]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2301      	movs	r3, #1
 80026a6:	223b      	movs	r2, #59	@ 0x3b
 80026a8:	f003 fe2c 	bl	8006304 <HAL_I2C_Mem_Read_DMA>
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	0000      	movs	r0, r0
	...

080026b8 <IMU_Compute_Data>:

void IMU_Compute_Data(imu_t *imu) {
 80026b8:	b5b0      	push	{r4, r5, r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	uint32_t delta_time = HAL_GetTick() - imu->last_computation_time; // Calculate time since last angle update
 80026c0:	f001 fec8 	bl	8004454 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	60fb      	str	r3, [r7, #12]

	imu->ax = (1-IMU_EMA_ALPHA) * imu->ax + IMU_EMA_ALPHA * (((int16_t)(imu->pData[0] << 8) | imu->pData[1]) - 280.591f) / 16384.0f * 9.81f;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80026d4:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8002a10 <IMU_Compute_Data+0x358>
 80026d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	799b      	ldrb	r3, [r3, #6]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	b21b      	sxth	r3, r3
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	b21b      	sxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	79db      	ldrb	r3, [r3, #7]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4313      	orrs	r3, r2
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026fa:	eddf 6ac6 	vldr	s13, [pc, #792]	@ 8002a14 <IMU_Compute_Data+0x35c>
 80026fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002702:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8002a18 <IMU_Compute_Data+0x360>
 8002706:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800270a:	ed9f 6ac4 	vldr	s12, [pc, #784]	@ 8002a1c <IMU_Compute_Data+0x364>
 800270e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002712:	eddf 6ac3 	vldr	s13, [pc, #780]	@ 8002a20 <IMU_Compute_Data+0x368>
 8002716:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800271a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->ay = (1-IMU_EMA_ALPHA) * imu->ay + IMU_EMA_ALPHA * ((int16_t)(imu->pData[2] << 8) | imu->pData[3]) / 16384.0f * 9.81f;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	edd3 7a06 	vldr	s15, [r3, #24]
 800272a:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8002a10 <IMU_Compute_Data+0x358>
 800272e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7a1b      	ldrb	r3, [r3, #8]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	b21b      	sxth	r3, r3
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	b21b      	sxth	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7a5b      	ldrb	r3, [r3, #9]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	4313      	orrs	r3, r2
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002750:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8002a18 <IMU_Compute_Data+0x360>
 8002754:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002758:	ed9f 6ab0 	vldr	s12, [pc, #704]	@ 8002a1c <IMU_Compute_Data+0x364>
 800275c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002760:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8002a20 <IMU_Compute_Data+0x368>
 8002764:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->az = (1-IMU_EMA_ALPHA) * imu->az + IMU_EMA_ALPHA * (((int16_t)(imu->pData[4] << 8) | imu->pData[5]) - 1117.735f) / 16384.0f * 9.81f;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	edd3 7a07 	vldr	s15, [r3, #28]
 8002778:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8002a10 <IMU_Compute_Data+0x358>
 800277c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7a9b      	ldrb	r3, [r3, #10]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	b21b      	sxth	r3, r3
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	b21b      	sxth	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7adb      	ldrb	r3, [r3, #11]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4313      	orrs	r3, r2
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800279e:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002a24 <IMU_Compute_Data+0x36c>
 80027a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80027a6:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8002a18 <IMU_Compute_Data+0x360>
 80027aa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80027ae:	ed9f 6a9b 	vldr	s12, [pc, #620]	@ 8002a1c <IMU_Compute_Data+0x364>
 80027b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027b6:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 8002a20 <IMU_Compute_Data+0x368>
 80027ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	edc3 7a07 	vstr	s15, [r3, #28]
//		IMU_Calibrate(imu); // Call calibration function if in calibration mode
//	} else {
//		// Convert raw data to float values (/16834.0f for accelerometer -> in g, /131.0f for gyroscope)
//		imu->az = (1-IMU_EMA_ALPHA) * imu->az + IMU_EMA_ALPHA * (((int16_t)(imu->pData[4] << 8) | imu->pData[5]) - imu->az_bias)/ 16384.0f * 9.81f;
//	}
	float old_wy = imu->wy;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	60bb      	str	r3, [r7, #8]
	imu->wx = (1-IMU_EMA_ALPHA) * imu->wx + IMU_EMA_ALPHA * ((int16_t)(imu->pData[8] << 8) | imu->pData[9]) / 131.0f;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80027d4:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002a10 <IMU_Compute_Data+0x358>
 80027d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7b9b      	ldrb	r3, [r3, #14]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	b21b      	sxth	r3, r3
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	b21b      	sxth	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7bdb      	ldrb	r3, [r3, #15]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4313      	orrs	r3, r2
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027fa:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002a18 <IMU_Compute_Data+0x360>
 80027fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002802:	ed9f 6a89 	vldr	s12, [pc, #548]	@ 8002a28 <IMU_Compute_Data+0x370>
 8002806:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800280a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	imu->wy = (1-IMU_EMA_ALPHA) * imu->wy + IMU_EMA_ALPHA * (((int16_t)(imu->pData[10] << 8) | imu->pData[11]) - 393.589f) / 131.0f;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800281a:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8002a10 <IMU_Compute_Data+0x358>
 800281e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7c1b      	ldrb	r3, [r3, #16]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	b21b      	sxth	r3, r3
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	b21b      	sxth	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7c5b      	ldrb	r3, [r3, #17]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	4313      	orrs	r3, r2
 8002838:	ee07 3a90 	vmov	s15, r3
 800283c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002840:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8002a2c <IMU_Compute_Data+0x374>
 8002844:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002848:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8002a18 <IMU_Compute_Data+0x360>
 800284c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002850:	ed9f 6a75 	vldr	s12, [pc, #468]	@ 8002a28 <IMU_Compute_Data+0x370>
 8002854:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	imu->wz = (1-IMU_EMA_ALPHA) * imu->wz + IMU_EMA_ALPHA * ((int16_t)(imu->pData[12] << 8) | imu->pData[13]) / 131.0f;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002868:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002a10 <IMU_Compute_Data+0x358>
 800286c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	7c9b      	ldrb	r3, [r3, #18]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	b21b      	sxth	r3, r3
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	b21b      	sxth	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7cdb      	ldrb	r3, [r3, #19]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	4313      	orrs	r3, r2
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800288e:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002a18 <IMU_Compute_Data+0x360>
 8002892:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002896:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 8002a28 <IMU_Compute_Data+0x370>
 800289a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800289e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	imu->last_computation_time = HAL_GetTick(); // Update last computation time
 80028a8:	f001 fdd4 	bl	8004454 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	639a      	str	r2, [r3, #56]	@ 0x38

	imu->vx = imu->vx + imu->ax * (float)delta_time / 1000.0f; // Update velocity based on accelerometer data
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	ed93 7a08 	vldr	s14, [r3, #32]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	edd3 6a05 	vldr	s13, [r3, #20]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028cc:	ed9f 6a58 	vldr	s12, [pc, #352]	@ 8002a30 <IMU_Compute_Data+0x378>
 80028d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->alpha_y = (imu->wy - old_wy) / ((float)delta_time / 1000.0f); // Calculate angular acceleration around y-axis
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80028e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80028e8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f6:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8002a30 <IMU_Compute_Data+0x378>
 80028fa:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80028fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	if(imu->calibration_mode) {
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d02a      	beq.n	8002968 <IMU_Compute_Data+0x2b0>
		imu->angle = -atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Use accelerometer data to compute angle in calibration mode
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	edd3 7a05 	vldr	s15, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	ed93 7a07 	vldr	s14, [r3, #28]
 800291e:	eef0 0a47 	vmov.f32	s1, s14
 8002922:	eeb0 0a67 	vmov.f32	s0, s15
 8002926:	f009 fd1d 	bl	800c364 <atan2f>
 800292a:	eef0 7a40 	vmov.f32	s15, s0
 800292e:	eef1 7a67 	vneg.f32	s15, s15
 8002932:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002a34 <IMU_Compute_Data+0x37c>
 8002936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800293a:	ee17 0a90 	vmov	r0, s15
 800293e:	f7fd fe33 	bl	80005a8 <__aeabi_f2d>
 8002942:	a331      	add	r3, pc, #196	@ (adr r3, 8002a08 <IMU_Compute_Data+0x350>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	f7fd ffb0 	bl	80008ac <__aeabi_ddiv>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f7fe f978 	bl	8000c48 <__aeabi_d2f>
 8002958:	4602      	mov	r2, r0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	635a      	str	r2, [r3, #52]	@ 0x34
		imu->calibration_mode = 0; // Reset calibration mode after computing angle
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}else {
		imu->angle = .996f * (imu->angle + imu->wy * (float)delta_time/1000.0f) - .004f * atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Complementary filter to combine gyroscope and accelerometer data
	}
}
 8002966:	e04a      	b.n	80029fe <IMU_Compute_Data+0x346>
		imu->angle = .996f * (imu->angle + imu->wy * (float)delta_time/1000.0f) - .004f * atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Complementary filter to combine gyroscope and accelerometer data
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002982:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8002a30 <IMU_Compute_Data+0x378>
 8002986:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800298a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002a38 <IMU_Compute_Data+0x380>
 8002992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002996:	ee17 0a90 	vmov	r0, s15
 800299a:	f7fd fe05 	bl	80005a8 <__aeabi_f2d>
 800299e:	4604      	mov	r4, r0
 80029a0:	460d      	mov	r5, r1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	ed93 7a07 	vldr	s14, [r3, #28]
 80029ae:	eef0 0a47 	vmov.f32	s1, s14
 80029b2:	eeb0 0a67 	vmov.f32	s0, s15
 80029b6:	f009 fcd5 	bl	800c364 <atan2f>
 80029ba:	eef0 7a40 	vmov.f32	s15, s0
 80029be:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002a3c <IMU_Compute_Data+0x384>
 80029c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029c6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002a34 <IMU_Compute_Data+0x37c>
 80029ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ce:	ee17 0a90 	vmov	r0, s15
 80029d2:	f7fd fde9 	bl	80005a8 <__aeabi_f2d>
 80029d6:	a30c      	add	r3, pc, #48	@ (adr r3, 8002a08 <IMU_Compute_Data+0x350>)
 80029d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029dc:	f7fd ff66 	bl	80008ac <__aeabi_ddiv>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4620      	mov	r0, r4
 80029e6:	4629      	mov	r1, r5
 80029e8:	f7fd fc7e 	bl	80002e8 <__aeabi_dsub>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	f7fe f928 	bl	8000c48 <__aeabi_d2f>
 80029f8:	4602      	mov	r2, r0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bdb0      	pop	{r4, r5, r7, pc}
 8002a06:	bf00      	nop
 8002a08:	54442d18 	.word	0x54442d18
 8002a0c:	400921fb 	.word	0x400921fb
 8002a10:	3f589d8a 	.word	0x3f589d8a
 8002a14:	438c4ba6 	.word	0x438c4ba6
 8002a18:	3e1d89d9 	.word	0x3e1d89d9
 8002a1c:	46800000 	.word	0x46800000
 8002a20:	411cf5c3 	.word	0x411cf5c3
 8002a24:	448bb785 	.word	0x448bb785
 8002a28:	43030000 	.word	0x43030000
 8002a2c:	43c4cb64 	.word	0x43c4cb64
 8002a30:	447a0000 	.word	0x447a0000
 8002a34:	43340000 	.word	0x43340000
 8002a38:	3f7ef9db 	.word	0x3f7ef9db
 8002a3c:	3b83126f 	.word	0x3b83126f

08002a40 <PowerModule_init>:
#include "headers/power_module.h"
#include "headers/display.h"
#include "gpio.h"

void PowerModule_init(power_module_t *power_module, ADC_HandleTypeDef *hadc){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
	power_module->warning_limit = WARNING_LIMIT; // Imposta il limite di avviso
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a34      	ldr	r2, [pc, #208]	@ (8002b20 <PowerModule_init+0xe0>)
 8002a4e:	605a      	str	r2, [r3, #4]
	power_module->stop_limit = STOP_LIMIT; // Imposta il limite di stop
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a34      	ldr	r2, [pc, #208]	@ (8002b24 <PowerModule_init+0xe4>)
 8002a54:	609a      	str	r2, [r3, #8]
	power_module->warning_issued = 0; // Inizializza il flag di avviso
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	731a      	strb	r2, [r3, #12]
	power_module->stop_issued = 0; // Inizializza il flag di stop
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	735a      	strb	r2, [r3, #13]
	power_module->hadc = *hadc; // Initialize ADC handle
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	3364      	adds	r3, #100	@ 0x64
 8002a68:	4611      	mov	r1, r2
 8002a6a:	2248      	movs	r2, #72	@ 0x48
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f007 fc2a 	bl	800a2c6 <memcpy>

	HAL_ADC_Start(&power_module->hadc);  // Avvia manualmente
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3364      	adds	r3, #100	@ 0x64
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fd60 	bl	800453c <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&power_module->hadc, 10) == HAL_OK) {  // Timeout corto
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3364      	adds	r3, #100	@ 0x64
 8002a80:	210a      	movs	r1, #10
 8002a82:	4618      	mov	r0, r3
 8002a84:	f001 fe5f 	bl	8004746 <HAL_ADC_PollForConversion>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11f      	bne.n	8002ace <PowerModule_init+0x8e>
		power_module->voltage = HAL_ADC_GetValue(&power_module->hadc) / SLOPE - OFFSET;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3364      	adds	r3, #100	@ 0x64
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 fee2 	bl	800485c <HAL_ADC_GetValue>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd62 	bl	8000564 <__aeabi_ui2d>
 8002aa0:	a31b      	add	r3, pc, #108	@ (adr r3, 8002b10 <PowerModule_init+0xd0>)
 8002aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa6:	f7fd ff01 	bl	80008ac <__aeabi_ddiv>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	a319      	add	r3, pc, #100	@ (adr r3, 8002b18 <PowerModule_init+0xd8>)
 8002ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab8:	f7fd fc16 	bl	80002e8 <__aeabi_dsub>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f7fe f8c0 	bl	8000c48 <__aeabi_d2f>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Stop(&power_module->hadc);  // Ferma l’ADC dopo la conversione
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3364      	adds	r3, #100	@ 0x64
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 fe04 	bl	80046e0 <HAL_ADC_Stop>

	// Inizializza l'accumulatore
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e00a      	b.n	8002af4 <PowerModule_init+0xb4>
		power_module->accumulator[i] = power_module->voltage; // Inizializza con il primo valore letto
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3301      	adds	r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b13      	cmp	r3, #19
 8002af8:	ddf1      	ble.n	8002ade <PowerModule_init+0x9e>
	}
	power_module->accumulator_idx = 0; // Inizializza l'indice dell'accumulatore
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	f3af 8000 	nop.w
 8002b10:	e147ae14 	.word	0xe147ae14
 8002b14:	405c847a 	.word	0x405c847a
 8002b18:	c540196f 	.word	0xc540196f
 8002b1c:	3fb12c42 	.word	0x3fb12c42
 8002b20:	41b00000 	.word	0x41b00000
 8002b24:	41a00000 	.word	0x41a00000

08002b28 <I2C1_BusRecovery>:
#define I2C_SDA_GPIO_Port   GPIOB
#define I2C_SDA_Pin         GPIO_PIN_9

// quando HAL_I2C_Master_Receive_DMA() fallisce per colpa del bus bloccato (es. I2C_FLAG_BUSY sempre attivo),
// l’unico rimedio affidabile è resettare completamente il periferico I²C
static void I2C1_BusRecovery(void) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002b2e:	463b      	mov	r3, r7
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]

    // 1) Disabilita I2C
    __HAL_I2C_DISABLE(&hi2c1);
 8002b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c28 <I2C1_BusRecovery+0x100>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b39      	ldr	r3, [pc, #228]	@ (8002c28 <I2C1_BusRecovery+0x100>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
    __HAL_RCC_I2C1_FORCE_RESET();
 8002b4c:	4b37      	ldr	r3, [pc, #220]	@ (8002c2c <I2C1_BusRecovery+0x104>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4a36      	ldr	r2, [pc, #216]	@ (8002c2c <I2C1_BusRecovery+0x104>)
 8002b52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b56:	6213      	str	r3, [r2, #32]
    __HAL_RCC_I2C1_RELEASE_RESET();
 8002b58:	4b34      	ldr	r3, [pc, #208]	@ (8002c2c <I2C1_BusRecovery+0x104>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4a33      	ldr	r2, [pc, #204]	@ (8002c2c <I2C1_BusRecovery+0x104>)
 8002b5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b62:	6213      	str	r3, [r2, #32]

    // 2) Configura SCL e SDA come GPIO open-drain con pull-up interne
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8002b64:	2311      	movs	r3, #17
 8002b66:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin   = I2C_SCL_Pin | I2C_SDA_Pin;
 8002b70:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b74:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b76:	463b      	mov	r3, r7
 8002b78:	4619      	mov	r1, r3
 8002b7a:	482d      	ldr	r0, [pc, #180]	@ (8002c30 <I2C1_BusRecovery+0x108>)
 8002b7c:	f002 fd5a 	bl	8005634 <HAL_GPIO_Init>

    // 3) Se SDA rimane bassa, genera fino a 9 clock manuali su SCL
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++) {
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	e014      	b.n	8002bb0 <I2C1_BusRecovery+0x88>
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_RESET);
 8002b86:	2200      	movs	r2, #0
 8002b88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b8c:	4828      	ldr	r0, [pc, #160]	@ (8002c30 <I2C1_BusRecovery+0x108>)
 8002b8e:	f002 fefd 	bl	800598c <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8002b92:	2001      	movs	r0, #1
 8002b94:	f001 fc6a 	bl	800446c <HAL_Delay>
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b9e:	4824      	ldr	r0, [pc, #144]	@ (8002c30 <I2C1_BusRecovery+0x108>)
 8002ba0:	f002 fef4 	bl	800598c <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	f001 fc61 	bl	800446c <HAL_Delay>
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++) {
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	3301      	adds	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	dc07      	bgt.n	8002bc6 <I2C1_BusRecovery+0x9e>
 8002bb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bba:	481d      	ldr	r0, [pc, #116]	@ (8002c30 <I2C1_BusRecovery+0x108>)
 8002bbc:	f002 fece 	bl	800595c <HAL_GPIO_ReadPin>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0df      	beq.n	8002b86 <I2C1_BusRecovery+0x5e>
    }

    // 4) Genera un STOP: SDA da bassa → alta mentre SCL alto
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_RESET);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bcc:	4818      	ldr	r0, [pc, #96]	@ (8002c30 <I2C1_BusRecovery+0x108>)
 8002bce:	f002 fedd 	bl	800598c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f001 fc4a 	bl	800446c <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bde:	4814      	ldr	r0, [pc, #80]	@ (8002c30 <I2C1_BusRecovery+0x108>)
 8002be0:	f002 fed4 	bl	800598c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002be4:	2001      	movs	r0, #1
 8002be6:	f001 fc41 	bl	800446c <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET);
 8002bea:	2201      	movs	r2, #1
 8002bec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bf0:	480f      	ldr	r0, [pc, #60]	@ (8002c30 <I2C1_BusRecovery+0x108>)
 8002bf2:	f002 fecb 	bl	800598c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	f001 fc38 	bl	800446c <HAL_Delay>

    // 5) Ripristina AF I2C su SCL e SDA
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bfc:	2312      	movs	r3, #18
 8002bfe:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;        // pull-up interne già attive
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed= GPIO_SPEED_FREQ_HIGH;
 8002c04:	2302      	movs	r3, #2
 8002c06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = I2C_SCL_Pin | I2C_SDA_Pin;
 8002c08:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c0c:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c0e:	2304      	movs	r3, #4
 8002c10:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	463b      	mov	r3, r7
 8002c14:	4619      	mov	r1, r3
 8002c16:	4806      	ldr	r0, [pc, #24]	@ (8002c30 <I2C1_BusRecovery+0x108>)
 8002c18:	f002 fd0c 	bl	8005634 <HAL_GPIO_Init>

    // 6) Ri-inizializza l’I2C
    MX_I2C1_Init();
 8002c1c:	f7fe fbae 	bl	800137c <MX_I2C1_Init>
}
 8002c20:	bf00      	nop
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	200005f4 	.word	0x200005f4
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020400 	.word	0x40020400

08002c34 <Robot_init>:


void Robot_init(robot_t *robot) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim6);						// Display timer (0.1MHz)
 8002c3c:	4833      	ldr	r0, [pc, #204]	@ (8002d0c <Robot_init+0xd8>)
 8002c3e:	f005 facb 	bl	80081d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);						// Timeline
 8002c42:	4833      	ldr	r0, [pc, #204]	@ (8002d10 <Robot_init+0xdc>)
 8002c44:	f005 fac8 	bl	80081d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);						// Stepper timer
 8002c48:	4832      	ldr	r0, [pc, #200]	@ (8002d14 <Robot_init+0xe0>)
 8002c4a:	f005 fac5 	bl	80081d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		// Encoder right
 8002c4e:	213c      	movs	r1, #60	@ 0x3c
 8002c50:	4831      	ldr	r0, [pc, #196]	@ (8002d18 <Robot_init+0xe4>)
 8002c52:	f005 fcef 	bl	8008634 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);		// Encoder left
 8002c56:	213c      	movs	r1, #60	@ 0x3c
 8002c58:	4830      	ldr	r0, [pc, #192]	@ (8002d1c <Robot_init+0xe8>)
 8002c5a:	f005 fceb 	bl	8008634 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);			// Stepper left
 8002c5e:	2104      	movs	r1, #4
 8002c60:	482f      	ldr	r0, [pc, #188]	@ (8002d20 <Robot_init+0xec>)
 8002c62:	f005 fb79 	bl	8008358 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);			// Stepper right
 8002c66:	2100      	movs	r1, #0
 8002c68:	482e      	ldr	r0, [pc, #184]	@ (8002d24 <Robot_init+0xf0>)
 8002c6a:	f005 fb75 	bl	8008358 <HAL_TIM_PWM_Start>

	MAX72_init(&display);
 8002c6e:	482e      	ldr	r0, [pc, #184]	@ (8002d28 <Robot_init+0xf4>)
 8002c70:	f000 fac0 	bl	80031f4 <MAX72_init>

	while(!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR)){
 8002c74:	e005      	b.n	8002c82 <Robot_init+0x4e>
		MAX72_Print_String("I2C", NO_SETTINGS);
 8002c76:	2100      	movs	r1, #0
 8002c78:	482c      	ldr	r0, [pc, #176]	@ (8002d2c <Robot_init+0xf8>)
 8002c7a:	f000 fd0b 	bl	8003694 <MAX72_Print_String>
		I2C1_BusRecovery(); // Attempt to recover I2C bus if IMU init fails
 8002c7e:	f7ff ff53 	bl	8002b28 <I2C1_BusRecovery>
	while(!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR)){
 8002c82:	22d0      	movs	r2, #208	@ 0xd0
 8002c84:	492a      	ldr	r1, [pc, #168]	@ (8002d30 <Robot_init+0xfc>)
 8002c86:	482b      	ldr	r0, [pc, #172]	@ (8002d34 <Robot_init+0x100>)
 8002c88:	f7ff fc84 	bl	8002594 <IMU_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f1      	beq.n	8002c76 <Robot_init+0x42>
	}
	MAX72_Clear();
 8002c92:	f000 fb51 	bl	8003338 <MAX72_Clear>
    robot->imu = &imu;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a26      	ldr	r2, [pc, #152]	@ (8002d34 <Robot_init+0x100>)
 8002c9a:	601a      	str	r2, [r3, #0]

	Encoder_init(&encoder_l, &htim3, &htim7, -1);
 8002c9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d10 <Robot_init+0xdc>)
 8002ca2:	491d      	ldr	r1, [pc, #116]	@ (8002d18 <Robot_init+0xe4>)
 8002ca4:	4824      	ldr	r0, [pc, #144]	@ (8002d38 <Robot_init+0x104>)
 8002ca6:	f7ff fc33 	bl	8002510 <Encoder_init>
    robot->encoder_l = &encoder_l;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a22      	ldr	r2, [pc, #136]	@ (8002d38 <Robot_init+0x104>)
 8002cae:	605a      	str	r2, [r3, #4]
	Stepper_init(&stepper_l, &htim5, TIM_CHANNEL_1, &encoder_l, GPIOA, GPIO_PIN_4);
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	4b21      	ldr	r3, [pc, #132]	@ (8002d3c <Robot_init+0x108>)
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d38 <Robot_init+0x104>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	4919      	ldr	r1, [pc, #100]	@ (8002d24 <Robot_init+0xf0>)
 8002cbe:	4820      	ldr	r0, [pc, #128]	@ (8002d40 <Robot_init+0x10c>)
 8002cc0:	f000 fa24 	bl	800310c <Stepper_init>
    robot->stepper_l = &stepper_l;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d40 <Robot_init+0x10c>)
 8002cc8:	60da      	str	r2, [r3, #12]
	Encoder_init(&encoder_r, &htim4, &htim7, 1);
 8002cca:	2301      	movs	r3, #1
 8002ccc:	4a10      	ldr	r2, [pc, #64]	@ (8002d10 <Robot_init+0xdc>)
 8002cce:	4913      	ldr	r1, [pc, #76]	@ (8002d1c <Robot_init+0xe8>)
 8002cd0:	481c      	ldr	r0, [pc, #112]	@ (8002d44 <Robot_init+0x110>)
 8002cd2:	f7ff fc1d 	bl	8002510 <Encoder_init>
    robot->encoder_r = &encoder_r;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d44 <Robot_init+0x110>)
 8002cda:	609a      	str	r2, [r3, #8]
	Stepper_init(&stepper_r, &htim2, TIM_CHANNEL_2, &encoder_r, GPIOB, GPIO_PIN_0);
 8002cdc:	2301      	movs	r3, #1
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <Robot_init+0x114>)
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4b17      	ldr	r3, [pc, #92]	@ (8002d44 <Robot_init+0x110>)
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	490d      	ldr	r1, [pc, #52]	@ (8002d20 <Robot_init+0xec>)
 8002cea:	4818      	ldr	r0, [pc, #96]	@ (8002d4c <Robot_init+0x118>)
 8002cec:	f000 fa0e 	bl	800310c <Stepper_init>
    robot->stepper_r = &stepper_r;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a16      	ldr	r2, [pc, #88]	@ (8002d4c <Robot_init+0x118>)
 8002cf4:	611a      	str	r2, [r3, #16]

	PowerModule_init(&power_module, &hadc1);
 8002cf6:	4916      	ldr	r1, [pc, #88]	@ (8002d50 <Robot_init+0x11c>)
 8002cf8:	4816      	ldr	r0, [pc, #88]	@ (8002d54 <Robot_init+0x120>)
 8002cfa:	f7ff fea1 	bl	8002a40 <PowerModule_init>

    PID_Init(&pid);
 8002cfe:	4816      	ldr	r0, [pc, #88]	@ (8002d58 <Robot_init+0x124>)
 8002d00:	f000 f82c 	bl	8002d5c <PID_Init>
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20000840 	.word	0x20000840
 8002d10:	20000888 	.word	0x20000888
 8002d14:	200008d0 	.word	0x200008d0
 8002d18:	20000768 	.word	0x20000768
 8002d1c:	200007b0 	.word	0x200007b0
 8002d20:	20000720 	.word	0x20000720
 8002d24:	200007f8 	.word	0x200007f8
 8002d28:	20000b08 	.word	0x20000b08
 8002d2c:	0800c708 	.word	0x0800c708
 8002d30:	200005f4 	.word	0x200005f4
 8002d34:	200009e0 	.word	0x200009e0
 8002d38:	200009a8 	.word	0x200009a8
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	200009bc 	.word	0x200009bc
 8002d44:	20000970 	.word	0x20000970
 8002d48:	40020400 	.word	0x40020400
 8002d4c:	20000984 	.word	0x20000984
 8002d50:	200005ac 	.word	0x200005ac
 8002d54:	20000a24 	.word	0x20000a24
 8002d58:	20000ad0 	.word	0x20000ad0

08002d5c <PID_Init>:
float last_error = 0.0f;
float derivative_error = 0.0f;
float last_speed_error = 0.0f;
float derivative_speed_error = 0.0f;

void PID_Init(pid_t *pid){
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	pid->Kp = -3.1f;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a11      	ldr	r2, [pc, #68]	@ (8002dac <PID_Init+0x50>)
 8002d68:	601a      	str	r2, [r3, #0]
	pid->Ki = -0.08f;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a10      	ldr	r2, [pc, #64]	@ (8002db0 <PID_Init+0x54>)
 8002d6e:	605a      	str	r2, [r3, #4]
	pid->Kd = -0.011f;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a10      	ldr	r2, [pc, #64]	@ (8002db4 <PID_Init+0x58>)
 8002d74:	609a      	str	r2, [r3, #8]
    pid->Vp = 0.0f;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
    pid->Vi = 0.0f;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
    pid->Vd = 0.0f;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	615a      	str	r2, [r3, #20]
	pid->angle_setpoint = -0.5f;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8002d94:	619a      	str	r2, [r3, #24]
    pid->speed_setpoint = 0.0f;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	61da      	str	r2, [r3, #28]
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	c0466666 	.word	0xc0466666
 8002db0:	bda3d70a 	.word	0xbda3d70a
 8002db4:	bc343958 	.word	0xbc343958

08002db8 <PID_Update>:

void PID_Update(pid_t *pid) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	float error = pid->angle_setpoint - imu.angle;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	ed93 7a06 	vldr	s14, [r3, #24]
 8002dc6:	4b45      	ldr	r3, [pc, #276]	@ (8002edc <PID_Update+0x124>)
 8002dc8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd0:	edc7 7a07 	vstr	s15, [r7, #28]
    float speed_error = pid->speed_setpoint - imu.wy; // Use angular velocity for speed error
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	ed93 7a07 	vldr	s14, [r3, #28]
 8002dda:	4b40      	ldr	r3, [pc, #256]	@ (8002edc <PID_Update+0x124>)
 8002ddc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002de0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de4:	edc7 7a06 	vstr	s15, [r7, #24]

    // Stop the motors if imu.angle is greater than 10 degrees
    if (fabs(error) > 20.0f) {
 8002de8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dec:	eef0 7ae7 	vabs.f32	s15, s15
 8002df0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfc:	dd0a      	ble.n	8002e14 <PID_Update+0x5c>
        set_speed(&stepper_l, 0.0f);
 8002dfe:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8002ee0 <PID_Update+0x128>
 8002e02:	4838      	ldr	r0, [pc, #224]	@ (8002ee4 <PID_Update+0x12c>)
 8002e04:	f000 f972 	bl	80030ec <set_speed>
        set_speed(&stepper_r, 0.0f);
 8002e08:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8002ee0 <PID_Update+0x128>
 8002e0c:	4836      	ldr	r0, [pc, #216]	@ (8002ee8 <PID_Update+0x130>)
 8002e0e:	f000 f96d 	bl	80030ec <set_speed>
        return;
 8002e12:	e060      	b.n	8002ed6 <PID_Update+0x11e>
    }
	integral_error += error;
 8002e14:	4b35      	ldr	r3, [pc, #212]	@ (8002eec <PID_Update+0x134>)
 8002e16:	ed93 7a00 	vldr	s14, [r3]
 8002e1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e22:	4b32      	ldr	r3, [pc, #200]	@ (8002eec <PID_Update+0x134>)
 8002e24:	edc3 7a00 	vstr	s15, [r3]
	derivative_error = (error - last_error)/SAMPLING_PERIOD;
 8002e28:	4b31      	ldr	r3, [pc, #196]	@ (8002ef0 <PID_Update+0x138>)
 8002e2a:	edd3 7a00 	vldr	s15, [r3]
 8002e2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e32:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002e36:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef4 <PID_Update+0x13c>)
 8002e38:	ed93 7a00 	vldr	s14, [r3]
 8002e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e40:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef8 <PID_Update+0x140>)
 8002e42:	edc3 7a00 	vstr	s15, [r3]
	derivative_speed_error = (speed_error - last_speed_error)/SAMPLING_PERIOD;
 8002e46:	4b2d      	ldr	r3, [pc, #180]	@ (8002efc <PID_Update+0x144>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e50:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002e54:	4b27      	ldr	r3, [pc, #156]	@ (8002ef4 <PID_Update+0x13c>)
 8002e56:	ed93 7a00 	vldr	s14, [r3]
 8002e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e5e:	4b28      	ldr	r3, [pc, #160]	@ (8002f00 <PID_Update+0x148>)
 8002e60:	edc3 7a00 	vstr	s15, [r3]

	float propotional_component = pid->Kp * error;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	edd3 7a00 	vldr	s15, [r3]
 8002e6a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e72:	edc7 7a05 	vstr	s15, [r7, #20]

	float integral_component = pid->Ki * integral_error;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eec <PID_Update+0x134>)
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e86:	edc7 7a04 	vstr	s15, [r7, #16]

	float derivative_component = pid->Kd * derivative_error;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e90:	4b19      	ldr	r3, [pc, #100]	@ (8002ef8 <PID_Update+0x140>)
 8002e92:	edd3 7a00 	vldr	s15, [r3]
 8002e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9a:	edc7 7a03 	vstr	s15, [r7, #12]
//
//	float vp_component = pid->Vp * speed_error * (1<= .5/fabs(imu.angle) ? 1 : .5/fabs(imu.angle));
//
//	float vd_component = pid->Vd * derivative_speed_error;

	float speed_setpoint = propotional_component + integral_component + derivative_component; // + vp_component + vd_component;
 8002e9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ea2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eaa:	ed97 7a03 	vldr	s14, [r7, #12]
 8002eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb2:	edc7 7a02 	vstr	s15, [r7, #8]

	set_speed(&stepper_l, speed_setpoint);
 8002eb6:	ed97 0a02 	vldr	s0, [r7, #8]
 8002eba:	480a      	ldr	r0, [pc, #40]	@ (8002ee4 <PID_Update+0x12c>)
 8002ebc:	f000 f916 	bl	80030ec <set_speed>
    set_speed(&stepper_r, speed_setpoint);
 8002ec0:	ed97 0a02 	vldr	s0, [r7, #8]
 8002ec4:	4808      	ldr	r0, [pc, #32]	@ (8002ee8 <PID_Update+0x130>)
 8002ec6:	f000 f911 	bl	80030ec <set_speed>

	last_error = error;
 8002eca:	4a09      	ldr	r2, [pc, #36]	@ (8002ef0 <PID_Update+0x138>)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	6013      	str	r3, [r2, #0]
	last_speed_error = speed_error;
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <PID_Update+0x144>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	6013      	str	r3, [r2, #0]
}
 8002ed6:	3720      	adds	r7, #32
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200009e0 	.word	0x200009e0
 8002ee0:	00000000 	.word	0x00000000
 8002ee4:	200009bc 	.word	0x200009bc
 8002ee8:	20000984 	.word	0x20000984
 8002eec:	20000af0 	.word	0x20000af0
 8002ef0:	20000af4 	.word	0x20000af4
 8002ef4:	20000968 	.word	0x20000968
 8002ef8:	20000af8 	.word	0x20000af8
 8002efc:	20000afc 	.word	0x20000afc
 8002f00:	20000b00 	.word	0x20000b00

08002f04 <speed_control>:
#define AEP 30 // Actual Error Proportional gain
#define LEP 205 // Last Error Proportional gain

float freq = 0.0f; // Frequency in Hz

void speed_control(stepper_t *stepper){
 8002f04:	b5b0      	push	{r4, r5, r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	Encoder_read(stepper->encoder);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff faeb 	bl	80024ec <Encoder_read>

	float e = stepper->setpoint_speed - stepper->encoder->speed;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f28:	edc7 7a03 	vstr	s15, [r7, #12]

	// stepper->frequency += e / ANGLE_STEP; // Integral only controller

	stepper->frequency += e * AEP + stepper->last_error * LEP; // PI controller
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f32:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f36:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8002f3a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	edd3 7a00 	vldr	s15, [r3]
 8002f44:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 80030d8 <speed_control+0x1d4>
 8002f48:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	edc3 7a03 	vstr	s15, [r3, #12]
	stepper->last_error = e;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	601a      	str	r2, [r3, #0]

	uint8_t sign = stepper->frequency > 0;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6e:	bfcc      	ite	gt
 8002f70:	2301      	movgt	r3, #1
 8002f72:	2300      	movle	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	72fb      	strb	r3, [r7, #11]

	freq = stepper->frequency; // Store frequency for debugging
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a57      	ldr	r2, [pc, #348]	@ (80030dc <speed_control+0x1d8>)
 8002f7e:	6013      	str	r3, [r2, #0]

	if (fabs(stepper->frequency) > MAX_CTRL_FREQUENCY) {
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f86:	eef0 7ae7 	vabs.f32	s15, s15
 8002f8a:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80030e0 <speed_control+0x1dc>
 8002f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f96:	dd3c      	ble.n	8003012 <speed_control+0x10e>
		stepper->frequency = MAX_CTRL_FREQUENCY * (sign?1:-1); // Limit frequency to 9000 Hz
 8002f98:	7afb      	ldrb	r3, [r7, #11]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <speed_control+0xa0>
 8002f9e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002fa2:	e001      	b.n	8002fa8 <speed_control+0xa4>
 8002fa4:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8002fa8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80030e0 <speed_control+0x1dc>
 8002fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	edc3 7a03 	vstr	s15, [r3, #12]
		stepper->last_error = (sign && stepper->last_error>0) || (!sign && stepper->last_error<0) ? 0 : stepper->last_error; // Reset last error if the direction has changed
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00f      	beq.n	8002fdc <speed_control+0xd8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fca:	bfcc      	ite	gt
 8002fcc:	2301      	movgt	r3, #1
 8002fce:	2300      	movle	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f083 0301 	eor.w	r3, r3, #1
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <speed_control+0x104>
 8002fdc:	7afb      	ldrb	r3, [r7, #11]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <speed_control+0xfe>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff0:	bf4c      	ite	mi
 8002ff2:	2301      	movmi	r3, #1
 8002ff4:	2300      	movpl	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f083 0301 	eor.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <speed_control+0x104>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	e001      	b.n	800300c <speed_control+0x108>
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	e00f      	b.n	8003032 <speed_control+0x12e>
	} else if (fabs(stepper->frequency) < 20) {
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	edd3 7a03 	vldr	s15, [r3, #12]
 8003018:	eef0 7ae7 	vabs.f32	s15, s15
 800301c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003028:	d503      	bpl.n	8003032 <speed_control+0x12e>
		stepper->frequency = 0; // Stop the motor if frequency is too low
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
	}

	HAL_GPIO_WritePin(stepper->DIR_PORT, stepper->DIR_PIN, (stepper->encoder->direction_invert > 0 ? sign : !sign));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69d8      	ldr	r0, [r3, #28]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	8c19      	ldrh	r1, [r3, #32]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	dc06      	bgt.n	8003054 <speed_control+0x150>
 8003046:	7afb      	ldrb	r3, [r7, #11]
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e000      	b.n	8003056 <speed_control+0x152>
 8003054:	7afb      	ldrb	r3, [r7, #11]
 8003056:	461a      	mov	r2, r3
 8003058:	f002 fc98 	bl	800598c <HAL_GPIO_WritePin>

	stepper->tim->ARR = fabs(1/stepper->frequency)*HCLK-1; // period = (1+ARR)*(1+PSC)/HCLK;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800306a:	eef0 7ae7 	vabs.f32	s15, s15
 800306e:	ee17 0a90 	vmov	r0, s15
 8003072:	f7fd fa99 	bl	80005a8 <__aeabi_f2d>
 8003076:	4604      	mov	r4, r0
 8003078:	460d      	mov	r5, r1
 800307a:	4b1a      	ldr	r3, [pc, #104]	@ (80030e4 <speed_control+0x1e0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd fa70 	bl	8000564 <__aeabi_ui2d>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4620      	mov	r0, r4
 800308a:	4629      	mov	r1, r5
 800308c:	f7fd fae4 	bl	8000658 <__aeabi_dmul>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <speed_control+0x1e4>)
 800309e:	f7fd f923 	bl	80002e8 <__aeabi_dsub>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695c      	ldr	r4, [r3, #20]
 80030ae:	f7fd fdab 	bl	8000c08 <__aeabi_d2uiz>
 80030b2:	4603      	mov	r3, r0
 80030b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
	*stepper->CCR = (stepper->tim->ARR+1)/2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	0852      	lsrs	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
	stepper->tim->EGR = TIM_EGR_UG;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2201      	movs	r2, #1
 80030cc:	615a      	str	r2, [r3, #20]
}
 80030ce:	bf00      	nop
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bdb0      	pop	{r4, r5, r7, pc}
 80030d6:	bf00      	nop
 80030d8:	434d0000 	.word	0x434d0000
 80030dc:	20000b04 	.word	0x20000b04
 80030e0:	460ca000 	.word	0x460ca000
 80030e4:	2000096c 	.word	0x2000096c
 80030e8:	3ff00000 	.word	0x3ff00000

080030ec <set_speed>:

void set_speed(stepper_t *stepper, float speed){
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	ed87 0a00 	vstr	s0, [r7]
	stepper->setpoint_speed = speed;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	609a      	str	r2, [r3, #8]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <Stepper_init>:

void Stepper_init(stepper_t *stepper, TIM_HandleTypeDef *htim, uint32_t tim_channel,
		encoder_t *encoder, GPIO_TypeDef *DIR_PORT, uint16_t DIR_PIN){
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
	stepper->angle_step = ANGLE_STEP;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4a34      	ldr	r2, [pc, #208]	@ (80031f0 <Stepper_init+0xe4>)
 800311e:	605a      	str	r2, [r3, #4]
	stepper->tim = htim->Instance;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	615a      	str	r2, [r3, #20]
	stepper->DIR_PORT = DIR_PORT;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	61da      	str	r2, [r3, #28]
	stepper->DIR_PIN = DIR_PIN;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8bba      	ldrh	r2, [r7, #28]
 8003132:	841a      	strh	r2, [r3, #32]
	switch (tim_channel){
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b0c      	cmp	r3, #12
 8003138:	d838      	bhi.n	80031ac <Stepper_init+0xa0>
 800313a:	a201      	add	r2, pc, #4	@ (adr r2, 8003140 <Stepper_init+0x34>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	08003175 	.word	0x08003175
 8003144:	080031ad 	.word	0x080031ad
 8003148:	080031ad 	.word	0x080031ad
 800314c:	080031ad 	.word	0x080031ad
 8003150:	08003183 	.word	0x08003183
 8003154:	080031ad 	.word	0x080031ad
 8003158:	080031ad 	.word	0x080031ad
 800315c:	080031ad 	.word	0x080031ad
 8003160:	08003191 	.word	0x08003191
 8003164:	080031ad 	.word	0x080031ad
 8003168:	080031ad 	.word	0x080031ad
 800316c:	080031ad 	.word	0x080031ad
 8003170:	0800319f 	.word	0x0800319f
	case TIM_CHANNEL_1:
		stepper->CCR = &stepper->tim->CCR1;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	619a      	str	r2, [r3, #24]
		break;
 8003180:	e018      	b.n	80031b4 <Stepper_init+0xa8>
	case TIM_CHANNEL_2:
		stepper->CCR = &stepper->tim->CCR2;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	619a      	str	r2, [r3, #24]
		break;
 800318e:	e011      	b.n	80031b4 <Stepper_init+0xa8>
	case TIM_CHANNEL_3:
		stepper->CCR = &stepper->tim->CCR3;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	619a      	str	r2, [r3, #24]
		break;
 800319c:	e00a      	b.n	80031b4 <Stepper_init+0xa8>
	case TIM_CHANNEL_4:
		stepper->CCR = &stepper->tim->CCR4;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	619a      	str	r2, [r3, #24]
		break;
 80031aa:	e003      	b.n	80031b4 <Stepper_init+0xa8>
	default:
		stepper->CCR = NULL;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	619a      	str	r2, [r3, #24]
		break;
 80031b2:	bf00      	nop
	}

	if (stepper->CCR != NULL)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <Stepper_init+0xb8>
		*stepper->CCR = 0; // Disattiva il PWM (duty cycle 0)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

	stepper->encoder = encoder;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	611a      	str	r2, [r3, #16]
	stepper->setpoint_speed = 0;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
	stepper->frequency = 0;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
	stepper->last_error = 0;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
}
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	3a80adff 	.word	0x3a80adff

080031f4 <MAX72_init>:
    {0x0C, 0x01}, // Shutdown Register: normal operation
    {0x0F, 0x00}  // Display Test: off
};

void MAX72_init(display_t *display)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[8];
    for (uint8_t cmd=0; cmd<5; cmd++) {
 80031fc:	2300      	movs	r3, #0
 80031fe:	75fb      	strb	r3, [r7, #23]
 8003200:	e035      	b.n	800326e <MAX72_init+0x7a>
        // riempi txBuf con 4 volte InitCommands[cmd]
        for (uint8_t dev=0; dev<4; dev++) {
 8003202:	2300      	movs	r3, #0
 8003204:	75bb      	strb	r3, [r7, #22]
 8003206:	e01a      	b.n	800323e <MAX72_init+0x4a>
            txBuf[dev*2]   = InitCommands[cmd][0];
 8003208:	7dfa      	ldrb	r2, [r7, #23]
 800320a:	7dbb      	ldrb	r3, [r7, #22]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4929      	ldr	r1, [pc, #164]	@ (80032b4 <MAX72_init+0xc0>)
 8003210:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8003214:	3318      	adds	r3, #24
 8003216:	443b      	add	r3, r7
 8003218:	f803 2c0c 	strb.w	r2, [r3, #-12]
            txBuf[dev*2+1] = InitCommands[cmd][1];
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	7dba      	ldrb	r2, [r7, #22]
 8003220:	0052      	lsls	r2, r2, #1
 8003222:	3201      	adds	r2, #1
 8003224:	4923      	ldr	r1, [pc, #140]	@ (80032b4 <MAX72_init+0xc0>)
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	440b      	add	r3, r1
 800322a:	7859      	ldrb	r1, [r3, #1]
 800322c:	f102 0318 	add.w	r3, r2, #24
 8003230:	443b      	add	r3, r7
 8003232:	460a      	mov	r2, r1
 8003234:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (uint8_t dev=0; dev<4; dev++) {
 8003238:	7dbb      	ldrb	r3, [r7, #22]
 800323a:	3301      	adds	r3, #1
 800323c:	75bb      	strb	r3, [r7, #22]
 800323e:	7dbb      	ldrb	r3, [r7, #22]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d9e1      	bls.n	8003208 <MAX72_init+0x14>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // CS
 8003244:	2200      	movs	r2, #0
 8003246:	2110      	movs	r1, #16
 8003248:	481b      	ldr	r0, [pc, #108]	@ (80032b8 <MAX72_init+0xc4>)
 800324a:	f002 fb9f 	bl	800598c <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 800324e:	f107 010c 	add.w	r1, r7, #12
 8003252:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003256:	2208      	movs	r2, #8
 8003258:	4818      	ldr	r0, [pc, #96]	@ (80032bc <MAX72_init+0xc8>)
 800325a:	f004 fd4c 	bl	8007cf6 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // CS
 800325e:	2201      	movs	r2, #1
 8003260:	2110      	movs	r1, #16
 8003262:	4815      	ldr	r0, [pc, #84]	@ (80032b8 <MAX72_init+0xc4>)
 8003264:	f002 fb92 	bl	800598c <HAL_GPIO_WritePin>
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	3301      	adds	r3, #1
 800326c:	75fb      	strb	r3, [r7, #23]
 800326e:	7dfb      	ldrb	r3, [r7, #23]
 8003270:	2b04      	cmp	r3, #4
 8003272:	d9c6      	bls.n	8003202 <MAX72_init+0xe>
    }

    display->data_count = 0; // Inizializza il numero di dati a 0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    display->current_index = 0; // Inizializza l'indice corrente a 0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    display->data_duration = 5; // Imposta la durata di visualizzazione a 5 secondi
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2205      	movs	r2, #5
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    display->change_enabled = 1; // Abilita il cambio automatico dei dati
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    display->update_enabled = 1; // Abilita l'aggiornamento automatico dei dati
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    display->last_change_time = HAL_GetTick(); // Inizializza il tempo dell'ultimo cambio a ora corrente
 800329c:	f001 f8da 	bl	8004454 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	649a      	str	r2, [r3, #72]	@ 0x48
    MAX72_Clear(); // Pulisce il display all'inizio
 80032a6:	f000 f847 	bl	8003338 <MAX72_Clear>
}
 80032aa:	bf00      	nop
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	0800c75c 	.word	0x0800c75c
 80032b8:	40020400 	.word	0x40020400
 80032bc:	200006c4 	.word	0x200006c4

080032c0 <MAX72_SendRow>:

void MAX72_SendRow(uint8_t row, uint8_t pattern[DEV_NUM])
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[8];
    // pattern[i] = dato per il modulo i
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 80032cc:	2300      	movs	r3, #0
 80032ce:	75fb      	strb	r3, [r7, #23]
 80032d0:	e014      	b.n	80032fc <MAX72_SendRow+0x3c>
        txBuf[dev*2]   = row;          // registro DIG[row]
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	3318      	adds	r3, #24
 80032d8:	443b      	add	r3, r7
 80032da:	79fa      	ldrb	r2, [r7, #7]
 80032dc:	f803 2c0c 	strb.w	r2, [r3, #-12]
        txBuf[dev*2+1] = pattern[dev]; // i‑esimo byte di dati
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	441a      	add	r2, r3
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	3301      	adds	r3, #1
 80032ec:	7812      	ldrb	r2, [r2, #0]
 80032ee:	3318      	adds	r3, #24
 80032f0:	443b      	add	r3, r7
 80032f2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	3301      	adds	r3, #1
 80032fa:	75fb      	strb	r3, [r7, #23]
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d9e7      	bls.n	80032d2 <MAX72_SendRow+0x12>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003302:	2200      	movs	r2, #0
 8003304:	2110      	movs	r1, #16
 8003306:	480a      	ldr	r0, [pc, #40]	@ (8003330 <MAX72_SendRow+0x70>)
 8003308:	f002 fb40 	bl	800598c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 800330c:	f107 010c 	add.w	r1, r7, #12
 8003310:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003314:	2208      	movs	r2, #8
 8003316:	4807      	ldr	r0, [pc, #28]	@ (8003334 <MAX72_SendRow+0x74>)
 8003318:	f004 fced 	bl	8007cf6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800331c:	2201      	movs	r2, #1
 800331e:	2110      	movs	r1, #16
 8003320:	4803      	ldr	r0, [pc, #12]	@ (8003330 <MAX72_SendRow+0x70>)
 8003322:	f002 fb33 	bl	800598c <HAL_GPIO_WritePin>
}
 8003326:	bf00      	nop
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40020400 	.word	0x40020400
 8003334:	200006c4 	.word	0x200006c4

08003338 <MAX72_Clear>:

void MAX72_Clear(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
	uint8_t emptyPattern[4] = {0, 0, 0, 0};
 800333e:	2300      	movs	r3, #0
 8003340:	603b      	str	r3, [r7, #0]
	    for (uint8_t row=1; row<=8; row++) {
 8003342:	2301      	movs	r3, #1
 8003344:	71fb      	strb	r3, [r7, #7]
 8003346:	e008      	b.n	800335a <MAX72_Clear+0x22>
	        MAX72_SendRow(row, emptyPattern);
 8003348:	463a      	mov	r2, r7
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff ffb6 	bl	80032c0 <MAX72_SendRow>
	    for (uint8_t row=1; row<=8; row++) {
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	3301      	adds	r3, #1
 8003358:	71fb      	strb	r3, [r7, #7]
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	2b08      	cmp	r3, #8
 800335e:	d9f3      	bls.n	8003348 <MAX72_Clear+0x10>
	    }
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <MAX72_Add_Data>:

void MAX72_Add_Data(display_t *display, display_data_t *data) {
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	6039      	str	r1, [r7, #0]
	if (display->data_count < MAX_DATA_LENGTH) {
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800337a:	2b07      	cmp	r3, #7
 800337c:	d813      	bhi.n	80033a6 <MAX72_Add_Data+0x3c>
		display->data[display->data_count] = *data; // Aggiungi i dati al display
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6839      	ldr	r1, [r7, #0]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	460a      	mov	r2, r1
 800338e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003392:	e883 0003 	stmia.w	r3, {r0, r1}
		display->data_count++; // Incrementa il conteggio dei dati
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800339c:	3301      	adds	r3, #1
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}

	if (display->data_count == 1) {
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d103      	bne.n	80033b8 <MAX72_Add_Data+0x4e>
		MAX72_Change_Data(display,1); // Se è il primo dato, aggiorna subito il display
 80033b0:	2101      	movs	r1, #1
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f904 	bl	80035c0 <MAX72_Change_Data>
	}
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <MAX72_Update_Data>:
			break; // Esci dal ciclo dopo aver rimosso il dato
		}
	}
}

void MAX72_Update_Data(display_t *display) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	if (display->data_count == 0 || !display->update_enabled) {
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80e8 	beq.w	80035a4 <MAX72_Update_Data+0x1e4>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80e2 	beq.w	80035a4 <MAX72_Update_Data+0x1e4>
		return; // Non ci sono dati da visualizzare
	}

	display_data_t *current_data = &display->data[display->current_index];
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4413      	add	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

	switch (current_data->settings) {
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	791b      	ldrb	r3, [r3, #4]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	f200 80df 	bhi.w	80035b6 <MAX72_Update_Data+0x1f6>
 80033f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003400 <MAX72_Update_Data+0x40>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003411 	.word	0x08003411
 8003404:	0800352d 	.word	0x0800352d
 8003408:	0800355d 	.word	0x0800355d
 800340c:	08003577 	.word	0x08003577
		case PRINT_INT:
			switch(current_data->type) {
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	799b      	ldrb	r3, [r3, #6]
 8003414:	2b09      	cmp	r3, #9
 8003416:	f200 80c7 	bhi.w	80035a8 <MAX72_Update_Data+0x1e8>
 800341a:	a201      	add	r2, pc, #4	@ (adr r2, 8003420 <MAX72_Update_Data+0x60>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003449 	.word	0x08003449
 8003424:	0800345d 	.word	0x0800345d
 8003428:	08003473 	.word	0x08003473
 800342c:	08003489 	.word	0x08003489
 8003430:	0800349f 	.word	0x0800349f
 8003434:	080034b5 	.word	0x080034b5
 8003438:	080034cd 	.word	0x080034cd
 800343c:	080034e5 	.word	0x080034e5
 8003440:	080034f9 	.word	0x080034f9
 8003444:	0800350f 	.word	0x0800350f
				case DISPLAY_TYPE_INT:
					MAX72_Print_Int(*(int *)current_data->data, current_data->string_settings);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	795b      	ldrb	r3, [r3, #5]
 8003452:	4619      	mov	r1, r3
 8003454:	4610      	mov	r0, r2
 8003456:	f000 fb9d 	bl	8003b94 <MAX72_Print_Int>
					break;
 800345a:	e066      	b.n	800352a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT8:
					MAX72_Print_Int((int)*(uint8_t *)current_data->data, current_data->string_settings);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	795b      	ldrb	r3, [r3, #5]
 8003468:	4619      	mov	r1, r3
 800346a:	4610      	mov	r0, r2
 800346c:	f000 fb92 	bl	8003b94 <MAX72_Print_Int>
					break;
 8003470:	e05b      	b.n	800352a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT16:
					MAX72_Print_Int((int)*(uint16_t *)current_data->data, current_data->string_settings);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	795b      	ldrb	r3, [r3, #5]
 800347e:	4619      	mov	r1, r3
 8003480:	4610      	mov	r0, r2
 8003482:	f000 fb87 	bl	8003b94 <MAX72_Print_Int>
					break;
 8003486:	e050      	b.n	800352a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT32:
					MAX72_Print_Int((int)*(uint32_t *)current_data->data, current_data->string_settings);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	795b      	ldrb	r3, [r3, #5]
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f000 fb7c 	bl	8003b94 <MAX72_Print_Int>
					break;
 800349c:	e045      	b.n	800352a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT64:
					MAX72_Print_Int((int)*(uint64_t *)current_data->data, current_data->string_settings);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	795b      	ldrb	r3, [r3, #5]
 80034aa:	4619      	mov	r1, r3
 80034ac:	4610      	mov	r0, r2
 80034ae:	f000 fb71 	bl	8003b94 <MAX72_Print_Int>
					break;
 80034b2:	e03a      	b.n	800352a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT8:
					MAX72_Print_Int(*(int8_t *)current_data->data, current_data->string_settings);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f993 3000 	ldrsb.w	r3, [r3]
 80034bc:	461a      	mov	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	795b      	ldrb	r3, [r3, #5]
 80034c2:	4619      	mov	r1, r3
 80034c4:	4610      	mov	r0, r2
 80034c6:	f000 fb65 	bl	8003b94 <MAX72_Print_Int>
					break;
 80034ca:	e02e      	b.n	800352a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT16:
					MAX72_Print_Int(*(int16_t *)current_data->data, current_data->string_settings);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d4:	461a      	mov	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	795b      	ldrb	r3, [r3, #5]
 80034da:	4619      	mov	r1, r3
 80034dc:	4610      	mov	r0, r2
 80034de:	f000 fb59 	bl	8003b94 <MAX72_Print_Int>
					break;
 80034e2:	e022      	b.n	800352a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT32:
					MAX72_Print_Int(*(int32_t *)current_data->data, current_data->string_settings);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	795b      	ldrb	r3, [r3, #5]
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f000 fb4f 	bl	8003b94 <MAX72_Print_Int>
					break;
 80034f6:	e018      	b.n	800352a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT64:
					MAX72_Print_Int(*(int64_t *)current_data->data, current_data->string_settings);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	795b      	ldrb	r3, [r3, #5]
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f000 fb44 	bl	8003b94 <MAX72_Print_Int>
					break;
 800350c:	e00d      	b.n	800352a <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_FLOAT:
					MAX72_Print_Int((int)*(float *)current_data->data, current_data->string_settings);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	edd3 7a00 	vldr	s15, [r3]
 8003516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	795b      	ldrb	r3, [r3, #5]
 800351e:	4619      	mov	r1, r3
 8003520:	ee17 0a90 	vmov	r0, s15
 8003524:	f000 fb36 	bl	8003b94 <MAX72_Print_Int>
					break;
 8003528:	bf00      	nop
			}
			break;
 800352a:	e03d      	b.n	80035a8 <MAX72_Update_Data+0x1e8>
		case PRINT_FLOAT:
			if (current_data->type == DISPLAY_TYPE_FLOAT) {
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	799b      	ldrb	r3, [r3, #6]
 8003530:	2b09      	cmp	r3, #9
 8003532:	d13b      	bne.n	80035ac <MAX72_Update_Data+0x1ec>
				MAX72_Print_Float(*(float *)current_data->data, current_data->float_decimals, current_data->string_settings == 2);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	edd3 7a00 	vldr	s15, [r3]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	79da      	ldrb	r2, [r3, #7]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	795b      	ldrb	r3, [r3, #5]
 8003544:	2b02      	cmp	r3, #2
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	eeb0 0a67 	vmov.f32	s0, s15
 8003556:	f000 fb79 	bl	8003c4c <MAX72_Print_Float>
			}
			break;
 800355a:	e027      	b.n	80035ac <MAX72_Update_Data+0x1ec>
		case PRINT_STRING:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	799b      	ldrb	r3, [r3, #6]
 8003560:	2b0a      	cmp	r3, #10
 8003562:	d125      	bne.n	80035b0 <MAX72_Update_Data+0x1f0>
				MAX72_Print_String((const char *)current_data->data, current_data->string_settings);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	795b      	ldrb	r3, [r3, #5]
 800356c:	4619      	mov	r1, r3
 800356e:	4610      	mov	r0, r2
 8003570:	f000 f890 	bl	8003694 <MAX72_Print_String>
			}
			break;
 8003574:	e01c      	b.n	80035b0 <MAX72_Update_Data+0x1f0>
		case PRINT_SCROLL:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	799b      	ldrb	r3, [r3, #6]
 800357a:	2b0a      	cmp	r3, #10
 800357c:	d11a      	bne.n	80035b4 <MAX72_Update_Data+0x1f4>
				// update scroll_state.updated if text has changed
				if (strcmp(scroll_state.text, (const char *)current_data->data) != 0) {
 800357e:	4b0f      	ldr	r3, [pc, #60]	@ (80035bc <MAX72_Update_Data+0x1fc>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4619      	mov	r1, r3
 8003588:	4610      	mov	r0, r2
 800358a:	f7fc fe41 	bl	8000210 <strcmp>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00f      	beq.n	80035b4 <MAX72_Update_Data+0x1f4>
					scroll_state.updated = 1; // Indica che il testo è stato aggiornato
 8003594:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <MAX72_Update_Data+0x1fc>)
 8003596:	2201      	movs	r2, #1
 8003598:	739a      	strb	r2, [r3, #14]

					scroll_state.text = (const char *)current_data->data;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a07      	ldr	r2, [pc, #28]	@ (80035bc <MAX72_Update_Data+0x1fc>)
 80035a0:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 80035a2:	e007      	b.n	80035b4 <MAX72_Update_Data+0x1f4>
		return; // Non ci sono dati da visualizzare
 80035a4:	bf00      	nop
 80035a6:	e006      	b.n	80035b6 <MAX72_Update_Data+0x1f6>
			break;
 80035a8:	bf00      	nop
 80035aa:	e004      	b.n	80035b6 <MAX72_Update_Data+0x1f6>
			break;
 80035ac:	bf00      	nop
 80035ae:	e002      	b.n	80035b6 <MAX72_Update_Data+0x1f6>
			break;
 80035b0:	bf00      	nop
 80035b2:	e000      	b.n	80035b6 <MAX72_Update_Data+0x1f6>
			break;
 80035b4:	bf00      	nop
	}
}
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000b74 	.word	0x20000b74

080035c0 <MAX72_Change_Data>:

void MAX72_Change_Data(display_t *display, uint8_t force_change) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
	if (display->data_count == 0 || (!display->change_enabled && !force_change)) {
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d055      	beq.n	8003682 <MAX72_Change_Data+0xc2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d102      	bne.n	80035e6 <MAX72_Change_Data+0x26>
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d04d      	beq.n	8003682 <MAX72_Change_Data+0xc2>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
	}

	uint32_t currentTime = HAL_GetTick();
 80035e6:	f000 ff35 	bl	8004454 <HAL_GetTick>
 80035ea:	60f8      	str	r0, [r7, #12]
	if (!force_change && currentTime - display->last_change_time < (uint32_t)display->data_duration * 1000) {
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10d      	bne.n	800360e <MAX72_Change_Data+0x4e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	1ad2      	subs	r2, r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003600:	4619      	mov	r1, r3
 8003602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	429a      	cmp	r2, r3
 800360c:	d33b      	bcc.n	8003686 <MAX72_Change_Data+0xc6>
		return;
	}
	display->current_index = (display->current_index + 1) % display->data_count;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003614:	3301      	adds	r3, #1
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 800361c:	fb93 f1f2 	sdiv	r1, r3, r2
 8003620:	fb01 f202 	mul.w	r2, r1, r2
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	b2da      	uxtb	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	display->last_change_time = currentTime;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	649a      	str	r2, [r3, #72]	@ 0x48

	if (display->data[display->current_index].settings == PRINT_SCROLL) {
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	791b      	ldrb	r3, [r3, #4]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d113      	bne.n	800366e <MAX72_Change_Data+0xae>
		if(!scroll_state.enabled || display->data_count > 1){
 8003646:	4b12      	ldr	r3, [pc, #72]	@ (8003690 <MAX72_Change_Data+0xd0>)
 8003648:	7b5b      	ldrb	r3, [r3, #13]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d004      	beq.n	8003658 <MAX72_Change_Data+0x98>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003654:	2b01      	cmp	r3, #1
 8003656:	d910      	bls.n	800367a <MAX72_Change_Data+0xba>
		MAX72_Scroll_Start_IT((const char *)display->data[display->current_index].data);}
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800365e:	461a      	mov	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fc5e 	bl	8003f28 <MAX72_Scroll_Start_IT>
 800366c:	e005      	b.n	800367a <MAX72_Change_Data+0xba>
	} else if (scroll_state.enabled) {
 800366e:	4b08      	ldr	r3, [pc, #32]	@ (8003690 <MAX72_Change_Data+0xd0>)
 8003670:	7b5b      	ldrb	r3, [r3, #13]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MAX72_Change_Data+0xba>
		MAX72_Scroll_Stop();
 8003676:	f000 fcbd 	bl	8003ff4 <MAX72_Scroll_Stop>
	}

	MAX72_Update_Data(display); // Aggiorna i dati visualizzati)
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff fea0 	bl	80033c0 <MAX72_Update_Data>
 8003680:	e002      	b.n	8003688 <MAX72_Change_Data+0xc8>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
 8003682:	bf00      	nop
 8003684:	e000      	b.n	8003688 <MAX72_Change_Data+0xc8>
		return;
 8003686:	bf00      	nop
}
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000b74 	.word	0x20000b74

08003694 <MAX72_Print_String>:
//        HAL_Delay(500);
//    }
//}

void MAX72_Print_String(const char *str, uint8_t settings)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b094      	sub	sp, #80	@ 0x50
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
    uint8_t len = strlen(str);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7fc fe15 	bl	80002d0 <strlen>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    if (settings == MINIDIGITS) {
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	f040 8119 	bne.w	80038e6 <MAX72_Print_String+0x252>
    	char padded[8] = {0};
 80036b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
    	        // Calcola padding all'inizio (right align)
    	        uint8_t start = (len < 8) ? (8 - len) : 0;
 80036be:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80036c2:	2b07      	cmp	r3, #7
 80036c4:	d805      	bhi.n	80036d2 <MAX72_Print_String+0x3e>
 80036c6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80036ca:	f1c3 0308 	rsb	r3, r3, #8
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	e000      	b.n	80036d4 <MAX72_Print_String+0x40>
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    	        // Spazi iniziali
    	        for (uint8_t i = 0; i < start; i++)
 80036d8:	2300      	movs	r3, #0
 80036da:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80036de:	e00b      	b.n	80036f8 <MAX72_Print_String+0x64>
    	            padded[i] = ' ';
 80036e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80036e4:	3350      	adds	r3, #80	@ 0x50
 80036e6:	443b      	add	r3, r7
 80036e8:	2220      	movs	r2, #32
 80036ea:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < start; i++)
 80036ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80036f2:	3301      	adds	r3, #1
 80036f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80036f8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80036fc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003700:	429a      	cmp	r2, r3
 8003702:	d3ed      	bcc.n	80036e0 <MAX72_Print_String+0x4c>
    	        // Copia la stringa
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8003704:	2300      	movs	r3, #0
 8003706:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800370a:	e012      	b.n	8003732 <MAX72_Print_String+0x9e>
    	            padded[start + i] = str[i];
 800370c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	441a      	add	r2, r3
 8003714:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8003718:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800371c:	440b      	add	r3, r1
 800371e:	7812      	ldrb	r2, [r2, #0]
 8003720:	3350      	adds	r3, #80	@ 0x50
 8003722:	443b      	add	r3, r7
 8003724:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8003728:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800372c:	3301      	adds	r3, #1
 800372e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8003732:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003736:	2b07      	cmp	r3, #7
 8003738:	d805      	bhi.n	8003746 <MAX72_Print_String+0xb2>
 800373a:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800373e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003742:	429a      	cmp	r2, r3
 8003744:	d3e2      	bcc.n	800370c <MAX72_Print_String+0x78>

        char reversed[8];
        for (uint8_t i = 0; i < 8; i++)
 8003746:	2300      	movs	r3, #0
 8003748:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800374c:	e012      	b.n	8003774 <MAX72_Print_String+0xe0>
            reversed[i] = padded[7 - i];
 800374e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003752:	f1c3 0207 	rsb	r2, r3, #7
 8003756:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800375a:	3250      	adds	r2, #80	@ 0x50
 800375c:	443a      	add	r2, r7
 800375e:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8003762:	3350      	adds	r3, #80	@ 0x50
 8003764:	443b      	add	r3, r7
 8003766:	f803 2c28 	strb.w	r2, [r3, #-40]
        for (uint8_t i = 0; i < 8; i++)
 800376a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800376e:	3301      	adds	r3, #1
 8003770:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8003774:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003778:	2b07      	cmp	r3, #7
 800377a:	d9e8      	bls.n	800374e <MAX72_Print_String+0xba>

        for (uint8_t row = 0; row < 8; row++) {
 800377c:	2300      	movs	r3, #0
 800377e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8003782:	e0aa      	b.n	80038da <MAX72_Print_String+0x246>
            uint8_t pat[4] = {0};
 8003784:	2300      	movs	r3, #0
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24

            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8003788:	2300      	movs	r3, #0
 800378a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800378e:	e090      	b.n	80038b2 <MAX72_Print_String+0x21e>
                uint8_t c1 = reversed[byte_idx * 2];
 8003790:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	3350      	adds	r3, #80	@ 0x50
 8003798:	443b      	add	r3, r7
 800379a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800379e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t c2 = reversed[byte_idx * 2 + 1];
 80037a2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	3301      	adds	r3, #1
 80037aa:	3350      	adds	r3, #80	@ 0x50
 80037ac:	443b      	add	r3, r7
 80037ae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037b2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                uint8_t char1_pattern = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                uint8_t char2_pattern = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                if (c1 >= '0' && c1 <= '9')
 80037c2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80037c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80037c8:	d913      	bls.n	80037f2 <MAX72_Print_String+0x15e>
 80037ca:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80037ce:	2b39      	cmp	r3, #57	@ 0x39
 80037d0:	d80f      	bhi.n	80037f2 <MAX72_Print_String+0x15e>
                    char1_pattern = DIGITS[c1 - '0' + 2][row] & 0x07;
 80037d2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80037d6:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 80037da:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80037de:	49cd      	ldr	r1, [pc, #820]	@ (8003b14 <MAX72_Print_String+0x480>)
 80037e0:	00d2      	lsls	r2, r2, #3
 80037e2:	440a      	add	r2, r1
 80037e4:	4413      	add	r3, r2
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 80037f0:	e019      	b.n	8003826 <MAX72_Print_String+0x192>
                else if (c1 == '-')
 80037f2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80037f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80037f8:	d109      	bne.n	800380e <MAX72_Print_String+0x17a>
                    char1_pattern = DIGITS[1][row] & 0x07;
 80037fa:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80037fe:	4ac5      	ldr	r2, [pc, #788]	@ (8003b14 <MAX72_Print_String+0x480>)
 8003800:	4413      	add	r3, r2
 8003802:	7a1b      	ldrb	r3, [r3, #8]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800380c:	e00b      	b.n	8003826 <MAX72_Print_String+0x192>
                else if (c1 == '.')
 800380e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003812:	2b2e      	cmp	r3, #46	@ 0x2e
 8003814:	d107      	bne.n	8003826 <MAX72_Print_String+0x192>
					char1_pattern = DIGITS[0][row] & 0x07;
 8003816:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800381a:	4abe      	ldr	r2, [pc, #760]	@ (8003b14 <MAX72_Print_String+0x480>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

                if (c2 >= '0' && c2 <= '9')
 8003826:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800382a:	2b2f      	cmp	r3, #47	@ 0x2f
 800382c:	d913      	bls.n	8003856 <MAX72_Print_String+0x1c2>
 800382e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003832:	2b39      	cmp	r3, #57	@ 0x39
 8003834:	d80f      	bhi.n	8003856 <MAX72_Print_String+0x1c2>
                    char2_pattern = DIGITS[c2 - '0' + 2][row] & 0x07;
 8003836:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800383a:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 800383e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003842:	49b4      	ldr	r1, [pc, #720]	@ (8003b14 <MAX72_Print_String+0x480>)
 8003844:	00d2      	lsls	r2, r2, #3
 8003846:	440a      	add	r2, r1
 8003848:	4413      	add	r3, r2
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8003854:	e019      	b.n	800388a <MAX72_Print_String+0x1f6>
                else if (c2 == '-')
 8003856:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800385a:	2b2d      	cmp	r3, #45	@ 0x2d
 800385c:	d109      	bne.n	8003872 <MAX72_Print_String+0x1de>
                    char2_pattern = DIGITS[1][row] & 0x07;
 800385e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003862:	4aac      	ldr	r2, [pc, #688]	@ (8003b14 <MAX72_Print_String+0x480>)
 8003864:	4413      	add	r3, r2
 8003866:	7a1b      	ldrb	r3, [r3, #8]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8003870:	e00b      	b.n	800388a <MAX72_Print_String+0x1f6>
                else if (c2 == '.')
 8003872:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003876:	2b2e      	cmp	r3, #46	@ 0x2e
 8003878:	d107      	bne.n	800388a <MAX72_Print_String+0x1f6>
                	char2_pattern = DIGITS[0][row] & 0x07;
 800387a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800387e:	4aa5      	ldr	r2, [pc, #660]	@ (8003b14 <MAX72_Print_String+0x480>)
 8003880:	5cd3      	ldrb	r3, [r2, r3]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                pat[byte_idx] = (char1_pattern << 4) | char2_pattern;
 800388a:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	b25a      	sxtb	r2, r3
 8003892:	f997 3049 	ldrsb.w	r3, [r7, #73]	@ 0x49
 8003896:	4313      	orrs	r3, r2
 8003898:	b25a      	sxtb	r2, r3
 800389a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	3350      	adds	r3, #80	@ 0x50
 80038a2:	443b      	add	r3, r7
 80038a4:	f803 2c2c 	strb.w	r2, [r3, #-44]
            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 80038a8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80038ac:	3301      	adds	r3, #1
 80038ae:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80038b2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	f67f af6a 	bls.w	8003790 <MAX72_Print_String+0xfc>
            }

            MAX72_SendRow(row + 1, pat);
 80038bc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80038c0:	3301      	adds	r3, #1
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80038c8:	4611      	mov	r1, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fcf8 	bl	80032c0 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 80038d0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80038d4:	3301      	adds	r3, #1
 80038d6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80038da:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80038de:	2b07      	cmp	r3, #7
 80038e0:	f67f af50 	bls.w	8003784 <MAX72_Print_String+0xf0>
            for (uint8_t i = 0; i < 4; i++)
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
            MAX72_SendRow(row + 1, pat);
        }
    }
}
 80038e4:	e150      	b.n	8003b88 <MAX72_Print_String+0x4f4>
    else if (settings == FLOAT) {
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	f040 80d1 	bne.w	8003a90 <MAX72_Print_String+0x3fc>
        char reversed[4] = {0};
 80038ee:	2300      	movs	r3, #0
 80038f0:	623b      	str	r3, [r7, #32]
        int8_t dot_pos = -1;
 80038f2:	23ff      	movs	r3, #255	@ 0xff
 80038f4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < len; i++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80038fe:	e010      	b.n	8003922 <MAX72_Print_String+0x28e>
            if (str[i] == '.') { dot_pos = i; break; }
 8003900:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b2e      	cmp	r3, #46	@ 0x2e
 800390c:	d104      	bne.n	8003918 <MAX72_Print_String+0x284>
 800390e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003912:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8003916:	e00a      	b.n	800392e <MAX72_Print_String+0x29a>
        for (uint8_t i = 0; i < len; i++)
 8003918:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800391c:	3301      	adds	r3, #1
 800391e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003922:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003926:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800392a:	429a      	cmp	r2, r3
 800392c:	d3e8      	bcc.n	8003900 <MAX72_Print_String+0x26c>
        char no_dot_str[5] = {0};
 800392e:	f107 0318 	add.w	r3, r7, #24
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	711a      	strb	r2, [r3, #4]
        uint8_t no_dot_len = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 800393e:	2300      	movs	r3, #0
 8003940:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003944:	e019      	b.n	800397a <MAX72_Print_String+0x2e6>
            if (str[i] != '.') no_dot_str[no_dot_len++] = str[i];
 8003946:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b2e      	cmp	r3, #46	@ 0x2e
 8003952:	d00d      	beq.n	8003970 <MAX72_Print_String+0x2dc>
 8003954:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	441a      	add	r2, r3
 800395c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003960:	1c59      	adds	r1, r3, #1
 8003962:	f887 1046 	strb.w	r1, [r7, #70]	@ 0x46
 8003966:	7812      	ldrb	r2, [r2, #0]
 8003968:	3350      	adds	r3, #80	@ 0x50
 800396a:	443b      	add	r3, r7
 800396c:	f803 2c38 	strb.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 8003970:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003974:	3301      	adds	r3, #1
 8003976:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800397a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800397e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003982:	429a      	cmp	r2, r3
 8003984:	d203      	bcs.n	800398e <MAX72_Print_String+0x2fa>
 8003986:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800398a:	2b03      	cmp	r3, #3
 800398c:	d9db      	bls.n	8003946 <MAX72_Print_String+0x2b2>
        dot_pos = no_dot_len - dot_pos - 1;
 800398e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003992:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < 4; i++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80039a8:	e01c      	b.n	80039e4 <MAX72_Print_String+0x350>
            reversed[i] = (i < no_dot_len) ? no_dot_str[no_dot_len - 1 - i] : ' ';
 80039aa:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80039ae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d20a      	bcs.n	80039cc <MAX72_Print_String+0x338>
 80039b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80039ba:	1e5a      	subs	r2, r3, #1
 80039bc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	3350      	adds	r3, #80	@ 0x50
 80039c4:	443b      	add	r3, r7
 80039c6:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80039ca:	e000      	b.n	80039ce <MAX72_Print_String+0x33a>
 80039cc:	2220      	movs	r2, #32
 80039ce:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80039d2:	3350      	adds	r3, #80	@ 0x50
 80039d4:	443b      	add	r3, r7
 80039d6:	f803 2c30 	strb.w	r2, [r3, #-48]
        for (uint8_t i = 0; i < 4; i++)
 80039da:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80039de:	3301      	adds	r3, #1
 80039e0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80039e4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d9de      	bls.n	80039aa <MAX72_Print_String+0x316>
        for (uint8_t row = 0; row < 8; row++) {
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80039f2:	e048      	b.n	8003a86 <MAX72_Print_String+0x3f2>
            for (uint8_t i = 0; i < 4; i++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80039fa:	e01e      	b.n	8003a3a <MAX72_Print_String+0x3a6>
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 80039fc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003a00:	3350      	adds	r3, #80	@ 0x50
 8003a02:	443b      	add	r3, r7
 8003a04:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003a08:	f1a3 0220 	sub.w	r2, r3, #32
 8003a0c:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 8003a10:	4841      	ldr	r0, [pc, #260]	@ (8003b18 <MAX72_Print_String+0x484>)
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	4403      	add	r3, r0
 8003a1a:	440b      	add	r3, r1
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003a24:	00d2      	lsls	r2, r2, #3
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	3350      	adds	r3, #80	@ 0x50
 8003a2a:	443b      	add	r3, r7
 8003a2c:	f803 2c3c 	strb.w	r2, [r3, #-60]
            for (uint8_t i = 0; i < 4; i++)
 8003a30:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003a34:	3301      	adds	r3, #1
 8003a36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003a3a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d9dc      	bls.n	80039fc <MAX72_Print_String+0x368>
            if (row == 0) pat[dot_pos] |= 0b010;
 8003a42:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10e      	bne.n	8003a68 <MAX72_Print_String+0x3d4>
 8003a4a:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8003a4e:	3350      	adds	r3, #80	@ 0x50
 8003a50:	443b      	add	r3, r7
 8003a52:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8003a56:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8003a5a:	f042 0202 	orr.w	r2, r2, #2
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	3350      	adds	r3, #80	@ 0x50
 8003a62:	443b      	add	r3, r7
 8003a64:	f803 2c3c 	strb.w	r2, [r3, #-60]
            MAX72_SendRow(row + 1, pat);
 8003a68:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f107 0214 	add.w	r2, r7, #20
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fc22 	bl	80032c0 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8003a7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003a80:	3301      	adds	r3, #1
 8003a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003a8a:	2b07      	cmp	r3, #7
 8003a8c:	d9b2      	bls.n	80039f4 <MAX72_Print_String+0x360>
}
 8003a8e:	e07b      	b.n	8003b88 <MAX72_Print_String+0x4f4>
        char reversed[4] = {0};
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8003a9a:	e014      	b.n	8003ac6 <MAX72_Print_String+0x432>
            reversed[i] = str[len - 1 - i];
 8003a9c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003aa0:	1e5a      	subs	r2, r3, #1
 8003aa2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	441a      	add	r2, r3
 8003aae:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003ab2:	7812      	ldrb	r2, [r2, #0]
 8003ab4:	3350      	adds	r3, #80	@ 0x50
 8003ab6:	443b      	add	r3, r7
 8003ab8:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 8003abc:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8003ac6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d805      	bhi.n	8003ada <MAX72_Print_String+0x446>
 8003ace:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8003ad2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d3e0      	bcc.n	8003a9c <MAX72_Print_String+0x408>
        for (uint8_t i = len; i < 4; i++)
 8003ada:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003ade:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8003ae2:	e00b      	b.n	8003afc <MAX72_Print_String+0x468>
            reversed[i] = ' ';
 8003ae4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003ae8:	3350      	adds	r3, #80	@ 0x50
 8003aea:	443b      	add	r3, r7
 8003aec:	2220      	movs	r2, #32
 8003aee:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = len; i < 4; i++)
 8003af2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003af6:	3301      	adds	r3, #1
 8003af8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8003afc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d9ef      	bls.n	8003ae4 <MAX72_Print_String+0x450>
        for (uint8_t row = 0; row < 8; row++) {
 8003b04:	2300      	movs	r3, #0
 8003b06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003b0a:	e039      	b.n	8003b80 <MAX72_Print_String+0x4ec>
            for (uint8_t i = 0; i < 4; i++)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8003b12:	e022      	b.n	8003b5a <MAX72_Print_String+0x4c6>
 8003b14:	20000360 	.word	0x20000360
 8003b18:	20000008 	.word	0x20000008
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 8003b1c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003b20:	3350      	adds	r3, #80	@ 0x50
 8003b22:	443b      	add	r3, r7
 8003b24:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8003b28:	f1a3 0220 	sub.w	r2, r3, #32
 8003b2c:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8003b30:	4817      	ldr	r0, [pc, #92]	@ (8003b90 <MAX72_Print_String+0x4fc>)
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4413      	add	r3, r2
 8003b38:	4403      	add	r3, r0
 8003b3a:	440b      	add	r3, r1
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003b44:	00d2      	lsls	r2, r2, #3
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	3350      	adds	r3, #80	@ 0x50
 8003b4a:	443b      	add	r3, r7
 8003b4c:	f803 2c44 	strb.w	r2, [r3, #-68]
            for (uint8_t i = 0; i < 4; i++)
 8003b50:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003b54:	3301      	adds	r3, #1
 8003b56:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8003b5a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d9dc      	bls.n	8003b1c <MAX72_Print_String+0x488>
            MAX72_SendRow(row + 1, pat);
 8003b62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003b66:	3301      	adds	r3, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	f107 020c 	add.w	r2, r7, #12
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fba5 	bl	80032c0 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8003b76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003b80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003b84:	2b07      	cmp	r3, #7
 8003b86:	d9c1      	bls.n	8003b0c <MAX72_Print_String+0x478>
}
 8003b88:	bf00      	nop
 8003b8a:	3750      	adds	r7, #80	@ 0x50
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000008 	.word	0x20000008

08003b94 <MAX72_Print_Int>:


void MAX72_Print_Int(int num, uint8_t minidigits)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]
    char sign = num < 0 ? '-' : '\0';
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	da01      	bge.n	8003baa <MAX72_Print_Int+0x16>
 8003ba6:	232d      	movs	r3, #45	@ 0x2d
 8003ba8:	e000      	b.n	8003bac <MAX72_Print_Int+0x18>
 8003baa:	2300      	movs	r3, #0
 8003bac:	74fb      	strb	r3, [r7, #19]
    unsigned u = (num < 0) ? (unsigned) (-num) : (unsigned) num;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bfb8      	it	lt
 8003bb4:	425b      	neglt	r3, r3
 8003bb6:	617b      	str	r3, [r7, #20]

    char str[9]; // 8 digits + null terminator
    if (minidigits) {
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00d      	beq.n	8003bda <MAX72_Print_Int+0x46>
        // segno + 7 cifre (tot 8): taglia alle ultime 7
        u %= sign=='-'?10000000u:100000000u;
 8003bbe:	7cfb      	ldrb	r3, [r7, #19]
 8003bc0:	2b2d      	cmp	r3, #45	@ 0x2d
 8003bc2:	d101      	bne.n	8003bc8 <MAX72_Print_Int+0x34>
 8003bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c3c <MAX72_Print_Int+0xa8>)
 8003bc6:	e000      	b.n	8003bca <MAX72_Print_Int+0x36>
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c40 <MAX72_Print_Int+0xac>)
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	fbb2 f1f3 	udiv	r1, r2, r3
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	e00e      	b.n	8003bf8 <MAX72_Print_Int+0x64>
    } else {
        // segno + 3 cifre (tot 4): taglia alle ultime 3
        u %= sign=='-'?1000u:10000u;
 8003bda:	7cfb      	ldrb	r3, [r7, #19]
 8003bdc:	2b2d      	cmp	r3, #45	@ 0x2d
 8003bde:	d102      	bne.n	8003be6 <MAX72_Print_Int+0x52>
 8003be0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003be4:	e001      	b.n	8003bea <MAX72_Print_Int+0x56>
 8003be6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	fbb2 f1f3 	udiv	r1, r2, r3
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	617b      	str	r3, [r7, #20]
    }

    if (sign == '-'){
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	2b2d      	cmp	r3, #45	@ 0x2d
 8003bfc:	d107      	bne.n	8003c0e <MAX72_Print_Int+0x7a>
    	snprintf(str, sizeof(str), "-%u", u);
 8003bfe:	f107 0008 	add.w	r0, r7, #8
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	4a0f      	ldr	r2, [pc, #60]	@ (8003c44 <MAX72_Print_Int+0xb0>)
 8003c06:	2109      	movs	r1, #9
 8003c08:	f006 fa64 	bl	800a0d4 <sniprintf>
 8003c0c:	e006      	b.n	8003c1c <MAX72_Print_Int+0x88>
    } else {
    	snprintf(str, sizeof(str), "%u", u);
 8003c0e:	f107 0008 	add.w	r0, r7, #8
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	4a0c      	ldr	r2, [pc, #48]	@ (8003c48 <MAX72_Print_Int+0xb4>)
 8003c16:	2109      	movs	r1, #9
 8003c18:	f006 fa5c 	bl	800a0d4 <sniprintf>
    }


    MAX72_Print_String(str, minidigits ? MINIDIGITS : NO_SETTINGS);
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MAX72_Print_Int+0x92>
 8003c22:	2202      	movs	r2, #2
 8003c24:	e000      	b.n	8003c28 <MAX72_Print_Int+0x94>
 8003c26:	2200      	movs	r2, #0
 8003c28:	f107 0308 	add.w	r3, r7, #8
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fd30 	bl	8003694 <MAX72_Print_String>
//    MAX72_Print_String(str);
}
 8003c34:	bf00      	nop
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	00989680 	.word	0x00989680
 8003c40:	05f5e100 	.word	0x05f5e100
 8003c44:	0800c70c 	.word	0x0800c70c
 8003c48:	0800c710 	.word	0x0800c710

08003c4c <MAX72_Print_Float>:

void MAX72_Print_Float(float num, uint8_t decimals, uint8_t minidigits) {
 8003c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c50:	b095      	sub	sp, #84	@ 0x54
 8003c52:	af04      	add	r7, sp, #16
 8003c54:	ed87 0a01 	vstr	s0, [r7, #4]
 8003c58:	4603      	mov	r3, r0
 8003c5a:	460a      	mov	r2, r1
 8003c5c:	70fb      	strb	r3, [r7, #3]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	70bb      	strb	r3, [r7, #2]
 8003c62:	466b      	mov	r3, sp
 8003c64:	461e      	mov	r6, r3
    uint8_t max_chars = 8;
 8003c66:	2308      	movs	r3, #8
 8003c68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char str[max_chars + 1]; // +1 for null terminator
 8003c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c70:	1c59      	adds	r1, r3, #1
 8003c72:	1e4b      	subs	r3, r1, #1
 8003c74:	623b      	str	r3, [r7, #32]
 8003c76:	460a      	mov	r2, r1
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	4699      	mov	r9, r3
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c92:	460a      	mov	r2, r1
 8003c94:	2300      	movs	r3, #0
 8003c96:	4614      	mov	r4, r2
 8003c98:	461d      	mov	r5, r3
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	00eb      	lsls	r3, r5, #3
 8003ca4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca8:	00e2      	lsls	r2, r4, #3
 8003caa:	460b      	mov	r3, r1
 8003cac:	3307      	adds	r3, #7
 8003cae:	08db      	lsrs	r3, r3, #3
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	ebad 0d03 	sub.w	sp, sp, r3
 8003cb6:	ab04      	add	r3, sp, #16
 8003cb8:	3300      	adds	r3, #0
 8003cba:	61fb      	str	r3, [r7, #28]

    // Gestione del segno
    char sign = (num < 0) ? '-' : '\0';
 8003cbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc8:	d501      	bpl.n	8003cce <MAX72_Print_Float+0x82>
 8003cca:	232d      	movs	r3, #45	@ 0x2d
 8003ccc:	e000      	b.n	8003cd0 <MAX72_Print_Float+0x84>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	76fb      	strb	r3, [r7, #27]
    float abs_num = (num < 0) ? -num : num;
 8003cd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cde:	d504      	bpl.n	8003cea <MAX72_Print_Float+0x9e>
 8003ce0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ce4:	eef1 7a67 	vneg.f32	s15, s15
 8003ce8:	e001      	b.n	8003cee <MAX72_Print_Float+0xa2>
 8003cea:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cee:	edc7 7a05 	vstr	s15, [r7, #20]

    // Separa parte intera e decimale
    unsigned int_part = (unsigned) abs_num;
 8003cf2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cfa:	ee17 3a90 	vmov	r3, s15
 8003cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float frac_part = abs_num - int_part;
 8003d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d12:	edc7 7a04 	vstr	s15, [r7, #16]


    // Calcola quanti caratteri servono per la parte intera
    uint8_t int_digits = (int_part == 0) ? 0 : 1;
 8003d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf14      	ite	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	2300      	moveq	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    unsigned temp = int_part;
 8003d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d28:	637b      	str	r3, [r7, #52]	@ 0x34
    while (temp >= 10) {
 8003d2a:	e00a      	b.n	8003d42 <MAX72_Print_Float+0xf6>
        temp /= 10;
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2e:	4a5d      	ldr	r2, [pc, #372]	@ (8003ea4 <MAX72_Print_Float+0x258>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	08db      	lsrs	r3, r3, #3
 8003d36:	637b      	str	r3, [r7, #52]	@ 0x34
        int_digits++;
 8003d38:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    while (temp >= 10) {
 8003d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d44:	2b09      	cmp	r3, #9
 8003d46:	d8f1      	bhi.n	8003d2c <MAX72_Print_Float+0xe0>
    }

    // Calcola spazio disponibile per decimali
    uint8_t available_for_decimals = max_chars - (sign != '\0' ? 1 : 0) - int_digits - 1; // -1 per il punto decimale
 8003d48:	7efb      	ldrb	r3, [r7, #27]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bf14      	ite	ne
 8003d4e:	2301      	movne	r3, #1
 8003d50:	2300      	moveq	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]

    // Limita i decimali al minimo tra quelli richiesti e quelli disponibili
    uint8_t actual_decimals = (decimals < available_for_decimals) ? decimals : available_for_decimals;
 8003d6a:	7bfa      	ldrb	r2, [r7, #15]
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	bf28      	it	cs
 8003d72:	4613      	movcs	r3, r2
 8003d74:	73bb      	strb	r3, [r7, #14]

    // Se non c'è spazio nemmeno per un decimale, mostra solo la parte intera
    if (available_for_decimals == 0) {
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d11b      	bne.n	8003db4 <MAX72_Print_Float+0x168>
        if (int_part == 0) {
 8003d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <MAX72_Print_Float+0x144>
            snprintf(str, sizeof(str), "0");
 8003d82:	460b      	mov	r3, r1
 8003d84:	4a48      	ldr	r2, [pc, #288]	@ (8003ea8 <MAX72_Print_Float+0x25c>)
 8003d86:	4619      	mov	r1, r3
 8003d88:	69f8      	ldr	r0, [r7, #28]
 8003d8a:	f006 f9a3 	bl	800a0d4 <sniprintf>
 8003d8e:	e079      	b.n	8003e84 <MAX72_Print_Float+0x238>
        } else {
            if (sign != '\0') {
 8003d90:	7efb      	ldrb	r3, [r7, #27]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d008      	beq.n	8003da8 <MAX72_Print_Float+0x15c>
                snprintf(str, sizeof(str), "%c%u", sign, int_part);
 8003d96:	7efa      	ldrb	r2, [r7, #27]
 8003d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	4a43      	ldr	r2, [pc, #268]	@ (8003eac <MAX72_Print_Float+0x260>)
 8003da0:	69f8      	ldr	r0, [r7, #28]
 8003da2:	f006 f997 	bl	800a0d4 <sniprintf>
 8003da6:	e06d      	b.n	8003e84 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u", int_part);
 8003da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003daa:	4a41      	ldr	r2, [pc, #260]	@ (8003eb0 <MAX72_Print_Float+0x264>)
 8003dac:	69f8      	ldr	r0, [r7, #28]
 8003dae:	f006 f991 	bl	800a0d4 <sniprintf>
 8003db2:	e067      	b.n	8003e84 <MAX72_Print_Float+0x238>
            }
        }
    } else {
        // Calcola il moltiplicatore per i decimali
        unsigned multiplier = 1;
 8003db4:	2301      	movs	r3, #1
 8003db6:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003dbe:	e00a      	b.n	8003dd6 <MAX72_Print_Float+0x18a>
            multiplier *= 10;
 8003dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8003dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003dd6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003dda:	7bbb      	ldrb	r3, [r7, #14]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d3ef      	bcc.n	8003dc0 <MAX72_Print_Float+0x174>
        }

        // Arrotonda la parte frazionaria
        unsigned frac_digits = (unsigned) (frac_part * multiplier + 0.5f);
 8003de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dea:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003df6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dfe:	ee17 3a90 	vmov	r3, s15
 8003e02:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Gestisce il caso di overflow nell'arrotondamento
        if (frac_digits >= multiplier) {
 8003e04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d304      	bcc.n	8003e16 <MAX72_Print_Float+0x1ca>
            int_part++;
 8003e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e0e:	3301      	adds	r3, #1
 8003e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
            frac_digits = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Costruisce la stringa
        if (int_part == 0) {
 8003e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d118      	bne.n	8003e4e <MAX72_Print_Float+0x202>
            // Omette la parte intera se è 0
            if (sign != '\0') {
 8003e1c:	7efb      	ldrb	r3, [r7, #27]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00c      	beq.n	8003e3c <MAX72_Print_Float+0x1f0>
                snprintf(str, sizeof(str), "%c.%0*u", sign, actual_decimals, frac_digits);
 8003e22:	4608      	mov	r0, r1
 8003e24:	7ef9      	ldrb	r1, [r7, #27]
 8003e26:	7bbb      	ldrb	r3, [r7, #14]
 8003e28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e2a:	9201      	str	r2, [sp, #4]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4a20      	ldr	r2, [pc, #128]	@ (8003eb4 <MAX72_Print_Float+0x268>)
 8003e32:	4601      	mov	r1, r0
 8003e34:	69f8      	ldr	r0, [r7, #28]
 8003e36:	f006 f94d 	bl	800a0d4 <sniprintf>
 8003e3a:	e023      	b.n	8003e84 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), ".%0*u", actual_decimals, frac_digits);
 8003e3c:	7bba      	ldrb	r2, [r7, #14]
 8003e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	4613      	mov	r3, r2
 8003e44:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb8 <MAX72_Print_Float+0x26c>)
 8003e46:	69f8      	ldr	r0, [r7, #28]
 8003e48:	f006 f944 	bl	800a0d4 <sniprintf>
 8003e4c:	e01a      	b.n	8003e84 <MAX72_Print_Float+0x238>
            }
        } else {
            // Include la parte intera
            if (sign != '\0') {
 8003e4e:	7efb      	ldrb	r3, [r7, #27]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00e      	beq.n	8003e72 <MAX72_Print_Float+0x226>
                snprintf(str, sizeof(str), "%c%u.%0*u", sign, int_part, actual_decimals, frac_digits);
 8003e54:	4608      	mov	r0, r1
 8003e56:	7ef9      	ldrb	r1, [r7, #27]
 8003e58:	7bbb      	ldrb	r3, [r7, #14]
 8003e5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e5c:	9202      	str	r2, [sp, #8]
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	460b      	mov	r3, r1
 8003e66:	4a15      	ldr	r2, [pc, #84]	@ (8003ebc <MAX72_Print_Float+0x270>)
 8003e68:	4601      	mov	r1, r0
 8003e6a:	69f8      	ldr	r0, [r7, #28]
 8003e6c:	f006 f932 	bl	800a0d4 <sniprintf>
 8003e70:	e008      	b.n	8003e84 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u.%0*u", int_part, actual_decimals, frac_digits);
 8003e72:	7bbb      	ldrb	r3, [r7, #14]
 8003e74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e76:	9201      	str	r2, [sp, #4]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7c:	4a10      	ldr	r2, [pc, #64]	@ (8003ec0 <MAX72_Print_Float+0x274>)
 8003e7e:	69f8      	ldr	r0, [r7, #28]
 8003e80:	f006 f928 	bl	800a0d4 <sniprintf>
            }
        }
    }

    MAX72_Print_String(str, minidigits ? MINIDIGITS : FLOAT);
 8003e84:	78bb      	ldrb	r3, [r7, #2]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <MAX72_Print_Float+0x242>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e000      	b.n	8003e90 <MAX72_Print_Float+0x244>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	4619      	mov	r1, r3
 8003e92:	69f8      	ldr	r0, [r7, #28]
 8003e94:	f7ff fbfe 	bl	8003694 <MAX72_Print_String>
 8003e98:	46b5      	mov	sp, r6
//    MAX72_Print_String(str);
}
 8003e9a:	bf00      	nop
 8003e9c:	3744      	adds	r7, #68	@ 0x44
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ea4:	cccccccd 	.word	0xcccccccd
 8003ea8:	0800c714 	.word	0x0800c714
 8003eac:	0800c718 	.word	0x0800c718
 8003eb0:	0800c710 	.word	0x0800c710
 8003eb4:	0800c720 	.word	0x0800c720
 8003eb8:	0800c728 	.word	0x0800c728
 8003ebc:	0800c730 	.word	0x0800c730
 8003ec0:	0800c73c 	.word	0x0800c73c

08003ec4 <MAX72_SendFrame>:

// Buffer: 8 rows x DEV_NUM devices
static uint8_t frame[8][DEV_NUM];

// Send full frame to display (reversed order for correct cascade)
static void MAX72_SendFrame(void) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
    for (uint8_t row = 1; row <= 8; row++) {
 8003eca:	2301      	movs	r3, #1
 8003ecc:	71fb      	strb	r3, [r7, #7]
 8003ece:	e020      	b.n	8003f12 <MAX72_SendFrame+0x4e>
        uint8_t pattern[DEV_NUM];
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	71bb      	strb	r3, [r7, #6]
 8003ed4:	e011      	b.n	8003efa <MAX72_SendFrame+0x36>
            pattern[d] = frame[row-1][DEV_NUM - 1 - d];
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	1e59      	subs	r1, r3, #1
 8003eda:	79bb      	ldrb	r3, [r7, #6]
 8003edc:	f1c3 0203 	rsb	r2, r3, #3
 8003ee0:	79bb      	ldrb	r3, [r7, #6]
 8003ee2:	4810      	ldr	r0, [pc, #64]	@ (8003f24 <MAX72_SendFrame+0x60>)
 8003ee4:	0089      	lsls	r1, r1, #2
 8003ee6:	4401      	add	r1, r0
 8003ee8:	440a      	add	r2, r1
 8003eea:	7812      	ldrb	r2, [r2, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	443b      	add	r3, r7
 8003ef0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 8003ef4:	79bb      	ldrb	r3, [r7, #6]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	71bb      	strb	r3, [r7, #6]
 8003efa:	79bb      	ldrb	r3, [r7, #6]
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d9ea      	bls.n	8003ed6 <MAX72_SendFrame+0x12>
        }
        MAX72_SendRow(row, pattern);
 8003f00:	463a      	mov	r2, r7
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff f9da 	bl	80032c0 <MAX72_SendRow>
    for (uint8_t row = 1; row <= 8; row++) {
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	71fb      	strb	r3, [r7, #7]
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d9db      	bls.n	8003ed0 <MAX72_SendFrame+0xc>
    }
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000b54 	.word	0x20000b54

08003f28 <MAX72_Scroll_Start_IT>:
}

scroll_state_t scroll_state = {0};

// Inizializza lo scrolling con un nuovo testo
void MAX72_Scroll_Start_IT(const char *text) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
    // Pulisci il frame
    memset(frame, 0, sizeof(frame));
 8003f30:	2220      	movs	r2, #32
 8003f32:	2100      	movs	r1, #0
 8003f34:	482d      	ldr	r0, [pc, #180]	@ (8003fec <MAX72_Scroll_Start_IT+0xc4>)
 8003f36:	f006 f946 	bl	800a1c6 <memset>
    MAX72_SendFrame();
 8003f3a:	f7ff ffc3 	bl	8003ec4 <MAX72_SendFrame>

    // Inizializza lo stato - CAMBIATO: inizia dal primo carattere per scorrimento inverso
    scroll_state.text = text;
 8003f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6013      	str	r3, [r2, #0]
    scroll_state.current_char_idx = 0; // Inizia dal primo carattere
 8003f44:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	605a      	str	r2, [r3, #4]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003f4a:	4b29      	ldr	r3, [pc, #164]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a28      	ldr	r2, [pc, #160]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f50:	6852      	ldr	r2, [r2, #4]
 8003f52:	4413      	add	r3, r2
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b1f      	cmp	r3, #31
 8003f58:	d90e      	bls.n	8003f78 <MAX72_Scroll_Start_IT+0x50>
            scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8003f5a:	4b25      	ldr	r3, [pc, #148]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a24      	ldr	r2, [pc, #144]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f60:	6852      	ldr	r2, [r2, #4]
 8003f62:	4413      	add	r3, r2
 8003f64:	781b      	ldrb	r3, [r3, #0]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003f66:	2b7e      	cmp	r3, #126	@ 0x7e
 8003f68:	d806      	bhi.n	8003f78 <MAX72_Scroll_Start_IT+0x50>
            ' ' : scroll_state.text[scroll_state.current_char_idx];
 8003f6a:	4b21      	ldr	r3, [pc, #132]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a20      	ldr	r2, [pc, #128]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f70:	6852      	ldr	r2, [r2, #4]
 8003f72:	4413      	add	r3, r2
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	e000      	b.n	8003f7a <MAX72_Scroll_Start_IT+0x52>
 8003f78:	2320      	movs	r3, #32
 8003f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f7c:	7213      	strb	r3, [r2, #8]
    scroll_state.current_col = 0;
 8003f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	725a      	strb	r2, [r3, #9]
    scroll_state.spacing_counter = 0;
 8003f84:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	729a      	strb	r2, [r3, #10]
    scroll_state.padding_counter = 0;
 8003f8a:	4b19      	ldr	r3, [pc, #100]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	72da      	strb	r2, [r3, #11]
    scroll_state.state = 0; // Inizia con il primo carattere
 8003f90:	4b17      	ldr	r3, [pc, #92]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	731a      	strb	r2, [r3, #12]
    scroll_state.enabled = 1;
 8003f96:	4b16      	ldr	r3, [pc, #88]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	735a      	strb	r2, [r3, #13]
    scroll_state.updated = 0; // Indica che lo scrolling è stato aggiornato
 8003f9c:	4b14      	ldr	r3, [pc, #80]	@ (8003ff0 <MAX72_Scroll_Start_IT+0xc8>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	739a      	strb	r2, [r3, #14]

    uint8_t len = strlen(text);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fc f994 	bl	80002d0 <strlen>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = len * GLYPH_WIDTH + (len - 1) * CHAR_SPACING;
 8003fac:	7bbb      	ldrb	r3, [r7, #14]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	0052      	lsls	r2, r2, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	737b      	strb	r3, [r7, #13]
    uint8_t max_chars = ((DEV_NUM * 8 < temp) ? DEV_NUM*8 : temp) - 8; // Padding iniziale di 8 colonne
 8003fbc:	7b7b      	ldrb	r3, [r7, #13]
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	bf28      	it	cs
 8003fc2:	2320      	movcs	r3, #32
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	3b08      	subs	r3, #8
 8003fc8:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < max_chars; i++) {
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	e004      	b.n	8003fda <MAX72_Scroll_Start_IT+0xb2>
		MAX72_Scroll_Process(); // Processa il primo carattere per inizializzare il frame
 8003fd0:	f000 f81c 	bl	800400c <MAX72_Scroll_Process>
    for (uint8_t i = 0; i < max_chars; i++) {
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	7b3b      	ldrb	r3, [r7, #12]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d3f6      	bcc.n	8003fd0 <MAX72_Scroll_Start_IT+0xa8>
	}
}
 8003fe2:	bf00      	nop
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000b54 	.word	0x20000b54
 8003ff0:	20000b74 	.word	0x20000b74

08003ff4 <MAX72_Scroll_Stop>:

// Ferma lo scrolling
void MAX72_Scroll_Stop(void) {
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
    scroll_state.enabled = 0;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	@ (8004008 <MAX72_Scroll_Stop+0x14>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	735a      	strb	r2, [r3, #13]
}
 8003ffe:	bf00      	nop
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	20000b74 	.word	0x20000b74

0800400c <MAX72_Scroll_Process>:
void MAX72_Scroll_Resume(void) {
    scroll_state.enabled = 1;
}

// Funzione da chiamare nel main loop - NON bloccante
void MAX72_Scroll_Process(void) {
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b08b      	sub	sp, #44	@ 0x2c
 8004010:	af00      	add	r7, sp, #0
    if (!scroll_state.enabled || !scroll_state.text) return;
 8004012:	4b8a      	ldr	r3, [pc, #552]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004014:	7b5b      	ldrb	r3, [r3, #13]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8183 	beq.w	8004322 <MAX72_Scroll_Process+0x316>
 800401c:	4b87      	ldr	r3, [pc, #540]	@ (800423c <MAX72_Scroll_Process+0x230>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 817e 	beq.w	8004322 <MAX72_Scroll_Process+0x316>

    if (scroll_state.updated) {
 8004026:	4b85      	ldr	r3, [pc, #532]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004028:	7b9b      	ldrb	r3, [r3, #14]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <MAX72_Scroll_Process+0x28>
		// Se il testo è stato aggiornato, ricalcola il frame

    	// TODO RICALCOLO DEL FRAME AGGIORNATO, fino al carattere corrente

		scroll_state.updated = 0; // Reset flag
 800402e:	4b83      	ldr	r3, [pc, #524]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004030:	2200      	movs	r2, #0
 8004032:	739a      	strb	r2, [r3, #14]
	}

    switch (scroll_state.state) {
 8004034:	4b81      	ldr	r3, [pc, #516]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004036:	7b1b      	ldrb	r3, [r3, #12]
 8004038:	2b02      	cmp	r3, #2
 800403a:	f000 80f6 	beq.w	800422a <MAX72_Scroll_Process+0x21e>
 800403e:	2b02      	cmp	r3, #2
 8004040:	f300 816c 	bgt.w	800431c <MAX72_Scroll_Process+0x310>
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <MAX72_Scroll_Process+0x42>
 8004048:	2b01      	cmp	r3, #1
 800404a:	d072      	beq.n	8004132 <MAX72_Scroll_Process+0x126>
 800404c:	e166      	b.n	800431c <MAX72_Scroll_Process+0x310>
        case 0: // Processamento carattere
        {
            uint8_t ch = scroll_state.current_char;
 800404e:	4b7b      	ldr	r3, [pc, #492]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004050:	7a1b      	ldrb	r3, [r3, #8]
 8004052:	737b      	strb	r3, [r7, #13]
            uint8_t *glyph = LETTERS[ch - ' '].value;
 8004054:	7b7b      	ldrb	r3, [r7, #13]
 8004056:	f1a3 0220 	sub.w	r2, r3, #32
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	4a77      	ldr	r2, [pc, #476]	@ (8004240 <MAX72_Scroll_Process+0x234>)
 8004062:	4413      	add	r3, r2
 8004064:	3301      	adds	r3, #1
 8004066:	60bb      	str	r3, [r7, #8]

            // CAMBIATO: Shift verso destra (da destra verso sinistra)
            for (uint8_t row = 0; row < 8; row++) {
 8004068:	2300      	movs	r3, #0
 800406a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800406e:	e047      	b.n	8004100 <MAX72_Scroll_Process+0xf4>
                uint8_t new_bit = (glyph[row] >> scroll_state.current_col) & 0x01;
 8004070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	4413      	add	r3, r2
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	4b6f      	ldr	r3, [pc, #444]	@ (800423c <MAX72_Scroll_Process+0x230>)
 800407e:	7a5b      	ldrb	r3, [r3, #9]
 8004080:	fa42 f303 	asr.w	r3, r2, r3
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	71fb      	strb	r3, [r7, #7]
                uint8_t carry = new_bit;
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // CAMBIATO: Shift right invece di left, da device più a destra
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004092:	2303      	movs	r3, #3
 8004094:	623b      	str	r3, [r7, #32]
 8004096:	e02b      	b.n	80040f0 <MAX72_Scroll_Process+0xe4>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8004098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800409c:	4a69      	ldr	r2, [pc, #420]	@ (8004244 <MAX72_Scroll_Process+0x238>)
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	441a      	add	r2, r3
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	4413      	add	r3, r2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	71bb      	strb	r3, [r7, #6]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 80040ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040b2:	4a64      	ldr	r2, [pc, #400]	@ (8004244 <MAX72_Scroll_Process+0x238>)
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	441a      	add	r2, r3
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	4413      	add	r3, r2
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	085b      	lsrs	r3, r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	b25a      	sxtb	r2, r3
 80040c4:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80040c8:	01db      	lsls	r3, r3, #7
 80040ca:	b25b      	sxtb	r3, r3
 80040cc:	4313      	orrs	r3, r2
 80040ce:	b25a      	sxtb	r2, r3
 80040d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040d4:	b2d1      	uxtb	r1, r2
 80040d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004244 <MAX72_Scroll_Process+0x238>)
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	4413      	add	r3, r2
 80040e0:	460a      	mov	r2, r1
 80040e2:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 80040e4:	79bb      	ldrb	r3, [r7, #6]
 80040e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	dad0      	bge.n	8004098 <MAX72_Scroll_Process+0x8c>
            for (uint8_t row = 0; row < 8; row++) {
 80040f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040fa:	3301      	adds	r3, #1
 80040fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004104:	2b07      	cmp	r3, #7
 8004106:	d9b3      	bls.n	8004070 <MAX72_Scroll_Process+0x64>
                }
            }

            scroll_state.current_col++;
 8004108:	4b4c      	ldr	r3, [pc, #304]	@ (800423c <MAX72_Scroll_Process+0x230>)
 800410a:	7a5b      	ldrb	r3, [r3, #9]
 800410c:	3301      	adds	r3, #1
 800410e:	b2da      	uxtb	r2, r3
 8004110:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004112:	725a      	strb	r2, [r3, #9]

            // Finito il carattere corrente?
            if (scroll_state.current_col >= GLYPH_WIDTH) {
 8004114:	4b49      	ldr	r3, [pc, #292]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004116:	7a5b      	ldrb	r3, [r3, #9]
 8004118:	2b04      	cmp	r3, #4
 800411a:	f240 80fa 	bls.w	8004312 <MAX72_Scroll_Process+0x306>
                scroll_state.current_col = 0;
 800411e:	4b47      	ldr	r3, [pc, #284]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004120:	2200      	movs	r2, #0
 8004122:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 8004124:	4b45      	ldr	r3, [pc, #276]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004126:	2200      	movs	r2, #0
 8004128:	729a      	strb	r2, [r3, #10]
                scroll_state.state = 1; // Passa agli spazi tra caratteri
 800412a:	4b44      	ldr	r3, [pc, #272]	@ (800423c <MAX72_Scroll_Process+0x230>)
 800412c:	2201      	movs	r2, #1
 800412e:	731a      	strb	r2, [r3, #12]
            }
            break;
 8004130:	e0ef      	b.n	8004312 <MAX72_Scroll_Process+0x306>
        }

        case 1: // Spacing tra caratteri
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 8004132:	2300      	movs	r3, #0
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e032      	b.n	800419e <MAX72_Scroll_Process+0x192>
                uint8_t carry = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 800413c:	2303      	movs	r3, #3
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	e027      	b.n	8004192 <MAX72_Scroll_Process+0x186>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8004142:	7ffb      	ldrb	r3, [r7, #31]
 8004144:	4a3f      	ldr	r2, [pc, #252]	@ (8004244 <MAX72_Scroll_Process+0x238>)
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	441a      	add	r2, r3
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	4413      	add	r3, r2
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	73bb      	strb	r3, [r7, #14]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8004156:	7ffb      	ldrb	r3, [r7, #31]
 8004158:	4a3a      	ldr	r2, [pc, #232]	@ (8004244 <MAX72_Scroll_Process+0x238>)
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	441a      	add	r2, r3
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	4413      	add	r3, r2
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	b2db      	uxtb	r3, r3
 8004168:	b25a      	sxtb	r2, r3
 800416a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800416e:	01db      	lsls	r3, r3, #7
 8004170:	b25b      	sxtb	r3, r3
 8004172:	4313      	orrs	r3, r2
 8004174:	b25a      	sxtb	r2, r3
 8004176:	7ffb      	ldrb	r3, [r7, #31]
 8004178:	b2d1      	uxtb	r1, r2
 800417a:	4a32      	ldr	r2, [pc, #200]	@ (8004244 <MAX72_Scroll_Process+0x238>)
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	4413      	add	r3, r2
 8004184:	460a      	mov	r2, r1
 8004186:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8004188:	7bbb      	ldrb	r3, [r7, #14]
 800418a:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	3b01      	subs	r3, #1
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	dad4      	bge.n	8004142 <MAX72_Scroll_Process+0x136>
            for (uint8_t row = 0; row < 8; row++) {
 8004198:	7ffb      	ldrb	r3, [r7, #31]
 800419a:	3301      	adds	r3, #1
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	7ffb      	ldrb	r3, [r7, #31]
 80041a0:	2b07      	cmp	r3, #7
 80041a2:	d9c9      	bls.n	8004138 <MAX72_Scroll_Process+0x12c>
                }
            }

            scroll_state.spacing_counter++;
 80041a4:	4b25      	ldr	r3, [pc, #148]	@ (800423c <MAX72_Scroll_Process+0x230>)
 80041a6:	7a9b      	ldrb	r3, [r3, #10]
 80041a8:	3301      	adds	r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	4b23      	ldr	r3, [pc, #140]	@ (800423c <MAX72_Scroll_Process+0x230>)
 80041ae:	729a      	strb	r2, [r3, #10]

            // Finito lo spacing?
            if (scroll_state.spacing_counter >= CHAR_SPACING) {
 80041b0:	4b22      	ldr	r3, [pc, #136]	@ (800423c <MAX72_Scroll_Process+0x230>)
 80041b2:	7a9b      	ldrb	r3, [r3, #10]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80ae 	beq.w	8004316 <MAX72_Scroll_Process+0x30a>
                scroll_state.spacing_counter = 0;
 80041ba:	4b20      	ldr	r3, [pc, #128]	@ (800423c <MAX72_Scroll_Process+0x230>)
 80041bc:	2200      	movs	r2, #0
 80041be:	729a      	strb	r2, [r3, #10]

                // CAMBIATO: Passa al carattere successivo (incrementa invece di decrementare)
                scroll_state.current_char_idx++;
 80041c0:	4b1e      	ldr	r3, [pc, #120]	@ (800423c <MAX72_Scroll_Process+0x230>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	3301      	adds	r3, #1
 80041c6:	4a1d      	ldr	r2, [pc, #116]	@ (800423c <MAX72_Scroll_Process+0x230>)
 80041c8:	6053      	str	r3, [r2, #4]
                if (scroll_state.current_char_idx >= strlen(scroll_state.text)) {
 80041ca:	4b1c      	ldr	r3, [pc, #112]	@ (800423c <MAX72_Scroll_Process+0x230>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	461c      	mov	r4, r3
 80041d0:	4b1a      	ldr	r3, [pc, #104]	@ (800423c <MAX72_Scroll_Process+0x230>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fc f87b 	bl	80002d0 <strlen>
 80041da:	4603      	mov	r3, r0
 80041dc:	429c      	cmp	r4, r3
 80041de:	d306      	bcc.n	80041ee <MAX72_Scroll_Process+0x1e2>
                    // Finiti tutti i caratteri, passa al padding finale
                    scroll_state.state = 2;
 80041e0:	4b16      	ldr	r3, [pc, #88]	@ (800423c <MAX72_Scroll_Process+0x230>)
 80041e2:	2202      	movs	r2, #2
 80041e4:	731a      	strb	r2, [r3, #12]
                    scroll_state.padding_counter = 0;
 80041e6:	4b15      	ldr	r3, [pc, #84]	@ (800423c <MAX72_Scroll_Process+0x230>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	72da      	strb	r2, [r3, #11]
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
                    scroll_state.state = 0;
                }
            }
            break;
 80041ec:	e093      	b.n	8004316 <MAX72_Scroll_Process+0x30a>
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80041ee:	4b13      	ldr	r3, [pc, #76]	@ (800423c <MAX72_Scroll_Process+0x230>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a12      	ldr	r2, [pc, #72]	@ (800423c <MAX72_Scroll_Process+0x230>)
 80041f4:	6852      	ldr	r2, [r2, #4]
 80041f6:	4413      	add	r3, r2
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b1f      	cmp	r3, #31
 80041fc:	d90e      	bls.n	800421c <MAX72_Scroll_Process+0x210>
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
 80041fe:	4b0f      	ldr	r3, [pc, #60]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a0e      	ldr	r2, [pc, #56]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004204:	6852      	ldr	r2, [r2, #4]
 8004206:	4413      	add	r3, r2
 8004208:	781b      	ldrb	r3, [r3, #0]
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 800420a:	2b7e      	cmp	r3, #126	@ 0x7e
 800420c:	d806      	bhi.n	800421c <MAX72_Scroll_Process+0x210>
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
 800420e:	4b0b      	ldr	r3, [pc, #44]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a0a      	ldr	r2, [pc, #40]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004214:	6852      	ldr	r2, [r2, #4]
 8004216:	4413      	add	r3, r2
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	e000      	b.n	800421e <MAX72_Scroll_Process+0x212>
 800421c:	2320      	movs	r3, #32
 800421e:	4a07      	ldr	r2, [pc, #28]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004220:	7213      	strb	r3, [r2, #8]
                    scroll_state.state = 0;
 8004222:	4b06      	ldr	r3, [pc, #24]	@ (800423c <MAX72_Scroll_Process+0x230>)
 8004224:	2200      	movs	r2, #0
 8004226:	731a      	strb	r2, [r3, #12]
            break;
 8004228:	e075      	b.n	8004316 <MAX72_Scroll_Process+0x30a>
        }

        case 2: // Padding finale
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 800422a:	2300      	movs	r3, #0
 800422c:	75fb      	strb	r3, [r7, #23]
 800422e:	e039      	b.n	80042a4 <MAX72_Scroll_Process+0x298>
                uint8_t carry = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004234:	2303      	movs	r3, #3
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	e02e      	b.n	8004298 <MAX72_Scroll_Process+0x28c>
 800423a:	bf00      	nop
 800423c:	20000b74 	.word	0x20000b74
 8004240:	20000008 	.word	0x20000008
 8004244:	20000b54 	.word	0x20000b54
                    uint8_t next_carry = frame[row][d] & 0x01;
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	4a38      	ldr	r2, [pc, #224]	@ (800432c <MAX72_Scroll_Process+0x320>)
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	441a      	add	r2, r3
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 800425c:	7dfb      	ldrb	r3, [r7, #23]
 800425e:	4a33      	ldr	r2, [pc, #204]	@ (800432c <MAX72_Scroll_Process+0x320>)
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	441a      	add	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4413      	add	r3, r2
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	085b      	lsrs	r3, r3, #1
 800426c:	b2db      	uxtb	r3, r3
 800426e:	b25a      	sxtb	r2, r3
 8004270:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004274:	01db      	lsls	r3, r3, #7
 8004276:	b25b      	sxtb	r3, r3
 8004278:	4313      	orrs	r3, r2
 800427a:	b25a      	sxtb	r2, r3
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	b2d1      	uxtb	r1, r2
 8004280:	4a2a      	ldr	r2, [pc, #168]	@ (800432c <MAX72_Scroll_Process+0x320>)
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	441a      	add	r2, r3
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4413      	add	r3, r2
 800428a:	460a      	mov	r2, r1
 800428c:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	3b01      	subs	r3, #1
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	dad4      	bge.n	8004248 <MAX72_Scroll_Process+0x23c>
            for (uint8_t row = 0; row < 8; row++) {
 800429e:	7dfb      	ldrb	r3, [r7, #23]
 80042a0:	3301      	adds	r3, #1
 80042a2:	75fb      	strb	r3, [r7, #23]
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	2b07      	cmp	r3, #7
 80042a8:	d9c2      	bls.n	8004230 <MAX72_Scroll_Process+0x224>
                }
            }

            scroll_state.padding_counter++;
 80042aa:	4b21      	ldr	r3, [pc, #132]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 80042ac:	7adb      	ldrb	r3, [r3, #11]
 80042ae:	3301      	adds	r3, #1
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 80042b4:	72da      	strb	r2, [r3, #11]

            // Finito il padding? (GLYPH_WIDTH + CHAR_SPACING)
            if (scroll_state.padding_counter >= (GLYPH_WIDTH + CHAR_SPACING)) {
 80042b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 80042b8:	7adb      	ldrb	r3, [r3, #11]
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d92d      	bls.n	800431a <MAX72_Scroll_Process+0x30e>
                // CAMBIATO: Ricomincia dal primo carattere (indice 0)
                scroll_state.current_char_idx = 0;
 80042be:	4b1c      	ldr	r3, [pc, #112]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	605a      	str	r2, [r3, #4]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80042c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a19      	ldr	r2, [pc, #100]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 80042ca:	6852      	ldr	r2, [r2, #4]
 80042cc:	4413      	add	r3, r2
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b1f      	cmp	r3, #31
 80042d2:	d90e      	bls.n	80042f2 <MAX72_Scroll_Process+0x2e6>
						scroll_state.text[scroll_state.current_char_idx] > '~') ?
 80042d4:	4b16      	ldr	r3, [pc, #88]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a15      	ldr	r2, [pc, #84]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 80042da:	6852      	ldr	r2, [r2, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	781b      	ldrb	r3, [r3, #0]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80042e0:	2b7e      	cmp	r3, #126	@ 0x7e
 80042e2:	d806      	bhi.n	80042f2 <MAX72_Scroll_Process+0x2e6>
						' ' : scroll_state.text[scroll_state.current_char_idx];
 80042e4:	4b12      	ldr	r3, [pc, #72]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a11      	ldr	r2, [pc, #68]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 80042ea:	6852      	ldr	r2, [r2, #4]
 80042ec:	4413      	add	r3, r2
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	e000      	b.n	80042f4 <MAX72_Scroll_Process+0x2e8>
 80042f2:	2320      	movs	r3, #32
 80042f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 80042f6:	7213      	strb	r3, [r2, #8]
                scroll_state.current_col = 0;
 80042f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 80042fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 8004300:	2200      	movs	r2, #0
 8004302:	729a      	strb	r2, [r3, #10]
                scroll_state.padding_counter = 0;
 8004304:	4b0a      	ldr	r3, [pc, #40]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 8004306:	2200      	movs	r2, #0
 8004308:	72da      	strb	r2, [r3, #11]
                scroll_state.state = 0;
 800430a:	4b09      	ldr	r3, [pc, #36]	@ (8004330 <MAX72_Scroll_Process+0x324>)
 800430c:	2200      	movs	r2, #0
 800430e:	731a      	strb	r2, [r3, #12]
            }
            break;
 8004310:	e003      	b.n	800431a <MAX72_Scroll_Process+0x30e>
            break;
 8004312:	bf00      	nop
 8004314:	e002      	b.n	800431c <MAX72_Scroll_Process+0x310>
            break;
 8004316:	bf00      	nop
 8004318:	e000      	b.n	800431c <MAX72_Scroll_Process+0x310>
            break;
 800431a:	bf00      	nop
        }
    }

    // Aggiorna il display
    MAX72_SendFrame();
 800431c:	f7ff fdd2 	bl	8003ec4 <MAX72_SendFrame>
 8004320:	e000      	b.n	8004324 <MAX72_Scroll_Process+0x318>
    if (!scroll_state.enabled || !scroll_state.text) return;
 8004322:	bf00      	nop
}
 8004324:	372c      	adds	r7, #44	@ 0x2c
 8004326:	46bd      	mov	sp, r7
 8004328:	bd90      	pop	{r4, r7, pc}
 800432a:	bf00      	nop
 800432c:	20000b54 	.word	0x20000b54
 8004330:	20000b74 	.word	0x20000b74

08004334 <Reset_Handler>:
 8004334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800436c <LoopFillZerobss+0xe>
 8004338:	f7fd fc42 	bl	8001bc0 <SystemInit>
 800433c:	480c      	ldr	r0, [pc, #48]	@ (8004370 <LoopFillZerobss+0x12>)
 800433e:	490d      	ldr	r1, [pc, #52]	@ (8004374 <LoopFillZerobss+0x16>)
 8004340:	4a0d      	ldr	r2, [pc, #52]	@ (8004378 <LoopFillZerobss+0x1a>)
 8004342:	2300      	movs	r3, #0
 8004344:	e002      	b.n	800434c <LoopCopyDataInit>

08004346 <CopyDataInit>:
 8004346:	58d4      	ldr	r4, [r2, r3]
 8004348:	50c4      	str	r4, [r0, r3]
 800434a:	3304      	adds	r3, #4

0800434c <LoopCopyDataInit>:
 800434c:	18c4      	adds	r4, r0, r3
 800434e:	428c      	cmp	r4, r1
 8004350:	d3f9      	bcc.n	8004346 <CopyDataInit>
 8004352:	4a0a      	ldr	r2, [pc, #40]	@ (800437c <LoopFillZerobss+0x1e>)
 8004354:	4c0a      	ldr	r4, [pc, #40]	@ (8004380 <LoopFillZerobss+0x22>)
 8004356:	2300      	movs	r3, #0
 8004358:	e001      	b.n	800435e <LoopFillZerobss>

0800435a <FillZerobss>:
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	3204      	adds	r2, #4

0800435e <LoopFillZerobss>:
 800435e:	42a2      	cmp	r2, r4
 8004360:	d3fb      	bcc.n	800435a <FillZerobss>
 8004362:	f005 ff89 	bl	800a278 <__libc_init_array>
 8004366:	f7fd f8d9 	bl	800151c <main>
 800436a:	4770      	bx	lr
 800436c:	20020000 	.word	0x20020000
 8004370:	20000000 	.word	0x20000000
 8004374:	20000590 	.word	0x20000590
 8004378:	0800cb2c 	.word	0x0800cb2c
 800437c:	20000590 	.word	0x20000590
 8004380:	20000cd4 	.word	0x20000cd4

08004384 <ADC_IRQHandler>:
 8004384:	e7fe      	b.n	8004384 <ADC_IRQHandler>
	...

08004388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800438c:	4b0e      	ldr	r3, [pc, #56]	@ (80043c8 <HAL_Init+0x40>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0d      	ldr	r2, [pc, #52]	@ (80043c8 <HAL_Init+0x40>)
 8004392:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004398:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <HAL_Init+0x40>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0a      	ldr	r2, [pc, #40]	@ (80043c8 <HAL_Init+0x40>)
 800439e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043a4:	4b08      	ldr	r3, [pc, #32]	@ (80043c8 <HAL_Init+0x40>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a07      	ldr	r2, [pc, #28]	@ (80043c8 <HAL_Init+0x40>)
 80043aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043b0:	2003      	movs	r0, #3
 80043b2:	f000 fd5f 	bl	8004e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043b6:	2000      	movs	r0, #0
 80043b8:	f000 f808 	bl	80043cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043bc:	f7fd fab2 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40023c00 	.word	0x40023c00

080043cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043d4:	4b12      	ldr	r3, [pc, #72]	@ (8004420 <HAL_InitTick+0x54>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b12      	ldr	r3, [pc, #72]	@ (8004424 <HAL_InitTick+0x58>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	4619      	mov	r1, r3
 80043de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fd77 	bl	8004ede <HAL_SYSTICK_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e00e      	b.n	8004418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b0f      	cmp	r3, #15
 80043fe:	d80a      	bhi.n	8004416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004400:	2200      	movs	r2, #0
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004408:	f000 fd3f 	bl	8004e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800440c:	4a06      	ldr	r2, [pc, #24]	@ (8004428 <HAL_InitTick+0x5c>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e000      	b.n	8004418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000004 	.word	0x20000004
 8004424:	200003c4 	.word	0x200003c4
 8004428:	200003c0 	.word	0x200003c0

0800442c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004430:	4b06      	ldr	r3, [pc, #24]	@ (800444c <HAL_IncTick+0x20>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <HAL_IncTick+0x24>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4413      	add	r3, r2
 800443c:	4a04      	ldr	r2, [pc, #16]	@ (8004450 <HAL_IncTick+0x24>)
 800443e:	6013      	str	r3, [r2, #0]
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	200003c4 	.word	0x200003c4
 8004450:	20000b84 	.word	0x20000b84

08004454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return uwTick;
 8004458:	4b03      	ldr	r3, [pc, #12]	@ (8004468 <HAL_GetTick+0x14>)
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000b84 	.word	0x20000b84

0800446c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004474:	f7ff ffee 	bl	8004454 <HAL_GetTick>
 8004478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004484:	d005      	beq.n	8004492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004486:	4b0a      	ldr	r3, [pc, #40]	@ (80044b0 <HAL_Delay+0x44>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004492:	bf00      	nop
 8004494:	f7ff ffde 	bl	8004454 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d8f7      	bhi.n	8004494 <HAL_Delay+0x28>
  {
  }
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	200003c4 	.word	0x200003c4

080044b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e033      	b.n	8004532 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fc fdf0 	bl	80010b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d118      	bne.n	8004524 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044fa:	f023 0302 	bic.w	r3, r3, #2
 80044fe:	f043 0202 	orr.w	r2, r3, #2
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fae8 	bl	8004adc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	f043 0201 	orr.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	641a      	str	r2, [r3, #64]	@ 0x40
 8004522:	e001      	b.n	8004528 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_ADC_Start+0x1a>
 8004552:	2302      	movs	r3, #2
 8004554:	e0b2      	b.n	80046bc <HAL_ADC_Start+0x180>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d018      	beq.n	800459e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800457c:	4b52      	ldr	r3, [pc, #328]	@ (80046c8 <HAL_ADC_Start+0x18c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a52      	ldr	r2, [pc, #328]	@ (80046cc <HAL_ADC_Start+0x190>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	0c9a      	lsrs	r2, r3, #18
 8004588:	4613      	mov	r3, r2
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	4413      	add	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004590:	e002      	b.n	8004598 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	3b01      	subs	r3, #1
 8004596:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f9      	bne.n	8004592 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d17a      	bne.n	80046a2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ea:	d106      	bne.n	80045fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f0:	f023 0206 	bic.w	r2, r3, #6
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80045f8:	e002      	b.n	8004600 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004608:	4b31      	ldr	r3, [pc, #196]	@ (80046d0 <HAL_ADC_Start+0x194>)
 800460a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004614:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	2b00      	cmp	r3, #0
 8004620:	d12a      	bne.n	8004678 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a2b      	ldr	r2, [pc, #172]	@ (80046d4 <HAL_ADC_Start+0x198>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d015      	beq.n	8004658 <HAL_ADC_Start+0x11c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a29      	ldr	r2, [pc, #164]	@ (80046d8 <HAL_ADC_Start+0x19c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d105      	bne.n	8004642 <HAL_ADC_Start+0x106>
 8004636:	4b26      	ldr	r3, [pc, #152]	@ (80046d0 <HAL_ADC_Start+0x194>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a25      	ldr	r2, [pc, #148]	@ (80046dc <HAL_ADC_Start+0x1a0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d136      	bne.n	80046ba <HAL_ADC_Start+0x17e>
 800464c:	4b20      	ldr	r3, [pc, #128]	@ (80046d0 <HAL_ADC_Start+0x194>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b00      	cmp	r3, #0
 8004656:	d130      	bne.n	80046ba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d129      	bne.n	80046ba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004674:	609a      	str	r2, [r3, #8]
 8004676:	e020      	b.n	80046ba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a15      	ldr	r2, [pc, #84]	@ (80046d4 <HAL_ADC_Start+0x198>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d11b      	bne.n	80046ba <HAL_ADC_Start+0x17e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d114      	bne.n	80046ba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	e00b      	b.n	80046ba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	f043 0210 	orr.w	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b2:	f043 0201 	orr.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	20000004 	.word	0x20000004
 80046cc:	431bde83 	.word	0x431bde83
 80046d0:	40012300 	.word	0x40012300
 80046d4:	40012000 	.word	0x40012000
 80046d8:	40012100 	.word	0x40012100
 80046dc:	40012200 	.word	0x40012200

080046e0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_ADC_Stop+0x16>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e021      	b.n	800473a <HAL_ADC_Stop+0x5a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0201 	bic.w	r2, r2, #1
 800470c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	f043 0201 	orr.w	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800475e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004762:	d113      	bne.n	800478c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800476e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004772:	d10b      	bne.n	800478c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e063      	b.n	8004854 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800478c:	f7ff fe62 	bl	8004454 <HAL_GetTick>
 8004790:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004792:	e021      	b.n	80047d8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800479a:	d01d      	beq.n	80047d8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <HAL_ADC_PollForConversion+0x6c>
 80047a2:	f7ff fe57 	bl	8004454 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d212      	bcs.n	80047d8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d00b      	beq.n	80047d8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c4:	f043 0204 	orr.w	r2, r3, #4
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e03d      	b.n	8004854 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d1d6      	bne.n	8004794 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f06f 0212 	mvn.w	r2, #18
 80047ee:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d123      	bne.n	8004852 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800480e:	2b00      	cmp	r3, #0
 8004810:	d11f      	bne.n	8004852 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004818:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800481c:	2b00      	cmp	r3, #0
 800481e:	d006      	beq.n	800482e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800482a:	2b00      	cmp	r3, #0
 800482c:	d111      	bne.n	8004852 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d105      	bne.n	8004852 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	f043 0201 	orr.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x1c>
 8004890:	2302      	movs	r3, #2
 8004892:	e113      	b.n	8004abc <HAL_ADC_ConfigChannel+0x244>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b09      	cmp	r3, #9
 80048a2:	d925      	bls.n	80048f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68d9      	ldr	r1, [r3, #12]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	4613      	mov	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	4413      	add	r3, r2
 80048b8:	3b1e      	subs	r3, #30
 80048ba:	2207      	movs	r2, #7
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	43da      	mvns	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	400a      	ands	r2, r1
 80048c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68d9      	ldr	r1, [r3, #12]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	4618      	mov	r0, r3
 80048dc:	4603      	mov	r3, r0
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4403      	add	r3, r0
 80048e2:	3b1e      	subs	r3, #30
 80048e4:	409a      	lsls	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	60da      	str	r2, [r3, #12]
 80048ee:	e022      	b.n	8004936 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6919      	ldr	r1, [r3, #16]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	4613      	mov	r3, r2
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	4413      	add	r3, r2
 8004904:	2207      	movs	r2, #7
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43da      	mvns	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	400a      	ands	r2, r1
 8004912:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6919      	ldr	r1, [r3, #16]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	4618      	mov	r0, r3
 8004926:	4603      	mov	r3, r0
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	4403      	add	r3, r0
 800492c:	409a      	lsls	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b06      	cmp	r3, #6
 800493c:	d824      	bhi.n	8004988 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	3b05      	subs	r3, #5
 8004950:	221f      	movs	r2, #31
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43da      	mvns	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	400a      	ands	r2, r1
 800495e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	4618      	mov	r0, r3
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	3b05      	subs	r3, #5
 800497a:	fa00 f203 	lsl.w	r2, r0, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	635a      	str	r2, [r3, #52]	@ 0x34
 8004986:	e04c      	b.n	8004a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	d824      	bhi.n	80049da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	3b23      	subs	r3, #35	@ 0x23
 80049a2:	221f      	movs	r2, #31
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	43da      	mvns	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	400a      	ands	r2, r1
 80049b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	4618      	mov	r0, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	3b23      	subs	r3, #35	@ 0x23
 80049cc:	fa00 f203 	lsl.w	r2, r0, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80049d8:	e023      	b.n	8004a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	3b41      	subs	r3, #65	@ 0x41
 80049ec:	221f      	movs	r2, #31
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43da      	mvns	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	400a      	ands	r2, r1
 80049fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	4618      	mov	r0, r3
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	3b41      	subs	r3, #65	@ 0x41
 8004a16:	fa00 f203 	lsl.w	r2, r0, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a22:	4b29      	ldr	r3, [pc, #164]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x250>)
 8004a24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a28      	ldr	r2, [pc, #160]	@ (8004acc <HAL_ADC_ConfigChannel+0x254>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d10f      	bne.n	8004a50 <HAL_ADC_ConfigChannel+0x1d8>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b12      	cmp	r3, #18
 8004a36:	d10b      	bne.n	8004a50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1d      	ldr	r2, [pc, #116]	@ (8004acc <HAL_ADC_ConfigChannel+0x254>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d12b      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x23a>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x258>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <HAL_ADC_ConfigChannel+0x1f4>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b11      	cmp	r3, #17
 8004a6a:	d122      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a11      	ldr	r2, [pc, #68]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x258>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d111      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a8e:	4b11      	ldr	r3, [pc, #68]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x25c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a11      	ldr	r2, [pc, #68]	@ (8004ad8 <HAL_ADC_ConfigChannel+0x260>)
 8004a94:	fba2 2303 	umull	r2, r3, r2, r3
 8004a98:	0c9a      	lsrs	r2, r3, #18
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004aa4:	e002      	b.n	8004aac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f9      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	40012300 	.word	0x40012300
 8004acc:	40012000 	.word	0x40012000
 8004ad0:	10000012 	.word	0x10000012
 8004ad4:	20000004 	.word	0x20000004
 8004ad8:	431bde83 	.word	0x431bde83

08004adc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ae4:	4b79      	ldr	r3, [pc, #484]	@ (8004ccc <ADC_Init+0x1f0>)
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6859      	ldr	r1, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	021a      	lsls	r2, r3, #8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6899      	ldr	r1, [r3, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6e:	4a58      	ldr	r2, [pc, #352]	@ (8004cd0 <ADC_Init+0x1f4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d022      	beq.n	8004bba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6899      	ldr	r1, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6899      	ldr	r1, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	e00f      	b.n	8004bda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004bd8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0202 	bic.w	r2, r2, #2
 8004be8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6899      	ldr	r1, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	7e1b      	ldrb	r3, [r3, #24]
 8004bf4:	005a      	lsls	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01b      	beq.n	8004c40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c16:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004c26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	3b01      	subs	r3, #1
 8004c34:	035a      	lsls	r2, r3, #13
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
 8004c3e:	e007      	b.n	8004c50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c4e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	051a      	lsls	r2, r3, #20
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004c84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6899      	ldr	r1, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c92:	025a      	lsls	r2, r3, #9
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6899      	ldr	r1, [r3, #8]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	029a      	lsls	r2, r3, #10
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	609a      	str	r2, [r3, #8]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40012300 	.word	0x40012300
 8004cd0:	0f000001 	.word	0x0f000001

08004cd4 <__NVIC_SetPriorityGrouping>:
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d18 <__NVIC_SetPriorityGrouping+0x44>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d06:	4a04      	ldr	r2, [pc, #16]	@ (8004d18 <__NVIC_SetPriorityGrouping+0x44>)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	60d3      	str	r3, [r2, #12]
}
 8004d0c:	bf00      	nop
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	e000ed00 	.word	0xe000ed00

08004d1c <__NVIC_GetPriorityGrouping>:
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d20:	4b04      	ldr	r3, [pc, #16]	@ (8004d34 <__NVIC_GetPriorityGrouping+0x18>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	0a1b      	lsrs	r3, r3, #8
 8004d26:	f003 0307 	and.w	r3, r3, #7
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	e000ed00 	.word	0xe000ed00

08004d38 <__NVIC_EnableIRQ>:
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	db0b      	blt.n	8004d62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	f003 021f 	and.w	r2, r3, #31
 8004d50:	4907      	ldr	r1, [pc, #28]	@ (8004d70 <__NVIC_EnableIRQ+0x38>)
 8004d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	2001      	movs	r0, #1
 8004d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	e000e100 	.word	0xe000e100

08004d74 <__NVIC_SetPriority>:
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	6039      	str	r1, [r7, #0]
 8004d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	db0a      	blt.n	8004d9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	490c      	ldr	r1, [pc, #48]	@ (8004dc0 <__NVIC_SetPriority+0x4c>)
 8004d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d92:	0112      	lsls	r2, r2, #4
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	440b      	add	r3, r1
 8004d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004d9c:	e00a      	b.n	8004db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	4908      	ldr	r1, [pc, #32]	@ (8004dc4 <__NVIC_SetPriority+0x50>)
 8004da4:	79fb      	ldrb	r3, [r7, #7]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	3b04      	subs	r3, #4
 8004dac:	0112      	lsls	r2, r2, #4
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	440b      	add	r3, r1
 8004db2:	761a      	strb	r2, [r3, #24]
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	e000e100 	.word	0xe000e100
 8004dc4:	e000ed00 	.word	0xe000ed00

08004dc8 <NVIC_EncodePriority>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b089      	sub	sp, #36	@ 0x24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f1c3 0307 	rsb	r3, r3, #7
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	bf28      	it	cs
 8004de6:	2304      	movcs	r3, #4
 8004de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	3304      	adds	r3, #4
 8004dee:	2b06      	cmp	r3, #6
 8004df0:	d902      	bls.n	8004df8 <NVIC_EncodePriority+0x30>
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	3b03      	subs	r3, #3
 8004df6:	e000      	b.n	8004dfa <NVIC_EncodePriority+0x32>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43da      	mvns	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	401a      	ands	r2, r3
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	43d9      	mvns	r1, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e20:	4313      	orrs	r3, r2
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3724      	adds	r7, #36	@ 0x24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <SysTick_Config>:
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e40:	d301      	bcc.n	8004e46 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004e42:	2301      	movs	r3, #1
 8004e44:	e00f      	b.n	8004e66 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e46:	4a0a      	ldr	r2, [pc, #40]	@ (8004e70 <SysTick_Config+0x40>)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e4e:	210f      	movs	r1, #15
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e54:	f7ff ff8e 	bl	8004d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <SysTick_Config+0x40>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e5e:	4b04      	ldr	r3, [pc, #16]	@ (8004e70 <SysTick_Config+0x40>)
 8004e60:	2207      	movs	r2, #7
 8004e62:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	e000e010 	.word	0xe000e010

08004e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff ff29 	bl	8004cd4 <__NVIC_SetPriorityGrouping>
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b086      	sub	sp, #24
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	4603      	mov	r3, r0
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	607a      	str	r2, [r7, #4]
 8004e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e9c:	f7ff ff3e 	bl	8004d1c <__NVIC_GetPriorityGrouping>
 8004ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	6978      	ldr	r0, [r7, #20]
 8004ea8:	f7ff ff8e 	bl	8004dc8 <NVIC_EncodePriority>
 8004eac:	4602      	mov	r2, r0
 8004eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff ff5d 	bl	8004d74 <__NVIC_SetPriority>
}
 8004eba:	bf00      	nop
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	4603      	mov	r3, r0
 8004eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff ff31 	bl	8004d38 <__NVIC_EnableIRQ>
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff ffa2 	bl	8004e30 <SysTick_Config>
 8004eec:	4603      	mov	r3, r0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f04:	f7ff faa6 	bl	8004454 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e099      	b.n	8005048 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0201 	bic.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f34:	e00f      	b.n	8004f56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f36:	f7ff fa8d 	bl	8004454 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b05      	cmp	r3, #5
 8004f42:	d908      	bls.n	8004f56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e078      	b.n	8005048 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e8      	bne.n	8004f36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4b38      	ldr	r3, [pc, #224]	@ (8005050 <HAL_DMA_Init+0x158>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d107      	bne.n	8004fc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f023 0307 	bic.w	r3, r3, #7
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d117      	bne.n	800501a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00e      	beq.n	800501a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fa9d 	bl	800553c <DMA_CheckFifoParam>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2240      	movs	r2, #64	@ 0x40
 800500c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005016:	2301      	movs	r3, #1
 8005018:	e016      	b.n	8005048 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fa54 	bl	80054d0 <DMA_CalcBaseAndBitshift>
 8005028:	4603      	mov	r3, r0
 800502a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005030:	223f      	movs	r2, #63	@ 0x3f
 8005032:	409a      	lsls	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	f010803f 	.word	0xf010803f

08005054 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_DMA_Start_IT+0x26>
 8005076:	2302      	movs	r3, #2
 8005078:	e040      	b.n	80050fc <HAL_DMA_Start_IT+0xa8>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b01      	cmp	r3, #1
 800508c:	d12f      	bne.n	80050ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2202      	movs	r2, #2
 8005092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 f9e6 	bl	8005474 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ac:	223f      	movs	r2, #63	@ 0x3f
 80050ae:	409a      	lsls	r2, r3
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0216 	orr.w	r2, r2, #22
 80050c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0208 	orr.w	r2, r2, #8
 80050da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	e005      	b.n	80050fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050f6:	2302      	movs	r3, #2
 80050f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d004      	beq.n	8005122 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2280      	movs	r2, #128	@ 0x80
 800511c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e00c      	b.n	800513c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2205      	movs	r2, #5
 8005126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005154:	4b8e      	ldr	r3, [pc, #568]	@ (8005390 <HAL_DMA_IRQHandler+0x248>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a8e      	ldr	r2, [pc, #568]	@ (8005394 <HAL_DMA_IRQHandler+0x24c>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	0a9b      	lsrs	r3, r3, #10
 8005160:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005166:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005172:	2208      	movs	r2, #8
 8005174:	409a      	lsls	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4013      	ands	r3, r2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d01a      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d013      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0204 	bic.w	r2, r2, #4
 800519a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a0:	2208      	movs	r2, #8
 80051a2:	409a      	lsls	r2, r3
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ac:	f043 0201 	orr.w	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b8:	2201      	movs	r2, #1
 80051ba:	409a      	lsls	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4013      	ands	r3, r2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d012      	beq.n	80051ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d6:	2201      	movs	r2, #1
 80051d8:	409a      	lsls	r2, r3
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e2:	f043 0202 	orr.w	r2, r3, #2
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ee:	2204      	movs	r2, #4
 80051f0:	409a      	lsls	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d012      	beq.n	8005220 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00b      	beq.n	8005220 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520c:	2204      	movs	r2, #4
 800520e:	409a      	lsls	r2, r3
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005218:	f043 0204 	orr.w	r2, r3, #4
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005224:	2210      	movs	r2, #16
 8005226:	409a      	lsls	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d043      	beq.n	80052b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d03c      	beq.n	80052b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005242:	2210      	movs	r2, #16
 8005244:	409a      	lsls	r2, r3
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d018      	beq.n	800528a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d108      	bne.n	8005278 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d024      	beq.n	80052b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	4798      	blx	r3
 8005276:	e01f      	b.n	80052b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01b      	beq.n	80052b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	4798      	blx	r3
 8005288:	e016      	b.n	80052b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d107      	bne.n	80052a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0208 	bic.w	r2, r2, #8
 80052a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052bc:	2220      	movs	r2, #32
 80052be:	409a      	lsls	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 808f 	beq.w	80053e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 8087 	beq.w	80053e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052de:	2220      	movs	r2, #32
 80052e0:	409a      	lsls	r2, r3
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b05      	cmp	r3, #5
 80052f0:	d136      	bne.n	8005360 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0216 	bic.w	r2, r2, #22
 8005300:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695a      	ldr	r2, [r3, #20]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005310:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d103      	bne.n	8005322 <HAL_DMA_IRQHandler+0x1da>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0208 	bic.w	r2, r2, #8
 8005330:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005336:	223f      	movs	r2, #63	@ 0x3f
 8005338:	409a      	lsls	r2, r3
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005352:	2b00      	cmp	r3, #0
 8005354:	d07e      	beq.n	8005454 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	4798      	blx	r3
        }
        return;
 800535e:	e079      	b.n	8005454 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01d      	beq.n	80053aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10d      	bne.n	8005398 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005380:	2b00      	cmp	r3, #0
 8005382:	d031      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	4798      	blx	r3
 800538c:	e02c      	b.n	80053e8 <HAL_DMA_IRQHandler+0x2a0>
 800538e:	bf00      	nop
 8005390:	20000004 	.word	0x20000004
 8005394:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800539c:	2b00      	cmp	r3, #0
 800539e:	d023      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	4798      	blx	r3
 80053a8:	e01e      	b.n	80053e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10f      	bne.n	80053d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0210 	bic.w	r2, r2, #16
 80053c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d032      	beq.n	8005456 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d022      	beq.n	8005442 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2205      	movs	r2, #5
 8005400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	3301      	adds	r3, #1
 8005418:	60bb      	str	r3, [r7, #8]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	429a      	cmp	r2, r3
 800541e:	d307      	bcc.n	8005430 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f2      	bne.n	8005414 <HAL_DMA_IRQHandler+0x2cc>
 800542e:	e000      	b.n	8005432 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005430:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	4798      	blx	r3
 8005452:	e000      	b.n	8005456 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005454:	bf00      	nop
    }
  }
}
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005490:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b40      	cmp	r3, #64	@ 0x40
 80054a0:	d108      	bne.n	80054b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054b2:	e007      	b.n	80054c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	60da      	str	r2, [r3, #12]
}
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	3b10      	subs	r3, #16
 80054e0:	4a14      	ldr	r2, [pc, #80]	@ (8005534 <DMA_CalcBaseAndBitshift+0x64>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	091b      	lsrs	r3, r3, #4
 80054e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054ea:	4a13      	ldr	r2, [pc, #76]	@ (8005538 <DMA_CalcBaseAndBitshift+0x68>)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d909      	bls.n	8005512 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	1d1a      	adds	r2, r3, #4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005510:	e007      	b.n	8005522 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800551a:	f023 0303 	bic.w	r3, r3, #3
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	aaaaaaab 	.word	0xaaaaaaab
 8005538:	0800c768 	.word	0x0800c768

0800553c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d11f      	bne.n	8005596 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b03      	cmp	r3, #3
 800555a:	d856      	bhi.n	800560a <DMA_CheckFifoParam+0xce>
 800555c:	a201      	add	r2, pc, #4	@ (adr r2, 8005564 <DMA_CheckFifoParam+0x28>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	08005575 	.word	0x08005575
 8005568:	08005587 	.word	0x08005587
 800556c:	08005575 	.word	0x08005575
 8005570:	0800560b 	.word	0x0800560b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005578:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d046      	beq.n	800560e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005584:	e043      	b.n	800560e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800558e:	d140      	bne.n	8005612 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005594:	e03d      	b.n	8005612 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800559e:	d121      	bne.n	80055e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d837      	bhi.n	8005616 <DMA_CheckFifoParam+0xda>
 80055a6:	a201      	add	r2, pc, #4	@ (adr r2, 80055ac <DMA_CheckFifoParam+0x70>)
 80055a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ac:	080055bd 	.word	0x080055bd
 80055b0:	080055c3 	.word	0x080055c3
 80055b4:	080055bd 	.word	0x080055bd
 80055b8:	080055d5 	.word	0x080055d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
      break;
 80055c0:	e030      	b.n	8005624 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d025      	beq.n	800561a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055d2:	e022      	b.n	800561a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055dc:	d11f      	bne.n	800561e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055e2:	e01c      	b.n	800561e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d903      	bls.n	80055f2 <DMA_CheckFifoParam+0xb6>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d003      	beq.n	80055f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055f0:	e018      	b.n	8005624 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
      break;
 80055f6:	e015      	b.n	8005624 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00e      	beq.n	8005622 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	73fb      	strb	r3, [r7, #15]
      break;
 8005608:	e00b      	b.n	8005622 <DMA_CheckFifoParam+0xe6>
      break;
 800560a:	bf00      	nop
 800560c:	e00a      	b.n	8005624 <DMA_CheckFifoParam+0xe8>
      break;
 800560e:	bf00      	nop
 8005610:	e008      	b.n	8005624 <DMA_CheckFifoParam+0xe8>
      break;
 8005612:	bf00      	nop
 8005614:	e006      	b.n	8005624 <DMA_CheckFifoParam+0xe8>
      break;
 8005616:	bf00      	nop
 8005618:	e004      	b.n	8005624 <DMA_CheckFifoParam+0xe8>
      break;
 800561a:	bf00      	nop
 800561c:	e002      	b.n	8005624 <DMA_CheckFifoParam+0xe8>
      break;   
 800561e:	bf00      	nop
 8005620:	e000      	b.n	8005624 <DMA_CheckFifoParam+0xe8>
      break;
 8005622:	bf00      	nop
    }
  } 
  
  return status; 
 8005624:	7bfb      	ldrb	r3, [r7, #15]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop

08005634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005634:	b480      	push	{r7}
 8005636:	b089      	sub	sp, #36	@ 0x24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005642:	2300      	movs	r3, #0
 8005644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005646:	2300      	movs	r3, #0
 8005648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	e165      	b.n	800591c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005650:	2201      	movs	r2, #1
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4013      	ands	r3, r2
 8005662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	429a      	cmp	r2, r3
 800566a:	f040 8154 	bne.w	8005916 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b01      	cmp	r3, #1
 8005678:	d005      	beq.n	8005686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005682:	2b02      	cmp	r3, #2
 8005684:	d130      	bne.n	80056e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	2203      	movs	r2, #3
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43db      	mvns	r3, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056bc:	2201      	movs	r2, #1
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	43db      	mvns	r3, r3
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4013      	ands	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	f003 0201 	and.w	r2, r3, #1
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4313      	orrs	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f003 0303 	and.w	r3, r3, #3
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d017      	beq.n	8005724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	2203      	movs	r2, #3
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4013      	ands	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4313      	orrs	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d123      	bne.n	8005778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	08da      	lsrs	r2, r3, #3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3208      	adds	r2, #8
 8005738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	220f      	movs	r2, #15
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	43db      	mvns	r3, r3
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	4013      	ands	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4313      	orrs	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	08da      	lsrs	r2, r3, #3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3208      	adds	r2, #8
 8005772:	69b9      	ldr	r1, [r7, #24]
 8005774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	2203      	movs	r2, #3
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 0203 	and.w	r2, r3, #3
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80ae 	beq.w	8005916 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	4b5d      	ldr	r3, [pc, #372]	@ (8005934 <HAL_GPIO_Init+0x300>)
 80057c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c2:	4a5c      	ldr	r2, [pc, #368]	@ (8005934 <HAL_GPIO_Init+0x300>)
 80057c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80057ca:	4b5a      	ldr	r3, [pc, #360]	@ (8005934 <HAL_GPIO_Init+0x300>)
 80057cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057d6:	4a58      	ldr	r2, [pc, #352]	@ (8005938 <HAL_GPIO_Init+0x304>)
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	089b      	lsrs	r3, r3, #2
 80057dc:	3302      	adds	r3, #2
 80057de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	220f      	movs	r2, #15
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a4f      	ldr	r2, [pc, #316]	@ (800593c <HAL_GPIO_Init+0x308>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d025      	beq.n	800584e <HAL_GPIO_Init+0x21a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a4e      	ldr	r2, [pc, #312]	@ (8005940 <HAL_GPIO_Init+0x30c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01f      	beq.n	800584a <HAL_GPIO_Init+0x216>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a4d      	ldr	r2, [pc, #308]	@ (8005944 <HAL_GPIO_Init+0x310>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d019      	beq.n	8005846 <HAL_GPIO_Init+0x212>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a4c      	ldr	r2, [pc, #304]	@ (8005948 <HAL_GPIO_Init+0x314>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <HAL_GPIO_Init+0x20e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a4b      	ldr	r2, [pc, #300]	@ (800594c <HAL_GPIO_Init+0x318>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00d      	beq.n	800583e <HAL_GPIO_Init+0x20a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a4a      	ldr	r2, [pc, #296]	@ (8005950 <HAL_GPIO_Init+0x31c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d007      	beq.n	800583a <HAL_GPIO_Init+0x206>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a49      	ldr	r2, [pc, #292]	@ (8005954 <HAL_GPIO_Init+0x320>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d101      	bne.n	8005836 <HAL_GPIO_Init+0x202>
 8005832:	2306      	movs	r3, #6
 8005834:	e00c      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 8005836:	2307      	movs	r3, #7
 8005838:	e00a      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 800583a:	2305      	movs	r3, #5
 800583c:	e008      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 800583e:	2304      	movs	r3, #4
 8005840:	e006      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 8005842:	2303      	movs	r3, #3
 8005844:	e004      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 8005846:	2302      	movs	r3, #2
 8005848:	e002      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <HAL_GPIO_Init+0x21c>
 800584e:	2300      	movs	r3, #0
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	f002 0203 	and.w	r2, r2, #3
 8005856:	0092      	lsls	r2, r2, #2
 8005858:	4093      	lsls	r3, r2
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4313      	orrs	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005860:	4935      	ldr	r1, [pc, #212]	@ (8005938 <HAL_GPIO_Init+0x304>)
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	089b      	lsrs	r3, r3, #2
 8005866:	3302      	adds	r3, #2
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800586e:	4b3a      	ldr	r3, [pc, #232]	@ (8005958 <HAL_GPIO_Init+0x324>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	43db      	mvns	r3, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4013      	ands	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005892:	4a31      	ldr	r2, [pc, #196]	@ (8005958 <HAL_GPIO_Init+0x324>)
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005898:	4b2f      	ldr	r3, [pc, #188]	@ (8005958 <HAL_GPIO_Init+0x324>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	43db      	mvns	r3, r3
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	4013      	ands	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058bc:	4a26      	ldr	r2, [pc, #152]	@ (8005958 <HAL_GPIO_Init+0x324>)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058c2:	4b25      	ldr	r3, [pc, #148]	@ (8005958 <HAL_GPIO_Init+0x324>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	43db      	mvns	r3, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4013      	ands	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005958 <HAL_GPIO_Init+0x324>)
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <HAL_GPIO_Init+0x324>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	43db      	mvns	r3, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4013      	ands	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005910:	4a11      	ldr	r2, [pc, #68]	@ (8005958 <HAL_GPIO_Init+0x324>)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	3301      	adds	r3, #1
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	2b0f      	cmp	r3, #15
 8005920:	f67f ae96 	bls.w	8005650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	3724      	adds	r7, #36	@ 0x24
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40023800 	.word	0x40023800
 8005938:	40013800 	.word	0x40013800
 800593c:	40020000 	.word	0x40020000
 8005940:	40020400 	.word	0x40020400
 8005944:	40020800 	.word	0x40020800
 8005948:	40020c00 	.word	0x40020c00
 800594c:	40021000 	.word	0x40021000
 8005950:	40021400 	.word	0x40021400
 8005954:	40021800 	.word	0x40021800
 8005958:	40013c00 	.word	0x40013c00

0800595c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	887b      	ldrh	r3, [r7, #2]
 800596e:	4013      	ands	r3, r2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005974:	2301      	movs	r3, #1
 8005976:	73fb      	strb	r3, [r7, #15]
 8005978:	e001      	b.n	800597e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800597a:	2300      	movs	r3, #0
 800597c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	807b      	strh	r3, [r7, #2]
 8005998:	4613      	mov	r3, r2
 800599a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800599c:	787b      	ldrb	r3, [r7, #1]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059a2:	887a      	ldrh	r2, [r7, #2]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059a8:	e003      	b.n	80059b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059aa:	887b      	ldrh	r3, [r7, #2]
 80059ac:	041a      	lsls	r2, r3, #16
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	619a      	str	r2, [r3, #24]
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059be:	b480      	push	{r7}
 80059c0:	b085      	sub	sp, #20
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	460b      	mov	r3, r1
 80059c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059d0:	887a      	ldrh	r2, [r7, #2]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4013      	ands	r3, r2
 80059d6:	041a      	lsls	r2, r3, #16
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	43d9      	mvns	r1, r3
 80059dc:	887b      	ldrh	r3, [r7, #2]
 80059de:	400b      	ands	r3, r1
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	619a      	str	r2, [r3, #24]
}
 80059e6:	bf00      	nop
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
	...

080059f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059fe:	4b08      	ldr	r3, [pc, #32]	@ (8005a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	4013      	ands	r3, r2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d006      	beq.n	8005a18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a0a:	4a05      	ldr	r2, [pc, #20]	@ (8005a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fb feae 	bl	8001774 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a18:	bf00      	nop
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40013c00 	.word	0x40013c00

08005a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e12b      	b.n	8005c8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fb fcc4 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2224      	movs	r2, #36	@ 0x24
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0201 	bic.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a88:	f001 fbb6 	bl	80071f8 <HAL_RCC_GetPCLK1Freq>
 8005a8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	4a81      	ldr	r2, [pc, #516]	@ (8005c98 <HAL_I2C_Init+0x274>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d807      	bhi.n	8005aa8 <HAL_I2C_Init+0x84>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4a80      	ldr	r2, [pc, #512]	@ (8005c9c <HAL_I2C_Init+0x278>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	bf94      	ite	ls
 8005aa0:	2301      	movls	r3, #1
 8005aa2:	2300      	movhi	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	e006      	b.n	8005ab6 <HAL_I2C_Init+0x92>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4a7d      	ldr	r2, [pc, #500]	@ (8005ca0 <HAL_I2C_Init+0x27c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	bf94      	ite	ls
 8005ab0:	2301      	movls	r3, #1
 8005ab2:	2300      	movhi	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e0e7      	b.n	8005c8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4a78      	ldr	r2, [pc, #480]	@ (8005ca4 <HAL_I2C_Init+0x280>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	0c9b      	lsrs	r3, r3, #18
 8005ac8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	4a6a      	ldr	r2, [pc, #424]	@ (8005c98 <HAL_I2C_Init+0x274>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d802      	bhi.n	8005af8 <HAL_I2C_Init+0xd4>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	3301      	adds	r3, #1
 8005af6:	e009      	b.n	8005b0c <HAL_I2C_Init+0xe8>
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
 8005b02:	4a69      	ldr	r2, [pc, #420]	@ (8005ca8 <HAL_I2C_Init+0x284>)
 8005b04:	fba2 2303 	umull	r2, r3, r2, r3
 8005b08:	099b      	lsrs	r3, r3, #6
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	495c      	ldr	r1, [pc, #368]	@ (8005c98 <HAL_I2C_Init+0x274>)
 8005b28:	428b      	cmp	r3, r1
 8005b2a:	d819      	bhi.n	8005b60 <HAL_I2C_Init+0x13c>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	1e59      	subs	r1, r3, #1
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b3a:	1c59      	adds	r1, r3, #1
 8005b3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b40:	400b      	ands	r3, r1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <HAL_I2C_Init+0x138>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1e59      	subs	r1, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b54:	3301      	adds	r3, #1
 8005b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b5a:	e051      	b.n	8005c00 <HAL_I2C_Init+0x1dc>
 8005b5c:	2304      	movs	r3, #4
 8005b5e:	e04f      	b.n	8005c00 <HAL_I2C_Init+0x1dc>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d111      	bne.n	8005b8c <HAL_I2C_Init+0x168>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	1e58      	subs	r0, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6859      	ldr	r1, [r3, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	440b      	add	r3, r1
 8005b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bf0c      	ite	eq
 8005b84:	2301      	moveq	r3, #1
 8005b86:	2300      	movne	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	e012      	b.n	8005bb2 <HAL_I2C_Init+0x18e>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	1e58      	subs	r0, r3, #1
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6859      	ldr	r1, [r3, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	0099      	lsls	r1, r3, #2
 8005b9c:	440b      	add	r3, r1
 8005b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bf0c      	ite	eq
 8005bac:	2301      	moveq	r3, #1
 8005bae:	2300      	movne	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_I2C_Init+0x196>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e022      	b.n	8005c00 <HAL_I2C_Init+0x1dc>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10e      	bne.n	8005be0 <HAL_I2C_Init+0x1bc>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	1e58      	subs	r0, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6859      	ldr	r1, [r3, #4]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	440b      	add	r3, r1
 8005bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bde:	e00f      	b.n	8005c00 <HAL_I2C_Init+0x1dc>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	1e58      	subs	r0, r3, #1
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6859      	ldr	r1, [r3, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	0099      	lsls	r1, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	6809      	ldr	r1, [r1, #0]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69da      	ldr	r2, [r3, #28]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6911      	ldr	r1, [r2, #16]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68d2      	ldr	r2, [r2, #12]
 8005c3a:	4311      	orrs	r1, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	000186a0 	.word	0x000186a0
 8005c9c:	001e847f 	.word	0x001e847f
 8005ca0:	003d08ff 	.word	0x003d08ff
 8005ca4:	431bde83 	.word	0x431bde83
 8005ca8:	10624dd3 	.word	0x10624dd3

08005cac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	4608      	mov	r0, r1
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	461a      	mov	r2, r3
 8005cba:	4603      	mov	r3, r0
 8005cbc:	817b      	strh	r3, [r7, #10]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	813b      	strh	r3, [r7, #8]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cc6:	f7fe fbc5 	bl	8004454 <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	f040 80d9 	bne.w	8005e8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	2319      	movs	r3, #25
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	496d      	ldr	r1, [pc, #436]	@ (8005e98 <HAL_I2C_Mem_Write+0x1ec>)
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 ff5f 	bl	8006ba8 <I2C_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e0cc      	b.n	8005e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_I2C_Mem_Write+0x56>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e0c5      	b.n	8005e8e <HAL_I2C_Mem_Write+0x1e2>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d007      	beq.n	8005d28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2221      	movs	r2, #33	@ 0x21
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2240      	movs	r2, #64	@ 0x40
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a3a      	ldr	r2, [r7, #32]
 8005d52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4a4d      	ldr	r2, [pc, #308]	@ (8005e9c <HAL_I2C_Mem_Write+0x1f0>)
 8005d68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d6a:	88f8      	ldrh	r0, [r7, #6]
 8005d6c:	893a      	ldrh	r2, [r7, #8]
 8005d6e:	8979      	ldrh	r1, [r7, #10]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	4603      	mov	r3, r0
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 fc7a 	bl	8006674 <I2C_RequestMemoryWrite>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d052      	beq.n	8005e2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e081      	b.n	8005e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f001 f824 	bl	8006ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00d      	beq.n	8005db6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d107      	bne.n	8005db2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005db0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e06b      	b.n	8005e8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dba:	781a      	ldrb	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d11b      	bne.n	8005e2c <HAL_I2C_Mem_Write+0x180>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d017      	beq.n	8005e2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e00:	781a      	ldrb	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1aa      	bne.n	8005d8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f001 f817 	bl	8006e6c <I2C_WaitOnBTFFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00d      	beq.n	8005e60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d107      	bne.n	8005e5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e016      	b.n	8005e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e000      	b.n	8005e8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e8c:	2302      	movs	r3, #2
  }
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	00100002 	.word	0x00100002
 8005e9c:	ffff0000 	.word	0xffff0000

08005ea0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08c      	sub	sp, #48	@ 0x30
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	4611      	mov	r1, r2
 8005eac:	461a      	mov	r2, r3
 8005eae:	4603      	mov	r3, r0
 8005eb0:	817b      	strh	r3, [r7, #10]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	813b      	strh	r3, [r7, #8]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005eba:	f7fe facb 	bl	8004454 <HAL_GetTick>
 8005ebe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	f040 8214 	bne.w	80062f6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	2319      	movs	r3, #25
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	497b      	ldr	r1, [pc, #492]	@ (80060c4 <HAL_I2C_Mem_Read+0x224>)
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fe65 	bl	8006ba8 <I2C_WaitOnFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e207      	b.n	80062f8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_I2C_Mem_Read+0x56>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e200      	b.n	80062f8 <HAL_I2C_Mem_Read+0x458>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d007      	beq.n	8005f1c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2222      	movs	r2, #34	@ 0x22
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2240      	movs	r2, #64	@ 0x40
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4a5b      	ldr	r2, [pc, #364]	@ (80060c8 <HAL_I2C_Mem_Read+0x228>)
 8005f5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f5e:	88f8      	ldrh	r0, [r7, #6]
 8005f60:	893a      	ldrh	r2, [r7, #8]
 8005f62:	8979      	ldrh	r1, [r7, #10]
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	9301      	str	r3, [sp, #4]
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fc16 	bl	80067a0 <I2C_RequestMemoryRead>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e1bc      	b.n	80062f8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d113      	bne.n	8005fae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f86:	2300      	movs	r3, #0
 8005f88:	623b      	str	r3, [r7, #32]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	623b      	str	r3, [r7, #32]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	623b      	str	r3, [r7, #32]
 8005f9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	e190      	b.n	80062d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d11b      	bne.n	8005fee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61fb      	str	r3, [r7, #28]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	61fb      	str	r3, [r7, #28]
 8005fda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	e170      	b.n	80062d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d11b      	bne.n	800602e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006004:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006014:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006016:	2300      	movs	r3, #0
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	e150      	b.n	80062d0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006044:	e144      	b.n	80062d0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800604a:	2b03      	cmp	r3, #3
 800604c:	f200 80f1 	bhi.w	8006232 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006054:	2b01      	cmp	r3, #1
 8006056:	d123      	bne.n	80060a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 ff4d 	bl	8006efc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e145      	b.n	80062f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800609e:	e117      	b.n	80062d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d14e      	bne.n	8006146 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ae:	2200      	movs	r2, #0
 80060b0:	4906      	ldr	r1, [pc, #24]	@ (80060cc <HAL_I2C_Mem_Read+0x22c>)
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fd78 	bl	8006ba8 <I2C_WaitOnFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d008      	beq.n	80060d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e11a      	b.n	80062f8 <HAL_I2C_Mem_Read+0x458>
 80060c2:	bf00      	nop
 80060c4:	00100002 	.word	0x00100002
 80060c8:	ffff0000 	.word	0xffff0000
 80060cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006144:	e0c4      	b.n	80062d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614c:	2200      	movs	r2, #0
 800614e:	496c      	ldr	r1, [pc, #432]	@ (8006300 <HAL_I2C_Mem_Read+0x460>)
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fd29 	bl	8006ba8 <I2C_WaitOnFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e0cb      	b.n	80062f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800616e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a8:	2200      	movs	r2, #0
 80061aa:	4955      	ldr	r1, [pc, #340]	@ (8006300 <HAL_I2C_Mem_Read+0x460>)
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 fcfb 	bl	8006ba8 <I2C_WaitOnFlagUntilTimeout>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e09d      	b.n	80062f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006230:	e04e      	b.n	80062d0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006234:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 fe60 	bl	8006efc <I2C_WaitOnRXNEFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e058      	b.n	80062f8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006262:	3b01      	subs	r3, #1
 8006264:	b29a      	uxth	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800626e:	b29b      	uxth	r3, r3
 8006270:	3b01      	subs	r3, #1
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b04      	cmp	r3, #4
 8006284:	d124      	bne.n	80062d0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628a:	2b03      	cmp	r3, #3
 800628c:	d107      	bne.n	800629e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800629c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f47f aeb6 	bne.w	8006046 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2220      	movs	r2, #32
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	e000      	b.n	80062f8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80062f6:	2302      	movs	r3, #2
  }
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3728      	adds	r7, #40	@ 0x28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	00010004 	.word	0x00010004

08006304 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08c      	sub	sp, #48	@ 0x30
 8006308:	af02      	add	r7, sp, #8
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	4608      	mov	r0, r1
 800630e:	4611      	mov	r1, r2
 8006310:	461a      	mov	r2, r3
 8006312:	4603      	mov	r3, r0
 8006314:	817b      	strh	r3, [r7, #10]
 8006316:	460b      	mov	r3, r1
 8006318:	813b      	strh	r3, [r7, #8]
 800631a:	4613      	mov	r3, r2
 800631c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800631e:	f7fe f899 	bl	8004454 <HAL_GetTick>
 8006322:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b20      	cmp	r3, #32
 8006332:	f040 8172 	bne.w	800661a <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006336:	4b93      	ldr	r3, [pc, #588]	@ (8006584 <HAL_I2C_Mem_Read_DMA+0x280>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	08db      	lsrs	r3, r3, #3
 800633c:	4a92      	ldr	r2, [pc, #584]	@ (8006588 <HAL_I2C_Mem_Read_DMA+0x284>)
 800633e:	fba2 2303 	umull	r2, r3, r2, r3
 8006342:	0a1a      	lsrs	r2, r3, #8
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009a      	lsls	r2, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	3b01      	subs	r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d112      	bne.n	8006382 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006376:	f043 0220 	orr.w	r2, r3, #32
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800637e:	2302      	movs	r3, #2
 8006380:	e14c      	b.n	800661c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b02      	cmp	r3, #2
 800638e:	d0df      	beq.n	8006350 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_I2C_Mem_Read_DMA+0x9a>
 800639a:	2302      	movs	r3, #2
 800639c:	e13e      	b.n	800661c <HAL_I2C_Mem_Read_DMA+0x318>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d007      	beq.n	80063c4 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2222      	movs	r2, #34	@ 0x22
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2240      	movs	r2, #64	@ 0x40
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80063f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a62      	ldr	r2, [pc, #392]	@ (800658c <HAL_I2C_Mem_Read_DMA+0x288>)
 8006404:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8006406:	897a      	ldrh	r2, [r7, #10]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800640c:	893a      	ldrh	r2, [r7, #8]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006412:	88fa      	ldrh	r2, [r7, #6]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 80cc 	beq.w	80065c0 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642c:	2b00      	cmp	r3, #0
 800642e:	d02d      	beq.n	800648c <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006434:	4a56      	ldr	r2, [pc, #344]	@ (8006590 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8006436:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643c:	4a55      	ldr	r2, [pc, #340]	@ (8006594 <HAL_I2C_Mem_Read_DMA+0x290>)
 800643e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006444:	2200      	movs	r2, #0
 8006446:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644c:	2200      	movs	r2, #0
 800644e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006454:	2200      	movs	r2, #0
 8006456:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645c:	2200      	movs	r2, #0
 800645e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3310      	adds	r3, #16
 800646a:	4619      	mov	r1, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006470:	461a      	mov	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006476:	f7fe fded 	bl	8005054 <HAL_DMA_Start_IT>
 800647a:	4603      	mov	r3, r0
 800647c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006480:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 8087 	bne.w	8006598 <HAL_I2C_Mem_Read_DMA+0x294>
 800648a:	e013      	b.n	80064b4 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e0b3      	b.n	800661c <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80064b4:	88f8      	ldrh	r0, [r7, #6]
 80064b6:	893a      	ldrh	r2, [r7, #8]
 80064b8:	8979      	ldrh	r1, [r7, #10]
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	2323      	movs	r3, #35	@ 0x23
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	4603      	mov	r3, r0
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 f96b 	bl	80067a0 <I2C_RequestMemoryRead>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d023      	beq.n	8006518 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fe fe15 	bl	8005104 <HAL_DMA_Abort_IT>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e4:	2200      	movs	r2, #0
 80064e6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064f6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0201 	bic.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e081      	b.n	800661c <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800651c:	2b01      	cmp	r3, #1
 800651e:	d108      	bne.n	8006532 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	e007      	b.n	8006542 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006540:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006542:	2300      	movs	r3, #0
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800656e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800657e:	605a      	str	r2, [r3, #4]
 8006580:	e049      	b.n	8006616 <HAL_I2C_Mem_Read_DMA+0x312>
 8006582:	bf00      	nop
 8006584:	20000004 	.word	0x20000004
 8006588:	14f8b589 	.word	0x14f8b589
 800658c:	ffff0000 	.word	0xffff0000
 8006590:	08006971 	.word	0x08006971
 8006594:	08006b2f 	.word	0x08006b2f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ac:	f043 0210 	orr.w	r2, r3, #16
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e02d      	b.n	800661c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80065c0:	88f8      	ldrh	r0, [r7, #6]
 80065c2:	893a      	ldrh	r2, [r7, #8]
 80065c4:	8979      	ldrh	r1, [r7, #10]
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	2323      	movs	r3, #35	@ 0x23
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	4603      	mov	r3, r0
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f8e5 	bl	80067a0 <I2C_RequestMemoryRead>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e01d      	b.n	800661c <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006604:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	e000      	b.n	800661c <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800661a:	2302      	movs	r3, #2
  }
}
 800661c:	4618      	mov	r0, r3
 800661e:	3728      	adds	r7, #40	@ 0x28
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	4608      	mov	r0, r1
 800667e:	4611      	mov	r1, r2
 8006680:	461a      	mov	r2, r3
 8006682:	4603      	mov	r3, r0
 8006684:	817b      	strh	r3, [r7, #10]
 8006686:	460b      	mov	r3, r1
 8006688:	813b      	strh	r3, [r7, #8]
 800668a:	4613      	mov	r3, r2
 800668c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800669c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 fa7c 	bl	8006ba8 <I2C_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00d      	beq.n	80066d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066c4:	d103      	bne.n	80066ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e05f      	b.n	8006792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066d2:	897b      	ldrh	r3, [r7, #10]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80066e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	6a3a      	ldr	r2, [r7, #32]
 80066e6:	492d      	ldr	r1, [pc, #180]	@ (800679c <I2C_RequestMemoryWrite+0x128>)
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 fad7 	bl	8006c9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e04c      	b.n	8006792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800670e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006710:	6a39      	ldr	r1, [r7, #32]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fb62 	bl	8006ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00d      	beq.n	800673a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006722:	2b04      	cmp	r3, #4
 8006724:	d107      	bne.n	8006736 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006734:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e02b      	b.n	8006792 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800673a:	88fb      	ldrh	r3, [r7, #6]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d105      	bne.n	800674c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006740:	893b      	ldrh	r3, [r7, #8]
 8006742:	b2da      	uxtb	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	611a      	str	r2, [r3, #16]
 800674a:	e021      	b.n	8006790 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800674c:	893b      	ldrh	r3, [r7, #8]
 800674e:	0a1b      	lsrs	r3, r3, #8
 8006750:	b29b      	uxth	r3, r3
 8006752:	b2da      	uxtb	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800675a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800675c:	6a39      	ldr	r1, [r7, #32]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 fb3c 	bl	8006ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00d      	beq.n	8006786 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676e:	2b04      	cmp	r3, #4
 8006770:	d107      	bne.n	8006782 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006780:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e005      	b.n	8006792 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006786:	893b      	ldrh	r3, [r7, #8]
 8006788:	b2da      	uxtb	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	00010002 	.word	0x00010002

080067a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	4608      	mov	r0, r1
 80067aa:	4611      	mov	r1, r2
 80067ac:	461a      	mov	r2, r3
 80067ae:	4603      	mov	r3, r0
 80067b0:	817b      	strh	r3, [r7, #10]
 80067b2:	460b      	mov	r3, r1
 80067b4:	813b      	strh	r3, [r7, #8]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f9de 	bl	8006ba8 <I2C_WaitOnFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00d      	beq.n	800680e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006800:	d103      	bne.n	800680a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006808:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e0aa      	b.n	8006964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800680e:	897b      	ldrh	r3, [r7, #10]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	461a      	mov	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800681c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	6a3a      	ldr	r2, [r7, #32]
 8006822:	4952      	ldr	r1, [pc, #328]	@ (800696c <I2C_RequestMemoryRead+0x1cc>)
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 fa39 	bl	8006c9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e097      	b.n	8006964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800684a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800684c:	6a39      	ldr	r1, [r7, #32]
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 fac4 	bl	8006ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00d      	beq.n	8006876 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685e:	2b04      	cmp	r3, #4
 8006860:	d107      	bne.n	8006872 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006870:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e076      	b.n	8006964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006876:	88fb      	ldrh	r3, [r7, #6]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d105      	bne.n	8006888 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800687c:	893b      	ldrh	r3, [r7, #8]
 800687e:	b2da      	uxtb	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	611a      	str	r2, [r3, #16]
 8006886:	e021      	b.n	80068cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006888:	893b      	ldrh	r3, [r7, #8]
 800688a:	0a1b      	lsrs	r3, r3, #8
 800688c:	b29b      	uxth	r3, r3
 800688e:	b2da      	uxtb	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006898:	6a39      	ldr	r1, [r7, #32]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 fa9e 	bl	8006ddc <I2C_WaitOnTXEFlagUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00d      	beq.n	80068c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d107      	bne.n	80068be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e050      	b.n	8006964 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068c2:	893b      	ldrh	r3, [r7, #8]
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068ce:	6a39      	ldr	r1, [r7, #32]
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 fa83 	bl	8006ddc <I2C_WaitOnTXEFlagUntilTimeout>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00d      	beq.n	80068f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d107      	bne.n	80068f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e035      	b.n	8006964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006906:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	2200      	movs	r2, #0
 8006910:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 f947 	bl	8006ba8 <I2C_WaitOnFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00d      	beq.n	800693c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800692a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800692e:	d103      	bne.n	8006938 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006936:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e013      	b.n	8006964 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800693c:	897b      	ldrh	r3, [r7, #10]
 800693e:	b2db      	uxtb	r3, r3
 8006940:	f043 0301 	orr.w	r3, r3, #1
 8006944:	b2da      	uxtb	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800694c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694e:	6a3a      	ldr	r2, [r7, #32]
 8006950:	4906      	ldr	r1, [pc, #24]	@ (800696c <I2C_RequestMemoryRead+0x1cc>)
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 f9a2 	bl	8006c9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	00010002 	.word	0x00010002

08006970 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006984:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800698c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006992:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80069a2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b0:	2200      	movs	r2, #0
 80069b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c0:	2200      	movs	r2, #0
 80069c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80069c4:	7cfb      	ldrb	r3, [r7, #19]
 80069c6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80069ca:	2b21      	cmp	r3, #33	@ 0x21
 80069cc:	d007      	beq.n	80069de <I2C_DMAXferCplt+0x6e>
 80069ce:	7cfb      	ldrb	r3, [r7, #19]
 80069d0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80069d4:	2b22      	cmp	r3, #34	@ 0x22
 80069d6:	d131      	bne.n	8006a3c <I2C_DMAXferCplt+0xcc>
 80069d8:	7cbb      	ldrb	r3, [r7, #18]
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d12e      	bne.n	8006a3c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069ec:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2200      	movs	r2, #0
 80069f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80069f4:	7cfb      	ldrb	r3, [r7, #19]
 80069f6:	2b29      	cmp	r3, #41	@ 0x29
 80069f8:	d10a      	bne.n	8006a10 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2221      	movs	r2, #33	@ 0x21
 80069fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2228      	movs	r2, #40	@ 0x28
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a08:	6978      	ldr	r0, [r7, #20]
 8006a0a:	f7ff fe15 	bl	8006638 <HAL_I2C_SlaveTxCpltCallback>
 8006a0e:	e00c      	b.n	8006a2a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a10:	7cfb      	ldrb	r3, [r7, #19]
 8006a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a14:	d109      	bne.n	8006a2a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2222      	movs	r2, #34	@ 0x22
 8006a1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2228      	movs	r2, #40	@ 0x28
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a24:	6978      	ldr	r0, [r7, #20]
 8006a26:	f7ff fe11 	bl	800664c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006a38:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006a3a:	e074      	b.n	8006b26 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d06e      	beq.n	8006b26 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d107      	bne.n	8006a62 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a60:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006a70:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a78:	d009      	beq.n	8006a8e <I2C_DMAXferCplt+0x11e>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d006      	beq.n	8006a8e <I2C_DMAXferCplt+0x11e>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006a86:	d002      	beq.n	8006a8e <I2C_DMAXferCplt+0x11e>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d107      	bne.n	8006a9e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a9c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006aac:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006abc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006acc:	6978      	ldr	r0, [r7, #20]
 8006ace:	f7ff fdc7 	bl	8006660 <HAL_I2C_ErrorCallback>
}
 8006ad2:	e028      	b.n	8006b26 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b40      	cmp	r3, #64	@ 0x40
 8006ae6:	d10a      	bne.n	8006afe <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2200      	movs	r2, #0
 8006af4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006af6:	6978      	ldr	r0, [r7, #20]
 8006af8:	f7fa fe4a 	bl	8001790 <HAL_I2C_MemRxCpltCallback>
}
 8006afc:	e013      	b.n	8006b26 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d002      	beq.n	8006b12 <I2C_DMAXferCplt+0x1a2>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d103      	bne.n	8006b1a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2200      	movs	r2, #0
 8006b16:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b18:	e002      	b.n	8006b20 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2212      	movs	r2, #18
 8006b1e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b20:	6978      	ldr	r0, [r7, #20]
 8006b22:	f7ff fd7f 	bl	8006624 <HAL_I2C_MasterRxCpltCallback>
}
 8006b26:	bf00      	nop
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b48:	2200      	movs	r2, #0
 8006b4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b58:	2200      	movs	r2, #0
 8006b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7fe fc7d 	bl	800545c <HAL_DMA_GetError>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d01b      	beq.n	8006ba0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b76:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b92:	f043 0210 	orr.w	r2, r3, #16
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff fd60 	bl	8006660 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bb8:	e048      	b.n	8006c4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bc0:	d044      	beq.n	8006c4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc2:	f7fd fc47 	bl	8004454 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d302      	bcc.n	8006bd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d139      	bne.n	8006c4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	0c1b      	lsrs	r3, r3, #16
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d10d      	bne.n	8006bfe <I2C_WaitOnFlagUntilTimeout+0x56>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	43da      	mvns	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	4013      	ands	r3, r2
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bf0c      	ite	eq
 8006bf4:	2301      	moveq	r3, #1
 8006bf6:	2300      	movne	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	e00c      	b.n	8006c18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	43da      	mvns	r2, r3
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bf0c      	ite	eq
 8006c10:	2301      	moveq	r3, #1
 8006c12:	2300      	movne	r3, #0
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d116      	bne.n	8006c4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c38:	f043 0220 	orr.w	r2, r3, #32
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e023      	b.n	8006c94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	0c1b      	lsrs	r3, r3, #16
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d10d      	bne.n	8006c72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	43da      	mvns	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4013      	ands	r3, r2
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bf0c      	ite	eq
 8006c68:	2301      	moveq	r3, #1
 8006c6a:	2300      	movne	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	461a      	mov	r2, r3
 8006c70:	e00c      	b.n	8006c8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	43da      	mvns	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bf0c      	ite	eq
 8006c84:	2301      	moveq	r3, #1
 8006c86:	2300      	movne	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d093      	beq.n	8006bba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006caa:	e071      	b.n	8006d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cba:	d123      	bne.n	8006d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006cd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf0:	f043 0204 	orr.w	r2, r3, #4
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e067      	b.n	8006dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d0a:	d041      	beq.n	8006d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d0c:	f7fd fba2 	bl	8004454 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d302      	bcc.n	8006d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d136      	bne.n	8006d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	0c1b      	lsrs	r3, r3, #16
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d10c      	bne.n	8006d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	43da      	mvns	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	4013      	ands	r3, r2
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bf14      	ite	ne
 8006d3e:	2301      	movne	r3, #1
 8006d40:	2300      	moveq	r3, #0
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	e00b      	b.n	8006d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	43da      	mvns	r2, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	4013      	ands	r3, r2
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	bf14      	ite	ne
 8006d58:	2301      	movne	r3, #1
 8006d5a:	2300      	moveq	r3, #0
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d016      	beq.n	8006d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7c:	f043 0220 	orr.w	r2, r3, #32
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e021      	b.n	8006dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	0c1b      	lsrs	r3, r3, #16
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d10c      	bne.n	8006db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	43da      	mvns	r2, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	4013      	ands	r3, r2
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bf14      	ite	ne
 8006dac:	2301      	movne	r3, #1
 8006dae:	2300      	moveq	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	e00b      	b.n	8006dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	43da      	mvns	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bf14      	ite	ne
 8006dc6:	2301      	movne	r3, #1
 8006dc8:	2300      	moveq	r3, #0
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f47f af6d 	bne.w	8006cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006de8:	e034      	b.n	8006e54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f8e3 	bl	8006fb6 <I2C_IsAcknowledgeFailed>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e034      	b.n	8006e64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e00:	d028      	beq.n	8006e54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e02:	f7fd fb27 	bl	8004454 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d302      	bcc.n	8006e18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d11d      	bne.n	8006e54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e22:	2b80      	cmp	r3, #128	@ 0x80
 8006e24:	d016      	beq.n	8006e54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e40:	f043 0220 	orr.w	r2, r3, #32
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e007      	b.n	8006e64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e5e:	2b80      	cmp	r3, #128	@ 0x80
 8006e60:	d1c3      	bne.n	8006dea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e78:	e034      	b.n	8006ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 f89b 	bl	8006fb6 <I2C_IsAcknowledgeFailed>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e034      	b.n	8006ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e90:	d028      	beq.n	8006ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e92:	f7fd fadf 	bl	8004454 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d302      	bcc.n	8006ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d11d      	bne.n	8006ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	f003 0304 	and.w	r3, r3, #4
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d016      	beq.n	8006ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed0:	f043 0220 	orr.w	r2, r3, #32
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e007      	b.n	8006ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d1c3      	bne.n	8006e7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f08:	e049      	b.n	8006f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	f003 0310 	and.w	r3, r3, #16
 8006f14:	2b10      	cmp	r3, #16
 8006f16:	d119      	bne.n	8006f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f06f 0210 	mvn.w	r2, #16
 8006f20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e030      	b.n	8006fae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f4c:	f7fd fa82 	bl	8004454 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d302      	bcc.n	8006f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d11d      	bne.n	8006f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f6c:	2b40      	cmp	r3, #64	@ 0x40
 8006f6e:	d016      	beq.n	8006f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8a:	f043 0220 	orr.w	r2, r3, #32
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e007      	b.n	8006fae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa8:	2b40      	cmp	r3, #64	@ 0x40
 8006faa:	d1ae      	bne.n	8006f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fcc:	d11b      	bne.n	8007006 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006fd6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff2:	f043 0204 	orr.w	r2, r3, #4
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e000      	b.n	8007008 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e0cc      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007028:	4b68      	ldr	r3, [pc, #416]	@ (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d90c      	bls.n	8007050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007036:	4b65      	ldr	r3, [pc, #404]	@ (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	b2d2      	uxtb	r2, r2
 800703c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800703e:	4b63      	ldr	r3, [pc, #396]	@ (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d001      	beq.n	8007050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0b8      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d020      	beq.n	800709e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007068:	4b59      	ldr	r3, [pc, #356]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	4a58      	ldr	r2, [pc, #352]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800706e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007072:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007080:	4b53      	ldr	r3, [pc, #332]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	4a52      	ldr	r2, [pc, #328]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007086:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800708a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800708c:	4b50      	ldr	r3, [pc, #320]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	494d      	ldr	r1, [pc, #308]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	4313      	orrs	r3, r2
 800709c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d044      	beq.n	8007134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d107      	bne.n	80070c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070b2:	4b47      	ldr	r3, [pc, #284]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d119      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e07f      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d003      	beq.n	80070d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d107      	bne.n	80070e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070d2:	4b3f      	ldr	r3, [pc, #252]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e06f      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e2:	4b3b      	ldr	r3, [pc, #236]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e067      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070f2:	4b37      	ldr	r3, [pc, #220]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f023 0203 	bic.w	r2, r3, #3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	4934      	ldr	r1, [pc, #208]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007100:	4313      	orrs	r3, r2
 8007102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007104:	f7fd f9a6 	bl	8004454 <HAL_GetTick>
 8007108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710a:	e00a      	b.n	8007122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800710c:	f7fd f9a2 	bl	8004454 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800711a:	4293      	cmp	r3, r2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e04f      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007122:	4b2b      	ldr	r3, [pc, #172]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f003 020c 	and.w	r2, r3, #12
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	429a      	cmp	r2, r3
 8007132:	d1eb      	bne.n	800710c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007134:	4b25      	ldr	r3, [pc, #148]	@ (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d20c      	bcs.n	800715c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007142:	4b22      	ldr	r3, [pc, #136]	@ (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800714a:	4b20      	ldr	r3, [pc, #128]	@ (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d001      	beq.n	800715c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e032      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	d008      	beq.n	800717a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007168:	4b19      	ldr	r3, [pc, #100]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	4916      	ldr	r1, [pc, #88]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007176:	4313      	orrs	r3, r2
 8007178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d009      	beq.n	800719a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007186:	4b12      	ldr	r3, [pc, #72]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	490e      	ldr	r1, [pc, #56]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007196:	4313      	orrs	r3, r2
 8007198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800719a:	f000 f855 	bl	8007248 <HAL_RCC_GetSysClockFreq>
 800719e:	4602      	mov	r2, r0
 80071a0:	4b0b      	ldr	r3, [pc, #44]	@ (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	091b      	lsrs	r3, r3, #4
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	490a      	ldr	r1, [pc, #40]	@ (80071d4 <HAL_RCC_ClockConfig+0x1c0>)
 80071ac:	5ccb      	ldrb	r3, [r1, r3]
 80071ae:	fa22 f303 	lsr.w	r3, r2, r3
 80071b2:	4a09      	ldr	r2, [pc, #36]	@ (80071d8 <HAL_RCC_ClockConfig+0x1c4>)
 80071b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80071b6:	4b09      	ldr	r3, [pc, #36]	@ (80071dc <HAL_RCC_ClockConfig+0x1c8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fd f906 	bl	80043cc <HAL_InitTick>

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	40023c00 	.word	0x40023c00
 80071d0:	40023800 	.word	0x40023800
 80071d4:	0800c744 	.word	0x0800c744
 80071d8:	20000004 	.word	0x20000004
 80071dc:	200003c0 	.word	0x200003c0

080071e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071e0:	b480      	push	{r7}
 80071e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071e4:	4b03      	ldr	r3, [pc, #12]	@ (80071f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80071e6:	681b      	ldr	r3, [r3, #0]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20000004 	.word	0x20000004

080071f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071fc:	f7ff fff0 	bl	80071e0 <HAL_RCC_GetHCLKFreq>
 8007200:	4602      	mov	r2, r0
 8007202:	4b05      	ldr	r3, [pc, #20]	@ (8007218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	0a9b      	lsrs	r3, r3, #10
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	4903      	ldr	r1, [pc, #12]	@ (800721c <HAL_RCC_GetPCLK1Freq+0x24>)
 800720e:	5ccb      	ldrb	r3, [r1, r3]
 8007210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007214:	4618      	mov	r0, r3
 8007216:	bd80      	pop	{r7, pc}
 8007218:	40023800 	.word	0x40023800
 800721c:	0800c754 	.word	0x0800c754

08007220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007224:	f7ff ffdc 	bl	80071e0 <HAL_RCC_GetHCLKFreq>
 8007228:	4602      	mov	r2, r0
 800722a:	4b05      	ldr	r3, [pc, #20]	@ (8007240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	0b5b      	lsrs	r3, r3, #13
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	4903      	ldr	r1, [pc, #12]	@ (8007244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007236:	5ccb      	ldrb	r3, [r1, r3]
 8007238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800723c:	4618      	mov	r0, r3
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40023800 	.word	0x40023800
 8007244:	0800c754 	.word	0x0800c754

08007248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800724c:	b0ae      	sub	sp, #184	@ 0xb8
 800724e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800726e:	4bcb      	ldr	r3, [pc, #812]	@ (800759c <HAL_RCC_GetSysClockFreq+0x354>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 030c 	and.w	r3, r3, #12
 8007276:	2b0c      	cmp	r3, #12
 8007278:	f200 8206 	bhi.w	8007688 <HAL_RCC_GetSysClockFreq+0x440>
 800727c:	a201      	add	r2, pc, #4	@ (adr r2, 8007284 <HAL_RCC_GetSysClockFreq+0x3c>)
 800727e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007282:	bf00      	nop
 8007284:	080072b9 	.word	0x080072b9
 8007288:	08007689 	.word	0x08007689
 800728c:	08007689 	.word	0x08007689
 8007290:	08007689 	.word	0x08007689
 8007294:	080072c1 	.word	0x080072c1
 8007298:	08007689 	.word	0x08007689
 800729c:	08007689 	.word	0x08007689
 80072a0:	08007689 	.word	0x08007689
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	08007689 	.word	0x08007689
 80072ac:	08007689 	.word	0x08007689
 80072b0:	08007689 	.word	0x08007689
 80072b4:	080074b9 	.word	0x080074b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072b8:	4bb9      	ldr	r3, [pc, #740]	@ (80075a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80072ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80072be:	e1e7      	b.n	8007690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072c0:	4bb8      	ldr	r3, [pc, #736]	@ (80075a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80072c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80072c6:	e1e3      	b.n	8007690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072c8:	4bb4      	ldr	r3, [pc, #720]	@ (800759c <HAL_RCC_GetSysClockFreq+0x354>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072d4:	4bb1      	ldr	r3, [pc, #708]	@ (800759c <HAL_RCC_GetSysClockFreq+0x354>)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d071      	beq.n	80073c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072e0:	4bae      	ldr	r3, [pc, #696]	@ (800759c <HAL_RCC_GetSysClockFreq+0x354>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	099b      	lsrs	r3, r3, #6
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072ec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80072f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072fc:	2300      	movs	r3, #0
 80072fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007306:	4622      	mov	r2, r4
 8007308:	462b      	mov	r3, r5
 800730a:	f04f 0000 	mov.w	r0, #0
 800730e:	f04f 0100 	mov.w	r1, #0
 8007312:	0159      	lsls	r1, r3, #5
 8007314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007318:	0150      	lsls	r0, r2, #5
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4621      	mov	r1, r4
 8007320:	1a51      	subs	r1, r2, r1
 8007322:	6439      	str	r1, [r7, #64]	@ 0x40
 8007324:	4629      	mov	r1, r5
 8007326:	eb63 0301 	sbc.w	r3, r3, r1
 800732a:	647b      	str	r3, [r7, #68]	@ 0x44
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007338:	4649      	mov	r1, r9
 800733a:	018b      	lsls	r3, r1, #6
 800733c:	4641      	mov	r1, r8
 800733e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007342:	4641      	mov	r1, r8
 8007344:	018a      	lsls	r2, r1, #6
 8007346:	4641      	mov	r1, r8
 8007348:	1a51      	subs	r1, r2, r1
 800734a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800734c:	4649      	mov	r1, r9
 800734e:	eb63 0301 	sbc.w	r3, r3, r1
 8007352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007354:	f04f 0200 	mov.w	r2, #0
 8007358:	f04f 0300 	mov.w	r3, #0
 800735c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007360:	4649      	mov	r1, r9
 8007362:	00cb      	lsls	r3, r1, #3
 8007364:	4641      	mov	r1, r8
 8007366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800736a:	4641      	mov	r1, r8
 800736c:	00ca      	lsls	r2, r1, #3
 800736e:	4610      	mov	r0, r2
 8007370:	4619      	mov	r1, r3
 8007372:	4603      	mov	r3, r0
 8007374:	4622      	mov	r2, r4
 8007376:	189b      	adds	r3, r3, r2
 8007378:	633b      	str	r3, [r7, #48]	@ 0x30
 800737a:	462b      	mov	r3, r5
 800737c:	460a      	mov	r2, r1
 800737e:	eb42 0303 	adc.w	r3, r2, r3
 8007382:	637b      	str	r3, [r7, #52]	@ 0x34
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007390:	4629      	mov	r1, r5
 8007392:	024b      	lsls	r3, r1, #9
 8007394:	4621      	mov	r1, r4
 8007396:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800739a:	4621      	mov	r1, r4
 800739c:	024a      	lsls	r2, r1, #9
 800739e:	4610      	mov	r0, r2
 80073a0:	4619      	mov	r1, r3
 80073a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80073ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80073b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80073b4:	f7f9 fc98 	bl	8000ce8 <__aeabi_uldivmod>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4613      	mov	r3, r2
 80073be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073c2:	e067      	b.n	8007494 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073c4:	4b75      	ldr	r3, [pc, #468]	@ (800759c <HAL_RCC_GetSysClockFreq+0x354>)
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	099b      	lsrs	r3, r3, #6
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073d0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80073d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073de:	2300      	movs	r3, #0
 80073e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80073e6:	4622      	mov	r2, r4
 80073e8:	462b      	mov	r3, r5
 80073ea:	f04f 0000 	mov.w	r0, #0
 80073ee:	f04f 0100 	mov.w	r1, #0
 80073f2:	0159      	lsls	r1, r3, #5
 80073f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073f8:	0150      	lsls	r0, r2, #5
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4621      	mov	r1, r4
 8007400:	1a51      	subs	r1, r2, r1
 8007402:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007404:	4629      	mov	r1, r5
 8007406:	eb63 0301 	sbc.w	r3, r3, r1
 800740a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007418:	4649      	mov	r1, r9
 800741a:	018b      	lsls	r3, r1, #6
 800741c:	4641      	mov	r1, r8
 800741e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007422:	4641      	mov	r1, r8
 8007424:	018a      	lsls	r2, r1, #6
 8007426:	4641      	mov	r1, r8
 8007428:	ebb2 0a01 	subs.w	sl, r2, r1
 800742c:	4649      	mov	r1, r9
 800742e:	eb63 0b01 	sbc.w	fp, r3, r1
 8007432:	f04f 0200 	mov.w	r2, #0
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800743e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007442:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007446:	4692      	mov	sl, r2
 8007448:	469b      	mov	fp, r3
 800744a:	4623      	mov	r3, r4
 800744c:	eb1a 0303 	adds.w	r3, sl, r3
 8007450:	623b      	str	r3, [r7, #32]
 8007452:	462b      	mov	r3, r5
 8007454:	eb4b 0303 	adc.w	r3, fp, r3
 8007458:	627b      	str	r3, [r7, #36]	@ 0x24
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	f04f 0300 	mov.w	r3, #0
 8007462:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007466:	4629      	mov	r1, r5
 8007468:	028b      	lsls	r3, r1, #10
 800746a:	4621      	mov	r1, r4
 800746c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007470:	4621      	mov	r1, r4
 8007472:	028a      	lsls	r2, r1, #10
 8007474:	4610      	mov	r0, r2
 8007476:	4619      	mov	r1, r3
 8007478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800747c:	2200      	movs	r2, #0
 800747e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007480:	677a      	str	r2, [r7, #116]	@ 0x74
 8007482:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007486:	f7f9 fc2f 	bl	8000ce8 <__aeabi_uldivmod>
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4613      	mov	r3, r2
 8007490:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007494:	4b41      	ldr	r3, [pc, #260]	@ (800759c <HAL_RCC_GetSysClockFreq+0x354>)
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	0c1b      	lsrs	r3, r3, #16
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	3301      	adds	r3, #1
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80074a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80074aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80074b6:	e0eb      	b.n	8007690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074b8:	4b38      	ldr	r3, [pc, #224]	@ (800759c <HAL_RCC_GetSysClockFreq+0x354>)
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074c4:	4b35      	ldr	r3, [pc, #212]	@ (800759c <HAL_RCC_GetSysClockFreq+0x354>)
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d06b      	beq.n	80075a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074d0:	4b32      	ldr	r3, [pc, #200]	@ (800759c <HAL_RCC_GetSysClockFreq+0x354>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	099b      	lsrs	r3, r3, #6
 80074d6:	2200      	movs	r2, #0
 80074d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80074e4:	2300      	movs	r3, #0
 80074e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80074e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80074ec:	4622      	mov	r2, r4
 80074ee:	462b      	mov	r3, r5
 80074f0:	f04f 0000 	mov.w	r0, #0
 80074f4:	f04f 0100 	mov.w	r1, #0
 80074f8:	0159      	lsls	r1, r3, #5
 80074fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074fe:	0150      	lsls	r0, r2, #5
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4621      	mov	r1, r4
 8007506:	1a51      	subs	r1, r2, r1
 8007508:	61b9      	str	r1, [r7, #24]
 800750a:	4629      	mov	r1, r5
 800750c:	eb63 0301 	sbc.w	r3, r3, r1
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800751e:	4659      	mov	r1, fp
 8007520:	018b      	lsls	r3, r1, #6
 8007522:	4651      	mov	r1, sl
 8007524:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007528:	4651      	mov	r1, sl
 800752a:	018a      	lsls	r2, r1, #6
 800752c:	4651      	mov	r1, sl
 800752e:	ebb2 0801 	subs.w	r8, r2, r1
 8007532:	4659      	mov	r1, fp
 8007534:	eb63 0901 	sbc.w	r9, r3, r1
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007544:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007548:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800754c:	4690      	mov	r8, r2
 800754e:	4699      	mov	r9, r3
 8007550:	4623      	mov	r3, r4
 8007552:	eb18 0303 	adds.w	r3, r8, r3
 8007556:	613b      	str	r3, [r7, #16]
 8007558:	462b      	mov	r3, r5
 800755a:	eb49 0303 	adc.w	r3, r9, r3
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	f04f 0200 	mov.w	r2, #0
 8007564:	f04f 0300 	mov.w	r3, #0
 8007568:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800756c:	4629      	mov	r1, r5
 800756e:	024b      	lsls	r3, r1, #9
 8007570:	4621      	mov	r1, r4
 8007572:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007576:	4621      	mov	r1, r4
 8007578:	024a      	lsls	r2, r1, #9
 800757a:	4610      	mov	r0, r2
 800757c:	4619      	mov	r1, r3
 800757e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007582:	2200      	movs	r2, #0
 8007584:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007586:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007588:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800758c:	f7f9 fbac 	bl	8000ce8 <__aeabi_uldivmod>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4613      	mov	r3, r2
 8007596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800759a:	e065      	b.n	8007668 <HAL_RCC_GetSysClockFreq+0x420>
 800759c:	40023800 	.word	0x40023800
 80075a0:	00f42400 	.word	0x00f42400
 80075a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075a8:	4b3d      	ldr	r3, [pc, #244]	@ (80076a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	099b      	lsrs	r3, r3, #6
 80075ae:	2200      	movs	r2, #0
 80075b0:	4618      	mov	r0, r3
 80075b2:	4611      	mov	r1, r2
 80075b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80075b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80075ba:	2300      	movs	r3, #0
 80075bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80075be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80075c2:	4642      	mov	r2, r8
 80075c4:	464b      	mov	r3, r9
 80075c6:	f04f 0000 	mov.w	r0, #0
 80075ca:	f04f 0100 	mov.w	r1, #0
 80075ce:	0159      	lsls	r1, r3, #5
 80075d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075d4:	0150      	lsls	r0, r2, #5
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4641      	mov	r1, r8
 80075dc:	1a51      	subs	r1, r2, r1
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	4649      	mov	r1, r9
 80075e2:	eb63 0301 	sbc.w	r3, r3, r1
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	f04f 0300 	mov.w	r3, #0
 80075f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80075f4:	4659      	mov	r1, fp
 80075f6:	018b      	lsls	r3, r1, #6
 80075f8:	4651      	mov	r1, sl
 80075fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80075fe:	4651      	mov	r1, sl
 8007600:	018a      	lsls	r2, r1, #6
 8007602:	4651      	mov	r1, sl
 8007604:	1a54      	subs	r4, r2, r1
 8007606:	4659      	mov	r1, fp
 8007608:	eb63 0501 	sbc.w	r5, r3, r1
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	00eb      	lsls	r3, r5, #3
 8007616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800761a:	00e2      	lsls	r2, r4, #3
 800761c:	4614      	mov	r4, r2
 800761e:	461d      	mov	r5, r3
 8007620:	4643      	mov	r3, r8
 8007622:	18e3      	adds	r3, r4, r3
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	464b      	mov	r3, r9
 8007628:	eb45 0303 	adc.w	r3, r5, r3
 800762c:	607b      	str	r3, [r7, #4]
 800762e:	f04f 0200 	mov.w	r2, #0
 8007632:	f04f 0300 	mov.w	r3, #0
 8007636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800763a:	4629      	mov	r1, r5
 800763c:	028b      	lsls	r3, r1, #10
 800763e:	4621      	mov	r1, r4
 8007640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007644:	4621      	mov	r1, r4
 8007646:	028a      	lsls	r2, r1, #10
 8007648:	4610      	mov	r0, r2
 800764a:	4619      	mov	r1, r3
 800764c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007650:	2200      	movs	r2, #0
 8007652:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007654:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007656:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800765a:	f7f9 fb45 	bl	8000ce8 <__aeabi_uldivmod>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4613      	mov	r3, r2
 8007664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007668:	4b0d      	ldr	r3, [pc, #52]	@ (80076a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	0f1b      	lsrs	r3, r3, #28
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8007676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800767a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800767e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007682:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007686:	e003      	b.n	8007690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007688:	4b06      	ldr	r3, [pc, #24]	@ (80076a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800768a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800768e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007694:	4618      	mov	r0, r3
 8007696:	37b8      	adds	r7, #184	@ 0xb8
 8007698:	46bd      	mov	sp, r7
 800769a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800769e:	bf00      	nop
 80076a0:	40023800 	.word	0x40023800
 80076a4:	00f42400 	.word	0x00f42400

080076a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e28d      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 8083 	beq.w	80077ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80076c8:	4b94      	ldr	r3, [pc, #592]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f003 030c 	and.w	r3, r3, #12
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	d019      	beq.n	8007708 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80076d4:	4b91      	ldr	r3, [pc, #580]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 030c 	and.w	r3, r3, #12
        || \
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d106      	bne.n	80076ee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80076e0:	4b8e      	ldr	r3, [pc, #568]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076ec:	d00c      	beq.n	8007708 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076ee:	4b8b      	ldr	r3, [pc, #556]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80076f6:	2b0c      	cmp	r3, #12
 80076f8:	d112      	bne.n	8007720 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076fa:	4b88      	ldr	r3, [pc, #544]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007702:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007706:	d10b      	bne.n	8007720 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007708:	4b84      	ldr	r3, [pc, #528]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d05b      	beq.n	80077cc <HAL_RCC_OscConfig+0x124>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d157      	bne.n	80077cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e25a      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007728:	d106      	bne.n	8007738 <HAL_RCC_OscConfig+0x90>
 800772a:	4b7c      	ldr	r3, [pc, #496]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a7b      	ldr	r2, [pc, #492]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 8007730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	e01d      	b.n	8007774 <HAL_RCC_OscConfig+0xcc>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007740:	d10c      	bne.n	800775c <HAL_RCC_OscConfig+0xb4>
 8007742:	4b76      	ldr	r3, [pc, #472]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a75      	ldr	r2, [pc, #468]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 8007748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	4b73      	ldr	r3, [pc, #460]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a72      	ldr	r2, [pc, #456]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 8007754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	e00b      	b.n	8007774 <HAL_RCC_OscConfig+0xcc>
 800775c:	4b6f      	ldr	r3, [pc, #444]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a6e      	ldr	r2, [pc, #440]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 8007762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	4b6c      	ldr	r3, [pc, #432]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a6b      	ldr	r2, [pc, #428]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 800776e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d013      	beq.n	80077a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777c:	f7fc fe6a 	bl	8004454 <HAL_GetTick>
 8007780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007782:	e008      	b.n	8007796 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007784:	f7fc fe66 	bl	8004454 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b64      	cmp	r3, #100	@ 0x64
 8007790:	d901      	bls.n	8007796 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e21f      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007796:	4b61      	ldr	r3, [pc, #388]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0f0      	beq.n	8007784 <HAL_RCC_OscConfig+0xdc>
 80077a2:	e014      	b.n	80077ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a4:	f7fc fe56 	bl	8004454 <HAL_GetTick>
 80077a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077aa:	e008      	b.n	80077be <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077ac:	f7fc fe52 	bl	8004454 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b64      	cmp	r3, #100	@ 0x64
 80077b8:	d901      	bls.n	80077be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e20b      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077be:	4b57      	ldr	r3, [pc, #348]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1f0      	bne.n	80077ac <HAL_RCC_OscConfig+0x104>
 80077ca:	e000      	b.n	80077ce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d06f      	beq.n	80078ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80077da:	4b50      	ldr	r3, [pc, #320]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 030c 	and.w	r3, r3, #12
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d017      	beq.n	8007816 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80077e6:	4b4d      	ldr	r3, [pc, #308]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f003 030c 	and.w	r3, r3, #12
        || \
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d105      	bne.n	80077fe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80077f2:	4b4a      	ldr	r3, [pc, #296]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00b      	beq.n	8007816 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077fe:	4b47      	ldr	r3, [pc, #284]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007806:	2b0c      	cmp	r3, #12
 8007808:	d11c      	bne.n	8007844 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800780a:	4b44      	ldr	r3, [pc, #272]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d116      	bne.n	8007844 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007816:	4b41      	ldr	r3, [pc, #260]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d005      	beq.n	800782e <HAL_RCC_OscConfig+0x186>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d001      	beq.n	800782e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e1d3      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800782e:	4b3b      	ldr	r3, [pc, #236]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	4937      	ldr	r1, [pc, #220]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 800783e:	4313      	orrs	r3, r2
 8007840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007842:	e03a      	b.n	80078ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d020      	beq.n	800788e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800784c:	4b34      	ldr	r3, [pc, #208]	@ (8007920 <HAL_RCC_OscConfig+0x278>)
 800784e:	2201      	movs	r2, #1
 8007850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007852:	f7fc fdff 	bl	8004454 <HAL_GetTick>
 8007856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007858:	e008      	b.n	800786c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800785a:	f7fc fdfb 	bl	8004454 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	2b02      	cmp	r3, #2
 8007866:	d901      	bls.n	800786c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e1b4      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800786c:	4b2b      	ldr	r3, [pc, #172]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0f0      	beq.n	800785a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007878:	4b28      	ldr	r3, [pc, #160]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	4925      	ldr	r1, [pc, #148]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 8007888:	4313      	orrs	r3, r2
 800788a:	600b      	str	r3, [r1, #0]
 800788c:	e015      	b.n	80078ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800788e:	4b24      	ldr	r3, [pc, #144]	@ (8007920 <HAL_RCC_OscConfig+0x278>)
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007894:	f7fc fdde 	bl	8004454 <HAL_GetTick>
 8007898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800789a:	e008      	b.n	80078ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800789c:	f7fc fdda 	bl	8004454 <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d901      	bls.n	80078ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e193      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ae:	4b1b      	ldr	r3, [pc, #108]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1f0      	bne.n	800789c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d036      	beq.n	8007934 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d016      	beq.n	80078fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078ce:	4b15      	ldr	r3, [pc, #84]	@ (8007924 <HAL_RCC_OscConfig+0x27c>)
 80078d0:	2201      	movs	r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d4:	f7fc fdbe 	bl	8004454 <HAL_GetTick>
 80078d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078da:	e008      	b.n	80078ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078dc:	f7fc fdba 	bl	8004454 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e173      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078ee:	4b0b      	ldr	r3, [pc, #44]	@ (800791c <HAL_RCC_OscConfig+0x274>)
 80078f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078f2:	f003 0302 	and.w	r3, r3, #2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0f0      	beq.n	80078dc <HAL_RCC_OscConfig+0x234>
 80078fa:	e01b      	b.n	8007934 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078fc:	4b09      	ldr	r3, [pc, #36]	@ (8007924 <HAL_RCC_OscConfig+0x27c>)
 80078fe:	2200      	movs	r2, #0
 8007900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007902:	f7fc fda7 	bl	8004454 <HAL_GetTick>
 8007906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007908:	e00e      	b.n	8007928 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800790a:	f7fc fda3 	bl	8004454 <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d907      	bls.n	8007928 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e15c      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
 800791c:	40023800 	.word	0x40023800
 8007920:	42470000 	.word	0x42470000
 8007924:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007928:	4b8a      	ldr	r3, [pc, #552]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 800792a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1ea      	bne.n	800790a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8097 	beq.w	8007a70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007942:	2300      	movs	r3, #0
 8007944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007946:	4b83      	ldr	r3, [pc, #524]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 8007948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10f      	bne.n	8007972 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007952:	2300      	movs	r3, #0
 8007954:	60bb      	str	r3, [r7, #8]
 8007956:	4b7f      	ldr	r3, [pc, #508]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 8007958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795a:	4a7e      	ldr	r2, [pc, #504]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 800795c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007960:	6413      	str	r3, [r2, #64]	@ 0x40
 8007962:	4b7c      	ldr	r3, [pc, #496]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 8007964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800796a:	60bb      	str	r3, [r7, #8]
 800796c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800796e:	2301      	movs	r3, #1
 8007970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007972:	4b79      	ldr	r3, [pc, #484]	@ (8007b58 <HAL_RCC_OscConfig+0x4b0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800797a:	2b00      	cmp	r3, #0
 800797c:	d118      	bne.n	80079b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800797e:	4b76      	ldr	r3, [pc, #472]	@ (8007b58 <HAL_RCC_OscConfig+0x4b0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a75      	ldr	r2, [pc, #468]	@ (8007b58 <HAL_RCC_OscConfig+0x4b0>)
 8007984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800798a:	f7fc fd63 	bl	8004454 <HAL_GetTick>
 800798e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007990:	e008      	b.n	80079a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007992:	f7fc fd5f 	bl	8004454 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e118      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079a4:	4b6c      	ldr	r3, [pc, #432]	@ (8007b58 <HAL_RCC_OscConfig+0x4b0>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f0      	beq.n	8007992 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d106      	bne.n	80079c6 <HAL_RCC_OscConfig+0x31e>
 80079b8:	4b66      	ldr	r3, [pc, #408]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 80079ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079bc:	4a65      	ldr	r2, [pc, #404]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 80079be:	f043 0301 	orr.w	r3, r3, #1
 80079c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80079c4:	e01c      	b.n	8007a00 <HAL_RCC_OscConfig+0x358>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	2b05      	cmp	r3, #5
 80079cc:	d10c      	bne.n	80079e8 <HAL_RCC_OscConfig+0x340>
 80079ce:	4b61      	ldr	r3, [pc, #388]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 80079d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d2:	4a60      	ldr	r2, [pc, #384]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 80079d4:	f043 0304 	orr.w	r3, r3, #4
 80079d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80079da:	4b5e      	ldr	r3, [pc, #376]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 80079dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079de:	4a5d      	ldr	r2, [pc, #372]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 80079e0:	f043 0301 	orr.w	r3, r3, #1
 80079e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80079e6:	e00b      	b.n	8007a00 <HAL_RCC_OscConfig+0x358>
 80079e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 80079ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ec:	4a59      	ldr	r2, [pc, #356]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 80079ee:	f023 0301 	bic.w	r3, r3, #1
 80079f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80079f4:	4b57      	ldr	r3, [pc, #348]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 80079f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079f8:	4a56      	ldr	r2, [pc, #344]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 80079fa:	f023 0304 	bic.w	r3, r3, #4
 80079fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d015      	beq.n	8007a34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a08:	f7fc fd24 	bl	8004454 <HAL_GetTick>
 8007a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a0e:	e00a      	b.n	8007a26 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a10:	f7fc fd20 	bl	8004454 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e0d7      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a26:	4b4b      	ldr	r3, [pc, #300]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 8007a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0ee      	beq.n	8007a10 <HAL_RCC_OscConfig+0x368>
 8007a32:	e014      	b.n	8007a5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a34:	f7fc fd0e 	bl	8004454 <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a3a:	e00a      	b.n	8007a52 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a3c:	f7fc fd0a 	bl	8004454 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e0c1      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a52:	4b40      	ldr	r3, [pc, #256]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 8007a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1ee      	bne.n	8007a3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d105      	bne.n	8007a70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a64:	4b3b      	ldr	r3, [pc, #236]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 8007a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a68:	4a3a      	ldr	r2, [pc, #232]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 8007a6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 80ad 	beq.w	8007bd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a7a:	4b36      	ldr	r3, [pc, #216]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f003 030c 	and.w	r3, r3, #12
 8007a82:	2b08      	cmp	r3, #8
 8007a84:	d060      	beq.n	8007b48 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d145      	bne.n	8007b1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a8e:	4b33      	ldr	r3, [pc, #204]	@ (8007b5c <HAL_RCC_OscConfig+0x4b4>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a94:	f7fc fcde 	bl	8004454 <HAL_GetTick>
 8007a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a9c:	f7fc fcda 	bl	8004454 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e093      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aae:	4b29      	ldr	r3, [pc, #164]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1f0      	bne.n	8007a9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	69da      	ldr	r2, [r3, #28]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac8:	019b      	lsls	r3, r3, #6
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	085b      	lsrs	r3, r3, #1
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	041b      	lsls	r3, r3, #16
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007adc:	061b      	lsls	r3, r3, #24
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae4:	071b      	lsls	r3, r3, #28
 8007ae6:	491b      	ldr	r1, [pc, #108]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007aec:	4b1b      	ldr	r3, [pc, #108]	@ (8007b5c <HAL_RCC_OscConfig+0x4b4>)
 8007aee:	2201      	movs	r2, #1
 8007af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af2:	f7fc fcaf 	bl	8004454 <HAL_GetTick>
 8007af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007af8:	e008      	b.n	8007b0c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007afa:	f7fc fcab 	bl	8004454 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e064      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b0c:	4b11      	ldr	r3, [pc, #68]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0f0      	beq.n	8007afa <HAL_RCC_OscConfig+0x452>
 8007b18:	e05c      	b.n	8007bd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b1a:	4b10      	ldr	r3, [pc, #64]	@ (8007b5c <HAL_RCC_OscConfig+0x4b4>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b20:	f7fc fc98 	bl	8004454 <HAL_GetTick>
 8007b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b26:	e008      	b.n	8007b3a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b28:	f7fc fc94 	bl	8004454 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d901      	bls.n	8007b3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e04d      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b3a:	4b06      	ldr	r3, [pc, #24]	@ (8007b54 <HAL_RCC_OscConfig+0x4ac>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1f0      	bne.n	8007b28 <HAL_RCC_OscConfig+0x480>
 8007b46:	e045      	b.n	8007bd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d107      	bne.n	8007b60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e040      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
 8007b54:	40023800 	.word	0x40023800
 8007b58:	40007000 	.word	0x40007000
 8007b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b60:	4b1f      	ldr	r3, [pc, #124]	@ (8007be0 <HAL_RCC_OscConfig+0x538>)
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d030      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d129      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d122      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007b90:	4013      	ands	r3, r2
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d119      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d10f      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d107      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d001      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	40023800 	.word	0x40023800

08007be4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e07b      	b.n	8007cee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d108      	bne.n	8007c10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c06:	d009      	beq.n	8007c1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	61da      	str	r2, [r3, #28]
 8007c0e:	e005      	b.n	8007c1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d106      	bne.n	8007c3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7f9 fe0c 	bl	8001854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007c64:	431a      	orrs	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	431a      	orrs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca0:	ea42 0103 	orr.w	r1, r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	0c1b      	lsrs	r3, r3, #16
 8007cba:	f003 0104 	and.w	r1, r3, #4
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc2:	f003 0210 	and.w	r2, r3, #16
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69da      	ldr	r2, [r3, #28]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007cdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b088      	sub	sp, #32
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	603b      	str	r3, [r7, #0]
 8007d02:	4613      	mov	r3, r2
 8007d04:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d06:	f7fc fba5 	bl	8004454 <HAL_GetTick>
 8007d0a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
 8007d0e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d001      	beq.n	8007d20 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e12a      	b.n	8007f76 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <HAL_SPI_Transmit+0x36>
 8007d26:	88fb      	ldrh	r3, [r7, #6]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e122      	b.n	8007f76 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <HAL_SPI_Transmit+0x48>
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	e11b      	b.n	8007f76 <HAL_SPI_Transmit+0x280>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2203      	movs	r2, #3
 8007d4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	88fa      	ldrh	r2, [r7, #6]
 8007d5e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	88fa      	ldrh	r2, [r7, #6]
 8007d64:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d8c:	d10f      	bne.n	8007dae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007dac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db8:	2b40      	cmp	r3, #64	@ 0x40
 8007dba:	d007      	beq.n	8007dcc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dd4:	d152      	bne.n	8007e7c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <HAL_SPI_Transmit+0xee>
 8007dde:	8b7b      	ldrh	r3, [r7, #26]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d145      	bne.n	8007e70 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de8:	881a      	ldrh	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df4:	1c9a      	adds	r2, r3, #2
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3b01      	subs	r3, #1
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e08:	e032      	b.n	8007e70 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d112      	bne.n	8007e3e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1c:	881a      	ldrh	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e28:	1c9a      	adds	r2, r3, #2
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007e3c:	e018      	b.n	8007e70 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e3e:	f7fc fb09 	bl	8004454 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d803      	bhi.n	8007e56 <HAL_SPI_Transmit+0x160>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e54:	d102      	bne.n	8007e5c <HAL_SPI_Transmit+0x166>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d109      	bne.n	8007e70 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e082      	b.n	8007f76 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1c7      	bne.n	8007e0a <HAL_SPI_Transmit+0x114>
 8007e7a:	e053      	b.n	8007f24 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <HAL_SPI_Transmit+0x194>
 8007e84:	8b7b      	ldrh	r3, [r7, #26]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d147      	bne.n	8007f1a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	330c      	adds	r3, #12
 8007e94:	7812      	ldrb	r2, [r2, #0]
 8007e96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007eb0:	e033      	b.n	8007f1a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d113      	bne.n	8007ee8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	330c      	adds	r3, #12
 8007eca:	7812      	ldrb	r2, [r2, #0]
 8007ecc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007ee6:	e018      	b.n	8007f1a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ee8:	f7fc fab4 	bl	8004454 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d803      	bhi.n	8007f00 <HAL_SPI_Transmit+0x20a>
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007efe:	d102      	bne.n	8007f06 <HAL_SPI_Transmit+0x210>
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e02d      	b.n	8007f76 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1c6      	bne.n	8007eb2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f24:	69fa      	ldr	r2, [r7, #28]
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 f8b1 	bl	8008090 <SPI_EndRxTxTransaction>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2220      	movs	r2, #32
 8007f38:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f42:	2300      	movs	r3, #0
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	617b      	str	r3, [r7, #20]
 8007f56:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e000      	b.n	8007f76 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007f74:	2300      	movs	r3, #0
  }
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3720      	adds	r7, #32
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f90:	f7fc fa60 	bl	8004454 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f98:	1a9b      	subs	r3, r3, r2
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fa0:	f7fc fa58 	bl	8004454 <HAL_GetTick>
 8007fa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fa6:	4b39      	ldr	r3, [pc, #228]	@ (800808c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	015b      	lsls	r3, r3, #5
 8007fac:	0d1b      	lsrs	r3, r3, #20
 8007fae:	69fa      	ldr	r2, [r7, #28]
 8007fb0:	fb02 f303 	mul.w	r3, r2, r3
 8007fb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fb6:	e055      	b.n	8008064 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fbe:	d051      	beq.n	8008064 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fc0:	f7fc fa48 	bl	8004454 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d902      	bls.n	8007fd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d13d      	bne.n	8008052 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007fe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fee:	d111      	bne.n	8008014 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ff8:	d004      	beq.n	8008004 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008002:	d107      	bne.n	8008014 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008012:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800801c:	d10f      	bne.n	800803e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800803c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e018      	b.n	8008084 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d102      	bne.n	800805e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	61fb      	str	r3, [r7, #28]
 800805c:	e002      	b.n	8008064 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	3b01      	subs	r3, #1
 8008062:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	4013      	ands	r3, r2
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	429a      	cmp	r2, r3
 8008072:	bf0c      	ite	eq
 8008074:	2301      	moveq	r3, #1
 8008076:	2300      	movne	r3, #0
 8008078:	b2db      	uxtb	r3, r3
 800807a:	461a      	mov	r2, r3
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	429a      	cmp	r2, r3
 8008080:	d19a      	bne.n	8007fb8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3720      	adds	r7, #32
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20000004 	.word	0x20000004

08008090 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af02      	add	r7, sp, #8
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2201      	movs	r2, #1
 80080a4:	2102      	movs	r1, #2
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7ff ff6a 	bl	8007f80 <SPI_WaitFlagStateUntilTimeout>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d007      	beq.n	80080c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b6:	f043 0220 	orr.w	r2, r3, #32
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e032      	b.n	8008128 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008130 <SPI_EndRxTxTransaction+0xa0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008134 <SPI_EndRxTxTransaction+0xa4>)
 80080c8:	fba2 2303 	umull	r2, r3, r2, r3
 80080cc:	0d5b      	lsrs	r3, r3, #21
 80080ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
 80080d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080e0:	d112      	bne.n	8008108 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2200      	movs	r2, #0
 80080ea:	2180      	movs	r1, #128	@ 0x80
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f7ff ff47 	bl	8007f80 <SPI_WaitFlagStateUntilTimeout>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d016      	beq.n	8008126 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080fc:	f043 0220 	orr.w	r2, r3, #32
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e00f      	b.n	8008128 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00a      	beq.n	8008124 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	3b01      	subs	r3, #1
 8008112:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800811e:	2b80      	cmp	r3, #128	@ 0x80
 8008120:	d0f2      	beq.n	8008108 <SPI_EndRxTxTransaction+0x78>
 8008122:	e000      	b.n	8008126 <SPI_EndRxTxTransaction+0x96>
        break;
 8008124:	bf00      	nop
  }

  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000004 	.word	0x20000004
 8008134:	165e9f81 	.word	0x165e9f81

08008138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e041      	b.n	80081ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d106      	bne.n	8008164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7f9 ffde 	bl	8002120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2202      	movs	r2, #2
 8008168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3304      	adds	r3, #4
 8008174:	4619      	mov	r1, r3
 8008176:	4610      	mov	r0, r2
 8008178:	f000 fcc4 	bl	8008b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d001      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e04e      	b.n	800828e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a23      	ldr	r2, [pc, #140]	@ (800829c <HAL_TIM_Base_Start_IT+0xc4>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d022      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800821a:	d01d      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a1f      	ldr	r2, [pc, #124]	@ (80082a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d018      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a1e      	ldr	r2, [pc, #120]	@ (80082a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d013      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a1c      	ldr	r2, [pc, #112]	@ (80082a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d00e      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a1b      	ldr	r2, [pc, #108]	@ (80082ac <HAL_TIM_Base_Start_IT+0xd4>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d009      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a19      	ldr	r2, [pc, #100]	@ (80082b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d004      	beq.n	8008258 <HAL_TIM_Base_Start_IT+0x80>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a18      	ldr	r2, [pc, #96]	@ (80082b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d111      	bne.n	800827c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f003 0307 	and.w	r3, r3, #7
 8008262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b06      	cmp	r3, #6
 8008268:	d010      	beq.n	800828c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f042 0201 	orr.w	r2, r2, #1
 8008278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800827a:	e007      	b.n	800828c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0201 	orr.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	40010000 	.word	0x40010000
 80082a0:	40000400 	.word	0x40000400
 80082a4:	40000800 	.word	0x40000800
 80082a8:	40000c00 	.word	0x40000c00
 80082ac:	40010400 	.word	0x40010400
 80082b0:	40014000 	.word	0x40014000
 80082b4:	40001800 	.word	0x40001800

080082b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e041      	b.n	800834e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7f9 fe6a 	bl	8001fb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3304      	adds	r3, #4
 80082f4:	4619      	mov	r1, r3
 80082f6:	4610      	mov	r0, r2
 80082f8:	f000 fc04 	bl	8008b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d109      	bne.n	800837c <HAL_TIM_PWM_Start+0x24>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b01      	cmp	r3, #1
 8008372:	bf14      	ite	ne
 8008374:	2301      	movne	r3, #1
 8008376:	2300      	moveq	r3, #0
 8008378:	b2db      	uxtb	r3, r3
 800837a:	e022      	b.n	80083c2 <HAL_TIM_PWM_Start+0x6a>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2b04      	cmp	r3, #4
 8008380:	d109      	bne.n	8008396 <HAL_TIM_PWM_Start+0x3e>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b01      	cmp	r3, #1
 800838c:	bf14      	ite	ne
 800838e:	2301      	movne	r3, #1
 8008390:	2300      	moveq	r3, #0
 8008392:	b2db      	uxtb	r3, r3
 8008394:	e015      	b.n	80083c2 <HAL_TIM_PWM_Start+0x6a>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b08      	cmp	r3, #8
 800839a:	d109      	bne.n	80083b0 <HAL_TIM_PWM_Start+0x58>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	bf14      	ite	ne
 80083a8:	2301      	movne	r3, #1
 80083aa:	2300      	moveq	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	e008      	b.n	80083c2 <HAL_TIM_PWM_Start+0x6a>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	bf14      	ite	ne
 80083bc:	2301      	movne	r3, #1
 80083be:	2300      	moveq	r3, #0
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e07c      	b.n	80084c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d104      	bne.n	80083da <HAL_TIM_PWM_Start+0x82>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083d8:	e013      	b.n	8008402 <HAL_TIM_PWM_Start+0xaa>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d104      	bne.n	80083ea <HAL_TIM_PWM_Start+0x92>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083e8:	e00b      	b.n	8008402 <HAL_TIM_PWM_Start+0xaa>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d104      	bne.n	80083fa <HAL_TIM_PWM_Start+0xa2>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083f8:	e003      	b.n	8008402 <HAL_TIM_PWM_Start+0xaa>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2202      	movs	r2, #2
 80083fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2201      	movs	r2, #1
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fdd0 	bl	8008fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a2d      	ldr	r2, [pc, #180]	@ (80084cc <HAL_TIM_PWM_Start+0x174>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d004      	beq.n	8008424 <HAL_TIM_PWM_Start+0xcc>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a2c      	ldr	r2, [pc, #176]	@ (80084d0 <HAL_TIM_PWM_Start+0x178>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d101      	bne.n	8008428 <HAL_TIM_PWM_Start+0xd0>
 8008424:	2301      	movs	r3, #1
 8008426:	e000      	b.n	800842a <HAL_TIM_PWM_Start+0xd2>
 8008428:	2300      	movs	r3, #0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d007      	beq.n	800843e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800843c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a22      	ldr	r2, [pc, #136]	@ (80084cc <HAL_TIM_PWM_Start+0x174>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d022      	beq.n	800848e <HAL_TIM_PWM_Start+0x136>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008450:	d01d      	beq.n	800848e <HAL_TIM_PWM_Start+0x136>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a1f      	ldr	r2, [pc, #124]	@ (80084d4 <HAL_TIM_PWM_Start+0x17c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d018      	beq.n	800848e <HAL_TIM_PWM_Start+0x136>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a1d      	ldr	r2, [pc, #116]	@ (80084d8 <HAL_TIM_PWM_Start+0x180>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d013      	beq.n	800848e <HAL_TIM_PWM_Start+0x136>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a1c      	ldr	r2, [pc, #112]	@ (80084dc <HAL_TIM_PWM_Start+0x184>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00e      	beq.n	800848e <HAL_TIM_PWM_Start+0x136>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a16      	ldr	r2, [pc, #88]	@ (80084d0 <HAL_TIM_PWM_Start+0x178>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d009      	beq.n	800848e <HAL_TIM_PWM_Start+0x136>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a18      	ldr	r2, [pc, #96]	@ (80084e0 <HAL_TIM_PWM_Start+0x188>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d004      	beq.n	800848e <HAL_TIM_PWM_Start+0x136>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a16      	ldr	r2, [pc, #88]	@ (80084e4 <HAL_TIM_PWM_Start+0x18c>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d111      	bne.n	80084b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f003 0307 	and.w	r3, r3, #7
 8008498:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b06      	cmp	r3, #6
 800849e:	d010      	beq.n	80084c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f042 0201 	orr.w	r2, r2, #1
 80084ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b0:	e007      	b.n	80084c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f042 0201 	orr.w	r2, r2, #1
 80084c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	40010000 	.word	0x40010000
 80084d0:	40010400 	.word	0x40010400
 80084d4:	40000400 	.word	0x40000400
 80084d8:	40000800 	.word	0x40000800
 80084dc:	40000c00 	.word	0x40000c00
 80084e0:	40014000 	.word	0x40014000
 80084e4:	40001800 	.word	0x40001800

080084e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e097      	b.n	800862c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d106      	bne.n	8008516 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7f9 fd87 	bl	8002024 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2202      	movs	r2, #2
 800851a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800852c:	f023 0307 	bic.w	r3, r3, #7
 8008530:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3304      	adds	r3, #4
 800853a:	4619      	mov	r1, r3
 800853c:	4610      	mov	r0, r2
 800853e:	f000 fae1 	bl	8008b04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6a1b      	ldr	r3, [r3, #32]
 8008558:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	4313      	orrs	r3, r2
 8008562:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800856a:	f023 0303 	bic.w	r3, r3, #3
 800856e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	4313      	orrs	r3, r2
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	4313      	orrs	r3, r2
 8008580:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008588:	f023 030c 	bic.w	r3, r3, #12
 800858c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008594:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	021b      	lsls	r3, r3, #8
 80085a4:	4313      	orrs	r3, r2
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	011a      	lsls	r2, r3, #4
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	031b      	lsls	r3, r3, #12
 80085b8:	4313      	orrs	r3, r2
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	4313      	orrs	r3, r2
 80085be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80085c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80085ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	011b      	lsls	r3, r3, #4
 80085da:	4313      	orrs	r3, r2
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008644:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800864c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008654:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800865c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d110      	bne.n	8008686 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d102      	bne.n	8008670 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800866a:	7b7b      	ldrb	r3, [r7, #13]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d001      	beq.n	8008674 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e069      	b.n	8008748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2202      	movs	r2, #2
 8008678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2202      	movs	r2, #2
 8008680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008684:	e031      	b.n	80086ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	2b04      	cmp	r3, #4
 800868a:	d110      	bne.n	80086ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d102      	bne.n	8008698 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008692:	7b3b      	ldrb	r3, [r7, #12]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d001      	beq.n	800869c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e055      	b.n	8008748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2202      	movs	r2, #2
 80086a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80086ac:	e01d      	b.n	80086ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d108      	bne.n	80086c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d105      	bne.n	80086c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80086ba:	7b7b      	ldrb	r3, [r7, #13]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d102      	bne.n	80086c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80086c0:	7b3b      	ldrb	r3, [r7, #12]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d001      	beq.n	80086ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e03e      	b.n	8008748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2202      	movs	r2, #2
 80086ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2202      	movs	r2, #2
 80086d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2202      	movs	r2, #2
 80086de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2202      	movs	r2, #2
 80086e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <HAL_TIM_Encoder_Start+0xc4>
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d008      	beq.n	8008708 <HAL_TIM_Encoder_Start+0xd4>
 80086f6:	e00f      	b.n	8008718 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2201      	movs	r2, #1
 80086fe:	2100      	movs	r1, #0
 8008700:	4618      	mov	r0, r3
 8008702:	f000 fc55 	bl	8008fb0 <TIM_CCxChannelCmd>
      break;
 8008706:	e016      	b.n	8008736 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2201      	movs	r2, #1
 800870e:	2104      	movs	r1, #4
 8008710:	4618      	mov	r0, r3
 8008712:	f000 fc4d 	bl	8008fb0 <TIM_CCxChannelCmd>
      break;
 8008716:	e00e      	b.n	8008736 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2201      	movs	r2, #1
 800871e:	2100      	movs	r1, #0
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fc45 	bl	8008fb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2201      	movs	r2, #1
 800872c:	2104      	movs	r1, #4
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fc3e 	bl	8008fb0 <TIM_CCxChannelCmd>
      break;
 8008734:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f042 0201 	orr.w	r2, r2, #1
 8008744:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d020      	beq.n	80087b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01b      	beq.n	80087b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f06f 0202 	mvn.w	r2, #2
 8008784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f994 	bl	8008ac8 <HAL_TIM_IC_CaptureCallback>
 80087a0:	e005      	b.n	80087ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f986 	bl	8008ab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f997 	bl	8008adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f003 0304 	and.w	r3, r3, #4
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d020      	beq.n	8008800 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01b      	beq.n	8008800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f06f 0204 	mvn.w	r2, #4
 80087d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2202      	movs	r2, #2
 80087d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f96e 	bl	8008ac8 <HAL_TIM_IC_CaptureCallback>
 80087ec:	e005      	b.n	80087fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f960 	bl	8008ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f971 	bl	8008adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f003 0308 	and.w	r3, r3, #8
 8008806:	2b00      	cmp	r3, #0
 8008808:	d020      	beq.n	800884c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f003 0308 	and.w	r3, r3, #8
 8008810:	2b00      	cmp	r3, #0
 8008812:	d01b      	beq.n	800884c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f06f 0208 	mvn.w	r2, #8
 800881c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2204      	movs	r2, #4
 8008822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	f003 0303 	and.w	r3, r3, #3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f948 	bl	8008ac8 <HAL_TIM_IC_CaptureCallback>
 8008838:	e005      	b.n	8008846 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f93a 	bl	8008ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f94b 	bl	8008adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	f003 0310 	and.w	r3, r3, #16
 8008852:	2b00      	cmp	r3, #0
 8008854:	d020      	beq.n	8008898 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f003 0310 	and.w	r3, r3, #16
 800885c:	2b00      	cmp	r3, #0
 800885e:	d01b      	beq.n	8008898 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f06f 0210 	mvn.w	r2, #16
 8008868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2208      	movs	r2, #8
 800886e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f922 	bl	8008ac8 <HAL_TIM_IC_CaptureCallback>
 8008884:	e005      	b.n	8008892 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f914 	bl	8008ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f925 	bl	8008adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00c      	beq.n	80088bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d007      	beq.n	80088bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f06f 0201 	mvn.w	r2, #1
 80088b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7f8 ff1a 	bl	80016f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00c      	beq.n	80088e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d007      	beq.n	80088e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80088d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fc14 	bl	8009108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00c      	beq.n	8008904 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d007      	beq.n	8008904 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80088fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f8f6 	bl	8008af0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00c      	beq.n	8008928 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f003 0320 	and.w	r3, r3, #32
 8008914:	2b00      	cmp	r3, #0
 8008916:	d007      	beq.n	8008928 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f06f 0220 	mvn.w	r2, #32
 8008920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fbe6 	bl	80090f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008928:	bf00      	nop
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008946:	2b01      	cmp	r3, #1
 8008948:	d101      	bne.n	800894e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800894a:	2302      	movs	r3, #2
 800894c:	e0ae      	b.n	8008aac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b0c      	cmp	r3, #12
 800895a:	f200 809f 	bhi.w	8008a9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800895e:	a201      	add	r2, pc, #4	@ (adr r2, 8008964 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008964:	08008999 	.word	0x08008999
 8008968:	08008a9d 	.word	0x08008a9d
 800896c:	08008a9d 	.word	0x08008a9d
 8008970:	08008a9d 	.word	0x08008a9d
 8008974:	080089d9 	.word	0x080089d9
 8008978:	08008a9d 	.word	0x08008a9d
 800897c:	08008a9d 	.word	0x08008a9d
 8008980:	08008a9d 	.word	0x08008a9d
 8008984:	08008a1b 	.word	0x08008a1b
 8008988:	08008a9d 	.word	0x08008a9d
 800898c:	08008a9d 	.word	0x08008a9d
 8008990:	08008a9d 	.word	0x08008a9d
 8008994:	08008a5b 	.word	0x08008a5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68b9      	ldr	r1, [r7, #8]
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 f956 	bl	8008c50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	699a      	ldr	r2, [r3, #24]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f042 0208 	orr.w	r2, r2, #8
 80089b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	699a      	ldr	r2, [r3, #24]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f022 0204 	bic.w	r2, r2, #4
 80089c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6999      	ldr	r1, [r3, #24]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	691a      	ldr	r2, [r3, #16]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	619a      	str	r2, [r3, #24]
      break;
 80089d6:	e064      	b.n	8008aa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68b9      	ldr	r1, [r7, #8]
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 f9a6 	bl	8008d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	699a      	ldr	r2, [r3, #24]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	699a      	ldr	r2, [r3, #24]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6999      	ldr	r1, [r3, #24]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	021a      	lsls	r2, r3, #8
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	430a      	orrs	r2, r1
 8008a16:	619a      	str	r2, [r3, #24]
      break;
 8008a18:	e043      	b.n	8008aa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68b9      	ldr	r1, [r7, #8]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 f9fb 	bl	8008e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69da      	ldr	r2, [r3, #28]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f042 0208 	orr.w	r2, r2, #8
 8008a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	69da      	ldr	r2, [r3, #28]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 0204 	bic.w	r2, r2, #4
 8008a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69d9      	ldr	r1, [r3, #28]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	691a      	ldr	r2, [r3, #16]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	61da      	str	r2, [r3, #28]
      break;
 8008a58:	e023      	b.n	8008aa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68b9      	ldr	r1, [r7, #8]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 fa4f 	bl	8008f04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	69da      	ldr	r2, [r3, #28]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	69da      	ldr	r2, [r3, #28]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	69d9      	ldr	r1, [r3, #28]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	021a      	lsls	r2, r3, #8
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	61da      	str	r2, [r3, #28]
      break;
 8008a9a:	e002      	b.n	8008aa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a43      	ldr	r2, [pc, #268]	@ (8008c24 <TIM_Base_SetConfig+0x120>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d013      	beq.n	8008b44 <TIM_Base_SetConfig+0x40>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b22:	d00f      	beq.n	8008b44 <TIM_Base_SetConfig+0x40>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a40      	ldr	r2, [pc, #256]	@ (8008c28 <TIM_Base_SetConfig+0x124>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d00b      	beq.n	8008b44 <TIM_Base_SetConfig+0x40>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a3f      	ldr	r2, [pc, #252]	@ (8008c2c <TIM_Base_SetConfig+0x128>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d007      	beq.n	8008b44 <TIM_Base_SetConfig+0x40>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a3e      	ldr	r2, [pc, #248]	@ (8008c30 <TIM_Base_SetConfig+0x12c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d003      	beq.n	8008b44 <TIM_Base_SetConfig+0x40>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a3d      	ldr	r2, [pc, #244]	@ (8008c34 <TIM_Base_SetConfig+0x130>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d108      	bne.n	8008b56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a32      	ldr	r2, [pc, #200]	@ (8008c24 <TIM_Base_SetConfig+0x120>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d02b      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b64:	d027      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a2f      	ldr	r2, [pc, #188]	@ (8008c28 <TIM_Base_SetConfig+0x124>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d023      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a2e      	ldr	r2, [pc, #184]	@ (8008c2c <TIM_Base_SetConfig+0x128>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d01f      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a2d      	ldr	r2, [pc, #180]	@ (8008c30 <TIM_Base_SetConfig+0x12c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d01b      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a2c      	ldr	r2, [pc, #176]	@ (8008c34 <TIM_Base_SetConfig+0x130>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d017      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a2b      	ldr	r2, [pc, #172]	@ (8008c38 <TIM_Base_SetConfig+0x134>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d013      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a2a      	ldr	r2, [pc, #168]	@ (8008c3c <TIM_Base_SetConfig+0x138>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d00f      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a29      	ldr	r2, [pc, #164]	@ (8008c40 <TIM_Base_SetConfig+0x13c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d00b      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a28      	ldr	r2, [pc, #160]	@ (8008c44 <TIM_Base_SetConfig+0x140>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d007      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a27      	ldr	r2, [pc, #156]	@ (8008c48 <TIM_Base_SetConfig+0x144>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d003      	beq.n	8008bb6 <TIM_Base_SetConfig+0xb2>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a26      	ldr	r2, [pc, #152]	@ (8008c4c <TIM_Base_SetConfig+0x148>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d108      	bne.n	8008bc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	689a      	ldr	r2, [r3, #8]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a0e      	ldr	r2, [pc, #56]	@ (8008c24 <TIM_Base_SetConfig+0x120>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d003      	beq.n	8008bf6 <TIM_Base_SetConfig+0xf2>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a10      	ldr	r2, [pc, #64]	@ (8008c34 <TIM_Base_SetConfig+0x130>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d103      	bne.n	8008bfe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	691a      	ldr	r2, [r3, #16]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f043 0204 	orr.w	r2, r3, #4
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	601a      	str	r2, [r3, #0]
}
 8008c16:	bf00      	nop
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	40010000 	.word	0x40010000
 8008c28:	40000400 	.word	0x40000400
 8008c2c:	40000800 	.word	0x40000800
 8008c30:	40000c00 	.word	0x40000c00
 8008c34:	40010400 	.word	0x40010400
 8008c38:	40014000 	.word	0x40014000
 8008c3c:	40014400 	.word	0x40014400
 8008c40:	40014800 	.word	0x40014800
 8008c44:	40001800 	.word	0x40001800
 8008c48:	40001c00 	.word	0x40001c00
 8008c4c:	40002000 	.word	0x40002000

08008c50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a1b      	ldr	r3, [r3, #32]
 8008c64:	f023 0201 	bic.w	r2, r3, #1
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f023 0303 	bic.w	r3, r3, #3
 8008c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f023 0302 	bic.w	r3, r3, #2
 8008c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a20      	ldr	r2, [pc, #128]	@ (8008d28 <TIM_OC1_SetConfig+0xd8>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d003      	beq.n	8008cb4 <TIM_OC1_SetConfig+0x64>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a1f      	ldr	r2, [pc, #124]	@ (8008d2c <TIM_OC1_SetConfig+0xdc>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d10c      	bne.n	8008cce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f023 0308 	bic.w	r3, r3, #8
 8008cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f023 0304 	bic.w	r3, r3, #4
 8008ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a15      	ldr	r2, [pc, #84]	@ (8008d28 <TIM_OC1_SetConfig+0xd8>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d003      	beq.n	8008cde <TIM_OC1_SetConfig+0x8e>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a14      	ldr	r2, [pc, #80]	@ (8008d2c <TIM_OC1_SetConfig+0xdc>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d111      	bne.n	8008d02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	621a      	str	r2, [r3, #32]
}
 8008d1c:	bf00      	nop
 8008d1e:	371c      	adds	r7, #28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	40010000 	.word	0x40010000
 8008d2c:	40010400 	.word	0x40010400

08008d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	f023 0210 	bic.w	r2, r3, #16
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	021b      	lsls	r3, r3, #8
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	f023 0320 	bic.w	r3, r3, #32
 8008d7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	011b      	lsls	r3, r3, #4
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a22      	ldr	r2, [pc, #136]	@ (8008e14 <TIM_OC2_SetConfig+0xe4>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d003      	beq.n	8008d98 <TIM_OC2_SetConfig+0x68>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a21      	ldr	r2, [pc, #132]	@ (8008e18 <TIM_OC2_SetConfig+0xe8>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d10d      	bne.n	8008db4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008db2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a17      	ldr	r2, [pc, #92]	@ (8008e14 <TIM_OC2_SetConfig+0xe4>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d003      	beq.n	8008dc4 <TIM_OC2_SetConfig+0x94>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a16      	ldr	r2, [pc, #88]	@ (8008e18 <TIM_OC2_SetConfig+0xe8>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d113      	bne.n	8008dec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	621a      	str	r2, [r3, #32]
}
 8008e06:	bf00      	nop
 8008e08:	371c      	adds	r7, #28
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	40010000 	.word	0x40010000
 8008e18:	40010400 	.word	0x40010400

08008e1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b087      	sub	sp, #28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f023 0303 	bic.w	r3, r3, #3
 8008e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	021b      	lsls	r3, r3, #8
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a21      	ldr	r2, [pc, #132]	@ (8008efc <TIM_OC3_SetConfig+0xe0>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d003      	beq.n	8008e82 <TIM_OC3_SetConfig+0x66>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a20      	ldr	r2, [pc, #128]	@ (8008f00 <TIM_OC3_SetConfig+0xe4>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d10d      	bne.n	8008e9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	021b      	lsls	r3, r3, #8
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a16      	ldr	r2, [pc, #88]	@ (8008efc <TIM_OC3_SetConfig+0xe0>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d003      	beq.n	8008eae <TIM_OC3_SetConfig+0x92>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a15      	ldr	r2, [pc, #84]	@ (8008f00 <TIM_OC3_SetConfig+0xe4>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d113      	bne.n	8008ed6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	011b      	lsls	r3, r3, #4
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	011b      	lsls	r3, r3, #4
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	621a      	str	r2, [r3, #32]
}
 8008ef0:	bf00      	nop
 8008ef2:	371c      	adds	r7, #28
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	40010000 	.word	0x40010000
 8008f00:	40010400 	.word	0x40010400

08008f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	031b      	lsls	r3, r3, #12
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a12      	ldr	r2, [pc, #72]	@ (8008fa8 <TIM_OC4_SetConfig+0xa4>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d003      	beq.n	8008f6c <TIM_OC4_SetConfig+0x68>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a11      	ldr	r2, [pc, #68]	@ (8008fac <TIM_OC4_SetConfig+0xa8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d109      	bne.n	8008f80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	019b      	lsls	r3, r3, #6
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	621a      	str	r2, [r3, #32]
}
 8008f9a:	bf00      	nop
 8008f9c:	371c      	adds	r7, #28
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	40010000 	.word	0x40010000
 8008fac:	40010400 	.word	0x40010400

08008fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	f003 031f 	and.w	r3, r3, #31
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6a1a      	ldr	r2, [r3, #32]
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	43db      	mvns	r3, r3
 8008fd2:	401a      	ands	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6a1a      	ldr	r2, [r3, #32]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f003 031f 	and.w	r3, r3, #31
 8008fe2:	6879      	ldr	r1, [r7, #4]
 8008fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	621a      	str	r2, [r3, #32]
}
 8008fee:	bf00      	nop
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
	...

08008ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800900c:	2b01      	cmp	r3, #1
 800900e:	d101      	bne.n	8009014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009010:	2302      	movs	r3, #2
 8009012:	e05a      	b.n	80090ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2202      	movs	r2, #2
 8009020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800903a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	4313      	orrs	r3, r2
 8009044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a21      	ldr	r2, [pc, #132]	@ (80090d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d022      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009060:	d01d      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a1d      	ldr	r2, [pc, #116]	@ (80090dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d018      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a1b      	ldr	r2, [pc, #108]	@ (80090e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d013      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a1a      	ldr	r2, [pc, #104]	@ (80090e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d00e      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a18      	ldr	r2, [pc, #96]	@ (80090e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d009      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a17      	ldr	r2, [pc, #92]	@ (80090ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d004      	beq.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a15      	ldr	r2, [pc, #84]	@ (80090f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d10c      	bne.n	80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	40010000 	.word	0x40010000
 80090dc:	40000400 	.word	0x40000400
 80090e0:	40000800 	.word	0x40000800
 80090e4:	40000c00 	.word	0x40000c00
 80090e8:	40010400 	.word	0x40010400
 80090ec:	40014000 	.word	0x40014000
 80090f0:	40001800 	.word	0x40001800

080090f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e042      	b.n	80091b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d106      	bne.n	8009148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7f9 f8d8 	bl	80022f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2224      	movs	r2, #36	@ 0x24
 800914c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800915e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f82b 	bl	80091bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	691a      	ldr	r2, [r3, #16]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	695a      	ldr	r2, [r3, #20]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68da      	ldr	r2, [r3, #12]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2220      	movs	r2, #32
 80091a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2220      	movs	r2, #32
 80091a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091c0:	b0c0      	sub	sp, #256	@ 0x100
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80091d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091d8:	68d9      	ldr	r1, [r3, #12]
 80091da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	ea40 0301 	orr.w	r3, r0, r1
 80091e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091ea:	689a      	ldr	r2, [r3, #8]
 80091ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	431a      	orrs	r2, r3
 80091f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	431a      	orrs	r2, r3
 80091fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	4313      	orrs	r3, r2
 8009204:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009214:	f021 010c 	bic.w	r1, r1, #12
 8009218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009222:	430b      	orrs	r3, r1
 8009224:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009236:	6999      	ldr	r1, [r3, #24]
 8009238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	ea40 0301 	orr.w	r3, r0, r1
 8009242:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	4b8f      	ldr	r3, [pc, #572]	@ (8009488 <UART_SetConfig+0x2cc>)
 800924c:	429a      	cmp	r2, r3
 800924e:	d005      	beq.n	800925c <UART_SetConfig+0xa0>
 8009250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	4b8d      	ldr	r3, [pc, #564]	@ (800948c <UART_SetConfig+0x2d0>)
 8009258:	429a      	cmp	r2, r3
 800925a:	d104      	bne.n	8009266 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800925c:	f7fd ffe0 	bl	8007220 <HAL_RCC_GetPCLK2Freq>
 8009260:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009264:	e003      	b.n	800926e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009266:	f7fd ffc7 	bl	80071f8 <HAL_RCC_GetPCLK1Freq>
 800926a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800926e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009272:	69db      	ldr	r3, [r3, #28]
 8009274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009278:	f040 810c 	bne.w	8009494 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800927c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009280:	2200      	movs	r2, #0
 8009282:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009286:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800928a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800928e:	4622      	mov	r2, r4
 8009290:	462b      	mov	r3, r5
 8009292:	1891      	adds	r1, r2, r2
 8009294:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009296:	415b      	adcs	r3, r3
 8009298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800929a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800929e:	4621      	mov	r1, r4
 80092a0:	eb12 0801 	adds.w	r8, r2, r1
 80092a4:	4629      	mov	r1, r5
 80092a6:	eb43 0901 	adc.w	r9, r3, r1
 80092aa:	f04f 0200 	mov.w	r2, #0
 80092ae:	f04f 0300 	mov.w	r3, #0
 80092b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092be:	4690      	mov	r8, r2
 80092c0:	4699      	mov	r9, r3
 80092c2:	4623      	mov	r3, r4
 80092c4:	eb18 0303 	adds.w	r3, r8, r3
 80092c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80092cc:	462b      	mov	r3, r5
 80092ce:	eb49 0303 	adc.w	r3, r9, r3
 80092d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80092d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80092e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80092e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80092ea:	460b      	mov	r3, r1
 80092ec:	18db      	adds	r3, r3, r3
 80092ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80092f0:	4613      	mov	r3, r2
 80092f2:	eb42 0303 	adc.w	r3, r2, r3
 80092f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80092f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80092fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009300:	f7f7 fcf2 	bl	8000ce8 <__aeabi_uldivmod>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4b61      	ldr	r3, [pc, #388]	@ (8009490 <UART_SetConfig+0x2d4>)
 800930a:	fba3 2302 	umull	r2, r3, r3, r2
 800930e:	095b      	lsrs	r3, r3, #5
 8009310:	011c      	lsls	r4, r3, #4
 8009312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009316:	2200      	movs	r2, #0
 8009318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800931c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009320:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009324:	4642      	mov	r2, r8
 8009326:	464b      	mov	r3, r9
 8009328:	1891      	adds	r1, r2, r2
 800932a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800932c:	415b      	adcs	r3, r3
 800932e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009330:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009334:	4641      	mov	r1, r8
 8009336:	eb12 0a01 	adds.w	sl, r2, r1
 800933a:	4649      	mov	r1, r9
 800933c:	eb43 0b01 	adc.w	fp, r3, r1
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	f04f 0300 	mov.w	r3, #0
 8009348:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800934c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009354:	4692      	mov	sl, r2
 8009356:	469b      	mov	fp, r3
 8009358:	4643      	mov	r3, r8
 800935a:	eb1a 0303 	adds.w	r3, sl, r3
 800935e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009362:	464b      	mov	r3, r9
 8009364:	eb4b 0303 	adc.w	r3, fp, r3
 8009368:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800936c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009378:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800937c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009380:	460b      	mov	r3, r1
 8009382:	18db      	adds	r3, r3, r3
 8009384:	643b      	str	r3, [r7, #64]	@ 0x40
 8009386:	4613      	mov	r3, r2
 8009388:	eb42 0303 	adc.w	r3, r2, r3
 800938c:	647b      	str	r3, [r7, #68]	@ 0x44
 800938e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009392:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009396:	f7f7 fca7 	bl	8000ce8 <__aeabi_uldivmod>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	4611      	mov	r1, r2
 80093a0:	4b3b      	ldr	r3, [pc, #236]	@ (8009490 <UART_SetConfig+0x2d4>)
 80093a2:	fba3 2301 	umull	r2, r3, r3, r1
 80093a6:	095b      	lsrs	r3, r3, #5
 80093a8:	2264      	movs	r2, #100	@ 0x64
 80093aa:	fb02 f303 	mul.w	r3, r2, r3
 80093ae:	1acb      	subs	r3, r1, r3
 80093b0:	00db      	lsls	r3, r3, #3
 80093b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80093b6:	4b36      	ldr	r3, [pc, #216]	@ (8009490 <UART_SetConfig+0x2d4>)
 80093b8:	fba3 2302 	umull	r2, r3, r3, r2
 80093bc:	095b      	lsrs	r3, r3, #5
 80093be:	005b      	lsls	r3, r3, #1
 80093c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80093c4:	441c      	add	r4, r3
 80093c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80093d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80093d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80093d8:	4642      	mov	r2, r8
 80093da:	464b      	mov	r3, r9
 80093dc:	1891      	adds	r1, r2, r2
 80093de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80093e0:	415b      	adcs	r3, r3
 80093e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80093e8:	4641      	mov	r1, r8
 80093ea:	1851      	adds	r1, r2, r1
 80093ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80093ee:	4649      	mov	r1, r9
 80093f0:	414b      	adcs	r3, r1
 80093f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093f4:	f04f 0200 	mov.w	r2, #0
 80093f8:	f04f 0300 	mov.w	r3, #0
 80093fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009400:	4659      	mov	r1, fp
 8009402:	00cb      	lsls	r3, r1, #3
 8009404:	4651      	mov	r1, sl
 8009406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800940a:	4651      	mov	r1, sl
 800940c:	00ca      	lsls	r2, r1, #3
 800940e:	4610      	mov	r0, r2
 8009410:	4619      	mov	r1, r3
 8009412:	4603      	mov	r3, r0
 8009414:	4642      	mov	r2, r8
 8009416:	189b      	adds	r3, r3, r2
 8009418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800941c:	464b      	mov	r3, r9
 800941e:	460a      	mov	r2, r1
 8009420:	eb42 0303 	adc.w	r3, r2, r3
 8009424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009434:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009438:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800943c:	460b      	mov	r3, r1
 800943e:	18db      	adds	r3, r3, r3
 8009440:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009442:	4613      	mov	r3, r2
 8009444:	eb42 0303 	adc.w	r3, r2, r3
 8009448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800944a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800944e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009452:	f7f7 fc49 	bl	8000ce8 <__aeabi_uldivmod>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4b0d      	ldr	r3, [pc, #52]	@ (8009490 <UART_SetConfig+0x2d4>)
 800945c:	fba3 1302 	umull	r1, r3, r3, r2
 8009460:	095b      	lsrs	r3, r3, #5
 8009462:	2164      	movs	r1, #100	@ 0x64
 8009464:	fb01 f303 	mul.w	r3, r1, r3
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	00db      	lsls	r3, r3, #3
 800946c:	3332      	adds	r3, #50	@ 0x32
 800946e:	4a08      	ldr	r2, [pc, #32]	@ (8009490 <UART_SetConfig+0x2d4>)
 8009470:	fba2 2303 	umull	r2, r3, r2, r3
 8009474:	095b      	lsrs	r3, r3, #5
 8009476:	f003 0207 	and.w	r2, r3, #7
 800947a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4422      	add	r2, r4
 8009482:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009484:	e106      	b.n	8009694 <UART_SetConfig+0x4d8>
 8009486:	bf00      	nop
 8009488:	40011000 	.word	0x40011000
 800948c:	40011400 	.word	0x40011400
 8009490:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009498:	2200      	movs	r2, #0
 800949a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800949e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80094a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80094a6:	4642      	mov	r2, r8
 80094a8:	464b      	mov	r3, r9
 80094aa:	1891      	adds	r1, r2, r2
 80094ac:	6239      	str	r1, [r7, #32]
 80094ae:	415b      	adcs	r3, r3
 80094b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80094b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094b6:	4641      	mov	r1, r8
 80094b8:	1854      	adds	r4, r2, r1
 80094ba:	4649      	mov	r1, r9
 80094bc:	eb43 0501 	adc.w	r5, r3, r1
 80094c0:	f04f 0200 	mov.w	r2, #0
 80094c4:	f04f 0300 	mov.w	r3, #0
 80094c8:	00eb      	lsls	r3, r5, #3
 80094ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80094ce:	00e2      	lsls	r2, r4, #3
 80094d0:	4614      	mov	r4, r2
 80094d2:	461d      	mov	r5, r3
 80094d4:	4643      	mov	r3, r8
 80094d6:	18e3      	adds	r3, r4, r3
 80094d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094dc:	464b      	mov	r3, r9
 80094de:	eb45 0303 	adc.w	r3, r5, r3
 80094e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80094f6:	f04f 0200 	mov.w	r2, #0
 80094fa:	f04f 0300 	mov.w	r3, #0
 80094fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009502:	4629      	mov	r1, r5
 8009504:	008b      	lsls	r3, r1, #2
 8009506:	4621      	mov	r1, r4
 8009508:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800950c:	4621      	mov	r1, r4
 800950e:	008a      	lsls	r2, r1, #2
 8009510:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009514:	f7f7 fbe8 	bl	8000ce8 <__aeabi_uldivmod>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	4b60      	ldr	r3, [pc, #384]	@ (80096a0 <UART_SetConfig+0x4e4>)
 800951e:	fba3 2302 	umull	r2, r3, r3, r2
 8009522:	095b      	lsrs	r3, r3, #5
 8009524:	011c      	lsls	r4, r3, #4
 8009526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800952a:	2200      	movs	r2, #0
 800952c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009530:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009534:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009538:	4642      	mov	r2, r8
 800953a:	464b      	mov	r3, r9
 800953c:	1891      	adds	r1, r2, r2
 800953e:	61b9      	str	r1, [r7, #24]
 8009540:	415b      	adcs	r3, r3
 8009542:	61fb      	str	r3, [r7, #28]
 8009544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009548:	4641      	mov	r1, r8
 800954a:	1851      	adds	r1, r2, r1
 800954c:	6139      	str	r1, [r7, #16]
 800954e:	4649      	mov	r1, r9
 8009550:	414b      	adcs	r3, r1
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	f04f 0200 	mov.w	r2, #0
 8009558:	f04f 0300 	mov.w	r3, #0
 800955c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009560:	4659      	mov	r1, fp
 8009562:	00cb      	lsls	r3, r1, #3
 8009564:	4651      	mov	r1, sl
 8009566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800956a:	4651      	mov	r1, sl
 800956c:	00ca      	lsls	r2, r1, #3
 800956e:	4610      	mov	r0, r2
 8009570:	4619      	mov	r1, r3
 8009572:	4603      	mov	r3, r0
 8009574:	4642      	mov	r2, r8
 8009576:	189b      	adds	r3, r3, r2
 8009578:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800957c:	464b      	mov	r3, r9
 800957e:	460a      	mov	r2, r1
 8009580:	eb42 0303 	adc.w	r3, r2, r3
 8009584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009592:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009594:	f04f 0200 	mov.w	r2, #0
 8009598:	f04f 0300 	mov.w	r3, #0
 800959c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80095a0:	4649      	mov	r1, r9
 80095a2:	008b      	lsls	r3, r1, #2
 80095a4:	4641      	mov	r1, r8
 80095a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095aa:	4641      	mov	r1, r8
 80095ac:	008a      	lsls	r2, r1, #2
 80095ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80095b2:	f7f7 fb99 	bl	8000ce8 <__aeabi_uldivmod>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	4611      	mov	r1, r2
 80095bc:	4b38      	ldr	r3, [pc, #224]	@ (80096a0 <UART_SetConfig+0x4e4>)
 80095be:	fba3 2301 	umull	r2, r3, r3, r1
 80095c2:	095b      	lsrs	r3, r3, #5
 80095c4:	2264      	movs	r2, #100	@ 0x64
 80095c6:	fb02 f303 	mul.w	r3, r2, r3
 80095ca:	1acb      	subs	r3, r1, r3
 80095cc:	011b      	lsls	r3, r3, #4
 80095ce:	3332      	adds	r3, #50	@ 0x32
 80095d0:	4a33      	ldr	r2, [pc, #204]	@ (80096a0 <UART_SetConfig+0x4e4>)
 80095d2:	fba2 2303 	umull	r2, r3, r2, r3
 80095d6:	095b      	lsrs	r3, r3, #5
 80095d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095dc:	441c      	add	r4, r3
 80095de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095e2:	2200      	movs	r2, #0
 80095e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80095e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80095e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80095ec:	4642      	mov	r2, r8
 80095ee:	464b      	mov	r3, r9
 80095f0:	1891      	adds	r1, r2, r2
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	415b      	adcs	r3, r3
 80095f6:	60fb      	str	r3, [r7, #12]
 80095f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095fc:	4641      	mov	r1, r8
 80095fe:	1851      	adds	r1, r2, r1
 8009600:	6039      	str	r1, [r7, #0]
 8009602:	4649      	mov	r1, r9
 8009604:	414b      	adcs	r3, r1
 8009606:	607b      	str	r3, [r7, #4]
 8009608:	f04f 0200 	mov.w	r2, #0
 800960c:	f04f 0300 	mov.w	r3, #0
 8009610:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009614:	4659      	mov	r1, fp
 8009616:	00cb      	lsls	r3, r1, #3
 8009618:	4651      	mov	r1, sl
 800961a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800961e:	4651      	mov	r1, sl
 8009620:	00ca      	lsls	r2, r1, #3
 8009622:	4610      	mov	r0, r2
 8009624:	4619      	mov	r1, r3
 8009626:	4603      	mov	r3, r0
 8009628:	4642      	mov	r2, r8
 800962a:	189b      	adds	r3, r3, r2
 800962c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800962e:	464b      	mov	r3, r9
 8009630:	460a      	mov	r2, r1
 8009632:	eb42 0303 	adc.w	r3, r2, r3
 8009636:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	663b      	str	r3, [r7, #96]	@ 0x60
 8009642:	667a      	str	r2, [r7, #100]	@ 0x64
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	f04f 0300 	mov.w	r3, #0
 800964c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009650:	4649      	mov	r1, r9
 8009652:	008b      	lsls	r3, r1, #2
 8009654:	4641      	mov	r1, r8
 8009656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800965a:	4641      	mov	r1, r8
 800965c:	008a      	lsls	r2, r1, #2
 800965e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009662:	f7f7 fb41 	bl	8000ce8 <__aeabi_uldivmod>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4b0d      	ldr	r3, [pc, #52]	@ (80096a0 <UART_SetConfig+0x4e4>)
 800966c:	fba3 1302 	umull	r1, r3, r3, r2
 8009670:	095b      	lsrs	r3, r3, #5
 8009672:	2164      	movs	r1, #100	@ 0x64
 8009674:	fb01 f303 	mul.w	r3, r1, r3
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	011b      	lsls	r3, r3, #4
 800967c:	3332      	adds	r3, #50	@ 0x32
 800967e:	4a08      	ldr	r2, [pc, #32]	@ (80096a0 <UART_SetConfig+0x4e4>)
 8009680:	fba2 2303 	umull	r2, r3, r2, r3
 8009684:	095b      	lsrs	r3, r3, #5
 8009686:	f003 020f 	and.w	r2, r3, #15
 800968a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4422      	add	r2, r4
 8009692:	609a      	str	r2, [r3, #8]
}
 8009694:	bf00      	nop
 8009696:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800969a:	46bd      	mov	sp, r7
 800969c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096a0:	51eb851f 	.word	0x51eb851f

080096a4 <__cvt>:
 80096a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096a8:	ec57 6b10 	vmov	r6, r7, d0
 80096ac:	2f00      	cmp	r7, #0
 80096ae:	460c      	mov	r4, r1
 80096b0:	4619      	mov	r1, r3
 80096b2:	463b      	mov	r3, r7
 80096b4:	bfbb      	ittet	lt
 80096b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80096ba:	461f      	movlt	r7, r3
 80096bc:	2300      	movge	r3, #0
 80096be:	232d      	movlt	r3, #45	@ 0x2d
 80096c0:	700b      	strb	r3, [r1, #0]
 80096c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80096c8:	4691      	mov	r9, r2
 80096ca:	f023 0820 	bic.w	r8, r3, #32
 80096ce:	bfbc      	itt	lt
 80096d0:	4632      	movlt	r2, r6
 80096d2:	4616      	movlt	r6, r2
 80096d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80096d8:	d005      	beq.n	80096e6 <__cvt+0x42>
 80096da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80096de:	d100      	bne.n	80096e2 <__cvt+0x3e>
 80096e0:	3401      	adds	r4, #1
 80096e2:	2102      	movs	r1, #2
 80096e4:	e000      	b.n	80096e8 <__cvt+0x44>
 80096e6:	2103      	movs	r1, #3
 80096e8:	ab03      	add	r3, sp, #12
 80096ea:	9301      	str	r3, [sp, #4]
 80096ec:	ab02      	add	r3, sp, #8
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	ec47 6b10 	vmov	d0, r6, r7
 80096f4:	4653      	mov	r3, sl
 80096f6:	4622      	mov	r2, r4
 80096f8:	f000 fe7e 	bl	800a3f8 <_dtoa_r>
 80096fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009700:	4605      	mov	r5, r0
 8009702:	d119      	bne.n	8009738 <__cvt+0x94>
 8009704:	f019 0f01 	tst.w	r9, #1
 8009708:	d00e      	beq.n	8009728 <__cvt+0x84>
 800970a:	eb00 0904 	add.w	r9, r0, r4
 800970e:	2200      	movs	r2, #0
 8009710:	2300      	movs	r3, #0
 8009712:	4630      	mov	r0, r6
 8009714:	4639      	mov	r1, r7
 8009716:	f7f7 fa07 	bl	8000b28 <__aeabi_dcmpeq>
 800971a:	b108      	cbz	r0, 8009720 <__cvt+0x7c>
 800971c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009720:	2230      	movs	r2, #48	@ 0x30
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	454b      	cmp	r3, r9
 8009726:	d31e      	bcc.n	8009766 <__cvt+0xc2>
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800972c:	1b5b      	subs	r3, r3, r5
 800972e:	4628      	mov	r0, r5
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	b004      	add	sp, #16
 8009734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009738:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800973c:	eb00 0904 	add.w	r9, r0, r4
 8009740:	d1e5      	bne.n	800970e <__cvt+0x6a>
 8009742:	7803      	ldrb	r3, [r0, #0]
 8009744:	2b30      	cmp	r3, #48	@ 0x30
 8009746:	d10a      	bne.n	800975e <__cvt+0xba>
 8009748:	2200      	movs	r2, #0
 800974a:	2300      	movs	r3, #0
 800974c:	4630      	mov	r0, r6
 800974e:	4639      	mov	r1, r7
 8009750:	f7f7 f9ea 	bl	8000b28 <__aeabi_dcmpeq>
 8009754:	b918      	cbnz	r0, 800975e <__cvt+0xba>
 8009756:	f1c4 0401 	rsb	r4, r4, #1
 800975a:	f8ca 4000 	str.w	r4, [sl]
 800975e:	f8da 3000 	ldr.w	r3, [sl]
 8009762:	4499      	add	r9, r3
 8009764:	e7d3      	b.n	800970e <__cvt+0x6a>
 8009766:	1c59      	adds	r1, r3, #1
 8009768:	9103      	str	r1, [sp, #12]
 800976a:	701a      	strb	r2, [r3, #0]
 800976c:	e7d9      	b.n	8009722 <__cvt+0x7e>

0800976e <__exponent>:
 800976e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009770:	2900      	cmp	r1, #0
 8009772:	bfba      	itte	lt
 8009774:	4249      	neglt	r1, r1
 8009776:	232d      	movlt	r3, #45	@ 0x2d
 8009778:	232b      	movge	r3, #43	@ 0x2b
 800977a:	2909      	cmp	r1, #9
 800977c:	7002      	strb	r2, [r0, #0]
 800977e:	7043      	strb	r3, [r0, #1]
 8009780:	dd29      	ble.n	80097d6 <__exponent+0x68>
 8009782:	f10d 0307 	add.w	r3, sp, #7
 8009786:	461d      	mov	r5, r3
 8009788:	270a      	movs	r7, #10
 800978a:	461a      	mov	r2, r3
 800978c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009790:	fb07 1416 	mls	r4, r7, r6, r1
 8009794:	3430      	adds	r4, #48	@ 0x30
 8009796:	f802 4c01 	strb.w	r4, [r2, #-1]
 800979a:	460c      	mov	r4, r1
 800979c:	2c63      	cmp	r4, #99	@ 0x63
 800979e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80097a2:	4631      	mov	r1, r6
 80097a4:	dcf1      	bgt.n	800978a <__exponent+0x1c>
 80097a6:	3130      	adds	r1, #48	@ 0x30
 80097a8:	1e94      	subs	r4, r2, #2
 80097aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80097ae:	1c41      	adds	r1, r0, #1
 80097b0:	4623      	mov	r3, r4
 80097b2:	42ab      	cmp	r3, r5
 80097b4:	d30a      	bcc.n	80097cc <__exponent+0x5e>
 80097b6:	f10d 0309 	add.w	r3, sp, #9
 80097ba:	1a9b      	subs	r3, r3, r2
 80097bc:	42ac      	cmp	r4, r5
 80097be:	bf88      	it	hi
 80097c0:	2300      	movhi	r3, #0
 80097c2:	3302      	adds	r3, #2
 80097c4:	4403      	add	r3, r0
 80097c6:	1a18      	subs	r0, r3, r0
 80097c8:	b003      	add	sp, #12
 80097ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80097d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80097d4:	e7ed      	b.n	80097b2 <__exponent+0x44>
 80097d6:	2330      	movs	r3, #48	@ 0x30
 80097d8:	3130      	adds	r1, #48	@ 0x30
 80097da:	7083      	strb	r3, [r0, #2]
 80097dc:	70c1      	strb	r1, [r0, #3]
 80097de:	1d03      	adds	r3, r0, #4
 80097e0:	e7f1      	b.n	80097c6 <__exponent+0x58>
	...

080097e4 <_printf_float>:
 80097e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e8:	b08d      	sub	sp, #52	@ 0x34
 80097ea:	460c      	mov	r4, r1
 80097ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80097f0:	4616      	mov	r6, r2
 80097f2:	461f      	mov	r7, r3
 80097f4:	4605      	mov	r5, r0
 80097f6:	f000 fcef 	bl	800a1d8 <_localeconv_r>
 80097fa:	6803      	ldr	r3, [r0, #0]
 80097fc:	9304      	str	r3, [sp, #16]
 80097fe:	4618      	mov	r0, r3
 8009800:	f7f6 fd66 	bl	80002d0 <strlen>
 8009804:	2300      	movs	r3, #0
 8009806:	930a      	str	r3, [sp, #40]	@ 0x28
 8009808:	f8d8 3000 	ldr.w	r3, [r8]
 800980c:	9005      	str	r0, [sp, #20]
 800980e:	3307      	adds	r3, #7
 8009810:	f023 0307 	bic.w	r3, r3, #7
 8009814:	f103 0208 	add.w	r2, r3, #8
 8009818:	f894 a018 	ldrb.w	sl, [r4, #24]
 800981c:	f8d4 b000 	ldr.w	fp, [r4]
 8009820:	f8c8 2000 	str.w	r2, [r8]
 8009824:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009828:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800982c:	9307      	str	r3, [sp, #28]
 800982e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009832:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800983a:	4b9c      	ldr	r3, [pc, #624]	@ (8009aac <_printf_float+0x2c8>)
 800983c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009840:	f7f7 f9a4 	bl	8000b8c <__aeabi_dcmpun>
 8009844:	bb70      	cbnz	r0, 80098a4 <_printf_float+0xc0>
 8009846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800984a:	4b98      	ldr	r3, [pc, #608]	@ (8009aac <_printf_float+0x2c8>)
 800984c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009850:	f7f7 f97e 	bl	8000b50 <__aeabi_dcmple>
 8009854:	bb30      	cbnz	r0, 80098a4 <_printf_float+0xc0>
 8009856:	2200      	movs	r2, #0
 8009858:	2300      	movs	r3, #0
 800985a:	4640      	mov	r0, r8
 800985c:	4649      	mov	r1, r9
 800985e:	f7f7 f96d 	bl	8000b3c <__aeabi_dcmplt>
 8009862:	b110      	cbz	r0, 800986a <_printf_float+0x86>
 8009864:	232d      	movs	r3, #45	@ 0x2d
 8009866:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800986a:	4a91      	ldr	r2, [pc, #580]	@ (8009ab0 <_printf_float+0x2cc>)
 800986c:	4b91      	ldr	r3, [pc, #580]	@ (8009ab4 <_printf_float+0x2d0>)
 800986e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009872:	bf8c      	ite	hi
 8009874:	4690      	movhi	r8, r2
 8009876:	4698      	movls	r8, r3
 8009878:	2303      	movs	r3, #3
 800987a:	6123      	str	r3, [r4, #16]
 800987c:	f02b 0304 	bic.w	r3, fp, #4
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	f04f 0900 	mov.w	r9, #0
 8009886:	9700      	str	r7, [sp, #0]
 8009888:	4633      	mov	r3, r6
 800988a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800988c:	4621      	mov	r1, r4
 800988e:	4628      	mov	r0, r5
 8009890:	f000 f9d2 	bl	8009c38 <_printf_common>
 8009894:	3001      	adds	r0, #1
 8009896:	f040 808d 	bne.w	80099b4 <_printf_float+0x1d0>
 800989a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800989e:	b00d      	add	sp, #52	@ 0x34
 80098a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	4642      	mov	r2, r8
 80098a6:	464b      	mov	r3, r9
 80098a8:	4640      	mov	r0, r8
 80098aa:	4649      	mov	r1, r9
 80098ac:	f7f7 f96e 	bl	8000b8c <__aeabi_dcmpun>
 80098b0:	b140      	cbz	r0, 80098c4 <_printf_float+0xe0>
 80098b2:	464b      	mov	r3, r9
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	bfbc      	itt	lt
 80098b8:	232d      	movlt	r3, #45	@ 0x2d
 80098ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80098be:	4a7e      	ldr	r2, [pc, #504]	@ (8009ab8 <_printf_float+0x2d4>)
 80098c0:	4b7e      	ldr	r3, [pc, #504]	@ (8009abc <_printf_float+0x2d8>)
 80098c2:	e7d4      	b.n	800986e <_printf_float+0x8a>
 80098c4:	6863      	ldr	r3, [r4, #4]
 80098c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80098ca:	9206      	str	r2, [sp, #24]
 80098cc:	1c5a      	adds	r2, r3, #1
 80098ce:	d13b      	bne.n	8009948 <_printf_float+0x164>
 80098d0:	2306      	movs	r3, #6
 80098d2:	6063      	str	r3, [r4, #4]
 80098d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80098d8:	2300      	movs	r3, #0
 80098da:	6022      	str	r2, [r4, #0]
 80098dc:	9303      	str	r3, [sp, #12]
 80098de:	ab0a      	add	r3, sp, #40	@ 0x28
 80098e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80098e4:	ab09      	add	r3, sp, #36	@ 0x24
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	6861      	ldr	r1, [r4, #4]
 80098ea:	ec49 8b10 	vmov	d0, r8, r9
 80098ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80098f2:	4628      	mov	r0, r5
 80098f4:	f7ff fed6 	bl	80096a4 <__cvt>
 80098f8:	9b06      	ldr	r3, [sp, #24]
 80098fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098fc:	2b47      	cmp	r3, #71	@ 0x47
 80098fe:	4680      	mov	r8, r0
 8009900:	d129      	bne.n	8009956 <_printf_float+0x172>
 8009902:	1cc8      	adds	r0, r1, #3
 8009904:	db02      	blt.n	800990c <_printf_float+0x128>
 8009906:	6863      	ldr	r3, [r4, #4]
 8009908:	4299      	cmp	r1, r3
 800990a:	dd41      	ble.n	8009990 <_printf_float+0x1ac>
 800990c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009910:	fa5f fa8a 	uxtb.w	sl, sl
 8009914:	3901      	subs	r1, #1
 8009916:	4652      	mov	r2, sl
 8009918:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800991c:	9109      	str	r1, [sp, #36]	@ 0x24
 800991e:	f7ff ff26 	bl	800976e <__exponent>
 8009922:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009924:	1813      	adds	r3, r2, r0
 8009926:	2a01      	cmp	r2, #1
 8009928:	4681      	mov	r9, r0
 800992a:	6123      	str	r3, [r4, #16]
 800992c:	dc02      	bgt.n	8009934 <_printf_float+0x150>
 800992e:	6822      	ldr	r2, [r4, #0]
 8009930:	07d2      	lsls	r2, r2, #31
 8009932:	d501      	bpl.n	8009938 <_printf_float+0x154>
 8009934:	3301      	adds	r3, #1
 8009936:	6123      	str	r3, [r4, #16]
 8009938:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800993c:	2b00      	cmp	r3, #0
 800993e:	d0a2      	beq.n	8009886 <_printf_float+0xa2>
 8009940:	232d      	movs	r3, #45	@ 0x2d
 8009942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009946:	e79e      	b.n	8009886 <_printf_float+0xa2>
 8009948:	9a06      	ldr	r2, [sp, #24]
 800994a:	2a47      	cmp	r2, #71	@ 0x47
 800994c:	d1c2      	bne.n	80098d4 <_printf_float+0xf0>
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1c0      	bne.n	80098d4 <_printf_float+0xf0>
 8009952:	2301      	movs	r3, #1
 8009954:	e7bd      	b.n	80098d2 <_printf_float+0xee>
 8009956:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800995a:	d9db      	bls.n	8009914 <_printf_float+0x130>
 800995c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009960:	d118      	bne.n	8009994 <_printf_float+0x1b0>
 8009962:	2900      	cmp	r1, #0
 8009964:	6863      	ldr	r3, [r4, #4]
 8009966:	dd0b      	ble.n	8009980 <_printf_float+0x19c>
 8009968:	6121      	str	r1, [r4, #16]
 800996a:	b913      	cbnz	r3, 8009972 <_printf_float+0x18e>
 800996c:	6822      	ldr	r2, [r4, #0]
 800996e:	07d0      	lsls	r0, r2, #31
 8009970:	d502      	bpl.n	8009978 <_printf_float+0x194>
 8009972:	3301      	adds	r3, #1
 8009974:	440b      	add	r3, r1
 8009976:	6123      	str	r3, [r4, #16]
 8009978:	65a1      	str	r1, [r4, #88]	@ 0x58
 800997a:	f04f 0900 	mov.w	r9, #0
 800997e:	e7db      	b.n	8009938 <_printf_float+0x154>
 8009980:	b913      	cbnz	r3, 8009988 <_printf_float+0x1a4>
 8009982:	6822      	ldr	r2, [r4, #0]
 8009984:	07d2      	lsls	r2, r2, #31
 8009986:	d501      	bpl.n	800998c <_printf_float+0x1a8>
 8009988:	3302      	adds	r3, #2
 800998a:	e7f4      	b.n	8009976 <_printf_float+0x192>
 800998c:	2301      	movs	r3, #1
 800998e:	e7f2      	b.n	8009976 <_printf_float+0x192>
 8009990:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009996:	4299      	cmp	r1, r3
 8009998:	db05      	blt.n	80099a6 <_printf_float+0x1c2>
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	6121      	str	r1, [r4, #16]
 800999e:	07d8      	lsls	r0, r3, #31
 80099a0:	d5ea      	bpl.n	8009978 <_printf_float+0x194>
 80099a2:	1c4b      	adds	r3, r1, #1
 80099a4:	e7e7      	b.n	8009976 <_printf_float+0x192>
 80099a6:	2900      	cmp	r1, #0
 80099a8:	bfd4      	ite	le
 80099aa:	f1c1 0202 	rsble	r2, r1, #2
 80099ae:	2201      	movgt	r2, #1
 80099b0:	4413      	add	r3, r2
 80099b2:	e7e0      	b.n	8009976 <_printf_float+0x192>
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	055a      	lsls	r2, r3, #21
 80099b8:	d407      	bmi.n	80099ca <_printf_float+0x1e6>
 80099ba:	6923      	ldr	r3, [r4, #16]
 80099bc:	4642      	mov	r2, r8
 80099be:	4631      	mov	r1, r6
 80099c0:	4628      	mov	r0, r5
 80099c2:	47b8      	blx	r7
 80099c4:	3001      	adds	r0, #1
 80099c6:	d12b      	bne.n	8009a20 <_printf_float+0x23c>
 80099c8:	e767      	b.n	800989a <_printf_float+0xb6>
 80099ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80099ce:	f240 80dd 	bls.w	8009b8c <_printf_float+0x3a8>
 80099d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80099d6:	2200      	movs	r2, #0
 80099d8:	2300      	movs	r3, #0
 80099da:	f7f7 f8a5 	bl	8000b28 <__aeabi_dcmpeq>
 80099de:	2800      	cmp	r0, #0
 80099e0:	d033      	beq.n	8009a4a <_printf_float+0x266>
 80099e2:	4a37      	ldr	r2, [pc, #220]	@ (8009ac0 <_printf_float+0x2dc>)
 80099e4:	2301      	movs	r3, #1
 80099e6:	4631      	mov	r1, r6
 80099e8:	4628      	mov	r0, r5
 80099ea:	47b8      	blx	r7
 80099ec:	3001      	adds	r0, #1
 80099ee:	f43f af54 	beq.w	800989a <_printf_float+0xb6>
 80099f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80099f6:	4543      	cmp	r3, r8
 80099f8:	db02      	blt.n	8009a00 <_printf_float+0x21c>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	07d8      	lsls	r0, r3, #31
 80099fe:	d50f      	bpl.n	8009a20 <_printf_float+0x23c>
 8009a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a04:	4631      	mov	r1, r6
 8009a06:	4628      	mov	r0, r5
 8009a08:	47b8      	blx	r7
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	f43f af45 	beq.w	800989a <_printf_float+0xb6>
 8009a10:	f04f 0900 	mov.w	r9, #0
 8009a14:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009a18:	f104 0a1a 	add.w	sl, r4, #26
 8009a1c:	45c8      	cmp	r8, r9
 8009a1e:	dc09      	bgt.n	8009a34 <_printf_float+0x250>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	079b      	lsls	r3, r3, #30
 8009a24:	f100 8103 	bmi.w	8009c2e <_printf_float+0x44a>
 8009a28:	68e0      	ldr	r0, [r4, #12]
 8009a2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a2c:	4298      	cmp	r0, r3
 8009a2e:	bfb8      	it	lt
 8009a30:	4618      	movlt	r0, r3
 8009a32:	e734      	b.n	800989e <_printf_float+0xba>
 8009a34:	2301      	movs	r3, #1
 8009a36:	4652      	mov	r2, sl
 8009a38:	4631      	mov	r1, r6
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	47b8      	blx	r7
 8009a3e:	3001      	adds	r0, #1
 8009a40:	f43f af2b 	beq.w	800989a <_printf_float+0xb6>
 8009a44:	f109 0901 	add.w	r9, r9, #1
 8009a48:	e7e8      	b.n	8009a1c <_printf_float+0x238>
 8009a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	dc39      	bgt.n	8009ac4 <_printf_float+0x2e0>
 8009a50:	4a1b      	ldr	r2, [pc, #108]	@ (8009ac0 <_printf_float+0x2dc>)
 8009a52:	2301      	movs	r3, #1
 8009a54:	4631      	mov	r1, r6
 8009a56:	4628      	mov	r0, r5
 8009a58:	47b8      	blx	r7
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	f43f af1d 	beq.w	800989a <_printf_float+0xb6>
 8009a60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009a64:	ea59 0303 	orrs.w	r3, r9, r3
 8009a68:	d102      	bne.n	8009a70 <_printf_float+0x28c>
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	07d9      	lsls	r1, r3, #31
 8009a6e:	d5d7      	bpl.n	8009a20 <_printf_float+0x23c>
 8009a70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b8      	blx	r7
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	f43f af0d 	beq.w	800989a <_printf_float+0xb6>
 8009a80:	f04f 0a00 	mov.w	sl, #0
 8009a84:	f104 0b1a 	add.w	fp, r4, #26
 8009a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a8a:	425b      	negs	r3, r3
 8009a8c:	4553      	cmp	r3, sl
 8009a8e:	dc01      	bgt.n	8009a94 <_printf_float+0x2b0>
 8009a90:	464b      	mov	r3, r9
 8009a92:	e793      	b.n	80099bc <_printf_float+0x1d8>
 8009a94:	2301      	movs	r3, #1
 8009a96:	465a      	mov	r2, fp
 8009a98:	4631      	mov	r1, r6
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	47b8      	blx	r7
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	f43f aefb 	beq.w	800989a <_printf_float+0xb6>
 8009aa4:	f10a 0a01 	add.w	sl, sl, #1
 8009aa8:	e7ee      	b.n	8009a88 <_printf_float+0x2a4>
 8009aaa:	bf00      	nop
 8009aac:	7fefffff 	.word	0x7fefffff
 8009ab0:	0800c774 	.word	0x0800c774
 8009ab4:	0800c770 	.word	0x0800c770
 8009ab8:	0800c77c 	.word	0x0800c77c
 8009abc:	0800c778 	.word	0x0800c778
 8009ac0:	0800c780 	.word	0x0800c780
 8009ac4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ac6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009aca:	4553      	cmp	r3, sl
 8009acc:	bfa8      	it	ge
 8009ace:	4653      	movge	r3, sl
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	4699      	mov	r9, r3
 8009ad4:	dc36      	bgt.n	8009b44 <_printf_float+0x360>
 8009ad6:	f04f 0b00 	mov.w	fp, #0
 8009ada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ade:	f104 021a 	add.w	r2, r4, #26
 8009ae2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ae4:	9306      	str	r3, [sp, #24]
 8009ae6:	eba3 0309 	sub.w	r3, r3, r9
 8009aea:	455b      	cmp	r3, fp
 8009aec:	dc31      	bgt.n	8009b52 <_printf_float+0x36e>
 8009aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af0:	459a      	cmp	sl, r3
 8009af2:	dc3a      	bgt.n	8009b6a <_printf_float+0x386>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	07da      	lsls	r2, r3, #31
 8009af8:	d437      	bmi.n	8009b6a <_printf_float+0x386>
 8009afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009afc:	ebaa 0903 	sub.w	r9, sl, r3
 8009b00:	9b06      	ldr	r3, [sp, #24]
 8009b02:	ebaa 0303 	sub.w	r3, sl, r3
 8009b06:	4599      	cmp	r9, r3
 8009b08:	bfa8      	it	ge
 8009b0a:	4699      	movge	r9, r3
 8009b0c:	f1b9 0f00 	cmp.w	r9, #0
 8009b10:	dc33      	bgt.n	8009b7a <_printf_float+0x396>
 8009b12:	f04f 0800 	mov.w	r8, #0
 8009b16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b1a:	f104 0b1a 	add.w	fp, r4, #26
 8009b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b20:	ebaa 0303 	sub.w	r3, sl, r3
 8009b24:	eba3 0309 	sub.w	r3, r3, r9
 8009b28:	4543      	cmp	r3, r8
 8009b2a:	f77f af79 	ble.w	8009a20 <_printf_float+0x23c>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	465a      	mov	r2, fp
 8009b32:	4631      	mov	r1, r6
 8009b34:	4628      	mov	r0, r5
 8009b36:	47b8      	blx	r7
 8009b38:	3001      	adds	r0, #1
 8009b3a:	f43f aeae 	beq.w	800989a <_printf_float+0xb6>
 8009b3e:	f108 0801 	add.w	r8, r8, #1
 8009b42:	e7ec      	b.n	8009b1e <_printf_float+0x33a>
 8009b44:	4642      	mov	r2, r8
 8009b46:	4631      	mov	r1, r6
 8009b48:	4628      	mov	r0, r5
 8009b4a:	47b8      	blx	r7
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d1c2      	bne.n	8009ad6 <_printf_float+0x2f2>
 8009b50:	e6a3      	b.n	800989a <_printf_float+0xb6>
 8009b52:	2301      	movs	r3, #1
 8009b54:	4631      	mov	r1, r6
 8009b56:	4628      	mov	r0, r5
 8009b58:	9206      	str	r2, [sp, #24]
 8009b5a:	47b8      	blx	r7
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	f43f ae9c 	beq.w	800989a <_printf_float+0xb6>
 8009b62:	9a06      	ldr	r2, [sp, #24]
 8009b64:	f10b 0b01 	add.w	fp, fp, #1
 8009b68:	e7bb      	b.n	8009ae2 <_printf_float+0x2fe>
 8009b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b6e:	4631      	mov	r1, r6
 8009b70:	4628      	mov	r0, r5
 8009b72:	47b8      	blx	r7
 8009b74:	3001      	adds	r0, #1
 8009b76:	d1c0      	bne.n	8009afa <_printf_float+0x316>
 8009b78:	e68f      	b.n	800989a <_printf_float+0xb6>
 8009b7a:	9a06      	ldr	r2, [sp, #24]
 8009b7c:	464b      	mov	r3, r9
 8009b7e:	4442      	add	r2, r8
 8009b80:	4631      	mov	r1, r6
 8009b82:	4628      	mov	r0, r5
 8009b84:	47b8      	blx	r7
 8009b86:	3001      	adds	r0, #1
 8009b88:	d1c3      	bne.n	8009b12 <_printf_float+0x32e>
 8009b8a:	e686      	b.n	800989a <_printf_float+0xb6>
 8009b8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b90:	f1ba 0f01 	cmp.w	sl, #1
 8009b94:	dc01      	bgt.n	8009b9a <_printf_float+0x3b6>
 8009b96:	07db      	lsls	r3, r3, #31
 8009b98:	d536      	bpl.n	8009c08 <_printf_float+0x424>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	4642      	mov	r2, r8
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	47b8      	blx	r7
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	f43f ae78 	beq.w	800989a <_printf_float+0xb6>
 8009baa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bae:	4631      	mov	r1, r6
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	47b8      	blx	r7
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	f43f ae70 	beq.w	800989a <_printf_float+0xb6>
 8009bba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009bc6:	f7f6 ffaf 	bl	8000b28 <__aeabi_dcmpeq>
 8009bca:	b9c0      	cbnz	r0, 8009bfe <_printf_float+0x41a>
 8009bcc:	4653      	mov	r3, sl
 8009bce:	f108 0201 	add.w	r2, r8, #1
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	47b8      	blx	r7
 8009bd8:	3001      	adds	r0, #1
 8009bda:	d10c      	bne.n	8009bf6 <_printf_float+0x412>
 8009bdc:	e65d      	b.n	800989a <_printf_float+0xb6>
 8009bde:	2301      	movs	r3, #1
 8009be0:	465a      	mov	r2, fp
 8009be2:	4631      	mov	r1, r6
 8009be4:	4628      	mov	r0, r5
 8009be6:	47b8      	blx	r7
 8009be8:	3001      	adds	r0, #1
 8009bea:	f43f ae56 	beq.w	800989a <_printf_float+0xb6>
 8009bee:	f108 0801 	add.w	r8, r8, #1
 8009bf2:	45d0      	cmp	r8, sl
 8009bf4:	dbf3      	blt.n	8009bde <_printf_float+0x3fa>
 8009bf6:	464b      	mov	r3, r9
 8009bf8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009bfc:	e6df      	b.n	80099be <_printf_float+0x1da>
 8009bfe:	f04f 0800 	mov.w	r8, #0
 8009c02:	f104 0b1a 	add.w	fp, r4, #26
 8009c06:	e7f4      	b.n	8009bf2 <_printf_float+0x40e>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	4642      	mov	r2, r8
 8009c0c:	e7e1      	b.n	8009bd2 <_printf_float+0x3ee>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	464a      	mov	r2, r9
 8009c12:	4631      	mov	r1, r6
 8009c14:	4628      	mov	r0, r5
 8009c16:	47b8      	blx	r7
 8009c18:	3001      	adds	r0, #1
 8009c1a:	f43f ae3e 	beq.w	800989a <_printf_float+0xb6>
 8009c1e:	f108 0801 	add.w	r8, r8, #1
 8009c22:	68e3      	ldr	r3, [r4, #12]
 8009c24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c26:	1a5b      	subs	r3, r3, r1
 8009c28:	4543      	cmp	r3, r8
 8009c2a:	dcf0      	bgt.n	8009c0e <_printf_float+0x42a>
 8009c2c:	e6fc      	b.n	8009a28 <_printf_float+0x244>
 8009c2e:	f04f 0800 	mov.w	r8, #0
 8009c32:	f104 0919 	add.w	r9, r4, #25
 8009c36:	e7f4      	b.n	8009c22 <_printf_float+0x43e>

08009c38 <_printf_common>:
 8009c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c3c:	4616      	mov	r6, r2
 8009c3e:	4698      	mov	r8, r3
 8009c40:	688a      	ldr	r2, [r1, #8]
 8009c42:	690b      	ldr	r3, [r1, #16]
 8009c44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	bfb8      	it	lt
 8009c4c:	4613      	movlt	r3, r2
 8009c4e:	6033      	str	r3, [r6, #0]
 8009c50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c54:	4607      	mov	r7, r0
 8009c56:	460c      	mov	r4, r1
 8009c58:	b10a      	cbz	r2, 8009c5e <_printf_common+0x26>
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	6033      	str	r3, [r6, #0]
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	0699      	lsls	r1, r3, #26
 8009c62:	bf42      	ittt	mi
 8009c64:	6833      	ldrmi	r3, [r6, #0]
 8009c66:	3302      	addmi	r3, #2
 8009c68:	6033      	strmi	r3, [r6, #0]
 8009c6a:	6825      	ldr	r5, [r4, #0]
 8009c6c:	f015 0506 	ands.w	r5, r5, #6
 8009c70:	d106      	bne.n	8009c80 <_printf_common+0x48>
 8009c72:	f104 0a19 	add.w	sl, r4, #25
 8009c76:	68e3      	ldr	r3, [r4, #12]
 8009c78:	6832      	ldr	r2, [r6, #0]
 8009c7a:	1a9b      	subs	r3, r3, r2
 8009c7c:	42ab      	cmp	r3, r5
 8009c7e:	dc26      	bgt.n	8009cce <_printf_common+0x96>
 8009c80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c84:	6822      	ldr	r2, [r4, #0]
 8009c86:	3b00      	subs	r3, #0
 8009c88:	bf18      	it	ne
 8009c8a:	2301      	movne	r3, #1
 8009c8c:	0692      	lsls	r2, r2, #26
 8009c8e:	d42b      	bmi.n	8009ce8 <_printf_common+0xb0>
 8009c90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c94:	4641      	mov	r1, r8
 8009c96:	4638      	mov	r0, r7
 8009c98:	47c8      	blx	r9
 8009c9a:	3001      	adds	r0, #1
 8009c9c:	d01e      	beq.n	8009cdc <_printf_common+0xa4>
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	6922      	ldr	r2, [r4, #16]
 8009ca2:	f003 0306 	and.w	r3, r3, #6
 8009ca6:	2b04      	cmp	r3, #4
 8009ca8:	bf02      	ittt	eq
 8009caa:	68e5      	ldreq	r5, [r4, #12]
 8009cac:	6833      	ldreq	r3, [r6, #0]
 8009cae:	1aed      	subeq	r5, r5, r3
 8009cb0:	68a3      	ldr	r3, [r4, #8]
 8009cb2:	bf0c      	ite	eq
 8009cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cb8:	2500      	movne	r5, #0
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	bfc4      	itt	gt
 8009cbe:	1a9b      	subgt	r3, r3, r2
 8009cc0:	18ed      	addgt	r5, r5, r3
 8009cc2:	2600      	movs	r6, #0
 8009cc4:	341a      	adds	r4, #26
 8009cc6:	42b5      	cmp	r5, r6
 8009cc8:	d11a      	bne.n	8009d00 <_printf_common+0xc8>
 8009cca:	2000      	movs	r0, #0
 8009ccc:	e008      	b.n	8009ce0 <_printf_common+0xa8>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	4652      	mov	r2, sl
 8009cd2:	4641      	mov	r1, r8
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	47c8      	blx	r9
 8009cd8:	3001      	adds	r0, #1
 8009cda:	d103      	bne.n	8009ce4 <_printf_common+0xac>
 8009cdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce4:	3501      	adds	r5, #1
 8009ce6:	e7c6      	b.n	8009c76 <_printf_common+0x3e>
 8009ce8:	18e1      	adds	r1, r4, r3
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	2030      	movs	r0, #48	@ 0x30
 8009cee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cf2:	4422      	add	r2, r4
 8009cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009cf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009cfc:	3302      	adds	r3, #2
 8009cfe:	e7c7      	b.n	8009c90 <_printf_common+0x58>
 8009d00:	2301      	movs	r3, #1
 8009d02:	4622      	mov	r2, r4
 8009d04:	4641      	mov	r1, r8
 8009d06:	4638      	mov	r0, r7
 8009d08:	47c8      	blx	r9
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	d0e6      	beq.n	8009cdc <_printf_common+0xa4>
 8009d0e:	3601      	adds	r6, #1
 8009d10:	e7d9      	b.n	8009cc6 <_printf_common+0x8e>
	...

08009d14 <_printf_i>:
 8009d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d18:	7e0f      	ldrb	r7, [r1, #24]
 8009d1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d1c:	2f78      	cmp	r7, #120	@ 0x78
 8009d1e:	4691      	mov	r9, r2
 8009d20:	4680      	mov	r8, r0
 8009d22:	460c      	mov	r4, r1
 8009d24:	469a      	mov	sl, r3
 8009d26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d2a:	d807      	bhi.n	8009d3c <_printf_i+0x28>
 8009d2c:	2f62      	cmp	r7, #98	@ 0x62
 8009d2e:	d80a      	bhi.n	8009d46 <_printf_i+0x32>
 8009d30:	2f00      	cmp	r7, #0
 8009d32:	f000 80d1 	beq.w	8009ed8 <_printf_i+0x1c4>
 8009d36:	2f58      	cmp	r7, #88	@ 0x58
 8009d38:	f000 80b8 	beq.w	8009eac <_printf_i+0x198>
 8009d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d44:	e03a      	b.n	8009dbc <_printf_i+0xa8>
 8009d46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d4a:	2b15      	cmp	r3, #21
 8009d4c:	d8f6      	bhi.n	8009d3c <_printf_i+0x28>
 8009d4e:	a101      	add	r1, pc, #4	@ (adr r1, 8009d54 <_printf_i+0x40>)
 8009d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d54:	08009dad 	.word	0x08009dad
 8009d58:	08009dc1 	.word	0x08009dc1
 8009d5c:	08009d3d 	.word	0x08009d3d
 8009d60:	08009d3d 	.word	0x08009d3d
 8009d64:	08009d3d 	.word	0x08009d3d
 8009d68:	08009d3d 	.word	0x08009d3d
 8009d6c:	08009dc1 	.word	0x08009dc1
 8009d70:	08009d3d 	.word	0x08009d3d
 8009d74:	08009d3d 	.word	0x08009d3d
 8009d78:	08009d3d 	.word	0x08009d3d
 8009d7c:	08009d3d 	.word	0x08009d3d
 8009d80:	08009ebf 	.word	0x08009ebf
 8009d84:	08009deb 	.word	0x08009deb
 8009d88:	08009e79 	.word	0x08009e79
 8009d8c:	08009d3d 	.word	0x08009d3d
 8009d90:	08009d3d 	.word	0x08009d3d
 8009d94:	08009ee1 	.word	0x08009ee1
 8009d98:	08009d3d 	.word	0x08009d3d
 8009d9c:	08009deb 	.word	0x08009deb
 8009da0:	08009d3d 	.word	0x08009d3d
 8009da4:	08009d3d 	.word	0x08009d3d
 8009da8:	08009e81 	.word	0x08009e81
 8009dac:	6833      	ldr	r3, [r6, #0]
 8009dae:	1d1a      	adds	r2, r3, #4
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6032      	str	r2, [r6, #0]
 8009db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009db8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e09c      	b.n	8009efa <_printf_i+0x1e6>
 8009dc0:	6833      	ldr	r3, [r6, #0]
 8009dc2:	6820      	ldr	r0, [r4, #0]
 8009dc4:	1d19      	adds	r1, r3, #4
 8009dc6:	6031      	str	r1, [r6, #0]
 8009dc8:	0606      	lsls	r6, r0, #24
 8009dca:	d501      	bpl.n	8009dd0 <_printf_i+0xbc>
 8009dcc:	681d      	ldr	r5, [r3, #0]
 8009dce:	e003      	b.n	8009dd8 <_printf_i+0xc4>
 8009dd0:	0645      	lsls	r5, r0, #25
 8009dd2:	d5fb      	bpl.n	8009dcc <_printf_i+0xb8>
 8009dd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009dd8:	2d00      	cmp	r5, #0
 8009dda:	da03      	bge.n	8009de4 <_printf_i+0xd0>
 8009ddc:	232d      	movs	r3, #45	@ 0x2d
 8009dde:	426d      	negs	r5, r5
 8009de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009de4:	4858      	ldr	r0, [pc, #352]	@ (8009f48 <_printf_i+0x234>)
 8009de6:	230a      	movs	r3, #10
 8009de8:	e011      	b.n	8009e0e <_printf_i+0xfa>
 8009dea:	6821      	ldr	r1, [r4, #0]
 8009dec:	6833      	ldr	r3, [r6, #0]
 8009dee:	0608      	lsls	r0, r1, #24
 8009df0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009df4:	d402      	bmi.n	8009dfc <_printf_i+0xe8>
 8009df6:	0649      	lsls	r1, r1, #25
 8009df8:	bf48      	it	mi
 8009dfa:	b2ad      	uxthmi	r5, r5
 8009dfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8009dfe:	4852      	ldr	r0, [pc, #328]	@ (8009f48 <_printf_i+0x234>)
 8009e00:	6033      	str	r3, [r6, #0]
 8009e02:	bf14      	ite	ne
 8009e04:	230a      	movne	r3, #10
 8009e06:	2308      	moveq	r3, #8
 8009e08:	2100      	movs	r1, #0
 8009e0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e0e:	6866      	ldr	r6, [r4, #4]
 8009e10:	60a6      	str	r6, [r4, #8]
 8009e12:	2e00      	cmp	r6, #0
 8009e14:	db05      	blt.n	8009e22 <_printf_i+0x10e>
 8009e16:	6821      	ldr	r1, [r4, #0]
 8009e18:	432e      	orrs	r6, r5
 8009e1a:	f021 0104 	bic.w	r1, r1, #4
 8009e1e:	6021      	str	r1, [r4, #0]
 8009e20:	d04b      	beq.n	8009eba <_printf_i+0x1a6>
 8009e22:	4616      	mov	r6, r2
 8009e24:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e28:	fb03 5711 	mls	r7, r3, r1, r5
 8009e2c:	5dc7      	ldrb	r7, [r0, r7]
 8009e2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e32:	462f      	mov	r7, r5
 8009e34:	42bb      	cmp	r3, r7
 8009e36:	460d      	mov	r5, r1
 8009e38:	d9f4      	bls.n	8009e24 <_printf_i+0x110>
 8009e3a:	2b08      	cmp	r3, #8
 8009e3c:	d10b      	bne.n	8009e56 <_printf_i+0x142>
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	07df      	lsls	r7, r3, #31
 8009e42:	d508      	bpl.n	8009e56 <_printf_i+0x142>
 8009e44:	6923      	ldr	r3, [r4, #16]
 8009e46:	6861      	ldr	r1, [r4, #4]
 8009e48:	4299      	cmp	r1, r3
 8009e4a:	bfde      	ittt	le
 8009e4c:	2330      	movle	r3, #48	@ 0x30
 8009e4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e52:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009e56:	1b92      	subs	r2, r2, r6
 8009e58:	6122      	str	r2, [r4, #16]
 8009e5a:	f8cd a000 	str.w	sl, [sp]
 8009e5e:	464b      	mov	r3, r9
 8009e60:	aa03      	add	r2, sp, #12
 8009e62:	4621      	mov	r1, r4
 8009e64:	4640      	mov	r0, r8
 8009e66:	f7ff fee7 	bl	8009c38 <_printf_common>
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	d14a      	bne.n	8009f04 <_printf_i+0x1f0>
 8009e6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e72:	b004      	add	sp, #16
 8009e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	f043 0320 	orr.w	r3, r3, #32
 8009e7e:	6023      	str	r3, [r4, #0]
 8009e80:	4832      	ldr	r0, [pc, #200]	@ (8009f4c <_printf_i+0x238>)
 8009e82:	2778      	movs	r7, #120	@ 0x78
 8009e84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	6831      	ldr	r1, [r6, #0]
 8009e8c:	061f      	lsls	r7, r3, #24
 8009e8e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e92:	d402      	bmi.n	8009e9a <_printf_i+0x186>
 8009e94:	065f      	lsls	r7, r3, #25
 8009e96:	bf48      	it	mi
 8009e98:	b2ad      	uxthmi	r5, r5
 8009e9a:	6031      	str	r1, [r6, #0]
 8009e9c:	07d9      	lsls	r1, r3, #31
 8009e9e:	bf44      	itt	mi
 8009ea0:	f043 0320 	orrmi.w	r3, r3, #32
 8009ea4:	6023      	strmi	r3, [r4, #0]
 8009ea6:	b11d      	cbz	r5, 8009eb0 <_printf_i+0x19c>
 8009ea8:	2310      	movs	r3, #16
 8009eaa:	e7ad      	b.n	8009e08 <_printf_i+0xf4>
 8009eac:	4826      	ldr	r0, [pc, #152]	@ (8009f48 <_printf_i+0x234>)
 8009eae:	e7e9      	b.n	8009e84 <_printf_i+0x170>
 8009eb0:	6823      	ldr	r3, [r4, #0]
 8009eb2:	f023 0320 	bic.w	r3, r3, #32
 8009eb6:	6023      	str	r3, [r4, #0]
 8009eb8:	e7f6      	b.n	8009ea8 <_printf_i+0x194>
 8009eba:	4616      	mov	r6, r2
 8009ebc:	e7bd      	b.n	8009e3a <_printf_i+0x126>
 8009ebe:	6833      	ldr	r3, [r6, #0]
 8009ec0:	6825      	ldr	r5, [r4, #0]
 8009ec2:	6961      	ldr	r1, [r4, #20]
 8009ec4:	1d18      	adds	r0, r3, #4
 8009ec6:	6030      	str	r0, [r6, #0]
 8009ec8:	062e      	lsls	r6, r5, #24
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	d501      	bpl.n	8009ed2 <_printf_i+0x1be>
 8009ece:	6019      	str	r1, [r3, #0]
 8009ed0:	e002      	b.n	8009ed8 <_printf_i+0x1c4>
 8009ed2:	0668      	lsls	r0, r5, #25
 8009ed4:	d5fb      	bpl.n	8009ece <_printf_i+0x1ba>
 8009ed6:	8019      	strh	r1, [r3, #0]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	6123      	str	r3, [r4, #16]
 8009edc:	4616      	mov	r6, r2
 8009ede:	e7bc      	b.n	8009e5a <_printf_i+0x146>
 8009ee0:	6833      	ldr	r3, [r6, #0]
 8009ee2:	1d1a      	adds	r2, r3, #4
 8009ee4:	6032      	str	r2, [r6, #0]
 8009ee6:	681e      	ldr	r6, [r3, #0]
 8009ee8:	6862      	ldr	r2, [r4, #4]
 8009eea:	2100      	movs	r1, #0
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7f6 f99f 	bl	8000230 <memchr>
 8009ef2:	b108      	cbz	r0, 8009ef8 <_printf_i+0x1e4>
 8009ef4:	1b80      	subs	r0, r0, r6
 8009ef6:	6060      	str	r0, [r4, #4]
 8009ef8:	6863      	ldr	r3, [r4, #4]
 8009efa:	6123      	str	r3, [r4, #16]
 8009efc:	2300      	movs	r3, #0
 8009efe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f02:	e7aa      	b.n	8009e5a <_printf_i+0x146>
 8009f04:	6923      	ldr	r3, [r4, #16]
 8009f06:	4632      	mov	r2, r6
 8009f08:	4649      	mov	r1, r9
 8009f0a:	4640      	mov	r0, r8
 8009f0c:	47d0      	blx	sl
 8009f0e:	3001      	adds	r0, #1
 8009f10:	d0ad      	beq.n	8009e6e <_printf_i+0x15a>
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	079b      	lsls	r3, r3, #30
 8009f16:	d413      	bmi.n	8009f40 <_printf_i+0x22c>
 8009f18:	68e0      	ldr	r0, [r4, #12]
 8009f1a:	9b03      	ldr	r3, [sp, #12]
 8009f1c:	4298      	cmp	r0, r3
 8009f1e:	bfb8      	it	lt
 8009f20:	4618      	movlt	r0, r3
 8009f22:	e7a6      	b.n	8009e72 <_printf_i+0x15e>
 8009f24:	2301      	movs	r3, #1
 8009f26:	4632      	mov	r2, r6
 8009f28:	4649      	mov	r1, r9
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	47d0      	blx	sl
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d09d      	beq.n	8009e6e <_printf_i+0x15a>
 8009f32:	3501      	adds	r5, #1
 8009f34:	68e3      	ldr	r3, [r4, #12]
 8009f36:	9903      	ldr	r1, [sp, #12]
 8009f38:	1a5b      	subs	r3, r3, r1
 8009f3a:	42ab      	cmp	r3, r5
 8009f3c:	dcf2      	bgt.n	8009f24 <_printf_i+0x210>
 8009f3e:	e7eb      	b.n	8009f18 <_printf_i+0x204>
 8009f40:	2500      	movs	r5, #0
 8009f42:	f104 0619 	add.w	r6, r4, #25
 8009f46:	e7f5      	b.n	8009f34 <_printf_i+0x220>
 8009f48:	0800c782 	.word	0x0800c782
 8009f4c:	0800c793 	.word	0x0800c793

08009f50 <std>:
 8009f50:	2300      	movs	r3, #0
 8009f52:	b510      	push	{r4, lr}
 8009f54:	4604      	mov	r4, r0
 8009f56:	e9c0 3300 	strd	r3, r3, [r0]
 8009f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f5e:	6083      	str	r3, [r0, #8]
 8009f60:	8181      	strh	r1, [r0, #12]
 8009f62:	6643      	str	r3, [r0, #100]	@ 0x64
 8009f64:	81c2      	strh	r2, [r0, #14]
 8009f66:	6183      	str	r3, [r0, #24]
 8009f68:	4619      	mov	r1, r3
 8009f6a:	2208      	movs	r2, #8
 8009f6c:	305c      	adds	r0, #92	@ 0x5c
 8009f6e:	f000 f92a 	bl	800a1c6 <memset>
 8009f72:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa8 <std+0x58>)
 8009f74:	6263      	str	r3, [r4, #36]	@ 0x24
 8009f76:	4b0d      	ldr	r3, [pc, #52]	@ (8009fac <std+0x5c>)
 8009f78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb0 <std+0x60>)
 8009f7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb4 <std+0x64>)
 8009f80:	6323      	str	r3, [r4, #48]	@ 0x30
 8009f82:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb8 <std+0x68>)
 8009f84:	6224      	str	r4, [r4, #32]
 8009f86:	429c      	cmp	r4, r3
 8009f88:	d006      	beq.n	8009f98 <std+0x48>
 8009f8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009f8e:	4294      	cmp	r4, r2
 8009f90:	d002      	beq.n	8009f98 <std+0x48>
 8009f92:	33d0      	adds	r3, #208	@ 0xd0
 8009f94:	429c      	cmp	r4, r3
 8009f96:	d105      	bne.n	8009fa4 <std+0x54>
 8009f98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fa0:	f000 b98e 	b.w	800a2c0 <__retarget_lock_init_recursive>
 8009fa4:	bd10      	pop	{r4, pc}
 8009fa6:	bf00      	nop
 8009fa8:	0800a141 	.word	0x0800a141
 8009fac:	0800a163 	.word	0x0800a163
 8009fb0:	0800a19b 	.word	0x0800a19b
 8009fb4:	0800a1bf 	.word	0x0800a1bf
 8009fb8:	20000b88 	.word	0x20000b88

08009fbc <stdio_exit_handler>:
 8009fbc:	4a02      	ldr	r2, [pc, #8]	@ (8009fc8 <stdio_exit_handler+0xc>)
 8009fbe:	4903      	ldr	r1, [pc, #12]	@ (8009fcc <stdio_exit_handler+0x10>)
 8009fc0:	4803      	ldr	r0, [pc, #12]	@ (8009fd0 <stdio_exit_handler+0x14>)
 8009fc2:	f000 b869 	b.w	800a098 <_fwalk_sglue>
 8009fc6:	bf00      	nop
 8009fc8:	200003c8 	.word	0x200003c8
 8009fcc:	0800bc45 	.word	0x0800bc45
 8009fd0:	200003d8 	.word	0x200003d8

08009fd4 <cleanup_stdio>:
 8009fd4:	6841      	ldr	r1, [r0, #4]
 8009fd6:	4b0c      	ldr	r3, [pc, #48]	@ (800a008 <cleanup_stdio+0x34>)
 8009fd8:	4299      	cmp	r1, r3
 8009fda:	b510      	push	{r4, lr}
 8009fdc:	4604      	mov	r4, r0
 8009fde:	d001      	beq.n	8009fe4 <cleanup_stdio+0x10>
 8009fe0:	f001 fe30 	bl	800bc44 <_fflush_r>
 8009fe4:	68a1      	ldr	r1, [r4, #8]
 8009fe6:	4b09      	ldr	r3, [pc, #36]	@ (800a00c <cleanup_stdio+0x38>)
 8009fe8:	4299      	cmp	r1, r3
 8009fea:	d002      	beq.n	8009ff2 <cleanup_stdio+0x1e>
 8009fec:	4620      	mov	r0, r4
 8009fee:	f001 fe29 	bl	800bc44 <_fflush_r>
 8009ff2:	68e1      	ldr	r1, [r4, #12]
 8009ff4:	4b06      	ldr	r3, [pc, #24]	@ (800a010 <cleanup_stdio+0x3c>)
 8009ff6:	4299      	cmp	r1, r3
 8009ff8:	d004      	beq.n	800a004 <cleanup_stdio+0x30>
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a000:	f001 be20 	b.w	800bc44 <_fflush_r>
 800a004:	bd10      	pop	{r4, pc}
 800a006:	bf00      	nop
 800a008:	20000b88 	.word	0x20000b88
 800a00c:	20000bf0 	.word	0x20000bf0
 800a010:	20000c58 	.word	0x20000c58

0800a014 <global_stdio_init.part.0>:
 800a014:	b510      	push	{r4, lr}
 800a016:	4b0b      	ldr	r3, [pc, #44]	@ (800a044 <global_stdio_init.part.0+0x30>)
 800a018:	4c0b      	ldr	r4, [pc, #44]	@ (800a048 <global_stdio_init.part.0+0x34>)
 800a01a:	4a0c      	ldr	r2, [pc, #48]	@ (800a04c <global_stdio_init.part.0+0x38>)
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	4620      	mov	r0, r4
 800a020:	2200      	movs	r2, #0
 800a022:	2104      	movs	r1, #4
 800a024:	f7ff ff94 	bl	8009f50 <std>
 800a028:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a02c:	2201      	movs	r2, #1
 800a02e:	2109      	movs	r1, #9
 800a030:	f7ff ff8e 	bl	8009f50 <std>
 800a034:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a038:	2202      	movs	r2, #2
 800a03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a03e:	2112      	movs	r1, #18
 800a040:	f7ff bf86 	b.w	8009f50 <std>
 800a044:	20000cc0 	.word	0x20000cc0
 800a048:	20000b88 	.word	0x20000b88
 800a04c:	08009fbd 	.word	0x08009fbd

0800a050 <__sfp_lock_acquire>:
 800a050:	4801      	ldr	r0, [pc, #4]	@ (800a058 <__sfp_lock_acquire+0x8>)
 800a052:	f000 b936 	b.w	800a2c2 <__retarget_lock_acquire_recursive>
 800a056:	bf00      	nop
 800a058:	20000cc9 	.word	0x20000cc9

0800a05c <__sfp_lock_release>:
 800a05c:	4801      	ldr	r0, [pc, #4]	@ (800a064 <__sfp_lock_release+0x8>)
 800a05e:	f000 b931 	b.w	800a2c4 <__retarget_lock_release_recursive>
 800a062:	bf00      	nop
 800a064:	20000cc9 	.word	0x20000cc9

0800a068 <__sinit>:
 800a068:	b510      	push	{r4, lr}
 800a06a:	4604      	mov	r4, r0
 800a06c:	f7ff fff0 	bl	800a050 <__sfp_lock_acquire>
 800a070:	6a23      	ldr	r3, [r4, #32]
 800a072:	b11b      	cbz	r3, 800a07c <__sinit+0x14>
 800a074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a078:	f7ff bff0 	b.w	800a05c <__sfp_lock_release>
 800a07c:	4b04      	ldr	r3, [pc, #16]	@ (800a090 <__sinit+0x28>)
 800a07e:	6223      	str	r3, [r4, #32]
 800a080:	4b04      	ldr	r3, [pc, #16]	@ (800a094 <__sinit+0x2c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1f5      	bne.n	800a074 <__sinit+0xc>
 800a088:	f7ff ffc4 	bl	800a014 <global_stdio_init.part.0>
 800a08c:	e7f2      	b.n	800a074 <__sinit+0xc>
 800a08e:	bf00      	nop
 800a090:	08009fd5 	.word	0x08009fd5
 800a094:	20000cc0 	.word	0x20000cc0

0800a098 <_fwalk_sglue>:
 800a098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a09c:	4607      	mov	r7, r0
 800a09e:	4688      	mov	r8, r1
 800a0a0:	4614      	mov	r4, r2
 800a0a2:	2600      	movs	r6, #0
 800a0a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0a8:	f1b9 0901 	subs.w	r9, r9, #1
 800a0ac:	d505      	bpl.n	800a0ba <_fwalk_sglue+0x22>
 800a0ae:	6824      	ldr	r4, [r4, #0]
 800a0b0:	2c00      	cmp	r4, #0
 800a0b2:	d1f7      	bne.n	800a0a4 <_fwalk_sglue+0xc>
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ba:	89ab      	ldrh	r3, [r5, #12]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d907      	bls.n	800a0d0 <_fwalk_sglue+0x38>
 800a0c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	d003      	beq.n	800a0d0 <_fwalk_sglue+0x38>
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	47c0      	blx	r8
 800a0ce:	4306      	orrs	r6, r0
 800a0d0:	3568      	adds	r5, #104	@ 0x68
 800a0d2:	e7e9      	b.n	800a0a8 <_fwalk_sglue+0x10>

0800a0d4 <sniprintf>:
 800a0d4:	b40c      	push	{r2, r3}
 800a0d6:	b530      	push	{r4, r5, lr}
 800a0d8:	4b18      	ldr	r3, [pc, #96]	@ (800a13c <sniprintf+0x68>)
 800a0da:	1e0c      	subs	r4, r1, #0
 800a0dc:	681d      	ldr	r5, [r3, #0]
 800a0de:	b09d      	sub	sp, #116	@ 0x74
 800a0e0:	da08      	bge.n	800a0f4 <sniprintf+0x20>
 800a0e2:	238b      	movs	r3, #139	@ 0x8b
 800a0e4:	602b      	str	r3, [r5, #0]
 800a0e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0ea:	b01d      	add	sp, #116	@ 0x74
 800a0ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0f0:	b002      	add	sp, #8
 800a0f2:	4770      	bx	lr
 800a0f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a0f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a0fc:	f04f 0300 	mov.w	r3, #0
 800a100:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a102:	bf14      	ite	ne
 800a104:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a108:	4623      	moveq	r3, r4
 800a10a:	9304      	str	r3, [sp, #16]
 800a10c:	9307      	str	r3, [sp, #28]
 800a10e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a112:	9002      	str	r0, [sp, #8]
 800a114:	9006      	str	r0, [sp, #24]
 800a116:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a11a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a11c:	ab21      	add	r3, sp, #132	@ 0x84
 800a11e:	a902      	add	r1, sp, #8
 800a120:	4628      	mov	r0, r5
 800a122:	9301      	str	r3, [sp, #4]
 800a124:	f001 fc0e 	bl	800b944 <_svfiprintf_r>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	bfbc      	itt	lt
 800a12c:	238b      	movlt	r3, #139	@ 0x8b
 800a12e:	602b      	strlt	r3, [r5, #0]
 800a130:	2c00      	cmp	r4, #0
 800a132:	d0da      	beq.n	800a0ea <sniprintf+0x16>
 800a134:	9b02      	ldr	r3, [sp, #8]
 800a136:	2200      	movs	r2, #0
 800a138:	701a      	strb	r2, [r3, #0]
 800a13a:	e7d6      	b.n	800a0ea <sniprintf+0x16>
 800a13c:	200003d4 	.word	0x200003d4

0800a140 <__sread>:
 800a140:	b510      	push	{r4, lr}
 800a142:	460c      	mov	r4, r1
 800a144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a148:	f000 f86c 	bl	800a224 <_read_r>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	bfab      	itete	ge
 800a150:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a152:	89a3      	ldrhlt	r3, [r4, #12]
 800a154:	181b      	addge	r3, r3, r0
 800a156:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a15a:	bfac      	ite	ge
 800a15c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a15e:	81a3      	strhlt	r3, [r4, #12]
 800a160:	bd10      	pop	{r4, pc}

0800a162 <__swrite>:
 800a162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a166:	461f      	mov	r7, r3
 800a168:	898b      	ldrh	r3, [r1, #12]
 800a16a:	05db      	lsls	r3, r3, #23
 800a16c:	4605      	mov	r5, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	4616      	mov	r6, r2
 800a172:	d505      	bpl.n	800a180 <__swrite+0x1e>
 800a174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a178:	2302      	movs	r3, #2
 800a17a:	2200      	movs	r2, #0
 800a17c:	f000 f840 	bl	800a200 <_lseek_r>
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a186:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a18a:	81a3      	strh	r3, [r4, #12]
 800a18c:	4632      	mov	r2, r6
 800a18e:	463b      	mov	r3, r7
 800a190:	4628      	mov	r0, r5
 800a192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a196:	f000 b857 	b.w	800a248 <_write_r>

0800a19a <__sseek>:
 800a19a:	b510      	push	{r4, lr}
 800a19c:	460c      	mov	r4, r1
 800a19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a2:	f000 f82d 	bl	800a200 <_lseek_r>
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	bf15      	itete	ne
 800a1ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a1ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a1b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a1b6:	81a3      	strheq	r3, [r4, #12]
 800a1b8:	bf18      	it	ne
 800a1ba:	81a3      	strhne	r3, [r4, #12]
 800a1bc:	bd10      	pop	{r4, pc}

0800a1be <__sclose>:
 800a1be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c2:	f000 b80d 	b.w	800a1e0 <_close_r>

0800a1c6 <memset>:
 800a1c6:	4402      	add	r2, r0
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d100      	bne.n	800a1d0 <memset+0xa>
 800a1ce:	4770      	bx	lr
 800a1d0:	f803 1b01 	strb.w	r1, [r3], #1
 800a1d4:	e7f9      	b.n	800a1ca <memset+0x4>
	...

0800a1d8 <_localeconv_r>:
 800a1d8:	4800      	ldr	r0, [pc, #0]	@ (800a1dc <_localeconv_r+0x4>)
 800a1da:	4770      	bx	lr
 800a1dc:	20000514 	.word	0x20000514

0800a1e0 <_close_r>:
 800a1e0:	b538      	push	{r3, r4, r5, lr}
 800a1e2:	4d06      	ldr	r5, [pc, #24]	@ (800a1fc <_close_r+0x1c>)
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	4608      	mov	r0, r1
 800a1ea:	602b      	str	r3, [r5, #0]
 800a1ec:	f7f7 fc7e 	bl	8001aec <_close>
 800a1f0:	1c43      	adds	r3, r0, #1
 800a1f2:	d102      	bne.n	800a1fa <_close_r+0x1a>
 800a1f4:	682b      	ldr	r3, [r5, #0]
 800a1f6:	b103      	cbz	r3, 800a1fa <_close_r+0x1a>
 800a1f8:	6023      	str	r3, [r4, #0]
 800a1fa:	bd38      	pop	{r3, r4, r5, pc}
 800a1fc:	20000cc4 	.word	0x20000cc4

0800a200 <_lseek_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	4d07      	ldr	r5, [pc, #28]	@ (800a220 <_lseek_r+0x20>)
 800a204:	4604      	mov	r4, r0
 800a206:	4608      	mov	r0, r1
 800a208:	4611      	mov	r1, r2
 800a20a:	2200      	movs	r2, #0
 800a20c:	602a      	str	r2, [r5, #0]
 800a20e:	461a      	mov	r2, r3
 800a210:	f7f7 fc93 	bl	8001b3a <_lseek>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d102      	bne.n	800a21e <_lseek_r+0x1e>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	b103      	cbz	r3, 800a21e <_lseek_r+0x1e>
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	20000cc4 	.word	0x20000cc4

0800a224 <_read_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4d07      	ldr	r5, [pc, #28]	@ (800a244 <_read_r+0x20>)
 800a228:	4604      	mov	r4, r0
 800a22a:	4608      	mov	r0, r1
 800a22c:	4611      	mov	r1, r2
 800a22e:	2200      	movs	r2, #0
 800a230:	602a      	str	r2, [r5, #0]
 800a232:	461a      	mov	r2, r3
 800a234:	f7f7 fc21 	bl	8001a7a <_read>
 800a238:	1c43      	adds	r3, r0, #1
 800a23a:	d102      	bne.n	800a242 <_read_r+0x1e>
 800a23c:	682b      	ldr	r3, [r5, #0]
 800a23e:	b103      	cbz	r3, 800a242 <_read_r+0x1e>
 800a240:	6023      	str	r3, [r4, #0]
 800a242:	bd38      	pop	{r3, r4, r5, pc}
 800a244:	20000cc4 	.word	0x20000cc4

0800a248 <_write_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4d07      	ldr	r5, [pc, #28]	@ (800a268 <_write_r+0x20>)
 800a24c:	4604      	mov	r4, r0
 800a24e:	4608      	mov	r0, r1
 800a250:	4611      	mov	r1, r2
 800a252:	2200      	movs	r2, #0
 800a254:	602a      	str	r2, [r5, #0]
 800a256:	461a      	mov	r2, r3
 800a258:	f7f7 fc2c 	bl	8001ab4 <_write>
 800a25c:	1c43      	adds	r3, r0, #1
 800a25e:	d102      	bne.n	800a266 <_write_r+0x1e>
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	b103      	cbz	r3, 800a266 <_write_r+0x1e>
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	bd38      	pop	{r3, r4, r5, pc}
 800a268:	20000cc4 	.word	0x20000cc4

0800a26c <__errno>:
 800a26c:	4b01      	ldr	r3, [pc, #4]	@ (800a274 <__errno+0x8>)
 800a26e:	6818      	ldr	r0, [r3, #0]
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	200003d4 	.word	0x200003d4

0800a278 <__libc_init_array>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	4d0d      	ldr	r5, [pc, #52]	@ (800a2b0 <__libc_init_array+0x38>)
 800a27c:	4c0d      	ldr	r4, [pc, #52]	@ (800a2b4 <__libc_init_array+0x3c>)
 800a27e:	1b64      	subs	r4, r4, r5
 800a280:	10a4      	asrs	r4, r4, #2
 800a282:	2600      	movs	r6, #0
 800a284:	42a6      	cmp	r6, r4
 800a286:	d109      	bne.n	800a29c <__libc_init_array+0x24>
 800a288:	4d0b      	ldr	r5, [pc, #44]	@ (800a2b8 <__libc_init_array+0x40>)
 800a28a:	4c0c      	ldr	r4, [pc, #48]	@ (800a2bc <__libc_init_array+0x44>)
 800a28c:	f002 f9e8 	bl	800c660 <_init>
 800a290:	1b64      	subs	r4, r4, r5
 800a292:	10a4      	asrs	r4, r4, #2
 800a294:	2600      	movs	r6, #0
 800a296:	42a6      	cmp	r6, r4
 800a298:	d105      	bne.n	800a2a6 <__libc_init_array+0x2e>
 800a29a:	bd70      	pop	{r4, r5, r6, pc}
 800a29c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2a0:	4798      	blx	r3
 800a2a2:	3601      	adds	r6, #1
 800a2a4:	e7ee      	b.n	800a284 <__libc_init_array+0xc>
 800a2a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2aa:	4798      	blx	r3
 800a2ac:	3601      	adds	r6, #1
 800a2ae:	e7f2      	b.n	800a296 <__libc_init_array+0x1e>
 800a2b0:	0800cb24 	.word	0x0800cb24
 800a2b4:	0800cb24 	.word	0x0800cb24
 800a2b8:	0800cb24 	.word	0x0800cb24
 800a2bc:	0800cb28 	.word	0x0800cb28

0800a2c0 <__retarget_lock_init_recursive>:
 800a2c0:	4770      	bx	lr

0800a2c2 <__retarget_lock_acquire_recursive>:
 800a2c2:	4770      	bx	lr

0800a2c4 <__retarget_lock_release_recursive>:
 800a2c4:	4770      	bx	lr

0800a2c6 <memcpy>:
 800a2c6:	440a      	add	r2, r1
 800a2c8:	4291      	cmp	r1, r2
 800a2ca:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a2ce:	d100      	bne.n	800a2d2 <memcpy+0xc>
 800a2d0:	4770      	bx	lr
 800a2d2:	b510      	push	{r4, lr}
 800a2d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2dc:	4291      	cmp	r1, r2
 800a2de:	d1f9      	bne.n	800a2d4 <memcpy+0xe>
 800a2e0:	bd10      	pop	{r4, pc}

0800a2e2 <quorem>:
 800a2e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e6:	6903      	ldr	r3, [r0, #16]
 800a2e8:	690c      	ldr	r4, [r1, #16]
 800a2ea:	42a3      	cmp	r3, r4
 800a2ec:	4607      	mov	r7, r0
 800a2ee:	db7e      	blt.n	800a3ee <quorem+0x10c>
 800a2f0:	3c01      	subs	r4, #1
 800a2f2:	f101 0814 	add.w	r8, r1, #20
 800a2f6:	00a3      	lsls	r3, r4, #2
 800a2f8:	f100 0514 	add.w	r5, r0, #20
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a308:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a30c:	3301      	adds	r3, #1
 800a30e:	429a      	cmp	r2, r3
 800a310:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a314:	fbb2 f6f3 	udiv	r6, r2, r3
 800a318:	d32e      	bcc.n	800a378 <quorem+0x96>
 800a31a:	f04f 0a00 	mov.w	sl, #0
 800a31e:	46c4      	mov	ip, r8
 800a320:	46ae      	mov	lr, r5
 800a322:	46d3      	mov	fp, sl
 800a324:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a328:	b298      	uxth	r0, r3
 800a32a:	fb06 a000 	mla	r0, r6, r0, sl
 800a32e:	0c02      	lsrs	r2, r0, #16
 800a330:	0c1b      	lsrs	r3, r3, #16
 800a332:	fb06 2303 	mla	r3, r6, r3, r2
 800a336:	f8de 2000 	ldr.w	r2, [lr]
 800a33a:	b280      	uxth	r0, r0
 800a33c:	b292      	uxth	r2, r2
 800a33e:	1a12      	subs	r2, r2, r0
 800a340:	445a      	add	r2, fp
 800a342:	f8de 0000 	ldr.w	r0, [lr]
 800a346:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a350:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a354:	b292      	uxth	r2, r2
 800a356:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a35a:	45e1      	cmp	r9, ip
 800a35c:	f84e 2b04 	str.w	r2, [lr], #4
 800a360:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a364:	d2de      	bcs.n	800a324 <quorem+0x42>
 800a366:	9b00      	ldr	r3, [sp, #0]
 800a368:	58eb      	ldr	r3, [r5, r3]
 800a36a:	b92b      	cbnz	r3, 800a378 <quorem+0x96>
 800a36c:	9b01      	ldr	r3, [sp, #4]
 800a36e:	3b04      	subs	r3, #4
 800a370:	429d      	cmp	r5, r3
 800a372:	461a      	mov	r2, r3
 800a374:	d32f      	bcc.n	800a3d6 <quorem+0xf4>
 800a376:	613c      	str	r4, [r7, #16]
 800a378:	4638      	mov	r0, r7
 800a37a:	f001 f97f 	bl	800b67c <__mcmp>
 800a37e:	2800      	cmp	r0, #0
 800a380:	db25      	blt.n	800a3ce <quorem+0xec>
 800a382:	4629      	mov	r1, r5
 800a384:	2000      	movs	r0, #0
 800a386:	f858 2b04 	ldr.w	r2, [r8], #4
 800a38a:	f8d1 c000 	ldr.w	ip, [r1]
 800a38e:	fa1f fe82 	uxth.w	lr, r2
 800a392:	fa1f f38c 	uxth.w	r3, ip
 800a396:	eba3 030e 	sub.w	r3, r3, lr
 800a39a:	4403      	add	r3, r0
 800a39c:	0c12      	lsrs	r2, r2, #16
 800a39e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a3a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3ac:	45c1      	cmp	r9, r8
 800a3ae:	f841 3b04 	str.w	r3, [r1], #4
 800a3b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a3b6:	d2e6      	bcs.n	800a386 <quorem+0xa4>
 800a3b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3c0:	b922      	cbnz	r2, 800a3cc <quorem+0xea>
 800a3c2:	3b04      	subs	r3, #4
 800a3c4:	429d      	cmp	r5, r3
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	d30b      	bcc.n	800a3e2 <quorem+0x100>
 800a3ca:	613c      	str	r4, [r7, #16]
 800a3cc:	3601      	adds	r6, #1
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	b003      	add	sp, #12
 800a3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d6:	6812      	ldr	r2, [r2, #0]
 800a3d8:	3b04      	subs	r3, #4
 800a3da:	2a00      	cmp	r2, #0
 800a3dc:	d1cb      	bne.n	800a376 <quorem+0x94>
 800a3de:	3c01      	subs	r4, #1
 800a3e0:	e7c6      	b.n	800a370 <quorem+0x8e>
 800a3e2:	6812      	ldr	r2, [r2, #0]
 800a3e4:	3b04      	subs	r3, #4
 800a3e6:	2a00      	cmp	r2, #0
 800a3e8:	d1ef      	bne.n	800a3ca <quorem+0xe8>
 800a3ea:	3c01      	subs	r4, #1
 800a3ec:	e7ea      	b.n	800a3c4 <quorem+0xe2>
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	e7ee      	b.n	800a3d0 <quorem+0xee>
 800a3f2:	0000      	movs	r0, r0
 800a3f4:	0000      	movs	r0, r0
	...

0800a3f8 <_dtoa_r>:
 800a3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fc:	69c7      	ldr	r7, [r0, #28]
 800a3fe:	b097      	sub	sp, #92	@ 0x5c
 800a400:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a404:	ec55 4b10 	vmov	r4, r5, d0
 800a408:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a40a:	9107      	str	r1, [sp, #28]
 800a40c:	4681      	mov	r9, r0
 800a40e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a410:	9311      	str	r3, [sp, #68]	@ 0x44
 800a412:	b97f      	cbnz	r7, 800a434 <_dtoa_r+0x3c>
 800a414:	2010      	movs	r0, #16
 800a416:	f000 fe09 	bl	800b02c <malloc>
 800a41a:	4602      	mov	r2, r0
 800a41c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a420:	b920      	cbnz	r0, 800a42c <_dtoa_r+0x34>
 800a422:	4ba9      	ldr	r3, [pc, #676]	@ (800a6c8 <_dtoa_r+0x2d0>)
 800a424:	21ef      	movs	r1, #239	@ 0xef
 800a426:	48a9      	ldr	r0, [pc, #676]	@ (800a6cc <_dtoa_r+0x2d4>)
 800a428:	f001 fc5e 	bl	800bce8 <__assert_func>
 800a42c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a430:	6007      	str	r7, [r0, #0]
 800a432:	60c7      	str	r7, [r0, #12]
 800a434:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a438:	6819      	ldr	r1, [r3, #0]
 800a43a:	b159      	cbz	r1, 800a454 <_dtoa_r+0x5c>
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	604a      	str	r2, [r1, #4]
 800a440:	2301      	movs	r3, #1
 800a442:	4093      	lsls	r3, r2
 800a444:	608b      	str	r3, [r1, #8]
 800a446:	4648      	mov	r0, r9
 800a448:	f000 fee6 	bl	800b218 <_Bfree>
 800a44c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a450:	2200      	movs	r2, #0
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	1e2b      	subs	r3, r5, #0
 800a456:	bfb9      	ittee	lt
 800a458:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a45c:	9305      	strlt	r3, [sp, #20]
 800a45e:	2300      	movge	r3, #0
 800a460:	6033      	strge	r3, [r6, #0]
 800a462:	9f05      	ldr	r7, [sp, #20]
 800a464:	4b9a      	ldr	r3, [pc, #616]	@ (800a6d0 <_dtoa_r+0x2d8>)
 800a466:	bfbc      	itt	lt
 800a468:	2201      	movlt	r2, #1
 800a46a:	6032      	strlt	r2, [r6, #0]
 800a46c:	43bb      	bics	r3, r7
 800a46e:	d112      	bne.n	800a496 <_dtoa_r+0x9e>
 800a470:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a472:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a47c:	4323      	orrs	r3, r4
 800a47e:	f000 855a 	beq.w	800af36 <_dtoa_r+0xb3e>
 800a482:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a484:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a6e4 <_dtoa_r+0x2ec>
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 855c 	beq.w	800af46 <_dtoa_r+0xb4e>
 800a48e:	f10a 0303 	add.w	r3, sl, #3
 800a492:	f000 bd56 	b.w	800af42 <_dtoa_r+0xb4a>
 800a496:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a49a:	2200      	movs	r2, #0
 800a49c:	ec51 0b17 	vmov	r0, r1, d7
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a4a6:	f7f6 fb3f 	bl	8000b28 <__aeabi_dcmpeq>
 800a4aa:	4680      	mov	r8, r0
 800a4ac:	b158      	cbz	r0, 800a4c6 <_dtoa_r+0xce>
 800a4ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	6013      	str	r3, [r2, #0]
 800a4b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a4b6:	b113      	cbz	r3, 800a4be <_dtoa_r+0xc6>
 800a4b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a4ba:	4b86      	ldr	r3, [pc, #536]	@ (800a6d4 <_dtoa_r+0x2dc>)
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a6e8 <_dtoa_r+0x2f0>
 800a4c2:	f000 bd40 	b.w	800af46 <_dtoa_r+0xb4e>
 800a4c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a4ca:	aa14      	add	r2, sp, #80	@ 0x50
 800a4cc:	a915      	add	r1, sp, #84	@ 0x54
 800a4ce:	4648      	mov	r0, r9
 800a4d0:	f001 f984 	bl	800b7dc <__d2b>
 800a4d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a4d8:	9002      	str	r0, [sp, #8]
 800a4da:	2e00      	cmp	r6, #0
 800a4dc:	d078      	beq.n	800a5d0 <_dtoa_r+0x1d8>
 800a4de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a4e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a4ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a4f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a4f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	4b76      	ldr	r3, [pc, #472]	@ (800a6d8 <_dtoa_r+0x2e0>)
 800a4fe:	f7f5 fef3 	bl	80002e8 <__aeabi_dsub>
 800a502:	a36b      	add	r3, pc, #428	@ (adr r3, 800a6b0 <_dtoa_r+0x2b8>)
 800a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a508:	f7f6 f8a6 	bl	8000658 <__aeabi_dmul>
 800a50c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a6b8 <_dtoa_r+0x2c0>)
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	f7f5 feeb 	bl	80002ec <__adddf3>
 800a516:	4604      	mov	r4, r0
 800a518:	4630      	mov	r0, r6
 800a51a:	460d      	mov	r5, r1
 800a51c:	f7f6 f832 	bl	8000584 <__aeabi_i2d>
 800a520:	a367      	add	r3, pc, #412	@ (adr r3, 800a6c0 <_dtoa_r+0x2c8>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f7f6 f897 	bl	8000658 <__aeabi_dmul>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	4620      	mov	r0, r4
 800a530:	4629      	mov	r1, r5
 800a532:	f7f5 fedb 	bl	80002ec <__adddf3>
 800a536:	4604      	mov	r4, r0
 800a538:	460d      	mov	r5, r1
 800a53a:	f7f6 fb3d 	bl	8000bb8 <__aeabi_d2iz>
 800a53e:	2200      	movs	r2, #0
 800a540:	4607      	mov	r7, r0
 800a542:	2300      	movs	r3, #0
 800a544:	4620      	mov	r0, r4
 800a546:	4629      	mov	r1, r5
 800a548:	f7f6 faf8 	bl	8000b3c <__aeabi_dcmplt>
 800a54c:	b140      	cbz	r0, 800a560 <_dtoa_r+0x168>
 800a54e:	4638      	mov	r0, r7
 800a550:	f7f6 f818 	bl	8000584 <__aeabi_i2d>
 800a554:	4622      	mov	r2, r4
 800a556:	462b      	mov	r3, r5
 800a558:	f7f6 fae6 	bl	8000b28 <__aeabi_dcmpeq>
 800a55c:	b900      	cbnz	r0, 800a560 <_dtoa_r+0x168>
 800a55e:	3f01      	subs	r7, #1
 800a560:	2f16      	cmp	r7, #22
 800a562:	d852      	bhi.n	800a60a <_dtoa_r+0x212>
 800a564:	4b5d      	ldr	r3, [pc, #372]	@ (800a6dc <_dtoa_r+0x2e4>)
 800a566:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a572:	f7f6 fae3 	bl	8000b3c <__aeabi_dcmplt>
 800a576:	2800      	cmp	r0, #0
 800a578:	d049      	beq.n	800a60e <_dtoa_r+0x216>
 800a57a:	3f01      	subs	r7, #1
 800a57c:	2300      	movs	r3, #0
 800a57e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a580:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a582:	1b9b      	subs	r3, r3, r6
 800a584:	1e5a      	subs	r2, r3, #1
 800a586:	bf45      	ittet	mi
 800a588:	f1c3 0301 	rsbmi	r3, r3, #1
 800a58c:	9300      	strmi	r3, [sp, #0]
 800a58e:	2300      	movpl	r3, #0
 800a590:	2300      	movmi	r3, #0
 800a592:	9206      	str	r2, [sp, #24]
 800a594:	bf54      	ite	pl
 800a596:	9300      	strpl	r3, [sp, #0]
 800a598:	9306      	strmi	r3, [sp, #24]
 800a59a:	2f00      	cmp	r7, #0
 800a59c:	db39      	blt.n	800a612 <_dtoa_r+0x21a>
 800a59e:	9b06      	ldr	r3, [sp, #24]
 800a5a0:	970d      	str	r7, [sp, #52]	@ 0x34
 800a5a2:	443b      	add	r3, r7
 800a5a4:	9306      	str	r3, [sp, #24]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	9308      	str	r3, [sp, #32]
 800a5aa:	9b07      	ldr	r3, [sp, #28]
 800a5ac:	2b09      	cmp	r3, #9
 800a5ae:	d863      	bhi.n	800a678 <_dtoa_r+0x280>
 800a5b0:	2b05      	cmp	r3, #5
 800a5b2:	bfc4      	itt	gt
 800a5b4:	3b04      	subgt	r3, #4
 800a5b6:	9307      	strgt	r3, [sp, #28]
 800a5b8:	9b07      	ldr	r3, [sp, #28]
 800a5ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a5be:	bfcc      	ite	gt
 800a5c0:	2400      	movgt	r4, #0
 800a5c2:	2401      	movle	r4, #1
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	d863      	bhi.n	800a690 <_dtoa_r+0x298>
 800a5c8:	e8df f003 	tbb	[pc, r3]
 800a5cc:	2b375452 	.word	0x2b375452
 800a5d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a5d4:	441e      	add	r6, r3
 800a5d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a5da:	2b20      	cmp	r3, #32
 800a5dc:	bfc1      	itttt	gt
 800a5de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a5e2:	409f      	lslgt	r7, r3
 800a5e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a5e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a5ec:	bfd6      	itet	le
 800a5ee:	f1c3 0320 	rsble	r3, r3, #32
 800a5f2:	ea47 0003 	orrgt.w	r0, r7, r3
 800a5f6:	fa04 f003 	lslle.w	r0, r4, r3
 800a5fa:	f7f5 ffb3 	bl	8000564 <__aeabi_ui2d>
 800a5fe:	2201      	movs	r2, #1
 800a600:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a604:	3e01      	subs	r6, #1
 800a606:	9212      	str	r2, [sp, #72]	@ 0x48
 800a608:	e776      	b.n	800a4f8 <_dtoa_r+0x100>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e7b7      	b.n	800a57e <_dtoa_r+0x186>
 800a60e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a610:	e7b6      	b.n	800a580 <_dtoa_r+0x188>
 800a612:	9b00      	ldr	r3, [sp, #0]
 800a614:	1bdb      	subs	r3, r3, r7
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	427b      	negs	r3, r7
 800a61a:	9308      	str	r3, [sp, #32]
 800a61c:	2300      	movs	r3, #0
 800a61e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a620:	e7c3      	b.n	800a5aa <_dtoa_r+0x1b2>
 800a622:	2301      	movs	r3, #1
 800a624:	9309      	str	r3, [sp, #36]	@ 0x24
 800a626:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a628:	eb07 0b03 	add.w	fp, r7, r3
 800a62c:	f10b 0301 	add.w	r3, fp, #1
 800a630:	2b01      	cmp	r3, #1
 800a632:	9303      	str	r3, [sp, #12]
 800a634:	bfb8      	it	lt
 800a636:	2301      	movlt	r3, #1
 800a638:	e006      	b.n	800a648 <_dtoa_r+0x250>
 800a63a:	2301      	movs	r3, #1
 800a63c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a63e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a640:	2b00      	cmp	r3, #0
 800a642:	dd28      	ble.n	800a696 <_dtoa_r+0x29e>
 800a644:	469b      	mov	fp, r3
 800a646:	9303      	str	r3, [sp, #12]
 800a648:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a64c:	2100      	movs	r1, #0
 800a64e:	2204      	movs	r2, #4
 800a650:	f102 0514 	add.w	r5, r2, #20
 800a654:	429d      	cmp	r5, r3
 800a656:	d926      	bls.n	800a6a6 <_dtoa_r+0x2ae>
 800a658:	6041      	str	r1, [r0, #4]
 800a65a:	4648      	mov	r0, r9
 800a65c:	f000 fd9c 	bl	800b198 <_Balloc>
 800a660:	4682      	mov	sl, r0
 800a662:	2800      	cmp	r0, #0
 800a664:	d142      	bne.n	800a6ec <_dtoa_r+0x2f4>
 800a666:	4b1e      	ldr	r3, [pc, #120]	@ (800a6e0 <_dtoa_r+0x2e8>)
 800a668:	4602      	mov	r2, r0
 800a66a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a66e:	e6da      	b.n	800a426 <_dtoa_r+0x2e>
 800a670:	2300      	movs	r3, #0
 800a672:	e7e3      	b.n	800a63c <_dtoa_r+0x244>
 800a674:	2300      	movs	r3, #0
 800a676:	e7d5      	b.n	800a624 <_dtoa_r+0x22c>
 800a678:	2401      	movs	r4, #1
 800a67a:	2300      	movs	r3, #0
 800a67c:	9307      	str	r3, [sp, #28]
 800a67e:	9409      	str	r4, [sp, #36]	@ 0x24
 800a680:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800a684:	2200      	movs	r2, #0
 800a686:	f8cd b00c 	str.w	fp, [sp, #12]
 800a68a:	2312      	movs	r3, #18
 800a68c:	920c      	str	r2, [sp, #48]	@ 0x30
 800a68e:	e7db      	b.n	800a648 <_dtoa_r+0x250>
 800a690:	2301      	movs	r3, #1
 800a692:	9309      	str	r3, [sp, #36]	@ 0x24
 800a694:	e7f4      	b.n	800a680 <_dtoa_r+0x288>
 800a696:	f04f 0b01 	mov.w	fp, #1
 800a69a:	f8cd b00c 	str.w	fp, [sp, #12]
 800a69e:	465b      	mov	r3, fp
 800a6a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a6a4:	e7d0      	b.n	800a648 <_dtoa_r+0x250>
 800a6a6:	3101      	adds	r1, #1
 800a6a8:	0052      	lsls	r2, r2, #1
 800a6aa:	e7d1      	b.n	800a650 <_dtoa_r+0x258>
 800a6ac:	f3af 8000 	nop.w
 800a6b0:	636f4361 	.word	0x636f4361
 800a6b4:	3fd287a7 	.word	0x3fd287a7
 800a6b8:	8b60c8b3 	.word	0x8b60c8b3
 800a6bc:	3fc68a28 	.word	0x3fc68a28
 800a6c0:	509f79fb 	.word	0x509f79fb
 800a6c4:	3fd34413 	.word	0x3fd34413
 800a6c8:	0800c7b1 	.word	0x0800c7b1
 800a6cc:	0800c7c8 	.word	0x0800c7c8
 800a6d0:	7ff00000 	.word	0x7ff00000
 800a6d4:	0800c781 	.word	0x0800c781
 800a6d8:	3ff80000 	.word	0x3ff80000
 800a6dc:	0800c918 	.word	0x0800c918
 800a6e0:	0800c820 	.word	0x0800c820
 800a6e4:	0800c7ad 	.word	0x0800c7ad
 800a6e8:	0800c780 	.word	0x0800c780
 800a6ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6f0:	6018      	str	r0, [r3, #0]
 800a6f2:	9b03      	ldr	r3, [sp, #12]
 800a6f4:	2b0e      	cmp	r3, #14
 800a6f6:	f200 80a1 	bhi.w	800a83c <_dtoa_r+0x444>
 800a6fa:	2c00      	cmp	r4, #0
 800a6fc:	f000 809e 	beq.w	800a83c <_dtoa_r+0x444>
 800a700:	2f00      	cmp	r7, #0
 800a702:	dd33      	ble.n	800a76c <_dtoa_r+0x374>
 800a704:	4b9c      	ldr	r3, [pc, #624]	@ (800a978 <_dtoa_r+0x580>)
 800a706:	f007 020f 	and.w	r2, r7, #15
 800a70a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a70e:	ed93 7b00 	vldr	d7, [r3]
 800a712:	05f8      	lsls	r0, r7, #23
 800a714:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a718:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a71c:	d516      	bpl.n	800a74c <_dtoa_r+0x354>
 800a71e:	4b97      	ldr	r3, [pc, #604]	@ (800a97c <_dtoa_r+0x584>)
 800a720:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a724:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a728:	f7f6 f8c0 	bl	80008ac <__aeabi_ddiv>
 800a72c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a730:	f004 040f 	and.w	r4, r4, #15
 800a734:	2603      	movs	r6, #3
 800a736:	4d91      	ldr	r5, [pc, #580]	@ (800a97c <_dtoa_r+0x584>)
 800a738:	b954      	cbnz	r4, 800a750 <_dtoa_r+0x358>
 800a73a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a73e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a742:	f7f6 f8b3 	bl	80008ac <__aeabi_ddiv>
 800a746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a74a:	e028      	b.n	800a79e <_dtoa_r+0x3a6>
 800a74c:	2602      	movs	r6, #2
 800a74e:	e7f2      	b.n	800a736 <_dtoa_r+0x33e>
 800a750:	07e1      	lsls	r1, r4, #31
 800a752:	d508      	bpl.n	800a766 <_dtoa_r+0x36e>
 800a754:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a758:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a75c:	f7f5 ff7c 	bl	8000658 <__aeabi_dmul>
 800a760:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a764:	3601      	adds	r6, #1
 800a766:	1064      	asrs	r4, r4, #1
 800a768:	3508      	adds	r5, #8
 800a76a:	e7e5      	b.n	800a738 <_dtoa_r+0x340>
 800a76c:	f000 80af 	beq.w	800a8ce <_dtoa_r+0x4d6>
 800a770:	427c      	negs	r4, r7
 800a772:	4b81      	ldr	r3, [pc, #516]	@ (800a978 <_dtoa_r+0x580>)
 800a774:	4d81      	ldr	r5, [pc, #516]	@ (800a97c <_dtoa_r+0x584>)
 800a776:	f004 020f 	and.w	r2, r4, #15
 800a77a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a786:	f7f5 ff67 	bl	8000658 <__aeabi_dmul>
 800a78a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a78e:	1124      	asrs	r4, r4, #4
 800a790:	2300      	movs	r3, #0
 800a792:	2602      	movs	r6, #2
 800a794:	2c00      	cmp	r4, #0
 800a796:	f040 808f 	bne.w	800a8b8 <_dtoa_r+0x4c0>
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1d3      	bne.n	800a746 <_dtoa_r+0x34e>
 800a79e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a7a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 8094 	beq.w	800a8d2 <_dtoa_r+0x4da>
 800a7aa:	4b75      	ldr	r3, [pc, #468]	@ (800a980 <_dtoa_r+0x588>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	f7f6 f9c3 	bl	8000b3c <__aeabi_dcmplt>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	f000 808b 	beq.w	800a8d2 <_dtoa_r+0x4da>
 800a7bc:	9b03      	ldr	r3, [sp, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f000 8087 	beq.w	800a8d2 <_dtoa_r+0x4da>
 800a7c4:	f1bb 0f00 	cmp.w	fp, #0
 800a7c8:	dd34      	ble.n	800a834 <_dtoa_r+0x43c>
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	4b6d      	ldr	r3, [pc, #436]	@ (800a984 <_dtoa_r+0x58c>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	f7f5 ff41 	bl	8000658 <__aeabi_dmul>
 800a7d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7da:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a7de:	3601      	adds	r6, #1
 800a7e0:	465c      	mov	r4, fp
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f7f5 fece 	bl	8000584 <__aeabi_i2d>
 800a7e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7ec:	f7f5 ff34 	bl	8000658 <__aeabi_dmul>
 800a7f0:	4b65      	ldr	r3, [pc, #404]	@ (800a988 <_dtoa_r+0x590>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f7f5 fd7a 	bl	80002ec <__adddf3>
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a7fe:	2c00      	cmp	r4, #0
 800a800:	d16a      	bne.n	800a8d8 <_dtoa_r+0x4e0>
 800a802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a806:	4b61      	ldr	r3, [pc, #388]	@ (800a98c <_dtoa_r+0x594>)
 800a808:	2200      	movs	r2, #0
 800a80a:	f7f5 fd6d 	bl	80002e8 <__aeabi_dsub>
 800a80e:	4602      	mov	r2, r0
 800a810:	460b      	mov	r3, r1
 800a812:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a816:	462a      	mov	r2, r5
 800a818:	4633      	mov	r3, r6
 800a81a:	f7f6 f9ad 	bl	8000b78 <__aeabi_dcmpgt>
 800a81e:	2800      	cmp	r0, #0
 800a820:	f040 8298 	bne.w	800ad54 <_dtoa_r+0x95c>
 800a824:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a828:	462a      	mov	r2, r5
 800a82a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a82e:	f7f6 f985 	bl	8000b3c <__aeabi_dcmplt>
 800a832:	bb38      	cbnz	r0, 800a884 <_dtoa_r+0x48c>
 800a834:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a838:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a83c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f2c0 8157 	blt.w	800aaf2 <_dtoa_r+0x6fa>
 800a844:	2f0e      	cmp	r7, #14
 800a846:	f300 8154 	bgt.w	800aaf2 <_dtoa_r+0x6fa>
 800a84a:	4b4b      	ldr	r3, [pc, #300]	@ (800a978 <_dtoa_r+0x580>)
 800a84c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a850:	ed93 7b00 	vldr	d7, [r3]
 800a854:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a856:	2b00      	cmp	r3, #0
 800a858:	ed8d 7b00 	vstr	d7, [sp]
 800a85c:	f280 80e5 	bge.w	800aa2a <_dtoa_r+0x632>
 800a860:	9b03      	ldr	r3, [sp, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	f300 80e1 	bgt.w	800aa2a <_dtoa_r+0x632>
 800a868:	d10c      	bne.n	800a884 <_dtoa_r+0x48c>
 800a86a:	4b48      	ldr	r3, [pc, #288]	@ (800a98c <_dtoa_r+0x594>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	ec51 0b17 	vmov	r0, r1, d7
 800a872:	f7f5 fef1 	bl	8000658 <__aeabi_dmul>
 800a876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a87a:	f7f6 f973 	bl	8000b64 <__aeabi_dcmpge>
 800a87e:	2800      	cmp	r0, #0
 800a880:	f000 8266 	beq.w	800ad50 <_dtoa_r+0x958>
 800a884:	2400      	movs	r4, #0
 800a886:	4625      	mov	r5, r4
 800a888:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a88a:	4656      	mov	r6, sl
 800a88c:	ea6f 0803 	mvn.w	r8, r3
 800a890:	2700      	movs	r7, #0
 800a892:	4621      	mov	r1, r4
 800a894:	4648      	mov	r0, r9
 800a896:	f000 fcbf 	bl	800b218 <_Bfree>
 800a89a:	2d00      	cmp	r5, #0
 800a89c:	f000 80bd 	beq.w	800aa1a <_dtoa_r+0x622>
 800a8a0:	b12f      	cbz	r7, 800a8ae <_dtoa_r+0x4b6>
 800a8a2:	42af      	cmp	r7, r5
 800a8a4:	d003      	beq.n	800a8ae <_dtoa_r+0x4b6>
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	4648      	mov	r0, r9
 800a8aa:	f000 fcb5 	bl	800b218 <_Bfree>
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	4648      	mov	r0, r9
 800a8b2:	f000 fcb1 	bl	800b218 <_Bfree>
 800a8b6:	e0b0      	b.n	800aa1a <_dtoa_r+0x622>
 800a8b8:	07e2      	lsls	r2, r4, #31
 800a8ba:	d505      	bpl.n	800a8c8 <_dtoa_r+0x4d0>
 800a8bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a8c0:	f7f5 feca 	bl	8000658 <__aeabi_dmul>
 800a8c4:	3601      	adds	r6, #1
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	1064      	asrs	r4, r4, #1
 800a8ca:	3508      	adds	r5, #8
 800a8cc:	e762      	b.n	800a794 <_dtoa_r+0x39c>
 800a8ce:	2602      	movs	r6, #2
 800a8d0:	e765      	b.n	800a79e <_dtoa_r+0x3a6>
 800a8d2:	9c03      	ldr	r4, [sp, #12]
 800a8d4:	46b8      	mov	r8, r7
 800a8d6:	e784      	b.n	800a7e2 <_dtoa_r+0x3ea>
 800a8d8:	4b27      	ldr	r3, [pc, #156]	@ (800a978 <_dtoa_r+0x580>)
 800a8da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a8dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8e4:	4454      	add	r4, sl
 800a8e6:	2900      	cmp	r1, #0
 800a8e8:	d054      	beq.n	800a994 <_dtoa_r+0x59c>
 800a8ea:	4929      	ldr	r1, [pc, #164]	@ (800a990 <_dtoa_r+0x598>)
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	f7f5 ffdd 	bl	80008ac <__aeabi_ddiv>
 800a8f2:	4633      	mov	r3, r6
 800a8f4:	462a      	mov	r2, r5
 800a8f6:	f7f5 fcf7 	bl	80002e8 <__aeabi_dsub>
 800a8fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a8fe:	4656      	mov	r6, sl
 800a900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a904:	f7f6 f958 	bl	8000bb8 <__aeabi_d2iz>
 800a908:	4605      	mov	r5, r0
 800a90a:	f7f5 fe3b 	bl	8000584 <__aeabi_i2d>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a916:	f7f5 fce7 	bl	80002e8 <__aeabi_dsub>
 800a91a:	3530      	adds	r5, #48	@ 0x30
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a924:	f806 5b01 	strb.w	r5, [r6], #1
 800a928:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a92c:	f7f6 f906 	bl	8000b3c <__aeabi_dcmplt>
 800a930:	2800      	cmp	r0, #0
 800a932:	d172      	bne.n	800aa1a <_dtoa_r+0x622>
 800a934:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a938:	4911      	ldr	r1, [pc, #68]	@ (800a980 <_dtoa_r+0x588>)
 800a93a:	2000      	movs	r0, #0
 800a93c:	f7f5 fcd4 	bl	80002e8 <__aeabi_dsub>
 800a940:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a944:	f7f6 f8fa 	bl	8000b3c <__aeabi_dcmplt>
 800a948:	2800      	cmp	r0, #0
 800a94a:	f040 80b4 	bne.w	800aab6 <_dtoa_r+0x6be>
 800a94e:	42a6      	cmp	r6, r4
 800a950:	f43f af70 	beq.w	800a834 <_dtoa_r+0x43c>
 800a954:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a958:	4b0a      	ldr	r3, [pc, #40]	@ (800a984 <_dtoa_r+0x58c>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	f7f5 fe7c 	bl	8000658 <__aeabi_dmul>
 800a960:	4b08      	ldr	r3, [pc, #32]	@ (800a984 <_dtoa_r+0x58c>)
 800a962:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a966:	2200      	movs	r2, #0
 800a968:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a96c:	f7f5 fe74 	bl	8000658 <__aeabi_dmul>
 800a970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a974:	e7c4      	b.n	800a900 <_dtoa_r+0x508>
 800a976:	bf00      	nop
 800a978:	0800c918 	.word	0x0800c918
 800a97c:	0800c8f0 	.word	0x0800c8f0
 800a980:	3ff00000 	.word	0x3ff00000
 800a984:	40240000 	.word	0x40240000
 800a988:	401c0000 	.word	0x401c0000
 800a98c:	40140000 	.word	0x40140000
 800a990:	3fe00000 	.word	0x3fe00000
 800a994:	4631      	mov	r1, r6
 800a996:	4628      	mov	r0, r5
 800a998:	f7f5 fe5e 	bl	8000658 <__aeabi_dmul>
 800a99c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a9a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a9a2:	4656      	mov	r6, sl
 800a9a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9a8:	f7f6 f906 	bl	8000bb8 <__aeabi_d2iz>
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	f7f5 fde9 	bl	8000584 <__aeabi_i2d>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9ba:	f7f5 fc95 	bl	80002e8 <__aeabi_dsub>
 800a9be:	3530      	adds	r5, #48	@ 0x30
 800a9c0:	f806 5b01 	strb.w	r5, [r6], #1
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	42a6      	cmp	r6, r4
 800a9ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a9ce:	f04f 0200 	mov.w	r2, #0
 800a9d2:	d124      	bne.n	800aa1e <_dtoa_r+0x626>
 800a9d4:	4baf      	ldr	r3, [pc, #700]	@ (800ac94 <_dtoa_r+0x89c>)
 800a9d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a9da:	f7f5 fc87 	bl	80002ec <__adddf3>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9e6:	f7f6 f8c7 	bl	8000b78 <__aeabi_dcmpgt>
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d163      	bne.n	800aab6 <_dtoa_r+0x6be>
 800a9ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a9f2:	49a8      	ldr	r1, [pc, #672]	@ (800ac94 <_dtoa_r+0x89c>)
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	f7f5 fc77 	bl	80002e8 <__aeabi_dsub>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa02:	f7f6 f89b 	bl	8000b3c <__aeabi_dcmplt>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	f43f af14 	beq.w	800a834 <_dtoa_r+0x43c>
 800aa0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800aa0e:	1e73      	subs	r3, r6, #1
 800aa10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa16:	2b30      	cmp	r3, #48	@ 0x30
 800aa18:	d0f8      	beq.n	800aa0c <_dtoa_r+0x614>
 800aa1a:	4647      	mov	r7, r8
 800aa1c:	e03b      	b.n	800aa96 <_dtoa_r+0x69e>
 800aa1e:	4b9e      	ldr	r3, [pc, #632]	@ (800ac98 <_dtoa_r+0x8a0>)
 800aa20:	f7f5 fe1a 	bl	8000658 <__aeabi_dmul>
 800aa24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa28:	e7bc      	b.n	800a9a4 <_dtoa_r+0x5ac>
 800aa2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aa2e:	4656      	mov	r6, sl
 800aa30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa34:	4620      	mov	r0, r4
 800aa36:	4629      	mov	r1, r5
 800aa38:	f7f5 ff38 	bl	80008ac <__aeabi_ddiv>
 800aa3c:	f7f6 f8bc 	bl	8000bb8 <__aeabi_d2iz>
 800aa40:	4680      	mov	r8, r0
 800aa42:	f7f5 fd9f 	bl	8000584 <__aeabi_i2d>
 800aa46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa4a:	f7f5 fe05 	bl	8000658 <__aeabi_dmul>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	4620      	mov	r0, r4
 800aa54:	4629      	mov	r1, r5
 800aa56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aa5a:	f7f5 fc45 	bl	80002e8 <__aeabi_dsub>
 800aa5e:	f806 4b01 	strb.w	r4, [r6], #1
 800aa62:	9d03      	ldr	r5, [sp, #12]
 800aa64:	eba6 040a 	sub.w	r4, r6, sl
 800aa68:	42a5      	cmp	r5, r4
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	d133      	bne.n	800aad8 <_dtoa_r+0x6e0>
 800aa70:	f7f5 fc3c 	bl	80002ec <__adddf3>
 800aa74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa78:	4604      	mov	r4, r0
 800aa7a:	460d      	mov	r5, r1
 800aa7c:	f7f6 f87c 	bl	8000b78 <__aeabi_dcmpgt>
 800aa80:	b9c0      	cbnz	r0, 800aab4 <_dtoa_r+0x6bc>
 800aa82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa86:	4620      	mov	r0, r4
 800aa88:	4629      	mov	r1, r5
 800aa8a:	f7f6 f84d 	bl	8000b28 <__aeabi_dcmpeq>
 800aa8e:	b110      	cbz	r0, 800aa96 <_dtoa_r+0x69e>
 800aa90:	f018 0f01 	tst.w	r8, #1
 800aa94:	d10e      	bne.n	800aab4 <_dtoa_r+0x6bc>
 800aa96:	9902      	ldr	r1, [sp, #8]
 800aa98:	4648      	mov	r0, r9
 800aa9a:	f000 fbbd 	bl	800b218 <_Bfree>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	7033      	strb	r3, [r6, #0]
 800aaa2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aaa4:	3701      	adds	r7, #1
 800aaa6:	601f      	str	r7, [r3, #0]
 800aaa8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 824b 	beq.w	800af46 <_dtoa_r+0xb4e>
 800aab0:	601e      	str	r6, [r3, #0]
 800aab2:	e248      	b.n	800af46 <_dtoa_r+0xb4e>
 800aab4:	46b8      	mov	r8, r7
 800aab6:	4633      	mov	r3, r6
 800aab8:	461e      	mov	r6, r3
 800aaba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aabe:	2a39      	cmp	r2, #57	@ 0x39
 800aac0:	d106      	bne.n	800aad0 <_dtoa_r+0x6d8>
 800aac2:	459a      	cmp	sl, r3
 800aac4:	d1f8      	bne.n	800aab8 <_dtoa_r+0x6c0>
 800aac6:	2230      	movs	r2, #48	@ 0x30
 800aac8:	f108 0801 	add.w	r8, r8, #1
 800aacc:	f88a 2000 	strb.w	r2, [sl]
 800aad0:	781a      	ldrb	r2, [r3, #0]
 800aad2:	3201      	adds	r2, #1
 800aad4:	701a      	strb	r2, [r3, #0]
 800aad6:	e7a0      	b.n	800aa1a <_dtoa_r+0x622>
 800aad8:	4b6f      	ldr	r3, [pc, #444]	@ (800ac98 <_dtoa_r+0x8a0>)
 800aada:	2200      	movs	r2, #0
 800aadc:	f7f5 fdbc 	bl	8000658 <__aeabi_dmul>
 800aae0:	2200      	movs	r2, #0
 800aae2:	2300      	movs	r3, #0
 800aae4:	4604      	mov	r4, r0
 800aae6:	460d      	mov	r5, r1
 800aae8:	f7f6 f81e 	bl	8000b28 <__aeabi_dcmpeq>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d09f      	beq.n	800aa30 <_dtoa_r+0x638>
 800aaf0:	e7d1      	b.n	800aa96 <_dtoa_r+0x69e>
 800aaf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aaf4:	2a00      	cmp	r2, #0
 800aaf6:	f000 80ea 	beq.w	800acce <_dtoa_r+0x8d6>
 800aafa:	9a07      	ldr	r2, [sp, #28]
 800aafc:	2a01      	cmp	r2, #1
 800aafe:	f300 80cd 	bgt.w	800ac9c <_dtoa_r+0x8a4>
 800ab02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ab04:	2a00      	cmp	r2, #0
 800ab06:	f000 80c1 	beq.w	800ac8c <_dtoa_r+0x894>
 800ab0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ab0e:	9c08      	ldr	r4, [sp, #32]
 800ab10:	9e00      	ldr	r6, [sp, #0]
 800ab12:	9a00      	ldr	r2, [sp, #0]
 800ab14:	441a      	add	r2, r3
 800ab16:	9200      	str	r2, [sp, #0]
 800ab18:	9a06      	ldr	r2, [sp, #24]
 800ab1a:	2101      	movs	r1, #1
 800ab1c:	441a      	add	r2, r3
 800ab1e:	4648      	mov	r0, r9
 800ab20:	9206      	str	r2, [sp, #24]
 800ab22:	f000 fc2d 	bl	800b380 <__i2b>
 800ab26:	4605      	mov	r5, r0
 800ab28:	b166      	cbz	r6, 800ab44 <_dtoa_r+0x74c>
 800ab2a:	9b06      	ldr	r3, [sp, #24]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	dd09      	ble.n	800ab44 <_dtoa_r+0x74c>
 800ab30:	42b3      	cmp	r3, r6
 800ab32:	9a00      	ldr	r2, [sp, #0]
 800ab34:	bfa8      	it	ge
 800ab36:	4633      	movge	r3, r6
 800ab38:	1ad2      	subs	r2, r2, r3
 800ab3a:	9200      	str	r2, [sp, #0]
 800ab3c:	9a06      	ldr	r2, [sp, #24]
 800ab3e:	1af6      	subs	r6, r6, r3
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	9306      	str	r3, [sp, #24]
 800ab44:	9b08      	ldr	r3, [sp, #32]
 800ab46:	b30b      	cbz	r3, 800ab8c <_dtoa_r+0x794>
 800ab48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f000 80c6 	beq.w	800acdc <_dtoa_r+0x8e4>
 800ab50:	2c00      	cmp	r4, #0
 800ab52:	f000 80c0 	beq.w	800acd6 <_dtoa_r+0x8de>
 800ab56:	4629      	mov	r1, r5
 800ab58:	4622      	mov	r2, r4
 800ab5a:	4648      	mov	r0, r9
 800ab5c:	f000 fcc8 	bl	800b4f0 <__pow5mult>
 800ab60:	9a02      	ldr	r2, [sp, #8]
 800ab62:	4601      	mov	r1, r0
 800ab64:	4605      	mov	r5, r0
 800ab66:	4648      	mov	r0, r9
 800ab68:	f000 fc20 	bl	800b3ac <__multiply>
 800ab6c:	9902      	ldr	r1, [sp, #8]
 800ab6e:	4680      	mov	r8, r0
 800ab70:	4648      	mov	r0, r9
 800ab72:	f000 fb51 	bl	800b218 <_Bfree>
 800ab76:	9b08      	ldr	r3, [sp, #32]
 800ab78:	1b1b      	subs	r3, r3, r4
 800ab7a:	9308      	str	r3, [sp, #32]
 800ab7c:	f000 80b1 	beq.w	800ace2 <_dtoa_r+0x8ea>
 800ab80:	9a08      	ldr	r2, [sp, #32]
 800ab82:	4641      	mov	r1, r8
 800ab84:	4648      	mov	r0, r9
 800ab86:	f000 fcb3 	bl	800b4f0 <__pow5mult>
 800ab8a:	9002      	str	r0, [sp, #8]
 800ab8c:	2101      	movs	r1, #1
 800ab8e:	4648      	mov	r0, r9
 800ab90:	f000 fbf6 	bl	800b380 <__i2b>
 800ab94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab96:	4604      	mov	r4, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f000 81d8 	beq.w	800af4e <_dtoa_r+0xb56>
 800ab9e:	461a      	mov	r2, r3
 800aba0:	4601      	mov	r1, r0
 800aba2:	4648      	mov	r0, r9
 800aba4:	f000 fca4 	bl	800b4f0 <__pow5mult>
 800aba8:	9b07      	ldr	r3, [sp, #28]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	4604      	mov	r4, r0
 800abae:	f300 809f 	bgt.w	800acf0 <_dtoa_r+0x8f8>
 800abb2:	9b04      	ldr	r3, [sp, #16]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f040 8097 	bne.w	800ace8 <_dtoa_r+0x8f0>
 800abba:	9b05      	ldr	r3, [sp, #20]
 800abbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f040 8093 	bne.w	800acec <_dtoa_r+0x8f4>
 800abc6:	9b05      	ldr	r3, [sp, #20]
 800abc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800abcc:	0d1b      	lsrs	r3, r3, #20
 800abce:	051b      	lsls	r3, r3, #20
 800abd0:	b133      	cbz	r3, 800abe0 <_dtoa_r+0x7e8>
 800abd2:	9b00      	ldr	r3, [sp, #0]
 800abd4:	3301      	adds	r3, #1
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	9b06      	ldr	r3, [sp, #24]
 800abda:	3301      	adds	r3, #1
 800abdc:	9306      	str	r3, [sp, #24]
 800abde:	2301      	movs	r3, #1
 800abe0:	9308      	str	r3, [sp, #32]
 800abe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 81b8 	beq.w	800af5a <_dtoa_r+0xb62>
 800abea:	6923      	ldr	r3, [r4, #16]
 800abec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abf0:	6918      	ldr	r0, [r3, #16]
 800abf2:	f000 fb79 	bl	800b2e8 <__hi0bits>
 800abf6:	f1c0 0020 	rsb	r0, r0, #32
 800abfa:	9b06      	ldr	r3, [sp, #24]
 800abfc:	4418      	add	r0, r3
 800abfe:	f010 001f 	ands.w	r0, r0, #31
 800ac02:	f000 8082 	beq.w	800ad0a <_dtoa_r+0x912>
 800ac06:	f1c0 0320 	rsb	r3, r0, #32
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	dd73      	ble.n	800acf6 <_dtoa_r+0x8fe>
 800ac0e:	9b00      	ldr	r3, [sp, #0]
 800ac10:	f1c0 001c 	rsb	r0, r0, #28
 800ac14:	4403      	add	r3, r0
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	9b06      	ldr	r3, [sp, #24]
 800ac1a:	4403      	add	r3, r0
 800ac1c:	4406      	add	r6, r0
 800ac1e:	9306      	str	r3, [sp, #24]
 800ac20:	9b00      	ldr	r3, [sp, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	dd05      	ble.n	800ac32 <_dtoa_r+0x83a>
 800ac26:	9902      	ldr	r1, [sp, #8]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4648      	mov	r0, r9
 800ac2c:	f000 fcba 	bl	800b5a4 <__lshift>
 800ac30:	9002      	str	r0, [sp, #8]
 800ac32:	9b06      	ldr	r3, [sp, #24]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	dd05      	ble.n	800ac44 <_dtoa_r+0x84c>
 800ac38:	4621      	mov	r1, r4
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	4648      	mov	r0, r9
 800ac3e:	f000 fcb1 	bl	800b5a4 <__lshift>
 800ac42:	4604      	mov	r4, r0
 800ac44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d061      	beq.n	800ad0e <_dtoa_r+0x916>
 800ac4a:	9802      	ldr	r0, [sp, #8]
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	f000 fd15 	bl	800b67c <__mcmp>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	da5b      	bge.n	800ad0e <_dtoa_r+0x916>
 800ac56:	2300      	movs	r3, #0
 800ac58:	9902      	ldr	r1, [sp, #8]
 800ac5a:	220a      	movs	r2, #10
 800ac5c:	4648      	mov	r0, r9
 800ac5e:	f000 fafd 	bl	800b25c <__multadd>
 800ac62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac64:	9002      	str	r0, [sp, #8]
 800ac66:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f000 8177 	beq.w	800af5e <_dtoa_r+0xb66>
 800ac70:	4629      	mov	r1, r5
 800ac72:	2300      	movs	r3, #0
 800ac74:	220a      	movs	r2, #10
 800ac76:	4648      	mov	r0, r9
 800ac78:	f000 faf0 	bl	800b25c <__multadd>
 800ac7c:	f1bb 0f00 	cmp.w	fp, #0
 800ac80:	4605      	mov	r5, r0
 800ac82:	dc6f      	bgt.n	800ad64 <_dtoa_r+0x96c>
 800ac84:	9b07      	ldr	r3, [sp, #28]
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	dc49      	bgt.n	800ad1e <_dtoa_r+0x926>
 800ac8a:	e06b      	b.n	800ad64 <_dtoa_r+0x96c>
 800ac8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ac92:	e73c      	b.n	800ab0e <_dtoa_r+0x716>
 800ac94:	3fe00000 	.word	0x3fe00000
 800ac98:	40240000 	.word	0x40240000
 800ac9c:	9b03      	ldr	r3, [sp, #12]
 800ac9e:	1e5c      	subs	r4, r3, #1
 800aca0:	9b08      	ldr	r3, [sp, #32]
 800aca2:	42a3      	cmp	r3, r4
 800aca4:	db09      	blt.n	800acba <_dtoa_r+0x8c2>
 800aca6:	1b1c      	subs	r4, r3, r4
 800aca8:	9b03      	ldr	r3, [sp, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f6bf af30 	bge.w	800ab10 <_dtoa_r+0x718>
 800acb0:	9b00      	ldr	r3, [sp, #0]
 800acb2:	9a03      	ldr	r2, [sp, #12]
 800acb4:	1a9e      	subs	r6, r3, r2
 800acb6:	2300      	movs	r3, #0
 800acb8:	e72b      	b.n	800ab12 <_dtoa_r+0x71a>
 800acba:	9b08      	ldr	r3, [sp, #32]
 800acbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800acbe:	9408      	str	r4, [sp, #32]
 800acc0:	1ae3      	subs	r3, r4, r3
 800acc2:	441a      	add	r2, r3
 800acc4:	9e00      	ldr	r6, [sp, #0]
 800acc6:	9b03      	ldr	r3, [sp, #12]
 800acc8:	920d      	str	r2, [sp, #52]	@ 0x34
 800acca:	2400      	movs	r4, #0
 800accc:	e721      	b.n	800ab12 <_dtoa_r+0x71a>
 800acce:	9c08      	ldr	r4, [sp, #32]
 800acd0:	9e00      	ldr	r6, [sp, #0]
 800acd2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800acd4:	e728      	b.n	800ab28 <_dtoa_r+0x730>
 800acd6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800acda:	e751      	b.n	800ab80 <_dtoa_r+0x788>
 800acdc:	9a08      	ldr	r2, [sp, #32]
 800acde:	9902      	ldr	r1, [sp, #8]
 800ace0:	e750      	b.n	800ab84 <_dtoa_r+0x78c>
 800ace2:	f8cd 8008 	str.w	r8, [sp, #8]
 800ace6:	e751      	b.n	800ab8c <_dtoa_r+0x794>
 800ace8:	2300      	movs	r3, #0
 800acea:	e779      	b.n	800abe0 <_dtoa_r+0x7e8>
 800acec:	9b04      	ldr	r3, [sp, #16]
 800acee:	e777      	b.n	800abe0 <_dtoa_r+0x7e8>
 800acf0:	2300      	movs	r3, #0
 800acf2:	9308      	str	r3, [sp, #32]
 800acf4:	e779      	b.n	800abea <_dtoa_r+0x7f2>
 800acf6:	d093      	beq.n	800ac20 <_dtoa_r+0x828>
 800acf8:	9a00      	ldr	r2, [sp, #0]
 800acfa:	331c      	adds	r3, #28
 800acfc:	441a      	add	r2, r3
 800acfe:	9200      	str	r2, [sp, #0]
 800ad00:	9a06      	ldr	r2, [sp, #24]
 800ad02:	441a      	add	r2, r3
 800ad04:	441e      	add	r6, r3
 800ad06:	9206      	str	r2, [sp, #24]
 800ad08:	e78a      	b.n	800ac20 <_dtoa_r+0x828>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	e7f4      	b.n	800acf8 <_dtoa_r+0x900>
 800ad0e:	9b03      	ldr	r3, [sp, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	46b8      	mov	r8, r7
 800ad14:	dc20      	bgt.n	800ad58 <_dtoa_r+0x960>
 800ad16:	469b      	mov	fp, r3
 800ad18:	9b07      	ldr	r3, [sp, #28]
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	dd1e      	ble.n	800ad5c <_dtoa_r+0x964>
 800ad1e:	f1bb 0f00 	cmp.w	fp, #0
 800ad22:	f47f adb1 	bne.w	800a888 <_dtoa_r+0x490>
 800ad26:	4621      	mov	r1, r4
 800ad28:	465b      	mov	r3, fp
 800ad2a:	2205      	movs	r2, #5
 800ad2c:	4648      	mov	r0, r9
 800ad2e:	f000 fa95 	bl	800b25c <__multadd>
 800ad32:	4601      	mov	r1, r0
 800ad34:	4604      	mov	r4, r0
 800ad36:	9802      	ldr	r0, [sp, #8]
 800ad38:	f000 fca0 	bl	800b67c <__mcmp>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	f77f ada3 	ble.w	800a888 <_dtoa_r+0x490>
 800ad42:	4656      	mov	r6, sl
 800ad44:	2331      	movs	r3, #49	@ 0x31
 800ad46:	f806 3b01 	strb.w	r3, [r6], #1
 800ad4a:	f108 0801 	add.w	r8, r8, #1
 800ad4e:	e59f      	b.n	800a890 <_dtoa_r+0x498>
 800ad50:	9c03      	ldr	r4, [sp, #12]
 800ad52:	46b8      	mov	r8, r7
 800ad54:	4625      	mov	r5, r4
 800ad56:	e7f4      	b.n	800ad42 <_dtoa_r+0x94a>
 800ad58:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ad5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 8101 	beq.w	800af66 <_dtoa_r+0xb6e>
 800ad64:	2e00      	cmp	r6, #0
 800ad66:	dd05      	ble.n	800ad74 <_dtoa_r+0x97c>
 800ad68:	4629      	mov	r1, r5
 800ad6a:	4632      	mov	r2, r6
 800ad6c:	4648      	mov	r0, r9
 800ad6e:	f000 fc19 	bl	800b5a4 <__lshift>
 800ad72:	4605      	mov	r5, r0
 800ad74:	9b08      	ldr	r3, [sp, #32]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d05c      	beq.n	800ae34 <_dtoa_r+0xa3c>
 800ad7a:	6869      	ldr	r1, [r5, #4]
 800ad7c:	4648      	mov	r0, r9
 800ad7e:	f000 fa0b 	bl	800b198 <_Balloc>
 800ad82:	4606      	mov	r6, r0
 800ad84:	b928      	cbnz	r0, 800ad92 <_dtoa_r+0x99a>
 800ad86:	4b82      	ldr	r3, [pc, #520]	@ (800af90 <_dtoa_r+0xb98>)
 800ad88:	4602      	mov	r2, r0
 800ad8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ad8e:	f7ff bb4a 	b.w	800a426 <_dtoa_r+0x2e>
 800ad92:	692a      	ldr	r2, [r5, #16]
 800ad94:	3202      	adds	r2, #2
 800ad96:	0092      	lsls	r2, r2, #2
 800ad98:	f105 010c 	add.w	r1, r5, #12
 800ad9c:	300c      	adds	r0, #12
 800ad9e:	f7ff fa92 	bl	800a2c6 <memcpy>
 800ada2:	2201      	movs	r2, #1
 800ada4:	4631      	mov	r1, r6
 800ada6:	4648      	mov	r0, r9
 800ada8:	f000 fbfc 	bl	800b5a4 <__lshift>
 800adac:	f10a 0301 	add.w	r3, sl, #1
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	eb0a 030b 	add.w	r3, sl, fp
 800adb6:	9308      	str	r3, [sp, #32]
 800adb8:	9b04      	ldr	r3, [sp, #16]
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	462f      	mov	r7, r5
 800adc0:	9306      	str	r3, [sp, #24]
 800adc2:	4605      	mov	r5, r0
 800adc4:	9b00      	ldr	r3, [sp, #0]
 800adc6:	9802      	ldr	r0, [sp, #8]
 800adc8:	4621      	mov	r1, r4
 800adca:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800adce:	f7ff fa88 	bl	800a2e2 <quorem>
 800add2:	4603      	mov	r3, r0
 800add4:	3330      	adds	r3, #48	@ 0x30
 800add6:	9003      	str	r0, [sp, #12]
 800add8:	4639      	mov	r1, r7
 800adda:	9802      	ldr	r0, [sp, #8]
 800addc:	9309      	str	r3, [sp, #36]	@ 0x24
 800adde:	f000 fc4d 	bl	800b67c <__mcmp>
 800ade2:	462a      	mov	r2, r5
 800ade4:	9004      	str	r0, [sp, #16]
 800ade6:	4621      	mov	r1, r4
 800ade8:	4648      	mov	r0, r9
 800adea:	f000 fc63 	bl	800b6b4 <__mdiff>
 800adee:	68c2      	ldr	r2, [r0, #12]
 800adf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adf2:	4606      	mov	r6, r0
 800adf4:	bb02      	cbnz	r2, 800ae38 <_dtoa_r+0xa40>
 800adf6:	4601      	mov	r1, r0
 800adf8:	9802      	ldr	r0, [sp, #8]
 800adfa:	f000 fc3f 	bl	800b67c <__mcmp>
 800adfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae00:	4602      	mov	r2, r0
 800ae02:	4631      	mov	r1, r6
 800ae04:	4648      	mov	r0, r9
 800ae06:	920c      	str	r2, [sp, #48]	@ 0x30
 800ae08:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae0a:	f000 fa05 	bl	800b218 <_Bfree>
 800ae0e:	9b07      	ldr	r3, [sp, #28]
 800ae10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ae12:	9e00      	ldr	r6, [sp, #0]
 800ae14:	ea42 0103 	orr.w	r1, r2, r3
 800ae18:	9b06      	ldr	r3, [sp, #24]
 800ae1a:	4319      	orrs	r1, r3
 800ae1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae1e:	d10d      	bne.n	800ae3c <_dtoa_r+0xa44>
 800ae20:	2b39      	cmp	r3, #57	@ 0x39
 800ae22:	d027      	beq.n	800ae74 <_dtoa_r+0xa7c>
 800ae24:	9a04      	ldr	r2, [sp, #16]
 800ae26:	2a00      	cmp	r2, #0
 800ae28:	dd01      	ble.n	800ae2e <_dtoa_r+0xa36>
 800ae2a:	9b03      	ldr	r3, [sp, #12]
 800ae2c:	3331      	adds	r3, #49	@ 0x31
 800ae2e:	f88b 3000 	strb.w	r3, [fp]
 800ae32:	e52e      	b.n	800a892 <_dtoa_r+0x49a>
 800ae34:	4628      	mov	r0, r5
 800ae36:	e7b9      	b.n	800adac <_dtoa_r+0x9b4>
 800ae38:	2201      	movs	r2, #1
 800ae3a:	e7e2      	b.n	800ae02 <_dtoa_r+0xa0a>
 800ae3c:	9904      	ldr	r1, [sp, #16]
 800ae3e:	2900      	cmp	r1, #0
 800ae40:	db04      	blt.n	800ae4c <_dtoa_r+0xa54>
 800ae42:	9807      	ldr	r0, [sp, #28]
 800ae44:	4301      	orrs	r1, r0
 800ae46:	9806      	ldr	r0, [sp, #24]
 800ae48:	4301      	orrs	r1, r0
 800ae4a:	d120      	bne.n	800ae8e <_dtoa_r+0xa96>
 800ae4c:	2a00      	cmp	r2, #0
 800ae4e:	ddee      	ble.n	800ae2e <_dtoa_r+0xa36>
 800ae50:	9902      	ldr	r1, [sp, #8]
 800ae52:	9300      	str	r3, [sp, #0]
 800ae54:	2201      	movs	r2, #1
 800ae56:	4648      	mov	r0, r9
 800ae58:	f000 fba4 	bl	800b5a4 <__lshift>
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	9002      	str	r0, [sp, #8]
 800ae60:	f000 fc0c 	bl	800b67c <__mcmp>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	9b00      	ldr	r3, [sp, #0]
 800ae68:	dc02      	bgt.n	800ae70 <_dtoa_r+0xa78>
 800ae6a:	d1e0      	bne.n	800ae2e <_dtoa_r+0xa36>
 800ae6c:	07da      	lsls	r2, r3, #31
 800ae6e:	d5de      	bpl.n	800ae2e <_dtoa_r+0xa36>
 800ae70:	2b39      	cmp	r3, #57	@ 0x39
 800ae72:	d1da      	bne.n	800ae2a <_dtoa_r+0xa32>
 800ae74:	2339      	movs	r3, #57	@ 0x39
 800ae76:	f88b 3000 	strb.w	r3, [fp]
 800ae7a:	4633      	mov	r3, r6
 800ae7c:	461e      	mov	r6, r3
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ae84:	2a39      	cmp	r2, #57	@ 0x39
 800ae86:	d04e      	beq.n	800af26 <_dtoa_r+0xb2e>
 800ae88:	3201      	adds	r2, #1
 800ae8a:	701a      	strb	r2, [r3, #0]
 800ae8c:	e501      	b.n	800a892 <_dtoa_r+0x49a>
 800ae8e:	2a00      	cmp	r2, #0
 800ae90:	dd03      	ble.n	800ae9a <_dtoa_r+0xaa2>
 800ae92:	2b39      	cmp	r3, #57	@ 0x39
 800ae94:	d0ee      	beq.n	800ae74 <_dtoa_r+0xa7c>
 800ae96:	3301      	adds	r3, #1
 800ae98:	e7c9      	b.n	800ae2e <_dtoa_r+0xa36>
 800ae9a:	9a00      	ldr	r2, [sp, #0]
 800ae9c:	9908      	ldr	r1, [sp, #32]
 800ae9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aea2:	428a      	cmp	r2, r1
 800aea4:	d028      	beq.n	800aef8 <_dtoa_r+0xb00>
 800aea6:	9902      	ldr	r1, [sp, #8]
 800aea8:	2300      	movs	r3, #0
 800aeaa:	220a      	movs	r2, #10
 800aeac:	4648      	mov	r0, r9
 800aeae:	f000 f9d5 	bl	800b25c <__multadd>
 800aeb2:	42af      	cmp	r7, r5
 800aeb4:	9002      	str	r0, [sp, #8]
 800aeb6:	f04f 0300 	mov.w	r3, #0
 800aeba:	f04f 020a 	mov.w	r2, #10
 800aebe:	4639      	mov	r1, r7
 800aec0:	4648      	mov	r0, r9
 800aec2:	d107      	bne.n	800aed4 <_dtoa_r+0xadc>
 800aec4:	f000 f9ca 	bl	800b25c <__multadd>
 800aec8:	4607      	mov	r7, r0
 800aeca:	4605      	mov	r5, r0
 800aecc:	9b00      	ldr	r3, [sp, #0]
 800aece:	3301      	adds	r3, #1
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	e777      	b.n	800adc4 <_dtoa_r+0x9cc>
 800aed4:	f000 f9c2 	bl	800b25c <__multadd>
 800aed8:	4629      	mov	r1, r5
 800aeda:	4607      	mov	r7, r0
 800aedc:	2300      	movs	r3, #0
 800aede:	220a      	movs	r2, #10
 800aee0:	4648      	mov	r0, r9
 800aee2:	f000 f9bb 	bl	800b25c <__multadd>
 800aee6:	4605      	mov	r5, r0
 800aee8:	e7f0      	b.n	800aecc <_dtoa_r+0xad4>
 800aeea:	f1bb 0f00 	cmp.w	fp, #0
 800aeee:	bfcc      	ite	gt
 800aef0:	465e      	movgt	r6, fp
 800aef2:	2601      	movle	r6, #1
 800aef4:	4456      	add	r6, sl
 800aef6:	2700      	movs	r7, #0
 800aef8:	9902      	ldr	r1, [sp, #8]
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	2201      	movs	r2, #1
 800aefe:	4648      	mov	r0, r9
 800af00:	f000 fb50 	bl	800b5a4 <__lshift>
 800af04:	4621      	mov	r1, r4
 800af06:	9002      	str	r0, [sp, #8]
 800af08:	f000 fbb8 	bl	800b67c <__mcmp>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	dcb4      	bgt.n	800ae7a <_dtoa_r+0xa82>
 800af10:	d102      	bne.n	800af18 <_dtoa_r+0xb20>
 800af12:	9b00      	ldr	r3, [sp, #0]
 800af14:	07db      	lsls	r3, r3, #31
 800af16:	d4b0      	bmi.n	800ae7a <_dtoa_r+0xa82>
 800af18:	4633      	mov	r3, r6
 800af1a:	461e      	mov	r6, r3
 800af1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af20:	2a30      	cmp	r2, #48	@ 0x30
 800af22:	d0fa      	beq.n	800af1a <_dtoa_r+0xb22>
 800af24:	e4b5      	b.n	800a892 <_dtoa_r+0x49a>
 800af26:	459a      	cmp	sl, r3
 800af28:	d1a8      	bne.n	800ae7c <_dtoa_r+0xa84>
 800af2a:	2331      	movs	r3, #49	@ 0x31
 800af2c:	f108 0801 	add.w	r8, r8, #1
 800af30:	f88a 3000 	strb.w	r3, [sl]
 800af34:	e4ad      	b.n	800a892 <_dtoa_r+0x49a>
 800af36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800af94 <_dtoa_r+0xb9c>
 800af3c:	b11b      	cbz	r3, 800af46 <_dtoa_r+0xb4e>
 800af3e:	f10a 0308 	add.w	r3, sl, #8
 800af42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800af44:	6013      	str	r3, [r2, #0]
 800af46:	4650      	mov	r0, sl
 800af48:	b017      	add	sp, #92	@ 0x5c
 800af4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4e:	9b07      	ldr	r3, [sp, #28]
 800af50:	2b01      	cmp	r3, #1
 800af52:	f77f ae2e 	ble.w	800abb2 <_dtoa_r+0x7ba>
 800af56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af58:	9308      	str	r3, [sp, #32]
 800af5a:	2001      	movs	r0, #1
 800af5c:	e64d      	b.n	800abfa <_dtoa_r+0x802>
 800af5e:	f1bb 0f00 	cmp.w	fp, #0
 800af62:	f77f aed9 	ble.w	800ad18 <_dtoa_r+0x920>
 800af66:	4656      	mov	r6, sl
 800af68:	9802      	ldr	r0, [sp, #8]
 800af6a:	4621      	mov	r1, r4
 800af6c:	f7ff f9b9 	bl	800a2e2 <quorem>
 800af70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800af74:	f806 3b01 	strb.w	r3, [r6], #1
 800af78:	eba6 020a 	sub.w	r2, r6, sl
 800af7c:	4593      	cmp	fp, r2
 800af7e:	ddb4      	ble.n	800aeea <_dtoa_r+0xaf2>
 800af80:	9902      	ldr	r1, [sp, #8]
 800af82:	2300      	movs	r3, #0
 800af84:	220a      	movs	r2, #10
 800af86:	4648      	mov	r0, r9
 800af88:	f000 f968 	bl	800b25c <__multadd>
 800af8c:	9002      	str	r0, [sp, #8]
 800af8e:	e7eb      	b.n	800af68 <_dtoa_r+0xb70>
 800af90:	0800c820 	.word	0x0800c820
 800af94:	0800c7a4 	.word	0x0800c7a4

0800af98 <_free_r>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	4605      	mov	r5, r0
 800af9c:	2900      	cmp	r1, #0
 800af9e:	d041      	beq.n	800b024 <_free_r+0x8c>
 800afa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afa4:	1f0c      	subs	r4, r1, #4
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	bfb8      	it	lt
 800afaa:	18e4      	addlt	r4, r4, r3
 800afac:	f000 f8e8 	bl	800b180 <__malloc_lock>
 800afb0:	4a1d      	ldr	r2, [pc, #116]	@ (800b028 <_free_r+0x90>)
 800afb2:	6813      	ldr	r3, [r2, #0]
 800afb4:	b933      	cbnz	r3, 800afc4 <_free_r+0x2c>
 800afb6:	6063      	str	r3, [r4, #4]
 800afb8:	6014      	str	r4, [r2, #0]
 800afba:	4628      	mov	r0, r5
 800afbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afc0:	f000 b8e4 	b.w	800b18c <__malloc_unlock>
 800afc4:	42a3      	cmp	r3, r4
 800afc6:	d908      	bls.n	800afda <_free_r+0x42>
 800afc8:	6820      	ldr	r0, [r4, #0]
 800afca:	1821      	adds	r1, r4, r0
 800afcc:	428b      	cmp	r3, r1
 800afce:	bf01      	itttt	eq
 800afd0:	6819      	ldreq	r1, [r3, #0]
 800afd2:	685b      	ldreq	r3, [r3, #4]
 800afd4:	1809      	addeq	r1, r1, r0
 800afd6:	6021      	streq	r1, [r4, #0]
 800afd8:	e7ed      	b.n	800afb6 <_free_r+0x1e>
 800afda:	461a      	mov	r2, r3
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	b10b      	cbz	r3, 800afe4 <_free_r+0x4c>
 800afe0:	42a3      	cmp	r3, r4
 800afe2:	d9fa      	bls.n	800afda <_free_r+0x42>
 800afe4:	6811      	ldr	r1, [r2, #0]
 800afe6:	1850      	adds	r0, r2, r1
 800afe8:	42a0      	cmp	r0, r4
 800afea:	d10b      	bne.n	800b004 <_free_r+0x6c>
 800afec:	6820      	ldr	r0, [r4, #0]
 800afee:	4401      	add	r1, r0
 800aff0:	1850      	adds	r0, r2, r1
 800aff2:	4283      	cmp	r3, r0
 800aff4:	6011      	str	r1, [r2, #0]
 800aff6:	d1e0      	bne.n	800afba <_free_r+0x22>
 800aff8:	6818      	ldr	r0, [r3, #0]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	6053      	str	r3, [r2, #4]
 800affe:	4408      	add	r0, r1
 800b000:	6010      	str	r0, [r2, #0]
 800b002:	e7da      	b.n	800afba <_free_r+0x22>
 800b004:	d902      	bls.n	800b00c <_free_r+0x74>
 800b006:	230c      	movs	r3, #12
 800b008:	602b      	str	r3, [r5, #0]
 800b00a:	e7d6      	b.n	800afba <_free_r+0x22>
 800b00c:	6820      	ldr	r0, [r4, #0]
 800b00e:	1821      	adds	r1, r4, r0
 800b010:	428b      	cmp	r3, r1
 800b012:	bf04      	itt	eq
 800b014:	6819      	ldreq	r1, [r3, #0]
 800b016:	685b      	ldreq	r3, [r3, #4]
 800b018:	6063      	str	r3, [r4, #4]
 800b01a:	bf04      	itt	eq
 800b01c:	1809      	addeq	r1, r1, r0
 800b01e:	6021      	streq	r1, [r4, #0]
 800b020:	6054      	str	r4, [r2, #4]
 800b022:	e7ca      	b.n	800afba <_free_r+0x22>
 800b024:	bd38      	pop	{r3, r4, r5, pc}
 800b026:	bf00      	nop
 800b028:	20000cd0 	.word	0x20000cd0

0800b02c <malloc>:
 800b02c:	4b02      	ldr	r3, [pc, #8]	@ (800b038 <malloc+0xc>)
 800b02e:	4601      	mov	r1, r0
 800b030:	6818      	ldr	r0, [r3, #0]
 800b032:	f000 b825 	b.w	800b080 <_malloc_r>
 800b036:	bf00      	nop
 800b038:	200003d4 	.word	0x200003d4

0800b03c <sbrk_aligned>:
 800b03c:	b570      	push	{r4, r5, r6, lr}
 800b03e:	4e0f      	ldr	r6, [pc, #60]	@ (800b07c <sbrk_aligned+0x40>)
 800b040:	460c      	mov	r4, r1
 800b042:	6831      	ldr	r1, [r6, #0]
 800b044:	4605      	mov	r5, r0
 800b046:	b911      	cbnz	r1, 800b04e <sbrk_aligned+0x12>
 800b048:	f000 fe3e 	bl	800bcc8 <_sbrk_r>
 800b04c:	6030      	str	r0, [r6, #0]
 800b04e:	4621      	mov	r1, r4
 800b050:	4628      	mov	r0, r5
 800b052:	f000 fe39 	bl	800bcc8 <_sbrk_r>
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	d103      	bne.n	800b062 <sbrk_aligned+0x26>
 800b05a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b05e:	4620      	mov	r0, r4
 800b060:	bd70      	pop	{r4, r5, r6, pc}
 800b062:	1cc4      	adds	r4, r0, #3
 800b064:	f024 0403 	bic.w	r4, r4, #3
 800b068:	42a0      	cmp	r0, r4
 800b06a:	d0f8      	beq.n	800b05e <sbrk_aligned+0x22>
 800b06c:	1a21      	subs	r1, r4, r0
 800b06e:	4628      	mov	r0, r5
 800b070:	f000 fe2a 	bl	800bcc8 <_sbrk_r>
 800b074:	3001      	adds	r0, #1
 800b076:	d1f2      	bne.n	800b05e <sbrk_aligned+0x22>
 800b078:	e7ef      	b.n	800b05a <sbrk_aligned+0x1e>
 800b07a:	bf00      	nop
 800b07c:	20000ccc 	.word	0x20000ccc

0800b080 <_malloc_r>:
 800b080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b084:	1ccd      	adds	r5, r1, #3
 800b086:	f025 0503 	bic.w	r5, r5, #3
 800b08a:	3508      	adds	r5, #8
 800b08c:	2d0c      	cmp	r5, #12
 800b08e:	bf38      	it	cc
 800b090:	250c      	movcc	r5, #12
 800b092:	2d00      	cmp	r5, #0
 800b094:	4606      	mov	r6, r0
 800b096:	db01      	blt.n	800b09c <_malloc_r+0x1c>
 800b098:	42a9      	cmp	r1, r5
 800b09a:	d904      	bls.n	800b0a6 <_malloc_r+0x26>
 800b09c:	230c      	movs	r3, #12
 800b09e:	6033      	str	r3, [r6, #0]
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b17c <_malloc_r+0xfc>
 800b0aa:	f000 f869 	bl	800b180 <__malloc_lock>
 800b0ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b0b2:	461c      	mov	r4, r3
 800b0b4:	bb44      	cbnz	r4, 800b108 <_malloc_r+0x88>
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f7ff ffbf 	bl	800b03c <sbrk_aligned>
 800b0be:	1c43      	adds	r3, r0, #1
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	d158      	bne.n	800b176 <_malloc_r+0xf6>
 800b0c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b0c8:	4627      	mov	r7, r4
 800b0ca:	2f00      	cmp	r7, #0
 800b0cc:	d143      	bne.n	800b156 <_malloc_r+0xd6>
 800b0ce:	2c00      	cmp	r4, #0
 800b0d0:	d04b      	beq.n	800b16a <_malloc_r+0xea>
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	eb04 0903 	add.w	r9, r4, r3
 800b0dc:	f000 fdf4 	bl	800bcc8 <_sbrk_r>
 800b0e0:	4581      	cmp	r9, r0
 800b0e2:	d142      	bne.n	800b16a <_malloc_r+0xea>
 800b0e4:	6821      	ldr	r1, [r4, #0]
 800b0e6:	1a6d      	subs	r5, r5, r1
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f7ff ffa6 	bl	800b03c <sbrk_aligned>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d03a      	beq.n	800b16a <_malloc_r+0xea>
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	442b      	add	r3, r5
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b0fe:	685a      	ldr	r2, [r3, #4]
 800b100:	bb62      	cbnz	r2, 800b15c <_malloc_r+0xdc>
 800b102:	f8c8 7000 	str.w	r7, [r8]
 800b106:	e00f      	b.n	800b128 <_malloc_r+0xa8>
 800b108:	6822      	ldr	r2, [r4, #0]
 800b10a:	1b52      	subs	r2, r2, r5
 800b10c:	d420      	bmi.n	800b150 <_malloc_r+0xd0>
 800b10e:	2a0b      	cmp	r2, #11
 800b110:	d917      	bls.n	800b142 <_malloc_r+0xc2>
 800b112:	1961      	adds	r1, r4, r5
 800b114:	42a3      	cmp	r3, r4
 800b116:	6025      	str	r5, [r4, #0]
 800b118:	bf18      	it	ne
 800b11a:	6059      	strne	r1, [r3, #4]
 800b11c:	6863      	ldr	r3, [r4, #4]
 800b11e:	bf08      	it	eq
 800b120:	f8c8 1000 	streq.w	r1, [r8]
 800b124:	5162      	str	r2, [r4, r5]
 800b126:	604b      	str	r3, [r1, #4]
 800b128:	4630      	mov	r0, r6
 800b12a:	f000 f82f 	bl	800b18c <__malloc_unlock>
 800b12e:	f104 000b 	add.w	r0, r4, #11
 800b132:	1d23      	adds	r3, r4, #4
 800b134:	f020 0007 	bic.w	r0, r0, #7
 800b138:	1ac2      	subs	r2, r0, r3
 800b13a:	bf1c      	itt	ne
 800b13c:	1a1b      	subne	r3, r3, r0
 800b13e:	50a3      	strne	r3, [r4, r2]
 800b140:	e7af      	b.n	800b0a2 <_malloc_r+0x22>
 800b142:	6862      	ldr	r2, [r4, #4]
 800b144:	42a3      	cmp	r3, r4
 800b146:	bf0c      	ite	eq
 800b148:	f8c8 2000 	streq.w	r2, [r8]
 800b14c:	605a      	strne	r2, [r3, #4]
 800b14e:	e7eb      	b.n	800b128 <_malloc_r+0xa8>
 800b150:	4623      	mov	r3, r4
 800b152:	6864      	ldr	r4, [r4, #4]
 800b154:	e7ae      	b.n	800b0b4 <_malloc_r+0x34>
 800b156:	463c      	mov	r4, r7
 800b158:	687f      	ldr	r7, [r7, #4]
 800b15a:	e7b6      	b.n	800b0ca <_malloc_r+0x4a>
 800b15c:	461a      	mov	r2, r3
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	42a3      	cmp	r3, r4
 800b162:	d1fb      	bne.n	800b15c <_malloc_r+0xdc>
 800b164:	2300      	movs	r3, #0
 800b166:	6053      	str	r3, [r2, #4]
 800b168:	e7de      	b.n	800b128 <_malloc_r+0xa8>
 800b16a:	230c      	movs	r3, #12
 800b16c:	6033      	str	r3, [r6, #0]
 800b16e:	4630      	mov	r0, r6
 800b170:	f000 f80c 	bl	800b18c <__malloc_unlock>
 800b174:	e794      	b.n	800b0a0 <_malloc_r+0x20>
 800b176:	6005      	str	r5, [r0, #0]
 800b178:	e7d6      	b.n	800b128 <_malloc_r+0xa8>
 800b17a:	bf00      	nop
 800b17c:	20000cd0 	.word	0x20000cd0

0800b180 <__malloc_lock>:
 800b180:	4801      	ldr	r0, [pc, #4]	@ (800b188 <__malloc_lock+0x8>)
 800b182:	f7ff b89e 	b.w	800a2c2 <__retarget_lock_acquire_recursive>
 800b186:	bf00      	nop
 800b188:	20000cc8 	.word	0x20000cc8

0800b18c <__malloc_unlock>:
 800b18c:	4801      	ldr	r0, [pc, #4]	@ (800b194 <__malloc_unlock+0x8>)
 800b18e:	f7ff b899 	b.w	800a2c4 <__retarget_lock_release_recursive>
 800b192:	bf00      	nop
 800b194:	20000cc8 	.word	0x20000cc8

0800b198 <_Balloc>:
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	69c6      	ldr	r6, [r0, #28]
 800b19c:	4604      	mov	r4, r0
 800b19e:	460d      	mov	r5, r1
 800b1a0:	b976      	cbnz	r6, 800b1c0 <_Balloc+0x28>
 800b1a2:	2010      	movs	r0, #16
 800b1a4:	f7ff ff42 	bl	800b02c <malloc>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	61e0      	str	r0, [r4, #28]
 800b1ac:	b920      	cbnz	r0, 800b1b8 <_Balloc+0x20>
 800b1ae:	4b18      	ldr	r3, [pc, #96]	@ (800b210 <_Balloc+0x78>)
 800b1b0:	4818      	ldr	r0, [pc, #96]	@ (800b214 <_Balloc+0x7c>)
 800b1b2:	216b      	movs	r1, #107	@ 0x6b
 800b1b4:	f000 fd98 	bl	800bce8 <__assert_func>
 800b1b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1bc:	6006      	str	r6, [r0, #0]
 800b1be:	60c6      	str	r6, [r0, #12]
 800b1c0:	69e6      	ldr	r6, [r4, #28]
 800b1c2:	68f3      	ldr	r3, [r6, #12]
 800b1c4:	b183      	cbz	r3, 800b1e8 <_Balloc+0x50>
 800b1c6:	69e3      	ldr	r3, [r4, #28]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1ce:	b9b8      	cbnz	r0, 800b200 <_Balloc+0x68>
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	fa01 f605 	lsl.w	r6, r1, r5
 800b1d6:	1d72      	adds	r2, r6, #5
 800b1d8:	0092      	lsls	r2, r2, #2
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 fda2 	bl	800bd24 <_calloc_r>
 800b1e0:	b160      	cbz	r0, 800b1fc <_Balloc+0x64>
 800b1e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1e6:	e00e      	b.n	800b206 <_Balloc+0x6e>
 800b1e8:	2221      	movs	r2, #33	@ 0x21
 800b1ea:	2104      	movs	r1, #4
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f000 fd99 	bl	800bd24 <_calloc_r>
 800b1f2:	69e3      	ldr	r3, [r4, #28]
 800b1f4:	60f0      	str	r0, [r6, #12]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1e4      	bne.n	800b1c6 <_Balloc+0x2e>
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	bd70      	pop	{r4, r5, r6, pc}
 800b200:	6802      	ldr	r2, [r0, #0]
 800b202:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b206:	2300      	movs	r3, #0
 800b208:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b20c:	e7f7      	b.n	800b1fe <_Balloc+0x66>
 800b20e:	bf00      	nop
 800b210:	0800c7b1 	.word	0x0800c7b1
 800b214:	0800c831 	.word	0x0800c831

0800b218 <_Bfree>:
 800b218:	b570      	push	{r4, r5, r6, lr}
 800b21a:	69c6      	ldr	r6, [r0, #28]
 800b21c:	4605      	mov	r5, r0
 800b21e:	460c      	mov	r4, r1
 800b220:	b976      	cbnz	r6, 800b240 <_Bfree+0x28>
 800b222:	2010      	movs	r0, #16
 800b224:	f7ff ff02 	bl	800b02c <malloc>
 800b228:	4602      	mov	r2, r0
 800b22a:	61e8      	str	r0, [r5, #28]
 800b22c:	b920      	cbnz	r0, 800b238 <_Bfree+0x20>
 800b22e:	4b09      	ldr	r3, [pc, #36]	@ (800b254 <_Bfree+0x3c>)
 800b230:	4809      	ldr	r0, [pc, #36]	@ (800b258 <_Bfree+0x40>)
 800b232:	218f      	movs	r1, #143	@ 0x8f
 800b234:	f000 fd58 	bl	800bce8 <__assert_func>
 800b238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b23c:	6006      	str	r6, [r0, #0]
 800b23e:	60c6      	str	r6, [r0, #12]
 800b240:	b13c      	cbz	r4, 800b252 <_Bfree+0x3a>
 800b242:	69eb      	ldr	r3, [r5, #28]
 800b244:	6862      	ldr	r2, [r4, #4]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b24c:	6021      	str	r1, [r4, #0]
 800b24e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b252:	bd70      	pop	{r4, r5, r6, pc}
 800b254:	0800c7b1 	.word	0x0800c7b1
 800b258:	0800c831 	.word	0x0800c831

0800b25c <__multadd>:
 800b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b260:	690d      	ldr	r5, [r1, #16]
 800b262:	4607      	mov	r7, r0
 800b264:	460c      	mov	r4, r1
 800b266:	461e      	mov	r6, r3
 800b268:	f101 0c14 	add.w	ip, r1, #20
 800b26c:	2000      	movs	r0, #0
 800b26e:	f8dc 3000 	ldr.w	r3, [ip]
 800b272:	b299      	uxth	r1, r3
 800b274:	fb02 6101 	mla	r1, r2, r1, r6
 800b278:	0c1e      	lsrs	r6, r3, #16
 800b27a:	0c0b      	lsrs	r3, r1, #16
 800b27c:	fb02 3306 	mla	r3, r2, r6, r3
 800b280:	b289      	uxth	r1, r1
 800b282:	3001      	adds	r0, #1
 800b284:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b288:	4285      	cmp	r5, r0
 800b28a:	f84c 1b04 	str.w	r1, [ip], #4
 800b28e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b292:	dcec      	bgt.n	800b26e <__multadd+0x12>
 800b294:	b30e      	cbz	r6, 800b2da <__multadd+0x7e>
 800b296:	68a3      	ldr	r3, [r4, #8]
 800b298:	42ab      	cmp	r3, r5
 800b29a:	dc19      	bgt.n	800b2d0 <__multadd+0x74>
 800b29c:	6861      	ldr	r1, [r4, #4]
 800b29e:	4638      	mov	r0, r7
 800b2a0:	3101      	adds	r1, #1
 800b2a2:	f7ff ff79 	bl	800b198 <_Balloc>
 800b2a6:	4680      	mov	r8, r0
 800b2a8:	b928      	cbnz	r0, 800b2b6 <__multadd+0x5a>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e0 <__multadd+0x84>)
 800b2ae:	480d      	ldr	r0, [pc, #52]	@ (800b2e4 <__multadd+0x88>)
 800b2b0:	21ba      	movs	r1, #186	@ 0xba
 800b2b2:	f000 fd19 	bl	800bce8 <__assert_func>
 800b2b6:	6922      	ldr	r2, [r4, #16]
 800b2b8:	3202      	adds	r2, #2
 800b2ba:	f104 010c 	add.w	r1, r4, #12
 800b2be:	0092      	lsls	r2, r2, #2
 800b2c0:	300c      	adds	r0, #12
 800b2c2:	f7ff f800 	bl	800a2c6 <memcpy>
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	f7ff ffa5 	bl	800b218 <_Bfree>
 800b2ce:	4644      	mov	r4, r8
 800b2d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2d4:	3501      	adds	r5, #1
 800b2d6:	615e      	str	r6, [r3, #20]
 800b2d8:	6125      	str	r5, [r4, #16]
 800b2da:	4620      	mov	r0, r4
 800b2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e0:	0800c820 	.word	0x0800c820
 800b2e4:	0800c831 	.word	0x0800c831

0800b2e8 <__hi0bits>:
 800b2e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	bf36      	itet	cc
 800b2f0:	0403      	lslcc	r3, r0, #16
 800b2f2:	2000      	movcs	r0, #0
 800b2f4:	2010      	movcc	r0, #16
 800b2f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b2fa:	bf3c      	itt	cc
 800b2fc:	021b      	lslcc	r3, r3, #8
 800b2fe:	3008      	addcc	r0, #8
 800b300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b304:	bf3c      	itt	cc
 800b306:	011b      	lslcc	r3, r3, #4
 800b308:	3004      	addcc	r0, #4
 800b30a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b30e:	bf3c      	itt	cc
 800b310:	009b      	lslcc	r3, r3, #2
 800b312:	3002      	addcc	r0, #2
 800b314:	2b00      	cmp	r3, #0
 800b316:	db05      	blt.n	800b324 <__hi0bits+0x3c>
 800b318:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b31c:	f100 0001 	add.w	r0, r0, #1
 800b320:	bf08      	it	eq
 800b322:	2020      	moveq	r0, #32
 800b324:	4770      	bx	lr

0800b326 <__lo0bits>:
 800b326:	6803      	ldr	r3, [r0, #0]
 800b328:	4602      	mov	r2, r0
 800b32a:	f013 0007 	ands.w	r0, r3, #7
 800b32e:	d00b      	beq.n	800b348 <__lo0bits+0x22>
 800b330:	07d9      	lsls	r1, r3, #31
 800b332:	d421      	bmi.n	800b378 <__lo0bits+0x52>
 800b334:	0798      	lsls	r0, r3, #30
 800b336:	bf49      	itett	mi
 800b338:	085b      	lsrmi	r3, r3, #1
 800b33a:	089b      	lsrpl	r3, r3, #2
 800b33c:	2001      	movmi	r0, #1
 800b33e:	6013      	strmi	r3, [r2, #0]
 800b340:	bf5c      	itt	pl
 800b342:	6013      	strpl	r3, [r2, #0]
 800b344:	2002      	movpl	r0, #2
 800b346:	4770      	bx	lr
 800b348:	b299      	uxth	r1, r3
 800b34a:	b909      	cbnz	r1, 800b350 <__lo0bits+0x2a>
 800b34c:	0c1b      	lsrs	r3, r3, #16
 800b34e:	2010      	movs	r0, #16
 800b350:	b2d9      	uxtb	r1, r3
 800b352:	b909      	cbnz	r1, 800b358 <__lo0bits+0x32>
 800b354:	3008      	adds	r0, #8
 800b356:	0a1b      	lsrs	r3, r3, #8
 800b358:	0719      	lsls	r1, r3, #28
 800b35a:	bf04      	itt	eq
 800b35c:	091b      	lsreq	r3, r3, #4
 800b35e:	3004      	addeq	r0, #4
 800b360:	0799      	lsls	r1, r3, #30
 800b362:	bf04      	itt	eq
 800b364:	089b      	lsreq	r3, r3, #2
 800b366:	3002      	addeq	r0, #2
 800b368:	07d9      	lsls	r1, r3, #31
 800b36a:	d403      	bmi.n	800b374 <__lo0bits+0x4e>
 800b36c:	085b      	lsrs	r3, r3, #1
 800b36e:	f100 0001 	add.w	r0, r0, #1
 800b372:	d003      	beq.n	800b37c <__lo0bits+0x56>
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	4770      	bx	lr
 800b378:	2000      	movs	r0, #0
 800b37a:	4770      	bx	lr
 800b37c:	2020      	movs	r0, #32
 800b37e:	4770      	bx	lr

0800b380 <__i2b>:
 800b380:	b510      	push	{r4, lr}
 800b382:	460c      	mov	r4, r1
 800b384:	2101      	movs	r1, #1
 800b386:	f7ff ff07 	bl	800b198 <_Balloc>
 800b38a:	4602      	mov	r2, r0
 800b38c:	b928      	cbnz	r0, 800b39a <__i2b+0x1a>
 800b38e:	4b05      	ldr	r3, [pc, #20]	@ (800b3a4 <__i2b+0x24>)
 800b390:	4805      	ldr	r0, [pc, #20]	@ (800b3a8 <__i2b+0x28>)
 800b392:	f240 1145 	movw	r1, #325	@ 0x145
 800b396:	f000 fca7 	bl	800bce8 <__assert_func>
 800b39a:	2301      	movs	r3, #1
 800b39c:	6144      	str	r4, [r0, #20]
 800b39e:	6103      	str	r3, [r0, #16]
 800b3a0:	bd10      	pop	{r4, pc}
 800b3a2:	bf00      	nop
 800b3a4:	0800c820 	.word	0x0800c820
 800b3a8:	0800c831 	.word	0x0800c831

0800b3ac <__multiply>:
 800b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b0:	4617      	mov	r7, r2
 800b3b2:	690a      	ldr	r2, [r1, #16]
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	bfa8      	it	ge
 800b3ba:	463b      	movge	r3, r7
 800b3bc:	4689      	mov	r9, r1
 800b3be:	bfa4      	itt	ge
 800b3c0:	460f      	movge	r7, r1
 800b3c2:	4699      	movge	r9, r3
 800b3c4:	693d      	ldr	r5, [r7, #16]
 800b3c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	eb05 060a 	add.w	r6, r5, sl
 800b3d2:	42b3      	cmp	r3, r6
 800b3d4:	b085      	sub	sp, #20
 800b3d6:	bfb8      	it	lt
 800b3d8:	3101      	addlt	r1, #1
 800b3da:	f7ff fedd 	bl	800b198 <_Balloc>
 800b3de:	b930      	cbnz	r0, 800b3ee <__multiply+0x42>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	4b41      	ldr	r3, [pc, #260]	@ (800b4e8 <__multiply+0x13c>)
 800b3e4:	4841      	ldr	r0, [pc, #260]	@ (800b4ec <__multiply+0x140>)
 800b3e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b3ea:	f000 fc7d 	bl	800bce8 <__assert_func>
 800b3ee:	f100 0414 	add.w	r4, r0, #20
 800b3f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b3f6:	4623      	mov	r3, r4
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	4573      	cmp	r3, lr
 800b3fc:	d320      	bcc.n	800b440 <__multiply+0x94>
 800b3fe:	f107 0814 	add.w	r8, r7, #20
 800b402:	f109 0114 	add.w	r1, r9, #20
 800b406:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b40a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b40e:	9302      	str	r3, [sp, #8]
 800b410:	1beb      	subs	r3, r5, r7
 800b412:	3b15      	subs	r3, #21
 800b414:	f023 0303 	bic.w	r3, r3, #3
 800b418:	3304      	adds	r3, #4
 800b41a:	3715      	adds	r7, #21
 800b41c:	42bd      	cmp	r5, r7
 800b41e:	bf38      	it	cc
 800b420:	2304      	movcc	r3, #4
 800b422:	9301      	str	r3, [sp, #4]
 800b424:	9b02      	ldr	r3, [sp, #8]
 800b426:	9103      	str	r1, [sp, #12]
 800b428:	428b      	cmp	r3, r1
 800b42a:	d80c      	bhi.n	800b446 <__multiply+0x9a>
 800b42c:	2e00      	cmp	r6, #0
 800b42e:	dd03      	ble.n	800b438 <__multiply+0x8c>
 800b430:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b434:	2b00      	cmp	r3, #0
 800b436:	d055      	beq.n	800b4e4 <__multiply+0x138>
 800b438:	6106      	str	r6, [r0, #16]
 800b43a:	b005      	add	sp, #20
 800b43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b440:	f843 2b04 	str.w	r2, [r3], #4
 800b444:	e7d9      	b.n	800b3fa <__multiply+0x4e>
 800b446:	f8b1 a000 	ldrh.w	sl, [r1]
 800b44a:	f1ba 0f00 	cmp.w	sl, #0
 800b44e:	d01f      	beq.n	800b490 <__multiply+0xe4>
 800b450:	46c4      	mov	ip, r8
 800b452:	46a1      	mov	r9, r4
 800b454:	2700      	movs	r7, #0
 800b456:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b45a:	f8d9 3000 	ldr.w	r3, [r9]
 800b45e:	fa1f fb82 	uxth.w	fp, r2
 800b462:	b29b      	uxth	r3, r3
 800b464:	fb0a 330b 	mla	r3, sl, fp, r3
 800b468:	443b      	add	r3, r7
 800b46a:	f8d9 7000 	ldr.w	r7, [r9]
 800b46e:	0c12      	lsrs	r2, r2, #16
 800b470:	0c3f      	lsrs	r7, r7, #16
 800b472:	fb0a 7202 	mla	r2, sl, r2, r7
 800b476:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b480:	4565      	cmp	r5, ip
 800b482:	f849 3b04 	str.w	r3, [r9], #4
 800b486:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b48a:	d8e4      	bhi.n	800b456 <__multiply+0xaa>
 800b48c:	9b01      	ldr	r3, [sp, #4]
 800b48e:	50e7      	str	r7, [r4, r3]
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b496:	3104      	adds	r1, #4
 800b498:	f1b9 0f00 	cmp.w	r9, #0
 800b49c:	d020      	beq.n	800b4e0 <__multiply+0x134>
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	4647      	mov	r7, r8
 800b4a2:	46a4      	mov	ip, r4
 800b4a4:	f04f 0a00 	mov.w	sl, #0
 800b4a8:	f8b7 b000 	ldrh.w	fp, [r7]
 800b4ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b4b0:	fb09 220b 	mla	r2, r9, fp, r2
 800b4b4:	4452      	add	r2, sl
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4bc:	f84c 3b04 	str.w	r3, [ip], #4
 800b4c0:	f857 3b04 	ldr.w	r3, [r7], #4
 800b4c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4c8:	f8bc 3000 	ldrh.w	r3, [ip]
 800b4cc:	fb09 330a 	mla	r3, r9, sl, r3
 800b4d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b4d4:	42bd      	cmp	r5, r7
 800b4d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4da:	d8e5      	bhi.n	800b4a8 <__multiply+0xfc>
 800b4dc:	9a01      	ldr	r2, [sp, #4]
 800b4de:	50a3      	str	r3, [r4, r2]
 800b4e0:	3404      	adds	r4, #4
 800b4e2:	e79f      	b.n	800b424 <__multiply+0x78>
 800b4e4:	3e01      	subs	r6, #1
 800b4e6:	e7a1      	b.n	800b42c <__multiply+0x80>
 800b4e8:	0800c820 	.word	0x0800c820
 800b4ec:	0800c831 	.word	0x0800c831

0800b4f0 <__pow5mult>:
 800b4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f4:	4615      	mov	r5, r2
 800b4f6:	f012 0203 	ands.w	r2, r2, #3
 800b4fa:	4607      	mov	r7, r0
 800b4fc:	460e      	mov	r6, r1
 800b4fe:	d007      	beq.n	800b510 <__pow5mult+0x20>
 800b500:	4c25      	ldr	r4, [pc, #148]	@ (800b598 <__pow5mult+0xa8>)
 800b502:	3a01      	subs	r2, #1
 800b504:	2300      	movs	r3, #0
 800b506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b50a:	f7ff fea7 	bl	800b25c <__multadd>
 800b50e:	4606      	mov	r6, r0
 800b510:	10ad      	asrs	r5, r5, #2
 800b512:	d03d      	beq.n	800b590 <__pow5mult+0xa0>
 800b514:	69fc      	ldr	r4, [r7, #28]
 800b516:	b97c      	cbnz	r4, 800b538 <__pow5mult+0x48>
 800b518:	2010      	movs	r0, #16
 800b51a:	f7ff fd87 	bl	800b02c <malloc>
 800b51e:	4602      	mov	r2, r0
 800b520:	61f8      	str	r0, [r7, #28]
 800b522:	b928      	cbnz	r0, 800b530 <__pow5mult+0x40>
 800b524:	4b1d      	ldr	r3, [pc, #116]	@ (800b59c <__pow5mult+0xac>)
 800b526:	481e      	ldr	r0, [pc, #120]	@ (800b5a0 <__pow5mult+0xb0>)
 800b528:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b52c:	f000 fbdc 	bl	800bce8 <__assert_func>
 800b530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b534:	6004      	str	r4, [r0, #0]
 800b536:	60c4      	str	r4, [r0, #12]
 800b538:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b53c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b540:	b94c      	cbnz	r4, 800b556 <__pow5mult+0x66>
 800b542:	f240 2171 	movw	r1, #625	@ 0x271
 800b546:	4638      	mov	r0, r7
 800b548:	f7ff ff1a 	bl	800b380 <__i2b>
 800b54c:	2300      	movs	r3, #0
 800b54e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b552:	4604      	mov	r4, r0
 800b554:	6003      	str	r3, [r0, #0]
 800b556:	f04f 0900 	mov.w	r9, #0
 800b55a:	07eb      	lsls	r3, r5, #31
 800b55c:	d50a      	bpl.n	800b574 <__pow5mult+0x84>
 800b55e:	4631      	mov	r1, r6
 800b560:	4622      	mov	r2, r4
 800b562:	4638      	mov	r0, r7
 800b564:	f7ff ff22 	bl	800b3ac <__multiply>
 800b568:	4631      	mov	r1, r6
 800b56a:	4680      	mov	r8, r0
 800b56c:	4638      	mov	r0, r7
 800b56e:	f7ff fe53 	bl	800b218 <_Bfree>
 800b572:	4646      	mov	r6, r8
 800b574:	106d      	asrs	r5, r5, #1
 800b576:	d00b      	beq.n	800b590 <__pow5mult+0xa0>
 800b578:	6820      	ldr	r0, [r4, #0]
 800b57a:	b938      	cbnz	r0, 800b58c <__pow5mult+0x9c>
 800b57c:	4622      	mov	r2, r4
 800b57e:	4621      	mov	r1, r4
 800b580:	4638      	mov	r0, r7
 800b582:	f7ff ff13 	bl	800b3ac <__multiply>
 800b586:	6020      	str	r0, [r4, #0]
 800b588:	f8c0 9000 	str.w	r9, [r0]
 800b58c:	4604      	mov	r4, r0
 800b58e:	e7e4      	b.n	800b55a <__pow5mult+0x6a>
 800b590:	4630      	mov	r0, r6
 800b592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b596:	bf00      	nop
 800b598:	0800c8e4 	.word	0x0800c8e4
 800b59c:	0800c7b1 	.word	0x0800c7b1
 800b5a0:	0800c831 	.word	0x0800c831

0800b5a4 <__lshift>:
 800b5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	6849      	ldr	r1, [r1, #4]
 800b5ac:	6923      	ldr	r3, [r4, #16]
 800b5ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5b2:	68a3      	ldr	r3, [r4, #8]
 800b5b4:	4607      	mov	r7, r0
 800b5b6:	4691      	mov	r9, r2
 800b5b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5bc:	f108 0601 	add.w	r6, r8, #1
 800b5c0:	42b3      	cmp	r3, r6
 800b5c2:	db0b      	blt.n	800b5dc <__lshift+0x38>
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	f7ff fde7 	bl	800b198 <_Balloc>
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	b948      	cbnz	r0, 800b5e2 <__lshift+0x3e>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	4b28      	ldr	r3, [pc, #160]	@ (800b674 <__lshift+0xd0>)
 800b5d2:	4829      	ldr	r0, [pc, #164]	@ (800b678 <__lshift+0xd4>)
 800b5d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b5d8:	f000 fb86 	bl	800bce8 <__assert_func>
 800b5dc:	3101      	adds	r1, #1
 800b5de:	005b      	lsls	r3, r3, #1
 800b5e0:	e7ee      	b.n	800b5c0 <__lshift+0x1c>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f100 0114 	add.w	r1, r0, #20
 800b5e8:	f100 0210 	add.w	r2, r0, #16
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	4553      	cmp	r3, sl
 800b5f0:	db33      	blt.n	800b65a <__lshift+0xb6>
 800b5f2:	6920      	ldr	r0, [r4, #16]
 800b5f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5f8:	f104 0314 	add.w	r3, r4, #20
 800b5fc:	f019 091f 	ands.w	r9, r9, #31
 800b600:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b604:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b608:	d02b      	beq.n	800b662 <__lshift+0xbe>
 800b60a:	f1c9 0e20 	rsb	lr, r9, #32
 800b60e:	468a      	mov	sl, r1
 800b610:	2200      	movs	r2, #0
 800b612:	6818      	ldr	r0, [r3, #0]
 800b614:	fa00 f009 	lsl.w	r0, r0, r9
 800b618:	4310      	orrs	r0, r2
 800b61a:	f84a 0b04 	str.w	r0, [sl], #4
 800b61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b622:	459c      	cmp	ip, r3
 800b624:	fa22 f20e 	lsr.w	r2, r2, lr
 800b628:	d8f3      	bhi.n	800b612 <__lshift+0x6e>
 800b62a:	ebac 0304 	sub.w	r3, ip, r4
 800b62e:	3b15      	subs	r3, #21
 800b630:	f023 0303 	bic.w	r3, r3, #3
 800b634:	3304      	adds	r3, #4
 800b636:	f104 0015 	add.w	r0, r4, #21
 800b63a:	4560      	cmp	r0, ip
 800b63c:	bf88      	it	hi
 800b63e:	2304      	movhi	r3, #4
 800b640:	50ca      	str	r2, [r1, r3]
 800b642:	b10a      	cbz	r2, 800b648 <__lshift+0xa4>
 800b644:	f108 0602 	add.w	r6, r8, #2
 800b648:	3e01      	subs	r6, #1
 800b64a:	4638      	mov	r0, r7
 800b64c:	612e      	str	r6, [r5, #16]
 800b64e:	4621      	mov	r1, r4
 800b650:	f7ff fde2 	bl	800b218 <_Bfree>
 800b654:	4628      	mov	r0, r5
 800b656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b65a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b65e:	3301      	adds	r3, #1
 800b660:	e7c5      	b.n	800b5ee <__lshift+0x4a>
 800b662:	3904      	subs	r1, #4
 800b664:	f853 2b04 	ldr.w	r2, [r3], #4
 800b668:	f841 2f04 	str.w	r2, [r1, #4]!
 800b66c:	459c      	cmp	ip, r3
 800b66e:	d8f9      	bhi.n	800b664 <__lshift+0xc0>
 800b670:	e7ea      	b.n	800b648 <__lshift+0xa4>
 800b672:	bf00      	nop
 800b674:	0800c820 	.word	0x0800c820
 800b678:	0800c831 	.word	0x0800c831

0800b67c <__mcmp>:
 800b67c:	690a      	ldr	r2, [r1, #16]
 800b67e:	4603      	mov	r3, r0
 800b680:	6900      	ldr	r0, [r0, #16]
 800b682:	1a80      	subs	r0, r0, r2
 800b684:	b530      	push	{r4, r5, lr}
 800b686:	d10e      	bne.n	800b6a6 <__mcmp+0x2a>
 800b688:	3314      	adds	r3, #20
 800b68a:	3114      	adds	r1, #20
 800b68c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b690:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b694:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b698:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b69c:	4295      	cmp	r5, r2
 800b69e:	d003      	beq.n	800b6a8 <__mcmp+0x2c>
 800b6a0:	d205      	bcs.n	800b6ae <__mcmp+0x32>
 800b6a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6a6:	bd30      	pop	{r4, r5, pc}
 800b6a8:	42a3      	cmp	r3, r4
 800b6aa:	d3f3      	bcc.n	800b694 <__mcmp+0x18>
 800b6ac:	e7fb      	b.n	800b6a6 <__mcmp+0x2a>
 800b6ae:	2001      	movs	r0, #1
 800b6b0:	e7f9      	b.n	800b6a6 <__mcmp+0x2a>
	...

0800b6b4 <__mdiff>:
 800b6b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b8:	4689      	mov	r9, r1
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	4611      	mov	r1, r2
 800b6be:	4648      	mov	r0, r9
 800b6c0:	4614      	mov	r4, r2
 800b6c2:	f7ff ffdb 	bl	800b67c <__mcmp>
 800b6c6:	1e05      	subs	r5, r0, #0
 800b6c8:	d112      	bne.n	800b6f0 <__mdiff+0x3c>
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7ff fd63 	bl	800b198 <_Balloc>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	b928      	cbnz	r0, 800b6e2 <__mdiff+0x2e>
 800b6d6:	4b3f      	ldr	r3, [pc, #252]	@ (800b7d4 <__mdiff+0x120>)
 800b6d8:	f240 2137 	movw	r1, #567	@ 0x237
 800b6dc:	483e      	ldr	r0, [pc, #248]	@ (800b7d8 <__mdiff+0x124>)
 800b6de:	f000 fb03 	bl	800bce8 <__assert_func>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6e8:	4610      	mov	r0, r2
 800b6ea:	b003      	add	sp, #12
 800b6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f0:	bfbc      	itt	lt
 800b6f2:	464b      	movlt	r3, r9
 800b6f4:	46a1      	movlt	r9, r4
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b6fc:	bfba      	itte	lt
 800b6fe:	461c      	movlt	r4, r3
 800b700:	2501      	movlt	r5, #1
 800b702:	2500      	movge	r5, #0
 800b704:	f7ff fd48 	bl	800b198 <_Balloc>
 800b708:	4602      	mov	r2, r0
 800b70a:	b918      	cbnz	r0, 800b714 <__mdiff+0x60>
 800b70c:	4b31      	ldr	r3, [pc, #196]	@ (800b7d4 <__mdiff+0x120>)
 800b70e:	f240 2145 	movw	r1, #581	@ 0x245
 800b712:	e7e3      	b.n	800b6dc <__mdiff+0x28>
 800b714:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b718:	6926      	ldr	r6, [r4, #16]
 800b71a:	60c5      	str	r5, [r0, #12]
 800b71c:	f109 0310 	add.w	r3, r9, #16
 800b720:	f109 0514 	add.w	r5, r9, #20
 800b724:	f104 0e14 	add.w	lr, r4, #20
 800b728:	f100 0b14 	add.w	fp, r0, #20
 800b72c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b730:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	46d9      	mov	r9, fp
 800b738:	f04f 0c00 	mov.w	ip, #0
 800b73c:	9b01      	ldr	r3, [sp, #4]
 800b73e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b742:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	fa1f f38a 	uxth.w	r3, sl
 800b74c:	4619      	mov	r1, r3
 800b74e:	b283      	uxth	r3, r0
 800b750:	1acb      	subs	r3, r1, r3
 800b752:	0c00      	lsrs	r0, r0, #16
 800b754:	4463      	add	r3, ip
 800b756:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b75a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b75e:	b29b      	uxth	r3, r3
 800b760:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b764:	4576      	cmp	r6, lr
 800b766:	f849 3b04 	str.w	r3, [r9], #4
 800b76a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b76e:	d8e5      	bhi.n	800b73c <__mdiff+0x88>
 800b770:	1b33      	subs	r3, r6, r4
 800b772:	3b15      	subs	r3, #21
 800b774:	f023 0303 	bic.w	r3, r3, #3
 800b778:	3415      	adds	r4, #21
 800b77a:	3304      	adds	r3, #4
 800b77c:	42a6      	cmp	r6, r4
 800b77e:	bf38      	it	cc
 800b780:	2304      	movcc	r3, #4
 800b782:	441d      	add	r5, r3
 800b784:	445b      	add	r3, fp
 800b786:	461e      	mov	r6, r3
 800b788:	462c      	mov	r4, r5
 800b78a:	4544      	cmp	r4, r8
 800b78c:	d30e      	bcc.n	800b7ac <__mdiff+0xf8>
 800b78e:	f108 0103 	add.w	r1, r8, #3
 800b792:	1b49      	subs	r1, r1, r5
 800b794:	f021 0103 	bic.w	r1, r1, #3
 800b798:	3d03      	subs	r5, #3
 800b79a:	45a8      	cmp	r8, r5
 800b79c:	bf38      	it	cc
 800b79e:	2100      	movcc	r1, #0
 800b7a0:	440b      	add	r3, r1
 800b7a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7a6:	b191      	cbz	r1, 800b7ce <__mdiff+0x11a>
 800b7a8:	6117      	str	r7, [r2, #16]
 800b7aa:	e79d      	b.n	800b6e8 <__mdiff+0x34>
 800b7ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800b7b0:	46e6      	mov	lr, ip
 800b7b2:	0c08      	lsrs	r0, r1, #16
 800b7b4:	fa1c fc81 	uxtah	ip, ip, r1
 800b7b8:	4471      	add	r1, lr
 800b7ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b7be:	b289      	uxth	r1, r1
 800b7c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b7c4:	f846 1b04 	str.w	r1, [r6], #4
 800b7c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b7cc:	e7dd      	b.n	800b78a <__mdiff+0xd6>
 800b7ce:	3f01      	subs	r7, #1
 800b7d0:	e7e7      	b.n	800b7a2 <__mdiff+0xee>
 800b7d2:	bf00      	nop
 800b7d4:	0800c820 	.word	0x0800c820
 800b7d8:	0800c831 	.word	0x0800c831

0800b7dc <__d2b>:
 800b7dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7e0:	460f      	mov	r7, r1
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	ec59 8b10 	vmov	r8, r9, d0
 800b7e8:	4616      	mov	r6, r2
 800b7ea:	f7ff fcd5 	bl	800b198 <_Balloc>
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	b930      	cbnz	r0, 800b800 <__d2b+0x24>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	4b23      	ldr	r3, [pc, #140]	@ (800b884 <__d2b+0xa8>)
 800b7f6:	4824      	ldr	r0, [pc, #144]	@ (800b888 <__d2b+0xac>)
 800b7f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800b7fc:	f000 fa74 	bl	800bce8 <__assert_func>
 800b800:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b804:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b808:	b10d      	cbz	r5, 800b80e <__d2b+0x32>
 800b80a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	f1b8 0300 	subs.w	r3, r8, #0
 800b814:	d023      	beq.n	800b85e <__d2b+0x82>
 800b816:	4668      	mov	r0, sp
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	f7ff fd84 	bl	800b326 <__lo0bits>
 800b81e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b822:	b1d0      	cbz	r0, 800b85a <__d2b+0x7e>
 800b824:	f1c0 0320 	rsb	r3, r0, #32
 800b828:	fa02 f303 	lsl.w	r3, r2, r3
 800b82c:	430b      	orrs	r3, r1
 800b82e:	40c2      	lsrs	r2, r0
 800b830:	6163      	str	r3, [r4, #20]
 800b832:	9201      	str	r2, [sp, #4]
 800b834:	9b01      	ldr	r3, [sp, #4]
 800b836:	61a3      	str	r3, [r4, #24]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	bf0c      	ite	eq
 800b83c:	2201      	moveq	r2, #1
 800b83e:	2202      	movne	r2, #2
 800b840:	6122      	str	r2, [r4, #16]
 800b842:	b1a5      	cbz	r5, 800b86e <__d2b+0x92>
 800b844:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b848:	4405      	add	r5, r0
 800b84a:	603d      	str	r5, [r7, #0]
 800b84c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b850:	6030      	str	r0, [r6, #0]
 800b852:	4620      	mov	r0, r4
 800b854:	b003      	add	sp, #12
 800b856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b85a:	6161      	str	r1, [r4, #20]
 800b85c:	e7ea      	b.n	800b834 <__d2b+0x58>
 800b85e:	a801      	add	r0, sp, #4
 800b860:	f7ff fd61 	bl	800b326 <__lo0bits>
 800b864:	9b01      	ldr	r3, [sp, #4]
 800b866:	6163      	str	r3, [r4, #20]
 800b868:	3020      	adds	r0, #32
 800b86a:	2201      	movs	r2, #1
 800b86c:	e7e8      	b.n	800b840 <__d2b+0x64>
 800b86e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b872:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b876:	6038      	str	r0, [r7, #0]
 800b878:	6918      	ldr	r0, [r3, #16]
 800b87a:	f7ff fd35 	bl	800b2e8 <__hi0bits>
 800b87e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b882:	e7e5      	b.n	800b850 <__d2b+0x74>
 800b884:	0800c820 	.word	0x0800c820
 800b888:	0800c831 	.word	0x0800c831

0800b88c <__ssputs_r>:
 800b88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b890:	688e      	ldr	r6, [r1, #8]
 800b892:	461f      	mov	r7, r3
 800b894:	42be      	cmp	r6, r7
 800b896:	680b      	ldr	r3, [r1, #0]
 800b898:	4682      	mov	sl, r0
 800b89a:	460c      	mov	r4, r1
 800b89c:	4690      	mov	r8, r2
 800b89e:	d82d      	bhi.n	800b8fc <__ssputs_r+0x70>
 800b8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b8a8:	d026      	beq.n	800b8f8 <__ssputs_r+0x6c>
 800b8aa:	6965      	ldr	r5, [r4, #20]
 800b8ac:	6909      	ldr	r1, [r1, #16]
 800b8ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8b2:	eba3 0901 	sub.w	r9, r3, r1
 800b8b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8ba:	1c7b      	adds	r3, r7, #1
 800b8bc:	444b      	add	r3, r9
 800b8be:	106d      	asrs	r5, r5, #1
 800b8c0:	429d      	cmp	r5, r3
 800b8c2:	bf38      	it	cc
 800b8c4:	461d      	movcc	r5, r3
 800b8c6:	0553      	lsls	r3, r2, #21
 800b8c8:	d527      	bpl.n	800b91a <__ssputs_r+0x8e>
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	f7ff fbd8 	bl	800b080 <_malloc_r>
 800b8d0:	4606      	mov	r6, r0
 800b8d2:	b360      	cbz	r0, 800b92e <__ssputs_r+0xa2>
 800b8d4:	6921      	ldr	r1, [r4, #16]
 800b8d6:	464a      	mov	r2, r9
 800b8d8:	f7fe fcf5 	bl	800a2c6 <memcpy>
 800b8dc:	89a3      	ldrh	r3, [r4, #12]
 800b8de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b8e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8e6:	81a3      	strh	r3, [r4, #12]
 800b8e8:	6126      	str	r6, [r4, #16]
 800b8ea:	6165      	str	r5, [r4, #20]
 800b8ec:	444e      	add	r6, r9
 800b8ee:	eba5 0509 	sub.w	r5, r5, r9
 800b8f2:	6026      	str	r6, [r4, #0]
 800b8f4:	60a5      	str	r5, [r4, #8]
 800b8f6:	463e      	mov	r6, r7
 800b8f8:	42be      	cmp	r6, r7
 800b8fa:	d900      	bls.n	800b8fe <__ssputs_r+0x72>
 800b8fc:	463e      	mov	r6, r7
 800b8fe:	6820      	ldr	r0, [r4, #0]
 800b900:	4632      	mov	r2, r6
 800b902:	4641      	mov	r1, r8
 800b904:	f000 f9c6 	bl	800bc94 <memmove>
 800b908:	68a3      	ldr	r3, [r4, #8]
 800b90a:	1b9b      	subs	r3, r3, r6
 800b90c:	60a3      	str	r3, [r4, #8]
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	4433      	add	r3, r6
 800b912:	6023      	str	r3, [r4, #0]
 800b914:	2000      	movs	r0, #0
 800b916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91a:	462a      	mov	r2, r5
 800b91c:	f000 fa28 	bl	800bd70 <_realloc_r>
 800b920:	4606      	mov	r6, r0
 800b922:	2800      	cmp	r0, #0
 800b924:	d1e0      	bne.n	800b8e8 <__ssputs_r+0x5c>
 800b926:	6921      	ldr	r1, [r4, #16]
 800b928:	4650      	mov	r0, sl
 800b92a:	f7ff fb35 	bl	800af98 <_free_r>
 800b92e:	230c      	movs	r3, #12
 800b930:	f8ca 3000 	str.w	r3, [sl]
 800b934:	89a3      	ldrh	r3, [r4, #12]
 800b936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b93a:	81a3      	strh	r3, [r4, #12]
 800b93c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b940:	e7e9      	b.n	800b916 <__ssputs_r+0x8a>
	...

0800b944 <_svfiprintf_r>:
 800b944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b948:	4698      	mov	r8, r3
 800b94a:	898b      	ldrh	r3, [r1, #12]
 800b94c:	061b      	lsls	r3, r3, #24
 800b94e:	b09d      	sub	sp, #116	@ 0x74
 800b950:	4607      	mov	r7, r0
 800b952:	460d      	mov	r5, r1
 800b954:	4614      	mov	r4, r2
 800b956:	d510      	bpl.n	800b97a <_svfiprintf_r+0x36>
 800b958:	690b      	ldr	r3, [r1, #16]
 800b95a:	b973      	cbnz	r3, 800b97a <_svfiprintf_r+0x36>
 800b95c:	2140      	movs	r1, #64	@ 0x40
 800b95e:	f7ff fb8f 	bl	800b080 <_malloc_r>
 800b962:	6028      	str	r0, [r5, #0]
 800b964:	6128      	str	r0, [r5, #16]
 800b966:	b930      	cbnz	r0, 800b976 <_svfiprintf_r+0x32>
 800b968:	230c      	movs	r3, #12
 800b96a:	603b      	str	r3, [r7, #0]
 800b96c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b970:	b01d      	add	sp, #116	@ 0x74
 800b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b976:	2340      	movs	r3, #64	@ 0x40
 800b978:	616b      	str	r3, [r5, #20]
 800b97a:	2300      	movs	r3, #0
 800b97c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b97e:	2320      	movs	r3, #32
 800b980:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b984:	f8cd 800c 	str.w	r8, [sp, #12]
 800b988:	2330      	movs	r3, #48	@ 0x30
 800b98a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bb28 <_svfiprintf_r+0x1e4>
 800b98e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b992:	f04f 0901 	mov.w	r9, #1
 800b996:	4623      	mov	r3, r4
 800b998:	469a      	mov	sl, r3
 800b99a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b99e:	b10a      	cbz	r2, 800b9a4 <_svfiprintf_r+0x60>
 800b9a0:	2a25      	cmp	r2, #37	@ 0x25
 800b9a2:	d1f9      	bne.n	800b998 <_svfiprintf_r+0x54>
 800b9a4:	ebba 0b04 	subs.w	fp, sl, r4
 800b9a8:	d00b      	beq.n	800b9c2 <_svfiprintf_r+0x7e>
 800b9aa:	465b      	mov	r3, fp
 800b9ac:	4622      	mov	r2, r4
 800b9ae:	4629      	mov	r1, r5
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	f7ff ff6b 	bl	800b88c <__ssputs_r>
 800b9b6:	3001      	adds	r0, #1
 800b9b8:	f000 80a7 	beq.w	800bb0a <_svfiprintf_r+0x1c6>
 800b9bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9be:	445a      	add	r2, fp
 800b9c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f000 809f 	beq.w	800bb0a <_svfiprintf_r+0x1c6>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9d6:	f10a 0a01 	add.w	sl, sl, #1
 800b9da:	9304      	str	r3, [sp, #16]
 800b9dc:	9307      	str	r3, [sp, #28]
 800b9de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9e4:	4654      	mov	r4, sl
 800b9e6:	2205      	movs	r2, #5
 800b9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ec:	484e      	ldr	r0, [pc, #312]	@ (800bb28 <_svfiprintf_r+0x1e4>)
 800b9ee:	f7f4 fc1f 	bl	8000230 <memchr>
 800b9f2:	9a04      	ldr	r2, [sp, #16]
 800b9f4:	b9d8      	cbnz	r0, 800ba2e <_svfiprintf_r+0xea>
 800b9f6:	06d0      	lsls	r0, r2, #27
 800b9f8:	bf44      	itt	mi
 800b9fa:	2320      	movmi	r3, #32
 800b9fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba00:	0711      	lsls	r1, r2, #28
 800ba02:	bf44      	itt	mi
 800ba04:	232b      	movmi	r3, #43	@ 0x2b
 800ba06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba10:	d015      	beq.n	800ba3e <_svfiprintf_r+0xfa>
 800ba12:	9a07      	ldr	r2, [sp, #28]
 800ba14:	4654      	mov	r4, sl
 800ba16:	2000      	movs	r0, #0
 800ba18:	f04f 0c0a 	mov.w	ip, #10
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba22:	3b30      	subs	r3, #48	@ 0x30
 800ba24:	2b09      	cmp	r3, #9
 800ba26:	d94b      	bls.n	800bac0 <_svfiprintf_r+0x17c>
 800ba28:	b1b0      	cbz	r0, 800ba58 <_svfiprintf_r+0x114>
 800ba2a:	9207      	str	r2, [sp, #28]
 800ba2c:	e014      	b.n	800ba58 <_svfiprintf_r+0x114>
 800ba2e:	eba0 0308 	sub.w	r3, r0, r8
 800ba32:	fa09 f303 	lsl.w	r3, r9, r3
 800ba36:	4313      	orrs	r3, r2
 800ba38:	9304      	str	r3, [sp, #16]
 800ba3a:	46a2      	mov	sl, r4
 800ba3c:	e7d2      	b.n	800b9e4 <_svfiprintf_r+0xa0>
 800ba3e:	9b03      	ldr	r3, [sp, #12]
 800ba40:	1d19      	adds	r1, r3, #4
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	9103      	str	r1, [sp, #12]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	bfbb      	ittet	lt
 800ba4a:	425b      	neglt	r3, r3
 800ba4c:	f042 0202 	orrlt.w	r2, r2, #2
 800ba50:	9307      	strge	r3, [sp, #28]
 800ba52:	9307      	strlt	r3, [sp, #28]
 800ba54:	bfb8      	it	lt
 800ba56:	9204      	strlt	r2, [sp, #16]
 800ba58:	7823      	ldrb	r3, [r4, #0]
 800ba5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba5c:	d10a      	bne.n	800ba74 <_svfiprintf_r+0x130>
 800ba5e:	7863      	ldrb	r3, [r4, #1]
 800ba60:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba62:	d132      	bne.n	800baca <_svfiprintf_r+0x186>
 800ba64:	9b03      	ldr	r3, [sp, #12]
 800ba66:	1d1a      	adds	r2, r3, #4
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	9203      	str	r2, [sp, #12]
 800ba6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba70:	3402      	adds	r4, #2
 800ba72:	9305      	str	r3, [sp, #20]
 800ba74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bb38 <_svfiprintf_r+0x1f4>
 800ba78:	7821      	ldrb	r1, [r4, #0]
 800ba7a:	2203      	movs	r2, #3
 800ba7c:	4650      	mov	r0, sl
 800ba7e:	f7f4 fbd7 	bl	8000230 <memchr>
 800ba82:	b138      	cbz	r0, 800ba94 <_svfiprintf_r+0x150>
 800ba84:	9b04      	ldr	r3, [sp, #16]
 800ba86:	eba0 000a 	sub.w	r0, r0, sl
 800ba8a:	2240      	movs	r2, #64	@ 0x40
 800ba8c:	4082      	lsls	r2, r0
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	3401      	adds	r4, #1
 800ba92:	9304      	str	r3, [sp, #16]
 800ba94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba98:	4824      	ldr	r0, [pc, #144]	@ (800bb2c <_svfiprintf_r+0x1e8>)
 800ba9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba9e:	2206      	movs	r2, #6
 800baa0:	f7f4 fbc6 	bl	8000230 <memchr>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d036      	beq.n	800bb16 <_svfiprintf_r+0x1d2>
 800baa8:	4b21      	ldr	r3, [pc, #132]	@ (800bb30 <_svfiprintf_r+0x1ec>)
 800baaa:	bb1b      	cbnz	r3, 800baf4 <_svfiprintf_r+0x1b0>
 800baac:	9b03      	ldr	r3, [sp, #12]
 800baae:	3307      	adds	r3, #7
 800bab0:	f023 0307 	bic.w	r3, r3, #7
 800bab4:	3308      	adds	r3, #8
 800bab6:	9303      	str	r3, [sp, #12]
 800bab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baba:	4433      	add	r3, r6
 800babc:	9309      	str	r3, [sp, #36]	@ 0x24
 800babe:	e76a      	b.n	800b996 <_svfiprintf_r+0x52>
 800bac0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bac4:	460c      	mov	r4, r1
 800bac6:	2001      	movs	r0, #1
 800bac8:	e7a8      	b.n	800ba1c <_svfiprintf_r+0xd8>
 800baca:	2300      	movs	r3, #0
 800bacc:	3401      	adds	r4, #1
 800bace:	9305      	str	r3, [sp, #20]
 800bad0:	4619      	mov	r1, r3
 800bad2:	f04f 0c0a 	mov.w	ip, #10
 800bad6:	4620      	mov	r0, r4
 800bad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800badc:	3a30      	subs	r2, #48	@ 0x30
 800bade:	2a09      	cmp	r2, #9
 800bae0:	d903      	bls.n	800baea <_svfiprintf_r+0x1a6>
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d0c6      	beq.n	800ba74 <_svfiprintf_r+0x130>
 800bae6:	9105      	str	r1, [sp, #20]
 800bae8:	e7c4      	b.n	800ba74 <_svfiprintf_r+0x130>
 800baea:	fb0c 2101 	mla	r1, ip, r1, r2
 800baee:	4604      	mov	r4, r0
 800baf0:	2301      	movs	r3, #1
 800baf2:	e7f0      	b.n	800bad6 <_svfiprintf_r+0x192>
 800baf4:	ab03      	add	r3, sp, #12
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	462a      	mov	r2, r5
 800bafa:	4b0e      	ldr	r3, [pc, #56]	@ (800bb34 <_svfiprintf_r+0x1f0>)
 800bafc:	a904      	add	r1, sp, #16
 800bafe:	4638      	mov	r0, r7
 800bb00:	f7fd fe70 	bl	80097e4 <_printf_float>
 800bb04:	1c42      	adds	r2, r0, #1
 800bb06:	4606      	mov	r6, r0
 800bb08:	d1d6      	bne.n	800bab8 <_svfiprintf_r+0x174>
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	065b      	lsls	r3, r3, #25
 800bb0e:	f53f af2d 	bmi.w	800b96c <_svfiprintf_r+0x28>
 800bb12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb14:	e72c      	b.n	800b970 <_svfiprintf_r+0x2c>
 800bb16:	ab03      	add	r3, sp, #12
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	462a      	mov	r2, r5
 800bb1c:	4b05      	ldr	r3, [pc, #20]	@ (800bb34 <_svfiprintf_r+0x1f0>)
 800bb1e:	a904      	add	r1, sp, #16
 800bb20:	4638      	mov	r0, r7
 800bb22:	f7fe f8f7 	bl	8009d14 <_printf_i>
 800bb26:	e7ed      	b.n	800bb04 <_svfiprintf_r+0x1c0>
 800bb28:	0800c88a 	.word	0x0800c88a
 800bb2c:	0800c894 	.word	0x0800c894
 800bb30:	080097e5 	.word	0x080097e5
 800bb34:	0800b88d 	.word	0x0800b88d
 800bb38:	0800c890 	.word	0x0800c890

0800bb3c <__sflush_r>:
 800bb3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb44:	0716      	lsls	r6, r2, #28
 800bb46:	4605      	mov	r5, r0
 800bb48:	460c      	mov	r4, r1
 800bb4a:	d454      	bmi.n	800bbf6 <__sflush_r+0xba>
 800bb4c:	684b      	ldr	r3, [r1, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	dc02      	bgt.n	800bb58 <__sflush_r+0x1c>
 800bb52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	dd48      	ble.n	800bbea <__sflush_r+0xae>
 800bb58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb5a:	2e00      	cmp	r6, #0
 800bb5c:	d045      	beq.n	800bbea <__sflush_r+0xae>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb64:	682f      	ldr	r7, [r5, #0]
 800bb66:	6a21      	ldr	r1, [r4, #32]
 800bb68:	602b      	str	r3, [r5, #0]
 800bb6a:	d030      	beq.n	800bbce <__sflush_r+0x92>
 800bb6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb6e:	89a3      	ldrh	r3, [r4, #12]
 800bb70:	0759      	lsls	r1, r3, #29
 800bb72:	d505      	bpl.n	800bb80 <__sflush_r+0x44>
 800bb74:	6863      	ldr	r3, [r4, #4]
 800bb76:	1ad2      	subs	r2, r2, r3
 800bb78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb7a:	b10b      	cbz	r3, 800bb80 <__sflush_r+0x44>
 800bb7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb7e:	1ad2      	subs	r2, r2, r3
 800bb80:	2300      	movs	r3, #0
 800bb82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb84:	6a21      	ldr	r1, [r4, #32]
 800bb86:	4628      	mov	r0, r5
 800bb88:	47b0      	blx	r6
 800bb8a:	1c43      	adds	r3, r0, #1
 800bb8c:	89a3      	ldrh	r3, [r4, #12]
 800bb8e:	d106      	bne.n	800bb9e <__sflush_r+0x62>
 800bb90:	6829      	ldr	r1, [r5, #0]
 800bb92:	291d      	cmp	r1, #29
 800bb94:	d82b      	bhi.n	800bbee <__sflush_r+0xb2>
 800bb96:	4a2a      	ldr	r2, [pc, #168]	@ (800bc40 <__sflush_r+0x104>)
 800bb98:	40ca      	lsrs	r2, r1
 800bb9a:	07d6      	lsls	r6, r2, #31
 800bb9c:	d527      	bpl.n	800bbee <__sflush_r+0xb2>
 800bb9e:	2200      	movs	r2, #0
 800bba0:	6062      	str	r2, [r4, #4]
 800bba2:	04d9      	lsls	r1, r3, #19
 800bba4:	6922      	ldr	r2, [r4, #16]
 800bba6:	6022      	str	r2, [r4, #0]
 800bba8:	d504      	bpl.n	800bbb4 <__sflush_r+0x78>
 800bbaa:	1c42      	adds	r2, r0, #1
 800bbac:	d101      	bne.n	800bbb2 <__sflush_r+0x76>
 800bbae:	682b      	ldr	r3, [r5, #0]
 800bbb0:	b903      	cbnz	r3, 800bbb4 <__sflush_r+0x78>
 800bbb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bbb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbb6:	602f      	str	r7, [r5, #0]
 800bbb8:	b1b9      	cbz	r1, 800bbea <__sflush_r+0xae>
 800bbba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbbe:	4299      	cmp	r1, r3
 800bbc0:	d002      	beq.n	800bbc8 <__sflush_r+0x8c>
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	f7ff f9e8 	bl	800af98 <_free_r>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbcc:	e00d      	b.n	800bbea <__sflush_r+0xae>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	47b0      	blx	r6
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	1c50      	adds	r0, r2, #1
 800bbd8:	d1c9      	bne.n	800bb6e <__sflush_r+0x32>
 800bbda:	682b      	ldr	r3, [r5, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d0c6      	beq.n	800bb6e <__sflush_r+0x32>
 800bbe0:	2b1d      	cmp	r3, #29
 800bbe2:	d001      	beq.n	800bbe8 <__sflush_r+0xac>
 800bbe4:	2b16      	cmp	r3, #22
 800bbe6:	d11e      	bne.n	800bc26 <__sflush_r+0xea>
 800bbe8:	602f      	str	r7, [r5, #0]
 800bbea:	2000      	movs	r0, #0
 800bbec:	e022      	b.n	800bc34 <__sflush_r+0xf8>
 800bbee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbf2:	b21b      	sxth	r3, r3
 800bbf4:	e01b      	b.n	800bc2e <__sflush_r+0xf2>
 800bbf6:	690f      	ldr	r7, [r1, #16]
 800bbf8:	2f00      	cmp	r7, #0
 800bbfa:	d0f6      	beq.n	800bbea <__sflush_r+0xae>
 800bbfc:	0793      	lsls	r3, r2, #30
 800bbfe:	680e      	ldr	r6, [r1, #0]
 800bc00:	bf08      	it	eq
 800bc02:	694b      	ldreq	r3, [r1, #20]
 800bc04:	600f      	str	r7, [r1, #0]
 800bc06:	bf18      	it	ne
 800bc08:	2300      	movne	r3, #0
 800bc0a:	eba6 0807 	sub.w	r8, r6, r7
 800bc0e:	608b      	str	r3, [r1, #8]
 800bc10:	f1b8 0f00 	cmp.w	r8, #0
 800bc14:	dde9      	ble.n	800bbea <__sflush_r+0xae>
 800bc16:	6a21      	ldr	r1, [r4, #32]
 800bc18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc1a:	4643      	mov	r3, r8
 800bc1c:	463a      	mov	r2, r7
 800bc1e:	4628      	mov	r0, r5
 800bc20:	47b0      	blx	r6
 800bc22:	2800      	cmp	r0, #0
 800bc24:	dc08      	bgt.n	800bc38 <__sflush_r+0xfc>
 800bc26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc2e:	81a3      	strh	r3, [r4, #12]
 800bc30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc38:	4407      	add	r7, r0
 800bc3a:	eba8 0800 	sub.w	r8, r8, r0
 800bc3e:	e7e7      	b.n	800bc10 <__sflush_r+0xd4>
 800bc40:	20400001 	.word	0x20400001

0800bc44 <_fflush_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	690b      	ldr	r3, [r1, #16]
 800bc48:	4605      	mov	r5, r0
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	b913      	cbnz	r3, 800bc54 <_fflush_r+0x10>
 800bc4e:	2500      	movs	r5, #0
 800bc50:	4628      	mov	r0, r5
 800bc52:	bd38      	pop	{r3, r4, r5, pc}
 800bc54:	b118      	cbz	r0, 800bc5e <_fflush_r+0x1a>
 800bc56:	6a03      	ldr	r3, [r0, #32]
 800bc58:	b90b      	cbnz	r3, 800bc5e <_fflush_r+0x1a>
 800bc5a:	f7fe fa05 	bl	800a068 <__sinit>
 800bc5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d0f3      	beq.n	800bc4e <_fflush_r+0xa>
 800bc66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc68:	07d0      	lsls	r0, r2, #31
 800bc6a:	d404      	bmi.n	800bc76 <_fflush_r+0x32>
 800bc6c:	0599      	lsls	r1, r3, #22
 800bc6e:	d402      	bmi.n	800bc76 <_fflush_r+0x32>
 800bc70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc72:	f7fe fb26 	bl	800a2c2 <__retarget_lock_acquire_recursive>
 800bc76:	4628      	mov	r0, r5
 800bc78:	4621      	mov	r1, r4
 800bc7a:	f7ff ff5f 	bl	800bb3c <__sflush_r>
 800bc7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc80:	07da      	lsls	r2, r3, #31
 800bc82:	4605      	mov	r5, r0
 800bc84:	d4e4      	bmi.n	800bc50 <_fflush_r+0xc>
 800bc86:	89a3      	ldrh	r3, [r4, #12]
 800bc88:	059b      	lsls	r3, r3, #22
 800bc8a:	d4e1      	bmi.n	800bc50 <_fflush_r+0xc>
 800bc8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc8e:	f7fe fb19 	bl	800a2c4 <__retarget_lock_release_recursive>
 800bc92:	e7dd      	b.n	800bc50 <_fflush_r+0xc>

0800bc94 <memmove>:
 800bc94:	4288      	cmp	r0, r1
 800bc96:	b510      	push	{r4, lr}
 800bc98:	eb01 0402 	add.w	r4, r1, r2
 800bc9c:	d902      	bls.n	800bca4 <memmove+0x10>
 800bc9e:	4284      	cmp	r4, r0
 800bca0:	4623      	mov	r3, r4
 800bca2:	d807      	bhi.n	800bcb4 <memmove+0x20>
 800bca4:	1e43      	subs	r3, r0, #1
 800bca6:	42a1      	cmp	r1, r4
 800bca8:	d008      	beq.n	800bcbc <memmove+0x28>
 800bcaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcb2:	e7f8      	b.n	800bca6 <memmove+0x12>
 800bcb4:	4402      	add	r2, r0
 800bcb6:	4601      	mov	r1, r0
 800bcb8:	428a      	cmp	r2, r1
 800bcba:	d100      	bne.n	800bcbe <memmove+0x2a>
 800bcbc:	bd10      	pop	{r4, pc}
 800bcbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcc6:	e7f7      	b.n	800bcb8 <memmove+0x24>

0800bcc8 <_sbrk_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4d06      	ldr	r5, [pc, #24]	@ (800bce4 <_sbrk_r+0x1c>)
 800bccc:	2300      	movs	r3, #0
 800bcce:	4604      	mov	r4, r0
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	602b      	str	r3, [r5, #0]
 800bcd4:	f7f5 ff3e 	bl	8001b54 <_sbrk>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d102      	bne.n	800bce2 <_sbrk_r+0x1a>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	b103      	cbz	r3, 800bce2 <_sbrk_r+0x1a>
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	bd38      	pop	{r3, r4, r5, pc}
 800bce4:	20000cc4 	.word	0x20000cc4

0800bce8 <__assert_func>:
 800bce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcea:	4614      	mov	r4, r2
 800bcec:	461a      	mov	r2, r3
 800bcee:	4b09      	ldr	r3, [pc, #36]	@ (800bd14 <__assert_func+0x2c>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4605      	mov	r5, r0
 800bcf4:	68d8      	ldr	r0, [r3, #12]
 800bcf6:	b14c      	cbz	r4, 800bd0c <__assert_func+0x24>
 800bcf8:	4b07      	ldr	r3, [pc, #28]	@ (800bd18 <__assert_func+0x30>)
 800bcfa:	9100      	str	r1, [sp, #0]
 800bcfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd00:	4906      	ldr	r1, [pc, #24]	@ (800bd1c <__assert_func+0x34>)
 800bd02:	462b      	mov	r3, r5
 800bd04:	f000 f870 	bl	800bde8 <fiprintf>
 800bd08:	f000 f880 	bl	800be0c <abort>
 800bd0c:	4b04      	ldr	r3, [pc, #16]	@ (800bd20 <__assert_func+0x38>)
 800bd0e:	461c      	mov	r4, r3
 800bd10:	e7f3      	b.n	800bcfa <__assert_func+0x12>
 800bd12:	bf00      	nop
 800bd14:	200003d4 	.word	0x200003d4
 800bd18:	0800c8a5 	.word	0x0800c8a5
 800bd1c:	0800c8b2 	.word	0x0800c8b2
 800bd20:	0800c8e0 	.word	0x0800c8e0

0800bd24 <_calloc_r>:
 800bd24:	b570      	push	{r4, r5, r6, lr}
 800bd26:	fba1 5402 	umull	r5, r4, r1, r2
 800bd2a:	b934      	cbnz	r4, 800bd3a <_calloc_r+0x16>
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	f7ff f9a7 	bl	800b080 <_malloc_r>
 800bd32:	4606      	mov	r6, r0
 800bd34:	b928      	cbnz	r0, 800bd42 <_calloc_r+0x1e>
 800bd36:	4630      	mov	r0, r6
 800bd38:	bd70      	pop	{r4, r5, r6, pc}
 800bd3a:	220c      	movs	r2, #12
 800bd3c:	6002      	str	r2, [r0, #0]
 800bd3e:	2600      	movs	r6, #0
 800bd40:	e7f9      	b.n	800bd36 <_calloc_r+0x12>
 800bd42:	462a      	mov	r2, r5
 800bd44:	4621      	mov	r1, r4
 800bd46:	f7fe fa3e 	bl	800a1c6 <memset>
 800bd4a:	e7f4      	b.n	800bd36 <_calloc_r+0x12>

0800bd4c <__ascii_mbtowc>:
 800bd4c:	b082      	sub	sp, #8
 800bd4e:	b901      	cbnz	r1, 800bd52 <__ascii_mbtowc+0x6>
 800bd50:	a901      	add	r1, sp, #4
 800bd52:	b142      	cbz	r2, 800bd66 <__ascii_mbtowc+0x1a>
 800bd54:	b14b      	cbz	r3, 800bd6a <__ascii_mbtowc+0x1e>
 800bd56:	7813      	ldrb	r3, [r2, #0]
 800bd58:	600b      	str	r3, [r1, #0]
 800bd5a:	7812      	ldrb	r2, [r2, #0]
 800bd5c:	1e10      	subs	r0, r2, #0
 800bd5e:	bf18      	it	ne
 800bd60:	2001      	movne	r0, #1
 800bd62:	b002      	add	sp, #8
 800bd64:	4770      	bx	lr
 800bd66:	4610      	mov	r0, r2
 800bd68:	e7fb      	b.n	800bd62 <__ascii_mbtowc+0x16>
 800bd6a:	f06f 0001 	mvn.w	r0, #1
 800bd6e:	e7f8      	b.n	800bd62 <__ascii_mbtowc+0x16>

0800bd70 <_realloc_r>:
 800bd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd74:	4607      	mov	r7, r0
 800bd76:	4614      	mov	r4, r2
 800bd78:	460d      	mov	r5, r1
 800bd7a:	b921      	cbnz	r1, 800bd86 <_realloc_r+0x16>
 800bd7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd80:	4611      	mov	r1, r2
 800bd82:	f7ff b97d 	b.w	800b080 <_malloc_r>
 800bd86:	b92a      	cbnz	r2, 800bd94 <_realloc_r+0x24>
 800bd88:	f7ff f906 	bl	800af98 <_free_r>
 800bd8c:	4625      	mov	r5, r4
 800bd8e:	4628      	mov	r0, r5
 800bd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd94:	f000 f841 	bl	800be1a <_malloc_usable_size_r>
 800bd98:	4284      	cmp	r4, r0
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	d802      	bhi.n	800bda4 <_realloc_r+0x34>
 800bd9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bda2:	d8f4      	bhi.n	800bd8e <_realloc_r+0x1e>
 800bda4:	4621      	mov	r1, r4
 800bda6:	4638      	mov	r0, r7
 800bda8:	f7ff f96a 	bl	800b080 <_malloc_r>
 800bdac:	4680      	mov	r8, r0
 800bdae:	b908      	cbnz	r0, 800bdb4 <_realloc_r+0x44>
 800bdb0:	4645      	mov	r5, r8
 800bdb2:	e7ec      	b.n	800bd8e <_realloc_r+0x1e>
 800bdb4:	42b4      	cmp	r4, r6
 800bdb6:	4622      	mov	r2, r4
 800bdb8:	4629      	mov	r1, r5
 800bdba:	bf28      	it	cs
 800bdbc:	4632      	movcs	r2, r6
 800bdbe:	f7fe fa82 	bl	800a2c6 <memcpy>
 800bdc2:	4629      	mov	r1, r5
 800bdc4:	4638      	mov	r0, r7
 800bdc6:	f7ff f8e7 	bl	800af98 <_free_r>
 800bdca:	e7f1      	b.n	800bdb0 <_realloc_r+0x40>

0800bdcc <__ascii_wctomb>:
 800bdcc:	4603      	mov	r3, r0
 800bdce:	4608      	mov	r0, r1
 800bdd0:	b141      	cbz	r1, 800bde4 <__ascii_wctomb+0x18>
 800bdd2:	2aff      	cmp	r2, #255	@ 0xff
 800bdd4:	d904      	bls.n	800bde0 <__ascii_wctomb+0x14>
 800bdd6:	228a      	movs	r2, #138	@ 0x8a
 800bdd8:	601a      	str	r2, [r3, #0]
 800bdda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdde:	4770      	bx	lr
 800bde0:	700a      	strb	r2, [r1, #0]
 800bde2:	2001      	movs	r0, #1
 800bde4:	4770      	bx	lr
	...

0800bde8 <fiprintf>:
 800bde8:	b40e      	push	{r1, r2, r3}
 800bdea:	b503      	push	{r0, r1, lr}
 800bdec:	4601      	mov	r1, r0
 800bdee:	ab03      	add	r3, sp, #12
 800bdf0:	4805      	ldr	r0, [pc, #20]	@ (800be08 <fiprintf+0x20>)
 800bdf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf6:	6800      	ldr	r0, [r0, #0]
 800bdf8:	9301      	str	r3, [sp, #4]
 800bdfa:	f000 f83f 	bl	800be7c <_vfiprintf_r>
 800bdfe:	b002      	add	sp, #8
 800be00:	f85d eb04 	ldr.w	lr, [sp], #4
 800be04:	b003      	add	sp, #12
 800be06:	4770      	bx	lr
 800be08:	200003d4 	.word	0x200003d4

0800be0c <abort>:
 800be0c:	b508      	push	{r3, lr}
 800be0e:	2006      	movs	r0, #6
 800be10:	f000 fa08 	bl	800c224 <raise>
 800be14:	2001      	movs	r0, #1
 800be16:	f7f5 fe25 	bl	8001a64 <_exit>

0800be1a <_malloc_usable_size_r>:
 800be1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be1e:	1f18      	subs	r0, r3, #4
 800be20:	2b00      	cmp	r3, #0
 800be22:	bfbc      	itt	lt
 800be24:	580b      	ldrlt	r3, [r1, r0]
 800be26:	18c0      	addlt	r0, r0, r3
 800be28:	4770      	bx	lr

0800be2a <__sfputc_r>:
 800be2a:	6893      	ldr	r3, [r2, #8]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	2b00      	cmp	r3, #0
 800be30:	b410      	push	{r4}
 800be32:	6093      	str	r3, [r2, #8]
 800be34:	da08      	bge.n	800be48 <__sfputc_r+0x1e>
 800be36:	6994      	ldr	r4, [r2, #24]
 800be38:	42a3      	cmp	r3, r4
 800be3a:	db01      	blt.n	800be40 <__sfputc_r+0x16>
 800be3c:	290a      	cmp	r1, #10
 800be3e:	d103      	bne.n	800be48 <__sfputc_r+0x1e>
 800be40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be44:	f000 b932 	b.w	800c0ac <__swbuf_r>
 800be48:	6813      	ldr	r3, [r2, #0]
 800be4a:	1c58      	adds	r0, r3, #1
 800be4c:	6010      	str	r0, [r2, #0]
 800be4e:	7019      	strb	r1, [r3, #0]
 800be50:	4608      	mov	r0, r1
 800be52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <__sfputs_r>:
 800be58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5a:	4606      	mov	r6, r0
 800be5c:	460f      	mov	r7, r1
 800be5e:	4614      	mov	r4, r2
 800be60:	18d5      	adds	r5, r2, r3
 800be62:	42ac      	cmp	r4, r5
 800be64:	d101      	bne.n	800be6a <__sfputs_r+0x12>
 800be66:	2000      	movs	r0, #0
 800be68:	e007      	b.n	800be7a <__sfputs_r+0x22>
 800be6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be6e:	463a      	mov	r2, r7
 800be70:	4630      	mov	r0, r6
 800be72:	f7ff ffda 	bl	800be2a <__sfputc_r>
 800be76:	1c43      	adds	r3, r0, #1
 800be78:	d1f3      	bne.n	800be62 <__sfputs_r+0xa>
 800be7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be7c <_vfiprintf_r>:
 800be7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be80:	460d      	mov	r5, r1
 800be82:	b09d      	sub	sp, #116	@ 0x74
 800be84:	4614      	mov	r4, r2
 800be86:	4698      	mov	r8, r3
 800be88:	4606      	mov	r6, r0
 800be8a:	b118      	cbz	r0, 800be94 <_vfiprintf_r+0x18>
 800be8c:	6a03      	ldr	r3, [r0, #32]
 800be8e:	b90b      	cbnz	r3, 800be94 <_vfiprintf_r+0x18>
 800be90:	f7fe f8ea 	bl	800a068 <__sinit>
 800be94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be96:	07d9      	lsls	r1, r3, #31
 800be98:	d405      	bmi.n	800bea6 <_vfiprintf_r+0x2a>
 800be9a:	89ab      	ldrh	r3, [r5, #12]
 800be9c:	059a      	lsls	r2, r3, #22
 800be9e:	d402      	bmi.n	800bea6 <_vfiprintf_r+0x2a>
 800bea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bea2:	f7fe fa0e 	bl	800a2c2 <__retarget_lock_acquire_recursive>
 800bea6:	89ab      	ldrh	r3, [r5, #12]
 800bea8:	071b      	lsls	r3, r3, #28
 800beaa:	d501      	bpl.n	800beb0 <_vfiprintf_r+0x34>
 800beac:	692b      	ldr	r3, [r5, #16]
 800beae:	b99b      	cbnz	r3, 800bed8 <_vfiprintf_r+0x5c>
 800beb0:	4629      	mov	r1, r5
 800beb2:	4630      	mov	r0, r6
 800beb4:	f000 f938 	bl	800c128 <__swsetup_r>
 800beb8:	b170      	cbz	r0, 800bed8 <_vfiprintf_r+0x5c>
 800beba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bebc:	07dc      	lsls	r4, r3, #31
 800bebe:	d504      	bpl.n	800beca <_vfiprintf_r+0x4e>
 800bec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bec4:	b01d      	add	sp, #116	@ 0x74
 800bec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beca:	89ab      	ldrh	r3, [r5, #12]
 800becc:	0598      	lsls	r0, r3, #22
 800bece:	d4f7      	bmi.n	800bec0 <_vfiprintf_r+0x44>
 800bed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bed2:	f7fe f9f7 	bl	800a2c4 <__retarget_lock_release_recursive>
 800bed6:	e7f3      	b.n	800bec0 <_vfiprintf_r+0x44>
 800bed8:	2300      	movs	r3, #0
 800beda:	9309      	str	r3, [sp, #36]	@ 0x24
 800bedc:	2320      	movs	r3, #32
 800bede:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bee2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bee6:	2330      	movs	r3, #48	@ 0x30
 800bee8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c098 <_vfiprintf_r+0x21c>
 800beec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bef0:	f04f 0901 	mov.w	r9, #1
 800bef4:	4623      	mov	r3, r4
 800bef6:	469a      	mov	sl, r3
 800bef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800befc:	b10a      	cbz	r2, 800bf02 <_vfiprintf_r+0x86>
 800befe:	2a25      	cmp	r2, #37	@ 0x25
 800bf00:	d1f9      	bne.n	800bef6 <_vfiprintf_r+0x7a>
 800bf02:	ebba 0b04 	subs.w	fp, sl, r4
 800bf06:	d00b      	beq.n	800bf20 <_vfiprintf_r+0xa4>
 800bf08:	465b      	mov	r3, fp
 800bf0a:	4622      	mov	r2, r4
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	4630      	mov	r0, r6
 800bf10:	f7ff ffa2 	bl	800be58 <__sfputs_r>
 800bf14:	3001      	adds	r0, #1
 800bf16:	f000 80a7 	beq.w	800c068 <_vfiprintf_r+0x1ec>
 800bf1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf1c:	445a      	add	r2, fp
 800bf1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf20:	f89a 3000 	ldrb.w	r3, [sl]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 809f 	beq.w	800c068 <_vfiprintf_r+0x1ec>
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf34:	f10a 0a01 	add.w	sl, sl, #1
 800bf38:	9304      	str	r3, [sp, #16]
 800bf3a:	9307      	str	r3, [sp, #28]
 800bf3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf40:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf42:	4654      	mov	r4, sl
 800bf44:	2205      	movs	r2, #5
 800bf46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf4a:	4853      	ldr	r0, [pc, #332]	@ (800c098 <_vfiprintf_r+0x21c>)
 800bf4c:	f7f4 f970 	bl	8000230 <memchr>
 800bf50:	9a04      	ldr	r2, [sp, #16]
 800bf52:	b9d8      	cbnz	r0, 800bf8c <_vfiprintf_r+0x110>
 800bf54:	06d1      	lsls	r1, r2, #27
 800bf56:	bf44      	itt	mi
 800bf58:	2320      	movmi	r3, #32
 800bf5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf5e:	0713      	lsls	r3, r2, #28
 800bf60:	bf44      	itt	mi
 800bf62:	232b      	movmi	r3, #43	@ 0x2b
 800bf64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf68:	f89a 3000 	ldrb.w	r3, [sl]
 800bf6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf6e:	d015      	beq.n	800bf9c <_vfiprintf_r+0x120>
 800bf70:	9a07      	ldr	r2, [sp, #28]
 800bf72:	4654      	mov	r4, sl
 800bf74:	2000      	movs	r0, #0
 800bf76:	f04f 0c0a 	mov.w	ip, #10
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf80:	3b30      	subs	r3, #48	@ 0x30
 800bf82:	2b09      	cmp	r3, #9
 800bf84:	d94b      	bls.n	800c01e <_vfiprintf_r+0x1a2>
 800bf86:	b1b0      	cbz	r0, 800bfb6 <_vfiprintf_r+0x13a>
 800bf88:	9207      	str	r2, [sp, #28]
 800bf8a:	e014      	b.n	800bfb6 <_vfiprintf_r+0x13a>
 800bf8c:	eba0 0308 	sub.w	r3, r0, r8
 800bf90:	fa09 f303 	lsl.w	r3, r9, r3
 800bf94:	4313      	orrs	r3, r2
 800bf96:	9304      	str	r3, [sp, #16]
 800bf98:	46a2      	mov	sl, r4
 800bf9a:	e7d2      	b.n	800bf42 <_vfiprintf_r+0xc6>
 800bf9c:	9b03      	ldr	r3, [sp, #12]
 800bf9e:	1d19      	adds	r1, r3, #4
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	9103      	str	r1, [sp, #12]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	bfbb      	ittet	lt
 800bfa8:	425b      	neglt	r3, r3
 800bfaa:	f042 0202 	orrlt.w	r2, r2, #2
 800bfae:	9307      	strge	r3, [sp, #28]
 800bfb0:	9307      	strlt	r3, [sp, #28]
 800bfb2:	bfb8      	it	lt
 800bfb4:	9204      	strlt	r2, [sp, #16]
 800bfb6:	7823      	ldrb	r3, [r4, #0]
 800bfb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfba:	d10a      	bne.n	800bfd2 <_vfiprintf_r+0x156>
 800bfbc:	7863      	ldrb	r3, [r4, #1]
 800bfbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfc0:	d132      	bne.n	800c028 <_vfiprintf_r+0x1ac>
 800bfc2:	9b03      	ldr	r3, [sp, #12]
 800bfc4:	1d1a      	adds	r2, r3, #4
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	9203      	str	r2, [sp, #12]
 800bfca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfce:	3402      	adds	r4, #2
 800bfd0:	9305      	str	r3, [sp, #20]
 800bfd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c0a8 <_vfiprintf_r+0x22c>
 800bfd6:	7821      	ldrb	r1, [r4, #0]
 800bfd8:	2203      	movs	r2, #3
 800bfda:	4650      	mov	r0, sl
 800bfdc:	f7f4 f928 	bl	8000230 <memchr>
 800bfe0:	b138      	cbz	r0, 800bff2 <_vfiprintf_r+0x176>
 800bfe2:	9b04      	ldr	r3, [sp, #16]
 800bfe4:	eba0 000a 	sub.w	r0, r0, sl
 800bfe8:	2240      	movs	r2, #64	@ 0x40
 800bfea:	4082      	lsls	r2, r0
 800bfec:	4313      	orrs	r3, r2
 800bfee:	3401      	adds	r4, #1
 800bff0:	9304      	str	r3, [sp, #16]
 800bff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bff6:	4829      	ldr	r0, [pc, #164]	@ (800c09c <_vfiprintf_r+0x220>)
 800bff8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bffc:	2206      	movs	r2, #6
 800bffe:	f7f4 f917 	bl	8000230 <memchr>
 800c002:	2800      	cmp	r0, #0
 800c004:	d03f      	beq.n	800c086 <_vfiprintf_r+0x20a>
 800c006:	4b26      	ldr	r3, [pc, #152]	@ (800c0a0 <_vfiprintf_r+0x224>)
 800c008:	bb1b      	cbnz	r3, 800c052 <_vfiprintf_r+0x1d6>
 800c00a:	9b03      	ldr	r3, [sp, #12]
 800c00c:	3307      	adds	r3, #7
 800c00e:	f023 0307 	bic.w	r3, r3, #7
 800c012:	3308      	adds	r3, #8
 800c014:	9303      	str	r3, [sp, #12]
 800c016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c018:	443b      	add	r3, r7
 800c01a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c01c:	e76a      	b.n	800bef4 <_vfiprintf_r+0x78>
 800c01e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c022:	460c      	mov	r4, r1
 800c024:	2001      	movs	r0, #1
 800c026:	e7a8      	b.n	800bf7a <_vfiprintf_r+0xfe>
 800c028:	2300      	movs	r3, #0
 800c02a:	3401      	adds	r4, #1
 800c02c:	9305      	str	r3, [sp, #20]
 800c02e:	4619      	mov	r1, r3
 800c030:	f04f 0c0a 	mov.w	ip, #10
 800c034:	4620      	mov	r0, r4
 800c036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c03a:	3a30      	subs	r2, #48	@ 0x30
 800c03c:	2a09      	cmp	r2, #9
 800c03e:	d903      	bls.n	800c048 <_vfiprintf_r+0x1cc>
 800c040:	2b00      	cmp	r3, #0
 800c042:	d0c6      	beq.n	800bfd2 <_vfiprintf_r+0x156>
 800c044:	9105      	str	r1, [sp, #20]
 800c046:	e7c4      	b.n	800bfd2 <_vfiprintf_r+0x156>
 800c048:	fb0c 2101 	mla	r1, ip, r1, r2
 800c04c:	4604      	mov	r4, r0
 800c04e:	2301      	movs	r3, #1
 800c050:	e7f0      	b.n	800c034 <_vfiprintf_r+0x1b8>
 800c052:	ab03      	add	r3, sp, #12
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	462a      	mov	r2, r5
 800c058:	4b12      	ldr	r3, [pc, #72]	@ (800c0a4 <_vfiprintf_r+0x228>)
 800c05a:	a904      	add	r1, sp, #16
 800c05c:	4630      	mov	r0, r6
 800c05e:	f7fd fbc1 	bl	80097e4 <_printf_float>
 800c062:	4607      	mov	r7, r0
 800c064:	1c78      	adds	r0, r7, #1
 800c066:	d1d6      	bne.n	800c016 <_vfiprintf_r+0x19a>
 800c068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c06a:	07d9      	lsls	r1, r3, #31
 800c06c:	d405      	bmi.n	800c07a <_vfiprintf_r+0x1fe>
 800c06e:	89ab      	ldrh	r3, [r5, #12]
 800c070:	059a      	lsls	r2, r3, #22
 800c072:	d402      	bmi.n	800c07a <_vfiprintf_r+0x1fe>
 800c074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c076:	f7fe f925 	bl	800a2c4 <__retarget_lock_release_recursive>
 800c07a:	89ab      	ldrh	r3, [r5, #12]
 800c07c:	065b      	lsls	r3, r3, #25
 800c07e:	f53f af1f 	bmi.w	800bec0 <_vfiprintf_r+0x44>
 800c082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c084:	e71e      	b.n	800bec4 <_vfiprintf_r+0x48>
 800c086:	ab03      	add	r3, sp, #12
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	462a      	mov	r2, r5
 800c08c:	4b05      	ldr	r3, [pc, #20]	@ (800c0a4 <_vfiprintf_r+0x228>)
 800c08e:	a904      	add	r1, sp, #16
 800c090:	4630      	mov	r0, r6
 800c092:	f7fd fe3f 	bl	8009d14 <_printf_i>
 800c096:	e7e4      	b.n	800c062 <_vfiprintf_r+0x1e6>
 800c098:	0800c88a 	.word	0x0800c88a
 800c09c:	0800c894 	.word	0x0800c894
 800c0a0:	080097e5 	.word	0x080097e5
 800c0a4:	0800be59 	.word	0x0800be59
 800c0a8:	0800c890 	.word	0x0800c890

0800c0ac <__swbuf_r>:
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	460e      	mov	r6, r1
 800c0b0:	4614      	mov	r4, r2
 800c0b2:	4605      	mov	r5, r0
 800c0b4:	b118      	cbz	r0, 800c0be <__swbuf_r+0x12>
 800c0b6:	6a03      	ldr	r3, [r0, #32]
 800c0b8:	b90b      	cbnz	r3, 800c0be <__swbuf_r+0x12>
 800c0ba:	f7fd ffd5 	bl	800a068 <__sinit>
 800c0be:	69a3      	ldr	r3, [r4, #24]
 800c0c0:	60a3      	str	r3, [r4, #8]
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	071a      	lsls	r2, r3, #28
 800c0c6:	d501      	bpl.n	800c0cc <__swbuf_r+0x20>
 800c0c8:	6923      	ldr	r3, [r4, #16]
 800c0ca:	b943      	cbnz	r3, 800c0de <__swbuf_r+0x32>
 800c0cc:	4621      	mov	r1, r4
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	f000 f82a 	bl	800c128 <__swsetup_r>
 800c0d4:	b118      	cbz	r0, 800c0de <__swbuf_r+0x32>
 800c0d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c0da:	4638      	mov	r0, r7
 800c0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	6922      	ldr	r2, [r4, #16]
 800c0e2:	1a98      	subs	r0, r3, r2
 800c0e4:	6963      	ldr	r3, [r4, #20]
 800c0e6:	b2f6      	uxtb	r6, r6
 800c0e8:	4283      	cmp	r3, r0
 800c0ea:	4637      	mov	r7, r6
 800c0ec:	dc05      	bgt.n	800c0fa <__swbuf_r+0x4e>
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f7ff fda7 	bl	800bc44 <_fflush_r>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d1ed      	bne.n	800c0d6 <__swbuf_r+0x2a>
 800c0fa:	68a3      	ldr	r3, [r4, #8]
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	60a3      	str	r3, [r4, #8]
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	1c5a      	adds	r2, r3, #1
 800c104:	6022      	str	r2, [r4, #0]
 800c106:	701e      	strb	r6, [r3, #0]
 800c108:	6962      	ldr	r2, [r4, #20]
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d004      	beq.n	800c11a <__swbuf_r+0x6e>
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	07db      	lsls	r3, r3, #31
 800c114:	d5e1      	bpl.n	800c0da <__swbuf_r+0x2e>
 800c116:	2e0a      	cmp	r6, #10
 800c118:	d1df      	bne.n	800c0da <__swbuf_r+0x2e>
 800c11a:	4621      	mov	r1, r4
 800c11c:	4628      	mov	r0, r5
 800c11e:	f7ff fd91 	bl	800bc44 <_fflush_r>
 800c122:	2800      	cmp	r0, #0
 800c124:	d0d9      	beq.n	800c0da <__swbuf_r+0x2e>
 800c126:	e7d6      	b.n	800c0d6 <__swbuf_r+0x2a>

0800c128 <__swsetup_r>:
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	4b29      	ldr	r3, [pc, #164]	@ (800c1d0 <__swsetup_r+0xa8>)
 800c12c:	4605      	mov	r5, r0
 800c12e:	6818      	ldr	r0, [r3, #0]
 800c130:	460c      	mov	r4, r1
 800c132:	b118      	cbz	r0, 800c13c <__swsetup_r+0x14>
 800c134:	6a03      	ldr	r3, [r0, #32]
 800c136:	b90b      	cbnz	r3, 800c13c <__swsetup_r+0x14>
 800c138:	f7fd ff96 	bl	800a068 <__sinit>
 800c13c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c140:	0719      	lsls	r1, r3, #28
 800c142:	d422      	bmi.n	800c18a <__swsetup_r+0x62>
 800c144:	06da      	lsls	r2, r3, #27
 800c146:	d407      	bmi.n	800c158 <__swsetup_r+0x30>
 800c148:	2209      	movs	r2, #9
 800c14a:	602a      	str	r2, [r5, #0]
 800c14c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c150:	81a3      	strh	r3, [r4, #12]
 800c152:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c156:	e033      	b.n	800c1c0 <__swsetup_r+0x98>
 800c158:	0758      	lsls	r0, r3, #29
 800c15a:	d512      	bpl.n	800c182 <__swsetup_r+0x5a>
 800c15c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c15e:	b141      	cbz	r1, 800c172 <__swsetup_r+0x4a>
 800c160:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c164:	4299      	cmp	r1, r3
 800c166:	d002      	beq.n	800c16e <__swsetup_r+0x46>
 800c168:	4628      	mov	r0, r5
 800c16a:	f7fe ff15 	bl	800af98 <_free_r>
 800c16e:	2300      	movs	r3, #0
 800c170:	6363      	str	r3, [r4, #52]	@ 0x34
 800c172:	89a3      	ldrh	r3, [r4, #12]
 800c174:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c178:	81a3      	strh	r3, [r4, #12]
 800c17a:	2300      	movs	r3, #0
 800c17c:	6063      	str	r3, [r4, #4]
 800c17e:	6923      	ldr	r3, [r4, #16]
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	89a3      	ldrh	r3, [r4, #12]
 800c184:	f043 0308 	orr.w	r3, r3, #8
 800c188:	81a3      	strh	r3, [r4, #12]
 800c18a:	6923      	ldr	r3, [r4, #16]
 800c18c:	b94b      	cbnz	r3, 800c1a2 <__swsetup_r+0x7a>
 800c18e:	89a3      	ldrh	r3, [r4, #12]
 800c190:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c198:	d003      	beq.n	800c1a2 <__swsetup_r+0x7a>
 800c19a:	4621      	mov	r1, r4
 800c19c:	4628      	mov	r0, r5
 800c19e:	f000 f883 	bl	800c2a8 <__smakebuf_r>
 800c1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1a6:	f013 0201 	ands.w	r2, r3, #1
 800c1aa:	d00a      	beq.n	800c1c2 <__swsetup_r+0x9a>
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	60a2      	str	r2, [r4, #8]
 800c1b0:	6962      	ldr	r2, [r4, #20]
 800c1b2:	4252      	negs	r2, r2
 800c1b4:	61a2      	str	r2, [r4, #24]
 800c1b6:	6922      	ldr	r2, [r4, #16]
 800c1b8:	b942      	cbnz	r2, 800c1cc <__swsetup_r+0xa4>
 800c1ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c1be:	d1c5      	bne.n	800c14c <__swsetup_r+0x24>
 800c1c0:	bd38      	pop	{r3, r4, r5, pc}
 800c1c2:	0799      	lsls	r1, r3, #30
 800c1c4:	bf58      	it	pl
 800c1c6:	6962      	ldrpl	r2, [r4, #20]
 800c1c8:	60a2      	str	r2, [r4, #8]
 800c1ca:	e7f4      	b.n	800c1b6 <__swsetup_r+0x8e>
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	e7f7      	b.n	800c1c0 <__swsetup_r+0x98>
 800c1d0:	200003d4 	.word	0x200003d4

0800c1d4 <_raise_r>:
 800c1d4:	291f      	cmp	r1, #31
 800c1d6:	b538      	push	{r3, r4, r5, lr}
 800c1d8:	4605      	mov	r5, r0
 800c1da:	460c      	mov	r4, r1
 800c1dc:	d904      	bls.n	800c1e8 <_raise_r+0x14>
 800c1de:	2316      	movs	r3, #22
 800c1e0:	6003      	str	r3, [r0, #0]
 800c1e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1e6:	bd38      	pop	{r3, r4, r5, pc}
 800c1e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c1ea:	b112      	cbz	r2, 800c1f2 <_raise_r+0x1e>
 800c1ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1f0:	b94b      	cbnz	r3, 800c206 <_raise_r+0x32>
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	f000 f830 	bl	800c258 <_getpid_r>
 800c1f8:	4622      	mov	r2, r4
 800c1fa:	4601      	mov	r1, r0
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c202:	f000 b817 	b.w	800c234 <_kill_r>
 800c206:	2b01      	cmp	r3, #1
 800c208:	d00a      	beq.n	800c220 <_raise_r+0x4c>
 800c20a:	1c59      	adds	r1, r3, #1
 800c20c:	d103      	bne.n	800c216 <_raise_r+0x42>
 800c20e:	2316      	movs	r3, #22
 800c210:	6003      	str	r3, [r0, #0]
 800c212:	2001      	movs	r0, #1
 800c214:	e7e7      	b.n	800c1e6 <_raise_r+0x12>
 800c216:	2100      	movs	r1, #0
 800c218:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c21c:	4620      	mov	r0, r4
 800c21e:	4798      	blx	r3
 800c220:	2000      	movs	r0, #0
 800c222:	e7e0      	b.n	800c1e6 <_raise_r+0x12>

0800c224 <raise>:
 800c224:	4b02      	ldr	r3, [pc, #8]	@ (800c230 <raise+0xc>)
 800c226:	4601      	mov	r1, r0
 800c228:	6818      	ldr	r0, [r3, #0]
 800c22a:	f7ff bfd3 	b.w	800c1d4 <_raise_r>
 800c22e:	bf00      	nop
 800c230:	200003d4 	.word	0x200003d4

0800c234 <_kill_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4d07      	ldr	r5, [pc, #28]	@ (800c254 <_kill_r+0x20>)
 800c238:	2300      	movs	r3, #0
 800c23a:	4604      	mov	r4, r0
 800c23c:	4608      	mov	r0, r1
 800c23e:	4611      	mov	r1, r2
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	f7f5 fbff 	bl	8001a44 <_kill>
 800c246:	1c43      	adds	r3, r0, #1
 800c248:	d102      	bne.n	800c250 <_kill_r+0x1c>
 800c24a:	682b      	ldr	r3, [r5, #0]
 800c24c:	b103      	cbz	r3, 800c250 <_kill_r+0x1c>
 800c24e:	6023      	str	r3, [r4, #0]
 800c250:	bd38      	pop	{r3, r4, r5, pc}
 800c252:	bf00      	nop
 800c254:	20000cc4 	.word	0x20000cc4

0800c258 <_getpid_r>:
 800c258:	f7f5 bbec 	b.w	8001a34 <_getpid>

0800c25c <__swhatbuf_r>:
 800c25c:	b570      	push	{r4, r5, r6, lr}
 800c25e:	460c      	mov	r4, r1
 800c260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c264:	2900      	cmp	r1, #0
 800c266:	b096      	sub	sp, #88	@ 0x58
 800c268:	4615      	mov	r5, r2
 800c26a:	461e      	mov	r6, r3
 800c26c:	da0d      	bge.n	800c28a <__swhatbuf_r+0x2e>
 800c26e:	89a3      	ldrh	r3, [r4, #12]
 800c270:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c274:	f04f 0100 	mov.w	r1, #0
 800c278:	bf14      	ite	ne
 800c27a:	2340      	movne	r3, #64	@ 0x40
 800c27c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c280:	2000      	movs	r0, #0
 800c282:	6031      	str	r1, [r6, #0]
 800c284:	602b      	str	r3, [r5, #0]
 800c286:	b016      	add	sp, #88	@ 0x58
 800c288:	bd70      	pop	{r4, r5, r6, pc}
 800c28a:	466a      	mov	r2, sp
 800c28c:	f000 f848 	bl	800c320 <_fstat_r>
 800c290:	2800      	cmp	r0, #0
 800c292:	dbec      	blt.n	800c26e <__swhatbuf_r+0x12>
 800c294:	9901      	ldr	r1, [sp, #4]
 800c296:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c29a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c29e:	4259      	negs	r1, r3
 800c2a0:	4159      	adcs	r1, r3
 800c2a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2a6:	e7eb      	b.n	800c280 <__swhatbuf_r+0x24>

0800c2a8 <__smakebuf_r>:
 800c2a8:	898b      	ldrh	r3, [r1, #12]
 800c2aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2ac:	079d      	lsls	r5, r3, #30
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	d507      	bpl.n	800c2c4 <__smakebuf_r+0x1c>
 800c2b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c2b8:	6023      	str	r3, [r4, #0]
 800c2ba:	6123      	str	r3, [r4, #16]
 800c2bc:	2301      	movs	r3, #1
 800c2be:	6163      	str	r3, [r4, #20]
 800c2c0:	b003      	add	sp, #12
 800c2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2c4:	ab01      	add	r3, sp, #4
 800c2c6:	466a      	mov	r2, sp
 800c2c8:	f7ff ffc8 	bl	800c25c <__swhatbuf_r>
 800c2cc:	9f00      	ldr	r7, [sp, #0]
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	4639      	mov	r1, r7
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f7fe fed4 	bl	800b080 <_malloc_r>
 800c2d8:	b948      	cbnz	r0, 800c2ee <__smakebuf_r+0x46>
 800c2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2de:	059a      	lsls	r2, r3, #22
 800c2e0:	d4ee      	bmi.n	800c2c0 <__smakebuf_r+0x18>
 800c2e2:	f023 0303 	bic.w	r3, r3, #3
 800c2e6:	f043 0302 	orr.w	r3, r3, #2
 800c2ea:	81a3      	strh	r3, [r4, #12]
 800c2ec:	e7e2      	b.n	800c2b4 <__smakebuf_r+0xc>
 800c2ee:	89a3      	ldrh	r3, [r4, #12]
 800c2f0:	6020      	str	r0, [r4, #0]
 800c2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2f6:	81a3      	strh	r3, [r4, #12]
 800c2f8:	9b01      	ldr	r3, [sp, #4]
 800c2fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c2fe:	b15b      	cbz	r3, 800c318 <__smakebuf_r+0x70>
 800c300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c304:	4630      	mov	r0, r6
 800c306:	f000 f81d 	bl	800c344 <_isatty_r>
 800c30a:	b128      	cbz	r0, 800c318 <__smakebuf_r+0x70>
 800c30c:	89a3      	ldrh	r3, [r4, #12]
 800c30e:	f023 0303 	bic.w	r3, r3, #3
 800c312:	f043 0301 	orr.w	r3, r3, #1
 800c316:	81a3      	strh	r3, [r4, #12]
 800c318:	89a3      	ldrh	r3, [r4, #12]
 800c31a:	431d      	orrs	r5, r3
 800c31c:	81a5      	strh	r5, [r4, #12]
 800c31e:	e7cf      	b.n	800c2c0 <__smakebuf_r+0x18>

0800c320 <_fstat_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	4d07      	ldr	r5, [pc, #28]	@ (800c340 <_fstat_r+0x20>)
 800c324:	2300      	movs	r3, #0
 800c326:	4604      	mov	r4, r0
 800c328:	4608      	mov	r0, r1
 800c32a:	4611      	mov	r1, r2
 800c32c:	602b      	str	r3, [r5, #0]
 800c32e:	f7f5 fbe9 	bl	8001b04 <_fstat>
 800c332:	1c43      	adds	r3, r0, #1
 800c334:	d102      	bne.n	800c33c <_fstat_r+0x1c>
 800c336:	682b      	ldr	r3, [r5, #0]
 800c338:	b103      	cbz	r3, 800c33c <_fstat_r+0x1c>
 800c33a:	6023      	str	r3, [r4, #0]
 800c33c:	bd38      	pop	{r3, r4, r5, pc}
 800c33e:	bf00      	nop
 800c340:	20000cc4 	.word	0x20000cc4

0800c344 <_isatty_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4d06      	ldr	r5, [pc, #24]	@ (800c360 <_isatty_r+0x1c>)
 800c348:	2300      	movs	r3, #0
 800c34a:	4604      	mov	r4, r0
 800c34c:	4608      	mov	r0, r1
 800c34e:	602b      	str	r3, [r5, #0]
 800c350:	f7f5 fbe8 	bl	8001b24 <_isatty>
 800c354:	1c43      	adds	r3, r0, #1
 800c356:	d102      	bne.n	800c35e <_isatty_r+0x1a>
 800c358:	682b      	ldr	r3, [r5, #0]
 800c35a:	b103      	cbz	r3, 800c35e <_isatty_r+0x1a>
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	bd38      	pop	{r3, r4, r5, pc}
 800c360:	20000cc4 	.word	0x20000cc4

0800c364 <atan2f>:
 800c364:	f000 b800 	b.w	800c368 <__ieee754_atan2f>

0800c368 <__ieee754_atan2f>:
 800c368:	ee10 2a90 	vmov	r2, s1
 800c36c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c370:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c374:	b510      	push	{r4, lr}
 800c376:	eef0 7a40 	vmov.f32	s15, s0
 800c37a:	d806      	bhi.n	800c38a <__ieee754_atan2f+0x22>
 800c37c:	ee10 0a10 	vmov	r0, s0
 800c380:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c384:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c388:	d904      	bls.n	800c394 <__ieee754_atan2f+0x2c>
 800c38a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c38e:	eeb0 0a67 	vmov.f32	s0, s15
 800c392:	bd10      	pop	{r4, pc}
 800c394:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c398:	d103      	bne.n	800c3a2 <__ieee754_atan2f+0x3a>
 800c39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c39e:	f000 b883 	b.w	800c4a8 <atanf>
 800c3a2:	1794      	asrs	r4, r2, #30
 800c3a4:	f004 0402 	and.w	r4, r4, #2
 800c3a8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c3ac:	b943      	cbnz	r3, 800c3c0 <__ieee754_atan2f+0x58>
 800c3ae:	2c02      	cmp	r4, #2
 800c3b0:	d05e      	beq.n	800c470 <__ieee754_atan2f+0x108>
 800c3b2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c484 <__ieee754_atan2f+0x11c>
 800c3b6:	2c03      	cmp	r4, #3
 800c3b8:	bf08      	it	eq
 800c3ba:	eef0 7a47 	vmoveq.f32	s15, s14
 800c3be:	e7e6      	b.n	800c38e <__ieee754_atan2f+0x26>
 800c3c0:	b941      	cbnz	r1, 800c3d4 <__ieee754_atan2f+0x6c>
 800c3c2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800c488 <__ieee754_atan2f+0x120>
 800c3c6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c48c <__ieee754_atan2f+0x124>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	bfa8      	it	ge
 800c3ce:	eef0 7a47 	vmovge.f32	s15, s14
 800c3d2:	e7dc      	b.n	800c38e <__ieee754_atan2f+0x26>
 800c3d4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c3d8:	d110      	bne.n	800c3fc <__ieee754_atan2f+0x94>
 800c3da:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c3de:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800c3e2:	d107      	bne.n	800c3f4 <__ieee754_atan2f+0x8c>
 800c3e4:	2c02      	cmp	r4, #2
 800c3e6:	d846      	bhi.n	800c476 <__ieee754_atan2f+0x10e>
 800c3e8:	4b29      	ldr	r3, [pc, #164]	@ (800c490 <__ieee754_atan2f+0x128>)
 800c3ea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c3ee:	edd3 7a00 	vldr	s15, [r3]
 800c3f2:	e7cc      	b.n	800c38e <__ieee754_atan2f+0x26>
 800c3f4:	2c02      	cmp	r4, #2
 800c3f6:	d841      	bhi.n	800c47c <__ieee754_atan2f+0x114>
 800c3f8:	4b26      	ldr	r3, [pc, #152]	@ (800c494 <__ieee754_atan2f+0x12c>)
 800c3fa:	e7f6      	b.n	800c3ea <__ieee754_atan2f+0x82>
 800c3fc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c400:	d0df      	beq.n	800c3c2 <__ieee754_atan2f+0x5a>
 800c402:	1a5b      	subs	r3, r3, r1
 800c404:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c408:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c40c:	da1a      	bge.n	800c444 <__ieee754_atan2f+0xdc>
 800c40e:	2a00      	cmp	r2, #0
 800c410:	da01      	bge.n	800c416 <__ieee754_atan2f+0xae>
 800c412:	313c      	adds	r1, #60	@ 0x3c
 800c414:	db19      	blt.n	800c44a <__ieee754_atan2f+0xe2>
 800c416:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c41a:	f000 f919 	bl	800c650 <fabsf>
 800c41e:	f000 f843 	bl	800c4a8 <atanf>
 800c422:	eef0 7a40 	vmov.f32	s15, s0
 800c426:	2c01      	cmp	r4, #1
 800c428:	d012      	beq.n	800c450 <__ieee754_atan2f+0xe8>
 800c42a:	2c02      	cmp	r4, #2
 800c42c:	d017      	beq.n	800c45e <__ieee754_atan2f+0xf6>
 800c42e:	2c00      	cmp	r4, #0
 800c430:	d0ad      	beq.n	800c38e <__ieee754_atan2f+0x26>
 800c432:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c498 <__ieee754_atan2f+0x130>
 800c436:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c43a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c49c <__ieee754_atan2f+0x134>
 800c43e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c442:	e7a4      	b.n	800c38e <__ieee754_atan2f+0x26>
 800c444:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800c48c <__ieee754_atan2f+0x124>
 800c448:	e7ed      	b.n	800c426 <__ieee754_atan2f+0xbe>
 800c44a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c4a0 <__ieee754_atan2f+0x138>
 800c44e:	e7ea      	b.n	800c426 <__ieee754_atan2f+0xbe>
 800c450:	ee17 3a90 	vmov	r3, s15
 800c454:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c458:	ee07 3a90 	vmov	s15, r3
 800c45c:	e797      	b.n	800c38e <__ieee754_atan2f+0x26>
 800c45e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c498 <__ieee754_atan2f+0x130>
 800c462:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c466:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c49c <__ieee754_atan2f+0x134>
 800c46a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c46e:	e78e      	b.n	800c38e <__ieee754_atan2f+0x26>
 800c470:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c49c <__ieee754_atan2f+0x134>
 800c474:	e78b      	b.n	800c38e <__ieee754_atan2f+0x26>
 800c476:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c4a4 <__ieee754_atan2f+0x13c>
 800c47a:	e788      	b.n	800c38e <__ieee754_atan2f+0x26>
 800c47c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c4a0 <__ieee754_atan2f+0x138>
 800c480:	e785      	b.n	800c38e <__ieee754_atan2f+0x26>
 800c482:	bf00      	nop
 800c484:	c0490fdb 	.word	0xc0490fdb
 800c488:	bfc90fdb 	.word	0xbfc90fdb
 800c48c:	3fc90fdb 	.word	0x3fc90fdb
 800c490:	0800caf0 	.word	0x0800caf0
 800c494:	0800cae4 	.word	0x0800cae4
 800c498:	33bbbd2e 	.word	0x33bbbd2e
 800c49c:	40490fdb 	.word	0x40490fdb
 800c4a0:	00000000 	.word	0x00000000
 800c4a4:	3f490fdb 	.word	0x3f490fdb

0800c4a8 <atanf>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	ee10 5a10 	vmov	r5, s0
 800c4ae:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c4b2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c4b6:	eef0 7a40 	vmov.f32	s15, s0
 800c4ba:	d310      	bcc.n	800c4de <atanf+0x36>
 800c4bc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c4c0:	d904      	bls.n	800c4cc <atanf+0x24>
 800c4c2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c4c6:	eeb0 0a67 	vmov.f32	s0, s15
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}
 800c4cc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c604 <atanf+0x15c>
 800c4d0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c608 <atanf+0x160>
 800c4d4:	2d00      	cmp	r5, #0
 800c4d6:	bfc8      	it	gt
 800c4d8:	eef0 7a47 	vmovgt.f32	s15, s14
 800c4dc:	e7f3      	b.n	800c4c6 <atanf+0x1e>
 800c4de:	4b4b      	ldr	r3, [pc, #300]	@ (800c60c <atanf+0x164>)
 800c4e0:	429c      	cmp	r4, r3
 800c4e2:	d810      	bhi.n	800c506 <atanf+0x5e>
 800c4e4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c4e8:	d20a      	bcs.n	800c500 <atanf+0x58>
 800c4ea:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c610 <atanf+0x168>
 800c4ee:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c4f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4f6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4fe:	dce2      	bgt.n	800c4c6 <atanf+0x1e>
 800c500:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c504:	e013      	b.n	800c52e <atanf+0x86>
 800c506:	f000 f8a3 	bl	800c650 <fabsf>
 800c50a:	4b42      	ldr	r3, [pc, #264]	@ (800c614 <atanf+0x16c>)
 800c50c:	429c      	cmp	r4, r3
 800c50e:	d84f      	bhi.n	800c5b0 <atanf+0x108>
 800c510:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c514:	429c      	cmp	r4, r3
 800c516:	d841      	bhi.n	800c59c <atanf+0xf4>
 800c518:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c51c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c520:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c524:	2300      	movs	r3, #0
 800c526:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c52a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c52e:	1c5a      	adds	r2, r3, #1
 800c530:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c534:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800c618 <atanf+0x170>
 800c538:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800c61c <atanf+0x174>
 800c53c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800c620 <atanf+0x178>
 800c540:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c544:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c548:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800c624 <atanf+0x17c>
 800c54c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c550:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800c628 <atanf+0x180>
 800c554:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c558:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c62c <atanf+0x184>
 800c55c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c560:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c630 <atanf+0x188>
 800c564:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c568:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c634 <atanf+0x18c>
 800c56c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c570:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c638 <atanf+0x190>
 800c574:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c578:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800c63c <atanf+0x194>
 800c57c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c580:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800c640 <atanf+0x198>
 800c584:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c588:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c58c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c590:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c594:	d121      	bne.n	800c5da <atanf+0x132>
 800c596:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c59a:	e794      	b.n	800c4c6 <atanf+0x1e>
 800c59c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c5a0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c5a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c5ae:	e7be      	b.n	800c52e <atanf+0x86>
 800c5b0:	4b24      	ldr	r3, [pc, #144]	@ (800c644 <atanf+0x19c>)
 800c5b2:	429c      	cmp	r4, r3
 800c5b4:	d80b      	bhi.n	800c5ce <atanf+0x126>
 800c5b6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c5ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c5be:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c5c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5cc:	e7af      	b.n	800c52e <atanf+0x86>
 800c5ce:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c5d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c5d6:	2303      	movs	r3, #3
 800c5d8:	e7a9      	b.n	800c52e <atanf+0x86>
 800c5da:	4a1b      	ldr	r2, [pc, #108]	@ (800c648 <atanf+0x1a0>)
 800c5dc:	491b      	ldr	r1, [pc, #108]	@ (800c64c <atanf+0x1a4>)
 800c5de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c5e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c5e6:	edd3 6a00 	vldr	s13, [r3]
 800c5ea:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c5ee:	2d00      	cmp	r5, #0
 800c5f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c5f4:	edd2 7a00 	vldr	s15, [r2]
 800c5f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5fc:	bfb8      	it	lt
 800c5fe:	eef1 7a67 	vneglt.f32	s15, s15
 800c602:	e760      	b.n	800c4c6 <atanf+0x1e>
 800c604:	bfc90fdb 	.word	0xbfc90fdb
 800c608:	3fc90fdb 	.word	0x3fc90fdb
 800c60c:	3edfffff 	.word	0x3edfffff
 800c610:	7149f2ca 	.word	0x7149f2ca
 800c614:	3f97ffff 	.word	0x3f97ffff
 800c618:	3c8569d7 	.word	0x3c8569d7
 800c61c:	3d4bda59 	.word	0x3d4bda59
 800c620:	bd6ef16b 	.word	0xbd6ef16b
 800c624:	3d886b35 	.word	0x3d886b35
 800c628:	3dba2e6e 	.word	0x3dba2e6e
 800c62c:	3e124925 	.word	0x3e124925
 800c630:	3eaaaaab 	.word	0x3eaaaaab
 800c634:	bd15a221 	.word	0xbd15a221
 800c638:	bd9d8795 	.word	0xbd9d8795
 800c63c:	bde38e38 	.word	0xbde38e38
 800c640:	be4ccccd 	.word	0xbe4ccccd
 800c644:	401bffff 	.word	0x401bffff
 800c648:	0800cb0c 	.word	0x0800cb0c
 800c64c:	0800cafc 	.word	0x0800cafc

0800c650 <fabsf>:
 800c650:	ee10 3a10 	vmov	r3, s0
 800c654:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c658:	ee00 3a10 	vmov	s0, r3
 800c65c:	4770      	bx	lr
	...

0800c660 <_init>:
 800c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c662:	bf00      	nop
 800c664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c666:	bc08      	pop	{r3}
 800c668:	469e      	mov	lr, r3
 800c66a:	4770      	bx	lr

0800c66c <_fini>:
 800c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66e:	bf00      	nop
 800c670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c672:	bc08      	pop	{r3}
 800c674:	469e      	mov	lr, r3
 800c676:	4770      	bx	lr
