
self-balancing-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c38  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003e08  08003e08  00004e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e5c  08003e5c  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003e5c  08003e5c  00004e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e64  08003e64  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e64  08003e64  00004e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e68  08003e68  00004e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003e6c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000068  08003ed4  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08003ed4  000052bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e264  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ad  00000000  00000000  000132fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000156b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5a  00000000  00000000  00016410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023200  00000000  00000000  00016e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010445  00000000  00000000  0003a06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2bf2  00000000  00000000  0004a4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d0a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e6c  00000000  00000000  0011d0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  00120f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003df0 	.word	0x08003df0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003df0 	.word	0x08003df0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000730 <MX_GPIO_Init+0x154>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000730 <MX_GPIO_Init+0x154>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b4b      	ldr	r3, [pc, #300]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	4b47      	ldr	r3, [pc, #284]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a46      	ldr	r2, [pc, #280]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b44      	ldr	r3, [pc, #272]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	4b40      	ldr	r3, [pc, #256]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a3f      	ldr	r2, [pc, #252]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b3d      	ldr	r3, [pc, #244]	@ (8000730 <MX_GPIO_Init+0x154>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b39      	ldr	r3, [pc, #228]	@ (8000730 <MX_GPIO_Init+0x154>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a38      	ldr	r2, [pc, #224]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b36      	ldr	r3, [pc, #216]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a31      	ldr	r2, [pc, #196]	@ (8000730 <MX_GPIO_Init+0x154>)
 800066c:	f043 0308 	orr.w	r3, r3, #8
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b2f      	ldr	r3, [pc, #188]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	482c      	ldr	r0, [pc, #176]	@ (8000734 <MX_GPIO_Init+0x158>)
 8000684:	f000 ff3a 	bl	80014fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000688:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800068e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4826      	ldr	r0, [pc, #152]	@ (8000738 <MX_GPIO_Init+0x15c>)
 80006a0:	f000 fd98 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006a4:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80006a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006aa:	2303      	movs	r3, #3
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	481f      	ldr	r0, [pc, #124]	@ (8000738 <MX_GPIO_Init+0x15c>)
 80006ba:	f000 fd8b 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80006be:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 80006c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c4:	2303      	movs	r3, #3
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4818      	ldr	r0, [pc, #96]	@ (8000734 <MX_GPIO_Init+0x158>)
 80006d4:	f000 fd7e 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006d8:	2320      	movs	r3, #32
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	4811      	ldr	r0, [pc, #68]	@ (8000734 <MX_GPIO_Init+0x158>)
 80006f0:	f000 fd70 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80006f4:	f24f 7337 	movw	r3, #63287	@ 0xf737
 80006f8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fa:	2303      	movs	r3, #3
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <MX_GPIO_Init+0x160>)
 800070a:	f000 fd63 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800070e:	2304      	movs	r3, #4
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	4807      	ldr	r0, [pc, #28]	@ (8000740 <MX_GPIO_Init+0x164>)
 8000722:	f000 fd57 	bl	80011d4 <HAL_GPIO_Init>

}
 8000726:	bf00      	nop
 8000728:	3728      	adds	r7, #40	@ 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40020000 	.word	0x40020000
 8000738:	40020800 	.word	0x40020800
 800073c:	40020400 	.word	0x40020400
 8000740:	40020c00 	.word	0x40020c00

08000744 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800074c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000750:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	2b00      	cmp	r3, #0
 800075a:	d013      	beq.n	8000784 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800075c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000760:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000764:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000768:	2b00      	cmp	r3, #0
 800076a:	d00b      	beq.n	8000784 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800076c:	e000      	b.n	8000770 <ITM_SendChar+0x2c>
    {
      __NOP();
 800076e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000770:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0f9      	beq.n	800076e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800077a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000784:	687b      	ldr	r3, [r7, #4]
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f000 fb98 	bl	8000ecc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f824 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f7ff ff1c 	bl	80005dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007a4:	f000 fae2 	bl	8000d6c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80007a8:	f000 f9de 	bl	8000b68 <MX_TIM4_Init>
  MX_TIM6_Init();
 80007ac:	f000 fa30 	bl	8000c10 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80007b0:	213c      	movs	r1, #60	@ 0x3c
 80007b2:	480a      	ldr	r0, [pc, #40]	@ (80007dc <main+0x48>)
 80007b4:	f001 fe0a 	bl	80023cc <HAL_TIM_Encoder_Start_IT>
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80007b8:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <main+0x48>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	68da      	ldr	r2, [r3, #12]
 80007be:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <main+0x48>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f042 0201 	orr.w	r2, r2, #1
 80007c6:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim6);
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <main+0x4c>)
 80007ca:	f001 fce9 	bl	80021a0 <HAL_TIM_Base_Start_IT>
  encoder.tim = htim4.Instance;
 80007ce:	4b03      	ldr	r3, [pc, #12]	@ (80007dc <main+0x48>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a04      	ldr	r2, [pc, #16]	@ (80007e4 <main+0x50>)
 80007d4:	6093      	str	r3, [r2, #8]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d6:	bf00      	nop
 80007d8:	e7fd      	b.n	80007d6 <main+0x42>
 80007da:	bf00      	nop
 80007dc:	20000094 	.word	0x20000094
 80007e0:	200000dc 	.word	0x200000dc
 80007e4:	20000084 	.word	0x20000084

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	@ 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2234      	movs	r2, #52	@ 0x34
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fca2 	bl	8003140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <SystemClock_Config+0xd4>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	4a29      	ldr	r2, [pc, #164]	@ (80008bc <SystemClock_Config+0xd4>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	@ 0x40
 800081c:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <SystemClock_Config+0xd4>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000828:	2300      	movs	r3, #0
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <SystemClock_Config+0xd8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000834:	4a22      	ldr	r2, [pc, #136]	@ (80008c0 <SystemClock_Config+0xd8>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b20      	ldr	r3, [pc, #128]	@ (80008c0 <SystemClock_Config+0xd8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000850:	2310      	movs	r3, #16
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000854:	2302      	movs	r3, #2
 8000856:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000858:	2300      	movs	r3, #0
 800085a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800085c:	2310      	movs	r3, #16
 800085e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000860:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000864:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000866:	2304      	movs	r3, #4
 8000868:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800086e:	2302      	movs	r3, #2
 8000870:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4618      	mov	r0, r3
 8000878:	f001 f9a4 	bl	8001bc4 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000882:	f000 f848 	bl	8000916 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	2102      	movs	r1, #2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fe44 	bl	8001530 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008ae:	f000 f832 	bl	8000916 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	@ 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d108      	bne.n	80008e8 <HAL_TIM_PeriodElapsedCallback+0x24>
		update_direction(&encoder);
 80008d6:	4807      	ldr	r0, [pc, #28]	@ (80008f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008d8:	f000 faba 	bl	8000e50 <update_direction>
		printf("%u \n",(unsigned int)encoder.direction);
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80008e4:	f002 fc1a 	bl	800311c <iprintf>
	}

}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40001000 	.word	0x40001000
 80008f4:	20000084 	.word	0x20000084
 80008f8:	08003e08 	.word	0x08003e08

080008fc <__io_putchar>:

int __io_putchar(int ch){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff1c 	bl	8000744 <ITM_SendChar>
	return ch;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091a:	b672      	cpsid	i
}
 800091c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091e:	bf00      	nop
 8000920:	e7fd      	b.n	800091e <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	4a0f      	ldr	r2, [pc, #60]	@ (8000970 <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000938:	6453      	str	r3, [r2, #68]	@ 0x44
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000962:	2007      	movs	r0, #7
 8000964:	f000 fbf4 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <NMI_Handler+0x4>

0800097c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <MemManage_Handler+0x4>

0800098c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <UsageFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ca:	f000 fad1 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <TIM4_IRQHandler+0x10>)
 80009da:	f001 fda5 	bl	8002528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000094 	.word	0x20000094

080009e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009ec:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <TIM6_DAC_IRQHandler+0x10>)
 80009ee:	f001 fd9b 	bl	8002528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000dc 	.word	0x200000dc

080009fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e00a      	b.n	8000a24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a0e:	f3af 8000 	nop.w
 8000a12:	4601      	mov	r1, r0
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	60ba      	str	r2, [r7, #8]
 8000a1a:	b2ca      	uxtb	r2, r1
 8000a1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbf0      	blt.n	8000a0e <_read+0x12>
  }

  return len;
 8000a2c:	687b      	ldr	r3, [r7, #4]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60f8      	str	r0, [r7, #12]
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	e009      	b.n	8000a5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	60ba      	str	r2, [r7, #8]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff53 	bl	80008fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf1      	blt.n	8000a48 <_write+0x12>
  }
  return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_close>:

int _close(int file)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a96:	605a      	str	r2, [r3, #4]
  return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_isatty>:

int _isatty(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae0:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <_sbrk+0x5c>)
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <_sbrk+0x60>)
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d102      	bne.n	8000afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <_sbrk+0x64>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	@ (8000b40 <_sbrk+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d207      	bcs.n	8000b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b08:	f002 fb22 	bl	8003150 <__errno>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	220c      	movs	r2, #12
 8000b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b16:	e009      	b.n	8000b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a05      	ldr	r2, [pc, #20]	@ (8000b3c <_sbrk+0x64>)
 8000b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20020000 	.word	0x20020000
 8000b38:	00000400 	.word	0x00000400
 8000b3c:	20000090 	.word	0x20000090
 8000b40:	200002c0 	.word	0x200002c0

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	@ 0x30
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2224      	movs	r2, #36	@ 0x24
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 fae2 	bl	8003140 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b84:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <MX_TIM4_Init+0xa0>)
 8000b86:	4a21      	ldr	r2, [pc, #132]	@ (8000c0c <MX_TIM4_Init+0xa4>)
 8000b88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <MX_TIM4_Init+0xa0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <MX_TIM4_Init+0xa0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1440;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <MX_TIM4_Init+0xa0>)
 8000b98:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000b9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <MX_TIM4_Init+0xa0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <MX_TIM4_Init+0xa0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000baa:	2303      	movs	r3, #3
 8000bac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <MX_TIM4_Init+0xa0>)
 8000bd6:	f001 fb53 	bl	8002280 <HAL_TIM_Encoder_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000be0:	f7ff fe99 	bl	8000916 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_TIM4_Init+0xa0>)
 8000bf2:	f001 fe7d 	bl	80028f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000bfc:	f7ff fe8b 	bl	8000916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3730      	adds	r7, #48	@ 0x30
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000094 	.word	0x20000094
 8000c0c:	40000800 	.word	0x40000800

08000c10 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <MX_TIM6_Init+0x64>)
 8000c20:	4a15      	ldr	r2, [pc, #84]	@ (8000c78 <MX_TIM6_Init+0x68>)
 8000c22:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <MX_TIM6_Init+0x64>)
 8000c26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c2a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <MX_TIM6_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <MX_TIM6_Init+0x64>)
 8000c34:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000c38:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <MX_TIM6_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c40:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <MX_TIM6_Init+0x64>)
 8000c42:	f001 fa5d 	bl	8002100 <HAL_TIM_Base_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c4c:	f7ff fe63 	bl	8000916 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_TIM6_Init+0x64>)
 8000c5e:	f001 fe47 	bl	80028f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f7ff fe55 	bl	8000916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000dc 	.word	0x200000dc
 8000c78:	40001000 	.word	0x40001000

08000c7c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	@ 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a1d      	ldr	r2, [pc, #116]	@ (8000d10 <HAL_TIM_Encoder_MspInit+0x94>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d133      	bne.n	8000d06 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <HAL_TIM_Encoder_MspInit+0x98>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d14 <HAL_TIM_Encoder_MspInit+0x98>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_TIM_Encoder_MspInit+0x98>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_TIM_Encoder_MspInit+0x98>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <HAL_TIM_Encoder_MspInit+0x98>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_TIM_Encoder_MspInit+0x98>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC2_CH2_Pin|ENC2_CH2B7_Pin;
 8000cd6:	23c0      	movs	r3, #192	@ 0xc0
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4809      	ldr	r0, [pc, #36]	@ (8000d18 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000cf2:	f000 fa6f 	bl	80011d4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	201e      	movs	r0, #30
 8000cfc:	f000 fa33 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d00:	201e      	movs	r0, #30
 8000d02:	f000 fa4c 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	@ 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40000800 	.word	0x40000800
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020400 	.word	0x40020400

08000d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0e      	ldr	r2, [pc, #56]	@ (8000d64 <HAL_TIM_Base_MspInit+0x48>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d115      	bne.n	8000d5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <HAL_TIM_Base_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a0c      	ldr	r2, [pc, #48]	@ (8000d68 <HAL_TIM_Base_MspInit+0x4c>)
 8000d38:	f043 0310 	orr.w	r3, r3, #16
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <HAL_TIM_Base_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f003 0310 	and.w	r3, r3, #16
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2036      	movs	r0, #54	@ 0x36
 8000d50:	f000 fa09 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d54:	2036      	movs	r0, #54	@ 0x36
 8000d56:	f000 fa22 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40001000 	.word	0x40001000
 8000d68:	40023800 	.word	0x40023800

08000d6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	@ (8000dbc <MX_USART2_UART_Init+0x50>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_USART2_UART_Init+0x4c>)
 8000da4:	f001 fe34 	bl	8002a10 <HAL_UART_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dae:	f7ff fdb2 	bl	8000916 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000124 	.word	0x20000124
 8000dbc:	40004400 	.word	0x40004400

08000dc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	@ 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a19      	ldr	r2, [pc, #100]	@ (8000e44 <HAL_UART_MspInit+0x84>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d12b      	bne.n	8000e3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_UART_MspInit+0x88>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <HAL_UART_MspInit+0x88>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <HAL_UART_MspInit+0x88>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <HAL_UART_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a10      	ldr	r2, [pc, #64]	@ (8000e48 <HAL_UART_MspInit+0x88>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <HAL_UART_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <HAL_UART_MspInit+0x8c>)
 8000e36:	f000 f9cd 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	@ 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40004400 	.word	0x40004400
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000

08000e50 <update_direction>:
#include "headers/encoder.h"

void update_direction(encoder_t *encoder){
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	encoder->direction = (encoder->tim->CR1 & TIM_CR1_DIR_Msk) >> TIM_CR1_DIR_Pos;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	701a      	strb	r2, [r3, #0]
	return;
 8000e6c:	bf00      	nop
}
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e7c:	f7ff fe62 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e80:	480c      	ldr	r0, [pc, #48]	@ (8000eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e82:	490d      	ldr	r1, [pc, #52]	@ (8000eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e84:	4a0d      	ldr	r2, [pc, #52]	@ (8000ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f002 f959 	bl	800315c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eaa:	f7ff fc73 	bl	8000794 <main>
  bx  lr    
 8000eae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ebc:	08003e6c 	.word	0x08003e6c
  ldr r2, =_sbss
 8000ec0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ec4:	200002bc 	.word	0x200002bc

08000ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f0c <HAL_Init+0x40>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <HAL_Init+0x40>)
 8000ee2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	@ (8000f0c <HAL_Init+0x40>)
 8000eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 f92b 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f7ff fd10 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023c00 	.word	0x40023c00

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f943 	bl	80011ba <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f4c:	f000 f90b 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	@ (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008
 8000f94:	2000016c 	.word	0x2000016c

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	@ (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2000016c 	.word	0x2000016c

08000fb0 <__NVIC_SetPriorityGrouping>:
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	@ (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	@ (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	@ (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	@ 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	@ (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e165      	b.n	80014bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	f040 8154 	bne.w	80014b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d005      	beq.n	8001226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	2b02      	cmp	r3, #2
 8001224:	d130      	bne.n	8001288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 0201 	and.w	r2, r3, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b03      	cmp	r3, #3
 8001292:	d017      	beq.n	80012c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d123      	bne.n	8001318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	08da      	lsrs	r2, r3, #3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3208      	adds	r2, #8
 8001312:	69b9      	ldr	r1, [r7, #24]
 8001314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0203 	and.w	r2, r3, #3
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80ae 	beq.w	80014b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b5d      	ldr	r3, [pc, #372]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a5c      	ldr	r2, [pc, #368]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b5a      	ldr	r3, [pc, #360]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001376:	4a58      	ldr	r2, [pc, #352]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4f      	ldr	r2, [pc, #316]	@ (80014dc <HAL_GPIO_Init+0x308>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d025      	beq.n	80013ee <HAL_GPIO_Init+0x21a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4e      	ldr	r2, [pc, #312]	@ (80014e0 <HAL_GPIO_Init+0x30c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01f      	beq.n	80013ea <HAL_GPIO_Init+0x216>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4d      	ldr	r2, [pc, #308]	@ (80014e4 <HAL_GPIO_Init+0x310>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x212>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4c      	ldr	r2, [pc, #304]	@ (80014e8 <HAL_GPIO_Init+0x314>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4b      	ldr	r2, [pc, #300]	@ (80014ec <HAL_GPIO_Init+0x318>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x20a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4a      	ldr	r2, [pc, #296]	@ (80014f0 <HAL_GPIO_Init+0x31c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x206>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a49      	ldr	r2, [pc, #292]	@ (80014f4 <HAL_GPIO_Init+0x320>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x202>
 80013d2:	2306      	movs	r3, #6
 80013d4:	e00c      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e00a      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013da:	2305      	movs	r3, #5
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013de:	2304      	movs	r3, #4
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x21c>
 80013ee:	2300      	movs	r3, #0
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001400:	4935      	ldr	r1, [pc, #212]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140e:	4b3a      	ldr	r3, [pc, #232]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001432:	4a31      	ldr	r2, [pc, #196]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001438:	4b2f      	ldr	r3, [pc, #188]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800145c:	4a26      	ldr	r2, [pc, #152]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001462:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001486:	4a1c      	ldr	r2, [pc, #112]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148c:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b0:	4a11      	ldr	r2, [pc, #68]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	f67f ae96 	bls.w	80011f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3724      	adds	r7, #36	@ 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40021400 	.word	0x40021400
 80014f4:	40021800 	.word	0x40021800
 80014f8:	40013c00 	.word	0x40013c00

080014fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
 8001508:	4613      	mov	r3, r2
 800150a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800150c:	787b      	ldrb	r3, [r7, #1]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001518:	e003      	b.n	8001522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	041a      	lsls	r2, r3, #16
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	619a      	str	r2, [r3, #24]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0cc      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001544:	4b68      	ldr	r3, [pc, #416]	@ (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d90c      	bls.n	800156c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b65      	ldr	r3, [pc, #404]	@ (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b63      	ldr	r3, [pc, #396]	@ (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0b8      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d020      	beq.n	80015ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001584:	4b59      	ldr	r3, [pc, #356]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4a58      	ldr	r2, [pc, #352]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800158e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800159c:	4b53      	ldr	r3, [pc, #332]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4a52      	ldr	r2, [pc, #328]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a8:	4b50      	ldr	r3, [pc, #320]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	494d      	ldr	r1, [pc, #308]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d044      	beq.n	8001650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	4b47      	ldr	r3, [pc, #284]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d119      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e07f      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d003      	beq.n	80015ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ee:	4b3f      	ldr	r3, [pc, #252]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e06f      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fe:	4b3b      	ldr	r3, [pc, #236]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e067      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160e:	4b37      	ldr	r3, [pc, #220]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f023 0203 	bic.w	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4934      	ldr	r1, [pc, #208]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	4313      	orrs	r3, r2
 800161e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001620:	f7ff fcba 	bl	8000f98 <HAL_GetTick>
 8001624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	e00a      	b.n	800163e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001628:	f7ff fcb6 	bl	8000f98 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e04f      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	4b2b      	ldr	r3, [pc, #172]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 020c 	and.w	r2, r3, #12
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	429a      	cmp	r2, r3
 800164e:	d1eb      	bne.n	8001628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001650:	4b25      	ldr	r3, [pc, #148]	@ (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d20c      	bcs.n	8001678 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b20      	ldr	r3, [pc, #128]	@ (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e032      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4916      	ldr	r1, [pc, #88]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	4313      	orrs	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016a2:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	490e      	ldr	r1, [pc, #56]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016b6:	f000 f855 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	490a      	ldr	r1, [pc, #40]	@ (80016f0 <HAL_RCC_ClockConfig+0x1c0>)
 80016c8:	5ccb      	ldrb	r3, [r1, r3]
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	4a09      	ldr	r2, [pc, #36]	@ (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fc1a 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00
 80016ec:	40023800 	.word	0x40023800
 80016f0:	08003e10 	.word	0x08003e10
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000004 	.word	0x20000004

080016fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001700:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <HAL_RCC_GetHCLKFreq+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000000 	.word	0x20000000

08001714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001718:	f7ff fff0 	bl	80016fc <HAL_RCC_GetHCLKFreq>
 800171c:	4602      	mov	r2, r0
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	0a9b      	lsrs	r3, r3, #10
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	4903      	ldr	r1, [pc, #12]	@ (8001738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800172a:	5ccb      	ldrb	r3, [r1, r3]
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40023800 	.word	0x40023800
 8001738:	08003e20 	.word	0x08003e20

0800173c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001740:	f7ff ffdc 	bl	80016fc <HAL_RCC_GetHCLKFreq>
 8001744:	4602      	mov	r2, r0
 8001746:	4b05      	ldr	r3, [pc, #20]	@ (800175c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	0b5b      	lsrs	r3, r3, #13
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	4903      	ldr	r1, [pc, #12]	@ (8001760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001752:	5ccb      	ldrb	r3, [r1, r3]
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001758:	4618      	mov	r0, r3
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	08003e20 	.word	0x08003e20

08001764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001768:	b0ae      	sub	sp, #184	@ 0xb8
 800176a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800178a:	4bcb      	ldr	r3, [pc, #812]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b0c      	cmp	r3, #12
 8001794:	f200 8206 	bhi.w	8001ba4 <HAL_RCC_GetSysClockFreq+0x440>
 8001798:	a201      	add	r2, pc, #4	@ (adr r2, 80017a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017d5 	.word	0x080017d5
 80017a4:	08001ba5 	.word	0x08001ba5
 80017a8:	08001ba5 	.word	0x08001ba5
 80017ac:	08001ba5 	.word	0x08001ba5
 80017b0:	080017dd 	.word	0x080017dd
 80017b4:	08001ba5 	.word	0x08001ba5
 80017b8:	08001ba5 	.word	0x08001ba5
 80017bc:	08001ba5 	.word	0x08001ba5
 80017c0:	080017e5 	.word	0x080017e5
 80017c4:	08001ba5 	.word	0x08001ba5
 80017c8:	08001ba5 	.word	0x08001ba5
 80017cc:	08001ba5 	.word	0x08001ba5
 80017d0:	080019d5 	.word	0x080019d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d4:	4bb9      	ldr	r3, [pc, #740]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x358>)
 80017d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017da:	e1e7      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017dc:	4bb8      	ldr	r3, [pc, #736]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017e2:	e1e3      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e4:	4bb4      	ldr	r3, [pc, #720]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f0:	4bb1      	ldr	r3, [pc, #708]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d071      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fc:	4bae      	ldr	r3, [pc, #696]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	099b      	lsrs	r3, r3, #6
 8001802:	2200      	movs	r2, #0
 8001804:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001808:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800180c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001814:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800181e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001822:	4622      	mov	r2, r4
 8001824:	462b      	mov	r3, r5
 8001826:	f04f 0000 	mov.w	r0, #0
 800182a:	f04f 0100 	mov.w	r1, #0
 800182e:	0159      	lsls	r1, r3, #5
 8001830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001834:	0150      	lsls	r0, r2, #5
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4621      	mov	r1, r4
 800183c:	1a51      	subs	r1, r2, r1
 800183e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001840:	4629      	mov	r1, r5
 8001842:	eb63 0301 	sbc.w	r3, r3, r1
 8001846:	647b      	str	r3, [r7, #68]	@ 0x44
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001854:	4649      	mov	r1, r9
 8001856:	018b      	lsls	r3, r1, #6
 8001858:	4641      	mov	r1, r8
 800185a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800185e:	4641      	mov	r1, r8
 8001860:	018a      	lsls	r2, r1, #6
 8001862:	4641      	mov	r1, r8
 8001864:	1a51      	subs	r1, r2, r1
 8001866:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001868:	4649      	mov	r1, r9
 800186a:	eb63 0301 	sbc.w	r3, r3, r1
 800186e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800187c:	4649      	mov	r1, r9
 800187e:	00cb      	lsls	r3, r1, #3
 8001880:	4641      	mov	r1, r8
 8001882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001886:	4641      	mov	r1, r8
 8001888:	00ca      	lsls	r2, r1, #3
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	4603      	mov	r3, r0
 8001890:	4622      	mov	r2, r4
 8001892:	189b      	adds	r3, r3, r2
 8001894:	633b      	str	r3, [r7, #48]	@ 0x30
 8001896:	462b      	mov	r3, r5
 8001898:	460a      	mov	r2, r1
 800189a:	eb42 0303 	adc.w	r3, r2, r3
 800189e:	637b      	str	r3, [r7, #52]	@ 0x34
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018ac:	4629      	mov	r1, r5
 80018ae:	024b      	lsls	r3, r1, #9
 80018b0:	4621      	mov	r1, r4
 80018b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018b6:	4621      	mov	r1, r4
 80018b8:	024a      	lsls	r2, r1, #9
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018c2:	2200      	movs	r2, #0
 80018c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80018d0:	f7fe fcee 	bl	80002b0 <__aeabi_uldivmod>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4613      	mov	r3, r2
 80018da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018de:	e067      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e0:	4b75      	ldr	r3, [pc, #468]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	2200      	movs	r2, #0
 80018e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018ec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80018f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80018fa:	2300      	movs	r3, #0
 80018fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001902:	4622      	mov	r2, r4
 8001904:	462b      	mov	r3, r5
 8001906:	f04f 0000 	mov.w	r0, #0
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	0159      	lsls	r1, r3, #5
 8001910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001914:	0150      	lsls	r0, r2, #5
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4621      	mov	r1, r4
 800191c:	1a51      	subs	r1, r2, r1
 800191e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001920:	4629      	mov	r1, r5
 8001922:	eb63 0301 	sbc.w	r3, r3, r1
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001934:	4649      	mov	r1, r9
 8001936:	018b      	lsls	r3, r1, #6
 8001938:	4641      	mov	r1, r8
 800193a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193e:	4641      	mov	r1, r8
 8001940:	018a      	lsls	r2, r1, #6
 8001942:	4641      	mov	r1, r8
 8001944:	ebb2 0a01 	subs.w	sl, r2, r1
 8001948:	4649      	mov	r1, r9
 800194a:	eb63 0b01 	sbc.w	fp, r3, r1
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800195a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800195e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001962:	4692      	mov	sl, r2
 8001964:	469b      	mov	fp, r3
 8001966:	4623      	mov	r3, r4
 8001968:	eb1a 0303 	adds.w	r3, sl, r3
 800196c:	623b      	str	r3, [r7, #32]
 800196e:	462b      	mov	r3, r5
 8001970:	eb4b 0303 	adc.w	r3, fp, r3
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001982:	4629      	mov	r1, r5
 8001984:	028b      	lsls	r3, r1, #10
 8001986:	4621      	mov	r1, r4
 8001988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800198c:	4621      	mov	r1, r4
 800198e:	028a      	lsls	r2, r1, #10
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001998:	2200      	movs	r2, #0
 800199a:	673b      	str	r3, [r7, #112]	@ 0x70
 800199c:	677a      	str	r2, [r7, #116]	@ 0x74
 800199e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80019a2:	f7fe fc85 	bl	80002b0 <__aeabi_uldivmod>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4613      	mov	r3, r2
 80019ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019b0:	4b41      	ldr	r3, [pc, #260]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	0c1b      	lsrs	r3, r3, #16
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	3301      	adds	r3, #1
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80019c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019d2:	e0eb      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d4:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e0:	4b35      	ldr	r3, [pc, #212]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d06b      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ec:	4b32      	ldr	r3, [pc, #200]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	099b      	lsrs	r3, r3, #6
 80019f2:	2200      	movs	r2, #0
 80019f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a00:	2300      	movs	r3, #0
 8001a02:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a04:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a08:	4622      	mov	r2, r4
 8001a0a:	462b      	mov	r3, r5
 8001a0c:	f04f 0000 	mov.w	r0, #0
 8001a10:	f04f 0100 	mov.w	r1, #0
 8001a14:	0159      	lsls	r1, r3, #5
 8001a16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a1a:	0150      	lsls	r0, r2, #5
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4621      	mov	r1, r4
 8001a22:	1a51      	subs	r1, r2, r1
 8001a24:	61b9      	str	r1, [r7, #24]
 8001a26:	4629      	mov	r1, r5
 8001a28:	eb63 0301 	sbc.w	r3, r3, r1
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a3a:	4659      	mov	r1, fp
 8001a3c:	018b      	lsls	r3, r1, #6
 8001a3e:	4651      	mov	r1, sl
 8001a40:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a44:	4651      	mov	r1, sl
 8001a46:	018a      	lsls	r2, r1, #6
 8001a48:	4651      	mov	r1, sl
 8001a4a:	ebb2 0801 	subs.w	r8, r2, r1
 8001a4e:	4659      	mov	r1, fp
 8001a50:	eb63 0901 	sbc.w	r9, r3, r1
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a68:	4690      	mov	r8, r2
 8001a6a:	4699      	mov	r9, r3
 8001a6c:	4623      	mov	r3, r4
 8001a6e:	eb18 0303 	adds.w	r3, r8, r3
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	462b      	mov	r3, r5
 8001a76:	eb49 0303 	adc.w	r3, r9, r3
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a88:	4629      	mov	r1, r5
 8001a8a:	024b      	lsls	r3, r1, #9
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a92:	4621      	mov	r1, r4
 8001a94:	024a      	lsls	r2, r1, #9
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001aa2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001aa4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001aa8:	f7fe fc02 	bl	80002b0 <__aeabi_uldivmod>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ab6:	e065      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x420>
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x458>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	2200      	movs	r2, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	4611      	mov	r1, r2
 8001ad0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ad4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ada:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ade:	4642      	mov	r2, r8
 8001ae0:	464b      	mov	r3, r9
 8001ae2:	f04f 0000 	mov.w	r0, #0
 8001ae6:	f04f 0100 	mov.w	r1, #0
 8001aea:	0159      	lsls	r1, r3, #5
 8001aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af0:	0150      	lsls	r0, r2, #5
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4641      	mov	r1, r8
 8001af8:	1a51      	subs	r1, r2, r1
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	4649      	mov	r1, r9
 8001afe:	eb63 0301 	sbc.w	r3, r3, r1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b10:	4659      	mov	r1, fp
 8001b12:	018b      	lsls	r3, r1, #6
 8001b14:	4651      	mov	r1, sl
 8001b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b1a:	4651      	mov	r1, sl
 8001b1c:	018a      	lsls	r2, r1, #6
 8001b1e:	4651      	mov	r1, sl
 8001b20:	1a54      	subs	r4, r2, r1
 8001b22:	4659      	mov	r1, fp
 8001b24:	eb63 0501 	sbc.w	r5, r3, r1
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	00eb      	lsls	r3, r5, #3
 8001b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b36:	00e2      	lsls	r2, r4, #3
 8001b38:	4614      	mov	r4, r2
 8001b3a:	461d      	mov	r5, r3
 8001b3c:	4643      	mov	r3, r8
 8001b3e:	18e3      	adds	r3, r4, r3
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	464b      	mov	r3, r9
 8001b44:	eb45 0303 	adc.w	r3, r5, r3
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b56:	4629      	mov	r1, r5
 8001b58:	028b      	lsls	r3, r1, #10
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b60:	4621      	mov	r1, r4
 8001b62:	028a      	lsls	r2, r1, #10
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b70:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b76:	f7fe fb9b 	bl	80002b0 <__aeabi_uldivmod>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4613      	mov	r3, r2
 8001b80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b84:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0x458>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0f1b      	lsrs	r3, r3, #28
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ba2:	e003      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001baa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	37b8      	adds	r7, #184	@ 0xb8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	00f42400 	.word	0x00f42400

08001bc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e28d      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8083 	beq.w	8001cea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001be4:	4b94      	ldr	r3, [pc, #592]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d019      	beq.n	8001c24 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bf0:	4b91      	ldr	r3, [pc, #580]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
        || \
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bfc:	4b8e      	ldr	r3, [pc, #568]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c08:	d00c      	beq.n	8001c24 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0a:	4b8b      	ldr	r3, [pc, #556]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d112      	bne.n	8001c3c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c16:	4b88      	ldr	r3, [pc, #544]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c22:	d10b      	bne.n	8001c3c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	4b84      	ldr	r3, [pc, #528]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d05b      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x124>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d157      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e25a      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c44:	d106      	bne.n	8001c54 <HAL_RCC_OscConfig+0x90>
 8001c46:	4b7c      	ldr	r3, [pc, #496]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a7b      	ldr	r2, [pc, #492]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0xcc>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0xb4>
 8001c5e:	4b76      	ldr	r3, [pc, #472]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a75      	ldr	r2, [pc, #468]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b73      	ldr	r3, [pc, #460]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a72      	ldr	r2, [pc, #456]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xcc>
 8001c78:	4b6f      	ldr	r3, [pc, #444]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a6e      	ldr	r2, [pc, #440]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b6c      	ldr	r3, [pc, #432]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a6b      	ldr	r2, [pc, #428]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff f97e 	bl	8000f98 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f97a 	bl	8000f98 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	@ 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e21f      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b61      	ldr	r3, [pc, #388]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xdc>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f96a 	bl	8000f98 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f966 	bl	8000f98 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	@ 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e20b      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	4b57      	ldr	r3, [pc, #348]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x104>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d06f      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cf6:	4b50      	ldr	r3, [pc, #320]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d017      	beq.n	8001d32 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d02:	4b4d      	ldr	r3, [pc, #308]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d105      	bne.n	8001d1a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d1a:	4b47      	ldr	r3, [pc, #284]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d11c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d26:	4b44      	ldr	r3, [pc, #272]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d116      	bne.n	8001d60 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	4b41      	ldr	r3, [pc, #260]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x186>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e1d3      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4937      	ldr	r1, [pc, #220]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	e03a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d68:	4b34      	ldr	r3, [pc, #208]	@ (8001e3c <HAL_RCC_OscConfig+0x278>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f913 	bl	8000f98 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d76:	f7ff f90f 	bl	8000f98 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1b4      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	4b2b      	ldr	r3, [pc, #172]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b28      	ldr	r3, [pc, #160]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4925      	ldr	r1, [pc, #148]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
 8001da8:	e015      	b.n	8001dd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001daa:	4b24      	ldr	r3, [pc, #144]	@ (8001e3c <HAL_RCC_OscConfig+0x278>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff f8f2 	bl	8000f98 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db8:	f7ff f8ee 	bl	8000f98 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e193      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	4b1b      	ldr	r3, [pc, #108]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d036      	beq.n	8001e50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d016      	beq.n	8001e18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dea:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7ff f8d2 	bl	8000f98 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df8:	f7ff f8ce 	bl	8000f98 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e173      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x234>
 8001e16:	e01b      	b.n	8001e50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1e:	f7ff f8bb 	bl	8000f98 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e24:	e00e      	b.n	8001e44 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e26:	f7ff f8b7 	bl	8000f98 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d907      	bls.n	8001e44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e15c      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	42470000 	.word	0x42470000
 8001e40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	4b8a      	ldr	r3, [pc, #552]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1ea      	bne.n	8001e26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8097 	beq.w	8001f8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e62:	4b83      	ldr	r3, [pc, #524]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10f      	bne.n	8001e8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b7f      	ldr	r3, [pc, #508]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	4a7e      	ldr	r2, [pc, #504]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7e:	4b7c      	ldr	r3, [pc, #496]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8e:	4b79      	ldr	r3, [pc, #484]	@ (8002074 <HAL_RCC_OscConfig+0x4b0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d118      	bne.n	8001ecc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9a:	4b76      	ldr	r3, [pc, #472]	@ (8002074 <HAL_RCC_OscConfig+0x4b0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a75      	ldr	r2, [pc, #468]	@ (8002074 <HAL_RCC_OscConfig+0x4b0>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff f877 	bl	8000f98 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eae:	f7ff f873 	bl	8000f98 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e118      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8002074 <HAL_RCC_OscConfig+0x4b0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x31e>
 8001ed4:	4b66      	ldr	r3, [pc, #408]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed8:	4a65      	ldr	r2, [pc, #404]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee0:	e01c      	b.n	8001f1c <HAL_RCC_OscConfig+0x358>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x340>
 8001eea:	4b61      	ldr	r3, [pc, #388]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eee:	4a60      	ldr	r2, [pc, #384]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef6:	4b5e      	ldr	r3, [pc, #376]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efa:	4a5d      	ldr	r2, [pc, #372]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f02:	e00b      	b.n	8001f1c <HAL_RCC_OscConfig+0x358>
 8001f04:	4b5a      	ldr	r3, [pc, #360]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f08:	4a59      	ldr	r2, [pc, #356]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f10:	4b57      	ldr	r3, [pc, #348]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f14:	4a56      	ldr	r2, [pc, #344]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f16:	f023 0304 	bic.w	r3, r3, #4
 8001f1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d015      	beq.n	8001f50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f24:	f7ff f838 	bl	8000f98 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2c:	f7ff f834 	bl	8000f98 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e0d7      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f42:	4b4b      	ldr	r3, [pc, #300]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0ee      	beq.n	8001f2c <HAL_RCC_OscConfig+0x368>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff f822 	bl	8000f98 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7ff f81e 	bl	8000f98 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e0c1      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6e:	4b40      	ldr	r3, [pc, #256]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1ee      	bne.n	8001f58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d105      	bne.n	8001f8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f80:	4b3b      	ldr	r3, [pc, #236]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f84:	4a3a      	ldr	r2, [pc, #232]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80ad 	beq.w	80020f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f96:	4b36      	ldr	r3, [pc, #216]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d060      	beq.n	8002064 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d145      	bne.n	8002036 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b33      	ldr	r3, [pc, #204]	@ (8002078 <HAL_RCC_OscConfig+0x4b4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fff2 	bl	8000f98 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7fe ffee 	bl	8000f98 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e093      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fca:	4b29      	ldr	r3, [pc, #164]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69da      	ldr	r2, [r3, #28]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe4:	019b      	lsls	r3, r3, #6
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fec:	085b      	lsrs	r3, r3, #1
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	041b      	lsls	r3, r3, #16
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff8:	061b      	lsls	r3, r3, #24
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002000:	071b      	lsls	r3, r3, #28
 8002002:	491b      	ldr	r1, [pc, #108]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002008:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <HAL_RCC_OscConfig+0x4b4>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7fe ffc3 	bl	8000f98 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002016:	f7fe ffbf 	bl	8000f98 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e064      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002028:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x452>
 8002034:	e05c      	b.n	80020f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <HAL_RCC_OscConfig+0x4b4>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7fe ffac 	bl	8000f98 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002044:	f7fe ffa8 	bl	8000f98 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e04d      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_RCC_OscConfig+0x4ac>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x480>
 8002062:	e045      	b.n	80020f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e040      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
 8002070:	40023800 	.word	0x40023800
 8002074:	40007000 	.word	0x40007000
 8002078:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <HAL_RCC_OscConfig+0x538>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d030      	beq.n	80020ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d129      	bne.n	80020ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d122      	bne.n	80020ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020ac:	4013      	ands	r3, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d119      	bne.n	80020ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	3b01      	subs	r3, #1
 80020c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d10f      	bne.n	80020ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d107      	bne.n	80020ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800

08002100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e041      	b.n	8002196 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fdf8 	bl	8000d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3304      	adds	r3, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4610      	mov	r0, r2
 8002140:	f000 fb0a 	bl	8002758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d001      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e04e      	b.n	8002256 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a23      	ldr	r2, [pc, #140]	@ (8002264 <HAL_TIM_Base_Start_IT+0xc4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d022      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x80>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021e2:	d01d      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x80>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002268 <HAL_TIM_Base_Start_IT+0xc8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d018      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x80>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1e      	ldr	r2, [pc, #120]	@ (800226c <HAL_TIM_Base_Start_IT+0xcc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d013      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x80>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002270 <HAL_TIM_Base_Start_IT+0xd0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00e      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x80>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1b      	ldr	r2, [pc, #108]	@ (8002274 <HAL_TIM_Base_Start_IT+0xd4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d009      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x80>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a19      	ldr	r2, [pc, #100]	@ (8002278 <HAL_TIM_Base_Start_IT+0xd8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d004      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x80>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a18      	ldr	r2, [pc, #96]	@ (800227c <HAL_TIM_Base_Start_IT+0xdc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d111      	bne.n	8002244 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b06      	cmp	r3, #6
 8002230:	d010      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0201 	orr.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002242:	e007      	b.n	8002254 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40010000 	.word	0x40010000
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800
 8002270:	40000c00 	.word	0x40000c00
 8002274:	40010400 	.word	0x40010400
 8002278:	40014000 	.word	0x40014000
 800227c:	40001800 	.word	0x40001800

08002280 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e097      	b.n	80023c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d106      	bne.n	80022ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7fe fce7 	bl	8000c7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2202      	movs	r2, #2
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022c4:	f023 0307 	bic.w	r3, r3, #7
 80022c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3304      	adds	r3, #4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4610      	mov	r0, r2
 80022d6:	f000 fa3f 	bl	8002758 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	4313      	orrs	r3, r2
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002320:	f023 030c 	bic.w	r3, r3, #12
 8002324:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800232c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	4313      	orrs	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	011a      	lsls	r2, r3, #4
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	031b      	lsls	r3, r3, #12
 8002350:	4313      	orrs	r3, r2
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800235e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002366:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	4313      	orrs	r3, r2
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80023f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d110      	bne.n	800241e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d102      	bne.n	8002408 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002402:	7b7b      	ldrb	r3, [r7, #13]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d001      	beq.n	800240c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e089      	b.n	8002520 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800241c:	e031      	b.n	8002482 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b04      	cmp	r3, #4
 8002422:	d110      	bne.n	8002446 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002424:	7bbb      	ldrb	r3, [r7, #14]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d102      	bne.n	8002430 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800242a:	7b3b      	ldrb	r3, [r7, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d001      	beq.n	8002434 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e075      	b.n	8002520 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002444:	e01d      	b.n	8002482 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d108      	bne.n	800245e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800244c:	7bbb      	ldrb	r3, [r7, #14]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d105      	bne.n	800245e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002452:	7b7b      	ldrb	r3, [r7, #13]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d102      	bne.n	800245e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002458:	7b3b      	ldrb	r3, [r7, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d001      	beq.n	8002462 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e05e      	b.n	8002520 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2202      	movs	r2, #2
 800246e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b04      	cmp	r3, #4
 800248c:	d010      	beq.n	80024b0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800248e:	e01f      	b.n	80024d0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f000 fa03 	bl	80028a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0202 	orr.w	r2, r2, #2
 80024ac:	60da      	str	r2, [r3, #12]
      break;
 80024ae:	e02e      	b.n	800250e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2201      	movs	r2, #1
 80024b6:	2104      	movs	r1, #4
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 f9f3 	bl	80028a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0204 	orr.w	r2, r2, #4
 80024cc:	60da      	str	r2, [r3, #12]
      break;
 80024ce:	e01e      	b.n	800250e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 f9e3 	bl	80028a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2201      	movs	r2, #1
 80024e4:	2104      	movs	r1, #4
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f9dc 	bl	80028a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0202 	orr.w	r2, r2, #2
 80024fa:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0204 	orr.w	r2, r2, #4
 800250a:	60da      	str	r2, [r3, #12]
      break;
 800250c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d020      	beq.n	800258c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01b      	beq.n	800258c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0202 	mvn.w	r2, #2
 800255c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f8d2 	bl	800271c <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f8c4 	bl	8002708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f8d5 	bl	8002730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d020      	beq.n	80025d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01b      	beq.n	80025d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0204 	mvn.w	r2, #4
 80025a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f8ac 	bl	800271c <HAL_TIM_IC_CaptureCallback>
 80025c4:	e005      	b.n	80025d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f89e 	bl	8002708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f8af 	bl	8002730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d020      	beq.n	8002624 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01b      	beq.n	8002624 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0208 	mvn.w	r2, #8
 80025f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2204      	movs	r2, #4
 80025fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f886 	bl	800271c <HAL_TIM_IC_CaptureCallback>
 8002610:	e005      	b.n	800261e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f878 	bl	8002708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f889 	bl	8002730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d020      	beq.n	8002670 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01b      	beq.n	8002670 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0210 	mvn.w	r2, #16
 8002640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2208      	movs	r2, #8
 8002646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f860 	bl	800271c <HAL_TIM_IC_CaptureCallback>
 800265c:	e005      	b.n	800266a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f852 	bl	8002708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f863 	bl	8002730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00c      	beq.n	8002694 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0201 	mvn.w	r2, #1
 800268c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe f918 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f9a2 	bl	80029fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00c      	beq.n	80026dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f834 	bl	8002744 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00c      	beq.n	8002700 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d007      	beq.n	8002700 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0220 	mvn.w	r2, #32
 80026f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f974 	bl	80029e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a43      	ldr	r2, [pc, #268]	@ (8002878 <TIM_Base_SetConfig+0x120>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002776:	d00f      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a40      	ldr	r2, [pc, #256]	@ (800287c <TIM_Base_SetConfig+0x124>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00b      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a3f      	ldr	r2, [pc, #252]	@ (8002880 <TIM_Base_SetConfig+0x128>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d007      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3e      	ldr	r2, [pc, #248]	@ (8002884 <TIM_Base_SetConfig+0x12c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d003      	beq.n	8002798 <TIM_Base_SetConfig+0x40>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3d      	ldr	r2, [pc, #244]	@ (8002888 <TIM_Base_SetConfig+0x130>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d108      	bne.n	80027aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800279e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a32      	ldr	r2, [pc, #200]	@ (8002878 <TIM_Base_SetConfig+0x120>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d02b      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b8:	d027      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a2f      	ldr	r2, [pc, #188]	@ (800287c <TIM_Base_SetConfig+0x124>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d023      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002880 <TIM_Base_SetConfig+0x128>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d01f      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002884 <TIM_Base_SetConfig+0x12c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01b      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002888 <TIM_Base_SetConfig+0x130>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d017      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a2b      	ldr	r2, [pc, #172]	@ (800288c <TIM_Base_SetConfig+0x134>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002890 <TIM_Base_SetConfig+0x138>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00f      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a29      	ldr	r2, [pc, #164]	@ (8002894 <TIM_Base_SetConfig+0x13c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00b      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a28      	ldr	r2, [pc, #160]	@ (8002898 <TIM_Base_SetConfig+0x140>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d007      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a27      	ldr	r2, [pc, #156]	@ (800289c <TIM_Base_SetConfig+0x144>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d003      	beq.n	800280a <TIM_Base_SetConfig+0xb2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a26      	ldr	r2, [pc, #152]	@ (80028a0 <TIM_Base_SetConfig+0x148>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d108      	bne.n	800281c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a0e      	ldr	r2, [pc, #56]	@ (8002878 <TIM_Base_SetConfig+0x120>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d003      	beq.n	800284a <TIM_Base_SetConfig+0xf2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a10      	ldr	r2, [pc, #64]	@ (8002888 <TIM_Base_SetConfig+0x130>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d103      	bne.n	8002852 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f043 0204 	orr.w	r2, r3, #4
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	601a      	str	r2, [r3, #0]
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40010000 	.word	0x40010000
 800287c:	40000400 	.word	0x40000400
 8002880:	40000800 	.word	0x40000800
 8002884:	40000c00 	.word	0x40000c00
 8002888:	40010400 	.word	0x40010400
 800288c:	40014000 	.word	0x40014000
 8002890:	40014400 	.word	0x40014400
 8002894:	40014800 	.word	0x40014800
 8002898:	40001800 	.word	0x40001800
 800289c:	40001c00 	.word	0x40001c00
 80028a0:	40002000 	.word	0x40002000

080028a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2201      	movs	r2, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a1a      	ldr	r2, [r3, #32]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	401a      	ands	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	431a      	orrs	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	621a      	str	r2, [r3, #32]
}
 80028e2:	bf00      	nop
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002904:	2302      	movs	r3, #2
 8002906:	e05a      	b.n	80029be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800292e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a21      	ldr	r2, [pc, #132]	@ (80029cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d022      	beq.n	8002992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002954:	d01d      	beq.n	8002992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d018      	beq.n	8002992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1b      	ldr	r2, [pc, #108]	@ (80029d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1a      	ldr	r2, [pc, #104]	@ (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00e      	beq.n	8002992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a18      	ldr	r2, [pc, #96]	@ (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d009      	beq.n	8002992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a17      	ldr	r2, [pc, #92]	@ (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d004      	beq.n	8002992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a15      	ldr	r2, [pc, #84]	@ (80029e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10c      	bne.n	80029ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002998:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40010000 	.word	0x40010000
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40010400 	.word	0x40010400
 80029e0:	40014000 	.word	0x40014000
 80029e4:	40001800 	.word	0x40001800

080029e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e042      	b.n	8002aa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe f9c2 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2224      	movs	r2, #36	@ 0x24
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f82b 	bl	8002ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab4:	b0c0      	sub	sp, #256	@ 0x100
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002acc:	68d9      	ldr	r1, [r3, #12]
 8002ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	ea40 0301 	orr.w	r3, r0, r1
 8002ad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b08:	f021 010c 	bic.w	r1, r1, #12
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b16:	430b      	orrs	r3, r1
 8002b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2a:	6999      	ldr	r1, [r3, #24]
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	ea40 0301 	orr.w	r3, r0, r1
 8002b36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	4b8f      	ldr	r3, [pc, #572]	@ (8002d7c <UART_SetConfig+0x2cc>)
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d005      	beq.n	8002b50 <UART_SetConfig+0xa0>
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4b8d      	ldr	r3, [pc, #564]	@ (8002d80 <UART_SetConfig+0x2d0>)
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d104      	bne.n	8002b5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b50:	f7fe fdf4 	bl	800173c <HAL_RCC_GetPCLK2Freq>
 8002b54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b58:	e003      	b.n	8002b62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b5a:	f7fe fddb 	bl	8001714 <HAL_RCC_GetPCLK1Freq>
 8002b5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b6c:	f040 810c 	bne.w	8002d88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b82:	4622      	mov	r2, r4
 8002b84:	462b      	mov	r3, r5
 8002b86:	1891      	adds	r1, r2, r2
 8002b88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b8a:	415b      	adcs	r3, r3
 8002b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b92:	4621      	mov	r1, r4
 8002b94:	eb12 0801 	adds.w	r8, r2, r1
 8002b98:	4629      	mov	r1, r5
 8002b9a:	eb43 0901 	adc.w	r9, r3, r1
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bb2:	4690      	mov	r8, r2
 8002bb4:	4699      	mov	r9, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	eb18 0303 	adds.w	r3, r8, r3
 8002bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002bc0:	462b      	mov	r3, r5
 8002bc2:	eb49 0303 	adc.w	r3, r9, r3
 8002bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002bd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002bda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002bde:	460b      	mov	r3, r1
 8002be0:	18db      	adds	r3, r3, r3
 8002be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002be4:	4613      	mov	r3, r2
 8002be6:	eb42 0303 	adc.w	r3, r2, r3
 8002bea:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002bf4:	f7fd fb5c 	bl	80002b0 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4b61      	ldr	r3, [pc, #388]	@ (8002d84 <UART_SetConfig+0x2d4>)
 8002bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	011c      	lsls	r4, r3, #4
 8002c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c18:	4642      	mov	r2, r8
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	1891      	adds	r1, r2, r2
 8002c1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c20:	415b      	adcs	r3, r3
 8002c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c28:	4641      	mov	r1, r8
 8002c2a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c2e:	4649      	mov	r1, r9
 8002c30:	eb43 0b01 	adc.w	fp, r3, r1
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c48:	4692      	mov	sl, r2
 8002c4a:	469b      	mov	fp, r3
 8002c4c:	4643      	mov	r3, r8
 8002c4e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c56:	464b      	mov	r3, r9
 8002c58:	eb4b 0303 	adc.w	r3, fp, r3
 8002c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c74:	460b      	mov	r3, r1
 8002c76:	18db      	adds	r3, r3, r3
 8002c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	eb42 0303 	adc.w	r3, r2, r3
 8002c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c8a:	f7fd fb11 	bl	80002b0 <__aeabi_uldivmod>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	4b3b      	ldr	r3, [pc, #236]	@ (8002d84 <UART_SetConfig+0x2d4>)
 8002c96:	fba3 2301 	umull	r2, r3, r3, r1
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2264      	movs	r2, #100	@ 0x64
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	1acb      	subs	r3, r1, r3
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002caa:	4b36      	ldr	r3, [pc, #216]	@ (8002d84 <UART_SetConfig+0x2d4>)
 8002cac:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002cb8:	441c      	add	r4, r3
 8002cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002cc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ccc:	4642      	mov	r2, r8
 8002cce:	464b      	mov	r3, r9
 8002cd0:	1891      	adds	r1, r2, r2
 8002cd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cd4:	415b      	adcs	r3, r3
 8002cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002cdc:	4641      	mov	r1, r8
 8002cde:	1851      	adds	r1, r2, r1
 8002ce0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	414b      	adcs	r3, r1
 8002ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002cf4:	4659      	mov	r1, fp
 8002cf6:	00cb      	lsls	r3, r1, #3
 8002cf8:	4651      	mov	r1, sl
 8002cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfe:	4651      	mov	r1, sl
 8002d00:	00ca      	lsls	r2, r1, #3
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	4642      	mov	r2, r8
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d10:	464b      	mov	r3, r9
 8002d12:	460a      	mov	r2, r1
 8002d14:	eb42 0303 	adc.w	r3, r2, r3
 8002d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d30:	460b      	mov	r3, r1
 8002d32:	18db      	adds	r3, r3, r3
 8002d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d36:	4613      	mov	r3, r2
 8002d38:	eb42 0303 	adc.w	r3, r2, r3
 8002d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d46:	f7fd fab3 	bl	80002b0 <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <UART_SetConfig+0x2d4>)
 8002d50:	fba3 1302 	umull	r1, r3, r3, r2
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	2164      	movs	r1, #100	@ 0x64
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	3332      	adds	r3, #50	@ 0x32
 8002d62:	4a08      	ldr	r2, [pc, #32]	@ (8002d84 <UART_SetConfig+0x2d4>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	f003 0207 	and.w	r2, r3, #7
 8002d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4422      	add	r2, r4
 8002d76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d78:	e106      	b.n	8002f88 <UART_SetConfig+0x4d8>
 8002d7a:	bf00      	nop
 8002d7c:	40011000 	.word	0x40011000
 8002d80:	40011400 	.word	0x40011400
 8002d84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d9a:	4642      	mov	r2, r8
 8002d9c:	464b      	mov	r3, r9
 8002d9e:	1891      	adds	r1, r2, r2
 8002da0:	6239      	str	r1, [r7, #32]
 8002da2:	415b      	adcs	r3, r3
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002daa:	4641      	mov	r1, r8
 8002dac:	1854      	adds	r4, r2, r1
 8002dae:	4649      	mov	r1, r9
 8002db0:	eb43 0501 	adc.w	r5, r3, r1
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	00eb      	lsls	r3, r5, #3
 8002dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dc2:	00e2      	lsls	r2, r4, #3
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	4643      	mov	r3, r8
 8002dca:	18e3      	adds	r3, r4, r3
 8002dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002dd0:	464b      	mov	r3, r9
 8002dd2:	eb45 0303 	adc.w	r3, r5, r3
 8002dd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002de6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002df6:	4629      	mov	r1, r5
 8002df8:	008b      	lsls	r3, r1, #2
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e00:	4621      	mov	r1, r4
 8002e02:	008a      	lsls	r2, r1, #2
 8002e04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e08:	f7fd fa52 	bl	80002b0 <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4b60      	ldr	r3, [pc, #384]	@ (8002f94 <UART_SetConfig+0x4e4>)
 8002e12:	fba3 2302 	umull	r2, r3, r3, r2
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	011c      	lsls	r4, r3, #4
 8002e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e2c:	4642      	mov	r2, r8
 8002e2e:	464b      	mov	r3, r9
 8002e30:	1891      	adds	r1, r2, r2
 8002e32:	61b9      	str	r1, [r7, #24]
 8002e34:	415b      	adcs	r3, r3
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e3c:	4641      	mov	r1, r8
 8002e3e:	1851      	adds	r1, r2, r1
 8002e40:	6139      	str	r1, [r7, #16]
 8002e42:	4649      	mov	r1, r9
 8002e44:	414b      	adcs	r3, r1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e54:	4659      	mov	r1, fp
 8002e56:	00cb      	lsls	r3, r1, #3
 8002e58:	4651      	mov	r1, sl
 8002e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e5e:	4651      	mov	r1, sl
 8002e60:	00ca      	lsls	r2, r1, #3
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	4642      	mov	r2, r8
 8002e6a:	189b      	adds	r3, r3, r2
 8002e6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e70:	464b      	mov	r3, r9
 8002e72:	460a      	mov	r2, r1
 8002e74:	eb42 0303 	adc.w	r3, r2, r3
 8002e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e94:	4649      	mov	r1, r9
 8002e96:	008b      	lsls	r3, r1, #2
 8002e98:	4641      	mov	r1, r8
 8002e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e9e:	4641      	mov	r1, r8
 8002ea0:	008a      	lsls	r2, r1, #2
 8002ea2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ea6:	f7fd fa03 	bl	80002b0 <__aeabi_uldivmod>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4b38      	ldr	r3, [pc, #224]	@ (8002f94 <UART_SetConfig+0x4e4>)
 8002eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2264      	movs	r2, #100	@ 0x64
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	1acb      	subs	r3, r1, r3
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	3332      	adds	r3, #50	@ 0x32
 8002ec4:	4a33      	ldr	r2, [pc, #204]	@ (8002f94 <UART_SetConfig+0x4e4>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ed0:	441c      	add	r4, r3
 8002ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002eda:	677a      	str	r2, [r7, #116]	@ 0x74
 8002edc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ee0:	4642      	mov	r2, r8
 8002ee2:	464b      	mov	r3, r9
 8002ee4:	1891      	adds	r1, r2, r2
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	415b      	adcs	r3, r3
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	1851      	adds	r1, r2, r1
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	414b      	adcs	r3, r1
 8002efa:	607b      	str	r3, [r7, #4]
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f08:	4659      	mov	r1, fp
 8002f0a:	00cb      	lsls	r3, r1, #3
 8002f0c:	4651      	mov	r1, sl
 8002f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f12:	4651      	mov	r1, sl
 8002f14:	00ca      	lsls	r2, r1, #3
 8002f16:	4610      	mov	r0, r2
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4642      	mov	r2, r8
 8002f1e:	189b      	adds	r3, r3, r2
 8002f20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f22:	464b      	mov	r3, r9
 8002f24:	460a      	mov	r2, r1
 8002f26:	eb42 0303 	adc.w	r3, r2, r3
 8002f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f36:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f44:	4649      	mov	r1, r9
 8002f46:	008b      	lsls	r3, r1, #2
 8002f48:	4641      	mov	r1, r8
 8002f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f4e:	4641      	mov	r1, r8
 8002f50:	008a      	lsls	r2, r1, #2
 8002f52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f56:	f7fd f9ab 	bl	80002b0 <__aeabi_uldivmod>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <UART_SetConfig+0x4e4>)
 8002f60:	fba3 1302 	umull	r1, r3, r3, r2
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	2164      	movs	r1, #100	@ 0x64
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	3332      	adds	r3, #50	@ 0x32
 8002f72:	4a08      	ldr	r2, [pc, #32]	@ (8002f94 <UART_SetConfig+0x4e4>)
 8002f74:	fba2 2303 	umull	r2, r3, r2, r3
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	f003 020f 	and.w	r2, r3, #15
 8002f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4422      	add	r2, r4
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f94:	51eb851f 	.word	0x51eb851f

08002f98 <std>:
 8002f98:	2300      	movs	r3, #0
 8002f9a:	b510      	push	{r4, lr}
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	e9c0 3300 	strd	r3, r3, [r0]
 8002fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fa6:	6083      	str	r3, [r0, #8]
 8002fa8:	8181      	strh	r1, [r0, #12]
 8002faa:	6643      	str	r3, [r0, #100]	@ 0x64
 8002fac:	81c2      	strh	r2, [r0, #14]
 8002fae:	6183      	str	r3, [r0, #24]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	305c      	adds	r0, #92	@ 0x5c
 8002fb6:	f000 f8c3 	bl	8003140 <memset>
 8002fba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff0 <std+0x58>)
 8002fbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff4 <std+0x5c>)
 8002fc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <std+0x60>)
 8002fc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002ffc <std+0x64>)
 8002fc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8002fca:	4b0d      	ldr	r3, [pc, #52]	@ (8003000 <std+0x68>)
 8002fcc:	6224      	str	r4, [r4, #32]
 8002fce:	429c      	cmp	r4, r3
 8002fd0:	d006      	beq.n	8002fe0 <std+0x48>
 8002fd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002fd6:	4294      	cmp	r4, r2
 8002fd8:	d002      	beq.n	8002fe0 <std+0x48>
 8002fda:	33d0      	adds	r3, #208	@ 0xd0
 8002fdc:	429c      	cmp	r4, r3
 8002fde:	d105      	bne.n	8002fec <std+0x54>
 8002fe0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fe8:	f000 b8dc 	b.w	80031a4 <__retarget_lock_init_recursive>
 8002fec:	bd10      	pop	{r4, pc}
 8002fee:	bf00      	nop
 8002ff0:	080039f9 	.word	0x080039f9
 8002ff4:	08003a1b 	.word	0x08003a1b
 8002ff8:	08003a53 	.word	0x08003a53
 8002ffc:	08003a77 	.word	0x08003a77
 8003000:	20000170 	.word	0x20000170

08003004 <stdio_exit_handler>:
 8003004:	4a02      	ldr	r2, [pc, #8]	@ (8003010 <stdio_exit_handler+0xc>)
 8003006:	4903      	ldr	r1, [pc, #12]	@ (8003014 <stdio_exit_handler+0x10>)
 8003008:	4803      	ldr	r0, [pc, #12]	@ (8003018 <stdio_exit_handler+0x14>)
 800300a:	f000 b869 	b.w	80030e0 <_fwalk_sglue>
 800300e:	bf00      	nop
 8003010:	2000000c 	.word	0x2000000c
 8003014:	08003991 	.word	0x08003991
 8003018:	2000001c 	.word	0x2000001c

0800301c <cleanup_stdio>:
 800301c:	6841      	ldr	r1, [r0, #4]
 800301e:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <cleanup_stdio+0x34>)
 8003020:	4299      	cmp	r1, r3
 8003022:	b510      	push	{r4, lr}
 8003024:	4604      	mov	r4, r0
 8003026:	d001      	beq.n	800302c <cleanup_stdio+0x10>
 8003028:	f000 fcb2 	bl	8003990 <_fflush_r>
 800302c:	68a1      	ldr	r1, [r4, #8]
 800302e:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <cleanup_stdio+0x38>)
 8003030:	4299      	cmp	r1, r3
 8003032:	d002      	beq.n	800303a <cleanup_stdio+0x1e>
 8003034:	4620      	mov	r0, r4
 8003036:	f000 fcab 	bl	8003990 <_fflush_r>
 800303a:	68e1      	ldr	r1, [r4, #12]
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <cleanup_stdio+0x3c>)
 800303e:	4299      	cmp	r1, r3
 8003040:	d004      	beq.n	800304c <cleanup_stdio+0x30>
 8003042:	4620      	mov	r0, r4
 8003044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003048:	f000 bca2 	b.w	8003990 <_fflush_r>
 800304c:	bd10      	pop	{r4, pc}
 800304e:	bf00      	nop
 8003050:	20000170 	.word	0x20000170
 8003054:	200001d8 	.word	0x200001d8
 8003058:	20000240 	.word	0x20000240

0800305c <global_stdio_init.part.0>:
 800305c:	b510      	push	{r4, lr}
 800305e:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <global_stdio_init.part.0+0x30>)
 8003060:	4c0b      	ldr	r4, [pc, #44]	@ (8003090 <global_stdio_init.part.0+0x34>)
 8003062:	4a0c      	ldr	r2, [pc, #48]	@ (8003094 <global_stdio_init.part.0+0x38>)
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	4620      	mov	r0, r4
 8003068:	2200      	movs	r2, #0
 800306a:	2104      	movs	r1, #4
 800306c:	f7ff ff94 	bl	8002f98 <std>
 8003070:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003074:	2201      	movs	r2, #1
 8003076:	2109      	movs	r1, #9
 8003078:	f7ff ff8e 	bl	8002f98 <std>
 800307c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003080:	2202      	movs	r2, #2
 8003082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003086:	2112      	movs	r1, #18
 8003088:	f7ff bf86 	b.w	8002f98 <std>
 800308c:	200002a8 	.word	0x200002a8
 8003090:	20000170 	.word	0x20000170
 8003094:	08003005 	.word	0x08003005

08003098 <__sfp_lock_acquire>:
 8003098:	4801      	ldr	r0, [pc, #4]	@ (80030a0 <__sfp_lock_acquire+0x8>)
 800309a:	f000 b884 	b.w	80031a6 <__retarget_lock_acquire_recursive>
 800309e:	bf00      	nop
 80030a0:	200002ad 	.word	0x200002ad

080030a4 <__sfp_lock_release>:
 80030a4:	4801      	ldr	r0, [pc, #4]	@ (80030ac <__sfp_lock_release+0x8>)
 80030a6:	f000 b87f 	b.w	80031a8 <__retarget_lock_release_recursive>
 80030aa:	bf00      	nop
 80030ac:	200002ad 	.word	0x200002ad

080030b0 <__sinit>:
 80030b0:	b510      	push	{r4, lr}
 80030b2:	4604      	mov	r4, r0
 80030b4:	f7ff fff0 	bl	8003098 <__sfp_lock_acquire>
 80030b8:	6a23      	ldr	r3, [r4, #32]
 80030ba:	b11b      	cbz	r3, 80030c4 <__sinit+0x14>
 80030bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030c0:	f7ff bff0 	b.w	80030a4 <__sfp_lock_release>
 80030c4:	4b04      	ldr	r3, [pc, #16]	@ (80030d8 <__sinit+0x28>)
 80030c6:	6223      	str	r3, [r4, #32]
 80030c8:	4b04      	ldr	r3, [pc, #16]	@ (80030dc <__sinit+0x2c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f5      	bne.n	80030bc <__sinit+0xc>
 80030d0:	f7ff ffc4 	bl	800305c <global_stdio_init.part.0>
 80030d4:	e7f2      	b.n	80030bc <__sinit+0xc>
 80030d6:	bf00      	nop
 80030d8:	0800301d 	.word	0x0800301d
 80030dc:	200002a8 	.word	0x200002a8

080030e0 <_fwalk_sglue>:
 80030e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030e4:	4607      	mov	r7, r0
 80030e6:	4688      	mov	r8, r1
 80030e8:	4614      	mov	r4, r2
 80030ea:	2600      	movs	r6, #0
 80030ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030f0:	f1b9 0901 	subs.w	r9, r9, #1
 80030f4:	d505      	bpl.n	8003102 <_fwalk_sglue+0x22>
 80030f6:	6824      	ldr	r4, [r4, #0]
 80030f8:	2c00      	cmp	r4, #0
 80030fa:	d1f7      	bne.n	80030ec <_fwalk_sglue+0xc>
 80030fc:	4630      	mov	r0, r6
 80030fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003102:	89ab      	ldrh	r3, [r5, #12]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d907      	bls.n	8003118 <_fwalk_sglue+0x38>
 8003108:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800310c:	3301      	adds	r3, #1
 800310e:	d003      	beq.n	8003118 <_fwalk_sglue+0x38>
 8003110:	4629      	mov	r1, r5
 8003112:	4638      	mov	r0, r7
 8003114:	47c0      	blx	r8
 8003116:	4306      	orrs	r6, r0
 8003118:	3568      	adds	r5, #104	@ 0x68
 800311a:	e7e9      	b.n	80030f0 <_fwalk_sglue+0x10>

0800311c <iprintf>:
 800311c:	b40f      	push	{r0, r1, r2, r3}
 800311e:	b507      	push	{r0, r1, r2, lr}
 8003120:	4906      	ldr	r1, [pc, #24]	@ (800313c <iprintf+0x20>)
 8003122:	ab04      	add	r3, sp, #16
 8003124:	6808      	ldr	r0, [r1, #0]
 8003126:	f853 2b04 	ldr.w	r2, [r3], #4
 800312a:	6881      	ldr	r1, [r0, #8]
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	f000 f865 	bl	80031fc <_vfiprintf_r>
 8003132:	b003      	add	sp, #12
 8003134:	f85d eb04 	ldr.w	lr, [sp], #4
 8003138:	b004      	add	sp, #16
 800313a:	4770      	bx	lr
 800313c:	20000018 	.word	0x20000018

08003140 <memset>:
 8003140:	4402      	add	r2, r0
 8003142:	4603      	mov	r3, r0
 8003144:	4293      	cmp	r3, r2
 8003146:	d100      	bne.n	800314a <memset+0xa>
 8003148:	4770      	bx	lr
 800314a:	f803 1b01 	strb.w	r1, [r3], #1
 800314e:	e7f9      	b.n	8003144 <memset+0x4>

08003150 <__errno>:
 8003150:	4b01      	ldr	r3, [pc, #4]	@ (8003158 <__errno+0x8>)
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000018 	.word	0x20000018

0800315c <__libc_init_array>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	4d0d      	ldr	r5, [pc, #52]	@ (8003194 <__libc_init_array+0x38>)
 8003160:	4c0d      	ldr	r4, [pc, #52]	@ (8003198 <__libc_init_array+0x3c>)
 8003162:	1b64      	subs	r4, r4, r5
 8003164:	10a4      	asrs	r4, r4, #2
 8003166:	2600      	movs	r6, #0
 8003168:	42a6      	cmp	r6, r4
 800316a:	d109      	bne.n	8003180 <__libc_init_array+0x24>
 800316c:	4d0b      	ldr	r5, [pc, #44]	@ (800319c <__libc_init_array+0x40>)
 800316e:	4c0c      	ldr	r4, [pc, #48]	@ (80031a0 <__libc_init_array+0x44>)
 8003170:	f000 fe3e 	bl	8003df0 <_init>
 8003174:	1b64      	subs	r4, r4, r5
 8003176:	10a4      	asrs	r4, r4, #2
 8003178:	2600      	movs	r6, #0
 800317a:	42a6      	cmp	r6, r4
 800317c:	d105      	bne.n	800318a <__libc_init_array+0x2e>
 800317e:	bd70      	pop	{r4, r5, r6, pc}
 8003180:	f855 3b04 	ldr.w	r3, [r5], #4
 8003184:	4798      	blx	r3
 8003186:	3601      	adds	r6, #1
 8003188:	e7ee      	b.n	8003168 <__libc_init_array+0xc>
 800318a:	f855 3b04 	ldr.w	r3, [r5], #4
 800318e:	4798      	blx	r3
 8003190:	3601      	adds	r6, #1
 8003192:	e7f2      	b.n	800317a <__libc_init_array+0x1e>
 8003194:	08003e64 	.word	0x08003e64
 8003198:	08003e64 	.word	0x08003e64
 800319c:	08003e64 	.word	0x08003e64
 80031a0:	08003e68 	.word	0x08003e68

080031a4 <__retarget_lock_init_recursive>:
 80031a4:	4770      	bx	lr

080031a6 <__retarget_lock_acquire_recursive>:
 80031a6:	4770      	bx	lr

080031a8 <__retarget_lock_release_recursive>:
 80031a8:	4770      	bx	lr

080031aa <__sfputc_r>:
 80031aa:	6893      	ldr	r3, [r2, #8]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	b410      	push	{r4}
 80031b2:	6093      	str	r3, [r2, #8]
 80031b4:	da08      	bge.n	80031c8 <__sfputc_r+0x1e>
 80031b6:	6994      	ldr	r4, [r2, #24]
 80031b8:	42a3      	cmp	r3, r4
 80031ba:	db01      	blt.n	80031c0 <__sfputc_r+0x16>
 80031bc:	290a      	cmp	r1, #10
 80031be:	d103      	bne.n	80031c8 <__sfputc_r+0x1e>
 80031c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031c4:	f000 bc5b 	b.w	8003a7e <__swbuf_r>
 80031c8:	6813      	ldr	r3, [r2, #0]
 80031ca:	1c58      	adds	r0, r3, #1
 80031cc:	6010      	str	r0, [r2, #0]
 80031ce:	7019      	strb	r1, [r3, #0]
 80031d0:	4608      	mov	r0, r1
 80031d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <__sfputs_r>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	4606      	mov	r6, r0
 80031dc:	460f      	mov	r7, r1
 80031de:	4614      	mov	r4, r2
 80031e0:	18d5      	adds	r5, r2, r3
 80031e2:	42ac      	cmp	r4, r5
 80031e4:	d101      	bne.n	80031ea <__sfputs_r+0x12>
 80031e6:	2000      	movs	r0, #0
 80031e8:	e007      	b.n	80031fa <__sfputs_r+0x22>
 80031ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031ee:	463a      	mov	r2, r7
 80031f0:	4630      	mov	r0, r6
 80031f2:	f7ff ffda 	bl	80031aa <__sfputc_r>
 80031f6:	1c43      	adds	r3, r0, #1
 80031f8:	d1f3      	bne.n	80031e2 <__sfputs_r+0xa>
 80031fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080031fc <_vfiprintf_r>:
 80031fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003200:	460d      	mov	r5, r1
 8003202:	b09d      	sub	sp, #116	@ 0x74
 8003204:	4614      	mov	r4, r2
 8003206:	4698      	mov	r8, r3
 8003208:	4606      	mov	r6, r0
 800320a:	b118      	cbz	r0, 8003214 <_vfiprintf_r+0x18>
 800320c:	6a03      	ldr	r3, [r0, #32]
 800320e:	b90b      	cbnz	r3, 8003214 <_vfiprintf_r+0x18>
 8003210:	f7ff ff4e 	bl	80030b0 <__sinit>
 8003214:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003216:	07d9      	lsls	r1, r3, #31
 8003218:	d405      	bmi.n	8003226 <_vfiprintf_r+0x2a>
 800321a:	89ab      	ldrh	r3, [r5, #12]
 800321c:	059a      	lsls	r2, r3, #22
 800321e:	d402      	bmi.n	8003226 <_vfiprintf_r+0x2a>
 8003220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003222:	f7ff ffc0 	bl	80031a6 <__retarget_lock_acquire_recursive>
 8003226:	89ab      	ldrh	r3, [r5, #12]
 8003228:	071b      	lsls	r3, r3, #28
 800322a:	d501      	bpl.n	8003230 <_vfiprintf_r+0x34>
 800322c:	692b      	ldr	r3, [r5, #16]
 800322e:	b99b      	cbnz	r3, 8003258 <_vfiprintf_r+0x5c>
 8003230:	4629      	mov	r1, r5
 8003232:	4630      	mov	r0, r6
 8003234:	f000 fc62 	bl	8003afc <__swsetup_r>
 8003238:	b170      	cbz	r0, 8003258 <_vfiprintf_r+0x5c>
 800323a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800323c:	07dc      	lsls	r4, r3, #31
 800323e:	d504      	bpl.n	800324a <_vfiprintf_r+0x4e>
 8003240:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003244:	b01d      	add	sp, #116	@ 0x74
 8003246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800324a:	89ab      	ldrh	r3, [r5, #12]
 800324c:	0598      	lsls	r0, r3, #22
 800324e:	d4f7      	bmi.n	8003240 <_vfiprintf_r+0x44>
 8003250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003252:	f7ff ffa9 	bl	80031a8 <__retarget_lock_release_recursive>
 8003256:	e7f3      	b.n	8003240 <_vfiprintf_r+0x44>
 8003258:	2300      	movs	r3, #0
 800325a:	9309      	str	r3, [sp, #36]	@ 0x24
 800325c:	2320      	movs	r3, #32
 800325e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003262:	f8cd 800c 	str.w	r8, [sp, #12]
 8003266:	2330      	movs	r3, #48	@ 0x30
 8003268:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003418 <_vfiprintf_r+0x21c>
 800326c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003270:	f04f 0901 	mov.w	r9, #1
 8003274:	4623      	mov	r3, r4
 8003276:	469a      	mov	sl, r3
 8003278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800327c:	b10a      	cbz	r2, 8003282 <_vfiprintf_r+0x86>
 800327e:	2a25      	cmp	r2, #37	@ 0x25
 8003280:	d1f9      	bne.n	8003276 <_vfiprintf_r+0x7a>
 8003282:	ebba 0b04 	subs.w	fp, sl, r4
 8003286:	d00b      	beq.n	80032a0 <_vfiprintf_r+0xa4>
 8003288:	465b      	mov	r3, fp
 800328a:	4622      	mov	r2, r4
 800328c:	4629      	mov	r1, r5
 800328e:	4630      	mov	r0, r6
 8003290:	f7ff ffa2 	bl	80031d8 <__sfputs_r>
 8003294:	3001      	adds	r0, #1
 8003296:	f000 80a7 	beq.w	80033e8 <_vfiprintf_r+0x1ec>
 800329a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800329c:	445a      	add	r2, fp
 800329e:	9209      	str	r2, [sp, #36]	@ 0x24
 80032a0:	f89a 3000 	ldrb.w	r3, [sl]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 809f 	beq.w	80033e8 <_vfiprintf_r+0x1ec>
 80032aa:	2300      	movs	r3, #0
 80032ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032b4:	f10a 0a01 	add.w	sl, sl, #1
 80032b8:	9304      	str	r3, [sp, #16]
 80032ba:	9307      	str	r3, [sp, #28]
 80032bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80032c2:	4654      	mov	r4, sl
 80032c4:	2205      	movs	r2, #5
 80032c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032ca:	4853      	ldr	r0, [pc, #332]	@ (8003418 <_vfiprintf_r+0x21c>)
 80032cc:	f7fc ffa0 	bl	8000210 <memchr>
 80032d0:	9a04      	ldr	r2, [sp, #16]
 80032d2:	b9d8      	cbnz	r0, 800330c <_vfiprintf_r+0x110>
 80032d4:	06d1      	lsls	r1, r2, #27
 80032d6:	bf44      	itt	mi
 80032d8:	2320      	movmi	r3, #32
 80032da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032de:	0713      	lsls	r3, r2, #28
 80032e0:	bf44      	itt	mi
 80032e2:	232b      	movmi	r3, #43	@ 0x2b
 80032e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032e8:	f89a 3000 	ldrb.w	r3, [sl]
 80032ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80032ee:	d015      	beq.n	800331c <_vfiprintf_r+0x120>
 80032f0:	9a07      	ldr	r2, [sp, #28]
 80032f2:	4654      	mov	r4, sl
 80032f4:	2000      	movs	r0, #0
 80032f6:	f04f 0c0a 	mov.w	ip, #10
 80032fa:	4621      	mov	r1, r4
 80032fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003300:	3b30      	subs	r3, #48	@ 0x30
 8003302:	2b09      	cmp	r3, #9
 8003304:	d94b      	bls.n	800339e <_vfiprintf_r+0x1a2>
 8003306:	b1b0      	cbz	r0, 8003336 <_vfiprintf_r+0x13a>
 8003308:	9207      	str	r2, [sp, #28]
 800330a:	e014      	b.n	8003336 <_vfiprintf_r+0x13a>
 800330c:	eba0 0308 	sub.w	r3, r0, r8
 8003310:	fa09 f303 	lsl.w	r3, r9, r3
 8003314:	4313      	orrs	r3, r2
 8003316:	9304      	str	r3, [sp, #16]
 8003318:	46a2      	mov	sl, r4
 800331a:	e7d2      	b.n	80032c2 <_vfiprintf_r+0xc6>
 800331c:	9b03      	ldr	r3, [sp, #12]
 800331e:	1d19      	adds	r1, r3, #4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	9103      	str	r1, [sp, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	bfbb      	ittet	lt
 8003328:	425b      	neglt	r3, r3
 800332a:	f042 0202 	orrlt.w	r2, r2, #2
 800332e:	9307      	strge	r3, [sp, #28]
 8003330:	9307      	strlt	r3, [sp, #28]
 8003332:	bfb8      	it	lt
 8003334:	9204      	strlt	r2, [sp, #16]
 8003336:	7823      	ldrb	r3, [r4, #0]
 8003338:	2b2e      	cmp	r3, #46	@ 0x2e
 800333a:	d10a      	bne.n	8003352 <_vfiprintf_r+0x156>
 800333c:	7863      	ldrb	r3, [r4, #1]
 800333e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003340:	d132      	bne.n	80033a8 <_vfiprintf_r+0x1ac>
 8003342:	9b03      	ldr	r3, [sp, #12]
 8003344:	1d1a      	adds	r2, r3, #4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	9203      	str	r2, [sp, #12]
 800334a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800334e:	3402      	adds	r4, #2
 8003350:	9305      	str	r3, [sp, #20]
 8003352:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003428 <_vfiprintf_r+0x22c>
 8003356:	7821      	ldrb	r1, [r4, #0]
 8003358:	2203      	movs	r2, #3
 800335a:	4650      	mov	r0, sl
 800335c:	f7fc ff58 	bl	8000210 <memchr>
 8003360:	b138      	cbz	r0, 8003372 <_vfiprintf_r+0x176>
 8003362:	9b04      	ldr	r3, [sp, #16]
 8003364:	eba0 000a 	sub.w	r0, r0, sl
 8003368:	2240      	movs	r2, #64	@ 0x40
 800336a:	4082      	lsls	r2, r0
 800336c:	4313      	orrs	r3, r2
 800336e:	3401      	adds	r4, #1
 8003370:	9304      	str	r3, [sp, #16]
 8003372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003376:	4829      	ldr	r0, [pc, #164]	@ (800341c <_vfiprintf_r+0x220>)
 8003378:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800337c:	2206      	movs	r2, #6
 800337e:	f7fc ff47 	bl	8000210 <memchr>
 8003382:	2800      	cmp	r0, #0
 8003384:	d03f      	beq.n	8003406 <_vfiprintf_r+0x20a>
 8003386:	4b26      	ldr	r3, [pc, #152]	@ (8003420 <_vfiprintf_r+0x224>)
 8003388:	bb1b      	cbnz	r3, 80033d2 <_vfiprintf_r+0x1d6>
 800338a:	9b03      	ldr	r3, [sp, #12]
 800338c:	3307      	adds	r3, #7
 800338e:	f023 0307 	bic.w	r3, r3, #7
 8003392:	3308      	adds	r3, #8
 8003394:	9303      	str	r3, [sp, #12]
 8003396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003398:	443b      	add	r3, r7
 800339a:	9309      	str	r3, [sp, #36]	@ 0x24
 800339c:	e76a      	b.n	8003274 <_vfiprintf_r+0x78>
 800339e:	fb0c 3202 	mla	r2, ip, r2, r3
 80033a2:	460c      	mov	r4, r1
 80033a4:	2001      	movs	r0, #1
 80033a6:	e7a8      	b.n	80032fa <_vfiprintf_r+0xfe>
 80033a8:	2300      	movs	r3, #0
 80033aa:	3401      	adds	r4, #1
 80033ac:	9305      	str	r3, [sp, #20]
 80033ae:	4619      	mov	r1, r3
 80033b0:	f04f 0c0a 	mov.w	ip, #10
 80033b4:	4620      	mov	r0, r4
 80033b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033ba:	3a30      	subs	r2, #48	@ 0x30
 80033bc:	2a09      	cmp	r2, #9
 80033be:	d903      	bls.n	80033c8 <_vfiprintf_r+0x1cc>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0c6      	beq.n	8003352 <_vfiprintf_r+0x156>
 80033c4:	9105      	str	r1, [sp, #20]
 80033c6:	e7c4      	b.n	8003352 <_vfiprintf_r+0x156>
 80033c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80033cc:	4604      	mov	r4, r0
 80033ce:	2301      	movs	r3, #1
 80033d0:	e7f0      	b.n	80033b4 <_vfiprintf_r+0x1b8>
 80033d2:	ab03      	add	r3, sp, #12
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	462a      	mov	r2, r5
 80033d8:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <_vfiprintf_r+0x228>)
 80033da:	a904      	add	r1, sp, #16
 80033dc:	4630      	mov	r0, r6
 80033de:	f3af 8000 	nop.w
 80033e2:	4607      	mov	r7, r0
 80033e4:	1c78      	adds	r0, r7, #1
 80033e6:	d1d6      	bne.n	8003396 <_vfiprintf_r+0x19a>
 80033e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033ea:	07d9      	lsls	r1, r3, #31
 80033ec:	d405      	bmi.n	80033fa <_vfiprintf_r+0x1fe>
 80033ee:	89ab      	ldrh	r3, [r5, #12]
 80033f0:	059a      	lsls	r2, r3, #22
 80033f2:	d402      	bmi.n	80033fa <_vfiprintf_r+0x1fe>
 80033f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033f6:	f7ff fed7 	bl	80031a8 <__retarget_lock_release_recursive>
 80033fa:	89ab      	ldrh	r3, [r5, #12]
 80033fc:	065b      	lsls	r3, r3, #25
 80033fe:	f53f af1f 	bmi.w	8003240 <_vfiprintf_r+0x44>
 8003402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003404:	e71e      	b.n	8003244 <_vfiprintf_r+0x48>
 8003406:	ab03      	add	r3, sp, #12
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	462a      	mov	r2, r5
 800340c:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <_vfiprintf_r+0x228>)
 800340e:	a904      	add	r1, sp, #16
 8003410:	4630      	mov	r0, r6
 8003412:	f000 f91b 	bl	800364c <_printf_i>
 8003416:	e7e4      	b.n	80033e2 <_vfiprintf_r+0x1e6>
 8003418:	08003e28 	.word	0x08003e28
 800341c:	08003e32 	.word	0x08003e32
 8003420:	00000000 	.word	0x00000000
 8003424:	080031d9 	.word	0x080031d9
 8003428:	08003e2e 	.word	0x08003e2e

0800342c <sbrk_aligned>:
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	4e0f      	ldr	r6, [pc, #60]	@ (800346c <sbrk_aligned+0x40>)
 8003430:	460c      	mov	r4, r1
 8003432:	6831      	ldr	r1, [r6, #0]
 8003434:	4605      	mov	r5, r0
 8003436:	b911      	cbnz	r1, 800343e <sbrk_aligned+0x12>
 8003438:	f000 fc4c 	bl	8003cd4 <_sbrk_r>
 800343c:	6030      	str	r0, [r6, #0]
 800343e:	4621      	mov	r1, r4
 8003440:	4628      	mov	r0, r5
 8003442:	f000 fc47 	bl	8003cd4 <_sbrk_r>
 8003446:	1c43      	adds	r3, r0, #1
 8003448:	d103      	bne.n	8003452 <sbrk_aligned+0x26>
 800344a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800344e:	4620      	mov	r0, r4
 8003450:	bd70      	pop	{r4, r5, r6, pc}
 8003452:	1cc4      	adds	r4, r0, #3
 8003454:	f024 0403 	bic.w	r4, r4, #3
 8003458:	42a0      	cmp	r0, r4
 800345a:	d0f8      	beq.n	800344e <sbrk_aligned+0x22>
 800345c:	1a21      	subs	r1, r4, r0
 800345e:	4628      	mov	r0, r5
 8003460:	f000 fc38 	bl	8003cd4 <_sbrk_r>
 8003464:	3001      	adds	r0, #1
 8003466:	d1f2      	bne.n	800344e <sbrk_aligned+0x22>
 8003468:	e7ef      	b.n	800344a <sbrk_aligned+0x1e>
 800346a:	bf00      	nop
 800346c:	200002b0 	.word	0x200002b0

08003470 <_malloc_r>:
 8003470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003474:	1ccd      	adds	r5, r1, #3
 8003476:	f025 0503 	bic.w	r5, r5, #3
 800347a:	3508      	adds	r5, #8
 800347c:	2d0c      	cmp	r5, #12
 800347e:	bf38      	it	cc
 8003480:	250c      	movcc	r5, #12
 8003482:	2d00      	cmp	r5, #0
 8003484:	4606      	mov	r6, r0
 8003486:	db01      	blt.n	800348c <_malloc_r+0x1c>
 8003488:	42a9      	cmp	r1, r5
 800348a:	d904      	bls.n	8003496 <_malloc_r+0x26>
 800348c:	230c      	movs	r3, #12
 800348e:	6033      	str	r3, [r6, #0]
 8003490:	2000      	movs	r0, #0
 8003492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003496:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800356c <_malloc_r+0xfc>
 800349a:	f000 faa1 	bl	80039e0 <__malloc_lock>
 800349e:	f8d8 3000 	ldr.w	r3, [r8]
 80034a2:	461c      	mov	r4, r3
 80034a4:	bb44      	cbnz	r4, 80034f8 <_malloc_r+0x88>
 80034a6:	4629      	mov	r1, r5
 80034a8:	4630      	mov	r0, r6
 80034aa:	f7ff ffbf 	bl	800342c <sbrk_aligned>
 80034ae:	1c43      	adds	r3, r0, #1
 80034b0:	4604      	mov	r4, r0
 80034b2:	d158      	bne.n	8003566 <_malloc_r+0xf6>
 80034b4:	f8d8 4000 	ldr.w	r4, [r8]
 80034b8:	4627      	mov	r7, r4
 80034ba:	2f00      	cmp	r7, #0
 80034bc:	d143      	bne.n	8003546 <_malloc_r+0xd6>
 80034be:	2c00      	cmp	r4, #0
 80034c0:	d04b      	beq.n	800355a <_malloc_r+0xea>
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	4639      	mov	r1, r7
 80034c6:	4630      	mov	r0, r6
 80034c8:	eb04 0903 	add.w	r9, r4, r3
 80034cc:	f000 fc02 	bl	8003cd4 <_sbrk_r>
 80034d0:	4581      	cmp	r9, r0
 80034d2:	d142      	bne.n	800355a <_malloc_r+0xea>
 80034d4:	6821      	ldr	r1, [r4, #0]
 80034d6:	1a6d      	subs	r5, r5, r1
 80034d8:	4629      	mov	r1, r5
 80034da:	4630      	mov	r0, r6
 80034dc:	f7ff ffa6 	bl	800342c <sbrk_aligned>
 80034e0:	3001      	adds	r0, #1
 80034e2:	d03a      	beq.n	800355a <_malloc_r+0xea>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	442b      	add	r3, r5
 80034e8:	6023      	str	r3, [r4, #0]
 80034ea:	f8d8 3000 	ldr.w	r3, [r8]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	bb62      	cbnz	r2, 800354c <_malloc_r+0xdc>
 80034f2:	f8c8 7000 	str.w	r7, [r8]
 80034f6:	e00f      	b.n	8003518 <_malloc_r+0xa8>
 80034f8:	6822      	ldr	r2, [r4, #0]
 80034fa:	1b52      	subs	r2, r2, r5
 80034fc:	d420      	bmi.n	8003540 <_malloc_r+0xd0>
 80034fe:	2a0b      	cmp	r2, #11
 8003500:	d917      	bls.n	8003532 <_malloc_r+0xc2>
 8003502:	1961      	adds	r1, r4, r5
 8003504:	42a3      	cmp	r3, r4
 8003506:	6025      	str	r5, [r4, #0]
 8003508:	bf18      	it	ne
 800350a:	6059      	strne	r1, [r3, #4]
 800350c:	6863      	ldr	r3, [r4, #4]
 800350e:	bf08      	it	eq
 8003510:	f8c8 1000 	streq.w	r1, [r8]
 8003514:	5162      	str	r2, [r4, r5]
 8003516:	604b      	str	r3, [r1, #4]
 8003518:	4630      	mov	r0, r6
 800351a:	f000 fa67 	bl	80039ec <__malloc_unlock>
 800351e:	f104 000b 	add.w	r0, r4, #11
 8003522:	1d23      	adds	r3, r4, #4
 8003524:	f020 0007 	bic.w	r0, r0, #7
 8003528:	1ac2      	subs	r2, r0, r3
 800352a:	bf1c      	itt	ne
 800352c:	1a1b      	subne	r3, r3, r0
 800352e:	50a3      	strne	r3, [r4, r2]
 8003530:	e7af      	b.n	8003492 <_malloc_r+0x22>
 8003532:	6862      	ldr	r2, [r4, #4]
 8003534:	42a3      	cmp	r3, r4
 8003536:	bf0c      	ite	eq
 8003538:	f8c8 2000 	streq.w	r2, [r8]
 800353c:	605a      	strne	r2, [r3, #4]
 800353e:	e7eb      	b.n	8003518 <_malloc_r+0xa8>
 8003540:	4623      	mov	r3, r4
 8003542:	6864      	ldr	r4, [r4, #4]
 8003544:	e7ae      	b.n	80034a4 <_malloc_r+0x34>
 8003546:	463c      	mov	r4, r7
 8003548:	687f      	ldr	r7, [r7, #4]
 800354a:	e7b6      	b.n	80034ba <_malloc_r+0x4a>
 800354c:	461a      	mov	r2, r3
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	42a3      	cmp	r3, r4
 8003552:	d1fb      	bne.n	800354c <_malloc_r+0xdc>
 8003554:	2300      	movs	r3, #0
 8003556:	6053      	str	r3, [r2, #4]
 8003558:	e7de      	b.n	8003518 <_malloc_r+0xa8>
 800355a:	230c      	movs	r3, #12
 800355c:	6033      	str	r3, [r6, #0]
 800355e:	4630      	mov	r0, r6
 8003560:	f000 fa44 	bl	80039ec <__malloc_unlock>
 8003564:	e794      	b.n	8003490 <_malloc_r+0x20>
 8003566:	6005      	str	r5, [r0, #0]
 8003568:	e7d6      	b.n	8003518 <_malloc_r+0xa8>
 800356a:	bf00      	nop
 800356c:	200002b4 	.word	0x200002b4

08003570 <_printf_common>:
 8003570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003574:	4616      	mov	r6, r2
 8003576:	4698      	mov	r8, r3
 8003578:	688a      	ldr	r2, [r1, #8]
 800357a:	690b      	ldr	r3, [r1, #16]
 800357c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003580:	4293      	cmp	r3, r2
 8003582:	bfb8      	it	lt
 8003584:	4613      	movlt	r3, r2
 8003586:	6033      	str	r3, [r6, #0]
 8003588:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800358c:	4607      	mov	r7, r0
 800358e:	460c      	mov	r4, r1
 8003590:	b10a      	cbz	r2, 8003596 <_printf_common+0x26>
 8003592:	3301      	adds	r3, #1
 8003594:	6033      	str	r3, [r6, #0]
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	0699      	lsls	r1, r3, #26
 800359a:	bf42      	ittt	mi
 800359c:	6833      	ldrmi	r3, [r6, #0]
 800359e:	3302      	addmi	r3, #2
 80035a0:	6033      	strmi	r3, [r6, #0]
 80035a2:	6825      	ldr	r5, [r4, #0]
 80035a4:	f015 0506 	ands.w	r5, r5, #6
 80035a8:	d106      	bne.n	80035b8 <_printf_common+0x48>
 80035aa:	f104 0a19 	add.w	sl, r4, #25
 80035ae:	68e3      	ldr	r3, [r4, #12]
 80035b0:	6832      	ldr	r2, [r6, #0]
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	42ab      	cmp	r3, r5
 80035b6:	dc26      	bgt.n	8003606 <_printf_common+0x96>
 80035b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035bc:	6822      	ldr	r2, [r4, #0]
 80035be:	3b00      	subs	r3, #0
 80035c0:	bf18      	it	ne
 80035c2:	2301      	movne	r3, #1
 80035c4:	0692      	lsls	r2, r2, #26
 80035c6:	d42b      	bmi.n	8003620 <_printf_common+0xb0>
 80035c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035cc:	4641      	mov	r1, r8
 80035ce:	4638      	mov	r0, r7
 80035d0:	47c8      	blx	r9
 80035d2:	3001      	adds	r0, #1
 80035d4:	d01e      	beq.n	8003614 <_printf_common+0xa4>
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	6922      	ldr	r2, [r4, #16]
 80035da:	f003 0306 	and.w	r3, r3, #6
 80035de:	2b04      	cmp	r3, #4
 80035e0:	bf02      	ittt	eq
 80035e2:	68e5      	ldreq	r5, [r4, #12]
 80035e4:	6833      	ldreq	r3, [r6, #0]
 80035e6:	1aed      	subeq	r5, r5, r3
 80035e8:	68a3      	ldr	r3, [r4, #8]
 80035ea:	bf0c      	ite	eq
 80035ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035f0:	2500      	movne	r5, #0
 80035f2:	4293      	cmp	r3, r2
 80035f4:	bfc4      	itt	gt
 80035f6:	1a9b      	subgt	r3, r3, r2
 80035f8:	18ed      	addgt	r5, r5, r3
 80035fa:	2600      	movs	r6, #0
 80035fc:	341a      	adds	r4, #26
 80035fe:	42b5      	cmp	r5, r6
 8003600:	d11a      	bne.n	8003638 <_printf_common+0xc8>
 8003602:	2000      	movs	r0, #0
 8003604:	e008      	b.n	8003618 <_printf_common+0xa8>
 8003606:	2301      	movs	r3, #1
 8003608:	4652      	mov	r2, sl
 800360a:	4641      	mov	r1, r8
 800360c:	4638      	mov	r0, r7
 800360e:	47c8      	blx	r9
 8003610:	3001      	adds	r0, #1
 8003612:	d103      	bne.n	800361c <_printf_common+0xac>
 8003614:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800361c:	3501      	adds	r5, #1
 800361e:	e7c6      	b.n	80035ae <_printf_common+0x3e>
 8003620:	18e1      	adds	r1, r4, r3
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	2030      	movs	r0, #48	@ 0x30
 8003626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800362a:	4422      	add	r2, r4
 800362c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003634:	3302      	adds	r3, #2
 8003636:	e7c7      	b.n	80035c8 <_printf_common+0x58>
 8003638:	2301      	movs	r3, #1
 800363a:	4622      	mov	r2, r4
 800363c:	4641      	mov	r1, r8
 800363e:	4638      	mov	r0, r7
 8003640:	47c8      	blx	r9
 8003642:	3001      	adds	r0, #1
 8003644:	d0e6      	beq.n	8003614 <_printf_common+0xa4>
 8003646:	3601      	adds	r6, #1
 8003648:	e7d9      	b.n	80035fe <_printf_common+0x8e>
	...

0800364c <_printf_i>:
 800364c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003650:	7e0f      	ldrb	r7, [r1, #24]
 8003652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003654:	2f78      	cmp	r7, #120	@ 0x78
 8003656:	4691      	mov	r9, r2
 8003658:	4680      	mov	r8, r0
 800365a:	460c      	mov	r4, r1
 800365c:	469a      	mov	sl, r3
 800365e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003662:	d807      	bhi.n	8003674 <_printf_i+0x28>
 8003664:	2f62      	cmp	r7, #98	@ 0x62
 8003666:	d80a      	bhi.n	800367e <_printf_i+0x32>
 8003668:	2f00      	cmp	r7, #0
 800366a:	f000 80d1 	beq.w	8003810 <_printf_i+0x1c4>
 800366e:	2f58      	cmp	r7, #88	@ 0x58
 8003670:	f000 80b8 	beq.w	80037e4 <_printf_i+0x198>
 8003674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800367c:	e03a      	b.n	80036f4 <_printf_i+0xa8>
 800367e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003682:	2b15      	cmp	r3, #21
 8003684:	d8f6      	bhi.n	8003674 <_printf_i+0x28>
 8003686:	a101      	add	r1, pc, #4	@ (adr r1, 800368c <_printf_i+0x40>)
 8003688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800368c:	080036e5 	.word	0x080036e5
 8003690:	080036f9 	.word	0x080036f9
 8003694:	08003675 	.word	0x08003675
 8003698:	08003675 	.word	0x08003675
 800369c:	08003675 	.word	0x08003675
 80036a0:	08003675 	.word	0x08003675
 80036a4:	080036f9 	.word	0x080036f9
 80036a8:	08003675 	.word	0x08003675
 80036ac:	08003675 	.word	0x08003675
 80036b0:	08003675 	.word	0x08003675
 80036b4:	08003675 	.word	0x08003675
 80036b8:	080037f7 	.word	0x080037f7
 80036bc:	08003723 	.word	0x08003723
 80036c0:	080037b1 	.word	0x080037b1
 80036c4:	08003675 	.word	0x08003675
 80036c8:	08003675 	.word	0x08003675
 80036cc:	08003819 	.word	0x08003819
 80036d0:	08003675 	.word	0x08003675
 80036d4:	08003723 	.word	0x08003723
 80036d8:	08003675 	.word	0x08003675
 80036dc:	08003675 	.word	0x08003675
 80036e0:	080037b9 	.word	0x080037b9
 80036e4:	6833      	ldr	r3, [r6, #0]
 80036e6:	1d1a      	adds	r2, r3, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6032      	str	r2, [r6, #0]
 80036ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036f4:	2301      	movs	r3, #1
 80036f6:	e09c      	b.n	8003832 <_printf_i+0x1e6>
 80036f8:	6833      	ldr	r3, [r6, #0]
 80036fa:	6820      	ldr	r0, [r4, #0]
 80036fc:	1d19      	adds	r1, r3, #4
 80036fe:	6031      	str	r1, [r6, #0]
 8003700:	0606      	lsls	r6, r0, #24
 8003702:	d501      	bpl.n	8003708 <_printf_i+0xbc>
 8003704:	681d      	ldr	r5, [r3, #0]
 8003706:	e003      	b.n	8003710 <_printf_i+0xc4>
 8003708:	0645      	lsls	r5, r0, #25
 800370a:	d5fb      	bpl.n	8003704 <_printf_i+0xb8>
 800370c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003710:	2d00      	cmp	r5, #0
 8003712:	da03      	bge.n	800371c <_printf_i+0xd0>
 8003714:	232d      	movs	r3, #45	@ 0x2d
 8003716:	426d      	negs	r5, r5
 8003718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800371c:	4858      	ldr	r0, [pc, #352]	@ (8003880 <_printf_i+0x234>)
 800371e:	230a      	movs	r3, #10
 8003720:	e011      	b.n	8003746 <_printf_i+0xfa>
 8003722:	6821      	ldr	r1, [r4, #0]
 8003724:	6833      	ldr	r3, [r6, #0]
 8003726:	0608      	lsls	r0, r1, #24
 8003728:	f853 5b04 	ldr.w	r5, [r3], #4
 800372c:	d402      	bmi.n	8003734 <_printf_i+0xe8>
 800372e:	0649      	lsls	r1, r1, #25
 8003730:	bf48      	it	mi
 8003732:	b2ad      	uxthmi	r5, r5
 8003734:	2f6f      	cmp	r7, #111	@ 0x6f
 8003736:	4852      	ldr	r0, [pc, #328]	@ (8003880 <_printf_i+0x234>)
 8003738:	6033      	str	r3, [r6, #0]
 800373a:	bf14      	ite	ne
 800373c:	230a      	movne	r3, #10
 800373e:	2308      	moveq	r3, #8
 8003740:	2100      	movs	r1, #0
 8003742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003746:	6866      	ldr	r6, [r4, #4]
 8003748:	60a6      	str	r6, [r4, #8]
 800374a:	2e00      	cmp	r6, #0
 800374c:	db05      	blt.n	800375a <_printf_i+0x10e>
 800374e:	6821      	ldr	r1, [r4, #0]
 8003750:	432e      	orrs	r6, r5
 8003752:	f021 0104 	bic.w	r1, r1, #4
 8003756:	6021      	str	r1, [r4, #0]
 8003758:	d04b      	beq.n	80037f2 <_printf_i+0x1a6>
 800375a:	4616      	mov	r6, r2
 800375c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003760:	fb03 5711 	mls	r7, r3, r1, r5
 8003764:	5dc7      	ldrb	r7, [r0, r7]
 8003766:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800376a:	462f      	mov	r7, r5
 800376c:	42bb      	cmp	r3, r7
 800376e:	460d      	mov	r5, r1
 8003770:	d9f4      	bls.n	800375c <_printf_i+0x110>
 8003772:	2b08      	cmp	r3, #8
 8003774:	d10b      	bne.n	800378e <_printf_i+0x142>
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	07df      	lsls	r7, r3, #31
 800377a:	d508      	bpl.n	800378e <_printf_i+0x142>
 800377c:	6923      	ldr	r3, [r4, #16]
 800377e:	6861      	ldr	r1, [r4, #4]
 8003780:	4299      	cmp	r1, r3
 8003782:	bfde      	ittt	le
 8003784:	2330      	movle	r3, #48	@ 0x30
 8003786:	f806 3c01 	strble.w	r3, [r6, #-1]
 800378a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800378e:	1b92      	subs	r2, r2, r6
 8003790:	6122      	str	r2, [r4, #16]
 8003792:	f8cd a000 	str.w	sl, [sp]
 8003796:	464b      	mov	r3, r9
 8003798:	aa03      	add	r2, sp, #12
 800379a:	4621      	mov	r1, r4
 800379c:	4640      	mov	r0, r8
 800379e:	f7ff fee7 	bl	8003570 <_printf_common>
 80037a2:	3001      	adds	r0, #1
 80037a4:	d14a      	bne.n	800383c <_printf_i+0x1f0>
 80037a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037aa:	b004      	add	sp, #16
 80037ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	f043 0320 	orr.w	r3, r3, #32
 80037b6:	6023      	str	r3, [r4, #0]
 80037b8:	4832      	ldr	r0, [pc, #200]	@ (8003884 <_printf_i+0x238>)
 80037ba:	2778      	movs	r7, #120	@ 0x78
 80037bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	6831      	ldr	r1, [r6, #0]
 80037c4:	061f      	lsls	r7, r3, #24
 80037c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80037ca:	d402      	bmi.n	80037d2 <_printf_i+0x186>
 80037cc:	065f      	lsls	r7, r3, #25
 80037ce:	bf48      	it	mi
 80037d0:	b2ad      	uxthmi	r5, r5
 80037d2:	6031      	str	r1, [r6, #0]
 80037d4:	07d9      	lsls	r1, r3, #31
 80037d6:	bf44      	itt	mi
 80037d8:	f043 0320 	orrmi.w	r3, r3, #32
 80037dc:	6023      	strmi	r3, [r4, #0]
 80037de:	b11d      	cbz	r5, 80037e8 <_printf_i+0x19c>
 80037e0:	2310      	movs	r3, #16
 80037e2:	e7ad      	b.n	8003740 <_printf_i+0xf4>
 80037e4:	4826      	ldr	r0, [pc, #152]	@ (8003880 <_printf_i+0x234>)
 80037e6:	e7e9      	b.n	80037bc <_printf_i+0x170>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	f023 0320 	bic.w	r3, r3, #32
 80037ee:	6023      	str	r3, [r4, #0]
 80037f0:	e7f6      	b.n	80037e0 <_printf_i+0x194>
 80037f2:	4616      	mov	r6, r2
 80037f4:	e7bd      	b.n	8003772 <_printf_i+0x126>
 80037f6:	6833      	ldr	r3, [r6, #0]
 80037f8:	6825      	ldr	r5, [r4, #0]
 80037fa:	6961      	ldr	r1, [r4, #20]
 80037fc:	1d18      	adds	r0, r3, #4
 80037fe:	6030      	str	r0, [r6, #0]
 8003800:	062e      	lsls	r6, r5, #24
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	d501      	bpl.n	800380a <_printf_i+0x1be>
 8003806:	6019      	str	r1, [r3, #0]
 8003808:	e002      	b.n	8003810 <_printf_i+0x1c4>
 800380a:	0668      	lsls	r0, r5, #25
 800380c:	d5fb      	bpl.n	8003806 <_printf_i+0x1ba>
 800380e:	8019      	strh	r1, [r3, #0]
 8003810:	2300      	movs	r3, #0
 8003812:	6123      	str	r3, [r4, #16]
 8003814:	4616      	mov	r6, r2
 8003816:	e7bc      	b.n	8003792 <_printf_i+0x146>
 8003818:	6833      	ldr	r3, [r6, #0]
 800381a:	1d1a      	adds	r2, r3, #4
 800381c:	6032      	str	r2, [r6, #0]
 800381e:	681e      	ldr	r6, [r3, #0]
 8003820:	6862      	ldr	r2, [r4, #4]
 8003822:	2100      	movs	r1, #0
 8003824:	4630      	mov	r0, r6
 8003826:	f7fc fcf3 	bl	8000210 <memchr>
 800382a:	b108      	cbz	r0, 8003830 <_printf_i+0x1e4>
 800382c:	1b80      	subs	r0, r0, r6
 800382e:	6060      	str	r0, [r4, #4]
 8003830:	6863      	ldr	r3, [r4, #4]
 8003832:	6123      	str	r3, [r4, #16]
 8003834:	2300      	movs	r3, #0
 8003836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800383a:	e7aa      	b.n	8003792 <_printf_i+0x146>
 800383c:	6923      	ldr	r3, [r4, #16]
 800383e:	4632      	mov	r2, r6
 8003840:	4649      	mov	r1, r9
 8003842:	4640      	mov	r0, r8
 8003844:	47d0      	blx	sl
 8003846:	3001      	adds	r0, #1
 8003848:	d0ad      	beq.n	80037a6 <_printf_i+0x15a>
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	079b      	lsls	r3, r3, #30
 800384e:	d413      	bmi.n	8003878 <_printf_i+0x22c>
 8003850:	68e0      	ldr	r0, [r4, #12]
 8003852:	9b03      	ldr	r3, [sp, #12]
 8003854:	4298      	cmp	r0, r3
 8003856:	bfb8      	it	lt
 8003858:	4618      	movlt	r0, r3
 800385a:	e7a6      	b.n	80037aa <_printf_i+0x15e>
 800385c:	2301      	movs	r3, #1
 800385e:	4632      	mov	r2, r6
 8003860:	4649      	mov	r1, r9
 8003862:	4640      	mov	r0, r8
 8003864:	47d0      	blx	sl
 8003866:	3001      	adds	r0, #1
 8003868:	d09d      	beq.n	80037a6 <_printf_i+0x15a>
 800386a:	3501      	adds	r5, #1
 800386c:	68e3      	ldr	r3, [r4, #12]
 800386e:	9903      	ldr	r1, [sp, #12]
 8003870:	1a5b      	subs	r3, r3, r1
 8003872:	42ab      	cmp	r3, r5
 8003874:	dcf2      	bgt.n	800385c <_printf_i+0x210>
 8003876:	e7eb      	b.n	8003850 <_printf_i+0x204>
 8003878:	2500      	movs	r5, #0
 800387a:	f104 0619 	add.w	r6, r4, #25
 800387e:	e7f5      	b.n	800386c <_printf_i+0x220>
 8003880:	08003e39 	.word	0x08003e39
 8003884:	08003e4a 	.word	0x08003e4a

08003888 <__sflush_r>:
 8003888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800388c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003890:	0716      	lsls	r6, r2, #28
 8003892:	4605      	mov	r5, r0
 8003894:	460c      	mov	r4, r1
 8003896:	d454      	bmi.n	8003942 <__sflush_r+0xba>
 8003898:	684b      	ldr	r3, [r1, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	dc02      	bgt.n	80038a4 <__sflush_r+0x1c>
 800389e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	dd48      	ble.n	8003936 <__sflush_r+0xae>
 80038a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038a6:	2e00      	cmp	r6, #0
 80038a8:	d045      	beq.n	8003936 <__sflush_r+0xae>
 80038aa:	2300      	movs	r3, #0
 80038ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80038b0:	682f      	ldr	r7, [r5, #0]
 80038b2:	6a21      	ldr	r1, [r4, #32]
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	d030      	beq.n	800391a <__sflush_r+0x92>
 80038b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	0759      	lsls	r1, r3, #29
 80038be:	d505      	bpl.n	80038cc <__sflush_r+0x44>
 80038c0:	6863      	ldr	r3, [r4, #4]
 80038c2:	1ad2      	subs	r2, r2, r3
 80038c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80038c6:	b10b      	cbz	r3, 80038cc <__sflush_r+0x44>
 80038c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038ca:	1ad2      	subs	r2, r2, r3
 80038cc:	2300      	movs	r3, #0
 80038ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038d0:	6a21      	ldr	r1, [r4, #32]
 80038d2:	4628      	mov	r0, r5
 80038d4:	47b0      	blx	r6
 80038d6:	1c43      	adds	r3, r0, #1
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	d106      	bne.n	80038ea <__sflush_r+0x62>
 80038dc:	6829      	ldr	r1, [r5, #0]
 80038de:	291d      	cmp	r1, #29
 80038e0:	d82b      	bhi.n	800393a <__sflush_r+0xb2>
 80038e2:	4a2a      	ldr	r2, [pc, #168]	@ (800398c <__sflush_r+0x104>)
 80038e4:	40ca      	lsrs	r2, r1
 80038e6:	07d6      	lsls	r6, r2, #31
 80038e8:	d527      	bpl.n	800393a <__sflush_r+0xb2>
 80038ea:	2200      	movs	r2, #0
 80038ec:	6062      	str	r2, [r4, #4]
 80038ee:	04d9      	lsls	r1, r3, #19
 80038f0:	6922      	ldr	r2, [r4, #16]
 80038f2:	6022      	str	r2, [r4, #0]
 80038f4:	d504      	bpl.n	8003900 <__sflush_r+0x78>
 80038f6:	1c42      	adds	r2, r0, #1
 80038f8:	d101      	bne.n	80038fe <__sflush_r+0x76>
 80038fa:	682b      	ldr	r3, [r5, #0]
 80038fc:	b903      	cbnz	r3, 8003900 <__sflush_r+0x78>
 80038fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8003900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003902:	602f      	str	r7, [r5, #0]
 8003904:	b1b9      	cbz	r1, 8003936 <__sflush_r+0xae>
 8003906:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800390a:	4299      	cmp	r1, r3
 800390c:	d002      	beq.n	8003914 <__sflush_r+0x8c>
 800390e:	4628      	mov	r0, r5
 8003910:	f000 fa24 	bl	8003d5c <_free_r>
 8003914:	2300      	movs	r3, #0
 8003916:	6363      	str	r3, [r4, #52]	@ 0x34
 8003918:	e00d      	b.n	8003936 <__sflush_r+0xae>
 800391a:	2301      	movs	r3, #1
 800391c:	4628      	mov	r0, r5
 800391e:	47b0      	blx	r6
 8003920:	4602      	mov	r2, r0
 8003922:	1c50      	adds	r0, r2, #1
 8003924:	d1c9      	bne.n	80038ba <__sflush_r+0x32>
 8003926:	682b      	ldr	r3, [r5, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0c6      	beq.n	80038ba <__sflush_r+0x32>
 800392c:	2b1d      	cmp	r3, #29
 800392e:	d001      	beq.n	8003934 <__sflush_r+0xac>
 8003930:	2b16      	cmp	r3, #22
 8003932:	d11e      	bne.n	8003972 <__sflush_r+0xea>
 8003934:	602f      	str	r7, [r5, #0]
 8003936:	2000      	movs	r0, #0
 8003938:	e022      	b.n	8003980 <__sflush_r+0xf8>
 800393a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800393e:	b21b      	sxth	r3, r3
 8003940:	e01b      	b.n	800397a <__sflush_r+0xf2>
 8003942:	690f      	ldr	r7, [r1, #16]
 8003944:	2f00      	cmp	r7, #0
 8003946:	d0f6      	beq.n	8003936 <__sflush_r+0xae>
 8003948:	0793      	lsls	r3, r2, #30
 800394a:	680e      	ldr	r6, [r1, #0]
 800394c:	bf08      	it	eq
 800394e:	694b      	ldreq	r3, [r1, #20]
 8003950:	600f      	str	r7, [r1, #0]
 8003952:	bf18      	it	ne
 8003954:	2300      	movne	r3, #0
 8003956:	eba6 0807 	sub.w	r8, r6, r7
 800395a:	608b      	str	r3, [r1, #8]
 800395c:	f1b8 0f00 	cmp.w	r8, #0
 8003960:	dde9      	ble.n	8003936 <__sflush_r+0xae>
 8003962:	6a21      	ldr	r1, [r4, #32]
 8003964:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003966:	4643      	mov	r3, r8
 8003968:	463a      	mov	r2, r7
 800396a:	4628      	mov	r0, r5
 800396c:	47b0      	blx	r6
 800396e:	2800      	cmp	r0, #0
 8003970:	dc08      	bgt.n	8003984 <__sflush_r+0xfc>
 8003972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800397a:	81a3      	strh	r3, [r4, #12]
 800397c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003984:	4407      	add	r7, r0
 8003986:	eba8 0800 	sub.w	r8, r8, r0
 800398a:	e7e7      	b.n	800395c <__sflush_r+0xd4>
 800398c:	20400001 	.word	0x20400001

08003990 <_fflush_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	690b      	ldr	r3, [r1, #16]
 8003994:	4605      	mov	r5, r0
 8003996:	460c      	mov	r4, r1
 8003998:	b913      	cbnz	r3, 80039a0 <_fflush_r+0x10>
 800399a:	2500      	movs	r5, #0
 800399c:	4628      	mov	r0, r5
 800399e:	bd38      	pop	{r3, r4, r5, pc}
 80039a0:	b118      	cbz	r0, 80039aa <_fflush_r+0x1a>
 80039a2:	6a03      	ldr	r3, [r0, #32]
 80039a4:	b90b      	cbnz	r3, 80039aa <_fflush_r+0x1a>
 80039a6:	f7ff fb83 	bl	80030b0 <__sinit>
 80039aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f3      	beq.n	800399a <_fflush_r+0xa>
 80039b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80039b4:	07d0      	lsls	r0, r2, #31
 80039b6:	d404      	bmi.n	80039c2 <_fflush_r+0x32>
 80039b8:	0599      	lsls	r1, r3, #22
 80039ba:	d402      	bmi.n	80039c2 <_fflush_r+0x32>
 80039bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039be:	f7ff fbf2 	bl	80031a6 <__retarget_lock_acquire_recursive>
 80039c2:	4628      	mov	r0, r5
 80039c4:	4621      	mov	r1, r4
 80039c6:	f7ff ff5f 	bl	8003888 <__sflush_r>
 80039ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039cc:	07da      	lsls	r2, r3, #31
 80039ce:	4605      	mov	r5, r0
 80039d0:	d4e4      	bmi.n	800399c <_fflush_r+0xc>
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	059b      	lsls	r3, r3, #22
 80039d6:	d4e1      	bmi.n	800399c <_fflush_r+0xc>
 80039d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039da:	f7ff fbe5 	bl	80031a8 <__retarget_lock_release_recursive>
 80039de:	e7dd      	b.n	800399c <_fflush_r+0xc>

080039e0 <__malloc_lock>:
 80039e0:	4801      	ldr	r0, [pc, #4]	@ (80039e8 <__malloc_lock+0x8>)
 80039e2:	f7ff bbe0 	b.w	80031a6 <__retarget_lock_acquire_recursive>
 80039e6:	bf00      	nop
 80039e8:	200002ac 	.word	0x200002ac

080039ec <__malloc_unlock>:
 80039ec:	4801      	ldr	r0, [pc, #4]	@ (80039f4 <__malloc_unlock+0x8>)
 80039ee:	f7ff bbdb 	b.w	80031a8 <__retarget_lock_release_recursive>
 80039f2:	bf00      	nop
 80039f4:	200002ac 	.word	0x200002ac

080039f8 <__sread>:
 80039f8:	b510      	push	{r4, lr}
 80039fa:	460c      	mov	r4, r1
 80039fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a00:	f000 f956 	bl	8003cb0 <_read_r>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	bfab      	itete	ge
 8003a08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a0c:	181b      	addge	r3, r3, r0
 8003a0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a12:	bfac      	ite	ge
 8003a14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a16:	81a3      	strhlt	r3, [r4, #12]
 8003a18:	bd10      	pop	{r4, pc}

08003a1a <__swrite>:
 8003a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1e:	461f      	mov	r7, r3
 8003a20:	898b      	ldrh	r3, [r1, #12]
 8003a22:	05db      	lsls	r3, r3, #23
 8003a24:	4605      	mov	r5, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	4616      	mov	r6, r2
 8003a2a:	d505      	bpl.n	8003a38 <__swrite+0x1e>
 8003a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a30:	2302      	movs	r3, #2
 8003a32:	2200      	movs	r2, #0
 8003a34:	f000 f92a 	bl	8003c8c <_lseek_r>
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a42:	81a3      	strh	r3, [r4, #12]
 8003a44:	4632      	mov	r2, r6
 8003a46:	463b      	mov	r3, r7
 8003a48:	4628      	mov	r0, r5
 8003a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4e:	f000 b951 	b.w	8003cf4 <_write_r>

08003a52 <__sseek>:
 8003a52:	b510      	push	{r4, lr}
 8003a54:	460c      	mov	r4, r1
 8003a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5a:	f000 f917 	bl	8003c8c <_lseek_r>
 8003a5e:	1c43      	adds	r3, r0, #1
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	bf15      	itete	ne
 8003a64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a6e:	81a3      	strheq	r3, [r4, #12]
 8003a70:	bf18      	it	ne
 8003a72:	81a3      	strhne	r3, [r4, #12]
 8003a74:	bd10      	pop	{r4, pc}

08003a76 <__sclose>:
 8003a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a7a:	f000 b94d 	b.w	8003d18 <_close_r>

08003a7e <__swbuf_r>:
 8003a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a80:	460e      	mov	r6, r1
 8003a82:	4614      	mov	r4, r2
 8003a84:	4605      	mov	r5, r0
 8003a86:	b118      	cbz	r0, 8003a90 <__swbuf_r+0x12>
 8003a88:	6a03      	ldr	r3, [r0, #32]
 8003a8a:	b90b      	cbnz	r3, 8003a90 <__swbuf_r+0x12>
 8003a8c:	f7ff fb10 	bl	80030b0 <__sinit>
 8003a90:	69a3      	ldr	r3, [r4, #24]
 8003a92:	60a3      	str	r3, [r4, #8]
 8003a94:	89a3      	ldrh	r3, [r4, #12]
 8003a96:	071a      	lsls	r2, r3, #28
 8003a98:	d501      	bpl.n	8003a9e <__swbuf_r+0x20>
 8003a9a:	6923      	ldr	r3, [r4, #16]
 8003a9c:	b943      	cbnz	r3, 8003ab0 <__swbuf_r+0x32>
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	f000 f82b 	bl	8003afc <__swsetup_r>
 8003aa6:	b118      	cbz	r0, 8003ab0 <__swbuf_r+0x32>
 8003aa8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003aac:	4638      	mov	r0, r7
 8003aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	6922      	ldr	r2, [r4, #16]
 8003ab4:	1a98      	subs	r0, r3, r2
 8003ab6:	6963      	ldr	r3, [r4, #20]
 8003ab8:	b2f6      	uxtb	r6, r6
 8003aba:	4283      	cmp	r3, r0
 8003abc:	4637      	mov	r7, r6
 8003abe:	dc05      	bgt.n	8003acc <__swbuf_r+0x4e>
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	f7ff ff64 	bl	8003990 <_fflush_r>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d1ed      	bne.n	8003aa8 <__swbuf_r+0x2a>
 8003acc:	68a3      	ldr	r3, [r4, #8]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	60a3      	str	r3, [r4, #8]
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	6022      	str	r2, [r4, #0]
 8003ad8:	701e      	strb	r6, [r3, #0]
 8003ada:	6962      	ldr	r2, [r4, #20]
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d004      	beq.n	8003aec <__swbuf_r+0x6e>
 8003ae2:	89a3      	ldrh	r3, [r4, #12]
 8003ae4:	07db      	lsls	r3, r3, #31
 8003ae6:	d5e1      	bpl.n	8003aac <__swbuf_r+0x2e>
 8003ae8:	2e0a      	cmp	r6, #10
 8003aea:	d1df      	bne.n	8003aac <__swbuf_r+0x2e>
 8003aec:	4621      	mov	r1, r4
 8003aee:	4628      	mov	r0, r5
 8003af0:	f7ff ff4e 	bl	8003990 <_fflush_r>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	d0d9      	beq.n	8003aac <__swbuf_r+0x2e>
 8003af8:	e7d6      	b.n	8003aa8 <__swbuf_r+0x2a>
	...

08003afc <__swsetup_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	4b29      	ldr	r3, [pc, #164]	@ (8003ba4 <__swsetup_r+0xa8>)
 8003b00:	4605      	mov	r5, r0
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	460c      	mov	r4, r1
 8003b06:	b118      	cbz	r0, 8003b10 <__swsetup_r+0x14>
 8003b08:	6a03      	ldr	r3, [r0, #32]
 8003b0a:	b90b      	cbnz	r3, 8003b10 <__swsetup_r+0x14>
 8003b0c:	f7ff fad0 	bl	80030b0 <__sinit>
 8003b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b14:	0719      	lsls	r1, r3, #28
 8003b16:	d422      	bmi.n	8003b5e <__swsetup_r+0x62>
 8003b18:	06da      	lsls	r2, r3, #27
 8003b1a:	d407      	bmi.n	8003b2c <__swsetup_r+0x30>
 8003b1c:	2209      	movs	r2, #9
 8003b1e:	602a      	str	r2, [r5, #0]
 8003b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b24:	81a3      	strh	r3, [r4, #12]
 8003b26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b2a:	e033      	b.n	8003b94 <__swsetup_r+0x98>
 8003b2c:	0758      	lsls	r0, r3, #29
 8003b2e:	d512      	bpl.n	8003b56 <__swsetup_r+0x5a>
 8003b30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b32:	b141      	cbz	r1, 8003b46 <__swsetup_r+0x4a>
 8003b34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b38:	4299      	cmp	r1, r3
 8003b3a:	d002      	beq.n	8003b42 <__swsetup_r+0x46>
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f000 f90d 	bl	8003d5c <_free_r>
 8003b42:	2300      	movs	r3, #0
 8003b44:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b46:	89a3      	ldrh	r3, [r4, #12]
 8003b48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b4c:	81a3      	strh	r3, [r4, #12]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6063      	str	r3, [r4, #4]
 8003b52:	6923      	ldr	r3, [r4, #16]
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	f043 0308 	orr.w	r3, r3, #8
 8003b5c:	81a3      	strh	r3, [r4, #12]
 8003b5e:	6923      	ldr	r3, [r4, #16]
 8003b60:	b94b      	cbnz	r3, 8003b76 <__swsetup_r+0x7a>
 8003b62:	89a3      	ldrh	r3, [r4, #12]
 8003b64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b6c:	d003      	beq.n	8003b76 <__swsetup_r+0x7a>
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4628      	mov	r0, r5
 8003b72:	f000 f83f 	bl	8003bf4 <__smakebuf_r>
 8003b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b7a:	f013 0201 	ands.w	r2, r3, #1
 8003b7e:	d00a      	beq.n	8003b96 <__swsetup_r+0x9a>
 8003b80:	2200      	movs	r2, #0
 8003b82:	60a2      	str	r2, [r4, #8]
 8003b84:	6962      	ldr	r2, [r4, #20]
 8003b86:	4252      	negs	r2, r2
 8003b88:	61a2      	str	r2, [r4, #24]
 8003b8a:	6922      	ldr	r2, [r4, #16]
 8003b8c:	b942      	cbnz	r2, 8003ba0 <__swsetup_r+0xa4>
 8003b8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b92:	d1c5      	bne.n	8003b20 <__swsetup_r+0x24>
 8003b94:	bd38      	pop	{r3, r4, r5, pc}
 8003b96:	0799      	lsls	r1, r3, #30
 8003b98:	bf58      	it	pl
 8003b9a:	6962      	ldrpl	r2, [r4, #20]
 8003b9c:	60a2      	str	r2, [r4, #8]
 8003b9e:	e7f4      	b.n	8003b8a <__swsetup_r+0x8e>
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	e7f7      	b.n	8003b94 <__swsetup_r+0x98>
 8003ba4:	20000018 	.word	0x20000018

08003ba8 <__swhatbuf_r>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	460c      	mov	r4, r1
 8003bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb0:	2900      	cmp	r1, #0
 8003bb2:	b096      	sub	sp, #88	@ 0x58
 8003bb4:	4615      	mov	r5, r2
 8003bb6:	461e      	mov	r6, r3
 8003bb8:	da0d      	bge.n	8003bd6 <__swhatbuf_r+0x2e>
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003bc0:	f04f 0100 	mov.w	r1, #0
 8003bc4:	bf14      	ite	ne
 8003bc6:	2340      	movne	r3, #64	@ 0x40
 8003bc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003bcc:	2000      	movs	r0, #0
 8003bce:	6031      	str	r1, [r6, #0]
 8003bd0:	602b      	str	r3, [r5, #0]
 8003bd2:	b016      	add	sp, #88	@ 0x58
 8003bd4:	bd70      	pop	{r4, r5, r6, pc}
 8003bd6:	466a      	mov	r2, sp
 8003bd8:	f000 f8ae 	bl	8003d38 <_fstat_r>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	dbec      	blt.n	8003bba <__swhatbuf_r+0x12>
 8003be0:	9901      	ldr	r1, [sp, #4]
 8003be2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003be6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003bea:	4259      	negs	r1, r3
 8003bec:	4159      	adcs	r1, r3
 8003bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bf2:	e7eb      	b.n	8003bcc <__swhatbuf_r+0x24>

08003bf4 <__smakebuf_r>:
 8003bf4:	898b      	ldrh	r3, [r1, #12]
 8003bf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bf8:	079d      	lsls	r5, r3, #30
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	d507      	bpl.n	8003c10 <__smakebuf_r+0x1c>
 8003c00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	6123      	str	r3, [r4, #16]
 8003c08:	2301      	movs	r3, #1
 8003c0a:	6163      	str	r3, [r4, #20]
 8003c0c:	b003      	add	sp, #12
 8003c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c10:	ab01      	add	r3, sp, #4
 8003c12:	466a      	mov	r2, sp
 8003c14:	f7ff ffc8 	bl	8003ba8 <__swhatbuf_r>
 8003c18:	9f00      	ldr	r7, [sp, #0]
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	4639      	mov	r1, r7
 8003c1e:	4630      	mov	r0, r6
 8003c20:	f7ff fc26 	bl	8003470 <_malloc_r>
 8003c24:	b948      	cbnz	r0, 8003c3a <__smakebuf_r+0x46>
 8003c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c2a:	059a      	lsls	r2, r3, #22
 8003c2c:	d4ee      	bmi.n	8003c0c <__smakebuf_r+0x18>
 8003c2e:	f023 0303 	bic.w	r3, r3, #3
 8003c32:	f043 0302 	orr.w	r3, r3, #2
 8003c36:	81a3      	strh	r3, [r4, #12]
 8003c38:	e7e2      	b.n	8003c00 <__smakebuf_r+0xc>
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	6020      	str	r0, [r4, #0]
 8003c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c42:	81a3      	strh	r3, [r4, #12]
 8003c44:	9b01      	ldr	r3, [sp, #4]
 8003c46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003c4a:	b15b      	cbz	r3, 8003c64 <__smakebuf_r+0x70>
 8003c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c50:	4630      	mov	r0, r6
 8003c52:	f000 f80b 	bl	8003c6c <_isatty_r>
 8003c56:	b128      	cbz	r0, 8003c64 <__smakebuf_r+0x70>
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	f023 0303 	bic.w	r3, r3, #3
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	81a3      	strh	r3, [r4, #12]
 8003c64:	89a3      	ldrh	r3, [r4, #12]
 8003c66:	431d      	orrs	r5, r3
 8003c68:	81a5      	strh	r5, [r4, #12]
 8003c6a:	e7cf      	b.n	8003c0c <__smakebuf_r+0x18>

08003c6c <_isatty_r>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4d06      	ldr	r5, [pc, #24]	@ (8003c88 <_isatty_r+0x1c>)
 8003c70:	2300      	movs	r3, #0
 8003c72:	4604      	mov	r4, r0
 8003c74:	4608      	mov	r0, r1
 8003c76:	602b      	str	r3, [r5, #0]
 8003c78:	f7fc ff15 	bl	8000aa6 <_isatty>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d102      	bne.n	8003c86 <_isatty_r+0x1a>
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	b103      	cbz	r3, 8003c86 <_isatty_r+0x1a>
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
 8003c88:	200002b8 	.word	0x200002b8

08003c8c <_lseek_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4d07      	ldr	r5, [pc, #28]	@ (8003cac <_lseek_r+0x20>)
 8003c90:	4604      	mov	r4, r0
 8003c92:	4608      	mov	r0, r1
 8003c94:	4611      	mov	r1, r2
 8003c96:	2200      	movs	r2, #0
 8003c98:	602a      	str	r2, [r5, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f7fc ff0e 	bl	8000abc <_lseek>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d102      	bne.n	8003caa <_lseek_r+0x1e>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	b103      	cbz	r3, 8003caa <_lseek_r+0x1e>
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	bd38      	pop	{r3, r4, r5, pc}
 8003cac:	200002b8 	.word	0x200002b8

08003cb0 <_read_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4d07      	ldr	r5, [pc, #28]	@ (8003cd0 <_read_r+0x20>)
 8003cb4:	4604      	mov	r4, r0
 8003cb6:	4608      	mov	r0, r1
 8003cb8:	4611      	mov	r1, r2
 8003cba:	2200      	movs	r2, #0
 8003cbc:	602a      	str	r2, [r5, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f7fc fe9c 	bl	80009fc <_read>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d102      	bne.n	8003cce <_read_r+0x1e>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	b103      	cbz	r3, 8003cce <_read_r+0x1e>
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	200002b8 	.word	0x200002b8

08003cd4 <_sbrk_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	4d06      	ldr	r5, [pc, #24]	@ (8003cf0 <_sbrk_r+0x1c>)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	4604      	mov	r4, r0
 8003cdc:	4608      	mov	r0, r1
 8003cde:	602b      	str	r3, [r5, #0]
 8003ce0:	f7fc fefa 	bl	8000ad8 <_sbrk>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d102      	bne.n	8003cee <_sbrk_r+0x1a>
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	b103      	cbz	r3, 8003cee <_sbrk_r+0x1a>
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	bd38      	pop	{r3, r4, r5, pc}
 8003cf0:	200002b8 	.word	0x200002b8

08003cf4 <_write_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	4d07      	ldr	r5, [pc, #28]	@ (8003d14 <_write_r+0x20>)
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	4608      	mov	r0, r1
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	2200      	movs	r2, #0
 8003d00:	602a      	str	r2, [r5, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f7fc fe97 	bl	8000a36 <_write>
 8003d08:	1c43      	adds	r3, r0, #1
 8003d0a:	d102      	bne.n	8003d12 <_write_r+0x1e>
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	b103      	cbz	r3, 8003d12 <_write_r+0x1e>
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	bd38      	pop	{r3, r4, r5, pc}
 8003d14:	200002b8 	.word	0x200002b8

08003d18 <_close_r>:
 8003d18:	b538      	push	{r3, r4, r5, lr}
 8003d1a:	4d06      	ldr	r5, [pc, #24]	@ (8003d34 <_close_r+0x1c>)
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	4604      	mov	r4, r0
 8003d20:	4608      	mov	r0, r1
 8003d22:	602b      	str	r3, [r5, #0]
 8003d24:	f7fc fea3 	bl	8000a6e <_close>
 8003d28:	1c43      	adds	r3, r0, #1
 8003d2a:	d102      	bne.n	8003d32 <_close_r+0x1a>
 8003d2c:	682b      	ldr	r3, [r5, #0]
 8003d2e:	b103      	cbz	r3, 8003d32 <_close_r+0x1a>
 8003d30:	6023      	str	r3, [r4, #0]
 8003d32:	bd38      	pop	{r3, r4, r5, pc}
 8003d34:	200002b8 	.word	0x200002b8

08003d38 <_fstat_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	4d07      	ldr	r5, [pc, #28]	@ (8003d58 <_fstat_r+0x20>)
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	4604      	mov	r4, r0
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	602b      	str	r3, [r5, #0]
 8003d46:	f7fc fe9e 	bl	8000a86 <_fstat>
 8003d4a:	1c43      	adds	r3, r0, #1
 8003d4c:	d102      	bne.n	8003d54 <_fstat_r+0x1c>
 8003d4e:	682b      	ldr	r3, [r5, #0]
 8003d50:	b103      	cbz	r3, 8003d54 <_fstat_r+0x1c>
 8003d52:	6023      	str	r3, [r4, #0]
 8003d54:	bd38      	pop	{r3, r4, r5, pc}
 8003d56:	bf00      	nop
 8003d58:	200002b8 	.word	0x200002b8

08003d5c <_free_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4605      	mov	r5, r0
 8003d60:	2900      	cmp	r1, #0
 8003d62:	d041      	beq.n	8003de8 <_free_r+0x8c>
 8003d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d68:	1f0c      	subs	r4, r1, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfb8      	it	lt
 8003d6e:	18e4      	addlt	r4, r4, r3
 8003d70:	f7ff fe36 	bl	80039e0 <__malloc_lock>
 8003d74:	4a1d      	ldr	r2, [pc, #116]	@ (8003dec <_free_r+0x90>)
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	b933      	cbnz	r3, 8003d88 <_free_r+0x2c>
 8003d7a:	6063      	str	r3, [r4, #4]
 8003d7c:	6014      	str	r4, [r2, #0]
 8003d7e:	4628      	mov	r0, r5
 8003d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d84:	f7ff be32 	b.w	80039ec <__malloc_unlock>
 8003d88:	42a3      	cmp	r3, r4
 8003d8a:	d908      	bls.n	8003d9e <_free_r+0x42>
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	1821      	adds	r1, r4, r0
 8003d90:	428b      	cmp	r3, r1
 8003d92:	bf01      	itttt	eq
 8003d94:	6819      	ldreq	r1, [r3, #0]
 8003d96:	685b      	ldreq	r3, [r3, #4]
 8003d98:	1809      	addeq	r1, r1, r0
 8003d9a:	6021      	streq	r1, [r4, #0]
 8003d9c:	e7ed      	b.n	8003d7a <_free_r+0x1e>
 8003d9e:	461a      	mov	r2, r3
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	b10b      	cbz	r3, 8003da8 <_free_r+0x4c>
 8003da4:	42a3      	cmp	r3, r4
 8003da6:	d9fa      	bls.n	8003d9e <_free_r+0x42>
 8003da8:	6811      	ldr	r1, [r2, #0]
 8003daa:	1850      	adds	r0, r2, r1
 8003dac:	42a0      	cmp	r0, r4
 8003dae:	d10b      	bne.n	8003dc8 <_free_r+0x6c>
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	4401      	add	r1, r0
 8003db4:	1850      	adds	r0, r2, r1
 8003db6:	4283      	cmp	r3, r0
 8003db8:	6011      	str	r1, [r2, #0]
 8003dba:	d1e0      	bne.n	8003d7e <_free_r+0x22>
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	6053      	str	r3, [r2, #4]
 8003dc2:	4408      	add	r0, r1
 8003dc4:	6010      	str	r0, [r2, #0]
 8003dc6:	e7da      	b.n	8003d7e <_free_r+0x22>
 8003dc8:	d902      	bls.n	8003dd0 <_free_r+0x74>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	602b      	str	r3, [r5, #0]
 8003dce:	e7d6      	b.n	8003d7e <_free_r+0x22>
 8003dd0:	6820      	ldr	r0, [r4, #0]
 8003dd2:	1821      	adds	r1, r4, r0
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	bf04      	itt	eq
 8003dd8:	6819      	ldreq	r1, [r3, #0]
 8003dda:	685b      	ldreq	r3, [r3, #4]
 8003ddc:	6063      	str	r3, [r4, #4]
 8003dde:	bf04      	itt	eq
 8003de0:	1809      	addeq	r1, r1, r0
 8003de2:	6021      	streq	r1, [r4, #0]
 8003de4:	6054      	str	r4, [r2, #4]
 8003de6:	e7ca      	b.n	8003d7e <_free_r+0x22>
 8003de8:	bd38      	pop	{r3, r4, r5, pc}
 8003dea:	bf00      	nop
 8003dec:	200002b4 	.word	0x200002b4

08003df0 <_init>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	bf00      	nop
 8003df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df6:	bc08      	pop	{r3}
 8003df8:	469e      	mov	lr, r3
 8003dfa:	4770      	bx	lr

08003dfc <_fini>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr
