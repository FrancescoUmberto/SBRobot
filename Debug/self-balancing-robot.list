
self-balancing-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa34  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800fc08  0800fc08  00010c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010190  08010190  00012590  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010190  08010190  00011190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010198  08010198  00012590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010198  08010198  00011198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801019c  0801019c  0001119c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000590  20000000  080101a0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000590  08010730  00012590  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000da4  08010730  00012da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012590  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9bb  00000000  00000000  000125c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000465a  00000000  00000000  0002ef7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  000335d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a6  00000000  00000000  00034c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d0e  00000000  00000000  00035e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a60  00000000  00000000  0005db24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5593  00000000  00000000  0007e584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163b17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007538  00000000  00000000  00163b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0016b094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000590 	.word	0x20000590
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fbec 	.word	0x0800fbec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000594 	.word	0x20000594
 800020c:	0800fbec 	.word	0x0800fbec

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <MX_ADC1_Init+0x9c>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_ADC1_Init+0x98>)
 800109a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800109e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c2:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <MX_ADC1_Init+0xa0>)
 80010c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010dc:	2201      	movs	r2, #1
 80010de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010e2:	f003 fc5b 	bl	800499c <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010ec:	f000 fbf9 	bl	80018e2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010f0:	2309      	movs	r3, #9
 80010f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001102:	f003 fe2d 	bl	8004d60 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800110c:	f000 fbe9 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200005ac 	.word	0x200005ac
 800111c:	40012000 	.word	0x40012000
 8001120:	0f000001 	.word	0x0f000001

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <HAL_ADC_MspInit+0x7c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d127      	bne.n	8001196 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a15      	ldr	r2, [pc, #84]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 800117e:	2302      	movs	r3, #2
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <HAL_ADC_MspInit+0x84>)
 8001192:	f004 fd33 	bl	8005bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40012000 	.word	0x40012000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <MX_DMA_Init+0x68>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a16      	ldr	r2, [pc, #88]	@ (8001214 <MX_DMA_Init+0x68>)
 80011bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <MX_DMA_Init+0x68>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_DMA_Init+0x68>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <MX_DMA_Init+0x68>)
 80011d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <MX_DMA_Init+0x68>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	200b      	movs	r0, #11
 80011f0:	f004 f8bf 	bl	8005372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011f4:	200b      	movs	r0, #11
 80011f6:	f004 f8d8 	bl	80053aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2039      	movs	r0, #57	@ 0x39
 8001200:	f004 f8b7 	bl	8005372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001204:	2039      	movs	r0, #57	@ 0x39
 8001206:	f004 f8d0 	bl	80053aa <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b73      	ldr	r3, [pc, #460]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a72      	ldr	r2, [pc, #456]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b70      	ldr	r3, [pc, #448]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b6c      	ldr	r3, [pc, #432]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a6b      	ldr	r2, [pc, #428]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b69      	ldr	r3, [pc, #420]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b65      	ldr	r3, [pc, #404]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a64      	ldr	r2, [pc, #400]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b62      	ldr	r3, [pc, #392]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b5e      	ldr	r3, [pc, #376]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a5d      	ldr	r2, [pc, #372]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b5b      	ldr	r3, [pc, #364]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4b57      	ldr	r3, [pc, #348]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a56      	ldr	r2, [pc, #344]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b54      	ldr	r3, [pc, #336]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2130      	movs	r1, #48	@ 0x30
 80012be:	4851      	ldr	r0, [pc, #324]	@ (8001404 <MX_GPIO_Init+0x1ec>)
 80012c0:	f004 fe48 	bl	8005f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_DIR_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2111      	movs	r1, #17
 80012c8:	484f      	ldr	r0, [pc, #316]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 80012ca:	f004 fe43 	bl	8005f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BTN2_GPIO_Port, LED_BTN2_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012d4:	484d      	ldr	r0, [pc, #308]	@ (800140c <MX_GPIO_Init+0x1f4>)
 80012d6:	f004 fe3d 	bl	8005f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4846      	ldr	r0, [pc, #280]	@ (800140c <MX_GPIO_Init+0x1f4>)
 80012f2:	f004 fc83 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC8 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80012f6:	f641 531d 	movw	r3, #7453	@ 0x1d1d
 80012fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	2303      	movs	r3, #3
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4840      	ldr	r0, [pc, #256]	@ (800140c <MX_GPIO_Init+0x1f4>)
 800130c:	f004 fc76 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_DIR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|LD2_Pin;
 8001310:	2330      	movs	r3, #48	@ 0x30
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4837      	ldr	r0, [pc, #220]	@ (8001404 <MX_GPIO_Init+0x1ec>)
 8001328:	f004 fc68 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 800132c:	2320      	movs	r3, #32
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001330:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4832      	ldr	r0, [pc, #200]	@ (800140c <MX_GPIO_Init+0x1f4>)
 8001342:	f004 fc5b 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	482a      	ldr	r0, [pc, #168]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 800135e:	f004 fc4d 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001362:	f24f 0324 	movw	r3, #61476	@ 0xf024
 8001366:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001368:	2303      	movs	r3, #3
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4824      	ldr	r0, [pc, #144]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 8001378:	f004 fc40 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BTN2_Pin */
  GPIO_InitStruct.Pin = LED_BTN2_Pin;
 800137c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BTN2_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	481d      	ldr	r0, [pc, #116]	@ (800140c <MX_GPIO_Init+0x1f4>)
 8001396:	f004 fc31 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800139a:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 800139e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a0:	2303      	movs	r3, #3
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4815      	ldr	r0, [pc, #84]	@ (8001404 <MX_GPIO_Init+0x1ec>)
 80013b0:	f004 fc24 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013b4:	2304      	movs	r3, #4
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	2303      	movs	r3, #3
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4812      	ldr	r0, [pc, #72]	@ (8001410 <MX_GPIO_Init+0x1f8>)
 80013c8:	f004 fc18 	bl	8005bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 80013cc:	2310      	movs	r3, #16
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4809      	ldr	r0, [pc, #36]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 80013e4:	f004 fc0a 	bl	8005bfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2017      	movs	r0, #23
 80013ee:	f003 ffc0 	bl	8005372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013f2:	2017      	movs	r0, #23
 80013f4:	f003 ffd9 	bl	80053aa <HAL_NVIC_EnableIRQ>

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	@ 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00

08001414 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_I2C1_Init+0x50>)
 800141a:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <MX_I2C1_Init+0x54>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <MX_I2C1_Init+0x58>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001432:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001436:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_I2C1_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001452:	f004 fdcb 	bl	8005fec <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 fa41 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200005f4 	.word	0x200005f4
 8001468:	40005400 	.word	0x40005400
 800146c:	000186a0 	.word	0x000186a0

08001470 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a30      	ldr	r2, [pc, #192]	@ (8001550 <HAL_I2C_MspInit+0xe0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d15a      	bne.n	8001548 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b2f      	ldr	r3, [pc, #188]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a2e      	ldr	r2, [pc, #184]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 80014ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b4:	2312      	movs	r3, #18
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c0:	2304      	movs	r3, #4
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4823      	ldr	r0, [pc, #140]	@ (8001558 <HAL_I2C_MspInit+0xe8>)
 80014cc:	f004 fb96 	bl	8005bfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014de:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_I2C_MspInit+0xec>)
 80014ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001560 <HAL_I2C_MspInit+0xf0>)
 80014f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <HAL_I2C_MspInit+0xec>)
 80014f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014f8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <HAL_I2C_MspInit+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001500:	4b16      	ldr	r3, [pc, #88]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001508:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800150c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <HAL_I2C_MspInit+0xec>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001520:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <HAL_I2C_MspInit+0xec>)
 800152e:	f003 ff57 	bl	80053e0 <HAL_DMA_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001538:	f000 f9d3 	bl	80018e2 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a07      	ldr	r2, [pc, #28]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001540:	639a      	str	r2, [r3, #56]	@ 0x38
 8001542:	4a06      	ldr	r2, [pc, #24]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40005400 	.word	0x40005400
 8001554:	40023800 	.word	0x40023800
 8001558:	40020400 	.word	0x40020400
 800155c:	20000648 	.word	0x20000648
 8001560:	40026010 	.word	0x40026010

08001564 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800156c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001570:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800157c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001580:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001584:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00b      	beq.n	80015a4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800158c:	e000      	b.n	8001590 <ITM_SendChar+0x2c>
    {
      __NOP();
 800158e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001590:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f9      	beq.n	800158e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800159a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ba:	f003 f959 	bl	8004870 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015be:	f000 f88d 	bl	80016dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c2:	f7ff fe29 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 80015c6:	f7ff fdf1 	bl	80011ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015ca:	f000 ff05 	bl	80023d8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80015ce:	f000 fc4f 	bl	8001e70 <MX_TIM4_Init>
  MX_TIM6_Init();
 80015d2:	f000 fcfb 	bl	8001fcc <MX_TIM6_Init>
  MX_SPI2_Init();
 80015d6:	f000 f98b 	bl	80018f0 <MX_SPI2_Init>
  MX_TIM2_Init();
 80015da:	f000 fb9d 	bl	8001d18 <MX_TIM2_Init>
  MX_TIM7_Init();
 80015de:	f000 fd2b 	bl	8002038 <MX_TIM7_Init>
  MX_TIM3_Init();
 80015e2:	f000 fbf1 	bl	8001dc8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80015e6:	f000 fc97 	bl	8001f18 <MX_TIM5_Init>
  MX_ADC1_Init();
 80015ea:	f7ff fd49 	bl	8001080 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015ee:	f7ff ff11 	bl	8001414 <MX_I2C1_Init>
  MX_TIM10_Init();
 80015f2:	f000 fd57 	bl	80020a4 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 80015f6:	f000 ff19 	bl	800242c <MX_USART6_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(50);
 80015fa:	2032      	movs	r0, #50	@ 0x32
 80015fc:	f003 f9aa 	bl	8004954 <HAL_Delay>
  Robot_init(&robot);
 8001600:	482b      	ldr	r0, [pc, #172]	@ (80016b0 <main+0xfc>)
 8001602:	f001 fc5b 	bl	8002ebc <Robot_init>
//  MAX72_Add_Data(&display, &data);

//  display_data_t data2 = {&encoder_l.speed, PRINT_FLOAT, MINIDIGITS, DISPLAY_TYPE_FLOAT, 3};
//  MAX72_Add_Data(&display, &data2);

  display_data_t data3 = {&imu.angle, PRINT_FLOAT, FLOAT, DISPLAY_TYPE_FLOAT, 2};
 8001606:	4a2b      	ldr	r2, [pc, #172]	@ (80016b4 <main+0x100>)
 8001608:	463b      	mov	r3, r7
 800160a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800160e:	e883 0003 	stmia.w	r3, {r0, r1}
  MAX72_Add_Data(&display, &data3);
 8001612:	463b      	mov	r3, r7
 8001614:	4619      	mov	r1, r3
 8001616:	4828      	ldr	r0, [pc, #160]	@ (80016b8 <main+0x104>)
 8001618:	f002 f91b 	bl	8003852 <MAX72_Add_Data>

//  display_data_t data4 = {&power_module.voltage, PRINT_FLOAT, NO_SETTINGS, DISPLAY_TYPE_FLOAT, 2};
//  MAX72_Add_Data(&display, &data4);

  HAL_UART_Receive_DMA(&huart6, (uint8_t*)js_buffer, 14);
 800161c:	220e      	movs	r2, #14
 800161e:	4927      	ldr	r1, [pc, #156]	@ (80016bc <main+0x108>)
 8001620:	4827      	ldr	r0, [pc, #156]	@ (80016c0 <main+0x10c>)
 8001622:	f008 f8af 	bl	8009784 <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (IMU_Rx_Cplt) {
 8001626:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <main+0x110>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <main+0x86>
		  IMU_Rx_Cplt = 0; // Reset flag
 800162e:	4b25      	ldr	r3, [pc, #148]	@ (80016c4 <main+0x110>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
		  IMU_Compute_Data(&imu); // Process received data
 8001634:	4824      	ldr	r0, [pc, #144]	@ (80016c8 <main+0x114>)
 8001636:	f001 f983 	bl	8002940 <IMU_Compute_Data>
	  }

	  if (js_msg_ready) {
 800163a:	4b24      	ldr	r3, [pc, #144]	@ (80016cc <main+0x118>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <main+0x9c>
		  js_msg_ready = 0; // Reset flag
 8001642:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <main+0x118>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
//		      __HAL_UART_CLEAR_OREFLAG(&huart6);
//
//		      // Azzeriamo anche ErrorCode nella struct
//		      huart6.ErrorCode = HAL_UART_ERROR_NONE;
//		  }
		  Robot_read_serial_msg(&robot, js_buffer);
 8001648:	491c      	ldr	r1, [pc, #112]	@ (80016bc <main+0x108>)
 800164a:	4819      	ldr	r0, [pc, #100]	@ (80016b0 <main+0xfc>)
 800164c:	f001 fcd4 	bl	8002ff8 <Robot_read_serial_msg>
	  }

	  static uint8_t last_cnt = 255;
	  if (last_cnt != tim6_update_cnt) { // Update every 100ms
 8001650:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <main+0x11c>)
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <main+0x120>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d0e4      	beq.n	8001626 <main+0x72>
	      last_cnt = tim6_update_cnt;
 800165c:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <main+0x120>)
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <main+0x11c>)
 8001662:	701a      	strb	r2, [r3, #0]

	      //TODO Activate
//	      PowerModule_update_data(&power_module);

	      MAX72_Update_Data(&display);
 8001664:	4814      	ldr	r0, [pc, #80]	@ (80016b8 <main+0x104>)
 8001666:	f002 f91f 	bl	80038a8 <MAX72_Update_Data>
	      if (tim6_update_cnt % 5 == 0) { // Update every 500ms
 800166a:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <main+0x120>)
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <main+0x124>)
 8001670:	fba3 1302 	umull	r1, r3, r3, r2
 8001674:	0899      	lsrs	r1, r3, #2
 8001676:	460b      	mov	r3, r1
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d111      	bne.n	80016a8 <main+0xf4>

	    	  // Send IMU data via UART for debugging
//	    	  transmit_IMU_data();
//			  show_calibration_messages();

	    	  if (tim6_update_cnt % 10 == 0) { // Every 1 second
 8001684:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <main+0x120>)
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <main+0x124>)
 800168a:	fba3 1302 	umull	r1, r3, r3, r2
 800168e:	08d9      	lsrs	r1, r3, #3
 8001690:	460b      	mov	r3, r1
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <main+0xf4>
	    		  MAX72_Change_Data(&display,0);
 80016a0:	2100      	movs	r1, #0
 80016a2:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <main+0x104>)
 80016a4:	f002 fa00 	bl	8003aa8 <MAX72_Change_Data>
	    	  }
	      }

	      MAX72_Scroll_Process(); // Process scrolling text
 80016a8:	f002 ff24 	bl	80044f4 <MAX72_Scroll_Process>
  {
 80016ac:	e7bb      	b.n	8001626 <main+0x72>
 80016ae:	bf00      	nop
 80016b0:	200006bc 	.word	0x200006bc
 80016b4:	0800fc90 	.word	0x0800fc90
 80016b8:	20000bd8 	.word	0x20000bd8
 80016bc:	200006ac 	.word	0x200006ac
 80016c0:	20000978 	.word	0x20000978
 80016c4:	200006a9 	.word	0x200006a9
 80016c8:	20000aa4 	.word	0x20000aa4
 80016cc:	200006bb 	.word	0x200006bb
 80016d0:	20000000 	.word	0x20000000
 80016d4:	200006a8 	.word	0x200006a8
 80016d8:	cccccccd 	.word	0xcccccccd

080016dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b094      	sub	sp, #80	@ 0x50
 80016e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	2234      	movs	r2, #52	@ 0x34
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f00a ff94 	bl	800c618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	4b2a      	ldr	r3, [pc, #168]	@ (80017b0 <SystemClock_Config+0xd4>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	4a29      	ldr	r2, [pc, #164]	@ (80017b0 <SystemClock_Config+0xd4>)
 800170a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800170e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001710:	4b27      	ldr	r3, [pc, #156]	@ (80017b0 <SystemClock_Config+0xd4>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800171c:	2300      	movs	r3, #0
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <SystemClock_Config+0xd8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001728:	4a22      	ldr	r2, [pc, #136]	@ (80017b4 <SystemClock_Config+0xd8>)
 800172a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <SystemClock_Config+0xd8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001740:	2301      	movs	r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001744:	2310      	movs	r3, #16
 8001746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001748:	2302      	movs	r3, #2
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800174c:	2300      	movs	r3, #0
 800174e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001750:	2310      	movs	r3, #16
 8001752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001754:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001758:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800175a:	2304      	movs	r3, #4
 800175c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800175e:	2302      	movs	r3, #2
 8001760:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001762:	2302      	movs	r3, #2
 8001764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4618      	mov	r0, r3
 800176c:	f006 fa80 	bl	8007c70 <HAL_RCC_OscConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001776:	f000 f8b4 	bl	80018e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	230f      	movs	r3, #15
 800177c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177e:	2302      	movs	r3, #2
 8001780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	2102      	movs	r1, #2
 8001796:	4618      	mov	r0, r3
 8001798:	f005 ff20 	bl	80075dc <HAL_RCC_ClockConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80017a2:	f000 f89e 	bl	80018e2 <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	3750      	adds	r7, #80	@ 0x50
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a18      	ldr	r2, [pc, #96]	@ (8001828 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10d      	bne.n	80017e6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		tim6_update_cnt++;
 80017ca:	4b18      	ldr	r3, [pc, #96]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017d4:	701a      	strb	r2, [r3, #0]
		if (tim6_update_cnt == 250){
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2bfa      	cmp	r3, #250	@ 0xfa
 80017dc:	d11f      	bne.n	800181e <HAL_TIM_PeriodElapsedCallback+0x66>
			tim6_update_cnt = 0;
 80017de:	4b13      	ldr	r3, [pc, #76]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		speed_control(&stepper_l);
	} else if (htim->Instance == TIM10){
		// Read from IMU
		IMU_ReadData(&imu);
	}
}
 80017e4:	e01b      	b.n	800181e <HAL_TIM_PeriodElapsedCallback+0x66>
	} else if (htim->Instance == TIM7) {
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a11      	ldr	r2, [pc, #68]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d10e      	bne.n	800180e <HAL_TIM_PeriodElapsedCallback+0x56>
    if (pid.active){
 80017f0:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80017f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_TIM_PeriodElapsedCallback+0x48>
      PID_Update(&pid);
 80017fa:	480e      	ldr	r0, [pc, #56]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80017fc:	f001 fce2 	bl	80031c4 <PID_Update>
		speed_control(&stepper_r);
 8001800:	480d      	ldr	r0, [pc, #52]	@ (8001838 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001802:	f001 fdf3 	bl	80033ec <speed_control>
		speed_control(&stepper_l);
 8001806:	480d      	ldr	r0, [pc, #52]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001808:	f001 fdf0 	bl	80033ec <speed_control>
}
 800180c:	e007      	b.n	800181e <HAL_TIM_PeriodElapsedCallback+0x66>
	} else if (htim->Instance == TIM10){
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a0b      	ldr	r2, [pc, #44]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d102      	bne.n	800181e <HAL_TIM_PeriodElapsedCallback+0x66>
		IMU_ReadData(&imu);
 8001818:	480a      	ldr	r0, [pc, #40]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800181a:	f001 f87c 	bl	8002916 <IMU_ReadData>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40001000 	.word	0x40001000
 800182c:	200006a8 	.word	0x200006a8
 8001830:	40001400 	.word	0x40001400
 8001834:	20000b94 	.word	0x20000b94
 8001838:	20000a44 	.word	0x20000a44
 800183c:	20000a80 	.word	0x20000a80
 8001840:	40014400 	.word	0x40014400
 8001844:	20000aa4 	.word	0x20000aa4

08001848 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_5) {
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	2b20      	cmp	r3, #32
 8001856:	d101      	bne.n	800185c <HAL_GPIO_EXTI_Callback+0x14>
    on_click();
 8001858:	f000 feca 	bl	80025f0 <on_click>
  }
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	if (hi2c == imu.hi2c) {
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_I2C_MemRxCpltCallback+0x24>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	429a      	cmp	r2, r3
 8001874:	d102      	bne.n	800187c <HAL_I2C_MemRxCpltCallback+0x18>
		// Data received from IMU, process it
		IMU_Rx_Cplt = 1; // Set flag to indicate data is ready
 8001876:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HAL_I2C_MemRxCpltCallback+0x28>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
	}
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	20000aa4 	.word	0x20000aa4
 800188c:	200006a9 	.word	0x200006a9

08001890 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_UART_RxCpltCallback+0x2c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d105      	bne.n	80018ae <HAL_UART_RxCpltCallback+0x1e>

			js_buffer[14] = '\0';     // chiudi stringa
 80018a2:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <HAL_UART_RxCpltCallback+0x30>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	739a      	strb	r2, [r3, #14]
			js_msg_ready = 1;         // segnala che il messaggio è pronto
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_UART_RxCpltCallback+0x34>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
	}
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40011400 	.word	0x40011400
 80018c0:	200006ac 	.word	0x200006ac
 80018c4:	200006bb 	.word	0x200006bb

080018c8 <__io_putchar>:

 int __io_putchar(int ch){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 	ITM_SendChar(ch);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fe46 	bl	8001564 <ITM_SendChar>
 	return ch;
 80018d8:	687b      	ldr	r3, [r7, #4]
 }
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e6:	b672      	cpsid	i
}
 80018e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ea:	bf00      	nop
 80018ec:	e7fd      	b.n	80018ea <Error_Handler+0x8>
	...

080018f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018f4:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <MX_SPI2_Init+0x68>)
 80018f6:	4a19      	ldr	r2, [pc, #100]	@ (800195c <MX_SPI2_Init+0x6c>)
 80018f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018fa:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <MX_SPI2_Init+0x68>)
 80018fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001900:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001904:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001908:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <MX_SPI2_Init+0x68>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_SPI2_Init+0x68>)
 800191e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001922:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <MX_SPI2_Init+0x68>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001938:	2200      	movs	r2, #0
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <MX_SPI2_Init+0x68>)
 800193e:	220a      	movs	r2, #10
 8001940:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	@ (8001958 <MX_SPI2_Init+0x68>)
 8001944:	f006 fc32 	bl	80081ac <HAL_SPI_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800194e:	f7ff ffc8 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200006dc 	.word	0x200006dc
 800195c:	40003800 	.word	0x40003800

08001960 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	@ 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a28      	ldr	r2, [pc, #160]	@ (8001a20 <HAL_SPI_MspInit+0xc0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d14a      	bne.n	8001a18 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a26      	ldr	r2, [pc, #152]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 800198c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a18      	ldr	r2, [pc, #96]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <HAL_SPI_MspInit+0xc4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019d6:	2302      	movs	r3, #2
 80019d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80019e6:	2307      	movs	r3, #7
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	480d      	ldr	r0, [pc, #52]	@ (8001a28 <HAL_SPI_MspInit+0xc8>)
 80019f2:	f004 f903 	bl	8005bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 80019f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a08:	2305      	movs	r3, #5
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4619      	mov	r1, r3
 8001a12:	4806      	ldr	r0, [pc, #24]	@ (8001a2c <HAL_SPI_MspInit+0xcc>)
 8001a14:	f004 f8f2 	bl	8005bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3728      	adds	r7, #40	@ 0x28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40003800 	.word	0x40003800
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020800 	.word	0x40020800
 8001a2c:	40020400 	.word	0x40020400

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a6e:	2007      	movs	r0, #7
 8001a70:	f003 fc74 	bl	800535c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800

08001a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <NMI_Handler+0x4>

08001a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <MemManage_Handler+0x4>

08001a98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad6:	f002 ff1d 	bl	8004914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <DMA1_Stream0_IRQHandler+0x10>)
 8001ae6:	f003 fe13 	bl	8005710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000648 	.word	0x20000648

08001af4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001af8:	2020      	movs	r0, #32
 8001afa:	f004 fa5f 	bl	8005fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001b08:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b0a:	f007 f905 	bl	8008d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200008e8 	.word	0x200008e8

08001b18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b1c:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <TIM6_DAC_IRQHandler+0x10>)
 8001b1e:	f007 f8fb 	bl	8008d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000858 	.word	0x20000858

08001b2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <TIM7_IRQHandler+0x10>)
 8001b32:	f007 f8f1 	bl	8008d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200008a0 	.word	0x200008a0

08001b40 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <DMA2_Stream1_IRQHandler+0x10>)
 8001b46:	f003 fde3 	bl	8005710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200009c0 	.word	0x200009c0

08001b54 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <USART6_IRQHandler+0x10>)
 8001b5a:	f007 fe39 	bl	80097d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000978 	.word	0x20000978

08001b68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return 1;
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_kill>:

int _kill(int pid, int sig)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b82:	f00a fdad 	bl	800c6e0 <__errno>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2216      	movs	r2, #22
 8001b8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_exit>:

void _exit (int status)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ffe7 	bl	8001b78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001baa:	bf00      	nop
 8001bac:	e7fd      	b.n	8001baa <_exit+0x12>

08001bae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e00a      	b.n	8001bd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bc0:	f3af 8000 	nop.w
 8001bc4:	4601      	mov	r1, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	60ba      	str	r2, [r7, #8]
 8001bcc:	b2ca      	uxtb	r2, r1
 8001bce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dbf0      	blt.n	8001bc0 <_read+0x12>
  }

  return len;
 8001bde:	687b      	ldr	r3, [r7, #4]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e009      	b.n	8001c0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	60ba      	str	r2, [r7, #8]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fe60 	bl	80018c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	dbf1      	blt.n	8001bfa <_write+0x12>
  }
  return len;
 8001c16:	687b      	ldr	r3, [r7, #4]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_close>:

int _close(int file)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c48:	605a      	str	r2, [r3, #4]
  return 0;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_isatty>:

int _isatty(int file)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c60:	2301      	movs	r3, #1
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c90:	4a14      	ldr	r2, [pc, #80]	@ (8001ce4 <_sbrk+0x5c>)
 8001c92:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <_sbrk+0x60>)
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c9c:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <_sbrk+0x64>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	@ (8001cf0 <_sbrk+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d207      	bcs.n	8001cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb8:	f00a fd12 	bl	800c6e0 <__errno>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cc6:	e009      	b.n	8001cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc8:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cce:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a05      	ldr	r2, [pc, #20]	@ (8001cec <_sbrk+0x64>)
 8001cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20020000 	.word	0x20020000
 8001ce8:	00000400 	.word	0x00000400
 8001cec:	20000734 	.word	0x20000734
 8001cf0:	20000da8 	.word	0x20000da8

08001cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <SystemInit+0x20>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cfe:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <SystemInit+0x20>)
 8001d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	@ 0x28
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	615a      	str	r2, [r3, #20]
 8001d38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d3a:	4b22      	ldr	r3, [pc, #136]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d42:	4b20      	ldr	r3, [pc, #128]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d56:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5c:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d62:	4818      	ldr	r0, [pc, #96]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d64:	f006 fd8c 	bl	8008880 <HAL_TIM_PWM_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d6e:	f7ff fdb8 	bl	80018e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d7a:	f107 0320 	add.w	r3, r7, #32
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4810      	ldr	r0, [pc, #64]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001d82:	f007 fc1f 	bl	80095c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d8c:	f7ff fda9 	bl	80018e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d90:	2360      	movs	r3, #96	@ 0x60
 8001d92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	2204      	movs	r2, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4807      	ldr	r0, [pc, #28]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001da8:	f007 f8a6 	bl	8008ef8 <HAL_TIM_PWM_ConfigChannel>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001db2:	f7ff fd96 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001db6:	4803      	ldr	r0, [pc, #12]	@ (8001dc4 <MX_TIM2_Init+0xac>)
 8001db8:	f000 fab0 	bl	800231c <HAL_TIM_MspPostInit>

}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	@ 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000738 	.word	0x20000738

08001dc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	@ 0x30
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	2224      	movs	r2, #36	@ 0x24
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f00a fc1e 	bl	800c618 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001de4:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001de6:	4a21      	ldr	r2, [pc, #132]	@ (8001e6c <MX_TIM3_Init+0xa4>)
 8001de8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001df8:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001dfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e04:	4b18      	ldr	r3, [pc, #96]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e12:	2301      	movs	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e22:	2301      	movs	r3, #1
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	4619      	mov	r1, r3
 8001e34:	480c      	ldr	r0, [pc, #48]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001e36:	f006 fe3b 	bl	8008ab0 <HAL_TIM_Encoder_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e40:	f7ff fd4f 	bl	80018e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e44:	2300      	movs	r3, #0
 8001e46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <MX_TIM3_Init+0xa0>)
 8001e52:	f007 fbb7 	bl	80095c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e5c:	f7ff fd41 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	3730      	adds	r7, #48	@ 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000780 	.word	0x20000780
 8001e6c:	40000400 	.word	0x40000400

08001e70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	@ 0x30
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	2224      	movs	r2, #36	@ 0x24
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f00a fbca 	bl	800c618 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e8c:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001e8e:	4a21      	ldr	r2, [pc, #132]	@ (8001f14 <MX_TIM4_Init+0xa4>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e92:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8191;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001ea0:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001ea4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	4619      	mov	r1, r3
 8001edc:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001ede:	f006 fde7 	bl	8008ab0 <HAL_TIM_Encoder_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ee8:	f7ff fcfb 	bl	80018e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <MX_TIM4_Init+0xa0>)
 8001efa:	f007 fb63 	bl	80095c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f04:	f7ff fced 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	3730      	adds	r7, #48	@ 0x30
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200007c8 	.word	0x200007c8
 8001f14:	40000800 	.word	0x40000800

08001f18 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	@ 0x28
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1e:	f107 0320 	add.w	r3, r7, #32
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	611a      	str	r2, [r3, #16]
 8001f36:	615a      	str	r2, [r3, #20]
 8001f38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f3a:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f3c:	4a22      	ldr	r2, [pc, #136]	@ (8001fc8 <MX_TIM5_Init+0xb0>)
 8001f3e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f40:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f46:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f52:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f60:	4818      	ldr	r0, [pc, #96]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f62:	f006 fc8d 	bl	8008880 <HAL_TIM_PWM_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001f6c:	f7ff fcb9 	bl	80018e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f78:	f107 0320 	add.w	r3, r7, #32
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4811      	ldr	r0, [pc, #68]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001f80:	f007 fb20 	bl	80095c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001f8a:	f7ff fcaa 	bl	80018e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8e:	2360      	movs	r3, #96	@ 0x60
 8001f90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001fa6:	f006 ffa7 	bl	8008ef8 <HAL_TIM_PWM_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001fb0:	f7ff fc97 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001fb4:	4803      	ldr	r0, [pc, #12]	@ (8001fc4 <MX_TIM5_Init+0xac>)
 8001fb6:	f000 f9b1 	bl	800231c <HAL_TIM_MspPostInit>

}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	@ 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000810 	.word	0x20000810
 8001fc8:	40000c00 	.word	0x40000c00

08001fcc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001fdc:	4a15      	ldr	r2, [pc, #84]	@ (8002034 <MX_TIM6_Init+0x68>)
 8001fde:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001fe2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fe6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001ff0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001ff4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ffc:	480c      	ldr	r0, [pc, #48]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001ffe:	f006 fb7f 	bl	8008700 <HAL_TIM_Base_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002008:	f7ff fc6b 	bl	80018e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200c:	2300      	movs	r3, #0
 800200e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002014:	463b      	mov	r3, r7
 8002016:	4619      	mov	r1, r3
 8002018:	4805      	ldr	r0, [pc, #20]	@ (8002030 <MX_TIM6_Init+0x64>)
 800201a:	f007 fad3 	bl	80095c4 <HAL_TIMEx_MasterConfigSynchronization>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002024:	f7ff fc5d 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000858 	.word	0x20000858
 8002034:	40001000 	.word	0x40001000

08002038 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203e:	463b      	mov	r3, r7
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <MX_TIM7_Init+0x64>)
 8002048:	4a15      	ldr	r2, [pc, #84]	@ (80020a0 <MX_TIM7_Init+0x68>)
 800204a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 99;
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <MX_TIM7_Init+0x64>)
 800204e:	2263      	movs	r2, #99	@ 0x63
 8002050:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002052:	4b12      	ldr	r3, [pc, #72]	@ (800209c <MX_TIM7_Init+0x64>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8002058:	4b10      	ldr	r3, [pc, #64]	@ (800209c <MX_TIM7_Init+0x64>)
 800205a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800205e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002060:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <MX_TIM7_Init+0x64>)
 8002062:	2200      	movs	r2, #0
 8002064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002066:	480d      	ldr	r0, [pc, #52]	@ (800209c <MX_TIM7_Init+0x64>)
 8002068:	f006 fb4a 	bl	8008700 <HAL_TIM_Base_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002072:	f7ff fc36 	bl	80018e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800207e:	463b      	mov	r3, r7
 8002080:	4619      	mov	r1, r3
 8002082:	4806      	ldr	r0, [pc, #24]	@ (800209c <MX_TIM7_Init+0x64>)
 8002084:	f007 fa9e 	bl	80095c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800208e:	f7ff fc28 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200008a0 	.word	0x200008a0
 80020a0:	40001400 	.word	0x40001400

080020a4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80020a8:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020aa:	4a0f      	ldr	r2, [pc, #60]	@ (80020e8 <MX_TIM10_Init+0x44>)
 80020ac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 19;
 80020ae:	4b0d      	ldr	r3, [pc, #52]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020b0:	2213      	movs	r2, #19
 80020b2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b4:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020bc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80020c0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c2:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80020ce:	4805      	ldr	r0, [pc, #20]	@ (80020e4 <MX_TIM10_Init+0x40>)
 80020d0:	f006 fb16 	bl	8008700 <HAL_TIM_Base_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80020da:	f7ff fc02 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200008e8 	.word	0x200008e8
 80020e8:	40014400 	.word	0x40014400

080020ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <HAL_TIM_PWM_MspInit+0x64>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	4a12      	ldr	r2, [pc, #72]	@ (8002150 <HAL_TIM_PWM_MspInit+0x64>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6413      	str	r3, [r2, #64]	@ 0x40
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_TIM_PWM_MspInit+0x64>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800211a:	e012      	b.n	8002142 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0c      	ldr	r2, [pc, #48]	@ (8002154 <HAL_TIM_PWM_MspInit+0x68>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10d      	bne.n	8002142 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_TIM_PWM_MspInit+0x64>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	4a08      	ldr	r2, [pc, #32]	@ (8002150 <HAL_TIM_PWM_MspInit+0x64>)
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	6413      	str	r3, [r2, #64]	@ 0x40
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_TIM_PWM_MspInit+0x64>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	40000c00 	.word	0x40000c00

08002158 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08c      	sub	sp, #48	@ 0x30
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a32      	ldr	r2, [pc, #200]	@ (8002240 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d12c      	bne.n	80021d4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	4b31      	ldr	r3, [pc, #196]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	4a30      	ldr	r2, [pc, #192]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6413      	str	r3, [r2, #64]	@ 0x40
 800218a:	4b2e      	ldr	r3, [pc, #184]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	4b2a      	ldr	r3, [pc, #168]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	4a29      	ldr	r2, [pc, #164]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a6:	4b27      	ldr	r3, [pc, #156]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 80021b2:	23c0      	movs	r3, #192	@ 0xc0
 80021b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021c2:	2302      	movs	r3, #2
 80021c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4619      	mov	r1, r3
 80021cc:	481e      	ldr	r0, [pc, #120]	@ (8002248 <HAL_TIM_Encoder_MspInit+0xf0>)
 80021ce:	f003 fd15 	bl	8005bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80021d2:	e030      	b.n	8002236 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1c      	ldr	r2, [pc, #112]	@ (800224c <HAL_TIM_Encoder_MspInit+0xf4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d12b      	bne.n	8002236 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	4a17      	ldr	r2, [pc, #92]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ee:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	4a10      	ldr	r2, [pc, #64]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	6313      	str	r3, [r2, #48]	@ 0x30
 800220a:	4b0e      	ldr	r3, [pc, #56]	@ (8002244 <HAL_TIM_Encoder_MspInit+0xec>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin|ENC2_CH2_Pin;
 8002216:	23c0      	movs	r3, #192	@ 0xc0
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002226:	2302      	movs	r3, #2
 8002228:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4807      	ldr	r0, [pc, #28]	@ (8002250 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002232:	f003 fce3 	bl	8005bfc <HAL_GPIO_Init>
}
 8002236:	bf00      	nop
 8002238:	3730      	adds	r7, #48	@ 0x30
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40000400 	.word	0x40000400
 8002244:	40023800 	.word	0x40023800
 8002248:	40020000 	.word	0x40020000
 800224c:	40000800 	.word	0x40000800
 8002250:	40020400 	.word	0x40020400

08002254 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2a      	ldr	r2, [pc, #168]	@ (800230c <HAL_TIM_Base_MspInit+0xb8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d116      	bne.n	8002294 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	4a28      	ldr	r2, [pc, #160]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	6413      	str	r3, [r2, #64]	@ 0x40
 8002276:	4b26      	ldr	r3, [pc, #152]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	2036      	movs	r0, #54	@ 0x36
 8002288:	f003 f873 	bl	8005372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800228c:	2036      	movs	r0, #54	@ 0x36
 800228e:	f003 f88c 	bl	80053aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002292:	e036      	b.n	8002302 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM7)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1e      	ldr	r2, [pc, #120]	@ (8002314 <HAL_TIM_Base_MspInit+0xc0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d116      	bne.n	80022cc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 80022a8:	f043 0320 	orr.w	r3, r3, #32
 80022ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ae:	4b18      	ldr	r3, [pc, #96]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2037      	movs	r0, #55	@ 0x37
 80022c0:	f003 f857 	bl	8005372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022c4:	2037      	movs	r0, #55	@ 0x37
 80022c6:	f003 f870 	bl	80053aa <HAL_NVIC_EnableIRQ>
}
 80022ca:	e01a      	b.n	8002302 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a11      	ldr	r2, [pc, #68]	@ (8002318 <HAL_TIM_Base_MspInit+0xc4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d115      	bne.n	8002302 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b0d      	ldr	r3, [pc, #52]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a0c      	ldr	r2, [pc, #48]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <HAL_TIM_Base_MspInit+0xbc>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	2019      	movs	r0, #25
 80022f8:	f003 f83b 	bl	8005372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022fc:	2019      	movs	r0, #25
 80022fe:	f003 f854 	bl	80053aa <HAL_NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40001000 	.word	0x40001000
 8002310:	40023800 	.word	0x40023800
 8002314:	40001400 	.word	0x40001400
 8002318:	40014400 	.word	0x40014400

0800231c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800233c:	d11e      	bne.n	800237c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b22      	ldr	r3, [pc, #136]	@ (80023cc <HAL_TIM_MspPostInit+0xb0>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	4a21      	ldr	r2, [pc, #132]	@ (80023cc <HAL_TIM_MspPostInit+0xb0>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6313      	str	r3, [r2, #48]	@ 0x30
 800234e:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <HAL_TIM_MspPostInit+0xb0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M2_PUL_Pin;
 800235a:	2302      	movs	r3, #2
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800236a:	2301      	movs	r3, #1
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_PUL_GPIO_Port, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4816      	ldr	r0, [pc, #88]	@ (80023d0 <HAL_TIM_MspPostInit+0xb4>)
 8002376:	f003 fc41 	bl	8005bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800237a:	e022      	b.n	80023c2 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a14      	ldr	r2, [pc, #80]	@ (80023d4 <HAL_TIM_MspPostInit+0xb8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d11d      	bne.n	80023c2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <HAL_TIM_MspPostInit+0xb0>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a0f      	ldr	r2, [pc, #60]	@ (80023cc <HAL_TIM_MspPostInit+0xb0>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <HAL_TIM_MspPostInit+0xb0>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PUL_Pin;
 80023a2:	2301      	movs	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023b2:	2302      	movs	r3, #2
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_PUL_GPIO_Port, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	4804      	ldr	r0, [pc, #16]	@ (80023d0 <HAL_TIM_MspPostInit+0xb4>)
 80023be:	f003 fc1d 	bl	8005bfc <HAL_GPIO_Init>
}
 80023c2:	bf00      	nop
 80023c4:	3728      	adds	r7, #40	@ 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020000 	.word	0x40020000
 80023d4:	40000c00 	.word	0x40000c00

080023d8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 80023de:	4a12      	ldr	r2, [pc, #72]	@ (8002428 <MX_USART2_UART_Init+0x50>)
 80023e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 80023e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023fc:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 80023fe:	220c      	movs	r2, #12
 8002400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002402:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800240e:	4805      	ldr	r0, [pc, #20]	@ (8002424 <MX_USART2_UART_Init+0x4c>)
 8002410:	f007 f968 	bl	80096e4 <HAL_UART_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800241a:	f7ff fa62 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000930 	.word	0x20000930
 8002428:	40004400 	.word	0x40004400

0800242c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002430:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002432:	4a12      	ldr	r2, [pc, #72]	@ (800247c <MX_USART6_UART_Init+0x50>)
 8002434:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002438:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800243c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b0e      	ldr	r3, [pc, #56]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800244a:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002452:	2204      	movs	r2, #4
 8002454:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002462:	4805      	ldr	r0, [pc, #20]	@ (8002478 <MX_USART6_UART_Init+0x4c>)
 8002464:	f007 f93e 	bl	80096e4 <HAL_UART_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800246e:	f7ff fa38 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000978 	.word	0x20000978
 800247c:	40011400 	.word	0x40011400

08002480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	@ 0x30
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a4d      	ldr	r2, [pc, #308]	@ (80025d4 <HAL_UART_MspInit+0x154>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d12c      	bne.n	80024fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	4b4c      	ldr	r3, [pc, #304]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	4a4b      	ldr	r2, [pc, #300]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 80024ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b2:	4b49      	ldr	r3, [pc, #292]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	4b45      	ldr	r3, [pc, #276]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	4a44      	ldr	r2, [pc, #272]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ce:	4b42      	ldr	r3, [pc, #264]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024da:	230c      	movs	r3, #12
 80024dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024ea:	2307      	movs	r3, #7
 80024ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f107 031c 	add.w	r3, r7, #28
 80024f2:	4619      	mov	r1, r3
 80024f4:	4839      	ldr	r0, [pc, #228]	@ (80025dc <HAL_UART_MspInit+0x15c>)
 80024f6:	f003 fb81 	bl	8005bfc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80024fa:	e067      	b.n	80025cc <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART6)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a37      	ldr	r2, [pc, #220]	@ (80025e0 <HAL_UART_MspInit+0x160>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d162      	bne.n	80025cc <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	4b33      	ldr	r3, [pc, #204]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	4a32      	ldr	r2, [pc, #200]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 8002510:	f043 0320 	orr.w	r3, r3, #32
 8002514:	6453      	str	r3, [r2, #68]	@ 0x44
 8002516:	4b30      	ldr	r3, [pc, #192]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b2c      	ldr	r3, [pc, #176]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	4a2b      	ldr	r2, [pc, #172]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	6313      	str	r3, [r2, #48]	@ 0x30
 8002532:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <HAL_UART_MspInit+0x158>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800253e:	23c0      	movs	r3, #192	@ 0xc0
 8002540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254a:	2303      	movs	r3, #3
 800254c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800254e:	2308      	movs	r3, #8
 8002550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002552:	f107 031c 	add.w	r3, r7, #28
 8002556:	4619      	mov	r1, r3
 8002558:	4822      	ldr	r0, [pc, #136]	@ (80025e4 <HAL_UART_MspInit+0x164>)
 800255a:	f003 fb4f 	bl	8005bfc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800255e:	4b22      	ldr	r3, [pc, #136]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 8002560:	4a22      	ldr	r2, [pc, #136]	@ (80025ec <HAL_UART_MspInit+0x16c>)
 8002562:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002564:	4b20      	ldr	r3, [pc, #128]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 8002566:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800256a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800256c:	4b1e      	ldr	r3, [pc, #120]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002572:	4b1d      	ldr	r3, [pc, #116]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002578:	4b1b      	ldr	r3, [pc, #108]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 800257a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800257e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002580:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 8002582:	2200      	movs	r2, #0
 8002584:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002586:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800258c:	4b16      	ldr	r3, [pc, #88]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 800258e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002592:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002594:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 8002596:	2200      	movs	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800259a:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 800259c:	2200      	movs	r2, #0
 800259e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80025a0:	4811      	ldr	r0, [pc, #68]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 80025a2:	f002 ff1d 	bl	80053e0 <HAL_DMA_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80025ac:	f7ff f999 	bl	80018e2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a0d      	ldr	r2, [pc, #52]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 80025b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025b6:	4a0c      	ldr	r2, [pc, #48]	@ (80025e8 <HAL_UART_MspInit+0x168>)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80025bc:	2200      	movs	r2, #0
 80025be:	2100      	movs	r1, #0
 80025c0:	2047      	movs	r0, #71	@ 0x47
 80025c2:	f002 fed6 	bl	8005372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80025c6:	2047      	movs	r0, #71	@ 0x47
 80025c8:	f002 feef 	bl	80053aa <HAL_NVIC_EnableIRQ>
}
 80025cc:	bf00      	nop
 80025ce:	3730      	adds	r7, #48	@ 0x30
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40004400 	.word	0x40004400
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020000 	.word	0x40020000
 80025e0:	40011400 	.word	0x40011400
 80025e4:	40020800 	.word	0x40020800
 80025e8:	200009c0 	.word	0x200009c0
 80025ec:	40026428 	.word	0x40026428

080025f0 <on_click>:
#define DEBOUNCE_DELAY 100 // ms

static uint32_t last_debounce_time = 0;
// static uint8_t active = 0;

void on_click(){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY){
 80025f4:	f002 f9a2 	bl	800493c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b16      	ldr	r3, [pc, #88]	@ (8002654 <on_click+0x64>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b64      	cmp	r3, #100	@ 0x64
 8002602:	d925      	bls.n	8002650 <on_click+0x60>
		last_debounce_time = HAL_GetTick();
 8002604:	f002 f99a 	bl	800493c <HAL_GetTick>
 8002608:	4603      	mov	r3, r0
 800260a:	4a12      	ldr	r2, [pc, #72]	@ (8002654 <on_click+0x64>)
 800260c:	6013      	str	r3, [r2, #0]
		// active ^= 1;

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 800260e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002612:	4811      	ldr	r0, [pc, #68]	@ (8002658 <on_click+0x68>)
 8002614:	f003 fcb7 	bl	8005f86 <HAL_GPIO_TogglePin>
		// } else{
		// 	set_speed(&stepper_l, 0);
		// 	set_speed(&stepper_r, 0);
		// }

		pid.active ^= 1;
 8002618:	4b10      	ldr	r3, [pc, #64]	@ (800265c <on_click+0x6c>)
 800261a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800261e:	f083 0301 	eor.w	r3, r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	4b0d      	ldr	r3, [pc, #52]	@ (800265c <on_click+0x6c>)
 8002626:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		if (pid.active) {
 800262a:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <on_click+0x6c>)
 800262c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <on_click+0x4c>
			PID_Reset(&pid);
 8002634:	4809      	ldr	r0, [pc, #36]	@ (800265c <on_click+0x6c>)
 8002636:	f000 febf 	bl	80033b8 <PID_Reset>
		} else {
			set_speed(&stepper_l, 0);
			set_speed(&stepper_r, 0);
		}
	}
}
 800263a:	e009      	b.n	8002650 <on_click+0x60>
			set_speed(&stepper_l, 0);
 800263c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002660 <on_click+0x70>
 8002640:	4808      	ldr	r0, [pc, #32]	@ (8002664 <on_click+0x74>)
 8002642:	f000 ffc7 	bl	80035d4 <set_speed>
			set_speed(&stepper_r, 0);
 8002646:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002660 <on_click+0x70>
 800264a:	4807      	ldr	r0, [pc, #28]	@ (8002668 <on_click+0x78>)
 800264c:	f000 ffc2 	bl	80035d4 <set_speed>
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000a20 	.word	0x20000a20
 8002658:	40020800 	.word	0x40020800
 800265c:	20000b94 	.word	0x20000b94
 8002660:	00000000 	.word	0x00000000
 8002664:	20000a80 	.word	0x20000a80
 8002668:	20000a44 	.word	0x20000a44

0800266c <update_direction>:
#include <stdio.h>

float SAMPLING_PERIOD; // seconds
uint32_t HCLK;

static void update_direction(encoder_t *encoder){
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	encoder->direction = (encoder->tim->CR1 & TIM_CR1_DIR_Msk) >> TIM_CR1_DIR_Pos;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	701a      	strb	r2, [r3, #0]
	return;
 8002688:	bf00      	nop
}
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	0000      	movs	r0, r0
	...

08002698 <update_displacement>:

static void update_displacement(encoder_t *encoder){
 8002698:	b5b0      	push	{r4, r5, r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

	encoder->displacement = ((float)encoder->tim->CNT - 4096) * RCF * encoder->direction_invert;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ae:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002730 <update_displacement+0x98>
 80026b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026b6:	ee17 0a90 	vmov	r0, s15
 80026ba:	f7fd ff75 	bl	80005a8 <__aeabi_f2d>
 80026be:	a31a      	add	r3, pc, #104	@ (adr r3, 8002728 <update_displacement+0x90>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fd ffc8 	bl	8000658 <__aeabi_dmul>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4614      	mov	r4, r2
 80026ce:	461d      	mov	r5, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd ff54 	bl	8000584 <__aeabi_i2d>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4620      	mov	r0, r4
 80026e2:	4629      	mov	r1, r5
 80026e4:	f7fd ffb8 	bl	8000658 <__aeabi_dmul>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4610      	mov	r0, r2
 80026ee:	4619      	mov	r1, r3
 80026f0:	f7fe faaa 	bl	8000c48 <__aeabi_d2f>
 80026f4:	4602      	mov	r2, r0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	605a      	str	r2, [r3, #4]
	encoder->tim->CNT = 4096;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24

	encoder->position += encoder->displacement;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	ed93 7a05 	vldr	s14, [r3, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	edc3 7a05 	vstr	s15, [r3, #20]
	return;
 800271a:	bf00      	nop
}
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bdb0      	pop	{r4, r5, r7, pc}
 8002722:	bf00      	nop
 8002724:	f3af 8000 	nop.w
 8002728:	7bb1a72c 	.word	0x7bb1a72c
 800272c:	3f4921fa 	.word	0x3f4921fa
 8002730:	45800000 	.word	0x45800000

08002734 <compute_speed>:

static void compute_speed(encoder_t *encoder){
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	encoder->speed = encoder->displacement / SAMPLING_PERIOD;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002742:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <compute_speed+0x2c>)
 8002744:	ed93 7a00 	vldr	s14, [r3]
 8002748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000a24 	.word	0x20000a24

08002764 <Encoder_read>:

void Encoder_read(encoder_t *encoder){
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	update_direction(encoder);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff7d 	bl	800266c <update_direction>
	update_displacement(encoder);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff90 	bl	8002698 <update_displacement>
	compute_speed(encoder);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ffdb 	bl	8002734 <compute_speed>
	return;
 800277e:	bf00      	nop
}
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <Encoder_init>:

// em_tim : encoder mode timer | s_tim : sampling timer
void Encoder_init(encoder_t *encoder, TIM_HandleTypeDef *em_tim, TIM_HandleTypeDef *s_tim, int8_t direction_invert){
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	70fb      	strb	r3, [r7, #3]
	encoder->tim = em_tim->Instance;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	60da      	str	r2, [r3, #12]
	encoder->tim->CNT = 4096;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027a6:	625a      	str	r2, [r3, #36]	@ 0x24
	encoder->direction_invert = direction_invert;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	78fa      	ldrb	r2, [r7, #3]
 80027ac:	741a      	strb	r2, [r3, #16]
	encoder->direction = 0;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
	encoder->displacement = 0.0f;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	605a      	str	r2, [r3, #4]
	encoder->speed = 0.0f;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
	encoder->position = 0.0f;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	615a      	str	r2, [r3, #20]
	
	HCLK = HAL_RCC_GetHCLKFreq();
 80027cc:	f004 ffec 	bl	80077a8 <HAL_RCC_GetHCLKFreq>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4a11      	ldr	r2, [pc, #68]	@ (8002818 <Encoder_init+0x90>)
 80027d4:	6013      	str	r3, [r2, #0]
	SAMPLING_PERIOD = (float)(1+s_tim->Instance->ARR)*(1+s_tim->Instance->PSC)/HCLK;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	3301      	adds	r3, #1
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	3301      	adds	r3, #1
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027fa:	4b07      	ldr	r3, [pc, #28]	@ (8002818 <Encoder_init+0x90>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800280a:	4b04      	ldr	r3, [pc, #16]	@ (800281c <Encoder_init+0x94>)
 800280c:	edc3 7a00 	vstr	s15, [r3]
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000a28 	.word	0x20000a28
 800281c:	20000a24 	.word	0x20000a24

08002820 <IMU_Init>:
		imu->az_bias = imu->az_bias - 16384.0f; // Adjust az bias to remove the offset
		imu->az= (imu->az - imu->az_bias) / 16384.0f * 9.81f; // Remove the bias from the az value
	}
}

uint8_t IMU_Init(imu_t *imu, I2C_HandleTypeDef *hi2c, uint16_t address) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af04      	add	r7, sp, #16
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) {
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b02      	cmp	r3, #2
 800283a:	d101      	bne.n	8002840 <IMU_Init+0x20>
		// I2C bus is busy, stop the I2C communication
		return 0;
 800283c:	2300      	movs	r3, #0
 800283e:	e066      	b.n	800290e <IMU_Init+0xee>
	}

	imu->hi2c = hi2c;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	601a      	str	r2, [r3, #0]
	imu->address = address;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	88fa      	ldrh	r2, [r7, #6]
 800284a:	809a      	strh	r2, [r3, #4]

	imu->ax = 0.0f;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	615a      	str	r2, [r3, #20]
	imu->ay = 0.0f;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
	imu->az = 0.0f;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	61da      	str	r2, [r3, #28]
	imu->vx = 0.0f;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	621a      	str	r2, [r3, #32]

	imu->wx = 0.0f;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	625a      	str	r2, [r3, #36]	@ 0x24
	imu->wy = 0.0f;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	629a      	str	r2, [r3, #40]	@ 0x28
	imu->wz = 0.0f;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	62da      	str	r2, [r3, #44]	@ 0x2c
	imu->alpha_y = 0.0f; // Initialize alpha_y to 0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30

	imu->angle = 0.0f;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	635a      	str	r2, [r3, #52]	@ 0x34
	imu->last_computation_time = 0;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	639a      	str	r2, [r3, #56]	@ 0x38

	imu->az_bias = 0.0f; // Initialize az bias to 0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	imu->calibration_mode = 1; // Calibration mode enabled by default
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	uint8_t check;
	HAL_I2C_Mem_Read(hi2c, address, WHO_AM_I_ADDR, I2C_MEMADD_SIZE_8BIT, &check, 1, 1000);
 80028aa:	88f9      	ldrh	r1, [r7, #6]
 80028ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	2301      	movs	r3, #1
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	f107 0317 	add.w	r3, r7, #23
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	2275      	movs	r2, #117	@ 0x75
 80028c0:	68b8      	ldr	r0, [r7, #8]
 80028c2:	f003 fdd1 	bl	8006468 <HAL_I2C_Mem_Read>
	if (check == 0x68) {
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
 80028c8:	2b68      	cmp	r3, #104	@ 0x68
 80028ca:	d11f      	bne.n	800290c <IMU_Init+0xec>
		uint8_t data = 0x00;
 80028cc:	2300      	movs	r3, #0
 80028ce:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, SLEEP_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80028d0:	88f9      	ldrh	r1, [r7, #6]
 80028d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028d6:	9302      	str	r3, [sp, #8]
 80028d8:	2301      	movs	r3, #1
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	f107 0316 	add.w	r3, r7, #22
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2301      	movs	r3, #1
 80028e4:	226b      	movs	r2, #107	@ 0x6b
 80028e6:	68b8      	ldr	r0, [r7, #8]
 80028e8:	f003 fcc4 	bl	8006274 <HAL_I2C_Mem_Write>

		data = 0x00;
 80028ec:	2300      	movs	r3, #0
 80028ee:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80028f0:	88f9      	ldrh	r1, [r7, #6]
 80028f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028f6:	9302      	str	r3, [sp, #8]
 80028f8:	2301      	movs	r3, #1
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	f107 0316 	add.w	r3, r7, #22
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2301      	movs	r3, #1
 8002904:	221a      	movs	r2, #26
 8002906:	68b8      	ldr	r0, [r7, #8]
 8002908:	f003 fcb4 	bl	8006274 <HAL_I2C_Mem_Write>
	}
	return 1;
 800290c:	2301      	movs	r3, #1
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <IMU_ReadData>:

void IMU_ReadData(imu_t *imu){
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af02      	add	r7, sp, #8
 800291c:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(imu->hi2c, imu->address, IMU_BASE_ACCEL_ADDR, I2C_MEMADD_SIZE_8BIT, (uint8_t *)imu->pData, IMU_BUFFER_SIZE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8899      	ldrh	r1, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3306      	adds	r3, #6
 800292a:	220e      	movs	r2, #14
 800292c:	9201      	str	r2, [sp, #4]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2301      	movs	r3, #1
 8002932:	223b      	movs	r2, #59	@ 0x3b
 8002934:	f003 ffca 	bl	80068cc <HAL_I2C_Mem_Read_DMA>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <IMU_Compute_Data>:

void IMU_Compute_Data(imu_t *imu) {
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	uint32_t delta_time = HAL_GetTick() - imu->last_computation_time; // Calculate time since last angle update
 8002948:	f001 fff8 	bl	800493c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	60fb      	str	r3, [r7, #12]

	imu->ax = (1-IMU_EMA_ALPHA) * imu->ax + IMU_EMA_ALPHA * (((int16_t)(imu->pData[0] << 8) | imu->pData[1]) - 280.591f) / 16384.0f * 9.81f;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	edd3 7a05 	vldr	s15, [r3, #20]
 800295c:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8002c98 <IMU_Compute_Data+0x358>
 8002960:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	799b      	ldrb	r3, [r3, #6]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	b21b      	sxth	r3, r3
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	b21b      	sxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	79db      	ldrb	r3, [r3, #7]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4313      	orrs	r3, r2
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002982:	eddf 6ac6 	vldr	s13, [pc, #792]	@ 8002c9c <IMU_Compute_Data+0x35c>
 8002986:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800298a:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8002ca0 <IMU_Compute_Data+0x360>
 800298e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002992:	ed9f 6ac4 	vldr	s12, [pc, #784]	@ 8002ca4 <IMU_Compute_Data+0x364>
 8002996:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800299a:	eddf 6ac3 	vldr	s13, [pc, #780]	@ 8002ca8 <IMU_Compute_Data+0x368>
 800299e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->ay = (1-IMU_EMA_ALPHA) * imu->ay + IMU_EMA_ALPHA * ((int16_t)(imu->pData[2] << 8) | imu->pData[3]) / 16384.0f * 9.81f;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80029b2:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8002c98 <IMU_Compute_Data+0x358>
 80029b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7a1b      	ldrb	r3, [r3, #8]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	b21b      	sxth	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7a5b      	ldrb	r3, [r3, #9]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	4313      	orrs	r3, r2
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d8:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8002ca0 <IMU_Compute_Data+0x360>
 80029dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029e0:	ed9f 6ab0 	vldr	s12, [pc, #704]	@ 8002ca4 <IMU_Compute_Data+0x364>
 80029e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029e8:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8002ca8 <IMU_Compute_Data+0x368>
 80029ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->az = (1-IMU_EMA_ALPHA) * imu->az + IMU_EMA_ALPHA * (((int16_t)(imu->pData[4] << 8) | imu->pData[5]) - 1117.735f) / 16384.0f * 9.81f;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a00:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8002c98 <IMU_Compute_Data+0x358>
 8002a04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7a9b      	ldrb	r3, [r3, #10]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	b21b      	sxth	r3, r3
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	b21b      	sxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7adb      	ldrb	r3, [r3, #11]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a26:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002cac <IMU_Compute_Data+0x36c>
 8002a2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a2e:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8002ca0 <IMU_Compute_Data+0x360>
 8002a32:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a36:	ed9f 6a9b 	vldr	s12, [pc, #620]	@ 8002ca4 <IMU_Compute_Data+0x364>
 8002a3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a3e:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 8002ca8 <IMU_Compute_Data+0x368>
 8002a42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	edc3 7a07 	vstr	s15, [r3, #28]
//		IMU_Calibrate(imu); // Call calibration function if in calibration mode
//	} else {
//		// Convert raw data to float values (/16834.0f for accelerometer -> in g, /131.0f for gyroscope)
//		imu->az = (1-IMU_EMA_ALPHA) * imu->az + IMU_EMA_ALPHA * (((int16_t)(imu->pData[4] << 8) | imu->pData[5]) - imu->az_bias)/ 16384.0f * 9.81f;
//	}
	float old_wy = imu->wy;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	60bb      	str	r3, [r7, #8]
	imu->wx = (1-IMU_EMA_ALPHA) * imu->wx + IMU_EMA_ALPHA * ((int16_t)(imu->pData[8] << 8) | imu->pData[9]) / 131.0f;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002a5c:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002c98 <IMU_Compute_Data+0x358>
 8002a60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7b9b      	ldrb	r3, [r3, #14]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	b21b      	sxth	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	7bdb      	ldrb	r3, [r3, #15]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a82:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002ca0 <IMU_Compute_Data+0x360>
 8002a86:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a8a:	ed9f 6a89 	vldr	s12, [pc, #548]	@ 8002cb0 <IMU_Compute_Data+0x370>
 8002a8e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	imu->wy = (1-IMU_EMA_ALPHA) * imu->wy + IMU_EMA_ALPHA * (((int16_t)(imu->pData[10] << 8) | imu->pData[11]) - 393.589f) / 131.0f;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002aa2:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8002c98 <IMU_Compute_Data+0x358>
 8002aa6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7c1b      	ldrb	r3, [r3, #16]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	b21b      	sxth	r3, r3
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	b21b      	sxth	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7c5b      	ldrb	r3, [r3, #17]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac8:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8002cb4 <IMU_Compute_Data+0x374>
 8002acc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ad0:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8002ca0 <IMU_Compute_Data+0x360>
 8002ad4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002ad8:	ed9f 6a75 	vldr	s12, [pc, #468]	@ 8002cb0 <IMU_Compute_Data+0x370>
 8002adc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	imu->wz = (1-IMU_EMA_ALPHA) * imu->wz + IMU_EMA_ALPHA * ((int16_t)(imu->pData[12] << 8) | imu->pData[13]) / 131.0f;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002af0:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002c98 <IMU_Compute_Data+0x358>
 8002af4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7c9b      	ldrb	r3, [r3, #18]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	b21b      	sxth	r3, r3
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	b21b      	sxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7cdb      	ldrb	r3, [r3, #19]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b16:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002ca0 <IMU_Compute_Data+0x360>
 8002b1a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b1e:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 8002cb0 <IMU_Compute_Data+0x370>
 8002b22:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	imu->last_computation_time = HAL_GetTick(); // Update last computation time
 8002b30:	f001 ff04 	bl	800493c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	639a      	str	r2, [r3, #56]	@ 0x38

	imu->vx = imu->vx + imu->ax * (float)delta_time / 1000.0f; // Update velocity based on accelerometer data
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b54:	ed9f 6a58 	vldr	s12, [pc, #352]	@ 8002cb8 <IMU_Compute_Data+0x378>
 8002b58:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->alpha_y = (imu->wy - old_wy) / ((float)delta_time / 1000.0f); // Calculate angular acceleration around y-axis
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002b6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b70:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7e:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8002cb8 <IMU_Compute_Data+0x378>
 8002b82:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	if(imu->calibration_mode) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d02a      	beq.n	8002bf0 <IMU_Compute_Data+0x2b0>
		imu->angle = -atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Use accelerometer data to compute angle in calibration mode
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ba6:	eef0 0a47 	vmov.f32	s1, s14
 8002baa:	eeb0 0a67 	vmov.f32	s0, s15
 8002bae:	f00c fe9f 	bl	800f8f0 <atan2f>
 8002bb2:	eef0 7a40 	vmov.f32	s15, s0
 8002bb6:	eef1 7a67 	vneg.f32	s15, s15
 8002bba:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002cbc <IMU_Compute_Data+0x37c>
 8002bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc2:	ee17 0a90 	vmov	r0, s15
 8002bc6:	f7fd fcef 	bl	80005a8 <__aeabi_f2d>
 8002bca:	a331      	add	r3, pc, #196	@ (adr r3, 8002c90 <IMU_Compute_Data+0x350>)
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f7fd fe6c 	bl	80008ac <__aeabi_ddiv>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fe f834 	bl	8000c48 <__aeabi_d2f>
 8002be0:	4602      	mov	r2, r0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	635a      	str	r2, [r3, #52]	@ 0x34
		imu->calibration_mode = 0; // Reset calibration mode after computing angle
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}else {
		imu->angle = .996f * (imu->angle + imu->wy * (float)delta_time/1000.0f) - .004f * atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Complementary filter to combine gyroscope and accelerometer data
	}
}
 8002bee:	e04a      	b.n	8002c86 <IMU_Compute_Data+0x346>
		imu->angle = .996f * (imu->angle + imu->wy * (float)delta_time/1000.0f) - .004f * atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Complementary filter to combine gyroscope and accelerometer data
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c0a:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8002cb8 <IMU_Compute_Data+0x378>
 8002c0e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c16:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002cc0 <IMU_Compute_Data+0x380>
 8002c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c1e:	ee17 0a90 	vmov	r0, s15
 8002c22:	f7fd fcc1 	bl	80005a8 <__aeabi_f2d>
 8002c26:	4604      	mov	r4, r0
 8002c28:	460d      	mov	r5, r1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c36:	eef0 0a47 	vmov.f32	s1, s14
 8002c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c3e:	f00c fe57 	bl	800f8f0 <atan2f>
 8002c42:	eef0 7a40 	vmov.f32	s15, s0
 8002c46:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002cc4 <IMU_Compute_Data+0x384>
 8002c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c4e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002cbc <IMU_Compute_Data+0x37c>
 8002c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c56:	ee17 0a90 	vmov	r0, s15
 8002c5a:	f7fd fca5 	bl	80005a8 <__aeabi_f2d>
 8002c5e:	a30c      	add	r3, pc, #48	@ (adr r3, 8002c90 <IMU_Compute_Data+0x350>)
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	f7fd fe22 	bl	80008ac <__aeabi_ddiv>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	4629      	mov	r1, r5
 8002c70:	f7fd fb3a 	bl	80002e8 <__aeabi_dsub>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7fd ffe4 	bl	8000c48 <__aeabi_d2f>
 8002c80:	4602      	mov	r2, r0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	54442d18 	.word	0x54442d18
 8002c94:	400921fb 	.word	0x400921fb
 8002c98:	3f589d8a 	.word	0x3f589d8a
 8002c9c:	438c4ba6 	.word	0x438c4ba6
 8002ca0:	3e1d89d9 	.word	0x3e1d89d9
 8002ca4:	46800000 	.word	0x46800000
 8002ca8:	411cf5c3 	.word	0x411cf5c3
 8002cac:	448bb785 	.word	0x448bb785
 8002cb0:	43030000 	.word	0x43030000
 8002cb4:	43c4cb64 	.word	0x43c4cb64
 8002cb8:	447a0000 	.word	0x447a0000
 8002cbc:	43340000 	.word	0x43340000
 8002cc0:	3f7ef9db 	.word	0x3f7ef9db
 8002cc4:	3b83126f 	.word	0x3b83126f

08002cc8 <PowerModule_init>:
#include "headers/power_module.h"
#include "headers/display.h"
#include "gpio.h"

void PowerModule_init(power_module_t *power_module, ADC_HandleTypeDef *hadc){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
	power_module->warning_limit = WARNING_LIMIT; // Imposta il limite di avviso
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a34      	ldr	r2, [pc, #208]	@ (8002da8 <PowerModule_init+0xe0>)
 8002cd6:	605a      	str	r2, [r3, #4]
	power_module->stop_limit = STOP_LIMIT; // Imposta il limite di stop
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a34      	ldr	r2, [pc, #208]	@ (8002dac <PowerModule_init+0xe4>)
 8002cdc:	609a      	str	r2, [r3, #8]
	power_module->warning_issued = 0; // Inizializza il flag di avviso
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	731a      	strb	r2, [r3, #12]
	power_module->stop_issued = 0; // Inizializza il flag di stop
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	735a      	strb	r2, [r3, #13]
	power_module->hadc = *hadc; // Initialize ADC handle
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	3364      	adds	r3, #100	@ 0x64
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	2248      	movs	r2, #72	@ 0x48
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f009 fd35 	bl	800c764 <memcpy>

	HAL_ADC_Start(&power_module->hadc);  // Avvia manualmente
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3364      	adds	r3, #100	@ 0x64
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 fe90 	bl	8004a24 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&power_module->hadc, 10) == HAL_OK) {  // Timeout corto
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3364      	adds	r3, #100	@ 0x64
 8002d08:	210a      	movs	r1, #10
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 ff8f 	bl	8004c2e <HAL_ADC_PollForConversion>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d11f      	bne.n	8002d56 <PowerModule_init+0x8e>
		power_module->voltage = HAL_ADC_GetValue(&power_module->hadc) / SLOPE - OFFSET;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3364      	adds	r3, #100	@ 0x64
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 f812 	bl	8004d44 <HAL_ADC_GetValue>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fc1e 	bl	8000564 <__aeabi_ui2d>
 8002d28:	a31b      	add	r3, pc, #108	@ (adr r3, 8002d98 <PowerModule_init+0xd0>)
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	f7fd fdbd 	bl	80008ac <__aeabi_ddiv>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	a319      	add	r3, pc, #100	@ (adr r3, 8002da0 <PowerModule_init+0xd8>)
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f7fd fad2 	bl	80002e8 <__aeabi_dsub>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f7fd ff7c 	bl	8000c48 <__aeabi_d2f>
 8002d50:	4602      	mov	r2, r0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Stop(&power_module->hadc);  // Ferma l’ADC dopo la conversione
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3364      	adds	r3, #100	@ 0x64
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 ff34 	bl	8004bc8 <HAL_ADC_Stop>

	// Inizializza l'accumulatore
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e00a      	b.n	8002d7c <PowerModule_init+0xb4>
		power_module->accumulator[i] = power_module->voltage; // Inizializza con il primo valore letto
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b13      	cmp	r3, #19
 8002d80:	ddf1      	ble.n	8002d66 <PowerModule_init+0x9e>
	}
	power_module->accumulator_idx = 0; // Inizializza l'indice dell'accumulatore
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	f3af 8000 	nop.w
 8002d98:	e147ae14 	.word	0xe147ae14
 8002d9c:	405c847a 	.word	0x405c847a
 8002da0:	c540196f 	.word	0xc540196f
 8002da4:	3fb12c42 	.word	0x3fb12c42
 8002da8:	41b00000 	.word	0x41b00000
 8002dac:	41a00000 	.word	0x41a00000

08002db0 <I2C1_BusRecovery>:
#define I2C_SDA_GPIO_Port   GPIOB
#define I2C_SDA_Pin         GPIO_PIN_9

// quando HAL_I2C_Master_Receive_DMA() fallisce per colpa del bus bloccato (es. I2C_FLAG_BUSY sempre attivo),
// l’unico rimedio affidabile è resettare completamente il periferico I²C
static void I2C1_BusRecovery(void) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002db6:	463b      	mov	r3, r7
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]

    // 1) Disabilita I2C
    __HAL_I2C_DISABLE(&hi2c1);
 8002dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb0 <I2C1_BusRecovery+0x100>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4b39      	ldr	r3, [pc, #228]	@ (8002eb0 <I2C1_BusRecovery+0x100>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
    __HAL_RCC_I2C1_FORCE_RESET();
 8002dd4:	4b37      	ldr	r3, [pc, #220]	@ (8002eb4 <I2C1_BusRecovery+0x104>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4a36      	ldr	r2, [pc, #216]	@ (8002eb4 <I2C1_BusRecovery+0x104>)
 8002dda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002dde:	6213      	str	r3, [r2, #32]
    __HAL_RCC_I2C1_RELEASE_RESET();
 8002de0:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <I2C1_BusRecovery+0x104>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4a33      	ldr	r2, [pc, #204]	@ (8002eb4 <I2C1_BusRecovery+0x104>)
 8002de6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002dea:	6213      	str	r3, [r2, #32]

    // 2) Configura SCL e SDA come GPIO open-drain con pull-up interne
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8002dec:	2311      	movs	r3, #17
 8002dee:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002df0:	2301      	movs	r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df4:	2302      	movs	r3, #2
 8002df6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin   = I2C_SCL_Pin | I2C_SDA_Pin;
 8002df8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002dfc:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfe:	463b      	mov	r3, r7
 8002e00:	4619      	mov	r1, r3
 8002e02:	482d      	ldr	r0, [pc, #180]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e04:	f002 fefa 	bl	8005bfc <HAL_GPIO_Init>

    // 3) Se SDA rimane bassa, genera fino a 9 clock manuali su SCL
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++) {
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	e014      	b.n	8002e38 <I2C1_BusRecovery+0x88>
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_RESET);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e14:	4828      	ldr	r0, [pc, #160]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e16:	f003 f89d 	bl	8005f54 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f001 fd9a 	bl	8004954 <HAL_Delay>
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8002e20:	2201      	movs	r2, #1
 8002e22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e26:	4824      	ldr	r0, [pc, #144]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e28:	f003 f894 	bl	8005f54 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	f001 fd91 	bl	8004954 <HAL_Delay>
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++) {
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	3301      	adds	r3, #1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	dc07      	bgt.n	8002e4e <I2C1_BusRecovery+0x9e>
 8002e3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e42:	481d      	ldr	r0, [pc, #116]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e44:	f003 f86e 	bl	8005f24 <HAL_GPIO_ReadPin>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0df      	beq.n	8002e0e <I2C1_BusRecovery+0x5e>
    }

    // 4) Genera un STOP: SDA da bassa → alta mentre SCL alto
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_RESET);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e54:	4818      	ldr	r0, [pc, #96]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e56:	f003 f87d 	bl	8005f54 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f001 fd7a 	bl	8004954 <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8002e60:	2201      	movs	r2, #1
 8002e62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e66:	4814      	ldr	r0, [pc, #80]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e68:	f003 f874 	bl	8005f54 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f001 fd71 	bl	8004954 <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET);
 8002e72:	2201      	movs	r2, #1
 8002e74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e78:	480f      	ldr	r0, [pc, #60]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002e7a:	f003 f86b 	bl	8005f54 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f001 fd68 	bl	8004954 <HAL_Delay>

    // 5) Ripristina AF I2C su SCL e SDA
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e84:	2312      	movs	r3, #18
 8002e86:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;        // pull-up interne già attive
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed= GPIO_SPEED_FREQ_HIGH;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = I2C_SCL_Pin | I2C_SDA_Pin;
 8002e90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e94:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e96:	2304      	movs	r3, #4
 8002e98:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4806      	ldr	r0, [pc, #24]	@ (8002eb8 <I2C1_BusRecovery+0x108>)
 8002ea0:	f002 feac 	bl	8005bfc <HAL_GPIO_Init>

    // 6) Ri-inizializza l’I2C
    MX_I2C1_Init();
 8002ea4:	f7fe fab6 	bl	8001414 <MX_I2C1_Init>
}
 8002ea8:	bf00      	nop
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	200005f4 	.word	0x200005f4
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020400 	.word	0x40020400

08002ebc <Robot_init>:


void Robot_init(robot_t *robot) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(&htim6);						// Display timer (0.1MHz)
 8002ec4:	4838      	ldr	r0, [pc, #224]	@ (8002fa8 <Robot_init+0xec>)
 8002ec6:	f005 fc6b 	bl	80087a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);						// Timeline
 8002eca:	4838      	ldr	r0, [pc, #224]	@ (8002fac <Robot_init+0xf0>)
 8002ecc:	f005 fc68 	bl	80087a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);						// Stepper timer
 8002ed0:	4837      	ldr	r0, [pc, #220]	@ (8002fb0 <Robot_init+0xf4>)
 8002ed2:	f005 fc65 	bl	80087a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		// Encoder right
 8002ed6:	213c      	movs	r1, #60	@ 0x3c
 8002ed8:	4836      	ldr	r0, [pc, #216]	@ (8002fb4 <Robot_init+0xf8>)
 8002eda:	f005 fe8f 	bl	8008bfc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);		// Encoder left
 8002ede:	213c      	movs	r1, #60	@ 0x3c
 8002ee0:	4835      	ldr	r0, [pc, #212]	@ (8002fb8 <Robot_init+0xfc>)
 8002ee2:	f005 fe8b 	bl	8008bfc <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);			// Stepper left
 8002ee6:	2104      	movs	r1, #4
 8002ee8:	4834      	ldr	r0, [pc, #208]	@ (8002fbc <Robot_init+0x100>)
 8002eea:	f005 fd19 	bl	8008920 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);			// Stepper right
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4833      	ldr	r0, [pc, #204]	@ (8002fc0 <Robot_init+0x104>)
 8002ef2:	f005 fd15 	bl	8008920 <HAL_TIM_PWM_Start>

	MAX72_init(&display);
 8002ef6:	4833      	ldr	r0, [pc, #204]	@ (8002fc4 <Robot_init+0x108>)
 8002ef8:	f000 fbf0 	bl	80036dc <MAX72_init>

	while(!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR)){
 8002efc:	e005      	b.n	8002f0a <Robot_init+0x4e>
		MAX72_Print_String("I2C", NO_SETTINGS);
 8002efe:	2100      	movs	r1, #0
 8002f00:	4831      	ldr	r0, [pc, #196]	@ (8002fc8 <Robot_init+0x10c>)
 8002f02:	f000 fe3b 	bl	8003b7c <MAX72_Print_String>
		I2C1_BusRecovery(); // Attempt to recover I2C bus if IMU init fails
 8002f06:	f7ff ff53 	bl	8002db0 <I2C1_BusRecovery>
	while(!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR)){
 8002f0a:	22d0      	movs	r2, #208	@ 0xd0
 8002f0c:	492f      	ldr	r1, [pc, #188]	@ (8002fcc <Robot_init+0x110>)
 8002f0e:	4830      	ldr	r0, [pc, #192]	@ (8002fd0 <Robot_init+0x114>)
 8002f10:	f7ff fc86 	bl	8002820 <IMU_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f1      	beq.n	8002efe <Robot_init+0x42>
	}
	MAX72_Clear();
 8002f1a:	f000 fc81 	bl	8003820 <MAX72_Clear>
    robot->imu = &imu;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd0 <Robot_init+0x114>)
 8002f22:	601a      	str	r2, [r3, #0]

	Encoder_init(&encoder_l, &htim3, &htim7, -1);
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f28:	4a20      	ldr	r2, [pc, #128]	@ (8002fac <Robot_init+0xf0>)
 8002f2a:	4922      	ldr	r1, [pc, #136]	@ (8002fb4 <Robot_init+0xf8>)
 8002f2c:	4829      	ldr	r0, [pc, #164]	@ (8002fd4 <Robot_init+0x118>)
 8002f2e:	f7ff fc2b 	bl	8002788 <Encoder_init>
    robot->encoder_l = &encoder_l;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a27      	ldr	r2, [pc, #156]	@ (8002fd4 <Robot_init+0x118>)
 8002f36:	605a      	str	r2, [r3, #4]
	Stepper_init(&stepper_l, &htim5, TIM_CHANNEL_1, &encoder_l, GPIOA, GPIO_PIN_4);
 8002f38:	2310      	movs	r3, #16
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	4b26      	ldr	r3, [pc, #152]	@ (8002fd8 <Robot_init+0x11c>)
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	4b24      	ldr	r3, [pc, #144]	@ (8002fd4 <Robot_init+0x118>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	491e      	ldr	r1, [pc, #120]	@ (8002fc0 <Robot_init+0x104>)
 8002f46:	4825      	ldr	r0, [pc, #148]	@ (8002fdc <Robot_init+0x120>)
 8002f48:	f000 fb54 	bl	80035f4 <Stepper_init>
    robot->stepper_l = &stepper_l;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a23      	ldr	r2, [pc, #140]	@ (8002fdc <Robot_init+0x120>)
 8002f50:	60da      	str	r2, [r3, #12]
	Encoder_init(&encoder_r, &htim4, &htim7, 1);
 8002f52:	2301      	movs	r3, #1
 8002f54:	4a15      	ldr	r2, [pc, #84]	@ (8002fac <Robot_init+0xf0>)
 8002f56:	4918      	ldr	r1, [pc, #96]	@ (8002fb8 <Robot_init+0xfc>)
 8002f58:	4821      	ldr	r0, [pc, #132]	@ (8002fe0 <Robot_init+0x124>)
 8002f5a:	f7ff fc15 	bl	8002788 <Encoder_init>
    robot->encoder_r = &encoder_r;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe0 <Robot_init+0x124>)
 8002f62:	609a      	str	r2, [r3, #8]
	Stepper_init(&stepper_r, &htim2, TIM_CHANNEL_2, &encoder_r, GPIOB, GPIO_PIN_0);
 8002f64:	2301      	movs	r3, #1
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe4 <Robot_init+0x128>)
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe0 <Robot_init+0x124>)
 8002f6e:	2204      	movs	r2, #4
 8002f70:	4912      	ldr	r1, [pc, #72]	@ (8002fbc <Robot_init+0x100>)
 8002f72:	481d      	ldr	r0, [pc, #116]	@ (8002fe8 <Robot_init+0x12c>)
 8002f74:	f000 fb3e 	bl	80035f4 <Stepper_init>
    robot->stepper_r = &stepper_r;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe8 <Robot_init+0x12c>)
 8002f7c:	611a      	str	r2, [r3, #16]

	PowerModule_init(&power_module, &hadc1);
 8002f7e:	491b      	ldr	r1, [pc, #108]	@ (8002fec <Robot_init+0x130>)
 8002f80:	481b      	ldr	r0, [pc, #108]	@ (8002ff0 <Robot_init+0x134>)
 8002f82:	f7ff fea1 	bl	8002cc8 <PowerModule_init>
	robot->power_module = &power_module;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a19      	ldr	r2, [pc, #100]	@ (8002ff0 <Robot_init+0x134>)
 8002f8a:	615a      	str	r2, [r3, #20]

    PID_Init(&pid);
 8002f8c:	4819      	ldr	r0, [pc, #100]	@ (8002ff4 <Robot_init+0x138>)
 8002f8e:	f000 f8dd 	bl	800314c <PID_Init>
    robot->pid = &pid;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a17      	ldr	r2, [pc, #92]	@ (8002ff4 <Robot_init+0x138>)
 8002f96:	619a      	str	r2, [r3, #24]

    robot->base_angle_config = 0;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	771a      	strb	r2, [r3, #28]
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000858 	.word	0x20000858
 8002fac:	200008a0 	.word	0x200008a0
 8002fb0:	200008e8 	.word	0x200008e8
 8002fb4:	20000780 	.word	0x20000780
 8002fb8:	200007c8 	.word	0x200007c8
 8002fbc:	20000738 	.word	0x20000738
 8002fc0:	20000810 	.word	0x20000810
 8002fc4:	20000bd8 	.word	0x20000bd8
 8002fc8:	0800fc98 	.word	0x0800fc98
 8002fcc:	200005f4 	.word	0x200005f4
 8002fd0:	20000aa4 	.word	0x20000aa4
 8002fd4:	20000a68 	.word	0x20000a68
 8002fd8:	40020000 	.word	0x40020000
 8002fdc:	20000a80 	.word	0x20000a80
 8002fe0:	20000a2c 	.word	0x20000a2c
 8002fe4:	40020400 	.word	0x40020400
 8002fe8:	20000a44 	.word	0x20000a44
 8002fec:	200005ac 	.word	0x200005ac
 8002ff0:	20000ae8 	.word	0x20000ae8
 8002ff4:	20000b94 	.word	0x20000b94

08002ff8 <Robot_read_serial_msg>:

void Robot_read_serial_msg(robot_t *robot, char *msg) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	@ 0x30
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
    static float last_base_angle_stick_val = 0.0f;
    float js_x = 0.0f, js_y = 0.0f;
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	623b      	str	r3, [r7, #32]
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
    uint8_t base_angle_config = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	76fb      	strb	r3, [r7, #27]

    // Pulizia del buffer: rimuove eventuali spazi/residui
    char clean_msg[14] = {0}; // 13 caratteri + \0
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	819a      	strh	r2, [r3, #12]
    strncpy(clean_msg, msg, 13);
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	220d      	movs	r2, #13
 8003026:	6839      	ldr	r1, [r7, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f009 fb0f 	bl	800c64c <strncpy>
    clean_msg[14] = '\0';
 800302e:	2300      	movs	r3, #0
 8003030:	76bb      	strb	r3, [r7, #26]

    // Parsing robusto con sscanf
    int parsed = sscanf(clean_msg, "%f;%f;%hhu", &js_x, &js_y, &base_angle_config);
 8003032:	f107 011c 	add.w	r1, r7, #28
 8003036:	f107 0220 	add.w	r2, r7, #32
 800303a:	f107 000c 	add.w	r0, r7, #12
 800303e:	f107 031b 	add.w	r3, r7, #27
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	460b      	mov	r3, r1
 8003046:	493d      	ldr	r1, [pc, #244]	@ (800313c <Robot_read_serial_msg+0x144>)
 8003048:	f008 fb2c 	bl	800b6a4 <siscanf>
 800304c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (parsed != 3) {
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	2b03      	cmp	r3, #3
 8003052:	d16f      	bne.n	8003134 <Robot_read_serial_msg+0x13c>
        // Pacchetto incompleto o malformato, esci
        return;
    }

    // Gestione base angle mode
    if (base_angle_config != robot->base_angle_config) {
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7f1a      	ldrb	r2, [r3, #28]
 8003058:	7efb      	ldrb	r3, [r7, #27]
 800305a:	429a      	cmp	r2, r3
 800305c:	d008      	beq.n	8003070 <Robot_read_serial_msg+0x78>
        last_base_angle_stick_val = 0.0f;
 800305e:	4b38      	ldr	r3, [pc, #224]	@ (8003140 <Robot_read_serial_msg+0x148>)
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
        robot->pid->speed_sp = 0.0f; // Reset speed setpoint when changing mode
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    robot->base_angle_config = base_angle_config;
 8003070:	7efa      	ldrb	r2, [r7, #27]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	771a      	strb	r2, [r3, #28]

    if (base_angle_config == 1) {
 8003076:	7efb      	ldrb	r3, [r7, #27]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d150      	bne.n	800311e <Robot_read_serial_msg+0x126>
        if (fabs(js_y) > last_base_angle_stick_val) {
 800307c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003080:	eeb0 7ae7 	vabs.f32	s14, s15
 8003084:	4b2e      	ldr	r3, [pc, #184]	@ (8003140 <Robot_read_serial_msg+0x148>)
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800308e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003092:	dd3c      	ble.n	800310e <Robot_read_serial_msg+0x116>
            robot->pid->base_angle_sp += js_y * 0.1f; // Map joystick Y to base angle setpoint
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	ed93 7a03 	vldr	s14, [r3, #12]
 800309c:	edd7 7a07 	vldr	s15, [r7, #28]
 80030a0:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8003144 <Robot_read_serial_msg+0x14c>
 80030a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030b0:	edc3 7a03 	vstr	s15, [r3, #12]
            if (robot->pid->base_angle_sp > robot->pid->max_angle_offset)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	ed93 7a03 	vldr	s14, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80030c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030cc:	dd06      	ble.n	80030dc <Robot_read_serial_msg+0xe4>
                robot->pid->base_angle_sp = robot->pid->max_angle_offset;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	e018      	b.n	800310e <Robot_read_serial_msg+0x116>
            else if (robot->pid->base_angle_sp < -robot->pid->max_angle_offset)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80030ec:	eef1 7a67 	vneg.f32	s15, s15
 80030f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f8:	d509      	bpl.n	800310e <Robot_read_serial_msg+0x116>
                robot->pid->base_angle_sp = -robot->pid->max_angle_offset;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	eef1 7a67 	vneg.f32	s15, s15
 800310a:	edc3 7a03 	vstr	s15, [r3, #12]
        }
        last_base_angle_stick_val = fabs(js_y);
 800310e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003112:	eef0 7ae7 	vabs.f32	s15, s15
 8003116:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <Robot_read_serial_msg+0x148>)
 8003118:	edc3 7a00 	vstr	s15, [r3]
 800311c:	e00b      	b.n	8003136 <Robot_read_serial_msg+0x13e>
    } else {
        robot->pid->speed_sp = js_y * 3.14f; // Map joystick Y to speed setpoint
 800311e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003148 <Robot_read_serial_msg+0x150>
 800312a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800312e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8003132:	e000      	b.n	8003136 <Robot_read_serial_msg+0x13e>
        return;
 8003134:	bf00      	nop
    }
}
 8003136:	3728      	adds	r7, #40	@ 0x28
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	0800fc9c 	.word	0x0800fc9c
 8003140:	20000bd0 	.word	0x20000bd0
 8003144:	3dcccccd 	.word	0x3dcccccd
 8003148:	4048f5c3 	.word	0x4048f5c3

0800314c <PID_Init>:


void PID_Init(pid_t *pid){
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	pid->Kp = -2.0f;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 800315a:	601a      	str	r2, [r3, #0]
	pid->Ki = -20.0f;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a15      	ldr	r2, [pc, #84]	@ (80031b4 <PID_Init+0x68>)
 8003160:	605a      	str	r2, [r3, #4]
	pid->Kd = -0.06f;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a14      	ldr	r2, [pc, #80]	@ (80031b8 <PID_Init+0x6c>)
 8003166:	609a      	str	r2, [r3, #8]

	pid->base_angle_sp = 0.0f;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	60da      	str	r2, [r3, #12]

    pid->Kp_speed = 0.4f;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a12      	ldr	r2, [pc, #72]	@ (80031bc <PID_Init+0x70>)
 8003174:	619a      	str	r2, [r3, #24]
    pid->Ki_speed = 0.0f;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	61da      	str	r2, [r3, #28]
    pid->Kd_speed = 0.0008f;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a0f      	ldr	r2, [pc, #60]	@ (80031c0 <PID_Init+0x74>)
 8003182:	621a      	str	r2, [r3, #32]

    pid->speed_sp = 0.0f; // Do not change, change via joystick
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24

    pid->max_angle_offset = 2.0f;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003192:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->angle_sp = 0.0f; // Do not change, it is only for CubeMonitor
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	635a      	str	r2, [r3, #52]	@ 0x34

    pid->active = 0;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    PID_Reset(pid);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f907 	bl	80033b8 <PID_Reset>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	c1a00000 	.word	0xc1a00000
 80031b8:	bd75c28f 	.word	0xbd75c28f
 80031bc:	3ecccccd 	.word	0x3ecccccd
 80031c0:	3a51b717 	.word	0x3a51b717

080031c4 <PID_Update>:

void PID_Update(pid_t *pid) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
    float speed_err = pid->speed_sp - (encoder_r.speed + encoder_l.speed)/2.0f;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80031d2:	4b72      	ldr	r3, [pc, #456]	@ (800339c <PID_Update+0x1d8>)
 80031d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80031d8:	4b71      	ldr	r3, [pc, #452]	@ (80033a0 <PID_Update+0x1dc>)
 80031da:	edd3 7a02 	vldr	s15, [r3, #8]
 80031de:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80031e2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80031e6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ee:	edc7 7a06 	vstr	s15, [r7, #24]

    pid->integral_speed_err += speed_err * SAMPLING_PERIOD;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80031f8:	4b6a      	ldr	r3, [pc, #424]	@ (80033a4 <PID_Update+0x1e0>)
 80031fa:	edd3 6a00 	vldr	s13, [r3]
 80031fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    float derivative_speed_err = (speed_err - pid->last_speed_err)/SAMPLING_PERIOD;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003216:	ed97 7a06 	vldr	s14, [r7, #24]
 800321a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800321e:	4b61      	ldr	r3, [pc, #388]	@ (80033a4 <PID_Update+0x1e0>)
 8003220:	ed93 7a00 	vldr	s14, [r3]
 8003224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003228:	edc7 7a05 	vstr	s15, [r7, #20]

    float angle_offset = pid->Kp_speed * speed_err + pid->Ki_speed * pid->integral_speed_err + pid->Kd_speed * derivative_speed_err;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003232:	edd7 7a06 	vldr	s15, [r7, #24]
 8003236:	ee27 7a27 	vmul.f32	s14, s14, s15
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	edd3 6a07 	vldr	s13, [r3, #28]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800324a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	edd3 6a08 	vldr	s13, [r3, #32]
 8003254:	edd7 7a05 	vldr	s15, [r7, #20]
 8003258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800325c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003260:	edc7 7a07 	vstr	s15, [r7, #28]

    if (angle_offset > pid->max_angle_offset) angle_offset = pid->max_angle_offset;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800326a:	ed97 7a07 	vldr	s14, [r7, #28]
 800326e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	dd03      	ble.n	8003280 <PID_Update+0xbc>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	e012      	b.n	80032a6 <PID_Update+0xe2>
    else if (angle_offset < -pid->max_angle_offset) angle_offset = -pid->max_angle_offset;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003286:	eef1 7a67 	vneg.f32	s15, s15
 800328a:	ed97 7a07 	vldr	s14, [r7, #28]
 800328e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003296:	d506      	bpl.n	80032a6 <PID_Update+0xe2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800329e:	eef1 7a67 	vneg.f32	s15, s15
 80032a2:	edc7 7a07 	vstr	s15, [r7, #28]

    pid->angle_sp = pid->base_angle_sp + angle_offset;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80032ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80032b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	float error = pid->angle_sp - imu.angle;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80032c0:	4b39      	ldr	r3, [pc, #228]	@ (80033a8 <PID_Update+0x1e4>)
 80032c2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80032c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ca:	edc7 7a04 	vstr	s15, [r7, #16]

	pid->integral_error += error * SAMPLING_PERIOD;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80032d4:	4b33      	ldr	r3, [pc, #204]	@ (80033a4 <PID_Update+0x1e0>)
 80032d6:	edd3 6a00 	vldr	s13, [r3]
 80032da:	edd7 7a04 	vldr	s15, [r7, #16]
 80032de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	edc3 7a04 	vstr	s15, [r3, #16]
	float derivative_error = (error - pid->last_error)/SAMPLING_PERIOD;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80032f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80032f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80032fa:	4b2a      	ldr	r3, [pc, #168]	@ (80033a4 <PID_Update+0x1e0>)
 80032fc:	ed93 7a00 	vldr	s14, [r3]
 8003300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003304:	edc7 7a03 	vstr	s15, [r7, #12]

	float speed_setpoint = pid->Kp * error + 
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	ed93 7a00 	vldr	s14, [r3]
 800330e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003312:	ee27 7a27 	vmul.f32	s14, s14, s15
                            pid->Ki * pid->integral_error +
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	edd3 6a01 	vldr	s13, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003322:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_setpoint = pid->Kp * error + 
 8003326:	ee37 7a27 	vadd.f32	s14, s14, s15
                            pid->Kd * derivative_error;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003330:	edd7 7a03 	vldr	s15, [r7, #12]
 8003334:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_setpoint = pid->Kp * error + 
 8003338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800333c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (fabs(error) > 30.0f) {
 8003340:	edd7 7a04 	vldr	s15, [r7, #16]
 8003344:	eef0 7ae7 	vabs.f32	s15, s15
 8003348:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800334c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	dd0d      	ble.n	8003372 <PID_Update+0x1ae>
        set_speed(&stepper_l, 0.0f);
 8003356:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80033ac <PID_Update+0x1e8>
 800335a:	4815      	ldr	r0, [pc, #84]	@ (80033b0 <PID_Update+0x1ec>)
 800335c:	f000 f93a 	bl	80035d4 <set_speed>
        set_speed(&stepper_r, 0.0f);
 8003360:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80033ac <PID_Update+0x1e8>
 8003364:	4813      	ldr	r0, [pc, #76]	@ (80033b4 <PID_Update+0x1f0>)
 8003366:	f000 f935 	bl	80035d4 <set_speed>
        PID_Reset(pid);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f824 	bl	80033b8 <PID_Reset>
 8003370:	e009      	b.n	8003386 <PID_Update+0x1c2>
    }else {
        set_speed(&stepper_l, speed_setpoint);
 8003372:	ed97 0a02 	vldr	s0, [r7, #8]
 8003376:	480e      	ldr	r0, [pc, #56]	@ (80033b0 <PID_Update+0x1ec>)
 8003378:	f000 f92c 	bl	80035d4 <set_speed>
        set_speed(&stepper_r, speed_setpoint);
 800337c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003380:	480c      	ldr	r0, [pc, #48]	@ (80033b4 <PID_Update+0x1f0>)
 8003382:	f000 f927 	bl	80035d4 <set_speed>
    }

    pid->last_speed_err = speed_err;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->last_error = error;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	615a      	str	r2, [r3, #20]
}
 8003392:	bf00      	nop
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000a2c 	.word	0x20000a2c
 80033a0:	20000a68 	.word	0x20000a68
 80033a4:	20000a24 	.word	0x20000a24
 80033a8:	20000aa4 	.word	0x20000aa4
 80033ac:	00000000 	.word	0x00000000
 80033b0:	20000a80 	.word	0x20000a80
 80033b4:	20000a44 	.word	0x20000a44

080033b8 <PID_Reset>:

void PID_Reset(pid_t *pid) {
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
    pid->integral_error = 0.0f;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	611a      	str	r2, [r3, #16]
    pid->integral_speed_err = 0.0f;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->last_error = 0.0f;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	615a      	str	r2, [r3, #20]
    pid->last_speed_err = 0.0f;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <speed_control>:
#define AEP 30 // Actual Error Proportional gain
#define LEP 205 // Last Error Proportional gain

float freq = 0.0f; // Frequency in Hz

void speed_control(stepper_t *stepper){
 80033ec:	b5b0      	push	{r4, r5, r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	Encoder_read(stepper->encoder);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff f9b3 	bl	8002764 <Encoder_read>

	float e = stepper->setpoint_speed - stepper->encoder->speed;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	ed93 7a02 	vldr	s14, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	edd3 7a02 	vldr	s15, [r3, #8]
 800340c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003410:	edc7 7a03 	vstr	s15, [r7, #12]

	// stepper->frequency += e / ANGLE_STEP; // Integral only controller

	stepper->frequency += e * AEP + stepper->last_error * LEP; // PI controller
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	ed93 7a03 	vldr	s14, [r3, #12]
 800341a:	edd7 7a03 	vldr	s15, [r7, #12]
 800341e:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8003422:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	edd3 7a00 	vldr	s15, [r3]
 800342c:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 80035c0 <speed_control+0x1d4>
 8003430:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	edc3 7a03 	vstr	s15, [r3, #12]
	stepper->last_error = e;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	601a      	str	r2, [r3, #0]

	uint8_t sign = stepper->frequency > 0;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	edd3 7a03 	vldr	s15, [r3, #12]
 800344e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003456:	bfcc      	ite	gt
 8003458:	2301      	movgt	r3, #1
 800345a:	2300      	movle	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	72fb      	strb	r3, [r7, #11]

	freq = stepper->frequency; // Store frequency for debugging
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a57      	ldr	r2, [pc, #348]	@ (80035c4 <speed_control+0x1d8>)
 8003466:	6013      	str	r3, [r2, #0]

	if (fabs(stepper->frequency) > MAX_CTRL_FREQUENCY) {
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	edd3 7a03 	vldr	s15, [r3, #12]
 800346e:	eef0 7ae7 	vabs.f32	s15, s15
 8003472:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80035c8 <speed_control+0x1dc>
 8003476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	dd3c      	ble.n	80034fa <speed_control+0x10e>
		stepper->frequency = MAX_CTRL_FREQUENCY * (sign?1:-1); // Limit frequency to 9000 Hz
 8003480:	7afb      	ldrb	r3, [r7, #11]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <speed_control+0xa0>
 8003486:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800348a:	e001      	b.n	8003490 <speed_control+0xa4>
 800348c:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8003490:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80035c8 <speed_control+0x1dc>
 8003494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	edc3 7a03 	vstr	s15, [r3, #12]
		stepper->last_error = (sign && stepper->last_error>0) || (!sign && stepper->last_error<0) ? 0 : stepper->last_error; // Reset last error if the direction has changed
 800349e:	7afb      	ldrb	r3, [r7, #11]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00f      	beq.n	80034c4 <speed_control+0xd8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	edd3 7a00 	vldr	s15, [r3]
 80034aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b2:	bfcc      	ite	gt
 80034b4:	2301      	movgt	r3, #1
 80034b6:	2300      	movle	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f083 0301 	eor.w	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d015      	beq.n	80034f0 <speed_control+0x104>
 80034c4:	7afb      	ldrb	r3, [r7, #11]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <speed_control+0xfe>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	edd3 7a00 	vldr	s15, [r3]
 80034d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d8:	bf4c      	ite	mi
 80034da:	2301      	movmi	r3, #1
 80034dc:	2300      	movpl	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f083 0301 	eor.w	r3, r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <speed_control+0x104>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	e001      	b.n	80034f4 <speed_control+0x108>
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	e00f      	b.n	800351a <speed_control+0x12e>
	} else if (fabs(stepper->frequency) < 20) {
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8003500:	eef0 7ae7 	vabs.f32	s15, s15
 8003504:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003510:	d503      	bpl.n	800351a <speed_control+0x12e>
		stepper->frequency = 0; // Stop the motor if frequency is too low
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	60da      	str	r2, [r3, #12]
	}

	HAL_GPIO_WritePin(stepper->DIR_PORT, stepper->DIR_PIN, (stepper->encoder->direction_invert > 0 ? sign : !sign));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69d8      	ldr	r0, [r3, #28]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	8c19      	ldrh	r1, [r3, #32]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	dc06      	bgt.n	800353c <speed_control+0x150>
 800352e:	7afb      	ldrb	r3, [r7, #11]
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e000      	b.n	800353e <speed_control+0x152>
 800353c:	7afb      	ldrb	r3, [r7, #11]
 800353e:	461a      	mov	r2, r3
 8003540:	f002 fd08 	bl	8005f54 <HAL_GPIO_WritePin>

	stepper->tim->ARR = fabs(1/stepper->frequency)*HCLK-1; // period = (1+ARR)*(1+PSC)/HCLK;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	ed93 7a03 	vldr	s14, [r3, #12]
 800354a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800354e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003552:	eef0 7ae7 	vabs.f32	s15, s15
 8003556:	ee17 0a90 	vmov	r0, s15
 800355a:	f7fd f825 	bl	80005a8 <__aeabi_f2d>
 800355e:	4604      	mov	r4, r0
 8003560:	460d      	mov	r5, r1
 8003562:	4b1a      	ldr	r3, [pc, #104]	@ (80035cc <speed_control+0x1e0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fc fffc 	bl	8000564 <__aeabi_ui2d>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4620      	mov	r0, r4
 8003572:	4629      	mov	r1, r5
 8003574:	f7fd f870 	bl	8000658 <__aeabi_dmul>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	4b12      	ldr	r3, [pc, #72]	@ (80035d0 <speed_control+0x1e4>)
 8003586:	f7fc feaf 	bl	80002e8 <__aeabi_dsub>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4610      	mov	r0, r2
 8003590:	4619      	mov	r1, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695c      	ldr	r4, [r3, #20]
 8003596:	f7fd fb37 	bl	8000c08 <__aeabi_d2uiz>
 800359a:	4603      	mov	r3, r0
 800359c:	62e3      	str	r3, [r4, #44]	@ 0x2c
	*stepper->CCR = (stepper->tim->ARR+1)/2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	0852      	lsrs	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
	stepper->tim->EGR = TIM_EGR_UG;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	2201      	movs	r2, #1
 80035b4:	615a      	str	r2, [r3, #20]
}
 80035b6:	bf00      	nop
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bdb0      	pop	{r4, r5, r7, pc}
 80035be:	bf00      	nop
 80035c0:	434d0000 	.word	0x434d0000
 80035c4:	20000bd4 	.word	0x20000bd4
 80035c8:	460ca000 	.word	0x460ca000
 80035cc:	20000a28 	.word	0x20000a28
 80035d0:	3ff00000 	.word	0x3ff00000

080035d4 <set_speed>:

void set_speed(stepper_t *stepper, float speed){
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	ed87 0a00 	vstr	s0, [r7]
	stepper->setpoint_speed = speed;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	609a      	str	r2, [r3, #8]
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <Stepper_init>:

void Stepper_init(stepper_t *stepper, TIM_HandleTypeDef *htim, uint32_t tim_channel,
		encoder_t *encoder, GPIO_TypeDef *DIR_PORT, uint16_t DIR_PIN){
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
	stepper->angle_step = ANGLE_STEP;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a34      	ldr	r2, [pc, #208]	@ (80036d8 <Stepper_init+0xe4>)
 8003606:	605a      	str	r2, [r3, #4]
	stepper->tim = htim->Instance;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	615a      	str	r2, [r3, #20]
	stepper->DIR_PORT = DIR_PORT;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	61da      	str	r2, [r3, #28]
	stepper->DIR_PIN = DIR_PIN;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8bba      	ldrh	r2, [r7, #28]
 800361a:	841a      	strh	r2, [r3, #32]
	switch (tim_channel){
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d838      	bhi.n	8003694 <Stepper_init+0xa0>
 8003622:	a201      	add	r2, pc, #4	@ (adr r2, 8003628 <Stepper_init+0x34>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	0800365d 	.word	0x0800365d
 800362c:	08003695 	.word	0x08003695
 8003630:	08003695 	.word	0x08003695
 8003634:	08003695 	.word	0x08003695
 8003638:	0800366b 	.word	0x0800366b
 800363c:	08003695 	.word	0x08003695
 8003640:	08003695 	.word	0x08003695
 8003644:	08003695 	.word	0x08003695
 8003648:	08003679 	.word	0x08003679
 800364c:	08003695 	.word	0x08003695
 8003650:	08003695 	.word	0x08003695
 8003654:	08003695 	.word	0x08003695
 8003658:	08003687 	.word	0x08003687
	case TIM_CHANNEL_1:
		stepper->CCR = &stepper->tim->CCR1;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	619a      	str	r2, [r3, #24]
		break;
 8003668:	e018      	b.n	800369c <Stepper_init+0xa8>
	case TIM_CHANNEL_2:
		stepper->CCR = &stepper->tim->CCR2;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	619a      	str	r2, [r3, #24]
		break;
 8003676:	e011      	b.n	800369c <Stepper_init+0xa8>
	case TIM_CHANNEL_3:
		stepper->CCR = &stepper->tim->CCR3;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	619a      	str	r2, [r3, #24]
		break;
 8003684:	e00a      	b.n	800369c <Stepper_init+0xa8>
	case TIM_CHANNEL_4:
		stepper->CCR = &stepper->tim->CCR4;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	619a      	str	r2, [r3, #24]
		break;
 8003692:	e003      	b.n	800369c <Stepper_init+0xa8>
	default:
		stepper->CCR = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	619a      	str	r2, [r3, #24]
		break;
 800369a:	bf00      	nop
	}

	if (stepper->CCR != NULL)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <Stepper_init+0xb8>
		*stepper->CCR = 0; // Disattiva il PWM (duty cycle 0)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

	stepper->encoder = encoder;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	611a      	str	r2, [r3, #16]
	stepper->setpoint_speed = 0;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	609a      	str	r2, [r3, #8]
	stepper->frequency = 0;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
	stepper->last_error = 0;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	3a80adff 	.word	0x3a80adff

080036dc <MAX72_init>:
    {0x0C, 0x01}, // Shutdown Register: normal operation
    {0x0F, 0x00}  // Display Test: off
};

void MAX72_init(display_t *display)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[8];
    for (uint8_t cmd=0; cmd<5; cmd++) {
 80036e4:	2300      	movs	r3, #0
 80036e6:	75fb      	strb	r3, [r7, #23]
 80036e8:	e035      	b.n	8003756 <MAX72_init+0x7a>
        // riempi txBuf con 4 volte InitCommands[cmd]
        for (uint8_t dev=0; dev<4; dev++) {
 80036ea:	2300      	movs	r3, #0
 80036ec:	75bb      	strb	r3, [r7, #22]
 80036ee:	e01a      	b.n	8003726 <MAX72_init+0x4a>
            txBuf[dev*2]   = InitCommands[cmd][0];
 80036f0:	7dfa      	ldrb	r2, [r7, #23]
 80036f2:	7dbb      	ldrb	r3, [r7, #22]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4929      	ldr	r1, [pc, #164]	@ (800379c <MAX72_init+0xc0>)
 80036f8:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 80036fc:	3318      	adds	r3, #24
 80036fe:	443b      	add	r3, r7
 8003700:	f803 2c0c 	strb.w	r2, [r3, #-12]
            txBuf[dev*2+1] = InitCommands[cmd][1];
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	7dba      	ldrb	r2, [r7, #22]
 8003708:	0052      	lsls	r2, r2, #1
 800370a:	3201      	adds	r2, #1
 800370c:	4923      	ldr	r1, [pc, #140]	@ (800379c <MAX72_init+0xc0>)
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	440b      	add	r3, r1
 8003712:	7859      	ldrb	r1, [r3, #1]
 8003714:	f102 0318 	add.w	r3, r2, #24
 8003718:	443b      	add	r3, r7
 800371a:	460a      	mov	r2, r1
 800371c:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (uint8_t dev=0; dev<4; dev++) {
 8003720:	7dbb      	ldrb	r3, [r7, #22]
 8003722:	3301      	adds	r3, #1
 8003724:	75bb      	strb	r3, [r7, #22]
 8003726:	7dbb      	ldrb	r3, [r7, #22]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d9e1      	bls.n	80036f0 <MAX72_init+0x14>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // CS
 800372c:	2200      	movs	r2, #0
 800372e:	2110      	movs	r1, #16
 8003730:	481b      	ldr	r0, [pc, #108]	@ (80037a0 <MAX72_init+0xc4>)
 8003732:	f002 fc0f 	bl	8005f54 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8003736:	f107 010c 	add.w	r1, r7, #12
 800373a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800373e:	2208      	movs	r2, #8
 8003740:	4818      	ldr	r0, [pc, #96]	@ (80037a4 <MAX72_init+0xc8>)
 8003742:	f004 fdbc 	bl	80082be <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // CS
 8003746:	2201      	movs	r2, #1
 8003748:	2110      	movs	r1, #16
 800374a:	4815      	ldr	r0, [pc, #84]	@ (80037a0 <MAX72_init+0xc4>)
 800374c:	f002 fc02 	bl	8005f54 <HAL_GPIO_WritePin>
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	3301      	adds	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d9c6      	bls.n	80036ea <MAX72_init+0xe>
    }

    display->data_count = 0; // Inizializza il numero di dati a 0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    display->current_index = 0; // Inizializza l'indice corrente a 0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    display->data_duration = 5; // Imposta la durata di visualizzazione a 5 secondi
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2205      	movs	r2, #5
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    display->change_enabled = 1; // Abilita il cambio automatico dei dati
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    display->update_enabled = 1; // Abilita l'aggiornamento automatico dei dati
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    display->last_change_time = HAL_GetTick(); // Inizializza il tempo dell'ultimo cambio a ora corrente
 8003784:	f001 f8da 	bl	800493c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	649a      	str	r2, [r3, #72]	@ 0x48
    MAX72_Clear(); // Pulisce il display all'inizio
 800378e:	f000 f847 	bl	8003820 <MAX72_Clear>
}
 8003792:	bf00      	nop
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	0800fd04 	.word	0x0800fd04
 80037a0:	40020400 	.word	0x40020400
 80037a4:	200006dc 	.word	0x200006dc

080037a8 <MAX72_SendRow>:

void MAX72_SendRow(uint8_t row, uint8_t pattern[DEV_NUM])
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[8];
    // pattern[i] = dato per il modulo i
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 80037b4:	2300      	movs	r3, #0
 80037b6:	75fb      	strb	r3, [r7, #23]
 80037b8:	e014      	b.n	80037e4 <MAX72_SendRow+0x3c>
        txBuf[dev*2]   = row;          // registro DIG[row]
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	3318      	adds	r3, #24
 80037c0:	443b      	add	r3, r7
 80037c2:	79fa      	ldrb	r2, [r7, #7]
 80037c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
        txBuf[dev*2+1] = pattern[dev]; // i‑esimo byte di dati
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	441a      	add	r2, r3
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	3301      	adds	r3, #1
 80037d4:	7812      	ldrb	r2, [r2, #0]
 80037d6:	3318      	adds	r3, #24
 80037d8:	443b      	add	r3, r7
 80037da:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	3301      	adds	r3, #1
 80037e2:	75fb      	strb	r3, [r7, #23]
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d9e7      	bls.n	80037ba <MAX72_SendRow+0x12>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80037ea:	2200      	movs	r2, #0
 80037ec:	2110      	movs	r1, #16
 80037ee:	480a      	ldr	r0, [pc, #40]	@ (8003818 <MAX72_SendRow+0x70>)
 80037f0:	f002 fbb0 	bl	8005f54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 80037f4:	f107 010c 	add.w	r1, r7, #12
 80037f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037fc:	2208      	movs	r2, #8
 80037fe:	4807      	ldr	r0, [pc, #28]	@ (800381c <MAX72_SendRow+0x74>)
 8003800:	f004 fd5d 	bl	80082be <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003804:	2201      	movs	r2, #1
 8003806:	2110      	movs	r1, #16
 8003808:	4803      	ldr	r0, [pc, #12]	@ (8003818 <MAX72_SendRow+0x70>)
 800380a:	f002 fba3 	bl	8005f54 <HAL_GPIO_WritePin>
}
 800380e:	bf00      	nop
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40020400 	.word	0x40020400
 800381c:	200006dc 	.word	0x200006dc

08003820 <MAX72_Clear>:

void MAX72_Clear(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
	uint8_t emptyPattern[4] = {0, 0, 0, 0};
 8003826:	2300      	movs	r3, #0
 8003828:	603b      	str	r3, [r7, #0]
	    for (uint8_t row=1; row<=8; row++) {
 800382a:	2301      	movs	r3, #1
 800382c:	71fb      	strb	r3, [r7, #7]
 800382e:	e008      	b.n	8003842 <MAX72_Clear+0x22>
	        MAX72_SendRow(row, emptyPattern);
 8003830:	463a      	mov	r2, r7
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff ffb6 	bl	80037a8 <MAX72_SendRow>
	    for (uint8_t row=1; row<=8; row++) {
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	3301      	adds	r3, #1
 8003840:	71fb      	strb	r3, [r7, #7]
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d9f3      	bls.n	8003830 <MAX72_Clear+0x10>
	    }
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <MAX72_Add_Data>:

void MAX72_Add_Data(display_t *display, display_data_t *data) {
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
	if (display->data_count < MAX_DATA_LENGTH) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003862:	2b07      	cmp	r3, #7
 8003864:	d813      	bhi.n	800388e <MAX72_Add_Data+0x3c>
		display->data[display->data_count] = *data; // Aggiungi i dati al display
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6839      	ldr	r1, [r7, #0]
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	460a      	mov	r2, r1
 8003876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800387a:	e883 0003 	stmia.w	r3, {r0, r1}
		display->data_count++; // Incrementa il conteggio dei dati
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003884:	3301      	adds	r3, #1
 8003886:	b2da      	uxtb	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}

	if (display->data_count == 1) {
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003894:	2b01      	cmp	r3, #1
 8003896:	d103      	bne.n	80038a0 <MAX72_Add_Data+0x4e>
		MAX72_Change_Data(display,1); // Se è il primo dato, aggiorna subito il display
 8003898:	2101      	movs	r1, #1
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f904 	bl	8003aa8 <MAX72_Change_Data>
	}
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <MAX72_Update_Data>:
			break; // Esci dal ciclo dopo aver rimosso il dato
		}
	}
}

void MAX72_Update_Data(display_t *display) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	if (display->data_count == 0 || !display->update_enabled) {
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 80e8 	beq.w	8003a8c <MAX72_Update_Data+0x1e4>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80e2 	beq.w	8003a8c <MAX72_Update_Data+0x1e4>
		return; // Non ci sono dati da visualizzare
	}

	display_data_t *current_data = &display->data[display->current_index];
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4413      	add	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

	switch (current_data->settings) {
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	791b      	ldrb	r3, [r3, #4]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	f200 80df 	bhi.w	8003a9e <MAX72_Update_Data+0x1f6>
 80038e0:	a201      	add	r2, pc, #4	@ (adr r2, 80038e8 <MAX72_Update_Data+0x40>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	08003a15 	.word	0x08003a15
 80038f0:	08003a45 	.word	0x08003a45
 80038f4:	08003a5f 	.word	0x08003a5f
		case PRINT_INT:
			switch(current_data->type) {
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	799b      	ldrb	r3, [r3, #6]
 80038fc:	2b09      	cmp	r3, #9
 80038fe:	f200 80c7 	bhi.w	8003a90 <MAX72_Update_Data+0x1e8>
 8003902:	a201      	add	r2, pc, #4	@ (adr r2, 8003908 <MAX72_Update_Data+0x60>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	08003931 	.word	0x08003931
 800390c:	08003945 	.word	0x08003945
 8003910:	0800395b 	.word	0x0800395b
 8003914:	08003971 	.word	0x08003971
 8003918:	08003987 	.word	0x08003987
 800391c:	0800399d 	.word	0x0800399d
 8003920:	080039b5 	.word	0x080039b5
 8003924:	080039cd 	.word	0x080039cd
 8003928:	080039e1 	.word	0x080039e1
 800392c:	080039f7 	.word	0x080039f7
				case DISPLAY_TYPE_INT:
					MAX72_Print_Int(*(int *)current_data->data, current_data->string_settings);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	795b      	ldrb	r3, [r3, #5]
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f000 fb9d 	bl	800407c <MAX72_Print_Int>
					break;
 8003942:	e066      	b.n	8003a12 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT8:
					MAX72_Print_Int((int)*(uint8_t *)current_data->data, current_data->string_settings);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	795b      	ldrb	r3, [r3, #5]
 8003950:	4619      	mov	r1, r3
 8003952:	4610      	mov	r0, r2
 8003954:	f000 fb92 	bl	800407c <MAX72_Print_Int>
					break;
 8003958:	e05b      	b.n	8003a12 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT16:
					MAX72_Print_Int((int)*(uint16_t *)current_data->data, current_data->string_settings);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	795b      	ldrb	r3, [r3, #5]
 8003966:	4619      	mov	r1, r3
 8003968:	4610      	mov	r0, r2
 800396a:	f000 fb87 	bl	800407c <MAX72_Print_Int>
					break;
 800396e:	e050      	b.n	8003a12 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT32:
					MAX72_Print_Int((int)*(uint32_t *)current_data->data, current_data->string_settings);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	795b      	ldrb	r3, [r3, #5]
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 fb7c 	bl	800407c <MAX72_Print_Int>
					break;
 8003984:	e045      	b.n	8003a12 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT64:
					MAX72_Print_Int((int)*(uint64_t *)current_data->data, current_data->string_settings);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	795b      	ldrb	r3, [r3, #5]
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f000 fb71 	bl	800407c <MAX72_Print_Int>
					break;
 800399a:	e03a      	b.n	8003a12 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT8:
					MAX72_Print_Int(*(int8_t *)current_data->data, current_data->string_settings);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f993 3000 	ldrsb.w	r3, [r3]
 80039a4:	461a      	mov	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	795b      	ldrb	r3, [r3, #5]
 80039aa:	4619      	mov	r1, r3
 80039ac:	4610      	mov	r0, r2
 80039ae:	f000 fb65 	bl	800407c <MAX72_Print_Int>
					break;
 80039b2:	e02e      	b.n	8003a12 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT16:
					MAX72_Print_Int(*(int16_t *)current_data->data, current_data->string_settings);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039bc:	461a      	mov	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	795b      	ldrb	r3, [r3, #5]
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f000 fb59 	bl	800407c <MAX72_Print_Int>
					break;
 80039ca:	e022      	b.n	8003a12 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT32:
					MAX72_Print_Int(*(int32_t *)current_data->data, current_data->string_settings);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	795b      	ldrb	r3, [r3, #5]
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f000 fb4f 	bl	800407c <MAX72_Print_Int>
					break;
 80039de:	e018      	b.n	8003a12 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT64:
					MAX72_Print_Int(*(int64_t *)current_data->data, current_data->string_settings);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	795b      	ldrb	r3, [r3, #5]
 80039ec:	4619      	mov	r1, r3
 80039ee:	4610      	mov	r0, r2
 80039f0:	f000 fb44 	bl	800407c <MAX72_Print_Int>
					break;
 80039f4:	e00d      	b.n	8003a12 <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_FLOAT:
					MAX72_Print_Int((int)*(float *)current_data->data, current_data->string_settings);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	edd3 7a00 	vldr	s15, [r3]
 80039fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	795b      	ldrb	r3, [r3, #5]
 8003a06:	4619      	mov	r1, r3
 8003a08:	ee17 0a90 	vmov	r0, s15
 8003a0c:	f000 fb36 	bl	800407c <MAX72_Print_Int>
					break;
 8003a10:	bf00      	nop
			}
			break;
 8003a12:	e03d      	b.n	8003a90 <MAX72_Update_Data+0x1e8>
		case PRINT_FLOAT:
			if (current_data->type == DISPLAY_TYPE_FLOAT) {
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	799b      	ldrb	r3, [r3, #6]
 8003a18:	2b09      	cmp	r3, #9
 8003a1a:	d13b      	bne.n	8003a94 <MAX72_Update_Data+0x1ec>
				MAX72_Print_Float(*(float *)current_data->data, current_data->float_decimals, current_data->string_settings == 2);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	79da      	ldrb	r2, [r3, #7]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	795b      	ldrb	r3, [r3, #5]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3e:	f000 fb79 	bl	8004134 <MAX72_Print_Float>
			}
			break;
 8003a42:	e027      	b.n	8003a94 <MAX72_Update_Data+0x1ec>
		case PRINT_STRING:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	799b      	ldrb	r3, [r3, #6]
 8003a48:	2b0a      	cmp	r3, #10
 8003a4a:	d125      	bne.n	8003a98 <MAX72_Update_Data+0x1f0>
				MAX72_Print_String((const char *)current_data->data, current_data->string_settings);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	795b      	ldrb	r3, [r3, #5]
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f000 f890 	bl	8003b7c <MAX72_Print_String>
			}
			break;
 8003a5c:	e01c      	b.n	8003a98 <MAX72_Update_Data+0x1f0>
		case PRINT_SCROLL:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	799b      	ldrb	r3, [r3, #6]
 8003a62:	2b0a      	cmp	r3, #10
 8003a64:	d11a      	bne.n	8003a9c <MAX72_Update_Data+0x1f4>
				// update scroll_state.updated if text has changed
				if (strcmp(scroll_state.text, (const char *)current_data->data) != 0) {
 8003a66:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa4 <MAX72_Update_Data+0x1fc>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f7fc fbcd 	bl	8000210 <strcmp>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00f      	beq.n	8003a9c <MAX72_Update_Data+0x1f4>
					scroll_state.updated = 1; // Indica che il testo è stato aggiornato
 8003a7c:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <MAX72_Update_Data+0x1fc>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	739a      	strb	r2, [r3, #14]

					scroll_state.text = (const char *)current_data->data;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a07      	ldr	r2, [pc, #28]	@ (8003aa4 <MAX72_Update_Data+0x1fc>)
 8003a88:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 8003a8a:	e007      	b.n	8003a9c <MAX72_Update_Data+0x1f4>
		return; // Non ci sono dati da visualizzare
 8003a8c:	bf00      	nop
 8003a8e:	e006      	b.n	8003a9e <MAX72_Update_Data+0x1f6>
			break;
 8003a90:	bf00      	nop
 8003a92:	e004      	b.n	8003a9e <MAX72_Update_Data+0x1f6>
			break;
 8003a94:	bf00      	nop
 8003a96:	e002      	b.n	8003a9e <MAX72_Update_Data+0x1f6>
			break;
 8003a98:	bf00      	nop
 8003a9a:	e000      	b.n	8003a9e <MAX72_Update_Data+0x1f6>
			break;
 8003a9c:	bf00      	nop
	}
}
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20000c44 	.word	0x20000c44

08003aa8 <MAX72_Change_Data>:

void MAX72_Change_Data(display_t *display, uint8_t force_change) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	70fb      	strb	r3, [r7, #3]
	if (display->data_count == 0 || (!display->change_enabled && !force_change)) {
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d055      	beq.n	8003b6a <MAX72_Change_Data+0xc2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <MAX72_Change_Data+0x26>
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d04d      	beq.n	8003b6a <MAX72_Change_Data+0xc2>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
	}

	uint32_t currentTime = HAL_GetTick();
 8003ace:	f000 ff35 	bl	800493c <HAL_GetTick>
 8003ad2:	60f8      	str	r0, [r7, #12]
	if (!force_change && currentTime - display->last_change_time < (uint32_t)display->data_duration * 1000) {
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <MAX72_Change_Data+0x4e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	1ad2      	subs	r2, r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d33b      	bcc.n	8003b6e <MAX72_Change_Data+0xc6>
		return;
	}
	display->current_index = (display->current_index + 1) % display->data_count;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003afc:	3301      	adds	r3, #1
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8003b04:	fb93 f1f2 	sdiv	r1, r3, r2
 8003b08:	fb01 f202 	mul.w	r2, r1, r2
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	display->last_change_time = currentTime;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	649a      	str	r2, [r3, #72]	@ 0x48

	if (display->data[display->current_index].settings == PRINT_SCROLL) {
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4413      	add	r3, r2
 8003b28:	791b      	ldrb	r3, [r3, #4]
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d113      	bne.n	8003b56 <MAX72_Change_Data+0xae>
		if(!scroll_state.enabled || display->data_count > 1){
 8003b2e:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <MAX72_Change_Data+0xd0>)
 8003b30:	7b5b      	ldrb	r3, [r3, #13]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <MAX72_Change_Data+0x98>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d910      	bls.n	8003b62 <MAX72_Change_Data+0xba>
		MAX72_Scroll_Start_IT((const char *)display->data[display->current_index].data);}
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b46:	461a      	mov	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fc5e 	bl	8004410 <MAX72_Scroll_Start_IT>
 8003b54:	e005      	b.n	8003b62 <MAX72_Change_Data+0xba>
	} else if (scroll_state.enabled) {
 8003b56:	4b08      	ldr	r3, [pc, #32]	@ (8003b78 <MAX72_Change_Data+0xd0>)
 8003b58:	7b5b      	ldrb	r3, [r3, #13]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <MAX72_Change_Data+0xba>
		MAX72_Scroll_Stop();
 8003b5e:	f000 fcbd 	bl	80044dc <MAX72_Scroll_Stop>
	}

	MAX72_Update_Data(display); // Aggiorna i dati visualizzati)
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff fea0 	bl	80038a8 <MAX72_Update_Data>
 8003b68:	e002      	b.n	8003b70 <MAX72_Change_Data+0xc8>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
 8003b6a:	bf00      	nop
 8003b6c:	e000      	b.n	8003b70 <MAX72_Change_Data+0xc8>
		return;
 8003b6e:	bf00      	nop
}
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000c44 	.word	0x20000c44

08003b7c <MAX72_Print_String>:
//        HAL_Delay(500);
//    }
//}

void MAX72_Print_String(const char *str, uint8_t settings)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b094      	sub	sp, #80	@ 0x50
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	70fb      	strb	r3, [r7, #3]
    uint8_t len = strlen(str);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fc fba1 	bl	80002d0 <strlen>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    if (settings == MINIDIGITS) {
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	f040 8119 	bne.w	8003dce <MAX72_Print_String+0x252>
    	char padded[8] = {0};
 8003b9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
    	        // Calcola padding all'inizio (right align)
    	        uint8_t start = (len < 8) ? (8 - len) : 0;
 8003ba6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003baa:	2b07      	cmp	r3, #7
 8003bac:	d805      	bhi.n	8003bba <MAX72_Print_String+0x3e>
 8003bae:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003bb2:	f1c3 0308 	rsb	r3, r3, #8
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	e000      	b.n	8003bbc <MAX72_Print_String+0x40>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    	        // Spazi iniziali
    	        for (uint8_t i = 0; i < start; i++)
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8003bc6:	e00b      	b.n	8003be0 <MAX72_Print_String+0x64>
    	            padded[i] = ' ';
 8003bc8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003bcc:	3350      	adds	r3, #80	@ 0x50
 8003bce:	443b      	add	r3, r7
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < start; i++)
 8003bd6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8003be0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003be4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d3ed      	bcc.n	8003bc8 <MAX72_Print_String+0x4c>
    	        // Copia la stringa
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8003bec:	2300      	movs	r3, #0
 8003bee:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8003bf2:	e012      	b.n	8003c1a <MAX72_Print_String+0x9e>
    	            padded[start + i] = str[i];
 8003bf4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	441a      	add	r2, r3
 8003bfc:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8003c00:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003c04:	440b      	add	r3, r1
 8003c06:	7812      	ldrb	r2, [r2, #0]
 8003c08:	3350      	adds	r3, #80	@ 0x50
 8003c0a:	443b      	add	r3, r7
 8003c0c:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8003c10:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003c14:	3301      	adds	r3, #1
 8003c16:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8003c1a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003c1e:	2b07      	cmp	r3, #7
 8003c20:	d805      	bhi.n	8003c2e <MAX72_Print_String+0xb2>
 8003c22:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8003c26:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d3e2      	bcc.n	8003bf4 <MAX72_Print_String+0x78>

        char reversed[8];
        for (uint8_t i = 0; i < 8; i++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8003c34:	e012      	b.n	8003c5c <MAX72_Print_String+0xe0>
            reversed[i] = padded[7 - i];
 8003c36:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003c3a:	f1c3 0207 	rsb	r2, r3, #7
 8003c3e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003c42:	3250      	adds	r2, #80	@ 0x50
 8003c44:	443a      	add	r2, r7
 8003c46:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8003c4a:	3350      	adds	r3, #80	@ 0x50
 8003c4c:	443b      	add	r3, r7
 8003c4e:	f803 2c28 	strb.w	r2, [r3, #-40]
        for (uint8_t i = 0; i < 8; i++)
 8003c52:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003c56:	3301      	adds	r3, #1
 8003c58:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8003c5c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003c60:	2b07      	cmp	r3, #7
 8003c62:	d9e8      	bls.n	8003c36 <MAX72_Print_String+0xba>

        for (uint8_t row = 0; row < 8; row++) {
 8003c64:	2300      	movs	r3, #0
 8003c66:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8003c6a:	e0aa      	b.n	8003dc2 <MAX72_Print_String+0x246>
            uint8_t pat[4] = {0};
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24

            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8003c70:	2300      	movs	r3, #0
 8003c72:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8003c76:	e090      	b.n	8003d9a <MAX72_Print_String+0x21e>
                uint8_t c1 = reversed[byte_idx * 2];
 8003c78:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	3350      	adds	r3, #80	@ 0x50
 8003c80:	443b      	add	r3, r7
 8003c82:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c86:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t c2 = reversed[byte_idx * 2 + 1];
 8003c8a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	3301      	adds	r3, #1
 8003c92:	3350      	adds	r3, #80	@ 0x50
 8003c94:	443b      	add	r3, r7
 8003c96:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c9a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                uint8_t char1_pattern = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                uint8_t char2_pattern = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                if (c1 >= '0' && c1 <= '9')
 8003caa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003cae:	2b2f      	cmp	r3, #47	@ 0x2f
 8003cb0:	d913      	bls.n	8003cda <MAX72_Print_String+0x15e>
 8003cb2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003cb6:	2b39      	cmp	r3, #57	@ 0x39
 8003cb8:	d80f      	bhi.n	8003cda <MAX72_Print_String+0x15e>
                    char1_pattern = DIGITS[c1 - '0' + 2][row] & 0x07;
 8003cba:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003cbe:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 8003cc2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003cc6:	49cd      	ldr	r1, [pc, #820]	@ (8003ffc <MAX72_Print_String+0x480>)
 8003cc8:	00d2      	lsls	r2, r2, #3
 8003cca:	440a      	add	r2, r1
 8003ccc:	4413      	add	r3, r2
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8003cd8:	e019      	b.n	8003d0e <MAX72_Print_String+0x192>
                else if (c1 == '-')
 8003cda:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003cde:	2b2d      	cmp	r3, #45	@ 0x2d
 8003ce0:	d109      	bne.n	8003cf6 <MAX72_Print_String+0x17a>
                    char1_pattern = DIGITS[1][row] & 0x07;
 8003ce2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003ce6:	4ac5      	ldr	r2, [pc, #788]	@ (8003ffc <MAX72_Print_String+0x480>)
 8003ce8:	4413      	add	r3, r2
 8003cea:	7a1b      	ldrb	r3, [r3, #8]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8003cf4:	e00b      	b.n	8003d0e <MAX72_Print_String+0x192>
                else if (c1 == '.')
 8003cf6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003cfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cfc:	d107      	bne.n	8003d0e <MAX72_Print_String+0x192>
					char1_pattern = DIGITS[0][row] & 0x07;
 8003cfe:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003d02:	4abe      	ldr	r2, [pc, #760]	@ (8003ffc <MAX72_Print_String+0x480>)
 8003d04:	5cd3      	ldrb	r3, [r2, r3]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

                if (c2 >= '0' && c2 <= '9')
 8003d0e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003d12:	2b2f      	cmp	r3, #47	@ 0x2f
 8003d14:	d913      	bls.n	8003d3e <MAX72_Print_String+0x1c2>
 8003d16:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003d1a:	2b39      	cmp	r3, #57	@ 0x39
 8003d1c:	d80f      	bhi.n	8003d3e <MAX72_Print_String+0x1c2>
                    char2_pattern = DIGITS[c2 - '0' + 2][row] & 0x07;
 8003d1e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003d22:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 8003d26:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003d2a:	49b4      	ldr	r1, [pc, #720]	@ (8003ffc <MAX72_Print_String+0x480>)
 8003d2c:	00d2      	lsls	r2, r2, #3
 8003d2e:	440a      	add	r2, r1
 8003d30:	4413      	add	r3, r2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8003d3c:	e019      	b.n	8003d72 <MAX72_Print_String+0x1f6>
                else if (c2 == '-')
 8003d3e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003d42:	2b2d      	cmp	r3, #45	@ 0x2d
 8003d44:	d109      	bne.n	8003d5a <MAX72_Print_String+0x1de>
                    char2_pattern = DIGITS[1][row] & 0x07;
 8003d46:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003d4a:	4aac      	ldr	r2, [pc, #688]	@ (8003ffc <MAX72_Print_String+0x480>)
 8003d4c:	4413      	add	r3, r2
 8003d4e:	7a1b      	ldrb	r3, [r3, #8]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8003d58:	e00b      	b.n	8003d72 <MAX72_Print_String+0x1f6>
                else if (c2 == '.')
 8003d5a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003d5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d60:	d107      	bne.n	8003d72 <MAX72_Print_String+0x1f6>
                	char2_pattern = DIGITS[0][row] & 0x07;
 8003d62:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003d66:	4aa5      	ldr	r2, [pc, #660]	@ (8003ffc <MAX72_Print_String+0x480>)
 8003d68:	5cd3      	ldrb	r3, [r2, r3]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                pat[byte_idx] = (char1_pattern << 4) | char2_pattern;
 8003d72:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	b25a      	sxtb	r2, r3
 8003d7a:	f997 3049 	ldrsb.w	r3, [r7, #73]	@ 0x49
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	b25a      	sxtb	r2, r3
 8003d82:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	3350      	adds	r3, #80	@ 0x50
 8003d8a:	443b      	add	r3, r7
 8003d8c:	f803 2c2c 	strb.w	r2, [r3, #-44]
            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8003d90:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003d94:	3301      	adds	r3, #1
 8003d96:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8003d9a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	f67f af6a 	bls.w	8003c78 <MAX72_Print_String+0xfc>
            }

            MAX72_SendRow(row + 1, pat);
 8003da4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003da8:	3301      	adds	r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fcf8 	bl	80037a8 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8003db8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8003dc2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003dc6:	2b07      	cmp	r3, #7
 8003dc8:	f67f af50 	bls.w	8003c6c <MAX72_Print_String+0xf0>
            for (uint8_t i = 0; i < 4; i++)
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
            MAX72_SendRow(row + 1, pat);
        }
    }
}
 8003dcc:	e150      	b.n	8004070 <MAX72_Print_String+0x4f4>
    else if (settings == FLOAT) {
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f040 80d1 	bne.w	8003f78 <MAX72_Print_String+0x3fc>
        char reversed[4] = {0};
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	623b      	str	r3, [r7, #32]
        int8_t dot_pos = -1;
 8003dda:	23ff      	movs	r3, #255	@ 0xff
 8003ddc:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < len; i++)
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003de6:	e010      	b.n	8003e0a <MAX72_Print_String+0x28e>
            if (str[i] == '.') { dot_pos = i; break; }
 8003de8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	4413      	add	r3, r2
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003df4:	d104      	bne.n	8003e00 <MAX72_Print_String+0x284>
 8003df6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003dfa:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8003dfe:	e00a      	b.n	8003e16 <MAX72_Print_String+0x29a>
        for (uint8_t i = 0; i < len; i++)
 8003e00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e04:	3301      	adds	r3, #1
 8003e06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003e0a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8003e0e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d3e8      	bcc.n	8003de8 <MAX72_Print_String+0x26c>
        char no_dot_str[5] = {0};
 8003e16:	f107 0318 	add.w	r3, r7, #24
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	711a      	strb	r2, [r3, #4]
        uint8_t no_dot_len = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003e2c:	e019      	b.n	8003e62 <MAX72_Print_String+0x2e6>
            if (str[i] != '.') no_dot_str[no_dot_len++] = str[i];
 8003e2e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e3a:	d00d      	beq.n	8003e58 <MAX72_Print_String+0x2dc>
 8003e3c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	441a      	add	r2, r3
 8003e44:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003e48:	1c59      	adds	r1, r3, #1
 8003e4a:	f887 1046 	strb.w	r1, [r7, #70]	@ 0x46
 8003e4e:	7812      	ldrb	r2, [r2, #0]
 8003e50:	3350      	adds	r3, #80	@ 0x50
 8003e52:	443b      	add	r3, r7
 8003e54:	f803 2c38 	strb.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 8003e58:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003e62:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003e66:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d203      	bcs.n	8003e76 <MAX72_Print_String+0x2fa>
 8003e6e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d9db      	bls.n	8003e2e <MAX72_Print_String+0x2b2>
        dot_pos = no_dot_len - dot_pos - 1;
 8003e76:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003e7a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < 4; i++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8003e90:	e01c      	b.n	8003ecc <MAX72_Print_String+0x350>
            reversed[i] = (i < no_dot_len) ? no_dot_str[no_dot_len - 1 - i] : ' ';
 8003e92:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8003e96:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d20a      	bcs.n	8003eb4 <MAX72_Print_String+0x338>
 8003e9e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003ea2:	1e5a      	subs	r2, r3, #1
 8003ea4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	3350      	adds	r3, #80	@ 0x50
 8003eac:	443b      	add	r3, r7
 8003eae:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8003eb2:	e000      	b.n	8003eb6 <MAX72_Print_String+0x33a>
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003eba:	3350      	adds	r3, #80	@ 0x50
 8003ebc:	443b      	add	r3, r7
 8003ebe:	f803 2c30 	strb.w	r2, [r3, #-48]
        for (uint8_t i = 0; i < 4; i++)
 8003ec2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8003ecc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d9de      	bls.n	8003e92 <MAX72_Print_String+0x316>
        for (uint8_t row = 0; row < 8; row++) {
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003eda:	e048      	b.n	8003f6e <MAX72_Print_String+0x3f2>
            for (uint8_t i = 0; i < 4; i++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003ee2:	e01e      	b.n	8003f22 <MAX72_Print_String+0x3a6>
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 8003ee4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003ee8:	3350      	adds	r3, #80	@ 0x50
 8003eea:	443b      	add	r3, r7
 8003eec:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8003ef0:	f1a3 0220 	sub.w	r2, r3, #32
 8003ef4:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 8003ef8:	4841      	ldr	r0, [pc, #260]	@ (8004000 <MAX72_Print_String+0x484>)
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	4403      	add	r3, r0
 8003f02:	440b      	add	r3, r1
 8003f04:	3301      	adds	r3, #1
 8003f06:	781a      	ldrb	r2, [r3, #0]
 8003f08:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003f0c:	00d2      	lsls	r2, r2, #3
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	3350      	adds	r3, #80	@ 0x50
 8003f12:	443b      	add	r3, r7
 8003f14:	f803 2c3c 	strb.w	r2, [r3, #-60]
            for (uint8_t i = 0; i < 4; i++)
 8003f18:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003f22:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d9dc      	bls.n	8003ee4 <MAX72_Print_String+0x368>
            if (row == 0) pat[dot_pos] |= 0b010;
 8003f2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10e      	bne.n	8003f50 <MAX72_Print_String+0x3d4>
 8003f32:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8003f36:	3350      	adds	r3, #80	@ 0x50
 8003f38:	443b      	add	r3, r7
 8003f3a:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8003f3e:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8003f42:	f042 0202 	orr.w	r2, r2, #2
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	3350      	adds	r3, #80	@ 0x50
 8003f4a:	443b      	add	r3, r7
 8003f4c:	f803 2c3c 	strb.w	r2, [r3, #-60]
            MAX72_SendRow(row + 1, pat);
 8003f50:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003f54:	3301      	adds	r3, #1
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f107 0214 	add.w	r2, r7, #20
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fc22 	bl	80037a8 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8003f64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003f68:	3301      	adds	r3, #1
 8003f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003f6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003f72:	2b07      	cmp	r3, #7
 8003f74:	d9b2      	bls.n	8003edc <MAX72_Print_String+0x360>
}
 8003f76:	e07b      	b.n	8004070 <MAX72_Print_String+0x4f4>
        char reversed[4] = {0};
 8003f78:	2300      	movs	r3, #0
 8003f7a:	613b      	str	r3, [r7, #16]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8003f82:	e014      	b.n	8003fae <MAX72_Print_String+0x432>
            reversed[i] = str[len - 1 - i];
 8003f84:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003f88:	1e5a      	subs	r2, r3, #1
 8003f8a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	441a      	add	r2, r3
 8003f96:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003f9a:	7812      	ldrb	r2, [r2, #0]
 8003f9c:	3350      	adds	r3, #80	@ 0x50
 8003f9e:	443b      	add	r3, r7
 8003fa0:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 8003fa4:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8003fae:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d805      	bhi.n	8003fc2 <MAX72_Print_String+0x446>
 8003fb6:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8003fba:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d3e0      	bcc.n	8003f84 <MAX72_Print_String+0x408>
        for (uint8_t i = len; i < 4; i++)
 8003fc2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003fc6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8003fca:	e00b      	b.n	8003fe4 <MAX72_Print_String+0x468>
            reversed[i] = ' ';
 8003fcc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003fd0:	3350      	adds	r3, #80	@ 0x50
 8003fd2:	443b      	add	r3, r7
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = len; i < 4; i++)
 8003fda:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003fde:	3301      	adds	r3, #1
 8003fe0:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8003fe4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d9ef      	bls.n	8003fcc <MAX72_Print_String+0x450>
        for (uint8_t row = 0; row < 8; row++) {
 8003fec:	2300      	movs	r3, #0
 8003fee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003ff2:	e039      	b.n	8004068 <MAX72_Print_String+0x4ec>
            for (uint8_t i = 0; i < 4; i++)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8003ffa:	e022      	b.n	8004042 <MAX72_Print_String+0x4c6>
 8003ffc:	20000360 	.word	0x20000360
 8004000:	20000008 	.word	0x20000008
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 8004004:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004008:	3350      	adds	r3, #80	@ 0x50
 800400a:	443b      	add	r3, r7
 800400c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8004010:	f1a3 0220 	sub.w	r2, r3, #32
 8004014:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8004018:	4817      	ldr	r0, [pc, #92]	@ (8004078 <MAX72_Print_String+0x4fc>)
 800401a:	4613      	mov	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4413      	add	r3, r2
 8004020:	4403      	add	r3, r0
 8004022:	440b      	add	r3, r1
 8004024:	3301      	adds	r3, #1
 8004026:	781a      	ldrb	r2, [r3, #0]
 8004028:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800402c:	00d2      	lsls	r2, r2, #3
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	3350      	adds	r3, #80	@ 0x50
 8004032:	443b      	add	r3, r7
 8004034:	f803 2c44 	strb.w	r2, [r3, #-68]
            for (uint8_t i = 0; i < 4; i++)
 8004038:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800403c:	3301      	adds	r3, #1
 800403e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8004042:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004046:	2b03      	cmp	r3, #3
 8004048:	d9dc      	bls.n	8004004 <MAX72_Print_String+0x488>
            MAX72_SendRow(row + 1, pat);
 800404a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800404e:	3301      	adds	r3, #1
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f107 020c 	add.w	r2, r7, #12
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fba5 	bl	80037a8 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 800405e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004062:	3301      	adds	r3, #1
 8004064:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004068:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800406c:	2b07      	cmp	r3, #7
 800406e:	d9c1      	bls.n	8003ff4 <MAX72_Print_String+0x478>
}
 8004070:	bf00      	nop
 8004072:	3750      	adds	r7, #80	@ 0x50
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000008 	.word	0x20000008

0800407c <MAX72_Print_Int>:


void MAX72_Print_Int(int num, uint8_t minidigits)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	70fb      	strb	r3, [r7, #3]
    char sign = num < 0 ? '-' : '\0';
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	da01      	bge.n	8004092 <MAX72_Print_Int+0x16>
 800408e:	232d      	movs	r3, #45	@ 0x2d
 8004090:	e000      	b.n	8004094 <MAX72_Print_Int+0x18>
 8004092:	2300      	movs	r3, #0
 8004094:	74fb      	strb	r3, [r7, #19]
    unsigned u = (num < 0) ? (unsigned) (-num) : (unsigned) num;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	bfb8      	it	lt
 800409c:	425b      	neglt	r3, r3
 800409e:	617b      	str	r3, [r7, #20]

    char str[9]; // 8 digits + null terminator
    if (minidigits) {
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <MAX72_Print_Int+0x46>
        // segno + 7 cifre (tot 8): taglia alle ultime 7
        u %= sign=='-'?10000000u:100000000u;
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b2d      	cmp	r3, #45	@ 0x2d
 80040aa:	d101      	bne.n	80040b0 <MAX72_Print_Int+0x34>
 80040ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004124 <MAX72_Print_Int+0xa8>)
 80040ae:	e000      	b.n	80040b2 <MAX72_Print_Int+0x36>
 80040b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004128 <MAX72_Print_Int+0xac>)
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e00e      	b.n	80040e0 <MAX72_Print_Int+0x64>
    } else {
        // segno + 3 cifre (tot 4): taglia alle ultime 3
        u %= sign=='-'?1000u:10000u;
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	2b2d      	cmp	r3, #45	@ 0x2d
 80040c6:	d102      	bne.n	80040ce <MAX72_Print_Int+0x52>
 80040c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040cc:	e001      	b.n	80040d2 <MAX72_Print_Int+0x56>
 80040ce:	f242 7310 	movw	r3, #10000	@ 0x2710
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	617b      	str	r3, [r7, #20]
    }

    if (sign == '-'){
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80040e4:	d107      	bne.n	80040f6 <MAX72_Print_Int+0x7a>
    	snprintf(str, sizeof(str), "-%u", u);
 80040e6:	f107 0008 	add.w	r0, r7, #8
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	4a0f      	ldr	r2, [pc, #60]	@ (800412c <MAX72_Print_Int+0xb0>)
 80040ee:	2109      	movs	r1, #9
 80040f0:	f007 fa80 	bl	800b5f4 <sniprintf>
 80040f4:	e006      	b.n	8004104 <MAX72_Print_Int+0x88>
    } else {
    	snprintf(str, sizeof(str), "%u", u);
 80040f6:	f107 0008 	add.w	r0, r7, #8
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004130 <MAX72_Print_Int+0xb4>)
 80040fe:	2109      	movs	r1, #9
 8004100:	f007 fa78 	bl	800b5f4 <sniprintf>
    }


    MAX72_Print_String(str, minidigits ? MINIDIGITS : NO_SETTINGS);
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <MAX72_Print_Int+0x92>
 800410a:	2202      	movs	r2, #2
 800410c:	e000      	b.n	8004110 <MAX72_Print_Int+0x94>
 800410e:	2200      	movs	r2, #0
 8004110:	f107 0308 	add.w	r3, r7, #8
 8004114:	4611      	mov	r1, r2
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fd30 	bl	8003b7c <MAX72_Print_String>
//    MAX72_Print_String(str);
}
 800411c:	bf00      	nop
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	00989680 	.word	0x00989680
 8004128:	05f5e100 	.word	0x05f5e100
 800412c:	0800fca8 	.word	0x0800fca8
 8004130:	0800fcac 	.word	0x0800fcac

08004134 <MAX72_Print_Float>:

void MAX72_Print_Float(float num, uint8_t decimals, uint8_t minidigits) {
 8004134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004138:	b095      	sub	sp, #84	@ 0x54
 800413a:	af04      	add	r7, sp, #16
 800413c:	ed87 0a01 	vstr	s0, [r7, #4]
 8004140:	4603      	mov	r3, r0
 8004142:	460a      	mov	r2, r1
 8004144:	70fb      	strb	r3, [r7, #3]
 8004146:	4613      	mov	r3, r2
 8004148:	70bb      	strb	r3, [r7, #2]
 800414a:	466b      	mov	r3, sp
 800414c:	461e      	mov	r6, r3
    uint8_t max_chars = 8;
 800414e:	2308      	movs	r3, #8
 8004150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char str[max_chars + 1]; // +1 for null terminator
 8004154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004158:	1c59      	adds	r1, r3, #1
 800415a:	1e4b      	subs	r3, r1, #1
 800415c:	623b      	str	r3, [r7, #32]
 800415e:	460a      	mov	r2, r1
 8004160:	2300      	movs	r3, #0
 8004162:	4690      	mov	r8, r2
 8004164:	4699      	mov	r9, r3
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800417a:	460a      	mov	r2, r1
 800417c:	2300      	movs	r3, #0
 800417e:	4614      	mov	r4, r2
 8004180:	461d      	mov	r5, r3
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	00eb      	lsls	r3, r5, #3
 800418c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004190:	00e2      	lsls	r2, r4, #3
 8004192:	460b      	mov	r3, r1
 8004194:	3307      	adds	r3, #7
 8004196:	08db      	lsrs	r3, r3, #3
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	ebad 0d03 	sub.w	sp, sp, r3
 800419e:	ab04      	add	r3, sp, #16
 80041a0:	3300      	adds	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]

    // Gestione del segno
    char sign = (num < 0) ? '-' : '\0';
 80041a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80041a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b0:	d501      	bpl.n	80041b6 <MAX72_Print_Float+0x82>
 80041b2:	232d      	movs	r3, #45	@ 0x2d
 80041b4:	e000      	b.n	80041b8 <MAX72_Print_Float+0x84>
 80041b6:	2300      	movs	r3, #0
 80041b8:	76fb      	strb	r3, [r7, #27]
    float abs_num = (num < 0) ? -num : num;
 80041ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80041be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c6:	d504      	bpl.n	80041d2 <MAX72_Print_Float+0x9e>
 80041c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80041cc:	eef1 7a67 	vneg.f32	s15, s15
 80041d0:	e001      	b.n	80041d6 <MAX72_Print_Float+0xa2>
 80041d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80041d6:	edc7 7a05 	vstr	s15, [r7, #20]

    // Separa parte intera e decimale
    unsigned int_part = (unsigned) abs_num;
 80041da:	edd7 7a05 	vldr	s15, [r7, #20]
 80041de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e2:	ee17 3a90 	vmov	r3, s15
 80041e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float frac_part = abs_num - int_part;
 80041e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80041f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041fa:	edc7 7a04 	vstr	s15, [r7, #16]


    // Calcola quanti caratteri servono per la parte intera
    uint8_t int_digits = (int_part == 0) ? 0 : 1;
 80041fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004200:	2b00      	cmp	r3, #0
 8004202:	bf14      	ite	ne
 8004204:	2301      	movne	r3, #1
 8004206:	2300      	moveq	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    unsigned temp = int_part;
 800420e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004210:	637b      	str	r3, [r7, #52]	@ 0x34
    while (temp >= 10) {
 8004212:	e00a      	b.n	800422a <MAX72_Print_Float+0xf6>
        temp /= 10;
 8004214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004216:	4a5d      	ldr	r2, [pc, #372]	@ (800438c <MAX72_Print_Float+0x258>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	08db      	lsrs	r3, r3, #3
 800421e:	637b      	str	r3, [r7, #52]	@ 0x34
        int_digits++;
 8004220:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004224:	3301      	adds	r3, #1
 8004226:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    while (temp >= 10) {
 800422a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422c:	2b09      	cmp	r3, #9
 800422e:	d8f1      	bhi.n	8004214 <MAX72_Print_Float+0xe0>
    }

    // Calcola spazio disponibile per decimali
    uint8_t available_for_decimals = max_chars - (sign != '\0' ? 1 : 0) - int_digits - 1; // -1 per il punto decimale
 8004230:	7efb      	ldrb	r3, [r7, #27]
 8004232:	2b00      	cmp	r3, #0
 8004234:	bf14      	ite	ne
 8004236:	2301      	movne	r3, #1
 8004238:	2300      	moveq	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	b2da      	uxtb	r2, r3
 8004246:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	b2db      	uxtb	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]

    // Limita i decimali al minimo tra quelli richiesti e quelli disponibili
    uint8_t actual_decimals = (decimals < available_for_decimals) ? decimals : available_for_decimals;
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	4293      	cmp	r3, r2
 8004258:	bf28      	it	cs
 800425a:	4613      	movcs	r3, r2
 800425c:	73bb      	strb	r3, [r7, #14]

    // Se non c'è spazio nemmeno per un decimale, mostra solo la parte intera
    if (available_for_decimals == 0) {
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d11b      	bne.n	800429c <MAX72_Print_Float+0x168>
        if (int_part == 0) {
 8004264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <MAX72_Print_Float+0x144>
            snprintf(str, sizeof(str), "0");
 800426a:	460b      	mov	r3, r1
 800426c:	4a48      	ldr	r2, [pc, #288]	@ (8004390 <MAX72_Print_Float+0x25c>)
 800426e:	4619      	mov	r1, r3
 8004270:	69f8      	ldr	r0, [r7, #28]
 8004272:	f007 f9bf 	bl	800b5f4 <sniprintf>
 8004276:	e079      	b.n	800436c <MAX72_Print_Float+0x238>
        } else {
            if (sign != '\0') {
 8004278:	7efb      	ldrb	r3, [r7, #27]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <MAX72_Print_Float+0x15c>
                snprintf(str, sizeof(str), "%c%u", sign, int_part);
 800427e:	7efa      	ldrb	r2, [r7, #27]
 8004280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	4613      	mov	r3, r2
 8004286:	4a43      	ldr	r2, [pc, #268]	@ (8004394 <MAX72_Print_Float+0x260>)
 8004288:	69f8      	ldr	r0, [r7, #28]
 800428a:	f007 f9b3 	bl	800b5f4 <sniprintf>
 800428e:	e06d      	b.n	800436c <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u", int_part);
 8004290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004292:	4a41      	ldr	r2, [pc, #260]	@ (8004398 <MAX72_Print_Float+0x264>)
 8004294:	69f8      	ldr	r0, [r7, #28]
 8004296:	f007 f9ad 	bl	800b5f4 <sniprintf>
 800429a:	e067      	b.n	800436c <MAX72_Print_Float+0x238>
            }
        }
    } else {
        // Calcola il moltiplicatore per i decimali
        unsigned multiplier = 1;
 800429c:	2301      	movs	r3, #1
 800429e:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 80042a0:	2300      	movs	r3, #0
 80042a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80042a6:	e00a      	b.n	80042be <MAX72_Print_Float+0x18a>
            multiplier *= 10;
 80042a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 80042b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80042b8:	3301      	adds	r3, #1
 80042ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80042be:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80042c2:	7bbb      	ldrb	r3, [r7, #14]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d3ef      	bcc.n	80042a8 <MAX72_Print_Float+0x174>
        }

        // Arrotonda la parte frazionaria
        unsigned frac_digits = (unsigned) (frac_part * multiplier + 0.5f);
 80042c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80042d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80042de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042e6:	ee17 3a90 	vmov	r3, s15
 80042ea:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Gestisce il caso di overflow nell'arrotondamento
        if (frac_digits >= multiplier) {
 80042ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d304      	bcc.n	80042fe <MAX72_Print_Float+0x1ca>
            int_part++;
 80042f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f6:	3301      	adds	r3, #1
 80042f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            frac_digits = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Costruisce la stringa
        if (int_part == 0) {
 80042fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d118      	bne.n	8004336 <MAX72_Print_Float+0x202>
            // Omette la parte intera se è 0
            if (sign != '\0') {
 8004304:	7efb      	ldrb	r3, [r7, #27]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00c      	beq.n	8004324 <MAX72_Print_Float+0x1f0>
                snprintf(str, sizeof(str), "%c.%0*u", sign, actual_decimals, frac_digits);
 800430a:	4608      	mov	r0, r1
 800430c:	7ef9      	ldrb	r1, [r7, #27]
 800430e:	7bbb      	ldrb	r3, [r7, #14]
 8004310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004312:	9201      	str	r2, [sp, #4]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	460b      	mov	r3, r1
 8004318:	4a20      	ldr	r2, [pc, #128]	@ (800439c <MAX72_Print_Float+0x268>)
 800431a:	4601      	mov	r1, r0
 800431c:	69f8      	ldr	r0, [r7, #28]
 800431e:	f007 f969 	bl	800b5f4 <sniprintf>
 8004322:	e023      	b.n	800436c <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), ".%0*u", actual_decimals, frac_digits);
 8004324:	7bba      	ldrb	r2, [r7, #14]
 8004326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	4613      	mov	r3, r2
 800432c:	4a1c      	ldr	r2, [pc, #112]	@ (80043a0 <MAX72_Print_Float+0x26c>)
 800432e:	69f8      	ldr	r0, [r7, #28]
 8004330:	f007 f960 	bl	800b5f4 <sniprintf>
 8004334:	e01a      	b.n	800436c <MAX72_Print_Float+0x238>
            }
        } else {
            // Include la parte intera
            if (sign != '\0') {
 8004336:	7efb      	ldrb	r3, [r7, #27]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00e      	beq.n	800435a <MAX72_Print_Float+0x226>
                snprintf(str, sizeof(str), "%c%u.%0*u", sign, int_part, actual_decimals, frac_digits);
 800433c:	4608      	mov	r0, r1
 800433e:	7ef9      	ldrb	r1, [r7, #27]
 8004340:	7bbb      	ldrb	r3, [r7, #14]
 8004342:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004344:	9202      	str	r2, [sp, #8]
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	460b      	mov	r3, r1
 800434e:	4a15      	ldr	r2, [pc, #84]	@ (80043a4 <MAX72_Print_Float+0x270>)
 8004350:	4601      	mov	r1, r0
 8004352:	69f8      	ldr	r0, [r7, #28]
 8004354:	f007 f94e 	bl	800b5f4 <sniprintf>
 8004358:	e008      	b.n	800436c <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u.%0*u", int_part, actual_decimals, frac_digits);
 800435a:	7bbb      	ldrb	r3, [r7, #14]
 800435c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800435e:	9201      	str	r2, [sp, #4]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004364:	4a10      	ldr	r2, [pc, #64]	@ (80043a8 <MAX72_Print_Float+0x274>)
 8004366:	69f8      	ldr	r0, [r7, #28]
 8004368:	f007 f944 	bl	800b5f4 <sniprintf>
            }
        }
    }

    MAX72_Print_String(str, minidigits ? MINIDIGITS : FLOAT);
 800436c:	78bb      	ldrb	r3, [r7, #2]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <MAX72_Print_Float+0x242>
 8004372:	2302      	movs	r3, #2
 8004374:	e000      	b.n	8004378 <MAX72_Print_Float+0x244>
 8004376:	2301      	movs	r3, #1
 8004378:	4619      	mov	r1, r3
 800437a:	69f8      	ldr	r0, [r7, #28]
 800437c:	f7ff fbfe 	bl	8003b7c <MAX72_Print_String>
 8004380:	46b5      	mov	sp, r6
//    MAX72_Print_String(str);
}
 8004382:	bf00      	nop
 8004384:	3744      	adds	r7, #68	@ 0x44
 8004386:	46bd      	mov	sp, r7
 8004388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800438c:	cccccccd 	.word	0xcccccccd
 8004390:	0800fcb0 	.word	0x0800fcb0
 8004394:	0800fcb4 	.word	0x0800fcb4
 8004398:	0800fcac 	.word	0x0800fcac
 800439c:	0800fcbc 	.word	0x0800fcbc
 80043a0:	0800fcc4 	.word	0x0800fcc4
 80043a4:	0800fccc 	.word	0x0800fccc
 80043a8:	0800fcd8 	.word	0x0800fcd8

080043ac <MAX72_SendFrame>:

// Buffer: 8 rows x DEV_NUM devices
static uint8_t frame[8][DEV_NUM];

// Send full frame to display (reversed order for correct cascade)
static void MAX72_SendFrame(void) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
    for (uint8_t row = 1; row <= 8; row++) {
 80043b2:	2301      	movs	r3, #1
 80043b4:	71fb      	strb	r3, [r7, #7]
 80043b6:	e020      	b.n	80043fa <MAX72_SendFrame+0x4e>
        uint8_t pattern[DEV_NUM];
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 80043b8:	2300      	movs	r3, #0
 80043ba:	71bb      	strb	r3, [r7, #6]
 80043bc:	e011      	b.n	80043e2 <MAX72_SendFrame+0x36>
            pattern[d] = frame[row-1][DEV_NUM - 1 - d];
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	1e59      	subs	r1, r3, #1
 80043c2:	79bb      	ldrb	r3, [r7, #6]
 80043c4:	f1c3 0203 	rsb	r2, r3, #3
 80043c8:	79bb      	ldrb	r3, [r7, #6]
 80043ca:	4810      	ldr	r0, [pc, #64]	@ (800440c <MAX72_SendFrame+0x60>)
 80043cc:	0089      	lsls	r1, r1, #2
 80043ce:	4401      	add	r1, r0
 80043d0:	440a      	add	r2, r1
 80043d2:	7812      	ldrb	r2, [r2, #0]
 80043d4:	3308      	adds	r3, #8
 80043d6:	443b      	add	r3, r7
 80043d8:	f803 2c08 	strb.w	r2, [r3, #-8]
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 80043dc:	79bb      	ldrb	r3, [r7, #6]
 80043de:	3301      	adds	r3, #1
 80043e0:	71bb      	strb	r3, [r7, #6]
 80043e2:	79bb      	ldrb	r3, [r7, #6]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d9ea      	bls.n	80043be <MAX72_SendFrame+0x12>
        }
        MAX72_SendRow(row, pattern);
 80043e8:	463a      	mov	r2, r7
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff f9da 	bl	80037a8 <MAX72_SendRow>
    for (uint8_t row = 1; row <= 8; row++) {
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	3301      	adds	r3, #1
 80043f8:	71fb      	strb	r3, [r7, #7]
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d9db      	bls.n	80043b8 <MAX72_SendFrame+0xc>
    }
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000c24 	.word	0x20000c24

08004410 <MAX72_Scroll_Start_IT>:
}

scroll_state_t scroll_state = {0};

// Inizializza lo scrolling con un nuovo testo
void MAX72_Scroll_Start_IT(const char *text) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
    // Pulisci il frame
    memset(frame, 0, sizeof(frame));
 8004418:	2220      	movs	r2, #32
 800441a:	2100      	movs	r1, #0
 800441c:	482d      	ldr	r0, [pc, #180]	@ (80044d4 <MAX72_Scroll_Start_IT+0xc4>)
 800441e:	f008 f8fb 	bl	800c618 <memset>
    MAX72_SendFrame();
 8004422:	f7ff ffc3 	bl	80043ac <MAX72_SendFrame>

    // Inizializza lo stato - CAMBIATO: inizia dal primo carattere per scorrimento inverso
    scroll_state.text = text;
 8004426:	4a2c      	ldr	r2, [pc, #176]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6013      	str	r3, [r2, #0]
    scroll_state.current_char_idx = 0; // Inizia dal primo carattere
 800442c:	4b2a      	ldr	r3, [pc, #168]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 800442e:	2200      	movs	r2, #0
 8004430:	605a      	str	r2, [r3, #4]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004432:	4b29      	ldr	r3, [pc, #164]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a28      	ldr	r2, [pc, #160]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 8004438:	6852      	ldr	r2, [r2, #4]
 800443a:	4413      	add	r3, r2
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b1f      	cmp	r3, #31
 8004440:	d90e      	bls.n	8004460 <MAX72_Scroll_Start_IT+0x50>
            scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8004442:	4b25      	ldr	r3, [pc, #148]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a24      	ldr	r2, [pc, #144]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 8004448:	6852      	ldr	r2, [r2, #4]
 800444a:	4413      	add	r3, r2
 800444c:	781b      	ldrb	r3, [r3, #0]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 800444e:	2b7e      	cmp	r3, #126	@ 0x7e
 8004450:	d806      	bhi.n	8004460 <MAX72_Scroll_Start_IT+0x50>
            ' ' : scroll_state.text[scroll_state.current_char_idx];
 8004452:	4b21      	ldr	r3, [pc, #132]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a20      	ldr	r2, [pc, #128]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 8004458:	6852      	ldr	r2, [r2, #4]
 800445a:	4413      	add	r3, r2
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	e000      	b.n	8004462 <MAX72_Scroll_Start_IT+0x52>
 8004460:	2320      	movs	r3, #32
 8004462:	4a1d      	ldr	r2, [pc, #116]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 8004464:	7213      	strb	r3, [r2, #8]
    scroll_state.current_col = 0;
 8004466:	4b1c      	ldr	r3, [pc, #112]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 8004468:	2200      	movs	r2, #0
 800446a:	725a      	strb	r2, [r3, #9]
    scroll_state.spacing_counter = 0;
 800446c:	4b1a      	ldr	r3, [pc, #104]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 800446e:	2200      	movs	r2, #0
 8004470:	729a      	strb	r2, [r3, #10]
    scroll_state.padding_counter = 0;
 8004472:	4b19      	ldr	r3, [pc, #100]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 8004474:	2200      	movs	r2, #0
 8004476:	72da      	strb	r2, [r3, #11]
    scroll_state.state = 0; // Inizia con il primo carattere
 8004478:	4b17      	ldr	r3, [pc, #92]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 800447a:	2200      	movs	r2, #0
 800447c:	731a      	strb	r2, [r3, #12]
    scroll_state.enabled = 1;
 800447e:	4b16      	ldr	r3, [pc, #88]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 8004480:	2201      	movs	r2, #1
 8004482:	735a      	strb	r2, [r3, #13]
    scroll_state.updated = 0; // Indica che lo scrolling è stato aggiornato
 8004484:	4b14      	ldr	r3, [pc, #80]	@ (80044d8 <MAX72_Scroll_Start_IT+0xc8>)
 8004486:	2200      	movs	r2, #0
 8004488:	739a      	strb	r2, [r3, #14]

    uint8_t len = strlen(text);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fb ff20 	bl	80002d0 <strlen>
 8004490:	4603      	mov	r3, r0
 8004492:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = len * GLYPH_WIDTH + (len - 1) * CHAR_SPACING;
 8004494:	7bbb      	ldrb	r3, [r7, #14]
 8004496:	461a      	mov	r2, r3
 8004498:	0052      	lsls	r2, r2, #1
 800449a:	4413      	add	r3, r2
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	737b      	strb	r3, [r7, #13]
    uint8_t max_chars = ((DEV_NUM * 8 < temp) ? DEV_NUM*8 : temp) - 8; // Padding iniziale di 8 colonne
 80044a4:	7b7b      	ldrb	r3, [r7, #13]
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	bf28      	it	cs
 80044aa:	2320      	movcs	r3, #32
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	3b08      	subs	r3, #8
 80044b0:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < max_chars; i++) {
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
 80044b6:	e004      	b.n	80044c2 <MAX72_Scroll_Start_IT+0xb2>
		MAX72_Scroll_Process(); // Processa il primo carattere per inizializzare il frame
 80044b8:	f000 f81c 	bl	80044f4 <MAX72_Scroll_Process>
    for (uint8_t i = 0; i < max_chars; i++) {
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	3301      	adds	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
 80044c2:	7bfa      	ldrb	r2, [r7, #15]
 80044c4:	7b3b      	ldrb	r3, [r7, #12]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d3f6      	bcc.n	80044b8 <MAX72_Scroll_Start_IT+0xa8>
	}
}
 80044ca:	bf00      	nop
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20000c24 	.word	0x20000c24
 80044d8:	20000c44 	.word	0x20000c44

080044dc <MAX72_Scroll_Stop>:

// Ferma lo scrolling
void MAX72_Scroll_Stop(void) {
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
    scroll_state.enabled = 0;
 80044e0:	4b03      	ldr	r3, [pc, #12]	@ (80044f0 <MAX72_Scroll_Stop+0x14>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	735a      	strb	r2, [r3, #13]
}
 80044e6:	bf00      	nop
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	20000c44 	.word	0x20000c44

080044f4 <MAX72_Scroll_Process>:
void MAX72_Scroll_Resume(void) {
    scroll_state.enabled = 1;
}

// Funzione da chiamare nel main loop - NON bloccante
void MAX72_Scroll_Process(void) {
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b08b      	sub	sp, #44	@ 0x2c
 80044f8:	af00      	add	r7, sp, #0
    if (!scroll_state.enabled || !scroll_state.text) return;
 80044fa:	4b8a      	ldr	r3, [pc, #552]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80044fc:	7b5b      	ldrb	r3, [r3, #13]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 8183 	beq.w	800480a <MAX72_Scroll_Process+0x316>
 8004504:	4b87      	ldr	r3, [pc, #540]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 817e 	beq.w	800480a <MAX72_Scroll_Process+0x316>

    if (scroll_state.updated) {
 800450e:	4b85      	ldr	r3, [pc, #532]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 8004510:	7b9b      	ldrb	r3, [r3, #14]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <MAX72_Scroll_Process+0x28>
		// Se il testo è stato aggiornato, ricalcola il frame

    	// TODO RICALCOLO DEL FRAME AGGIORNATO, fino al carattere corrente

		scroll_state.updated = 0; // Reset flag
 8004516:	4b83      	ldr	r3, [pc, #524]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 8004518:	2200      	movs	r2, #0
 800451a:	739a      	strb	r2, [r3, #14]
	}

    switch (scroll_state.state) {
 800451c:	4b81      	ldr	r3, [pc, #516]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 800451e:	7b1b      	ldrb	r3, [r3, #12]
 8004520:	2b02      	cmp	r3, #2
 8004522:	f000 80f6 	beq.w	8004712 <MAX72_Scroll_Process+0x21e>
 8004526:	2b02      	cmp	r3, #2
 8004528:	f300 816c 	bgt.w	8004804 <MAX72_Scroll_Process+0x310>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <MAX72_Scroll_Process+0x42>
 8004530:	2b01      	cmp	r3, #1
 8004532:	d072      	beq.n	800461a <MAX72_Scroll_Process+0x126>
 8004534:	e166      	b.n	8004804 <MAX72_Scroll_Process+0x310>
        case 0: // Processamento carattere
        {
            uint8_t ch = scroll_state.current_char;
 8004536:	4b7b      	ldr	r3, [pc, #492]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 8004538:	7a1b      	ldrb	r3, [r3, #8]
 800453a:	737b      	strb	r3, [r7, #13]
            uint8_t *glyph = LETTERS[ch - ' '].value;
 800453c:	7b7b      	ldrb	r3, [r7, #13]
 800453e:	f1a3 0220 	sub.w	r2, r3, #32
 8004542:	4613      	mov	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4413      	add	r3, r2
 8004548:	4a77      	ldr	r2, [pc, #476]	@ (8004728 <MAX72_Scroll_Process+0x234>)
 800454a:	4413      	add	r3, r2
 800454c:	3301      	adds	r3, #1
 800454e:	60bb      	str	r3, [r7, #8]

            // CAMBIATO: Shift verso destra (da destra verso sinistra)
            for (uint8_t row = 0; row < 8; row++) {
 8004550:	2300      	movs	r3, #0
 8004552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004556:	e047      	b.n	80045e8 <MAX72_Scroll_Process+0xf4>
                uint8_t new_bit = (glyph[row] >> scroll_state.current_col) & 0x01;
 8004558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	4413      	add	r3, r2
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	4b6f      	ldr	r3, [pc, #444]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 8004566:	7a5b      	ldrb	r3, [r3, #9]
 8004568:	fa42 f303 	asr.w	r3, r2, r3
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	71fb      	strb	r3, [r7, #7]
                uint8_t carry = new_bit;
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // CAMBIATO: Shift right invece di left, da device più a destra
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 800457a:	2303      	movs	r3, #3
 800457c:	623b      	str	r3, [r7, #32]
 800457e:	e02b      	b.n	80045d8 <MAX72_Scroll_Process+0xe4>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8004580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004584:	4a69      	ldr	r2, [pc, #420]	@ (800472c <MAX72_Scroll_Process+0x238>)
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	441a      	add	r2, r3
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	4413      	add	r3, r2
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	71bb      	strb	r3, [r7, #6]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8004596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800459a:	4a64      	ldr	r2, [pc, #400]	@ (800472c <MAX72_Scroll_Process+0x238>)
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	441a      	add	r2, r3
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	4413      	add	r3, r2
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	b25a      	sxtb	r2, r3
 80045ac:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 80045b0:	01db      	lsls	r3, r3, #7
 80045b2:	b25b      	sxtb	r3, r3
 80045b4:	4313      	orrs	r3, r2
 80045b6:	b25a      	sxtb	r2, r3
 80045b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045bc:	b2d1      	uxtb	r1, r2
 80045be:	4a5b      	ldr	r2, [pc, #364]	@ (800472c <MAX72_Scroll_Process+0x238>)
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	441a      	add	r2, r3
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	4413      	add	r3, r2
 80045c8:	460a      	mov	r2, r1
 80045ca:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 80045cc:	79bb      	ldrb	r3, [r7, #6]
 80045ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	623b      	str	r3, [r7, #32]
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	dad0      	bge.n	8004580 <MAX72_Scroll_Process+0x8c>
            for (uint8_t row = 0; row < 8; row++) {
 80045de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045e2:	3301      	adds	r3, #1
 80045e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80045e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045ec:	2b07      	cmp	r3, #7
 80045ee:	d9b3      	bls.n	8004558 <MAX72_Scroll_Process+0x64>
                }
            }

            scroll_state.current_col++;
 80045f0:	4b4c      	ldr	r3, [pc, #304]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80045f2:	7a5b      	ldrb	r3, [r3, #9]
 80045f4:	3301      	adds	r3, #1
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	4b4a      	ldr	r3, [pc, #296]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80045fa:	725a      	strb	r2, [r3, #9]

            // Finito il carattere corrente?
            if (scroll_state.current_col >= GLYPH_WIDTH) {
 80045fc:	4b49      	ldr	r3, [pc, #292]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80045fe:	7a5b      	ldrb	r3, [r3, #9]
 8004600:	2b04      	cmp	r3, #4
 8004602:	f240 80fa 	bls.w	80047fa <MAX72_Scroll_Process+0x306>
                scroll_state.current_col = 0;
 8004606:	4b47      	ldr	r3, [pc, #284]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 8004608:	2200      	movs	r2, #0
 800460a:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 800460c:	4b45      	ldr	r3, [pc, #276]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 800460e:	2200      	movs	r2, #0
 8004610:	729a      	strb	r2, [r3, #10]
                scroll_state.state = 1; // Passa agli spazi tra caratteri
 8004612:	4b44      	ldr	r3, [pc, #272]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 8004614:	2201      	movs	r2, #1
 8004616:	731a      	strb	r2, [r3, #12]
            }
            break;
 8004618:	e0ef      	b.n	80047fa <MAX72_Scroll_Process+0x306>
        }

        case 1: // Spacing tra caratteri
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 800461a:	2300      	movs	r3, #0
 800461c:	77fb      	strb	r3, [r7, #31]
 800461e:	e032      	b.n	8004686 <MAX72_Scroll_Process+0x192>
                uint8_t carry = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004624:	2303      	movs	r3, #3
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	e027      	b.n	800467a <MAX72_Scroll_Process+0x186>
                    uint8_t next_carry = frame[row][d] & 0x01;
 800462a:	7ffb      	ldrb	r3, [r7, #31]
 800462c:	4a3f      	ldr	r2, [pc, #252]	@ (800472c <MAX72_Scroll_Process+0x238>)
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	441a      	add	r2, r3
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	4413      	add	r3, r2
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	73bb      	strb	r3, [r7, #14]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 800463e:	7ffb      	ldrb	r3, [r7, #31]
 8004640:	4a3a      	ldr	r2, [pc, #232]	@ (800472c <MAX72_Scroll_Process+0x238>)
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	441a      	add	r2, r3
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	4413      	add	r3, r2
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	b25a      	sxtb	r2, r3
 8004652:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004656:	01db      	lsls	r3, r3, #7
 8004658:	b25b      	sxtb	r3, r3
 800465a:	4313      	orrs	r3, r2
 800465c:	b25a      	sxtb	r2, r3
 800465e:	7ffb      	ldrb	r3, [r7, #31]
 8004660:	b2d1      	uxtb	r1, r2
 8004662:	4a32      	ldr	r2, [pc, #200]	@ (800472c <MAX72_Scroll_Process+0x238>)
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	441a      	add	r2, r3
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	4413      	add	r3, r2
 800466c:	460a      	mov	r2, r1
 800466e:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8004670:	7bbb      	ldrb	r3, [r7, #14]
 8004672:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	3b01      	subs	r3, #1
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	dad4      	bge.n	800462a <MAX72_Scroll_Process+0x136>
            for (uint8_t row = 0; row < 8; row++) {
 8004680:	7ffb      	ldrb	r3, [r7, #31]
 8004682:	3301      	adds	r3, #1
 8004684:	77fb      	strb	r3, [r7, #31]
 8004686:	7ffb      	ldrb	r3, [r7, #31]
 8004688:	2b07      	cmp	r3, #7
 800468a:	d9c9      	bls.n	8004620 <MAX72_Scroll_Process+0x12c>
                }
            }

            scroll_state.spacing_counter++;
 800468c:	4b25      	ldr	r3, [pc, #148]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 800468e:	7a9b      	ldrb	r3, [r3, #10]
 8004690:	3301      	adds	r3, #1
 8004692:	b2da      	uxtb	r2, r3
 8004694:	4b23      	ldr	r3, [pc, #140]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 8004696:	729a      	strb	r2, [r3, #10]

            // Finito lo spacing?
            if (scroll_state.spacing_counter >= CHAR_SPACING) {
 8004698:	4b22      	ldr	r3, [pc, #136]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 800469a:	7a9b      	ldrb	r3, [r3, #10]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80ae 	beq.w	80047fe <MAX72_Scroll_Process+0x30a>
                scroll_state.spacing_counter = 0;
 80046a2:	4b20      	ldr	r3, [pc, #128]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	729a      	strb	r2, [r3, #10]

                // CAMBIATO: Passa al carattere successivo (incrementa invece di decrementare)
                scroll_state.current_char_idx++;
 80046a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	3301      	adds	r3, #1
 80046ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80046b0:	6053      	str	r3, [r2, #4]
                if (scroll_state.current_char_idx >= strlen(scroll_state.text)) {
 80046b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	461c      	mov	r4, r3
 80046b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fb fe07 	bl	80002d0 <strlen>
 80046c2:	4603      	mov	r3, r0
 80046c4:	429c      	cmp	r4, r3
 80046c6:	d306      	bcc.n	80046d6 <MAX72_Scroll_Process+0x1e2>
                    // Finiti tutti i caratteri, passa al padding finale
                    scroll_state.state = 2;
 80046c8:	4b16      	ldr	r3, [pc, #88]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80046ca:	2202      	movs	r2, #2
 80046cc:	731a      	strb	r2, [r3, #12]
                    scroll_state.padding_counter = 0;
 80046ce:	4b15      	ldr	r3, [pc, #84]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	72da      	strb	r2, [r3, #11]
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
                    scroll_state.state = 0;
                }
            }
            break;
 80046d4:	e093      	b.n	80047fe <MAX72_Scroll_Process+0x30a>
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80046d6:	4b13      	ldr	r3, [pc, #76]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a12      	ldr	r2, [pc, #72]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80046dc:	6852      	ldr	r2, [r2, #4]
 80046de:	4413      	add	r3, r2
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b1f      	cmp	r3, #31
 80046e4:	d90e      	bls.n	8004704 <MAX72_Scroll_Process+0x210>
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
 80046e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80046ec:	6852      	ldr	r2, [r2, #4]
 80046ee:	4413      	add	r3, r2
 80046f0:	781b      	ldrb	r3, [r3, #0]
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80046f2:	2b7e      	cmp	r3, #126	@ 0x7e
 80046f4:	d806      	bhi.n	8004704 <MAX72_Scroll_Process+0x210>
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
 80046f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 80046fc:	6852      	ldr	r2, [r2, #4]
 80046fe:	4413      	add	r3, r2
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	e000      	b.n	8004706 <MAX72_Scroll_Process+0x212>
 8004704:	2320      	movs	r3, #32
 8004706:	4a07      	ldr	r2, [pc, #28]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 8004708:	7213      	strb	r3, [r2, #8]
                    scroll_state.state = 0;
 800470a:	4b06      	ldr	r3, [pc, #24]	@ (8004724 <MAX72_Scroll_Process+0x230>)
 800470c:	2200      	movs	r2, #0
 800470e:	731a      	strb	r2, [r3, #12]
            break;
 8004710:	e075      	b.n	80047fe <MAX72_Scroll_Process+0x30a>
        }

        case 2: // Padding finale
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 8004712:	2300      	movs	r3, #0
 8004714:	75fb      	strb	r3, [r7, #23]
 8004716:	e039      	b.n	800478c <MAX72_Scroll_Process+0x298>
                uint8_t carry = 0;
 8004718:	2300      	movs	r3, #0
 800471a:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 800471c:	2303      	movs	r3, #3
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	e02e      	b.n	8004780 <MAX72_Scroll_Process+0x28c>
 8004722:	bf00      	nop
 8004724:	20000c44 	.word	0x20000c44
 8004728:	20000008 	.word	0x20000008
 800472c:	20000c24 	.word	0x20000c24
                    uint8_t next_carry = frame[row][d] & 0x01;
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	4a38      	ldr	r2, [pc, #224]	@ (8004814 <MAX72_Scroll_Process+0x320>)
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	441a      	add	r2, r3
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4413      	add	r3, r2
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8004744:	7dfb      	ldrb	r3, [r7, #23]
 8004746:	4a33      	ldr	r2, [pc, #204]	@ (8004814 <MAX72_Scroll_Process+0x320>)
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	441a      	add	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4413      	add	r3, r2
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	b2db      	uxtb	r3, r3
 8004756:	b25a      	sxtb	r2, r3
 8004758:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800475c:	01db      	lsls	r3, r3, #7
 800475e:	b25b      	sxtb	r3, r3
 8004760:	4313      	orrs	r3, r2
 8004762:	b25a      	sxtb	r2, r3
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	b2d1      	uxtb	r1, r2
 8004768:	4a2a      	ldr	r2, [pc, #168]	@ (8004814 <MAX72_Scroll_Process+0x320>)
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	441a      	add	r2, r3
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4413      	add	r3, r2
 8004772:	460a      	mov	r2, r1
 8004774:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	3b01      	subs	r3, #1
 800477e:	613b      	str	r3, [r7, #16]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	dad4      	bge.n	8004730 <MAX72_Scroll_Process+0x23c>
            for (uint8_t row = 0; row < 8; row++) {
 8004786:	7dfb      	ldrb	r3, [r7, #23]
 8004788:	3301      	adds	r3, #1
 800478a:	75fb      	strb	r3, [r7, #23]
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	2b07      	cmp	r3, #7
 8004790:	d9c2      	bls.n	8004718 <MAX72_Scroll_Process+0x224>
                }
            }

            scroll_state.padding_counter++;
 8004792:	4b21      	ldr	r3, [pc, #132]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 8004794:	7adb      	ldrb	r3, [r3, #11]
 8004796:	3301      	adds	r3, #1
 8004798:	b2da      	uxtb	r2, r3
 800479a:	4b1f      	ldr	r3, [pc, #124]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 800479c:	72da      	strb	r2, [r3, #11]

            // Finito il padding? (GLYPH_WIDTH + CHAR_SPACING)
            if (scroll_state.padding_counter >= (GLYPH_WIDTH + CHAR_SPACING)) {
 800479e:	4b1e      	ldr	r3, [pc, #120]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 80047a0:	7adb      	ldrb	r3, [r3, #11]
 80047a2:	2b05      	cmp	r3, #5
 80047a4:	d92d      	bls.n	8004802 <MAX72_Scroll_Process+0x30e>
                // CAMBIATO: Ricomincia dal primo carattere (indice 0)
                scroll_state.current_char_idx = 0;
 80047a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	605a      	str	r2, [r3, #4]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80047ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a19      	ldr	r2, [pc, #100]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 80047b2:	6852      	ldr	r2, [r2, #4]
 80047b4:	4413      	add	r3, r2
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b1f      	cmp	r3, #31
 80047ba:	d90e      	bls.n	80047da <MAX72_Scroll_Process+0x2e6>
						scroll_state.text[scroll_state.current_char_idx] > '~') ?
 80047bc:	4b16      	ldr	r3, [pc, #88]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a15      	ldr	r2, [pc, #84]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 80047c2:	6852      	ldr	r2, [r2, #4]
 80047c4:	4413      	add	r3, r2
 80047c6:	781b      	ldrb	r3, [r3, #0]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80047c8:	2b7e      	cmp	r3, #126	@ 0x7e
 80047ca:	d806      	bhi.n	80047da <MAX72_Scroll_Process+0x2e6>
						' ' : scroll_state.text[scroll_state.current_char_idx];
 80047cc:	4b12      	ldr	r3, [pc, #72]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a11      	ldr	r2, [pc, #68]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 80047d2:	6852      	ldr	r2, [r2, #4]
 80047d4:	4413      	add	r3, r2
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	e000      	b.n	80047dc <MAX72_Scroll_Process+0x2e8>
 80047da:	2320      	movs	r3, #32
 80047dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 80047de:	7213      	strb	r3, [r2, #8]
                scroll_state.current_col = 0;
 80047e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 80047e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	729a      	strb	r2, [r3, #10]
                scroll_state.padding_counter = 0;
 80047ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	72da      	strb	r2, [r3, #11]
                scroll_state.state = 0;
 80047f2:	4b09      	ldr	r3, [pc, #36]	@ (8004818 <MAX72_Scroll_Process+0x324>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	731a      	strb	r2, [r3, #12]
            }
            break;
 80047f8:	e003      	b.n	8004802 <MAX72_Scroll_Process+0x30e>
            break;
 80047fa:	bf00      	nop
 80047fc:	e002      	b.n	8004804 <MAX72_Scroll_Process+0x310>
            break;
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <MAX72_Scroll_Process+0x310>
            break;
 8004802:	bf00      	nop
        }
    }

    // Aggiorna il display
    MAX72_SendFrame();
 8004804:	f7ff fdd2 	bl	80043ac <MAX72_SendFrame>
 8004808:	e000      	b.n	800480c <MAX72_Scroll_Process+0x318>
    if (!scroll_state.enabled || !scroll_state.text) return;
 800480a:	bf00      	nop
}
 800480c:	372c      	adds	r7, #44	@ 0x2c
 800480e:	46bd      	mov	sp, r7
 8004810:	bd90      	pop	{r4, r7, pc}
 8004812:	bf00      	nop
 8004814:	20000c24 	.word	0x20000c24
 8004818:	20000c44 	.word	0x20000c44

0800481c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 800481c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004854 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004820:	f7fd fa68 	bl	8001cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004824:	480c      	ldr	r0, [pc, #48]	@ (8004858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004826:	490d      	ldr	r1, [pc, #52]	@ (800485c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004828:	4a0d      	ldr	r2, [pc, #52]	@ (8004860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800482a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800482c:	e002      	b.n	8004834 <LoopCopyDataInit>

0800482e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800482e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004832:	3304      	adds	r3, #4

08004834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004838:	d3f9      	bcc.n	800482e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800483a:	4a0a      	ldr	r2, [pc, #40]	@ (8004864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800483c:	4c0a      	ldr	r4, [pc, #40]	@ (8004868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800483e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004840:	e001      	b.n	8004846 <LoopFillZerobss>

08004842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004844:	3204      	adds	r2, #4

08004846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004848:	d3fb      	bcc.n	8004842 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800484a:	f007 ff4f 	bl	800c6ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800484e:	f7fc feb1 	bl	80015b4 <main>
  bx  lr    
 8004852:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8004854:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800485c:	20000590 	.word	0x20000590
  ldr r2, =_sidata
 8004860:	080101a0 	.word	0x080101a0
  ldr r2, =_sbss
 8004864:	20000590 	.word	0x20000590
  ldr r4, =_ebss
 8004868:	20000da4 	.word	0x20000da4

0800486c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800486c:	e7fe      	b.n	800486c <ADC_IRQHandler>
	...

08004870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004874:	4b0e      	ldr	r3, [pc, #56]	@ (80048b0 <HAL_Init+0x40>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a0d      	ldr	r2, [pc, #52]	@ (80048b0 <HAL_Init+0x40>)
 800487a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800487e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004880:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <HAL_Init+0x40>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a0a      	ldr	r2, [pc, #40]	@ (80048b0 <HAL_Init+0x40>)
 8004886:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800488a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800488c:	4b08      	ldr	r3, [pc, #32]	@ (80048b0 <HAL_Init+0x40>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a07      	ldr	r2, [pc, #28]	@ (80048b0 <HAL_Init+0x40>)
 8004892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004898:	2003      	movs	r0, #3
 800489a:	f000 fd5f 	bl	800535c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800489e:	2000      	movs	r0, #0
 80048a0:	f000 f808 	bl	80048b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048a4:	f7fd f8c4 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40023c00 	.word	0x40023c00

080048b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048bc:	4b12      	ldr	r3, [pc, #72]	@ (8004908 <HAL_InitTick+0x54>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b12      	ldr	r3, [pc, #72]	@ (800490c <HAL_InitTick+0x58>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	4619      	mov	r1, r3
 80048c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fd77 	bl	80053c6 <HAL_SYSTICK_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e00e      	b.n	8004900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b0f      	cmp	r3, #15
 80048e6:	d80a      	bhi.n	80048fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048e8:	2200      	movs	r2, #0
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048f0:	f000 fd3f 	bl	8005372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048f4:	4a06      	ldr	r2, [pc, #24]	@ (8004910 <HAL_InitTick+0x5c>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e000      	b.n	8004900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000004 	.word	0x20000004
 800490c:	200003c4 	.word	0x200003c4
 8004910:	200003c0 	.word	0x200003c0

08004914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004918:	4b06      	ldr	r3, [pc, #24]	@ (8004934 <HAL_IncTick+0x20>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	4b06      	ldr	r3, [pc, #24]	@ (8004938 <HAL_IncTick+0x24>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4413      	add	r3, r2
 8004924:	4a04      	ldr	r2, [pc, #16]	@ (8004938 <HAL_IncTick+0x24>)
 8004926:	6013      	str	r3, [r2, #0]
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	200003c4 	.word	0x200003c4
 8004938:	20000c54 	.word	0x20000c54

0800493c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return uwTick;
 8004940:	4b03      	ldr	r3, [pc, #12]	@ (8004950 <HAL_GetTick+0x14>)
 8004942:	681b      	ldr	r3, [r3, #0]
}
 8004944:	4618      	mov	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20000c54 	.word	0x20000c54

08004954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800495c:	f7ff ffee 	bl	800493c <HAL_GetTick>
 8004960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800496c:	d005      	beq.n	800497a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800496e:	4b0a      	ldr	r3, [pc, #40]	@ (8004998 <HAL_Delay+0x44>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800497a:	bf00      	nop
 800497c:	f7ff ffde 	bl	800493c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	429a      	cmp	r2, r3
 800498a:	d8f7      	bhi.n	800497c <HAL_Delay+0x28>
  {
  }
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	200003c4 	.word	0x200003c4

0800499c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e033      	b.n	8004a1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fc fbb2 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d118      	bne.n	8004a0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80049e2:	f023 0302 	bic.w	r3, r3, #2
 80049e6:	f043 0202 	orr.w	r2, r3, #2
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fae8 	bl	8004fc4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	f043 0201 	orr.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a0a:	e001      	b.n	8004a10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_Start+0x1a>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e0b2      	b.n	8004ba4 <HAL_ADC_Start+0x180>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d018      	beq.n	8004a86 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0201 	orr.w	r2, r2, #1
 8004a62:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a64:	4b52      	ldr	r3, [pc, #328]	@ (8004bb0 <HAL_ADC_Start+0x18c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a52      	ldr	r2, [pc, #328]	@ (8004bb4 <HAL_ADC_Start+0x190>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	0c9a      	lsrs	r2, r3, #18
 8004a70:	4613      	mov	r3, r2
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	4413      	add	r3, r2
 8004a76:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004a78:	e002      	b.n	8004a80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f9      	bne.n	8004a7a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d17a      	bne.n	8004b8a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a98:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004a9c:	f023 0301 	bic.w	r3, r3, #1
 8004aa0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004abe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad2:	d106      	bne.n	8004ae2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad8:	f023 0206 	bic.w	r2, r3, #6
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ae0:	e002      	b.n	8004ae8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004af0:	4b31      	ldr	r3, [pc, #196]	@ (8004bb8 <HAL_ADC_Start+0x194>)
 8004af2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004afc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d12a      	bne.n	8004b60 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a2b      	ldr	r2, [pc, #172]	@ (8004bbc <HAL_ADC_Start+0x198>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d015      	beq.n	8004b40 <HAL_ADC_Start+0x11c>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a29      	ldr	r2, [pc, #164]	@ (8004bc0 <HAL_ADC_Start+0x19c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d105      	bne.n	8004b2a <HAL_ADC_Start+0x106>
 8004b1e:	4b26      	ldr	r3, [pc, #152]	@ (8004bb8 <HAL_ADC_Start+0x194>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a25      	ldr	r2, [pc, #148]	@ (8004bc4 <HAL_ADC_Start+0x1a0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d136      	bne.n	8004ba2 <HAL_ADC_Start+0x17e>
 8004b34:	4b20      	ldr	r3, [pc, #128]	@ (8004bb8 <HAL_ADC_Start+0x194>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d130      	bne.n	8004ba2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d129      	bne.n	8004ba2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b5c:	609a      	str	r2, [r3, #8]
 8004b5e:	e020      	b.n	8004ba2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a15      	ldr	r2, [pc, #84]	@ (8004bbc <HAL_ADC_Start+0x198>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d11b      	bne.n	8004ba2 <HAL_ADC_Start+0x17e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d114      	bne.n	8004ba2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b86:	609a      	str	r2, [r3, #8]
 8004b88:	e00b      	b.n	8004ba2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8e:	f043 0210 	orr.w	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9a:	f043 0201 	orr.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	20000004 	.word	0x20000004
 8004bb4:	431bde83 	.word	0x431bde83
 8004bb8:	40012300 	.word	0x40012300
 8004bbc:	40012000 	.word	0x40012000
 8004bc0:	40012100 	.word	0x40012100
 8004bc4:	40012200 	.word	0x40012200

08004bc8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_ADC_Stop+0x16>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e021      	b.n	8004c22 <HAL_ADC_Stop+0x5a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	f043 0201 	orr.w	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c4a:	d113      	bne.n	8004c74 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c5a:	d10b      	bne.n	8004c74 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e063      	b.n	8004d3c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c74:	f7ff fe62 	bl	800493c <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c7a:	e021      	b.n	8004cc0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c82:	d01d      	beq.n	8004cc0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <HAL_ADC_PollForConversion+0x6c>
 8004c8a:	f7ff fe57 	bl	800493c <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d212      	bcs.n	8004cc0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d00b      	beq.n	8004cc0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cac:	f043 0204 	orr.w	r2, r3, #4
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e03d      	b.n	8004d3c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d1d6      	bne.n	8004c7c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f06f 0212 	mvn.w	r2, #18
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cdc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d123      	bne.n	8004d3a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d11f      	bne.n	8004d3a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d00:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d006      	beq.n	8004d16 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d111      	bne.n	8004d3a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d105      	bne.n	8004d3a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d32:	f043 0201 	orr.w	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
	...

08004d60 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0x1c>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e113      	b.n	8004fa4 <HAL_ADC_ConfigChannel+0x244>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b09      	cmp	r3, #9
 8004d8a:	d925      	bls.n	8004dd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68d9      	ldr	r1, [r3, #12]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	4413      	add	r3, r2
 8004da0:	3b1e      	subs	r3, #30
 8004da2:	2207      	movs	r2, #7
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	43da      	mvns	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	400a      	ands	r2, r1
 8004db0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68d9      	ldr	r1, [r3, #12]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	4403      	add	r3, r0
 8004dca:	3b1e      	subs	r3, #30
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	60da      	str	r2, [r3, #12]
 8004dd6:	e022      	b.n	8004e1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6919      	ldr	r1, [r3, #16]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	4613      	mov	r3, r2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	4413      	add	r3, r2
 8004dec:	2207      	movs	r2, #7
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43da      	mvns	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	400a      	ands	r2, r1
 8004dfa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6919      	ldr	r1, [r3, #16]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	4603      	mov	r3, r0
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	4403      	add	r3, r0
 8004e14:	409a      	lsls	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b06      	cmp	r3, #6
 8004e24:	d824      	bhi.n	8004e70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	3b05      	subs	r3, #5
 8004e38:	221f      	movs	r2, #31
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	43da      	mvns	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	400a      	ands	r2, r1
 8004e46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	4618      	mov	r0, r3
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	3b05      	subs	r3, #5
 8004e62:	fa00 f203 	lsl.w	r2, r0, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e6e:	e04c      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b0c      	cmp	r3, #12
 8004e76:	d824      	bhi.n	8004ec2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	3b23      	subs	r3, #35	@ 0x23
 8004e8a:	221f      	movs	r2, #31
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	43da      	mvns	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	400a      	ands	r2, r1
 8004e98:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3b23      	subs	r3, #35	@ 0x23
 8004eb4:	fa00 f203 	lsl.w	r2, r0, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ec0:	e023      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	3b41      	subs	r3, #65	@ 0x41
 8004ed4:	221f      	movs	r2, #31
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43da      	mvns	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	3b41      	subs	r3, #65	@ 0x41
 8004efe:	fa00 f203 	lsl.w	r2, r0, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f0a:	4b29      	ldr	r3, [pc, #164]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x250>)
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a28      	ldr	r2, [pc, #160]	@ (8004fb4 <HAL_ADC_ConfigChannel+0x254>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d10f      	bne.n	8004f38 <HAL_ADC_ConfigChannel+0x1d8>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b12      	cmp	r3, #18
 8004f1e:	d10b      	bne.n	8004f38 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb4 <HAL_ADC_ConfigChannel+0x254>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d12b      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x23a>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb8 <HAL_ADC_ConfigChannel+0x258>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <HAL_ADC_ConfigChannel+0x1f4>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b11      	cmp	r3, #17
 8004f52:	d122      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a11      	ldr	r2, [pc, #68]	@ (8004fb8 <HAL_ADC_ConfigChannel+0x258>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d111      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f76:	4b11      	ldr	r3, [pc, #68]	@ (8004fbc <HAL_ADC_ConfigChannel+0x25c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a11      	ldr	r2, [pc, #68]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x260>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	0c9a      	lsrs	r2, r3, #18
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f8c:	e002      	b.n	8004f94 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f9      	bne.n	8004f8e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	40012300 	.word	0x40012300
 8004fb4:	40012000 	.word	0x40012000
 8004fb8:	10000012 	.word	0x10000012
 8004fbc:	20000004 	.word	0x20000004
 8004fc0:	431bde83 	.word	0x431bde83

08004fc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fcc:	4b79      	ldr	r3, [pc, #484]	@ (80051b4 <ADC_Init+0x1f0>)
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ff8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6859      	ldr	r1, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	021a      	lsls	r2, r3, #8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800501c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6859      	ldr	r1, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800503e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6899      	ldr	r1, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005056:	4a58      	ldr	r2, [pc, #352]	@ (80051b8 <ADC_Init+0x1f4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d022      	beq.n	80050a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800506a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6899      	ldr	r1, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800508c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6899      	ldr	r1, [r3, #8]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	609a      	str	r2, [r3, #8]
 80050a0:	e00f      	b.n	80050c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80050b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80050c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0202 	bic.w	r2, r2, #2
 80050d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6899      	ldr	r1, [r3, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	7e1b      	ldrb	r3, [r3, #24]
 80050dc:	005a      	lsls	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01b      	beq.n	8005128 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800510e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	3b01      	subs	r3, #1
 800511c:	035a      	lsls	r2, r3, #13
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]
 8005126:	e007      	b.n	8005138 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005136:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005146:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	3b01      	subs	r3, #1
 8005154:	051a      	lsls	r2, r3, #20
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800516c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6899      	ldr	r1, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800517a:	025a      	lsls	r2, r3, #9
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005192:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6899      	ldr	r1, [r3, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	029a      	lsls	r2, r3, #10
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	40012300 	.word	0x40012300
 80051b8:	0f000001 	.word	0x0f000001

080051bc <__NVIC_SetPriorityGrouping>:
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005200 <__NVIC_SetPriorityGrouping+0x44>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80051d8:	4013      	ands	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80051e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051ee:	4a04      	ldr	r2, [pc, #16]	@ (8005200 <__NVIC_SetPriorityGrouping+0x44>)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	60d3      	str	r3, [r2, #12]
}
 80051f4:	bf00      	nop
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	e000ed00 	.word	0xe000ed00

08005204 <__NVIC_GetPriorityGrouping>:
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005208:	4b04      	ldr	r3, [pc, #16]	@ (800521c <__NVIC_GetPriorityGrouping+0x18>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	0a1b      	lsrs	r3, r3, #8
 800520e:	f003 0307 	and.w	r3, r3, #7
}
 8005212:	4618      	mov	r0, r3
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	e000ed00 	.word	0xe000ed00

08005220 <__NVIC_EnableIRQ>:
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800522a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522e:	2b00      	cmp	r3, #0
 8005230:	db0b      	blt.n	800524a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	f003 021f 	and.w	r2, r3, #31
 8005238:	4907      	ldr	r1, [pc, #28]	@ (8005258 <__NVIC_EnableIRQ+0x38>)
 800523a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	2001      	movs	r0, #1
 8005242:	fa00 f202 	lsl.w	r2, r0, r2
 8005246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	e000e100 	.word	0xe000e100

0800525c <__NVIC_SetPriority>:
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	6039      	str	r1, [r7, #0]
 8005266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526c:	2b00      	cmp	r3, #0
 800526e:	db0a      	blt.n	8005286 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	b2da      	uxtb	r2, r3
 8005274:	490c      	ldr	r1, [pc, #48]	@ (80052a8 <__NVIC_SetPriority+0x4c>)
 8005276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800527a:	0112      	lsls	r2, r2, #4
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	440b      	add	r3, r1
 8005280:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005284:	e00a      	b.n	800529c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	4908      	ldr	r1, [pc, #32]	@ (80052ac <__NVIC_SetPriority+0x50>)
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	3b04      	subs	r3, #4
 8005294:	0112      	lsls	r2, r2, #4
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	440b      	add	r3, r1
 800529a:	761a      	strb	r2, [r3, #24]
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	e000e100 	.word	0xe000e100
 80052ac:	e000ed00 	.word	0xe000ed00

080052b0 <NVIC_EncodePriority>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	b089      	sub	sp, #36	@ 0x24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f1c3 0307 	rsb	r3, r3, #7
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	bf28      	it	cs
 80052ce:	2304      	movcs	r3, #4
 80052d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	3304      	adds	r3, #4
 80052d6:	2b06      	cmp	r3, #6
 80052d8:	d902      	bls.n	80052e0 <NVIC_EncodePriority+0x30>
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	3b03      	subs	r3, #3
 80052de:	e000      	b.n	80052e2 <NVIC_EncodePriority+0x32>
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43da      	mvns	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	401a      	ands	r2, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005302:	43d9      	mvns	r1, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005308:	4313      	orrs	r3, r2
}
 800530a:	4618      	mov	r0, r3
 800530c:	3724      	adds	r7, #36	@ 0x24
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
	...

08005318 <SysTick_Config>:
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3b01      	subs	r3, #1
 8005324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005328:	d301      	bcc.n	800532e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800532a:	2301      	movs	r3, #1
 800532c:	e00f      	b.n	800534e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800532e:	4a0a      	ldr	r2, [pc, #40]	@ (8005358 <SysTick_Config+0x40>)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3b01      	subs	r3, #1
 8005334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005336:	210f      	movs	r1, #15
 8005338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800533c:	f7ff ff8e 	bl	800525c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005340:	4b05      	ldr	r3, [pc, #20]	@ (8005358 <SysTick_Config+0x40>)
 8005342:	2200      	movs	r2, #0
 8005344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005346:	4b04      	ldr	r3, [pc, #16]	@ (8005358 <SysTick_Config+0x40>)
 8005348:	2207      	movs	r2, #7
 800534a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	e000e010 	.word	0xe000e010

0800535c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ff29 	bl	80051bc <__NVIC_SetPriorityGrouping>
}
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005372:	b580      	push	{r7, lr}
 8005374:	b086      	sub	sp, #24
 8005376:	af00      	add	r7, sp, #0
 8005378:	4603      	mov	r3, r0
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005384:	f7ff ff3e 	bl	8005204 <__NVIC_GetPriorityGrouping>
 8005388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	6978      	ldr	r0, [r7, #20]
 8005390:	f7ff ff8e 	bl	80052b0 <NVIC_EncodePriority>
 8005394:	4602      	mov	r2, r0
 8005396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800539a:	4611      	mov	r1, r2
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff ff5d 	bl	800525c <__NVIC_SetPriority>
}
 80053a2:	bf00      	nop
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	4603      	mov	r3, r0
 80053b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff ff31 	bl	8005220 <__NVIC_EnableIRQ>
}
 80053be:	bf00      	nop
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff ffa2 	bl	8005318 <SysTick_Config>
 80053d4:	4603      	mov	r3, r0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80053ec:	f7ff faa6 	bl	800493c <HAL_GetTick>
 80053f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e099      	b.n	8005530 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800541c:	e00f      	b.n	800543e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800541e:	f7ff fa8d 	bl	800493c <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b05      	cmp	r3, #5
 800542a:	d908      	bls.n	800543e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2203      	movs	r2, #3
 8005436:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e078      	b.n	8005530 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e8      	bne.n	800541e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4b38      	ldr	r3, [pc, #224]	@ (8005538 <HAL_DMA_Init+0x158>)
 8005458:	4013      	ands	r3, r2
 800545a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800546a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	2b04      	cmp	r3, #4
 8005496:	d107      	bne.n	80054a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a0:	4313      	orrs	r3, r2
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f023 0307 	bic.w	r3, r3, #7
 80054be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d117      	bne.n	8005502 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00e      	beq.n	8005502 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fb0d 	bl	8005b04 <DMA_CheckFifoParam>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d008      	beq.n	8005502 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2240      	movs	r2, #64	@ 0x40
 80054f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80054fe:	2301      	movs	r3, #1
 8005500:	e016      	b.n	8005530 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fac4 	bl	8005a98 <DMA_CalcBaseAndBitshift>
 8005510:	4603      	mov	r3, r0
 8005512:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005518:	223f      	movs	r2, #63	@ 0x3f
 800551a:	409a      	lsls	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	f010803f 	.word	0xf010803f

0800553c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005552:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_DMA_Start_IT+0x26>
 800555e:	2302      	movs	r3, #2
 8005560:	e040      	b.n	80055e4 <HAL_DMA_Start_IT+0xa8>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b01      	cmp	r3, #1
 8005574:	d12f      	bne.n	80055d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2202      	movs	r2, #2
 800557a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 fa56 	bl	8005a3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005594:	223f      	movs	r2, #63	@ 0x3f
 8005596:	409a      	lsls	r2, r3
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0216 	orr.w	r2, r2, #22
 80055aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0208 	orr.w	r2, r2, #8
 80055c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	e005      	b.n	80055e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80055de:	2302      	movs	r3, #2
 80055e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80055e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80055fa:	f7ff f99f 	bl	800493c <HAL_GetTick>
 80055fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d008      	beq.n	800561e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2280      	movs	r2, #128	@ 0x80
 8005610:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e052      	b.n	80056c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0216 	bic.w	r2, r2, #22
 800562c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800563c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d103      	bne.n	800564e <HAL_DMA_Abort+0x62>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0208 	bic.w	r2, r2, #8
 800565c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0201 	bic.w	r2, r2, #1
 800566c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800566e:	e013      	b.n	8005698 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005670:	f7ff f964 	bl	800493c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b05      	cmp	r3, #5
 800567c:	d90c      	bls.n	8005698 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2203      	movs	r2, #3
 8005688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e015      	b.n	80056c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e4      	bne.n	8005670 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056aa:	223f      	movs	r2, #63	@ 0x3f
 80056ac:	409a      	lsls	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d004      	beq.n	80056ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2280      	movs	r2, #128	@ 0x80
 80056e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e00c      	b.n	8005704 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2205      	movs	r2, #5
 80056ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0201 	bic.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800571c:	4b8e      	ldr	r3, [pc, #568]	@ (8005958 <HAL_DMA_IRQHandler+0x248>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a8e      	ldr	r2, [pc, #568]	@ (800595c <HAL_DMA_IRQHandler+0x24c>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	0a9b      	lsrs	r3, r3, #10
 8005728:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800573a:	2208      	movs	r2, #8
 800573c:	409a      	lsls	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d01a      	beq.n	800577c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d013      	beq.n	800577c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0204 	bic.w	r2, r2, #4
 8005762:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005768:	2208      	movs	r2, #8
 800576a:	409a      	lsls	r2, r3
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005774:	f043 0201 	orr.w	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005780:	2201      	movs	r2, #1
 8005782:	409a      	lsls	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d012      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00b      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579e:	2201      	movs	r2, #1
 80057a0:	409a      	lsls	r2, r3
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057aa:	f043 0202 	orr.w	r2, r3, #2
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b6:	2204      	movs	r2, #4
 80057b8:	409a      	lsls	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4013      	ands	r3, r2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d012      	beq.n	80057e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00b      	beq.n	80057e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d4:	2204      	movs	r2, #4
 80057d6:	409a      	lsls	r2, r3
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e0:	f043 0204 	orr.w	r2, r3, #4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ec:	2210      	movs	r2, #16
 80057ee:	409a      	lsls	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d043      	beq.n	8005880 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d03c      	beq.n	8005880 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800580a:	2210      	movs	r2, #16
 800580c:	409a      	lsls	r2, r3
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d018      	beq.n	8005852 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d108      	bne.n	8005840 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d024      	beq.n	8005880 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	4798      	blx	r3
 800583e:	e01f      	b.n	8005880 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01b      	beq.n	8005880 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	4798      	blx	r3
 8005850:	e016      	b.n	8005880 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d107      	bne.n	8005870 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0208 	bic.w	r2, r2, #8
 800586e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005884:	2220      	movs	r2, #32
 8005886:	409a      	lsls	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 808f 	beq.w	80059b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 8087 	beq.w	80059b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a6:	2220      	movs	r2, #32
 80058a8:	409a      	lsls	r2, r3
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d136      	bne.n	8005928 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0216 	bic.w	r2, r2, #22
 80058c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <HAL_DMA_IRQHandler+0x1da>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0208 	bic.w	r2, r2, #8
 80058f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058fe:	223f      	movs	r2, #63	@ 0x3f
 8005900:	409a      	lsls	r2, r3
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591a:	2b00      	cmp	r3, #0
 800591c:	d07e      	beq.n	8005a1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
        }
        return;
 8005926:	e079      	b.n	8005a1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01d      	beq.n	8005972 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10d      	bne.n	8005960 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005948:	2b00      	cmp	r3, #0
 800594a:	d031      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	4798      	blx	r3
 8005954:	e02c      	b.n	80059b0 <HAL_DMA_IRQHandler+0x2a0>
 8005956:	bf00      	nop
 8005958:	20000004 	.word	0x20000004
 800595c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005964:	2b00      	cmp	r3, #0
 8005966:	d023      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	4798      	blx	r3
 8005970:	e01e      	b.n	80059b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10f      	bne.n	80059a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0210 	bic.w	r2, r2, #16
 800598e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d032      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d022      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2205      	movs	r2, #5
 80059c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	3301      	adds	r3, #1
 80059e0:	60bb      	str	r3, [r7, #8]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d307      	bcc.n	80059f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f2      	bne.n	80059dc <HAL_DMA_IRQHandler+0x2cc>
 80059f6:	e000      	b.n	80059fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80059f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	4798      	blx	r3
 8005a1a:	e000      	b.n	8005a1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a1c:	bf00      	nop
    }
  }
}
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b40      	cmp	r3, #64	@ 0x40
 8005a68:	d108      	bne.n	8005a7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a7a:	e007      	b.n	8005a8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	60da      	str	r2, [r3, #12]
}
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	3b10      	subs	r3, #16
 8005aa8:	4a14      	ldr	r2, [pc, #80]	@ (8005afc <DMA_CalcBaseAndBitshift+0x64>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	091b      	lsrs	r3, r3, #4
 8005ab0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ab2:	4a13      	ldr	r2, [pc, #76]	@ (8005b00 <DMA_CalcBaseAndBitshift+0x68>)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d909      	bls.n	8005ada <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	1d1a      	adds	r2, r3, #4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ad8:	e007      	b.n	8005aea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005ae2:	f023 0303 	bic.w	r3, r3, #3
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	aaaaaaab 	.word	0xaaaaaaab
 8005b00:	0800fd10 	.word	0x0800fd10

08005b04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d11f      	bne.n	8005b5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d856      	bhi.n	8005bd2 <DMA_CheckFifoParam+0xce>
 8005b24:	a201      	add	r2, pc, #4	@ (adr r2, 8005b2c <DMA_CheckFifoParam+0x28>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b3d 	.word	0x08005b3d
 8005b30:	08005b4f 	.word	0x08005b4f
 8005b34:	08005b3d 	.word	0x08005b3d
 8005b38:	08005bd3 	.word	0x08005bd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d046      	beq.n	8005bd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b4c:	e043      	b.n	8005bd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b56:	d140      	bne.n	8005bda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b5c:	e03d      	b.n	8005bda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b66:	d121      	bne.n	8005bac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d837      	bhi.n	8005bde <DMA_CheckFifoParam+0xda>
 8005b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b74 <DMA_CheckFifoParam+0x70>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005b85 	.word	0x08005b85
 8005b78:	08005b8b 	.word	0x08005b8b
 8005b7c:	08005b85 	.word	0x08005b85
 8005b80:	08005b9d 	.word	0x08005b9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	73fb      	strb	r3, [r7, #15]
      break;
 8005b88:	e030      	b.n	8005bec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d025      	beq.n	8005be2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b9a:	e022      	b.n	8005be2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ba4:	d11f      	bne.n	8005be6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005baa:	e01c      	b.n	8005be6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d903      	bls.n	8005bba <DMA_CheckFifoParam+0xb6>
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d003      	beq.n	8005bc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005bb8:	e018      	b.n	8005bec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8005bbe:	e015      	b.n	8005bec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00e      	beq.n	8005bea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd0:	e00b      	b.n	8005bea <DMA_CheckFifoParam+0xe6>
      break;
 8005bd2:	bf00      	nop
 8005bd4:	e00a      	b.n	8005bec <DMA_CheckFifoParam+0xe8>
      break;
 8005bd6:	bf00      	nop
 8005bd8:	e008      	b.n	8005bec <DMA_CheckFifoParam+0xe8>
      break;
 8005bda:	bf00      	nop
 8005bdc:	e006      	b.n	8005bec <DMA_CheckFifoParam+0xe8>
      break;
 8005bde:	bf00      	nop
 8005be0:	e004      	b.n	8005bec <DMA_CheckFifoParam+0xe8>
      break;
 8005be2:	bf00      	nop
 8005be4:	e002      	b.n	8005bec <DMA_CheckFifoParam+0xe8>
      break;   
 8005be6:	bf00      	nop
 8005be8:	e000      	b.n	8005bec <DMA_CheckFifoParam+0xe8>
      break;
 8005bea:	bf00      	nop
    }
  } 
  
  return status; 
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop

08005bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b089      	sub	sp, #36	@ 0x24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c12:	2300      	movs	r3, #0
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	e165      	b.n	8005ee4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c18:	2201      	movs	r2, #1
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	f040 8154 	bne.w	8005ede <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d005      	beq.n	8005c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d130      	bne.n	8005cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	2203      	movs	r2, #3
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	43db      	mvns	r3, r3
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	4013      	ands	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c84:	2201      	movs	r2, #1
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	4013      	ands	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	091b      	lsrs	r3, r3, #4
 8005c9a:	f003 0201 	and.w	r2, r3, #1
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d017      	beq.n	8005cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	2203      	movs	r2, #3
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d123      	bne.n	8005d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	08da      	lsrs	r2, r3, #3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3208      	adds	r2, #8
 8005d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	220f      	movs	r2, #15
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	43db      	mvns	r3, r3
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	08da      	lsrs	r2, r3, #3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	3208      	adds	r2, #8
 8005d3a:	69b9      	ldr	r1, [r7, #24]
 8005d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	2203      	movs	r2, #3
 8005d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d50:	43db      	mvns	r3, r3
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	4013      	ands	r3, r2
 8005d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f003 0203 	and.w	r2, r3, #3
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	fa02 f303 	lsl.w	r3, r2, r3
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 80ae 	beq.w	8005ede <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	4b5d      	ldr	r3, [pc, #372]	@ (8005efc <HAL_GPIO_Init+0x300>)
 8005d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8a:	4a5c      	ldr	r2, [pc, #368]	@ (8005efc <HAL_GPIO_Init+0x300>)
 8005d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d92:	4b5a      	ldr	r3, [pc, #360]	@ (8005efc <HAL_GPIO_Init+0x300>)
 8005d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d9e:	4a58      	ldr	r2, [pc, #352]	@ (8005f00 <HAL_GPIO_Init+0x304>)
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	089b      	lsrs	r3, r3, #2
 8005da4:	3302      	adds	r3, #2
 8005da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	220f      	movs	r2, #15
 8005db6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a4f      	ldr	r2, [pc, #316]	@ (8005f04 <HAL_GPIO_Init+0x308>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d025      	beq.n	8005e16 <HAL_GPIO_Init+0x21a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a4e      	ldr	r2, [pc, #312]	@ (8005f08 <HAL_GPIO_Init+0x30c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d01f      	beq.n	8005e12 <HAL_GPIO_Init+0x216>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a4d      	ldr	r2, [pc, #308]	@ (8005f0c <HAL_GPIO_Init+0x310>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d019      	beq.n	8005e0e <HAL_GPIO_Init+0x212>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a4c      	ldr	r2, [pc, #304]	@ (8005f10 <HAL_GPIO_Init+0x314>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <HAL_GPIO_Init+0x20e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a4b      	ldr	r2, [pc, #300]	@ (8005f14 <HAL_GPIO_Init+0x318>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00d      	beq.n	8005e06 <HAL_GPIO_Init+0x20a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a4a      	ldr	r2, [pc, #296]	@ (8005f18 <HAL_GPIO_Init+0x31c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d007      	beq.n	8005e02 <HAL_GPIO_Init+0x206>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a49      	ldr	r2, [pc, #292]	@ (8005f1c <HAL_GPIO_Init+0x320>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d101      	bne.n	8005dfe <HAL_GPIO_Init+0x202>
 8005dfa:	2306      	movs	r3, #6
 8005dfc:	e00c      	b.n	8005e18 <HAL_GPIO_Init+0x21c>
 8005dfe:	2307      	movs	r3, #7
 8005e00:	e00a      	b.n	8005e18 <HAL_GPIO_Init+0x21c>
 8005e02:	2305      	movs	r3, #5
 8005e04:	e008      	b.n	8005e18 <HAL_GPIO_Init+0x21c>
 8005e06:	2304      	movs	r3, #4
 8005e08:	e006      	b.n	8005e18 <HAL_GPIO_Init+0x21c>
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e004      	b.n	8005e18 <HAL_GPIO_Init+0x21c>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e002      	b.n	8005e18 <HAL_GPIO_Init+0x21c>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <HAL_GPIO_Init+0x21c>
 8005e16:	2300      	movs	r3, #0
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	f002 0203 	and.w	r2, r2, #3
 8005e1e:	0092      	lsls	r2, r2, #2
 8005e20:	4093      	lsls	r3, r2
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e28:	4935      	ldr	r1, [pc, #212]	@ (8005f00 <HAL_GPIO_Init+0x304>)
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	089b      	lsrs	r3, r3, #2
 8005e2e:	3302      	adds	r3, #2
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e36:	4b3a      	ldr	r3, [pc, #232]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4013      	ands	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e5a:	4a31      	ldr	r2, [pc, #196]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e60:	4b2f      	ldr	r3, [pc, #188]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e84:	4a26      	ldr	r2, [pc, #152]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e8a:	4b25      	ldr	r3, [pc, #148]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	43db      	mvns	r3, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4013      	ands	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005eae:	4a1c      	ldr	r2, [pc, #112]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ed8:	4a11      	ldr	r2, [pc, #68]	@ (8005f20 <HAL_GPIO_Init+0x324>)
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2b0f      	cmp	r3, #15
 8005ee8:	f67f ae96 	bls.w	8005c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005eec:	bf00      	nop
 8005eee:	bf00      	nop
 8005ef0:	3724      	adds	r7, #36	@ 0x24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40023800 	.word	0x40023800
 8005f00:	40013800 	.word	0x40013800
 8005f04:	40020000 	.word	0x40020000
 8005f08:	40020400 	.word	0x40020400
 8005f0c:	40020800 	.word	0x40020800
 8005f10:	40020c00 	.word	0x40020c00
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40021400 	.word	0x40021400
 8005f1c:	40021800 	.word	0x40021800
 8005f20:	40013c00 	.word	0x40013c00

08005f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	887b      	ldrh	r3, [r7, #2]
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	73fb      	strb	r3, [r7, #15]
 8005f40:	e001      	b.n	8005f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f42:	2300      	movs	r3, #0
 8005f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	807b      	strh	r3, [r7, #2]
 8005f60:	4613      	mov	r3, r2
 8005f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f64:	787b      	ldrb	r3, [r7, #1]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f6a:	887a      	ldrh	r2, [r7, #2]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f70:	e003      	b.n	8005f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f72:	887b      	ldrh	r3, [r7, #2]
 8005f74:	041a      	lsls	r2, r3, #16
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	619a      	str	r2, [r3, #24]
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f98:	887a      	ldrh	r2, [r7, #2]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	041a      	lsls	r2, r3, #16
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	43d9      	mvns	r1, r3
 8005fa4:	887b      	ldrh	r3, [r7, #2]
 8005fa6:	400b      	ands	r3, r1
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	619a      	str	r2, [r3, #24]
}
 8005fae:	bf00      	nop
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
	...

08005fbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005fc6:	4b08      	ldr	r3, [pc, #32]	@ (8005fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fc8:	695a      	ldr	r2, [r3, #20]
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d006      	beq.n	8005fe0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fd2:	4a05      	ldr	r2, [pc, #20]	@ (8005fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fd8:	88fb      	ldrh	r3, [r7, #6]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fb fc34 	bl	8001848 <HAL_GPIO_EXTI_Callback>
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40013c00 	.word	0x40013c00

08005fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e12b      	b.n	8006256 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fb fa2c 	bl	8001470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2224      	movs	r2, #36	@ 0x24
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800603e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800604e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006050:	f001 fbb6 	bl	80077c0 <HAL_RCC_GetPCLK1Freq>
 8006054:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	4a81      	ldr	r2, [pc, #516]	@ (8006260 <HAL_I2C_Init+0x274>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d807      	bhi.n	8006070 <HAL_I2C_Init+0x84>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4a80      	ldr	r2, [pc, #512]	@ (8006264 <HAL_I2C_Init+0x278>)
 8006064:	4293      	cmp	r3, r2
 8006066:	bf94      	ite	ls
 8006068:	2301      	movls	r3, #1
 800606a:	2300      	movhi	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	e006      	b.n	800607e <HAL_I2C_Init+0x92>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a7d      	ldr	r2, [pc, #500]	@ (8006268 <HAL_I2C_Init+0x27c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	bf94      	ite	ls
 8006078:	2301      	movls	r3, #1
 800607a:	2300      	movhi	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e0e7      	b.n	8006256 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a78      	ldr	r2, [pc, #480]	@ (800626c <HAL_I2C_Init+0x280>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	0c9b      	lsrs	r3, r3, #18
 8006090:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	4a6a      	ldr	r2, [pc, #424]	@ (8006260 <HAL_I2C_Init+0x274>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d802      	bhi.n	80060c0 <HAL_I2C_Init+0xd4>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	3301      	adds	r3, #1
 80060be:	e009      	b.n	80060d4 <HAL_I2C_Init+0xe8>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80060c6:	fb02 f303 	mul.w	r3, r2, r3
 80060ca:	4a69      	ldr	r2, [pc, #420]	@ (8006270 <HAL_I2C_Init+0x284>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	099b      	lsrs	r3, r3, #6
 80060d2:	3301      	adds	r3, #1
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6812      	ldr	r2, [r2, #0]
 80060d8:	430b      	orrs	r3, r1
 80060da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80060e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	495c      	ldr	r1, [pc, #368]	@ (8006260 <HAL_I2C_Init+0x274>)
 80060f0:	428b      	cmp	r3, r1
 80060f2:	d819      	bhi.n	8006128 <HAL_I2C_Init+0x13c>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	1e59      	subs	r1, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006102:	1c59      	adds	r1, r3, #1
 8006104:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006108:	400b      	ands	r3, r1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <HAL_I2C_Init+0x138>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1e59      	subs	r1, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	fbb1 f3f3 	udiv	r3, r1, r3
 800611c:	3301      	adds	r3, #1
 800611e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006122:	e051      	b.n	80061c8 <HAL_I2C_Init+0x1dc>
 8006124:	2304      	movs	r3, #4
 8006126:	e04f      	b.n	80061c8 <HAL_I2C_Init+0x1dc>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d111      	bne.n	8006154 <HAL_I2C_Init+0x168>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	1e58      	subs	r0, r3, #1
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6859      	ldr	r1, [r3, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	440b      	add	r3, r1
 800613e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006142:	3301      	adds	r3, #1
 8006144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006148:	2b00      	cmp	r3, #0
 800614a:	bf0c      	ite	eq
 800614c:	2301      	moveq	r3, #1
 800614e:	2300      	movne	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	e012      	b.n	800617a <HAL_I2C_Init+0x18e>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	1e58      	subs	r0, r3, #1
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6859      	ldr	r1, [r3, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	0099      	lsls	r1, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	fbb0 f3f3 	udiv	r3, r0, r3
 800616a:	3301      	adds	r3, #1
 800616c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_I2C_Init+0x196>
 800617e:	2301      	movs	r3, #1
 8006180:	e022      	b.n	80061c8 <HAL_I2C_Init+0x1dc>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10e      	bne.n	80061a8 <HAL_I2C_Init+0x1bc>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	1e58      	subs	r0, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6859      	ldr	r1, [r3, #4]
 8006192:	460b      	mov	r3, r1
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	440b      	add	r3, r1
 8006198:	fbb0 f3f3 	udiv	r3, r0, r3
 800619c:	3301      	adds	r3, #1
 800619e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061a6:	e00f      	b.n	80061c8 <HAL_I2C_Init+0x1dc>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	1e58      	subs	r0, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6859      	ldr	r1, [r3, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	0099      	lsls	r1, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80061be:	3301      	adds	r3, #1
 80061c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	6809      	ldr	r1, [r1, #0]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69da      	ldr	r2, [r3, #28]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80061f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6911      	ldr	r1, [r2, #16]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	68d2      	ldr	r2, [r2, #12]
 8006202:	4311      	orrs	r1, r2
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	430b      	orrs	r3, r1
 800620a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	695a      	ldr	r2, [r3, #20]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	000186a0 	.word	0x000186a0
 8006264:	001e847f 	.word	0x001e847f
 8006268:	003d08ff 	.word	0x003d08ff
 800626c:	431bde83 	.word	0x431bde83
 8006270:	10624dd3 	.word	0x10624dd3

08006274 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	4608      	mov	r0, r1
 800627e:	4611      	mov	r1, r2
 8006280:	461a      	mov	r2, r3
 8006282:	4603      	mov	r3, r0
 8006284:	817b      	strh	r3, [r7, #10]
 8006286:	460b      	mov	r3, r1
 8006288:	813b      	strh	r3, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800628e:	f7fe fb55 	bl	800493c <HAL_GetTick>
 8006292:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b20      	cmp	r3, #32
 800629e:	f040 80d9 	bne.w	8006454 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	2319      	movs	r3, #25
 80062a8:	2201      	movs	r2, #1
 80062aa:	496d      	ldr	r1, [pc, #436]	@ (8006460 <HAL_I2C_Mem_Write+0x1ec>)
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 ff5f 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
 80062ba:	e0cc      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_I2C_Mem_Write+0x56>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e0c5      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e2>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d007      	beq.n	80062f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2221      	movs	r2, #33	@ 0x21
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2240      	movs	r2, #64	@ 0x40
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a3a      	ldr	r2, [r7, #32]
 800631a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006320:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a4d      	ldr	r2, [pc, #308]	@ (8006464 <HAL_I2C_Mem_Write+0x1f0>)
 8006330:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006332:	88f8      	ldrh	r0, [r7, #6]
 8006334:	893a      	ldrh	r2, [r7, #8]
 8006336:	8979      	ldrh	r1, [r7, #10]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	4603      	mov	r3, r0
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fc7a 	bl	8006c3c <I2C_RequestMemoryWrite>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d052      	beq.n	80063f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e081      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f001 f824 	bl	80073a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00d      	beq.n	800637e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	2b04      	cmp	r3, #4
 8006368:	d107      	bne.n	800637a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e06b      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006382:	781a      	ldrb	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d11b      	bne.n	80063f4 <HAL_I2C_Mem_Write+0x180>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d017      	beq.n	80063f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	781a      	ldrb	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1aa      	bne.n	8006352 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f001 f817 	bl	8007434 <I2C_WaitOnBTFFlagUntilTimeout>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00d      	beq.n	8006428 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006410:	2b04      	cmp	r3, #4
 8006412:	d107      	bne.n	8006424 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006422:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e016      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	e000      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	00100002 	.word	0x00100002
 8006464:	ffff0000 	.word	0xffff0000

08006468 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08c      	sub	sp, #48	@ 0x30
 800646c:	af02      	add	r7, sp, #8
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	4608      	mov	r0, r1
 8006472:	4611      	mov	r1, r2
 8006474:	461a      	mov	r2, r3
 8006476:	4603      	mov	r3, r0
 8006478:	817b      	strh	r3, [r7, #10]
 800647a:	460b      	mov	r3, r1
 800647c:	813b      	strh	r3, [r7, #8]
 800647e:	4613      	mov	r3, r2
 8006480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006482:	f7fe fa5b 	bl	800493c <HAL_GetTick>
 8006486:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b20      	cmp	r3, #32
 8006492:	f040 8214 	bne.w	80068be <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	2319      	movs	r3, #25
 800649c:	2201      	movs	r2, #1
 800649e:	497b      	ldr	r1, [pc, #492]	@ (800668c <HAL_I2C_Mem_Read+0x224>)
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 fe65 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
 80064ae:	e207      	b.n	80068c0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_I2C_Mem_Read+0x56>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e200      	b.n	80068c0 <HAL_I2C_Mem_Read+0x458>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d007      	beq.n	80064e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2222      	movs	r2, #34	@ 0x22
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2240      	movs	r2, #64	@ 0x40
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800650e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006514:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a5b      	ldr	r2, [pc, #364]	@ (8006690 <HAL_I2C_Mem_Read+0x228>)
 8006524:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006526:	88f8      	ldrh	r0, [r7, #6]
 8006528:	893a      	ldrh	r2, [r7, #8]
 800652a:	8979      	ldrh	r1, [r7, #10]
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	4603      	mov	r3, r0
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 fc16 	bl	8006d68 <I2C_RequestMemoryRead>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e1bc      	b.n	80068c0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d113      	bne.n	8006576 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800654e:	2300      	movs	r3, #0
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	623b      	str	r3, [r7, #32]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	623b      	str	r3, [r7, #32]
 8006562:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e190      	b.n	8006898 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800657a:	2b01      	cmp	r3, #1
 800657c:	d11b      	bne.n	80065b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800658c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800658e:	2300      	movs	r3, #0
 8006590:	61fb      	str	r3, [r7, #28]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	61fb      	str	r3, [r7, #28]
 80065a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	e170      	b.n	8006898 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d11b      	bne.n	80065f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065de:	2300      	movs	r3, #0
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	e150      	b.n	8006898 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800660c:	e144      	b.n	8006898 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006612:	2b03      	cmp	r3, #3
 8006614:	f200 80f1 	bhi.w	80067fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800661c:	2b01      	cmp	r3, #1
 800661e:	d123      	bne.n	8006668 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006622:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 ff4d 	bl	80074c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e145      	b.n	80068c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006666:	e117      	b.n	8006898 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800666c:	2b02      	cmp	r3, #2
 800666e:	d14e      	bne.n	800670e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006676:	2200      	movs	r2, #0
 8006678:	4906      	ldr	r1, [pc, #24]	@ (8006694 <HAL_I2C_Mem_Read+0x22c>)
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fd78 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d008      	beq.n	8006698 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e11a      	b.n	80068c0 <HAL_I2C_Mem_Read+0x458>
 800668a:	bf00      	nop
 800668c:	00100002 	.word	0x00100002
 8006690:	ffff0000 	.word	0xffff0000
 8006694:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691a      	ldr	r2, [r3, #16]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691a      	ldr	r2, [r3, #16]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800670c:	e0c4      	b.n	8006898 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006714:	2200      	movs	r2, #0
 8006716:	496c      	ldr	r1, [pc, #432]	@ (80068c8 <HAL_I2C_Mem_Read+0x460>)
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 fd29 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e0cb      	b.n	80068c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	691a      	ldr	r2, [r3, #16]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006760:	b29b      	uxth	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006770:	2200      	movs	r2, #0
 8006772:	4955      	ldr	r1, [pc, #340]	@ (80068c8 <HAL_I2C_Mem_Read+0x460>)
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fcfb 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e09d      	b.n	80068c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80067f8:	e04e      	b.n	8006898 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fe60 	bl	80074c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e058      	b.n	80068c0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800682a:	3b01      	subs	r3, #1
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b04      	cmp	r3, #4
 800684c:	d124      	bne.n	8006898 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006852:	2b03      	cmp	r3, #3
 8006854:	d107      	bne.n	8006866 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006864:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800688e:	b29b      	uxth	r3, r3
 8006890:	3b01      	subs	r3, #1
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800689c:	2b00      	cmp	r3, #0
 800689e:	f47f aeb6 	bne.w	800660e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e000      	b.n	80068c0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80068be:	2302      	movs	r3, #2
  }
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3728      	adds	r7, #40	@ 0x28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	00010004 	.word	0x00010004

080068cc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08c      	sub	sp, #48	@ 0x30
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	4608      	mov	r0, r1
 80068d6:	4611      	mov	r1, r2
 80068d8:	461a      	mov	r2, r3
 80068da:	4603      	mov	r3, r0
 80068dc:	817b      	strh	r3, [r7, #10]
 80068de:	460b      	mov	r3, r1
 80068e0:	813b      	strh	r3, [r7, #8]
 80068e2:	4613      	mov	r3, r2
 80068e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068e6:	f7fe f829 	bl	800493c <HAL_GetTick>
 80068ea:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b20      	cmp	r3, #32
 80068fa:	f040 8172 	bne.w	8006be2 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80068fe:	4b93      	ldr	r3, [pc, #588]	@ (8006b4c <HAL_I2C_Mem_Read_DMA+0x280>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	08db      	lsrs	r3, r3, #3
 8006904:	4a92      	ldr	r2, [pc, #584]	@ (8006b50 <HAL_I2C_Mem_Read_DMA+0x284>)
 8006906:	fba2 2303 	umull	r2, r3, r2, r3
 800690a:	0a1a      	lsrs	r2, r3, #8
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	009a      	lsls	r2, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	3b01      	subs	r3, #1
 800691c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d112      	bne.n	800694a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2220      	movs	r2, #32
 800692e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693e:	f043 0220 	orr.w	r2, r3, #32
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8006946:	2302      	movs	r3, #2
 8006948:	e14c      	b.n	8006be4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b02      	cmp	r3, #2
 8006956:	d0df      	beq.n	8006918 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_I2C_Mem_Read_DMA+0x9a>
 8006962:	2302      	movs	r3, #2
 8006964:	e13e      	b.n	8006be4 <HAL_I2C_Mem_Read_DMA+0x318>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b01      	cmp	r3, #1
 800697a:	d007      	beq.n	800698c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800699a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2222      	movs	r2, #34	@ 0x22
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2240      	movs	r2, #64	@ 0x40
 80069a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80069bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4a62      	ldr	r2, [pc, #392]	@ (8006b54 <HAL_I2C_Mem_Read_DMA+0x288>)
 80069cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80069ce:	897a      	ldrh	r2, [r7, #10]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80069d4:	893a      	ldrh	r2, [r7, #8]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80069da:	88fa      	ldrh	r2, [r7, #6]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 80cc 	beq.w	8006b88 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d02d      	beq.n	8006a54 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fc:	4a56      	ldr	r2, [pc, #344]	@ (8006b58 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80069fe:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a04:	4a55      	ldr	r2, [pc, #340]	@ (8006b5c <HAL_I2C_Mem_Read_DMA+0x290>)
 8006a06:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a14:	2200      	movs	r2, #0
 8006a16:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a24:	2200      	movs	r2, #0
 8006a26:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3310      	adds	r3, #16
 8006a32:	4619      	mov	r1, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a38:	461a      	mov	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a3e:	f7fe fd7d 	bl	800553c <HAL_DMA_Start_IT>
 8006a42:	4603      	mov	r3, r0
 8006a44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006a48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f040 8087 	bne.w	8006b60 <HAL_I2C_Mem_Read_DMA+0x294>
 8006a52:	e013      	b.n	8006a7c <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e0b3      	b.n	8006be4 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006a7c:	88f8      	ldrh	r0, [r7, #6]
 8006a7e:	893a      	ldrh	r2, [r7, #8]
 8006a80:	8979      	ldrh	r1, [r7, #10]
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	2323      	movs	r3, #35	@ 0x23
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f96b 	bl	8006d68 <I2C_RequestMemoryRead>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d023      	beq.n	8006ae0 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fe fe15 	bl	80056cc <HAL_DMA_Abort_IT>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aac:	2200      	movs	r2, #0
 8006aae:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006abe:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0201 	bic.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e081      	b.n	8006be4 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d108      	bne.n	8006afa <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	e007      	b.n	8006b0a <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b36:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b46:	605a      	str	r2, [r3, #4]
 8006b48:	e049      	b.n	8006bde <HAL_I2C_Mem_Read_DMA+0x312>
 8006b4a:	bf00      	nop
 8006b4c:	20000004 	.word	0x20000004
 8006b50:	14f8b589 	.word	0x14f8b589
 8006b54:	ffff0000 	.word	0xffff0000
 8006b58:	08006f39 	.word	0x08006f39
 8006b5c:	080070f7 	.word	0x080070f7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b74:	f043 0210 	orr.w	r2, r3, #16
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e02d      	b.n	8006be4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006b88:	88f8      	ldrh	r0, [r7, #6]
 8006b8a:	893a      	ldrh	r2, [r7, #8]
 8006b8c:	8979      	ldrh	r1, [r7, #10]
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	2323      	movs	r3, #35	@ 0x23
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	4603      	mov	r3, r0
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f8e5 	bl	8006d68 <I2C_RequestMemoryRead>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e01d      	b.n	8006be4 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba8:	2300      	movs	r3, #0
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bcc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e000      	b.n	8006be4 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8006be2:	2302      	movs	r3, #2
  }
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3728      	adds	r7, #40	@ 0x28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	4608      	mov	r0, r1
 8006c46:	4611      	mov	r1, r2
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	817b      	strh	r3, [r7, #10]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	813b      	strh	r3, [r7, #8]
 8006c52:	4613      	mov	r3, r2
 8006c54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 fa7c 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00d      	beq.n	8006c9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c8c:	d103      	bne.n	8006c96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e05f      	b.n	8006d5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c9a:	897b      	ldrh	r3, [r7, #10]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ca8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	6a3a      	ldr	r2, [r7, #32]
 8006cae:	492d      	ldr	r1, [pc, #180]	@ (8006d64 <I2C_RequestMemoryWrite+0x128>)
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 fad7 	bl	8007264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e04c      	b.n	8006d5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd8:	6a39      	ldr	r1, [r7, #32]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 fb62 	bl	80073a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00d      	beq.n	8006d02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d107      	bne.n	8006cfe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e02b      	b.n	8006d5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d105      	bne.n	8006d14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d08:	893b      	ldrh	r3, [r7, #8]
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	611a      	str	r2, [r3, #16]
 8006d12:	e021      	b.n	8006d58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d14:	893b      	ldrh	r3, [r7, #8]
 8006d16:	0a1b      	lsrs	r3, r3, #8
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d24:	6a39      	ldr	r1, [r7, #32]
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 fb3c 	bl	80073a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00d      	beq.n	8006d4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d107      	bne.n	8006d4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e005      	b.n	8006d5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d4e:	893b      	ldrh	r3, [r7, #8]
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	00010002 	.word	0x00010002

08006d68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	4608      	mov	r0, r1
 8006d72:	4611      	mov	r1, r2
 8006d74:	461a      	mov	r2, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	817b      	strh	r3, [r7, #10]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	813b      	strh	r3, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006da0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f9de 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00d      	beq.n	8006dd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dc8:	d103      	bne.n	8006dd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e0aa      	b.n	8006f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006dd6:	897b      	ldrh	r3, [r7, #10]
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	461a      	mov	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006de4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	6a3a      	ldr	r2, [r7, #32]
 8006dea:	4952      	ldr	r1, [pc, #328]	@ (8006f34 <I2C_RequestMemoryRead+0x1cc>)
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fa39 	bl	8007264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e097      	b.n	8006f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e14:	6a39      	ldr	r1, [r7, #32]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fac4 	bl	80073a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00d      	beq.n	8006e3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	d107      	bne.n	8006e3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e076      	b.n	8006f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d105      	bne.n	8006e50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e44:	893b      	ldrh	r3, [r7, #8]
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	611a      	str	r2, [r3, #16]
 8006e4e:	e021      	b.n	8006e94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e50:	893b      	ldrh	r3, [r7, #8]
 8006e52:	0a1b      	lsrs	r3, r3, #8
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e60:	6a39      	ldr	r1, [r7, #32]
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 fa9e 	bl	80073a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00d      	beq.n	8006e8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d107      	bne.n	8006e86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e050      	b.n	8006f2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e8a:	893b      	ldrh	r3, [r7, #8]
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e96:	6a39      	ldr	r1, [r7, #32]
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 fa83 	bl	80073a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00d      	beq.n	8006ec0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d107      	bne.n	8006ebc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006eba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e035      	b.n	8006f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ece:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 f947 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00d      	beq.n	8006f04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ef6:	d103      	bne.n	8006f00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006efe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e013      	b.n	8006f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006f04:	897b      	ldrh	r3, [r7, #10]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	f043 0301 	orr.w	r3, r3, #1
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	6a3a      	ldr	r2, [r7, #32]
 8006f18:	4906      	ldr	r1, [pc, #24]	@ (8006f34 <I2C_RequestMemoryRead+0x1cc>)
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 f9a2 	bl	8007264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	00010002 	.word	0x00010002

08006f38 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f44:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f4c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f54:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006f6a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f78:	2200      	movs	r2, #0
 8006f7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f88:	2200      	movs	r2, #0
 8006f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006f8c:	7cfb      	ldrb	r3, [r7, #19]
 8006f8e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006f92:	2b21      	cmp	r3, #33	@ 0x21
 8006f94:	d007      	beq.n	8006fa6 <I2C_DMAXferCplt+0x6e>
 8006f96:	7cfb      	ldrb	r3, [r7, #19]
 8006f98:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006f9c:	2b22      	cmp	r3, #34	@ 0x22
 8006f9e:	d131      	bne.n	8007004 <I2C_DMAXferCplt+0xcc>
 8006fa0:	7cbb      	ldrb	r3, [r7, #18]
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	d12e      	bne.n	8007004 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fb4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006fbc:	7cfb      	ldrb	r3, [r7, #19]
 8006fbe:	2b29      	cmp	r3, #41	@ 0x29
 8006fc0:	d10a      	bne.n	8006fd8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2221      	movs	r2, #33	@ 0x21
 8006fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2228      	movs	r2, #40	@ 0x28
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006fd0:	6978      	ldr	r0, [r7, #20]
 8006fd2:	f7ff fe15 	bl	8006c00 <HAL_I2C_SlaveTxCpltCallback>
 8006fd6:	e00c      	b.n	8006ff2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006fd8:	7cfb      	ldrb	r3, [r7, #19]
 8006fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fdc:	d109      	bne.n	8006ff2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2222      	movs	r2, #34	@ 0x22
 8006fe2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2228      	movs	r2, #40	@ 0x28
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006fec:	6978      	ldr	r0, [r7, #20]
 8006fee:	f7ff fe11 	bl	8006c14 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007000:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007002:	e074      	b.n	80070ee <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d06e      	beq.n	80070ee <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b01      	cmp	r3, #1
 8007018:	d107      	bne.n	800702a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007028:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007038:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007040:	d009      	beq.n	8007056 <I2C_DMAXferCplt+0x11e>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b08      	cmp	r3, #8
 8007046:	d006      	beq.n	8007056 <I2C_DMAXferCplt+0x11e>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800704e:	d002      	beq.n	8007056 <I2C_DMAXferCplt+0x11e>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b20      	cmp	r3, #32
 8007054:	d107      	bne.n	8007066 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007064:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007074:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007084:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2200      	movs	r2, #0
 800708a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007094:	6978      	ldr	r0, [r7, #20]
 8007096:	f7ff fdc7 	bl	8006c28 <HAL_I2C_ErrorCallback>
}
 800709a:	e028      	b.n	80070ee <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b40      	cmp	r3, #64	@ 0x40
 80070ae:	d10a      	bne.n	80070c6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2200      	movs	r2, #0
 80070bc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80070be:	6978      	ldr	r0, [r7, #20]
 80070c0:	f7fa fbd0 	bl	8001864 <HAL_I2C_MemRxCpltCallback>
}
 80070c4:	e013      	b.n	80070ee <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	d002      	beq.n	80070da <I2C_DMAXferCplt+0x1a2>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b20      	cmp	r3, #32
 80070d8:	d103      	bne.n	80070e2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2200      	movs	r2, #0
 80070de:	631a      	str	r2, [r3, #48]	@ 0x30
 80070e0:	e002      	b.n	80070e8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2212      	movs	r2, #18
 80070e6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80070e8:	6978      	ldr	r0, [r7, #20]
 80070ea:	f7ff fd7f 	bl	8006bec <HAL_I2C_MasterRxCpltCallback>
}
 80070ee:	bf00      	nop
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007102:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007110:	2200      	movs	r2, #0
 8007112:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007120:	2200      	movs	r2, #0
 8007122:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7fe fc7d 	bl	8005a24 <HAL_DMA_GetError>
 800712a:	4603      	mov	r3, r0
 800712c:	2b02      	cmp	r3, #2
 800712e:	d01b      	beq.n	8007168 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800713e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2220      	movs	r2, #32
 800714a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715a:	f043 0210 	orr.w	r2, r3, #16
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f7ff fd60 	bl	8006c28 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	603b      	str	r3, [r7, #0]
 800717c:	4613      	mov	r3, r2
 800717e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007180:	e048      	b.n	8007214 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007188:	d044      	beq.n	8007214 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718a:	f7fd fbd7 	bl	800493c <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d302      	bcc.n	80071a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d139      	bne.n	8007214 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	0c1b      	lsrs	r3, r3, #16
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d10d      	bne.n	80071c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	43da      	mvns	r2, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	4013      	ands	r3, r2
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	bf0c      	ite	eq
 80071bc:	2301      	moveq	r3, #1
 80071be:	2300      	movne	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	461a      	mov	r2, r3
 80071c4:	e00c      	b.n	80071e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	43da      	mvns	r2, r3
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	4013      	ands	r3, r2
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bf0c      	ite	eq
 80071d8:	2301      	moveq	r3, #1
 80071da:	2300      	movne	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	461a      	mov	r2, r3
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d116      	bne.n	8007214 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007200:	f043 0220 	orr.w	r2, r3, #32
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e023      	b.n	800725c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	0c1b      	lsrs	r3, r3, #16
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b01      	cmp	r3, #1
 800721c:	d10d      	bne.n	800723a <I2C_WaitOnFlagUntilTimeout+0xca>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	43da      	mvns	r2, r3
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	4013      	ands	r3, r2
 800722a:	b29b      	uxth	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	bf0c      	ite	eq
 8007230:	2301      	moveq	r3, #1
 8007232:	2300      	movne	r3, #0
 8007234:	b2db      	uxtb	r3, r3
 8007236:	461a      	mov	r2, r3
 8007238:	e00c      	b.n	8007254 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	43da      	mvns	r2, r3
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	4013      	ands	r3, r2
 8007246:	b29b      	uxth	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	bf0c      	ite	eq
 800724c:	2301      	moveq	r3, #1
 800724e:	2300      	movne	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	429a      	cmp	r2, r3
 8007258:	d093      	beq.n	8007182 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007272:	e071      	b.n	8007358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800727e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007282:	d123      	bne.n	80072cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007292:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800729c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	f043 0204 	orr.w	r2, r3, #4
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e067      	b.n	800739c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072d2:	d041      	beq.n	8007358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072d4:	f7fd fb32 	bl	800493c <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d302      	bcc.n	80072ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d136      	bne.n	8007358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	0c1b      	lsrs	r3, r3, #16
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d10c      	bne.n	800730e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	43da      	mvns	r2, r3
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	4013      	ands	r3, r2
 8007300:	b29b      	uxth	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	bf14      	ite	ne
 8007306:	2301      	movne	r3, #1
 8007308:	2300      	moveq	r3, #0
 800730a:	b2db      	uxtb	r3, r3
 800730c:	e00b      	b.n	8007326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	43da      	mvns	r2, r3
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	4013      	ands	r3, r2
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	bf14      	ite	ne
 8007320:	2301      	movne	r3, #1
 8007322:	2300      	moveq	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d016      	beq.n	8007358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2220      	movs	r2, #32
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007344:	f043 0220 	orr.w	r2, r3, #32
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e021      	b.n	800739c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b01      	cmp	r3, #1
 8007360:	d10c      	bne.n	800737c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	43da      	mvns	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	4013      	ands	r3, r2
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	bf14      	ite	ne
 8007374:	2301      	movne	r3, #1
 8007376:	2300      	moveq	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	e00b      	b.n	8007394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	43da      	mvns	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4013      	ands	r3, r2
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	bf14      	ite	ne
 800738e:	2301      	movne	r3, #1
 8007390:	2300      	moveq	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	f47f af6d 	bne.w	8007274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073b0:	e034      	b.n	800741c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 f8e3 	bl	800757e <I2C_IsAcknowledgeFailed>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e034      	b.n	800742c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073c8:	d028      	beq.n	800741c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ca:	f7fd fab7 	bl	800493c <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d302      	bcc.n	80073e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d11d      	bne.n	800741c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ea:	2b80      	cmp	r3, #128	@ 0x80
 80073ec:	d016      	beq.n	800741c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007408:	f043 0220 	orr.w	r2, r3, #32
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e007      	b.n	800742c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007426:	2b80      	cmp	r3, #128	@ 0x80
 8007428:	d1c3      	bne.n	80073b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007440:	e034      	b.n	80074ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 f89b 	bl	800757e <I2C_IsAcknowledgeFailed>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e034      	b.n	80074bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007458:	d028      	beq.n	80074ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800745a:	f7fd fa6f 	bl	800493c <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	429a      	cmp	r2, r3
 8007468:	d302      	bcc.n	8007470 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d11d      	bne.n	80074ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	f003 0304 	and.w	r3, r3, #4
 800747a:	2b04      	cmp	r3, #4
 800747c:	d016      	beq.n	80074ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2220      	movs	r2, #32
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007498:	f043 0220 	orr.w	r2, r3, #32
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e007      	b.n	80074bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	f003 0304 	and.w	r3, r3, #4
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d1c3      	bne.n	8007442 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074d0:	e049      	b.n	8007566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	f003 0310 	and.w	r3, r3, #16
 80074dc:	2b10      	cmp	r3, #16
 80074de:	d119      	bne.n	8007514 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f06f 0210 	mvn.w	r2, #16
 80074e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e030      	b.n	8007576 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007514:	f7fd fa12 	bl	800493c <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	429a      	cmp	r2, r3
 8007522:	d302      	bcc.n	800752a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d11d      	bne.n	8007566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007534:	2b40      	cmp	r3, #64	@ 0x40
 8007536:	d016      	beq.n	8007566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2220      	movs	r2, #32
 8007542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007552:	f043 0220 	orr.w	r2, r3, #32
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e007      	b.n	8007576 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007570:	2b40      	cmp	r3, #64	@ 0x40
 8007572:	d1ae      	bne.n	80074d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007594:	d11b      	bne.n	80075ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800759e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ba:	f043 0204 	orr.w	r2, r3, #4
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e000      	b.n	80075d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e0cc      	b.n	800778a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075f0:	4b68      	ldr	r3, [pc, #416]	@ (8007794 <HAL_RCC_ClockConfig+0x1b8>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 030f 	and.w	r3, r3, #15
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d90c      	bls.n	8007618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075fe:	4b65      	ldr	r3, [pc, #404]	@ (8007794 <HAL_RCC_ClockConfig+0x1b8>)
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	b2d2      	uxtb	r2, r2
 8007604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007606:	4b63      	ldr	r3, [pc, #396]	@ (8007794 <HAL_RCC_ClockConfig+0x1b8>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 030f 	and.w	r3, r3, #15
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	429a      	cmp	r2, r3
 8007612:	d001      	beq.n	8007618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e0b8      	b.n	800778a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d020      	beq.n	8007666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	d005      	beq.n	800763c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007630:	4b59      	ldr	r3, [pc, #356]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	4a58      	ldr	r2, [pc, #352]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 8007636:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800763a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0308 	and.w	r3, r3, #8
 8007644:	2b00      	cmp	r3, #0
 8007646:	d005      	beq.n	8007654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007648:	4b53      	ldr	r3, [pc, #332]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	4a52      	ldr	r2, [pc, #328]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 800764e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007654:	4b50      	ldr	r3, [pc, #320]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	494d      	ldr	r1, [pc, #308]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 8007662:	4313      	orrs	r3, r2
 8007664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d044      	beq.n	80076fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d107      	bne.n	800768a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800767a:	4b47      	ldr	r3, [pc, #284]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d119      	bne.n	80076ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e07f      	b.n	800778a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	2b02      	cmp	r3, #2
 8007690:	d003      	beq.n	800769a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007696:	2b03      	cmp	r3, #3
 8007698:	d107      	bne.n	80076aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800769a:	4b3f      	ldr	r3, [pc, #252]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d109      	bne.n	80076ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e06f      	b.n	800778a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076aa:	4b3b      	ldr	r3, [pc, #236]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e067      	b.n	800778a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076ba:	4b37      	ldr	r3, [pc, #220]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f023 0203 	bic.w	r2, r3, #3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	4934      	ldr	r1, [pc, #208]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076cc:	f7fd f936 	bl	800493c <HAL_GetTick>
 80076d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076d2:	e00a      	b.n	80076ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076d4:	f7fd f932 	bl	800493c <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e04f      	b.n	800778a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ea:	4b2b      	ldr	r3, [pc, #172]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 020c 	and.w	r2, r3, #12
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d1eb      	bne.n	80076d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076fc:	4b25      	ldr	r3, [pc, #148]	@ (8007794 <HAL_RCC_ClockConfig+0x1b8>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d20c      	bcs.n	8007724 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800770a:	4b22      	ldr	r3, [pc, #136]	@ (8007794 <HAL_RCC_ClockConfig+0x1b8>)
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007712:	4b20      	ldr	r3, [pc, #128]	@ (8007794 <HAL_RCC_ClockConfig+0x1b8>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	429a      	cmp	r2, r3
 800771e:	d001      	beq.n	8007724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e032      	b.n	800778a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d008      	beq.n	8007742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007730:	4b19      	ldr	r3, [pc, #100]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	4916      	ldr	r1, [pc, #88]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 800773e:	4313      	orrs	r3, r2
 8007740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b00      	cmp	r3, #0
 800774c:	d009      	beq.n	8007762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800774e:	4b12      	ldr	r3, [pc, #72]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	490e      	ldr	r1, [pc, #56]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 800775e:	4313      	orrs	r3, r2
 8007760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007762:	f000 f855 	bl	8007810 <HAL_RCC_GetSysClockFreq>
 8007766:	4602      	mov	r2, r0
 8007768:	4b0b      	ldr	r3, [pc, #44]	@ (8007798 <HAL_RCC_ClockConfig+0x1bc>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	091b      	lsrs	r3, r3, #4
 800776e:	f003 030f 	and.w	r3, r3, #15
 8007772:	490a      	ldr	r1, [pc, #40]	@ (800779c <HAL_RCC_ClockConfig+0x1c0>)
 8007774:	5ccb      	ldrb	r3, [r1, r3]
 8007776:	fa22 f303 	lsr.w	r3, r2, r3
 800777a:	4a09      	ldr	r2, [pc, #36]	@ (80077a0 <HAL_RCC_ClockConfig+0x1c4>)
 800777c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800777e:	4b09      	ldr	r3, [pc, #36]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f7fd f896 	bl	80048b4 <HAL_InitTick>

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	40023c00 	.word	0x40023c00
 8007798:	40023800 	.word	0x40023800
 800779c:	0800fcec 	.word	0x0800fcec
 80077a0:	20000004 	.word	0x20000004
 80077a4:	200003c0 	.word	0x200003c0

080077a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077ac:	4b03      	ldr	r3, [pc, #12]	@ (80077bc <HAL_RCC_GetHCLKFreq+0x14>)
 80077ae:	681b      	ldr	r3, [r3, #0]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	20000004 	.word	0x20000004

080077c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077c4:	f7ff fff0 	bl	80077a8 <HAL_RCC_GetHCLKFreq>
 80077c8:	4602      	mov	r2, r0
 80077ca:	4b05      	ldr	r3, [pc, #20]	@ (80077e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	0a9b      	lsrs	r3, r3, #10
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	4903      	ldr	r1, [pc, #12]	@ (80077e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077d6:	5ccb      	ldrb	r3, [r1, r3]
 80077d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077dc:	4618      	mov	r0, r3
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	40023800 	.word	0x40023800
 80077e4:	0800fcfc 	.word	0x0800fcfc

080077e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077ec:	f7ff ffdc 	bl	80077a8 <HAL_RCC_GetHCLKFreq>
 80077f0:	4602      	mov	r2, r0
 80077f2:	4b05      	ldr	r3, [pc, #20]	@ (8007808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	0b5b      	lsrs	r3, r3, #13
 80077f8:	f003 0307 	and.w	r3, r3, #7
 80077fc:	4903      	ldr	r1, [pc, #12]	@ (800780c <HAL_RCC_GetPCLK2Freq+0x24>)
 80077fe:	5ccb      	ldrb	r3, [r1, r3]
 8007800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007804:	4618      	mov	r0, r3
 8007806:	bd80      	pop	{r7, pc}
 8007808:	40023800 	.word	0x40023800
 800780c:	0800fcfc 	.word	0x0800fcfc

08007810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007814:	b0ae      	sub	sp, #184	@ 0xb8
 8007816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007830:	2300      	movs	r3, #0
 8007832:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007836:	4bcb      	ldr	r3, [pc, #812]	@ (8007b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 030c 	and.w	r3, r3, #12
 800783e:	2b0c      	cmp	r3, #12
 8007840:	f200 8206 	bhi.w	8007c50 <HAL_RCC_GetSysClockFreq+0x440>
 8007844:	a201      	add	r2, pc, #4	@ (adr r2, 800784c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	08007881 	.word	0x08007881
 8007850:	08007c51 	.word	0x08007c51
 8007854:	08007c51 	.word	0x08007c51
 8007858:	08007c51 	.word	0x08007c51
 800785c:	08007889 	.word	0x08007889
 8007860:	08007c51 	.word	0x08007c51
 8007864:	08007c51 	.word	0x08007c51
 8007868:	08007c51 	.word	0x08007c51
 800786c:	08007891 	.word	0x08007891
 8007870:	08007c51 	.word	0x08007c51
 8007874:	08007c51 	.word	0x08007c51
 8007878:	08007c51 	.word	0x08007c51
 800787c:	08007a81 	.word	0x08007a81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007880:	4bb9      	ldr	r3, [pc, #740]	@ (8007b68 <HAL_RCC_GetSysClockFreq+0x358>)
 8007882:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007886:	e1e7      	b.n	8007c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007888:	4bb8      	ldr	r3, [pc, #736]	@ (8007b6c <HAL_RCC_GetSysClockFreq+0x35c>)
 800788a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800788e:	e1e3      	b.n	8007c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007890:	4bb4      	ldr	r3, [pc, #720]	@ (8007b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800789c:	4bb1      	ldr	r3, [pc, #708]	@ (8007b64 <HAL_RCC_GetSysClockFreq+0x354>)
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d071      	beq.n	800798c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078a8:	4bae      	ldr	r3, [pc, #696]	@ (8007b64 <HAL_RCC_GetSysClockFreq+0x354>)
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	099b      	lsrs	r3, r3, #6
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078b4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80078b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80078c4:	2300      	movs	r3, #0
 80078c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80078ce:	4622      	mov	r2, r4
 80078d0:	462b      	mov	r3, r5
 80078d2:	f04f 0000 	mov.w	r0, #0
 80078d6:	f04f 0100 	mov.w	r1, #0
 80078da:	0159      	lsls	r1, r3, #5
 80078dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078e0:	0150      	lsls	r0, r2, #5
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4621      	mov	r1, r4
 80078e8:	1a51      	subs	r1, r2, r1
 80078ea:	6439      	str	r1, [r7, #64]	@ 0x40
 80078ec:	4629      	mov	r1, r5
 80078ee:	eb63 0301 	sbc.w	r3, r3, r1
 80078f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	f04f 0300 	mov.w	r3, #0
 80078fc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007900:	4649      	mov	r1, r9
 8007902:	018b      	lsls	r3, r1, #6
 8007904:	4641      	mov	r1, r8
 8007906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800790a:	4641      	mov	r1, r8
 800790c:	018a      	lsls	r2, r1, #6
 800790e:	4641      	mov	r1, r8
 8007910:	1a51      	subs	r1, r2, r1
 8007912:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007914:	4649      	mov	r1, r9
 8007916:	eb63 0301 	sbc.w	r3, r3, r1
 800791a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007928:	4649      	mov	r1, r9
 800792a:	00cb      	lsls	r3, r1, #3
 800792c:	4641      	mov	r1, r8
 800792e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007932:	4641      	mov	r1, r8
 8007934:	00ca      	lsls	r2, r1, #3
 8007936:	4610      	mov	r0, r2
 8007938:	4619      	mov	r1, r3
 800793a:	4603      	mov	r3, r0
 800793c:	4622      	mov	r2, r4
 800793e:	189b      	adds	r3, r3, r2
 8007940:	633b      	str	r3, [r7, #48]	@ 0x30
 8007942:	462b      	mov	r3, r5
 8007944:	460a      	mov	r2, r1
 8007946:	eb42 0303 	adc.w	r3, r2, r3
 800794a:	637b      	str	r3, [r7, #52]	@ 0x34
 800794c:	f04f 0200 	mov.w	r2, #0
 8007950:	f04f 0300 	mov.w	r3, #0
 8007954:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007958:	4629      	mov	r1, r5
 800795a:	024b      	lsls	r3, r1, #9
 800795c:	4621      	mov	r1, r4
 800795e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007962:	4621      	mov	r1, r4
 8007964:	024a      	lsls	r2, r1, #9
 8007966:	4610      	mov	r0, r2
 8007968:	4619      	mov	r1, r3
 800796a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800796e:	2200      	movs	r2, #0
 8007970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007974:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007978:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800797c:	f7f9 f9b4 	bl	8000ce8 <__aeabi_uldivmod>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4613      	mov	r3, r2
 8007986:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800798a:	e067      	b.n	8007a5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800798c:	4b75      	ldr	r3, [pc, #468]	@ (8007b64 <HAL_RCC_GetSysClockFreq+0x354>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	099b      	lsrs	r3, r3, #6
 8007992:	2200      	movs	r2, #0
 8007994:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007998:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800799c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80079a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079a6:	2300      	movs	r3, #0
 80079a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80079ae:	4622      	mov	r2, r4
 80079b0:	462b      	mov	r3, r5
 80079b2:	f04f 0000 	mov.w	r0, #0
 80079b6:	f04f 0100 	mov.w	r1, #0
 80079ba:	0159      	lsls	r1, r3, #5
 80079bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079c0:	0150      	lsls	r0, r2, #5
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	4621      	mov	r1, r4
 80079c8:	1a51      	subs	r1, r2, r1
 80079ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80079cc:	4629      	mov	r1, r5
 80079ce:	eb63 0301 	sbc.w	r3, r3, r1
 80079d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80079e0:	4649      	mov	r1, r9
 80079e2:	018b      	lsls	r3, r1, #6
 80079e4:	4641      	mov	r1, r8
 80079e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079ea:	4641      	mov	r1, r8
 80079ec:	018a      	lsls	r2, r1, #6
 80079ee:	4641      	mov	r1, r8
 80079f0:	ebb2 0a01 	subs.w	sl, r2, r1
 80079f4:	4649      	mov	r1, r9
 80079f6:	eb63 0b01 	sbc.w	fp, r3, r1
 80079fa:	f04f 0200 	mov.w	r2, #0
 80079fe:	f04f 0300 	mov.w	r3, #0
 8007a02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a0e:	4692      	mov	sl, r2
 8007a10:	469b      	mov	fp, r3
 8007a12:	4623      	mov	r3, r4
 8007a14:	eb1a 0303 	adds.w	r3, sl, r3
 8007a18:	623b      	str	r3, [r7, #32]
 8007a1a:	462b      	mov	r3, r5
 8007a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8007a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a22:	f04f 0200 	mov.w	r2, #0
 8007a26:	f04f 0300 	mov.w	r3, #0
 8007a2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007a2e:	4629      	mov	r1, r5
 8007a30:	028b      	lsls	r3, r1, #10
 8007a32:	4621      	mov	r1, r4
 8007a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a38:	4621      	mov	r1, r4
 8007a3a:	028a      	lsls	r2, r1, #10
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4619      	mov	r1, r3
 8007a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a44:	2200      	movs	r2, #0
 8007a46:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a48:	677a      	str	r2, [r7, #116]	@ 0x74
 8007a4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007a4e:	f7f9 f94b 	bl	8000ce8 <__aeabi_uldivmod>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	4613      	mov	r3, r2
 8007a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007a5c:	4b41      	ldr	r3, [pc, #260]	@ (8007b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	0c1b      	lsrs	r3, r3, #16
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	3301      	adds	r3, #1
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8007a6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007a7e:	e0eb      	b.n	8007c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a80:	4b38      	ldr	r3, [pc, #224]	@ (8007b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a8c:	4b35      	ldr	r3, [pc, #212]	@ (8007b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d06b      	beq.n	8007b70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a98:	4b32      	ldr	r3, [pc, #200]	@ (8007b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	099b      	lsrs	r3, r3, #6
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007aa2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007aa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aaa:	663b      	str	r3, [r7, #96]	@ 0x60
 8007aac:	2300      	movs	r3, #0
 8007aae:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ab0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007ab4:	4622      	mov	r2, r4
 8007ab6:	462b      	mov	r3, r5
 8007ab8:	f04f 0000 	mov.w	r0, #0
 8007abc:	f04f 0100 	mov.w	r1, #0
 8007ac0:	0159      	lsls	r1, r3, #5
 8007ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ac6:	0150      	lsls	r0, r2, #5
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4621      	mov	r1, r4
 8007ace:	1a51      	subs	r1, r2, r1
 8007ad0:	61b9      	str	r1, [r7, #24]
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	eb63 0301 	sbc.w	r3, r3, r1
 8007ad8:	61fb      	str	r3, [r7, #28]
 8007ada:	f04f 0200 	mov.w	r2, #0
 8007ade:	f04f 0300 	mov.w	r3, #0
 8007ae2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007ae6:	4659      	mov	r1, fp
 8007ae8:	018b      	lsls	r3, r1, #6
 8007aea:	4651      	mov	r1, sl
 8007aec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007af0:	4651      	mov	r1, sl
 8007af2:	018a      	lsls	r2, r1, #6
 8007af4:	4651      	mov	r1, sl
 8007af6:	ebb2 0801 	subs.w	r8, r2, r1
 8007afa:	4659      	mov	r1, fp
 8007afc:	eb63 0901 	sbc.w	r9, r3, r1
 8007b00:	f04f 0200 	mov.w	r2, #0
 8007b04:	f04f 0300 	mov.w	r3, #0
 8007b08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b14:	4690      	mov	r8, r2
 8007b16:	4699      	mov	r9, r3
 8007b18:	4623      	mov	r3, r4
 8007b1a:	eb18 0303 	adds.w	r3, r8, r3
 8007b1e:	613b      	str	r3, [r7, #16]
 8007b20:	462b      	mov	r3, r5
 8007b22:	eb49 0303 	adc.w	r3, r9, r3
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	f04f 0300 	mov.w	r3, #0
 8007b30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007b34:	4629      	mov	r1, r5
 8007b36:	024b      	lsls	r3, r1, #9
 8007b38:	4621      	mov	r1, r4
 8007b3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b3e:	4621      	mov	r1, r4
 8007b40:	024a      	lsls	r2, r1, #9
 8007b42:	4610      	mov	r0, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b4e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007b50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b54:	f7f9 f8c8 	bl	8000ce8 <__aeabi_uldivmod>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b62:	e065      	b.n	8007c30 <HAL_RCC_GetSysClockFreq+0x420>
 8007b64:	40023800 	.word	0x40023800
 8007b68:	00f42400 	.word	0x00f42400
 8007b6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b70:	4b3d      	ldr	r3, [pc, #244]	@ (8007c68 <HAL_RCC_GetSysClockFreq+0x458>)
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	099b      	lsrs	r3, r3, #6
 8007b76:	2200      	movs	r2, #0
 8007b78:	4618      	mov	r0, r3
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b80:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b82:	2300      	movs	r3, #0
 8007b84:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8007b8a:	4642      	mov	r2, r8
 8007b8c:	464b      	mov	r3, r9
 8007b8e:	f04f 0000 	mov.w	r0, #0
 8007b92:	f04f 0100 	mov.w	r1, #0
 8007b96:	0159      	lsls	r1, r3, #5
 8007b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b9c:	0150      	lsls	r0, r2, #5
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4641      	mov	r1, r8
 8007ba4:	1a51      	subs	r1, r2, r1
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	4649      	mov	r1, r9
 8007baa:	eb63 0301 	sbc.w	r3, r3, r1
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007bbc:	4659      	mov	r1, fp
 8007bbe:	018b      	lsls	r3, r1, #6
 8007bc0:	4651      	mov	r1, sl
 8007bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007bc6:	4651      	mov	r1, sl
 8007bc8:	018a      	lsls	r2, r1, #6
 8007bca:	4651      	mov	r1, sl
 8007bcc:	1a54      	subs	r4, r2, r1
 8007bce:	4659      	mov	r1, fp
 8007bd0:	eb63 0501 	sbc.w	r5, r3, r1
 8007bd4:	f04f 0200 	mov.w	r2, #0
 8007bd8:	f04f 0300 	mov.w	r3, #0
 8007bdc:	00eb      	lsls	r3, r5, #3
 8007bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007be2:	00e2      	lsls	r2, r4, #3
 8007be4:	4614      	mov	r4, r2
 8007be6:	461d      	mov	r5, r3
 8007be8:	4643      	mov	r3, r8
 8007bea:	18e3      	adds	r3, r4, r3
 8007bec:	603b      	str	r3, [r7, #0]
 8007bee:	464b      	mov	r3, r9
 8007bf0:	eb45 0303 	adc.w	r3, r5, r3
 8007bf4:	607b      	str	r3, [r7, #4]
 8007bf6:	f04f 0200 	mov.w	r2, #0
 8007bfa:	f04f 0300 	mov.w	r3, #0
 8007bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c02:	4629      	mov	r1, r5
 8007c04:	028b      	lsls	r3, r1, #10
 8007c06:	4621      	mov	r1, r4
 8007c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	028a      	lsls	r2, r1, #10
 8007c10:	4610      	mov	r0, r2
 8007c12:	4619      	mov	r1, r3
 8007c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c18:	2200      	movs	r2, #0
 8007c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c1c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007c1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007c22:	f7f9 f861 	bl	8000ce8 <__aeabi_uldivmod>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007c30:	4b0d      	ldr	r3, [pc, #52]	@ (8007c68 <HAL_RCC_GetSysClockFreq+0x458>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	0f1b      	lsrs	r3, r3, #28
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8007c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007c4e:	e003      	b.n	8007c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c50:	4b06      	ldr	r3, [pc, #24]	@ (8007c6c <HAL_RCC_GetSysClockFreq+0x45c>)
 8007c52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007c56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	37b8      	adds	r7, #184	@ 0xb8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c66:	bf00      	nop
 8007c68:	40023800 	.word	0x40023800
 8007c6c:	00f42400 	.word	0x00f42400

08007c70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e28d      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8083 	beq.w	8007d96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007c90:	4b94      	ldr	r3, [pc, #592]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f003 030c 	and.w	r3, r3, #12
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d019      	beq.n	8007cd0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007c9c:	4b91      	ldr	r3, [pc, #580]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f003 030c 	and.w	r3, r3, #12
        || \
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d106      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007ca8:	4b8e      	ldr	r3, [pc, #568]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cb4:	d00c      	beq.n	8007cd0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007cbe:	2b0c      	cmp	r3, #12
 8007cc0:	d112      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cc2:	4b88      	ldr	r3, [pc, #544]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cce:	d10b      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cd0:	4b84      	ldr	r3, [pc, #528]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d05b      	beq.n	8007d94 <HAL_RCC_OscConfig+0x124>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d157      	bne.n	8007d94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e25a      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cf0:	d106      	bne.n	8007d00 <HAL_RCC_OscConfig+0x90>
 8007cf2:	4b7c      	ldr	r3, [pc, #496]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a7b      	ldr	r2, [pc, #492]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	e01d      	b.n	8007d3c <HAL_RCC_OscConfig+0xcc>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d08:	d10c      	bne.n	8007d24 <HAL_RCC_OscConfig+0xb4>
 8007d0a:	4b76      	ldr	r3, [pc, #472]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a75      	ldr	r2, [pc, #468]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	4b73      	ldr	r3, [pc, #460]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a72      	ldr	r2, [pc, #456]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d20:	6013      	str	r3, [r2, #0]
 8007d22:	e00b      	b.n	8007d3c <HAL_RCC_OscConfig+0xcc>
 8007d24:	4b6f      	ldr	r3, [pc, #444]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a6e      	ldr	r2, [pc, #440]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d2e:	6013      	str	r3, [r2, #0]
 8007d30:	4b6c      	ldr	r3, [pc, #432]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a6b      	ldr	r2, [pc, #428]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d013      	beq.n	8007d6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d44:	f7fc fdfa 	bl	800493c <HAL_GetTick>
 8007d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d4a:	e008      	b.n	8007d5e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d4c:	f7fc fdf6 	bl	800493c <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b64      	cmp	r3, #100	@ 0x64
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e21f      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d5e:	4b61      	ldr	r3, [pc, #388]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0f0      	beq.n	8007d4c <HAL_RCC_OscConfig+0xdc>
 8007d6a:	e014      	b.n	8007d96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d6c:	f7fc fde6 	bl	800493c <HAL_GetTick>
 8007d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d74:	f7fc fde2 	bl	800493c <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b64      	cmp	r3, #100	@ 0x64
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e20b      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d86:	4b57      	ldr	r3, [pc, #348]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f0      	bne.n	8007d74 <HAL_RCC_OscConfig+0x104>
 8007d92:	e000      	b.n	8007d96 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d06f      	beq.n	8007e82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007da2:	4b50      	ldr	r3, [pc, #320]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f003 030c 	and.w	r3, r3, #12
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d017      	beq.n	8007dde <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007dae:	4b4d      	ldr	r3, [pc, #308]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f003 030c 	and.w	r3, r3, #12
        || \
 8007db6:	2b08      	cmp	r3, #8
 8007db8:	d105      	bne.n	8007dc6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007dba:	4b4a      	ldr	r3, [pc, #296]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dc6:	4b47      	ldr	r3, [pc, #284]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007dce:	2b0c      	cmp	r3, #12
 8007dd0:	d11c      	bne.n	8007e0c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dd2:	4b44      	ldr	r3, [pc, #272]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d116      	bne.n	8007e0c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dde:	4b41      	ldr	r3, [pc, #260]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <HAL_RCC_OscConfig+0x186>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d001      	beq.n	8007df6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e1d3      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007df6:	4b3b      	ldr	r3, [pc, #236]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	4937      	ldr	r1, [pc, #220]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e0a:	e03a      	b.n	8007e82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d020      	beq.n	8007e56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e14:	4b34      	ldr	r3, [pc, #208]	@ (8007ee8 <HAL_RCC_OscConfig+0x278>)
 8007e16:	2201      	movs	r2, #1
 8007e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1a:	f7fc fd8f 	bl	800493c <HAL_GetTick>
 8007e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e20:	e008      	b.n	8007e34 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e22:	f7fc fd8b 	bl	800493c <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d901      	bls.n	8007e34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e1b4      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e34:	4b2b      	ldr	r3, [pc, #172]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0f0      	beq.n	8007e22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e40:	4b28      	ldr	r3, [pc, #160]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	00db      	lsls	r3, r3, #3
 8007e4e:	4925      	ldr	r1, [pc, #148]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	600b      	str	r3, [r1, #0]
 8007e54:	e015      	b.n	8007e82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e56:	4b24      	ldr	r3, [pc, #144]	@ (8007ee8 <HAL_RCC_OscConfig+0x278>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e5c:	f7fc fd6e 	bl	800493c <HAL_GetTick>
 8007e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e62:	e008      	b.n	8007e76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e64:	f7fc fd6a 	bl	800493c <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e193      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e76:	4b1b      	ldr	r3, [pc, #108]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f0      	bne.n	8007e64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0308 	and.w	r3, r3, #8
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d036      	beq.n	8007efc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d016      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e96:	4b15      	ldr	r3, [pc, #84]	@ (8007eec <HAL_RCC_OscConfig+0x27c>)
 8007e98:	2201      	movs	r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e9c:	f7fc fd4e 	bl	800493c <HAL_GetTick>
 8007ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ea2:	e008      	b.n	8007eb6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ea4:	f7fc fd4a 	bl	800493c <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d901      	bls.n	8007eb6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e173      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee4 <HAL_RCC_OscConfig+0x274>)
 8007eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0f0      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x234>
 8007ec2:	e01b      	b.n	8007efc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ec4:	4b09      	ldr	r3, [pc, #36]	@ (8007eec <HAL_RCC_OscConfig+0x27c>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eca:	f7fc fd37 	bl	800493c <HAL_GetTick>
 8007ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ed0:	e00e      	b.n	8007ef0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ed2:	f7fc fd33 	bl	800493c <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d907      	bls.n	8007ef0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e15c      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
 8007ee4:	40023800 	.word	0x40023800
 8007ee8:	42470000 	.word	0x42470000
 8007eec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ef0:	4b8a      	ldr	r3, [pc, #552]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ef4:	f003 0302 	and.w	r3, r3, #2
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1ea      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 8097 	beq.w	8008038 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f0e:	4b83      	ldr	r3, [pc, #524]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10f      	bne.n	8007f3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60bb      	str	r3, [r7, #8]
 8007f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f22:	4a7e      	ldr	r2, [pc, #504]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f32:	60bb      	str	r3, [r7, #8]
 8007f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f36:	2301      	movs	r3, #1
 8007f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f3a:	4b79      	ldr	r3, [pc, #484]	@ (8008120 <HAL_RCC_OscConfig+0x4b0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d118      	bne.n	8007f78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f46:	4b76      	ldr	r3, [pc, #472]	@ (8008120 <HAL_RCC_OscConfig+0x4b0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a75      	ldr	r2, [pc, #468]	@ (8008120 <HAL_RCC_OscConfig+0x4b0>)
 8007f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f52:	f7fc fcf3 	bl	800493c <HAL_GetTick>
 8007f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f58:	e008      	b.n	8007f6c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f5a:	f7fc fcef 	bl	800493c <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e118      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8008120 <HAL_RCC_OscConfig+0x4b0>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d0f0      	beq.n	8007f5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d106      	bne.n	8007f8e <HAL_RCC_OscConfig+0x31e>
 8007f80:	4b66      	ldr	r3, [pc, #408]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f84:	4a65      	ldr	r2, [pc, #404]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007f86:	f043 0301 	orr.w	r3, r3, #1
 8007f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f8c:	e01c      	b.n	8007fc8 <HAL_RCC_OscConfig+0x358>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	2b05      	cmp	r3, #5
 8007f94:	d10c      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x340>
 8007f96:	4b61      	ldr	r3, [pc, #388]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f9a:	4a60      	ldr	r2, [pc, #384]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007f9c:	f043 0304 	orr.w	r3, r3, #4
 8007fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fa2:	4b5e      	ldr	r3, [pc, #376]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa6:	4a5d      	ldr	r2, [pc, #372]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007fa8:	f043 0301 	orr.w	r3, r3, #1
 8007fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fae:	e00b      	b.n	8007fc8 <HAL_RCC_OscConfig+0x358>
 8007fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb4:	4a59      	ldr	r2, [pc, #356]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007fb6:	f023 0301 	bic.w	r3, r3, #1
 8007fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fbc:	4b57      	ldr	r3, [pc, #348]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fc0:	4a56      	ldr	r2, [pc, #344]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007fc2:	f023 0304 	bic.w	r3, r3, #4
 8007fc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d015      	beq.n	8007ffc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fd0:	f7fc fcb4 	bl	800493c <HAL_GetTick>
 8007fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fd6:	e00a      	b.n	8007fee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fd8:	f7fc fcb0 	bl	800493c <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e0d7      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fee:	4b4b      	ldr	r3, [pc, #300]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8007ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0ee      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x368>
 8007ffa:	e014      	b.n	8008026 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ffc:	f7fc fc9e 	bl	800493c <HAL_GetTick>
 8008000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008002:	e00a      	b.n	800801a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008004:	f7fc fc9a 	bl	800493c <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008012:	4293      	cmp	r3, r2
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e0c1      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800801a:	4b40      	ldr	r3, [pc, #256]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 800801c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1ee      	bne.n	8008004 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d105      	bne.n	8008038 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800802c:	4b3b      	ldr	r3, [pc, #236]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 800802e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008030:	4a3a      	ldr	r2, [pc, #232]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8008032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008036:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 80ad 	beq.w	800819c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008042:	4b36      	ldr	r3, [pc, #216]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f003 030c 	and.w	r3, r3, #12
 800804a:	2b08      	cmp	r3, #8
 800804c:	d060      	beq.n	8008110 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	2b02      	cmp	r3, #2
 8008054:	d145      	bne.n	80080e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008056:	4b33      	ldr	r3, [pc, #204]	@ (8008124 <HAL_RCC_OscConfig+0x4b4>)
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805c:	f7fc fc6e 	bl	800493c <HAL_GetTick>
 8008060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008064:	f7fc fc6a 	bl	800493c <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b02      	cmp	r3, #2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e093      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008076:	4b29      	ldr	r3, [pc, #164]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1f0      	bne.n	8008064 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69da      	ldr	r2, [r3, #28]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	431a      	orrs	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008090:	019b      	lsls	r3, r3, #6
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008098:	085b      	lsrs	r3, r3, #1
 800809a:	3b01      	subs	r3, #1
 800809c:	041b      	lsls	r3, r3, #16
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a4:	061b      	lsls	r3, r3, #24
 80080a6:	431a      	orrs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ac:	071b      	lsls	r3, r3, #28
 80080ae:	491b      	ldr	r1, [pc, #108]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008124 <HAL_RCC_OscConfig+0x4b4>)
 80080b6:	2201      	movs	r2, #1
 80080b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ba:	f7fc fc3f 	bl	800493c <HAL_GetTick>
 80080be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080c0:	e008      	b.n	80080d4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080c2:	f7fc fc3b 	bl	800493c <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d901      	bls.n	80080d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e064      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080d4:	4b11      	ldr	r3, [pc, #68]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0f0      	beq.n	80080c2 <HAL_RCC_OscConfig+0x452>
 80080e0:	e05c      	b.n	800819c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080e2:	4b10      	ldr	r3, [pc, #64]	@ (8008124 <HAL_RCC_OscConfig+0x4b4>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e8:	f7fc fc28 	bl	800493c <HAL_GetTick>
 80080ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ee:	e008      	b.n	8008102 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080f0:	f7fc fc24 	bl	800493c <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d901      	bls.n	8008102 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e04d      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008102:	4b06      	ldr	r3, [pc, #24]	@ (800811c <HAL_RCC_OscConfig+0x4ac>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1f0      	bne.n	80080f0 <HAL_RCC_OscConfig+0x480>
 800810e:	e045      	b.n	800819c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d107      	bne.n	8008128 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e040      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
 800811c:	40023800 	.word	0x40023800
 8008120:	40007000 	.word	0x40007000
 8008124:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008128:	4b1f      	ldr	r3, [pc, #124]	@ (80081a8 <HAL_RCC_OscConfig+0x538>)
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d030      	beq.n	8008198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008140:	429a      	cmp	r2, r3
 8008142:	d129      	bne.n	8008198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800814e:	429a      	cmp	r2, r3
 8008150:	d122      	bne.n	8008198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008158:	4013      	ands	r3, r2
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800815e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008160:	4293      	cmp	r3, r2
 8008162:	d119      	bne.n	8008198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816e:	085b      	lsrs	r3, r3, #1
 8008170:	3b01      	subs	r3, #1
 8008172:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008174:	429a      	cmp	r2, r3
 8008176:	d10f      	bne.n	8008198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008182:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008184:	429a      	cmp	r2, r3
 8008186:	d107      	bne.n	8008198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008192:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008194:	429a      	cmp	r2, r3
 8008196:	d001      	beq.n	800819c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e000      	b.n	800819e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3718      	adds	r7, #24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	40023800 	.word	0x40023800

080081ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e07b      	b.n	80082b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d108      	bne.n	80081d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081ce:	d009      	beq.n	80081e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	61da      	str	r2, [r3, #28]
 80081d6:	e005      	b.n	80081e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d106      	bne.n	8008204 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7f9 fbae 	bl	8001960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800821a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800822c:	431a      	orrs	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008236:	431a      	orrs	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	f003 0302 	and.w	r3, r3, #2
 8008240:	431a      	orrs	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008254:	431a      	orrs	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800825e:	431a      	orrs	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008268:	ea42 0103 	orr.w	r1, r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008270:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	0c1b      	lsrs	r3, r3, #16
 8008282:	f003 0104 	and.w	r1, r3, #4
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828a:	f003 0210 	and.w	r2, r3, #16
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69da      	ldr	r2, [r3, #28]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b088      	sub	sp, #32
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	603b      	str	r3, [r7, #0]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082ce:	f7fc fb35 	bl	800493c <HAL_GetTick>
 80082d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80082d4:	88fb      	ldrh	r3, [r7, #6]
 80082d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d001      	beq.n	80082e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80082e4:	2302      	movs	r3, #2
 80082e6:	e12a      	b.n	800853e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d002      	beq.n	80082f4 <HAL_SPI_Transmit+0x36>
 80082ee:	88fb      	ldrh	r3, [r7, #6]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e122      	b.n	800853e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d101      	bne.n	8008306 <HAL_SPI_Transmit+0x48>
 8008302:	2302      	movs	r3, #2
 8008304:	e11b      	b.n	800853e <HAL_SPI_Transmit+0x280>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2203      	movs	r2, #3
 8008312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	88fa      	ldrh	r2, [r7, #6]
 8008326:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	88fa      	ldrh	r2, [r7, #6]
 800832c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008354:	d10f      	bne.n	8008376 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008364:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008374:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008380:	2b40      	cmp	r3, #64	@ 0x40
 8008382:	d007      	beq.n	8008394 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008392:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800839c:	d152      	bne.n	8008444 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d002      	beq.n	80083ac <HAL_SPI_Transmit+0xee>
 80083a6:	8b7b      	ldrh	r3, [r7, #26]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d145      	bne.n	8008438 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b0:	881a      	ldrh	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083bc:	1c9a      	adds	r2, r3, #2
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	3b01      	subs	r3, #1
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80083d0:	e032      	b.n	8008438 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d112      	bne.n	8008406 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e4:	881a      	ldrh	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f0:	1c9a      	adds	r2, r3, #2
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	3b01      	subs	r3, #1
 80083fe:	b29a      	uxth	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008404:	e018      	b.n	8008438 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008406:	f7fc fa99 	bl	800493c <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d803      	bhi.n	800841e <HAL_SPI_Transmit+0x160>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800841c:	d102      	bne.n	8008424 <HAL_SPI_Transmit+0x166>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d109      	bne.n	8008438 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e082      	b.n	800853e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800843c:	b29b      	uxth	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1c7      	bne.n	80083d2 <HAL_SPI_Transmit+0x114>
 8008442:	e053      	b.n	80084ec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <HAL_SPI_Transmit+0x194>
 800844c:	8b7b      	ldrh	r3, [r7, #26]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d147      	bne.n	80084e2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	330c      	adds	r3, #12
 800845c:	7812      	ldrb	r2, [r2, #0]
 800845e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800846e:	b29b      	uxth	r3, r3
 8008470:	3b01      	subs	r3, #1
 8008472:	b29a      	uxth	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008478:	e033      	b.n	80084e2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b02      	cmp	r3, #2
 8008486:	d113      	bne.n	80084b0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	330c      	adds	r3, #12
 8008492:	7812      	ldrb	r2, [r2, #0]
 8008494:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	3b01      	subs	r3, #1
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80084ae:	e018      	b.n	80084e2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084b0:	f7fc fa44 	bl	800493c <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d803      	bhi.n	80084c8 <HAL_SPI_Transmit+0x20a>
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084c6:	d102      	bne.n	80084ce <HAL_SPI_Transmit+0x210>
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d109      	bne.n	80084e2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e02d      	b.n	800853e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1c6      	bne.n	800847a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084ec:	69fa      	ldr	r2, [r7, #28]
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 f8b1 	bl	8008658 <SPI_EndRxTxTransaction>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2220      	movs	r2, #32
 8008500:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10a      	bne.n	8008520 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800850a:	2300      	movs	r3, #0
 800850c:	617b      	str	r3, [r7, #20]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	617b      	str	r3, [r7, #20]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	617b      	str	r3, [r7, #20]
 800851e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e000      	b.n	800853e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800853c:	2300      	movs	r3, #0
  }
}
 800853e:	4618      	mov	r0, r3
 8008540:	3720      	adds	r7, #32
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b088      	sub	sp, #32
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	603b      	str	r3, [r7, #0]
 8008554:	4613      	mov	r3, r2
 8008556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008558:	f7fc f9f0 	bl	800493c <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	4413      	add	r3, r2
 8008566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008568:	f7fc f9e8 	bl	800493c <HAL_GetTick>
 800856c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800856e:	4b39      	ldr	r3, [pc, #228]	@ (8008654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	015b      	lsls	r3, r3, #5
 8008574:	0d1b      	lsrs	r3, r3, #20
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	fb02 f303 	mul.w	r3, r2, r3
 800857c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800857e:	e055      	b.n	800862c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008586:	d051      	beq.n	800862c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008588:	f7fc f9d8 	bl	800493c <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	429a      	cmp	r2, r3
 8008596:	d902      	bls.n	800859e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d13d      	bne.n	800861a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80085ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085b6:	d111      	bne.n	80085dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085c0:	d004      	beq.n	80085cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085ca:	d107      	bne.n	80085dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085e4:	d10f      	bne.n	8008606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e018      	b.n	800864c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d102      	bne.n	8008626 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	61fb      	str	r3, [r7, #28]
 8008624:	e002      	b.n	800862c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	3b01      	subs	r3, #1
 800862a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	4013      	ands	r3, r2
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	429a      	cmp	r2, r3
 800863a:	bf0c      	ite	eq
 800863c:	2301      	moveq	r3, #1
 800863e:	2300      	movne	r3, #0
 8008640:	b2db      	uxtb	r3, r3
 8008642:	461a      	mov	r2, r3
 8008644:	79fb      	ldrb	r3, [r7, #7]
 8008646:	429a      	cmp	r2, r3
 8008648:	d19a      	bne.n	8008580 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3720      	adds	r7, #32
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20000004 	.word	0x20000004

08008658 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af02      	add	r7, sp, #8
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2201      	movs	r2, #1
 800866c:	2102      	movs	r1, #2
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f7ff ff6a 	bl	8008548 <SPI_WaitFlagStateUntilTimeout>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d007      	beq.n	800868a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800867e:	f043 0220 	orr.w	r2, r3, #32
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e032      	b.n	80086f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800868a:	4b1b      	ldr	r3, [pc, #108]	@ (80086f8 <SPI_EndRxTxTransaction+0xa0>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a1b      	ldr	r2, [pc, #108]	@ (80086fc <SPI_EndRxTxTransaction+0xa4>)
 8008690:	fba2 2303 	umull	r2, r3, r2, r3
 8008694:	0d5b      	lsrs	r3, r3, #21
 8008696:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800869a:	fb02 f303 	mul.w	r3, r2, r3
 800869e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086a8:	d112      	bne.n	80086d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2200      	movs	r2, #0
 80086b2:	2180      	movs	r1, #128	@ 0x80
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f7ff ff47 	bl	8008548 <SPI_WaitFlagStateUntilTimeout>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d016      	beq.n	80086ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086c4:	f043 0220 	orr.w	r2, r3, #32
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e00f      	b.n	80086f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	3b01      	subs	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086e6:	2b80      	cmp	r3, #128	@ 0x80
 80086e8:	d0f2      	beq.n	80086d0 <SPI_EndRxTxTransaction+0x78>
 80086ea:	e000      	b.n	80086ee <SPI_EndRxTxTransaction+0x96>
        break;
 80086ec:	bf00      	nop
  }

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	20000004 	.word	0x20000004
 80086fc:	165e9f81 	.word	0x165e9f81

08008700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e041      	b.n	8008796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d106      	bne.n	800872c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7f9 fd94 	bl	8002254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	3304      	adds	r3, #4
 800873c:	4619      	mov	r1, r3
 800873e:	4610      	mov	r0, r2
 8008740:	f000 fcc4 	bl	80090cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d001      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e04e      	b.n	8008856 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2202      	movs	r2, #2
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0201 	orr.w	r2, r2, #1
 80087ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a23      	ldr	r2, [pc, #140]	@ (8008864 <HAL_TIM_Base_Start_IT+0xc4>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d022      	beq.n	8008820 <HAL_TIM_Base_Start_IT+0x80>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087e2:	d01d      	beq.n	8008820 <HAL_TIM_Base_Start_IT+0x80>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a1f      	ldr	r2, [pc, #124]	@ (8008868 <HAL_TIM_Base_Start_IT+0xc8>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d018      	beq.n	8008820 <HAL_TIM_Base_Start_IT+0x80>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a1e      	ldr	r2, [pc, #120]	@ (800886c <HAL_TIM_Base_Start_IT+0xcc>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d013      	beq.n	8008820 <HAL_TIM_Base_Start_IT+0x80>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008870 <HAL_TIM_Base_Start_IT+0xd0>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00e      	beq.n	8008820 <HAL_TIM_Base_Start_IT+0x80>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a1b      	ldr	r2, [pc, #108]	@ (8008874 <HAL_TIM_Base_Start_IT+0xd4>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d009      	beq.n	8008820 <HAL_TIM_Base_Start_IT+0x80>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a19      	ldr	r2, [pc, #100]	@ (8008878 <HAL_TIM_Base_Start_IT+0xd8>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d004      	beq.n	8008820 <HAL_TIM_Base_Start_IT+0x80>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a18      	ldr	r2, [pc, #96]	@ (800887c <HAL_TIM_Base_Start_IT+0xdc>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d111      	bne.n	8008844 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b06      	cmp	r3, #6
 8008830:	d010      	beq.n	8008854 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f042 0201 	orr.w	r2, r2, #1
 8008840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008842:	e007      	b.n	8008854 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0201 	orr.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	40010000 	.word	0x40010000
 8008868:	40000400 	.word	0x40000400
 800886c:	40000800 	.word	0x40000800
 8008870:	40000c00 	.word	0x40000c00
 8008874:	40010400 	.word	0x40010400
 8008878:	40014000 	.word	0x40014000
 800887c:	40001800 	.word	0x40001800

08008880 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e041      	b.n	8008916 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d106      	bne.n	80088ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7f9 fc20 	bl	80020ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3304      	adds	r3, #4
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	f000 fc04 	bl	80090cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d109      	bne.n	8008944 <HAL_TIM_PWM_Start+0x24>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b01      	cmp	r3, #1
 800893a:	bf14      	ite	ne
 800893c:	2301      	movne	r3, #1
 800893e:	2300      	moveq	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	e022      	b.n	800898a <HAL_TIM_PWM_Start+0x6a>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b04      	cmp	r3, #4
 8008948:	d109      	bne.n	800895e <HAL_TIM_PWM_Start+0x3e>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b01      	cmp	r3, #1
 8008954:	bf14      	ite	ne
 8008956:	2301      	movne	r3, #1
 8008958:	2300      	moveq	r3, #0
 800895a:	b2db      	uxtb	r3, r3
 800895c:	e015      	b.n	800898a <HAL_TIM_PWM_Start+0x6a>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b08      	cmp	r3, #8
 8008962:	d109      	bne.n	8008978 <HAL_TIM_PWM_Start+0x58>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b01      	cmp	r3, #1
 800896e:	bf14      	ite	ne
 8008970:	2301      	movne	r3, #1
 8008972:	2300      	moveq	r3, #0
 8008974:	b2db      	uxtb	r3, r3
 8008976:	e008      	b.n	800898a <HAL_TIM_PWM_Start+0x6a>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b01      	cmp	r3, #1
 8008982:	bf14      	ite	ne
 8008984:	2301      	movne	r3, #1
 8008986:	2300      	moveq	r3, #0
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e07c      	b.n	8008a8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d104      	bne.n	80089a2 <HAL_TIM_PWM_Start+0x82>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089a0:	e013      	b.n	80089ca <HAL_TIM_PWM_Start+0xaa>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b04      	cmp	r3, #4
 80089a6:	d104      	bne.n	80089b2 <HAL_TIM_PWM_Start+0x92>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089b0:	e00b      	b.n	80089ca <HAL_TIM_PWM_Start+0xaa>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d104      	bne.n	80089c2 <HAL_TIM_PWM_Start+0xa2>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2202      	movs	r2, #2
 80089bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089c0:	e003      	b.n	80089ca <HAL_TIM_PWM_Start+0xaa>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2202      	movs	r2, #2
 80089c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2201      	movs	r2, #1
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fdd0 	bl	8009578 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a2d      	ldr	r2, [pc, #180]	@ (8008a94 <HAL_TIM_PWM_Start+0x174>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d004      	beq.n	80089ec <HAL_TIM_PWM_Start+0xcc>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008a98 <HAL_TIM_PWM_Start+0x178>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d101      	bne.n	80089f0 <HAL_TIM_PWM_Start+0xd0>
 80089ec:	2301      	movs	r3, #1
 80089ee:	e000      	b.n	80089f2 <HAL_TIM_PWM_Start+0xd2>
 80089f0:	2300      	movs	r3, #0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d007      	beq.n	8008a06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a22      	ldr	r2, [pc, #136]	@ (8008a94 <HAL_TIM_PWM_Start+0x174>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d022      	beq.n	8008a56 <HAL_TIM_PWM_Start+0x136>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a18:	d01d      	beq.n	8008a56 <HAL_TIM_PWM_Start+0x136>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8008a9c <HAL_TIM_PWM_Start+0x17c>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d018      	beq.n	8008a56 <HAL_TIM_PWM_Start+0x136>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a1d      	ldr	r2, [pc, #116]	@ (8008aa0 <HAL_TIM_PWM_Start+0x180>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d013      	beq.n	8008a56 <HAL_TIM_PWM_Start+0x136>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a1c      	ldr	r2, [pc, #112]	@ (8008aa4 <HAL_TIM_PWM_Start+0x184>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d00e      	beq.n	8008a56 <HAL_TIM_PWM_Start+0x136>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a16      	ldr	r2, [pc, #88]	@ (8008a98 <HAL_TIM_PWM_Start+0x178>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d009      	beq.n	8008a56 <HAL_TIM_PWM_Start+0x136>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a18      	ldr	r2, [pc, #96]	@ (8008aa8 <HAL_TIM_PWM_Start+0x188>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d004      	beq.n	8008a56 <HAL_TIM_PWM_Start+0x136>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a16      	ldr	r2, [pc, #88]	@ (8008aac <HAL_TIM_PWM_Start+0x18c>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d111      	bne.n	8008a7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f003 0307 	and.w	r3, r3, #7
 8008a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b06      	cmp	r3, #6
 8008a66:	d010      	beq.n	8008a8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f042 0201 	orr.w	r2, r2, #1
 8008a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a78:	e007      	b.n	8008a8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f042 0201 	orr.w	r2, r2, #1
 8008a88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	40010000 	.word	0x40010000
 8008a98:	40010400 	.word	0x40010400
 8008a9c:	40000400 	.word	0x40000400
 8008aa0:	40000800 	.word	0x40000800
 8008aa4:	40000c00 	.word	0x40000c00
 8008aa8:	40014000 	.word	0x40014000
 8008aac:	40001800 	.word	0x40001800

08008ab0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e097      	b.n	8008bf4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d106      	bne.n	8008ade <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7f9 fb3d 	bl	8002158 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2202      	movs	r2, #2
 8008ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	6812      	ldr	r2, [r2, #0]
 8008af0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008af4:	f023 0307 	bic.w	r3, r3, #7
 8008af8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	3304      	adds	r3, #4
 8008b02:	4619      	mov	r1, r3
 8008b04:	4610      	mov	r0, r2
 8008b06:	f000 fae1 	bl	80090cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6a1b      	ldr	r3, [r3, #32]
 8008b20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b32:	f023 0303 	bic.w	r3, r3, #3
 8008b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	4313      	orrs	r3, r2
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008b50:	f023 030c 	bic.w	r3, r3, #12
 8008b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68da      	ldr	r2, [r3, #12]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	021b      	lsls	r3, r3, #8
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	011a      	lsls	r2, r3, #4
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	031b      	lsls	r3, r3, #12
 8008b80:	4313      	orrs	r3, r2
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008b8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008b96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	011b      	lsls	r3, r3, #4
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008c14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008c24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d110      	bne.n	8008c4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d102      	bne.n	8008c38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c32:	7b7b      	ldrb	r3, [r7, #13]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d001      	beq.n	8008c3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e069      	b.n	8008d10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2202      	movs	r2, #2
 8008c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c4c:	e031      	b.n	8008cb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	d110      	bne.n	8008c76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d102      	bne.n	8008c60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c5a:	7b3b      	ldrb	r3, [r7, #12]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d001      	beq.n	8008c64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e055      	b.n	8008d10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c74:	e01d      	b.n	8008cb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d108      	bne.n	8008c8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d105      	bne.n	8008c8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c82:	7b7b      	ldrb	r3, [r7, #13]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d102      	bne.n	8008c8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c88:	7b3b      	ldrb	r3, [r7, #12]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d001      	beq.n	8008c92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e03e      	b.n	8008d10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2202      	movs	r2, #2
 8008c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2202      	movs	r2, #2
 8008cae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <HAL_TIM_Encoder_Start+0xc4>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	d008      	beq.n	8008cd0 <HAL_TIM_Encoder_Start+0xd4>
 8008cbe:	e00f      	b.n	8008ce0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 fc55 	bl	8009578 <TIM_CCxChannelCmd>
      break;
 8008cce:	e016      	b.n	8008cfe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	2104      	movs	r1, #4
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 fc4d 	bl	8009578 <TIM_CCxChannelCmd>
      break;
 8008cde:	e00e      	b.n	8008cfe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 fc45 	bl	8009578 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	2104      	movs	r1, #4
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fc3e 	bl	8009578 <TIM_CCxChannelCmd>
      break;
 8008cfc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f042 0201 	orr.w	r2, r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d020      	beq.n	8008d7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d01b      	beq.n	8008d7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f06f 0202 	mvn.w	r2, #2
 8008d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f994 	bl	8009090 <HAL_TIM_IC_CaptureCallback>
 8008d68:	e005      	b.n	8008d76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f986 	bl	800907c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f997 	bl	80090a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f003 0304 	and.w	r3, r3, #4
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d020      	beq.n	8008dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d01b      	beq.n	8008dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f06f 0204 	mvn.w	r2, #4
 8008d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f96e 	bl	8009090 <HAL_TIM_IC_CaptureCallback>
 8008db4:	e005      	b.n	8008dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f960 	bl	800907c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f971 	bl	80090a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f003 0308 	and.w	r3, r3, #8
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d020      	beq.n	8008e14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f003 0308 	and.w	r3, r3, #8
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01b      	beq.n	8008e14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f06f 0208 	mvn.w	r2, #8
 8008de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2204      	movs	r2, #4
 8008dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	f003 0303 	and.w	r3, r3, #3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f948 	bl	8009090 <HAL_TIM_IC_CaptureCallback>
 8008e00:	e005      	b.n	8008e0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f93a 	bl	800907c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f94b 	bl	80090a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	f003 0310 	and.w	r3, r3, #16
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d020      	beq.n	8008e60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f003 0310 	and.w	r3, r3, #16
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01b      	beq.n	8008e60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f06f 0210 	mvn.w	r2, #16
 8008e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2208      	movs	r2, #8
 8008e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f922 	bl	8009090 <HAL_TIM_IC_CaptureCallback>
 8008e4c:	e005      	b.n	8008e5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f914 	bl	800907c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f925 	bl	80090a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00c      	beq.n	8008e84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d007      	beq.n	8008e84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f06f 0201 	mvn.w	r2, #1
 8008e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7f8 fc9a 	bl	80017b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00c      	beq.n	8008ea8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d007      	beq.n	8008ea8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fc14 	bl	80096d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00c      	beq.n	8008ecc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d007      	beq.n	8008ecc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f8f6 	bl	80090b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f003 0320 	and.w	r3, r3, #32
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00c      	beq.n	8008ef0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f003 0320 	and.w	r3, r3, #32
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d007      	beq.n	8008ef0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f06f 0220 	mvn.w	r2, #32
 8008ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fbe6 	bl	80096bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ef0:	bf00      	nop
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d101      	bne.n	8008f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f12:	2302      	movs	r3, #2
 8008f14:	e0ae      	b.n	8009074 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b0c      	cmp	r3, #12
 8008f22:	f200 809f 	bhi.w	8009064 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008f26:	a201      	add	r2, pc, #4	@ (adr r2, 8008f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2c:	08008f61 	.word	0x08008f61
 8008f30:	08009065 	.word	0x08009065
 8008f34:	08009065 	.word	0x08009065
 8008f38:	08009065 	.word	0x08009065
 8008f3c:	08008fa1 	.word	0x08008fa1
 8008f40:	08009065 	.word	0x08009065
 8008f44:	08009065 	.word	0x08009065
 8008f48:	08009065 	.word	0x08009065
 8008f4c:	08008fe3 	.word	0x08008fe3
 8008f50:	08009065 	.word	0x08009065
 8008f54:	08009065 	.word	0x08009065
 8008f58:	08009065 	.word	0x08009065
 8008f5c:	08009023 	.word	0x08009023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 f956 	bl	8009218 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	699a      	ldr	r2, [r3, #24]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f042 0208 	orr.w	r2, r2, #8
 8008f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0204 	bic.w	r2, r2, #4
 8008f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6999      	ldr	r1, [r3, #24]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	691a      	ldr	r2, [r3, #16]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	619a      	str	r2, [r3, #24]
      break;
 8008f9e:	e064      	b.n	800906a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68b9      	ldr	r1, [r7, #8]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f9a6 	bl	80092f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	699a      	ldr	r2, [r3, #24]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699a      	ldr	r2, [r3, #24]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6999      	ldr	r1, [r3, #24]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	021a      	lsls	r2, r3, #8
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	619a      	str	r2, [r3, #24]
      break;
 8008fe0:	e043      	b.n	800906a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68b9      	ldr	r1, [r7, #8]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 f9fb 	bl	80093e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69da      	ldr	r2, [r3, #28]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f042 0208 	orr.w	r2, r2, #8
 8008ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69da      	ldr	r2, [r3, #28]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f022 0204 	bic.w	r2, r2, #4
 800900c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69d9      	ldr	r1, [r3, #28]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	691a      	ldr	r2, [r3, #16]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	430a      	orrs	r2, r1
 800901e:	61da      	str	r2, [r3, #28]
      break;
 8009020:	e023      	b.n	800906a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68b9      	ldr	r1, [r7, #8]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fa4f 	bl	80094cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	69da      	ldr	r2, [r3, #28]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800903c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	69da      	ldr	r2, [r3, #28]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800904c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69d9      	ldr	r1, [r3, #28]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	021a      	lsls	r2, r3, #8
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	61da      	str	r2, [r3, #28]
      break;
 8009062:	e002      	b.n	800906a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	75fb      	strb	r3, [r7, #23]
      break;
 8009068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009072:	7dfb      	ldrb	r3, [r7, #23]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a43      	ldr	r2, [pc, #268]	@ (80091ec <TIM_Base_SetConfig+0x120>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d013      	beq.n	800910c <TIM_Base_SetConfig+0x40>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ea:	d00f      	beq.n	800910c <TIM_Base_SetConfig+0x40>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a40      	ldr	r2, [pc, #256]	@ (80091f0 <TIM_Base_SetConfig+0x124>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d00b      	beq.n	800910c <TIM_Base_SetConfig+0x40>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a3f      	ldr	r2, [pc, #252]	@ (80091f4 <TIM_Base_SetConfig+0x128>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d007      	beq.n	800910c <TIM_Base_SetConfig+0x40>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a3e      	ldr	r2, [pc, #248]	@ (80091f8 <TIM_Base_SetConfig+0x12c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d003      	beq.n	800910c <TIM_Base_SetConfig+0x40>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a3d      	ldr	r2, [pc, #244]	@ (80091fc <TIM_Base_SetConfig+0x130>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d108      	bne.n	800911e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a32      	ldr	r2, [pc, #200]	@ (80091ec <TIM_Base_SetConfig+0x120>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d02b      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800912c:	d027      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a2f      	ldr	r2, [pc, #188]	@ (80091f0 <TIM_Base_SetConfig+0x124>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d023      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a2e      	ldr	r2, [pc, #184]	@ (80091f4 <TIM_Base_SetConfig+0x128>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d01f      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a2d      	ldr	r2, [pc, #180]	@ (80091f8 <TIM_Base_SetConfig+0x12c>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d01b      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a2c      	ldr	r2, [pc, #176]	@ (80091fc <TIM_Base_SetConfig+0x130>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d017      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a2b      	ldr	r2, [pc, #172]	@ (8009200 <TIM_Base_SetConfig+0x134>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d013      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a2a      	ldr	r2, [pc, #168]	@ (8009204 <TIM_Base_SetConfig+0x138>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d00f      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a29      	ldr	r2, [pc, #164]	@ (8009208 <TIM_Base_SetConfig+0x13c>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d00b      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a28      	ldr	r2, [pc, #160]	@ (800920c <TIM_Base_SetConfig+0x140>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d007      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a27      	ldr	r2, [pc, #156]	@ (8009210 <TIM_Base_SetConfig+0x144>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d003      	beq.n	800917e <TIM_Base_SetConfig+0xb2>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a26      	ldr	r2, [pc, #152]	@ (8009214 <TIM_Base_SetConfig+0x148>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d108      	bne.n	8009190 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	4313      	orrs	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	4313      	orrs	r3, r2
 800919c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a0e      	ldr	r2, [pc, #56]	@ (80091ec <TIM_Base_SetConfig+0x120>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d003      	beq.n	80091be <TIM_Base_SetConfig+0xf2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a10      	ldr	r2, [pc, #64]	@ (80091fc <TIM_Base_SetConfig+0x130>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d103      	bne.n	80091c6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	691a      	ldr	r2, [r3, #16]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f043 0204 	orr.w	r2, r3, #4
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	601a      	str	r2, [r3, #0]
}
 80091de:	bf00      	nop
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	40010000 	.word	0x40010000
 80091f0:	40000400 	.word	0x40000400
 80091f4:	40000800 	.word	0x40000800
 80091f8:	40000c00 	.word	0x40000c00
 80091fc:	40010400 	.word	0x40010400
 8009200:	40014000 	.word	0x40014000
 8009204:	40014400 	.word	0x40014400
 8009208:	40014800 	.word	0x40014800
 800920c:	40001800 	.word	0x40001800
 8009210:	40001c00 	.word	0x40001c00
 8009214:	40002000 	.word	0x40002000

08009218 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	f023 0201 	bic.w	r2, r3, #1
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 0303 	bic.w	r3, r3, #3
 800924e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	4313      	orrs	r3, r2
 8009258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f023 0302 	bic.w	r3, r3, #2
 8009260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	4313      	orrs	r3, r2
 800926a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a20      	ldr	r2, [pc, #128]	@ (80092f0 <TIM_OC1_SetConfig+0xd8>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d003      	beq.n	800927c <TIM_OC1_SetConfig+0x64>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a1f      	ldr	r2, [pc, #124]	@ (80092f4 <TIM_OC1_SetConfig+0xdc>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d10c      	bne.n	8009296 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f023 0308 	bic.w	r3, r3, #8
 8009282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	4313      	orrs	r3, r2
 800928c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f023 0304 	bic.w	r3, r3, #4
 8009294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a15      	ldr	r2, [pc, #84]	@ (80092f0 <TIM_OC1_SetConfig+0xd8>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d003      	beq.n	80092a6 <TIM_OC1_SetConfig+0x8e>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a14      	ldr	r2, [pc, #80]	@ (80092f4 <TIM_OC1_SetConfig+0xdc>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d111      	bne.n	80092ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80092b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	4313      	orrs	r3, r2
 80092be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	685a      	ldr	r2, [r3, #4]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	621a      	str	r2, [r3, #32]
}
 80092e4:	bf00      	nop
 80092e6:	371c      	adds	r7, #28
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	40010000 	.word	0x40010000
 80092f4:	40010400 	.word	0x40010400

080092f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b087      	sub	sp, #28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a1b      	ldr	r3, [r3, #32]
 800930c:	f023 0210 	bic.w	r2, r3, #16
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800932e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	021b      	lsls	r3, r3, #8
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	4313      	orrs	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f023 0320 	bic.w	r3, r3, #32
 8009342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	011b      	lsls	r3, r3, #4
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	4313      	orrs	r3, r2
 800934e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a22      	ldr	r2, [pc, #136]	@ (80093dc <TIM_OC2_SetConfig+0xe4>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d003      	beq.n	8009360 <TIM_OC2_SetConfig+0x68>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a21      	ldr	r2, [pc, #132]	@ (80093e0 <TIM_OC2_SetConfig+0xe8>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d10d      	bne.n	800937c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	011b      	lsls	r3, r3, #4
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	4313      	orrs	r3, r2
 8009372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800937a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a17      	ldr	r2, [pc, #92]	@ (80093dc <TIM_OC2_SetConfig+0xe4>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d003      	beq.n	800938c <TIM_OC2_SetConfig+0x94>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a16      	ldr	r2, [pc, #88]	@ (80093e0 <TIM_OC2_SetConfig+0xe8>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d113      	bne.n	80093b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800939a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	621a      	str	r2, [r3, #32]
}
 80093ce:	bf00      	nop
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	40010000 	.word	0x40010000
 80093e0:	40010400 	.word	0x40010400

080093e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0303 	bic.w	r3, r3, #3
 800941a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4313      	orrs	r3, r2
 8009424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800942c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	021b      	lsls	r3, r3, #8
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	4313      	orrs	r3, r2
 8009438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a21      	ldr	r2, [pc, #132]	@ (80094c4 <TIM_OC3_SetConfig+0xe0>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d003      	beq.n	800944a <TIM_OC3_SetConfig+0x66>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a20      	ldr	r2, [pc, #128]	@ (80094c8 <TIM_OC3_SetConfig+0xe4>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d10d      	bne.n	8009466 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a16      	ldr	r2, [pc, #88]	@ (80094c4 <TIM_OC3_SetConfig+0xe0>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d003      	beq.n	8009476 <TIM_OC3_SetConfig+0x92>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a15      	ldr	r2, [pc, #84]	@ (80094c8 <TIM_OC3_SetConfig+0xe4>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d113      	bne.n	800949e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800947c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	011b      	lsls	r3, r3, #4
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	4313      	orrs	r3, r2
 8009490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	011b      	lsls	r3, r3, #4
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	4313      	orrs	r3, r2
 800949c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	621a      	str	r2, [r3, #32]
}
 80094b8:	bf00      	nop
 80094ba:	371c      	adds	r7, #28
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr
 80094c4:	40010000 	.word	0x40010000
 80094c8:	40010400 	.word	0x40010400

080094cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b087      	sub	sp, #28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a1b      	ldr	r3, [r3, #32]
 80094e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	021b      	lsls	r3, r3, #8
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	4313      	orrs	r3, r2
 800950e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009516:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	031b      	lsls	r3, r3, #12
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	4313      	orrs	r3, r2
 8009522:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a12      	ldr	r2, [pc, #72]	@ (8009570 <TIM_OC4_SetConfig+0xa4>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d003      	beq.n	8009534 <TIM_OC4_SetConfig+0x68>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a11      	ldr	r2, [pc, #68]	@ (8009574 <TIM_OC4_SetConfig+0xa8>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d109      	bne.n	8009548 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800953a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	019b      	lsls	r3, r3, #6
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	4313      	orrs	r3, r2
 8009546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	621a      	str	r2, [r3, #32]
}
 8009562:	bf00      	nop
 8009564:	371c      	adds	r7, #28
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	40010000 	.word	0x40010000
 8009574:	40010400 	.word	0x40010400

08009578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f003 031f 	and.w	r3, r3, #31
 800958a:	2201      	movs	r2, #1
 800958c:	fa02 f303 	lsl.w	r3, r2, r3
 8009590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6a1a      	ldr	r2, [r3, #32]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	43db      	mvns	r3, r3
 800959a:	401a      	ands	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6a1a      	ldr	r2, [r3, #32]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f003 031f 	and.w	r3, r3, #31
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	fa01 f303 	lsl.w	r3, r1, r3
 80095b0:	431a      	orrs	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	621a      	str	r2, [r3, #32]
}
 80095b6:	bf00      	nop
 80095b8:	371c      	adds	r7, #28
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
	...

080095c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d101      	bne.n	80095dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095d8:	2302      	movs	r3, #2
 80095da:	e05a      	b.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	4313      	orrs	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a21      	ldr	r2, [pc, #132]	@ (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d022      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009628:	d01d      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a1d      	ldr	r2, [pc, #116]	@ (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d018      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a1b      	ldr	r2, [pc, #108]	@ (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d013      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a1a      	ldr	r2, [pc, #104]	@ (80096ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d00e      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a18      	ldr	r2, [pc, #96]	@ (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d009      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a17      	ldr	r2, [pc, #92]	@ (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d004      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a15      	ldr	r2, [pc, #84]	@ (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d10c      	bne.n	8009680 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800966c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	4313      	orrs	r3, r2
 8009676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	40010000 	.word	0x40010000
 80096a4:	40000400 	.word	0x40000400
 80096a8:	40000800 	.word	0x40000800
 80096ac:	40000c00 	.word	0x40000c00
 80096b0:	40010400 	.word	0x40010400
 80096b4:	40014000 	.word	0x40014000
 80096b8:	40001800 	.word	0x40001800

080096bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e042      	b.n	800977c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d106      	bne.n	8009710 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7f8 feb8 	bl	8002480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2224      	movs	r2, #36	@ 0x24
 8009714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68da      	ldr	r2, [r3, #12]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009726:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fe8b 	bl	800a444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	691a      	ldr	r2, [r3, #16]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800973c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	695a      	ldr	r2, [r3, #20]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800974c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68da      	ldr	r2, [r3, #12]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800975c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2220      	movs	r2, #32
 8009768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2220      	movs	r2, #32
 8009770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	4613      	mov	r3, r2
 8009790:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b20      	cmp	r3, #32
 800979c:	d112      	bne.n	80097c4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <HAL_UART_Receive_DMA+0x26>
 80097a4:	88fb      	ldrh	r3, [r7, #6]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d101      	bne.n	80097ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e00b      	b.n	80097c6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80097b4:	88fb      	ldrh	r3, [r7, #6]
 80097b6:	461a      	mov	r2, r3
 80097b8:	68b9      	ldr	r1, [r7, #8]
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f000 fbda 	bl	8009f74 <UART_Start_Receive_DMA>
 80097c0:	4603      	mov	r3, r0
 80097c2:	e000      	b.n	80097c6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80097c4:	2302      	movs	r3, #2
  }
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
	...

080097d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b0ba      	sub	sp, #232	@ 0xe8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80097f6:	2300      	movs	r3, #0
 80097f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009806:	f003 030f 	and.w	r3, r3, #15
 800980a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800980e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10f      	bne.n	8009836 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b00      	cmp	r3, #0
 8009820:	d009      	beq.n	8009836 <HAL_UART_IRQHandler+0x66>
 8009822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009826:	f003 0320 	and.w	r3, r3, #32
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fd4a 	bl	800a2c8 <UART_Receive_IT>
      return;
 8009834:	e273      	b.n	8009d1e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 80de 	beq.w	80099fc <HAL_UART_IRQHandler+0x22c>
 8009840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	2b00      	cmp	r3, #0
 800984a:	d106      	bne.n	800985a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800984c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009850:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 80d1 	beq.w	80099fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800985a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <HAL_UART_IRQHandler+0xae>
 8009866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800986a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800986e:	2b00      	cmp	r3, #0
 8009870:	d005      	beq.n	800987e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009876:	f043 0201 	orr.w	r2, r3, #1
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800987e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009882:	f003 0304 	and.w	r3, r3, #4
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <HAL_UART_IRQHandler+0xd2>
 800988a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b00      	cmp	r3, #0
 8009894:	d005      	beq.n	80098a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800989a:	f043 0202 	orr.w	r2, r3, #2
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <HAL_UART_IRQHandler+0xf6>
 80098ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d005      	beq.n	80098c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098be:	f043 0204 	orr.w	r2, r3, #4
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80098c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ca:	f003 0308 	and.w	r3, r3, #8
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d011      	beq.n	80098f6 <HAL_UART_IRQHandler+0x126>
 80098d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098d6:	f003 0320 	and.w	r3, r3, #32
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d105      	bne.n	80098ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80098de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d005      	beq.n	80098f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ee:	f043 0208 	orr.w	r2, r3, #8
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 820a 	beq.w	8009d14 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009904:	f003 0320 	and.w	r3, r3, #32
 8009908:	2b00      	cmp	r3, #0
 800990a:	d008      	beq.n	800991e <HAL_UART_IRQHandler+0x14e>
 800990c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009910:	f003 0320 	and.w	r3, r3, #32
 8009914:	2b00      	cmp	r3, #0
 8009916:	d002      	beq.n	800991e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fcd5 	bl	800a2c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009928:	2b40      	cmp	r3, #64	@ 0x40
 800992a:	bf0c      	ite	eq
 800992c:	2301      	moveq	r3, #1
 800992e:	2300      	movne	r3, #0
 8009930:	b2db      	uxtb	r3, r3
 8009932:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800993a:	f003 0308 	and.w	r3, r3, #8
 800993e:	2b00      	cmp	r3, #0
 8009940:	d103      	bne.n	800994a <HAL_UART_IRQHandler+0x17a>
 8009942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009946:	2b00      	cmp	r3, #0
 8009948:	d04f      	beq.n	80099ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fbe0 	bl	800a110 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800995a:	2b40      	cmp	r3, #64	@ 0x40
 800995c:	d141      	bne.n	80099e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3314      	adds	r3, #20
 8009964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009974:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800997c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3314      	adds	r3, #20
 8009986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800998a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800998e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800999a:	e841 2300 	strex	r3, r2, [r1]
 800999e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80099a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1d9      	bne.n	800995e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d013      	beq.n	80099da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099b6:	4a8a      	ldr	r2, [pc, #552]	@ (8009be0 <HAL_UART_IRQHandler+0x410>)
 80099b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fb fe84 	bl	80056cc <HAL_DMA_Abort_IT>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d016      	beq.n	80099f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80099d4:	4610      	mov	r0, r2
 80099d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d8:	e00e      	b.n	80099f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f9b6 	bl	8009d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099e0:	e00a      	b.n	80099f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f9b2 	bl	8009d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099e8:	e006      	b.n	80099f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f9ae 	bl	8009d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80099f6:	e18d      	b.n	8009d14 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099f8:	bf00      	nop
    return;
 80099fa:	e18b      	b.n	8009d14 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	f040 8167 	bne.w	8009cd4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a0a:	f003 0310 	and.w	r3, r3, #16
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f000 8160 	beq.w	8009cd4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a18:	f003 0310 	and.w	r3, r3, #16
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 8159 	beq.w	8009cd4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a22:	2300      	movs	r3, #0
 8009a24:	60bb      	str	r3, [r7, #8]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	60bb      	str	r3, [r7, #8]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	60bb      	str	r3, [r7, #8]
 8009a36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a42:	2b40      	cmp	r3, #64	@ 0x40
 8009a44:	f040 80ce 	bne.w	8009be4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 80a9 	beq.w	8009bb0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a66:	429a      	cmp	r2, r3
 8009a68:	f080 80a2 	bcs.w	8009bb0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a7e:	f000 8088 	beq.w	8009b92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	330c      	adds	r3, #12
 8009a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a90:	e853 3f00 	ldrex	r3, [r3]
 8009a94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	330c      	adds	r3, #12
 8009aaa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009aae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009aba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009abe:	e841 2300 	strex	r3, r2, [r1]
 8009ac2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1d9      	bne.n	8009a82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3314      	adds	r3, #20
 8009ad4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ade:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ae0:	f023 0301 	bic.w	r3, r3, #1
 8009ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3314      	adds	r3, #20
 8009aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009af2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009af6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009afe:	e841 2300 	strex	r3, r2, [r1]
 8009b02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1e1      	bne.n	8009ace <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	3314      	adds	r3, #20
 8009b10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b14:	e853 3f00 	ldrex	r3, [r3]
 8009b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	3314      	adds	r3, #20
 8009b2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009b2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009b30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009b34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b36:	e841 2300 	strex	r3, r2, [r1]
 8009b3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009b3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1e3      	bne.n	8009b0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2220      	movs	r2, #32
 8009b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	330c      	adds	r3, #12
 8009b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b5a:	e853 3f00 	ldrex	r3, [r3]
 8009b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b62:	f023 0310 	bic.w	r3, r3, #16
 8009b66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	330c      	adds	r3, #12
 8009b70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009b74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009b76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b7c:	e841 2300 	strex	r3, r2, [r1]
 8009b80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1e3      	bne.n	8009b50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fb fd2d 	bl	80055ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2202      	movs	r2, #2
 8009b96:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f8d9 	bl	8009d60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009bae:	e0b3      	b.n	8009d18 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009bb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	f040 80ad 	bne.w	8009d18 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bc8:	f040 80a6 	bne.w	8009d18 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2202      	movs	r2, #2
 8009bd0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f8c1 	bl	8009d60 <HAL_UARTEx_RxEventCallback>
      return;
 8009bde:	e09b      	b.n	8009d18 <HAL_UART_IRQHandler+0x548>
 8009be0:	0800a1d7 	.word	0x0800a1d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 808e 	beq.w	8009d1c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 8089 	beq.w	8009d1c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	330c      	adds	r3, #12
 8009c10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	330c      	adds	r3, #12
 8009c2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009c2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e3      	bne.n	8009c0a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3314      	adds	r3, #20
 8009c48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4c:	e853 3f00 	ldrex	r3, [r3]
 8009c50:	623b      	str	r3, [r7, #32]
   return(result);
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	f023 0301 	bic.w	r3, r3, #1
 8009c58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3314      	adds	r3, #20
 8009c62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009c66:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c6e:	e841 2300 	strex	r3, r2, [r1]
 8009c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1e3      	bne.n	8009c42 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	330c      	adds	r3, #12
 8009c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	e853 3f00 	ldrex	r3, [r3]
 8009c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f023 0310 	bic.w	r3, r3, #16
 8009c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	330c      	adds	r3, #12
 8009ca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009cac:	61fa      	str	r2, [r7, #28]
 8009cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb0:	69b9      	ldr	r1, [r7, #24]
 8009cb2:	69fa      	ldr	r2, [r7, #28]
 8009cb4:	e841 2300 	strex	r3, r2, [r1]
 8009cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1e3      	bne.n	8009c88 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f847 	bl	8009d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cd2:	e023      	b.n	8009d1c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d009      	beq.n	8009cf4 <HAL_UART_IRQHandler+0x524>
 8009ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d003      	beq.n	8009cf4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fa83 	bl	800a1f8 <UART_Transmit_IT>
    return;
 8009cf2:	e014      	b.n	8009d1e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00e      	beq.n	8009d1e <HAL_UART_IRQHandler+0x54e>
 8009d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d008      	beq.n	8009d1e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fac3 	bl	800a298 <UART_EndTransmit_IT>
    return;
 8009d12:	e004      	b.n	8009d1e <HAL_UART_IRQHandler+0x54e>
    return;
 8009d14:	bf00      	nop
 8009d16:	e002      	b.n	8009d1e <HAL_UART_IRQHandler+0x54e>
      return;
 8009d18:	bf00      	nop
 8009d1a:	e000      	b.n	8009d1e <HAL_UART_IRQHandler+0x54e>
      return;
 8009d1c:	bf00      	nop
  }
}
 8009d1e:	37e8      	adds	r7, #232	@ 0xe8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b09c      	sub	sp, #112	@ 0x70
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d84:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d172      	bne.n	8009e7a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009d94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d96:	2200      	movs	r2, #0
 8009d98:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	330c      	adds	r3, #12
 8009da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009da4:	e853 3f00 	ldrex	r3, [r3]
 8009da8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	330c      	adds	r3, #12
 8009db8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009dba:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009dbc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009dc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009dc2:	e841 2300 	strex	r3, r2, [r1]
 8009dc6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1e5      	bne.n	8009d9a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3314      	adds	r3, #20
 8009dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd8:	e853 3f00 	ldrex	r3, [r3]
 8009ddc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de0:	f023 0301 	bic.w	r3, r3, #1
 8009de4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3314      	adds	r3, #20
 8009dec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009dee:	647a      	str	r2, [r7, #68]	@ 0x44
 8009df0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009df4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009df6:	e841 2300 	strex	r3, r2, [r1]
 8009dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1e5      	bne.n	8009dce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3314      	adds	r3, #20
 8009e08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0c:	e853 3f00 	ldrex	r3, [r3]
 8009e10:	623b      	str	r3, [r7, #32]
   return(result);
 8009e12:	6a3b      	ldr	r3, [r7, #32]
 8009e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e18:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3314      	adds	r3, #20
 8009e20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e22:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e2a:	e841 2300 	strex	r3, r2, [r1]
 8009e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1e5      	bne.n	8009e02 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e38:	2220      	movs	r2, #32
 8009e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d119      	bne.n	8009e7a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	330c      	adds	r3, #12
 8009e4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	e853 3f00 	ldrex	r3, [r3]
 8009e54:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f023 0310 	bic.w	r3, r3, #16
 8009e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	330c      	adds	r3, #12
 8009e64:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e66:	61fa      	str	r2, [r7, #28]
 8009e68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6a:	69b9      	ldr	r1, [r7, #24]
 8009e6c:	69fa      	ldr	r2, [r7, #28]
 8009e6e:	e841 2300 	strex	r3, r2, [r1]
 8009e72:	617b      	str	r3, [r7, #20]
   return(result);
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1e5      	bne.n	8009e46 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d106      	bne.n	8009e96 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e90:	f7ff ff66 	bl	8009d60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e94:	e002      	b.n	8009e9c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009e96:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e98:	f7f7 fcfa 	bl	8001890 <HAL_UART_RxCpltCallback>
}
 8009e9c:	bf00      	nop
 8009e9e:	3770      	adds	r7, #112	@ 0x70
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d108      	bne.n	8009ed2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009ec4:	085b      	lsrs	r3, r3, #1
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	4619      	mov	r1, r3
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f7ff ff48 	bl	8009d60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ed0:	e002      	b.n	8009ed8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f7ff ff30 	bl	8009d38 <HAL_UART_RxHalfCpltCallback>
}
 8009ed8:	bf00      	nop
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009efc:	2b80      	cmp	r3, #128	@ 0x80
 8009efe:	bf0c      	ite	eq
 8009f00:	2301      	moveq	r3, #1
 8009f02:	2300      	movne	r3, #0
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b21      	cmp	r3, #33	@ 0x21
 8009f12:	d108      	bne.n	8009f26 <UART_DMAError+0x46>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d005      	beq.n	8009f26 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009f20:	68b8      	ldr	r0, [r7, #8]
 8009f22:	f000 f8cd 	bl	800a0c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f30:	2b40      	cmp	r3, #64	@ 0x40
 8009f32:	bf0c      	ite	eq
 8009f34:	2301      	moveq	r3, #1
 8009f36:	2300      	movne	r3, #0
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b22      	cmp	r3, #34	@ 0x22
 8009f46:	d108      	bne.n	8009f5a <UART_DMAError+0x7a>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d005      	beq.n	8009f5a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	2200      	movs	r2, #0
 8009f52:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009f54:	68b8      	ldr	r0, [r7, #8]
 8009f56:	f000 f8db 	bl	800a110 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f5e:	f043 0210 	orr.w	r2, r3, #16
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f66:	68b8      	ldr	r0, [r7, #8]
 8009f68:	f7ff fef0 	bl	8009d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f6c:	bf00      	nop
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b098      	sub	sp, #96	@ 0x60
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	88fa      	ldrh	r2, [r7, #6]
 8009f8c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2222      	movs	r2, #34	@ 0x22
 8009f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fa0:	4a44      	ldr	r2, [pc, #272]	@ (800a0b4 <UART_Start_Receive_DMA+0x140>)
 8009fa2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fa8:	4a43      	ldr	r2, [pc, #268]	@ (800a0b8 <UART_Start_Receive_DMA+0x144>)
 8009faa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fb0:	4a42      	ldr	r2, [pc, #264]	@ (800a0bc <UART_Start_Receive_DMA+0x148>)
 8009fb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fb8:	2200      	movs	r2, #0
 8009fba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009fbc:	f107 0308 	add.w	r3, r7, #8
 8009fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	3304      	adds	r3, #4
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	88fb      	ldrh	r3, [r7, #6]
 8009fd4:	f7fb fab2 	bl	800553c <HAL_DMA_Start_IT>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d008      	beq.n	8009ff0 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2210      	movs	r2, #16
 8009fe2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2220      	movs	r2, #32
 8009fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e05d      	b.n	800a0ac <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	613b      	str	r3, [r7, #16]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	613b      	str	r3, [r7, #16]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	613b      	str	r3, [r7, #16]
 800a004:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d019      	beq.n	800a042 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	330c      	adds	r3, #12
 800a014:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a018:	e853 3f00 	ldrex	r3, [r3]
 800a01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a024:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	330c      	adds	r3, #12
 800a02c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a02e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a030:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a032:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a034:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a036:	e841 2300 	strex	r3, r2, [r1]
 800a03a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a03c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1e5      	bne.n	800a00e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3314      	adds	r3, #20
 800a048:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a04c:	e853 3f00 	ldrex	r3, [r3]
 800a050:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a054:	f043 0301 	orr.w	r3, r3, #1
 800a058:	657b      	str	r3, [r7, #84]	@ 0x54
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3314      	adds	r3, #20
 800a060:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a062:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a064:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a066:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a068:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a06a:	e841 2300 	strex	r3, r2, [r1]
 800a06e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1e5      	bne.n	800a042 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3314      	adds	r3, #20
 800a07c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	e853 3f00 	ldrex	r3, [r3]
 800a084:	617b      	str	r3, [r7, #20]
   return(result);
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a08c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3314      	adds	r3, #20
 800a094:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a096:	627a      	str	r2, [r7, #36]	@ 0x24
 800a098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09a:	6a39      	ldr	r1, [r7, #32]
 800a09c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a09e:	e841 2300 	strex	r3, r2, [r1]
 800a0a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1e5      	bne.n	800a076 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3760      	adds	r7, #96	@ 0x60
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	08009d79 	.word	0x08009d79
 800a0b8:	08009ea5 	.word	0x08009ea5
 800a0bc:	08009ee1 	.word	0x08009ee1

0800a0c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b089      	sub	sp, #36	@ 0x24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	e853 3f00 	ldrex	r3, [r3]
 800a0d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a0de:	61fb      	str	r3, [r7, #28]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	330c      	adds	r3, #12
 800a0e6:	69fa      	ldr	r2, [r7, #28]
 800a0e8:	61ba      	str	r2, [r7, #24]
 800a0ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ec:	6979      	ldr	r1, [r7, #20]
 800a0ee:	69ba      	ldr	r2, [r7, #24]
 800a0f0:	e841 2300 	strex	r3, r2, [r1]
 800a0f4:	613b      	str	r3, [r7, #16]
   return(result);
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e5      	bne.n	800a0c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a104:	bf00      	nop
 800a106:	3724      	adds	r7, #36	@ 0x24
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a110:	b480      	push	{r7}
 800a112:	b095      	sub	sp, #84	@ 0x54
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	330c      	adds	r3, #12
 800a11e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a122:	e853 3f00 	ldrex	r3, [r3]
 800a126:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a12e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	330c      	adds	r3, #12
 800a136:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a138:	643a      	str	r2, [r7, #64]	@ 0x40
 800a13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a13e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a140:	e841 2300 	strex	r3, r2, [r1]
 800a144:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1e5      	bne.n	800a118 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3314      	adds	r3, #20
 800a152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	e853 3f00 	ldrex	r3, [r3]
 800a15a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	f023 0301 	bic.w	r3, r3, #1
 800a162:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3314      	adds	r3, #20
 800a16a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a16c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a16e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a170:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a174:	e841 2300 	strex	r3, r2, [r1]
 800a178:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1e5      	bne.n	800a14c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a184:	2b01      	cmp	r3, #1
 800a186:	d119      	bne.n	800a1bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	330c      	adds	r3, #12
 800a18e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	e853 3f00 	ldrex	r3, [r3]
 800a196:	60bb      	str	r3, [r7, #8]
   return(result);
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	f023 0310 	bic.w	r3, r3, #16
 800a19e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	330c      	adds	r3, #12
 800a1a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1a8:	61ba      	str	r2, [r7, #24]
 800a1aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ac:	6979      	ldr	r1, [r7, #20]
 800a1ae:	69ba      	ldr	r2, [r7, #24]
 800a1b0:	e841 2300 	strex	r3, r2, [r1]
 800a1b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1e5      	bne.n	800a188 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2220      	movs	r2, #32
 800a1c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a1ca:	bf00      	nop
 800a1cc:	3754      	adds	r7, #84	@ 0x54
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr

0800a1d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b084      	sub	sp, #16
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7ff fdae 	bl	8009d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1f0:	bf00      	nop
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b21      	cmp	r3, #33	@ 0x21
 800a20a:	d13e      	bne.n	800a28a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a214:	d114      	bne.n	800a240 <UART_Transmit_IT+0x48>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d110      	bne.n	800a240 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	881b      	ldrh	r3, [r3, #0]
 800a228:	461a      	mov	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a232:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a1b      	ldr	r3, [r3, #32]
 800a238:	1c9a      	adds	r2, r3, #2
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	621a      	str	r2, [r3, #32]
 800a23e:	e008      	b.n	800a252 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	1c59      	adds	r1, r3, #1
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	6211      	str	r1, [r2, #32]
 800a24a:	781a      	ldrb	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a256:	b29b      	uxth	r3, r3
 800a258:	3b01      	subs	r3, #1
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	4619      	mov	r1, r3
 800a260:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10f      	bne.n	800a286 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68da      	ldr	r2, [r3, #12]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a274:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68da      	ldr	r2, [r3, #12]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a284:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	e000      	b.n	800a28c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a28a:	2302      	movs	r3, #2
  }
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a2ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7ff fd33 	bl	8009d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b08c      	sub	sp, #48	@ 0x30
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	2b22      	cmp	r3, #34	@ 0x22
 800a2e2:	f040 80aa 	bne.w	800a43a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2ee:	d115      	bne.n	800a31c <UART_Receive_IT+0x54>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d111      	bne.n	800a31c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	b29b      	uxth	r3, r3
 800a306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a314:	1c9a      	adds	r2, r3, #2
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	629a      	str	r2, [r3, #40]	@ 0x28
 800a31a:	e024      	b.n	800a366 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a320:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a32a:	d007      	beq.n	800a33c <UART_Receive_IT+0x74>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10a      	bne.n	800a34a <UART_Receive_IT+0x82>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d106      	bne.n	800a34a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	b2da      	uxtb	r2, r3
 800a344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a346:	701a      	strb	r2, [r3, #0]
 800a348:	e008      	b.n	800a35c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	b2db      	uxtb	r3, r3
 800a352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a356:	b2da      	uxtb	r2, r3
 800a358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a35a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	3b01      	subs	r3, #1
 800a36e:	b29b      	uxth	r3, r3
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	4619      	mov	r1, r3
 800a374:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a376:	2b00      	cmp	r3, #0
 800a378:	d15d      	bne.n	800a436 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f022 0220 	bic.w	r2, r2, #32
 800a388:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68da      	ldr	r2, [r3, #12]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a398:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	695a      	ldr	r2, [r3, #20]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f022 0201 	bic.w	r2, r2, #1
 800a3a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2220      	movs	r2, #32
 800a3ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d135      	bne.n	800a42c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	330c      	adds	r3, #12
 800a3cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	e853 3f00 	ldrex	r3, [r3]
 800a3d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	f023 0310 	bic.w	r3, r3, #16
 800a3dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	330c      	adds	r3, #12
 800a3e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3e6:	623a      	str	r2, [r7, #32]
 800a3e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ea:	69f9      	ldr	r1, [r7, #28]
 800a3ec:	6a3a      	ldr	r2, [r7, #32]
 800a3ee:	e841 2300 	strex	r3, r2, [r1]
 800a3f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1e5      	bne.n	800a3c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 0310 	and.w	r3, r3, #16
 800a404:	2b10      	cmp	r3, #16
 800a406:	d10a      	bne.n	800a41e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a408:	2300      	movs	r3, #0
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	60fb      	str	r3, [r7, #12]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7ff fc9b 	bl	8009d60 <HAL_UARTEx_RxEventCallback>
 800a42a:	e002      	b.n	800a432 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7f7 fa2f 	bl	8001890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	e002      	b.n	800a43c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	e000      	b.n	800a43c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a43a:	2302      	movs	r3, #2
  }
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3730      	adds	r7, #48	@ 0x30
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a448:	b0c0      	sub	sp, #256	@ 0x100
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a460:	68d9      	ldr	r1, [r3, #12]
 800a462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	ea40 0301 	orr.w	r3, r0, r1
 800a46c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a46e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a472:	689a      	ldr	r2, [r3, #8]
 800a474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	431a      	orrs	r2, r3
 800a47c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	431a      	orrs	r2, r3
 800a484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a49c:	f021 010c 	bic.w	r1, r1, #12
 800a4a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a4aa:	430b      	orrs	r3, r1
 800a4ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a4ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a4ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4be:	6999      	ldr	r1, [r3, #24]
 800a4c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	ea40 0301 	orr.w	r3, r0, r1
 800a4ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a4cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	4b8f      	ldr	r3, [pc, #572]	@ (800a710 <UART_SetConfig+0x2cc>)
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d005      	beq.n	800a4e4 <UART_SetConfig+0xa0>
 800a4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	4b8d      	ldr	r3, [pc, #564]	@ (800a714 <UART_SetConfig+0x2d0>)
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d104      	bne.n	800a4ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a4e4:	f7fd f980 	bl	80077e8 <HAL_RCC_GetPCLK2Freq>
 800a4e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a4ec:	e003      	b.n	800a4f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4ee:	f7fd f967 	bl	80077c0 <HAL_RCC_GetPCLK1Freq>
 800a4f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a500:	f040 810c 	bne.w	800a71c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a508:	2200      	movs	r2, #0
 800a50a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a50e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a512:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a516:	4622      	mov	r2, r4
 800a518:	462b      	mov	r3, r5
 800a51a:	1891      	adds	r1, r2, r2
 800a51c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a51e:	415b      	adcs	r3, r3
 800a520:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a522:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a526:	4621      	mov	r1, r4
 800a528:	eb12 0801 	adds.w	r8, r2, r1
 800a52c:	4629      	mov	r1, r5
 800a52e:	eb43 0901 	adc.w	r9, r3, r1
 800a532:	f04f 0200 	mov.w	r2, #0
 800a536:	f04f 0300 	mov.w	r3, #0
 800a53a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a53e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a546:	4690      	mov	r8, r2
 800a548:	4699      	mov	r9, r3
 800a54a:	4623      	mov	r3, r4
 800a54c:	eb18 0303 	adds.w	r3, r8, r3
 800a550:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a554:	462b      	mov	r3, r5
 800a556:	eb49 0303 	adc.w	r3, r9, r3
 800a55a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a55e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a56a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a56e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a572:	460b      	mov	r3, r1
 800a574:	18db      	adds	r3, r3, r3
 800a576:	653b      	str	r3, [r7, #80]	@ 0x50
 800a578:	4613      	mov	r3, r2
 800a57a:	eb42 0303 	adc.w	r3, r2, r3
 800a57e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a580:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a584:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a588:	f7f6 fbae 	bl	8000ce8 <__aeabi_uldivmod>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4b61      	ldr	r3, [pc, #388]	@ (800a718 <UART_SetConfig+0x2d4>)
 800a592:	fba3 2302 	umull	r2, r3, r3, r2
 800a596:	095b      	lsrs	r3, r3, #5
 800a598:	011c      	lsls	r4, r3, #4
 800a59a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a5a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a5a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a5ac:	4642      	mov	r2, r8
 800a5ae:	464b      	mov	r3, r9
 800a5b0:	1891      	adds	r1, r2, r2
 800a5b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a5b4:	415b      	adcs	r3, r3
 800a5b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a5bc:	4641      	mov	r1, r8
 800a5be:	eb12 0a01 	adds.w	sl, r2, r1
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	eb43 0b01 	adc.w	fp, r3, r1
 800a5c8:	f04f 0200 	mov.w	r2, #0
 800a5cc:	f04f 0300 	mov.w	r3, #0
 800a5d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a5d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a5d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a5dc:	4692      	mov	sl, r2
 800a5de:	469b      	mov	fp, r3
 800a5e0:	4643      	mov	r3, r8
 800a5e2:	eb1a 0303 	adds.w	r3, sl, r3
 800a5e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a5ea:	464b      	mov	r3, r9
 800a5ec:	eb4b 0303 	adc.w	r3, fp, r3
 800a5f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a5f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a600:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a604:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a608:	460b      	mov	r3, r1
 800a60a:	18db      	adds	r3, r3, r3
 800a60c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a60e:	4613      	mov	r3, r2
 800a610:	eb42 0303 	adc.w	r3, r2, r3
 800a614:	647b      	str	r3, [r7, #68]	@ 0x44
 800a616:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a61a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a61e:	f7f6 fb63 	bl	8000ce8 <__aeabi_uldivmod>
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	4611      	mov	r1, r2
 800a628:	4b3b      	ldr	r3, [pc, #236]	@ (800a718 <UART_SetConfig+0x2d4>)
 800a62a:	fba3 2301 	umull	r2, r3, r3, r1
 800a62e:	095b      	lsrs	r3, r3, #5
 800a630:	2264      	movs	r2, #100	@ 0x64
 800a632:	fb02 f303 	mul.w	r3, r2, r3
 800a636:	1acb      	subs	r3, r1, r3
 800a638:	00db      	lsls	r3, r3, #3
 800a63a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a63e:	4b36      	ldr	r3, [pc, #216]	@ (800a718 <UART_SetConfig+0x2d4>)
 800a640:	fba3 2302 	umull	r2, r3, r3, r2
 800a644:	095b      	lsrs	r3, r3, #5
 800a646:	005b      	lsls	r3, r3, #1
 800a648:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a64c:	441c      	add	r4, r3
 800a64e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a652:	2200      	movs	r2, #0
 800a654:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a658:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a65c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a660:	4642      	mov	r2, r8
 800a662:	464b      	mov	r3, r9
 800a664:	1891      	adds	r1, r2, r2
 800a666:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a668:	415b      	adcs	r3, r3
 800a66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a66c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a670:	4641      	mov	r1, r8
 800a672:	1851      	adds	r1, r2, r1
 800a674:	6339      	str	r1, [r7, #48]	@ 0x30
 800a676:	4649      	mov	r1, r9
 800a678:	414b      	adcs	r3, r1
 800a67a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a67c:	f04f 0200 	mov.w	r2, #0
 800a680:	f04f 0300 	mov.w	r3, #0
 800a684:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a688:	4659      	mov	r1, fp
 800a68a:	00cb      	lsls	r3, r1, #3
 800a68c:	4651      	mov	r1, sl
 800a68e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a692:	4651      	mov	r1, sl
 800a694:	00ca      	lsls	r2, r1, #3
 800a696:	4610      	mov	r0, r2
 800a698:	4619      	mov	r1, r3
 800a69a:	4603      	mov	r3, r0
 800a69c:	4642      	mov	r2, r8
 800a69e:	189b      	adds	r3, r3, r2
 800a6a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a6a4:	464b      	mov	r3, r9
 800a6a6:	460a      	mov	r2, r1
 800a6a8:	eb42 0303 	adc.w	r3, r2, r3
 800a6ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a6bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a6c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	18db      	adds	r3, r3, r3
 800a6c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	eb42 0303 	adc.w	r3, r2, r3
 800a6d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a6d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a6da:	f7f6 fb05 	bl	8000ce8 <__aeabi_uldivmod>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a718 <UART_SetConfig+0x2d4>)
 800a6e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a6e8:	095b      	lsrs	r3, r3, #5
 800a6ea:	2164      	movs	r1, #100	@ 0x64
 800a6ec:	fb01 f303 	mul.w	r3, r1, r3
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	3332      	adds	r3, #50	@ 0x32
 800a6f6:	4a08      	ldr	r2, [pc, #32]	@ (800a718 <UART_SetConfig+0x2d4>)
 800a6f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6fc:	095b      	lsrs	r3, r3, #5
 800a6fe:	f003 0207 	and.w	r2, r3, #7
 800a702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4422      	add	r2, r4
 800a70a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a70c:	e106      	b.n	800a91c <UART_SetConfig+0x4d8>
 800a70e:	bf00      	nop
 800a710:	40011000 	.word	0x40011000
 800a714:	40011400 	.word	0x40011400
 800a718:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a71c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a720:	2200      	movs	r2, #0
 800a722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a726:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a72a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a72e:	4642      	mov	r2, r8
 800a730:	464b      	mov	r3, r9
 800a732:	1891      	adds	r1, r2, r2
 800a734:	6239      	str	r1, [r7, #32]
 800a736:	415b      	adcs	r3, r3
 800a738:	627b      	str	r3, [r7, #36]	@ 0x24
 800a73a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a73e:	4641      	mov	r1, r8
 800a740:	1854      	adds	r4, r2, r1
 800a742:	4649      	mov	r1, r9
 800a744:	eb43 0501 	adc.w	r5, r3, r1
 800a748:	f04f 0200 	mov.w	r2, #0
 800a74c:	f04f 0300 	mov.w	r3, #0
 800a750:	00eb      	lsls	r3, r5, #3
 800a752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a756:	00e2      	lsls	r2, r4, #3
 800a758:	4614      	mov	r4, r2
 800a75a:	461d      	mov	r5, r3
 800a75c:	4643      	mov	r3, r8
 800a75e:	18e3      	adds	r3, r4, r3
 800a760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a764:	464b      	mov	r3, r9
 800a766:	eb45 0303 	adc.w	r3, r5, r3
 800a76a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a76e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a77a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a77e:	f04f 0200 	mov.w	r2, #0
 800a782:	f04f 0300 	mov.w	r3, #0
 800a786:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a78a:	4629      	mov	r1, r5
 800a78c:	008b      	lsls	r3, r1, #2
 800a78e:	4621      	mov	r1, r4
 800a790:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a794:	4621      	mov	r1, r4
 800a796:	008a      	lsls	r2, r1, #2
 800a798:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a79c:	f7f6 faa4 	bl	8000ce8 <__aeabi_uldivmod>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	4b60      	ldr	r3, [pc, #384]	@ (800a928 <UART_SetConfig+0x4e4>)
 800a7a6:	fba3 2302 	umull	r2, r3, r3, r2
 800a7aa:	095b      	lsrs	r3, r3, #5
 800a7ac:	011c      	lsls	r4, r3, #4
 800a7ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a7b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a7bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a7c0:	4642      	mov	r2, r8
 800a7c2:	464b      	mov	r3, r9
 800a7c4:	1891      	adds	r1, r2, r2
 800a7c6:	61b9      	str	r1, [r7, #24]
 800a7c8:	415b      	adcs	r3, r3
 800a7ca:	61fb      	str	r3, [r7, #28]
 800a7cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7d0:	4641      	mov	r1, r8
 800a7d2:	1851      	adds	r1, r2, r1
 800a7d4:	6139      	str	r1, [r7, #16]
 800a7d6:	4649      	mov	r1, r9
 800a7d8:	414b      	adcs	r3, r1
 800a7da:	617b      	str	r3, [r7, #20]
 800a7dc:	f04f 0200 	mov.w	r2, #0
 800a7e0:	f04f 0300 	mov.w	r3, #0
 800a7e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a7e8:	4659      	mov	r1, fp
 800a7ea:	00cb      	lsls	r3, r1, #3
 800a7ec:	4651      	mov	r1, sl
 800a7ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7f2:	4651      	mov	r1, sl
 800a7f4:	00ca      	lsls	r2, r1, #3
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	4642      	mov	r2, r8
 800a7fe:	189b      	adds	r3, r3, r2
 800a800:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a804:	464b      	mov	r3, r9
 800a806:	460a      	mov	r2, r1
 800a808:	eb42 0303 	adc.w	r3, r2, r3
 800a80c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a81a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a81c:	f04f 0200 	mov.w	r2, #0
 800a820:	f04f 0300 	mov.w	r3, #0
 800a824:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a828:	4649      	mov	r1, r9
 800a82a:	008b      	lsls	r3, r1, #2
 800a82c:	4641      	mov	r1, r8
 800a82e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a832:	4641      	mov	r1, r8
 800a834:	008a      	lsls	r2, r1, #2
 800a836:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a83a:	f7f6 fa55 	bl	8000ce8 <__aeabi_uldivmod>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	4611      	mov	r1, r2
 800a844:	4b38      	ldr	r3, [pc, #224]	@ (800a928 <UART_SetConfig+0x4e4>)
 800a846:	fba3 2301 	umull	r2, r3, r3, r1
 800a84a:	095b      	lsrs	r3, r3, #5
 800a84c:	2264      	movs	r2, #100	@ 0x64
 800a84e:	fb02 f303 	mul.w	r3, r2, r3
 800a852:	1acb      	subs	r3, r1, r3
 800a854:	011b      	lsls	r3, r3, #4
 800a856:	3332      	adds	r3, #50	@ 0x32
 800a858:	4a33      	ldr	r2, [pc, #204]	@ (800a928 <UART_SetConfig+0x4e4>)
 800a85a:	fba2 2303 	umull	r2, r3, r2, r3
 800a85e:	095b      	lsrs	r3, r3, #5
 800a860:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a864:	441c      	add	r4, r3
 800a866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a86a:	2200      	movs	r2, #0
 800a86c:	673b      	str	r3, [r7, #112]	@ 0x70
 800a86e:	677a      	str	r2, [r7, #116]	@ 0x74
 800a870:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a874:	4642      	mov	r2, r8
 800a876:	464b      	mov	r3, r9
 800a878:	1891      	adds	r1, r2, r2
 800a87a:	60b9      	str	r1, [r7, #8]
 800a87c:	415b      	adcs	r3, r3
 800a87e:	60fb      	str	r3, [r7, #12]
 800a880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a884:	4641      	mov	r1, r8
 800a886:	1851      	adds	r1, r2, r1
 800a888:	6039      	str	r1, [r7, #0]
 800a88a:	4649      	mov	r1, r9
 800a88c:	414b      	adcs	r3, r1
 800a88e:	607b      	str	r3, [r7, #4]
 800a890:	f04f 0200 	mov.w	r2, #0
 800a894:	f04f 0300 	mov.w	r3, #0
 800a898:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a89c:	4659      	mov	r1, fp
 800a89e:	00cb      	lsls	r3, r1, #3
 800a8a0:	4651      	mov	r1, sl
 800a8a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8a6:	4651      	mov	r1, sl
 800a8a8:	00ca      	lsls	r2, r1, #3
 800a8aa:	4610      	mov	r0, r2
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	4642      	mov	r2, r8
 800a8b2:	189b      	adds	r3, r3, r2
 800a8b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a8b6:	464b      	mov	r3, r9
 800a8b8:	460a      	mov	r2, r1
 800a8ba:	eb42 0303 	adc.w	r3, r2, r3
 800a8be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a8ca:	667a      	str	r2, [r7, #100]	@ 0x64
 800a8cc:	f04f 0200 	mov.w	r2, #0
 800a8d0:	f04f 0300 	mov.w	r3, #0
 800a8d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a8d8:	4649      	mov	r1, r9
 800a8da:	008b      	lsls	r3, r1, #2
 800a8dc:	4641      	mov	r1, r8
 800a8de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8e2:	4641      	mov	r1, r8
 800a8e4:	008a      	lsls	r2, r1, #2
 800a8e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a8ea:	f7f6 f9fd 	bl	8000ce8 <__aeabi_uldivmod>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a928 <UART_SetConfig+0x4e4>)
 800a8f4:	fba3 1302 	umull	r1, r3, r3, r2
 800a8f8:	095b      	lsrs	r3, r3, #5
 800a8fa:	2164      	movs	r1, #100	@ 0x64
 800a8fc:	fb01 f303 	mul.w	r3, r1, r3
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	011b      	lsls	r3, r3, #4
 800a904:	3332      	adds	r3, #50	@ 0x32
 800a906:	4a08      	ldr	r2, [pc, #32]	@ (800a928 <UART_SetConfig+0x4e4>)
 800a908:	fba2 2303 	umull	r2, r3, r2, r3
 800a90c:	095b      	lsrs	r3, r3, #5
 800a90e:	f003 020f 	and.w	r2, r3, #15
 800a912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4422      	add	r2, r4
 800a91a:	609a      	str	r2, [r3, #8]
}
 800a91c:	bf00      	nop
 800a91e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a922:	46bd      	mov	sp, r7
 800a924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a928:	51eb851f 	.word	0x51eb851f

0800a92c <__cvt>:
 800a92c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a930:	ec57 6b10 	vmov	r6, r7, d0
 800a934:	2f00      	cmp	r7, #0
 800a936:	460c      	mov	r4, r1
 800a938:	4619      	mov	r1, r3
 800a93a:	463b      	mov	r3, r7
 800a93c:	bfbb      	ittet	lt
 800a93e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a942:	461f      	movlt	r7, r3
 800a944:	2300      	movge	r3, #0
 800a946:	232d      	movlt	r3, #45	@ 0x2d
 800a948:	700b      	strb	r3, [r1, #0]
 800a94a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a94c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a950:	4691      	mov	r9, r2
 800a952:	f023 0820 	bic.w	r8, r3, #32
 800a956:	bfbc      	itt	lt
 800a958:	4632      	movlt	r2, r6
 800a95a:	4616      	movlt	r6, r2
 800a95c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a960:	d005      	beq.n	800a96e <__cvt+0x42>
 800a962:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a966:	d100      	bne.n	800a96a <__cvt+0x3e>
 800a968:	3401      	adds	r4, #1
 800a96a:	2102      	movs	r1, #2
 800a96c:	e000      	b.n	800a970 <__cvt+0x44>
 800a96e:	2103      	movs	r1, #3
 800a970:	ab03      	add	r3, sp, #12
 800a972:	9301      	str	r3, [sp, #4]
 800a974:	ab02      	add	r3, sp, #8
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	ec47 6b10 	vmov	d0, r6, r7
 800a97c:	4653      	mov	r3, sl
 800a97e:	4622      	mov	r2, r4
 800a980:	f001 ff96 	bl	800c8b0 <_dtoa_r>
 800a984:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a988:	4605      	mov	r5, r0
 800a98a:	d119      	bne.n	800a9c0 <__cvt+0x94>
 800a98c:	f019 0f01 	tst.w	r9, #1
 800a990:	d00e      	beq.n	800a9b0 <__cvt+0x84>
 800a992:	eb00 0904 	add.w	r9, r0, r4
 800a996:	2200      	movs	r2, #0
 800a998:	2300      	movs	r3, #0
 800a99a:	4630      	mov	r0, r6
 800a99c:	4639      	mov	r1, r7
 800a99e:	f7f6 f8c3 	bl	8000b28 <__aeabi_dcmpeq>
 800a9a2:	b108      	cbz	r0, 800a9a8 <__cvt+0x7c>
 800a9a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a9a8:	2230      	movs	r2, #48	@ 0x30
 800a9aa:	9b03      	ldr	r3, [sp, #12]
 800a9ac:	454b      	cmp	r3, r9
 800a9ae:	d31e      	bcc.n	800a9ee <__cvt+0xc2>
 800a9b0:	9b03      	ldr	r3, [sp, #12]
 800a9b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9b4:	1b5b      	subs	r3, r3, r5
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	6013      	str	r3, [r2, #0]
 800a9ba:	b004      	add	sp, #16
 800a9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a9c4:	eb00 0904 	add.w	r9, r0, r4
 800a9c8:	d1e5      	bne.n	800a996 <__cvt+0x6a>
 800a9ca:	7803      	ldrb	r3, [r0, #0]
 800a9cc:	2b30      	cmp	r3, #48	@ 0x30
 800a9ce:	d10a      	bne.n	800a9e6 <__cvt+0xba>
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	4639      	mov	r1, r7
 800a9d8:	f7f6 f8a6 	bl	8000b28 <__aeabi_dcmpeq>
 800a9dc:	b918      	cbnz	r0, 800a9e6 <__cvt+0xba>
 800a9de:	f1c4 0401 	rsb	r4, r4, #1
 800a9e2:	f8ca 4000 	str.w	r4, [sl]
 800a9e6:	f8da 3000 	ldr.w	r3, [sl]
 800a9ea:	4499      	add	r9, r3
 800a9ec:	e7d3      	b.n	800a996 <__cvt+0x6a>
 800a9ee:	1c59      	adds	r1, r3, #1
 800a9f0:	9103      	str	r1, [sp, #12]
 800a9f2:	701a      	strb	r2, [r3, #0]
 800a9f4:	e7d9      	b.n	800a9aa <__cvt+0x7e>

0800a9f6 <__exponent>:
 800a9f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9f8:	2900      	cmp	r1, #0
 800a9fa:	bfba      	itte	lt
 800a9fc:	4249      	neglt	r1, r1
 800a9fe:	232d      	movlt	r3, #45	@ 0x2d
 800aa00:	232b      	movge	r3, #43	@ 0x2b
 800aa02:	2909      	cmp	r1, #9
 800aa04:	7002      	strb	r2, [r0, #0]
 800aa06:	7043      	strb	r3, [r0, #1]
 800aa08:	dd29      	ble.n	800aa5e <__exponent+0x68>
 800aa0a:	f10d 0307 	add.w	r3, sp, #7
 800aa0e:	461d      	mov	r5, r3
 800aa10:	270a      	movs	r7, #10
 800aa12:	461a      	mov	r2, r3
 800aa14:	fbb1 f6f7 	udiv	r6, r1, r7
 800aa18:	fb07 1416 	mls	r4, r7, r6, r1
 800aa1c:	3430      	adds	r4, #48	@ 0x30
 800aa1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aa22:	460c      	mov	r4, r1
 800aa24:	2c63      	cmp	r4, #99	@ 0x63
 800aa26:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	dcf1      	bgt.n	800aa12 <__exponent+0x1c>
 800aa2e:	3130      	adds	r1, #48	@ 0x30
 800aa30:	1e94      	subs	r4, r2, #2
 800aa32:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aa36:	1c41      	adds	r1, r0, #1
 800aa38:	4623      	mov	r3, r4
 800aa3a:	42ab      	cmp	r3, r5
 800aa3c:	d30a      	bcc.n	800aa54 <__exponent+0x5e>
 800aa3e:	f10d 0309 	add.w	r3, sp, #9
 800aa42:	1a9b      	subs	r3, r3, r2
 800aa44:	42ac      	cmp	r4, r5
 800aa46:	bf88      	it	hi
 800aa48:	2300      	movhi	r3, #0
 800aa4a:	3302      	adds	r3, #2
 800aa4c:	4403      	add	r3, r0
 800aa4e:	1a18      	subs	r0, r3, r0
 800aa50:	b003      	add	sp, #12
 800aa52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa54:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aa58:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aa5c:	e7ed      	b.n	800aa3a <__exponent+0x44>
 800aa5e:	2330      	movs	r3, #48	@ 0x30
 800aa60:	3130      	adds	r1, #48	@ 0x30
 800aa62:	7083      	strb	r3, [r0, #2]
 800aa64:	70c1      	strb	r1, [r0, #3]
 800aa66:	1d03      	adds	r3, r0, #4
 800aa68:	e7f1      	b.n	800aa4e <__exponent+0x58>
	...

0800aa6c <_printf_float>:
 800aa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa70:	b08d      	sub	sp, #52	@ 0x34
 800aa72:	460c      	mov	r4, r1
 800aa74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aa78:	4616      	mov	r6, r2
 800aa7a:	461f      	mov	r7, r3
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	f001 fe5d 	bl	800c73c <_localeconv_r>
 800aa82:	6803      	ldr	r3, [r0, #0]
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7f5 fc22 	bl	80002d0 <strlen>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa90:	f8d8 3000 	ldr.w	r3, [r8]
 800aa94:	9005      	str	r0, [sp, #20]
 800aa96:	3307      	adds	r3, #7
 800aa98:	f023 0307 	bic.w	r3, r3, #7
 800aa9c:	f103 0208 	add.w	r2, r3, #8
 800aaa0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aaa4:	f8d4 b000 	ldr.w	fp, [r4]
 800aaa8:	f8c8 2000 	str.w	r2, [r8]
 800aaac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aab0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aab4:	9307      	str	r3, [sp, #28]
 800aab6:	f8cd 8018 	str.w	r8, [sp, #24]
 800aaba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aabe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aac2:	4b9c      	ldr	r3, [pc, #624]	@ (800ad34 <_printf_float+0x2c8>)
 800aac4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aac8:	f7f6 f860 	bl	8000b8c <__aeabi_dcmpun>
 800aacc:	bb70      	cbnz	r0, 800ab2c <_printf_float+0xc0>
 800aace:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aad2:	4b98      	ldr	r3, [pc, #608]	@ (800ad34 <_printf_float+0x2c8>)
 800aad4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aad8:	f7f6 f83a 	bl	8000b50 <__aeabi_dcmple>
 800aadc:	bb30      	cbnz	r0, 800ab2c <_printf_float+0xc0>
 800aade:	2200      	movs	r2, #0
 800aae0:	2300      	movs	r3, #0
 800aae2:	4640      	mov	r0, r8
 800aae4:	4649      	mov	r1, r9
 800aae6:	f7f6 f829 	bl	8000b3c <__aeabi_dcmplt>
 800aaea:	b110      	cbz	r0, 800aaf2 <_printf_float+0x86>
 800aaec:	232d      	movs	r3, #45	@ 0x2d
 800aaee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aaf2:	4a91      	ldr	r2, [pc, #580]	@ (800ad38 <_printf_float+0x2cc>)
 800aaf4:	4b91      	ldr	r3, [pc, #580]	@ (800ad3c <_printf_float+0x2d0>)
 800aaf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aafa:	bf8c      	ite	hi
 800aafc:	4690      	movhi	r8, r2
 800aafe:	4698      	movls	r8, r3
 800ab00:	2303      	movs	r3, #3
 800ab02:	6123      	str	r3, [r4, #16]
 800ab04:	f02b 0304 	bic.w	r3, fp, #4
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	f04f 0900 	mov.w	r9, #0
 800ab0e:	9700      	str	r7, [sp, #0]
 800ab10:	4633      	mov	r3, r6
 800ab12:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ab14:	4621      	mov	r1, r4
 800ab16:	4628      	mov	r0, r5
 800ab18:	f000 f9d2 	bl	800aec0 <_printf_common>
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	f040 808d 	bne.w	800ac3c <_printf_float+0x1d0>
 800ab22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab26:	b00d      	add	sp, #52	@ 0x34
 800ab28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab2c:	4642      	mov	r2, r8
 800ab2e:	464b      	mov	r3, r9
 800ab30:	4640      	mov	r0, r8
 800ab32:	4649      	mov	r1, r9
 800ab34:	f7f6 f82a 	bl	8000b8c <__aeabi_dcmpun>
 800ab38:	b140      	cbz	r0, 800ab4c <_printf_float+0xe0>
 800ab3a:	464b      	mov	r3, r9
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	bfbc      	itt	lt
 800ab40:	232d      	movlt	r3, #45	@ 0x2d
 800ab42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ab46:	4a7e      	ldr	r2, [pc, #504]	@ (800ad40 <_printf_float+0x2d4>)
 800ab48:	4b7e      	ldr	r3, [pc, #504]	@ (800ad44 <_printf_float+0x2d8>)
 800ab4a:	e7d4      	b.n	800aaf6 <_printf_float+0x8a>
 800ab4c:	6863      	ldr	r3, [r4, #4]
 800ab4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ab52:	9206      	str	r2, [sp, #24]
 800ab54:	1c5a      	adds	r2, r3, #1
 800ab56:	d13b      	bne.n	800abd0 <_printf_float+0x164>
 800ab58:	2306      	movs	r3, #6
 800ab5a:	6063      	str	r3, [r4, #4]
 800ab5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ab60:	2300      	movs	r3, #0
 800ab62:	6022      	str	r2, [r4, #0]
 800ab64:	9303      	str	r3, [sp, #12]
 800ab66:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab68:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ab6c:	ab09      	add	r3, sp, #36	@ 0x24
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	6861      	ldr	r1, [r4, #4]
 800ab72:	ec49 8b10 	vmov	d0, r8, r9
 800ab76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	f7ff fed6 	bl	800a92c <__cvt>
 800ab80:	9b06      	ldr	r3, [sp, #24]
 800ab82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab84:	2b47      	cmp	r3, #71	@ 0x47
 800ab86:	4680      	mov	r8, r0
 800ab88:	d129      	bne.n	800abde <_printf_float+0x172>
 800ab8a:	1cc8      	adds	r0, r1, #3
 800ab8c:	db02      	blt.n	800ab94 <_printf_float+0x128>
 800ab8e:	6863      	ldr	r3, [r4, #4]
 800ab90:	4299      	cmp	r1, r3
 800ab92:	dd41      	ble.n	800ac18 <_printf_float+0x1ac>
 800ab94:	f1aa 0a02 	sub.w	sl, sl, #2
 800ab98:	fa5f fa8a 	uxtb.w	sl, sl
 800ab9c:	3901      	subs	r1, #1
 800ab9e:	4652      	mov	r2, sl
 800aba0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aba4:	9109      	str	r1, [sp, #36]	@ 0x24
 800aba6:	f7ff ff26 	bl	800a9f6 <__exponent>
 800abaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800abac:	1813      	adds	r3, r2, r0
 800abae:	2a01      	cmp	r2, #1
 800abb0:	4681      	mov	r9, r0
 800abb2:	6123      	str	r3, [r4, #16]
 800abb4:	dc02      	bgt.n	800abbc <_printf_float+0x150>
 800abb6:	6822      	ldr	r2, [r4, #0]
 800abb8:	07d2      	lsls	r2, r2, #31
 800abba:	d501      	bpl.n	800abc0 <_printf_float+0x154>
 800abbc:	3301      	adds	r3, #1
 800abbe:	6123      	str	r3, [r4, #16]
 800abc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d0a2      	beq.n	800ab0e <_printf_float+0xa2>
 800abc8:	232d      	movs	r3, #45	@ 0x2d
 800abca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abce:	e79e      	b.n	800ab0e <_printf_float+0xa2>
 800abd0:	9a06      	ldr	r2, [sp, #24]
 800abd2:	2a47      	cmp	r2, #71	@ 0x47
 800abd4:	d1c2      	bne.n	800ab5c <_printf_float+0xf0>
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1c0      	bne.n	800ab5c <_printf_float+0xf0>
 800abda:	2301      	movs	r3, #1
 800abdc:	e7bd      	b.n	800ab5a <_printf_float+0xee>
 800abde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800abe2:	d9db      	bls.n	800ab9c <_printf_float+0x130>
 800abe4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800abe8:	d118      	bne.n	800ac1c <_printf_float+0x1b0>
 800abea:	2900      	cmp	r1, #0
 800abec:	6863      	ldr	r3, [r4, #4]
 800abee:	dd0b      	ble.n	800ac08 <_printf_float+0x19c>
 800abf0:	6121      	str	r1, [r4, #16]
 800abf2:	b913      	cbnz	r3, 800abfa <_printf_float+0x18e>
 800abf4:	6822      	ldr	r2, [r4, #0]
 800abf6:	07d0      	lsls	r0, r2, #31
 800abf8:	d502      	bpl.n	800ac00 <_printf_float+0x194>
 800abfa:	3301      	adds	r3, #1
 800abfc:	440b      	add	r3, r1
 800abfe:	6123      	str	r3, [r4, #16]
 800ac00:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ac02:	f04f 0900 	mov.w	r9, #0
 800ac06:	e7db      	b.n	800abc0 <_printf_float+0x154>
 800ac08:	b913      	cbnz	r3, 800ac10 <_printf_float+0x1a4>
 800ac0a:	6822      	ldr	r2, [r4, #0]
 800ac0c:	07d2      	lsls	r2, r2, #31
 800ac0e:	d501      	bpl.n	800ac14 <_printf_float+0x1a8>
 800ac10:	3302      	adds	r3, #2
 800ac12:	e7f4      	b.n	800abfe <_printf_float+0x192>
 800ac14:	2301      	movs	r3, #1
 800ac16:	e7f2      	b.n	800abfe <_printf_float+0x192>
 800ac18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ac1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac1e:	4299      	cmp	r1, r3
 800ac20:	db05      	blt.n	800ac2e <_printf_float+0x1c2>
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	6121      	str	r1, [r4, #16]
 800ac26:	07d8      	lsls	r0, r3, #31
 800ac28:	d5ea      	bpl.n	800ac00 <_printf_float+0x194>
 800ac2a:	1c4b      	adds	r3, r1, #1
 800ac2c:	e7e7      	b.n	800abfe <_printf_float+0x192>
 800ac2e:	2900      	cmp	r1, #0
 800ac30:	bfd4      	ite	le
 800ac32:	f1c1 0202 	rsble	r2, r1, #2
 800ac36:	2201      	movgt	r2, #1
 800ac38:	4413      	add	r3, r2
 800ac3a:	e7e0      	b.n	800abfe <_printf_float+0x192>
 800ac3c:	6823      	ldr	r3, [r4, #0]
 800ac3e:	055a      	lsls	r2, r3, #21
 800ac40:	d407      	bmi.n	800ac52 <_printf_float+0x1e6>
 800ac42:	6923      	ldr	r3, [r4, #16]
 800ac44:	4642      	mov	r2, r8
 800ac46:	4631      	mov	r1, r6
 800ac48:	4628      	mov	r0, r5
 800ac4a:	47b8      	blx	r7
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	d12b      	bne.n	800aca8 <_printf_float+0x23c>
 800ac50:	e767      	b.n	800ab22 <_printf_float+0xb6>
 800ac52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac56:	f240 80dd 	bls.w	800ae14 <_printf_float+0x3a8>
 800ac5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2300      	movs	r3, #0
 800ac62:	f7f5 ff61 	bl	8000b28 <__aeabi_dcmpeq>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d033      	beq.n	800acd2 <_printf_float+0x266>
 800ac6a:	4a37      	ldr	r2, [pc, #220]	@ (800ad48 <_printf_float+0x2dc>)
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	4631      	mov	r1, r6
 800ac70:	4628      	mov	r0, r5
 800ac72:	47b8      	blx	r7
 800ac74:	3001      	adds	r0, #1
 800ac76:	f43f af54 	beq.w	800ab22 <_printf_float+0xb6>
 800ac7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ac7e:	4543      	cmp	r3, r8
 800ac80:	db02      	blt.n	800ac88 <_printf_float+0x21c>
 800ac82:	6823      	ldr	r3, [r4, #0]
 800ac84:	07d8      	lsls	r0, r3, #31
 800ac86:	d50f      	bpl.n	800aca8 <_printf_float+0x23c>
 800ac88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	4628      	mov	r0, r5
 800ac90:	47b8      	blx	r7
 800ac92:	3001      	adds	r0, #1
 800ac94:	f43f af45 	beq.w	800ab22 <_printf_float+0xb6>
 800ac98:	f04f 0900 	mov.w	r9, #0
 800ac9c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800aca0:	f104 0a1a 	add.w	sl, r4, #26
 800aca4:	45c8      	cmp	r8, r9
 800aca6:	dc09      	bgt.n	800acbc <_printf_float+0x250>
 800aca8:	6823      	ldr	r3, [r4, #0]
 800acaa:	079b      	lsls	r3, r3, #30
 800acac:	f100 8103 	bmi.w	800aeb6 <_printf_float+0x44a>
 800acb0:	68e0      	ldr	r0, [r4, #12]
 800acb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acb4:	4298      	cmp	r0, r3
 800acb6:	bfb8      	it	lt
 800acb8:	4618      	movlt	r0, r3
 800acba:	e734      	b.n	800ab26 <_printf_float+0xba>
 800acbc:	2301      	movs	r3, #1
 800acbe:	4652      	mov	r2, sl
 800acc0:	4631      	mov	r1, r6
 800acc2:	4628      	mov	r0, r5
 800acc4:	47b8      	blx	r7
 800acc6:	3001      	adds	r0, #1
 800acc8:	f43f af2b 	beq.w	800ab22 <_printf_float+0xb6>
 800accc:	f109 0901 	add.w	r9, r9, #1
 800acd0:	e7e8      	b.n	800aca4 <_printf_float+0x238>
 800acd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	dc39      	bgt.n	800ad4c <_printf_float+0x2e0>
 800acd8:	4a1b      	ldr	r2, [pc, #108]	@ (800ad48 <_printf_float+0x2dc>)
 800acda:	2301      	movs	r3, #1
 800acdc:	4631      	mov	r1, r6
 800acde:	4628      	mov	r0, r5
 800ace0:	47b8      	blx	r7
 800ace2:	3001      	adds	r0, #1
 800ace4:	f43f af1d 	beq.w	800ab22 <_printf_float+0xb6>
 800ace8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800acec:	ea59 0303 	orrs.w	r3, r9, r3
 800acf0:	d102      	bne.n	800acf8 <_printf_float+0x28c>
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	07d9      	lsls	r1, r3, #31
 800acf6:	d5d7      	bpl.n	800aca8 <_printf_float+0x23c>
 800acf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acfc:	4631      	mov	r1, r6
 800acfe:	4628      	mov	r0, r5
 800ad00:	47b8      	blx	r7
 800ad02:	3001      	adds	r0, #1
 800ad04:	f43f af0d 	beq.w	800ab22 <_printf_float+0xb6>
 800ad08:	f04f 0a00 	mov.w	sl, #0
 800ad0c:	f104 0b1a 	add.w	fp, r4, #26
 800ad10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad12:	425b      	negs	r3, r3
 800ad14:	4553      	cmp	r3, sl
 800ad16:	dc01      	bgt.n	800ad1c <_printf_float+0x2b0>
 800ad18:	464b      	mov	r3, r9
 800ad1a:	e793      	b.n	800ac44 <_printf_float+0x1d8>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	465a      	mov	r2, fp
 800ad20:	4631      	mov	r1, r6
 800ad22:	4628      	mov	r0, r5
 800ad24:	47b8      	blx	r7
 800ad26:	3001      	adds	r0, #1
 800ad28:	f43f aefb 	beq.w	800ab22 <_printf_float+0xb6>
 800ad2c:	f10a 0a01 	add.w	sl, sl, #1
 800ad30:	e7ee      	b.n	800ad10 <_printf_float+0x2a4>
 800ad32:	bf00      	nop
 800ad34:	7fefffff 	.word	0x7fefffff
 800ad38:	0800fd1c 	.word	0x0800fd1c
 800ad3c:	0800fd18 	.word	0x0800fd18
 800ad40:	0800fd24 	.word	0x0800fd24
 800ad44:	0800fd20 	.word	0x0800fd20
 800ad48:	0800fe6d 	.word	0x0800fe6d
 800ad4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad52:	4553      	cmp	r3, sl
 800ad54:	bfa8      	it	ge
 800ad56:	4653      	movge	r3, sl
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	4699      	mov	r9, r3
 800ad5c:	dc36      	bgt.n	800adcc <_printf_float+0x360>
 800ad5e:	f04f 0b00 	mov.w	fp, #0
 800ad62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad66:	f104 021a 	add.w	r2, r4, #26
 800ad6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad6c:	9306      	str	r3, [sp, #24]
 800ad6e:	eba3 0309 	sub.w	r3, r3, r9
 800ad72:	455b      	cmp	r3, fp
 800ad74:	dc31      	bgt.n	800adda <_printf_float+0x36e>
 800ad76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad78:	459a      	cmp	sl, r3
 800ad7a:	dc3a      	bgt.n	800adf2 <_printf_float+0x386>
 800ad7c:	6823      	ldr	r3, [r4, #0]
 800ad7e:	07da      	lsls	r2, r3, #31
 800ad80:	d437      	bmi.n	800adf2 <_printf_float+0x386>
 800ad82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad84:	ebaa 0903 	sub.w	r9, sl, r3
 800ad88:	9b06      	ldr	r3, [sp, #24]
 800ad8a:	ebaa 0303 	sub.w	r3, sl, r3
 800ad8e:	4599      	cmp	r9, r3
 800ad90:	bfa8      	it	ge
 800ad92:	4699      	movge	r9, r3
 800ad94:	f1b9 0f00 	cmp.w	r9, #0
 800ad98:	dc33      	bgt.n	800ae02 <_printf_float+0x396>
 800ad9a:	f04f 0800 	mov.w	r8, #0
 800ad9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ada2:	f104 0b1a 	add.w	fp, r4, #26
 800ada6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ada8:	ebaa 0303 	sub.w	r3, sl, r3
 800adac:	eba3 0309 	sub.w	r3, r3, r9
 800adb0:	4543      	cmp	r3, r8
 800adb2:	f77f af79 	ble.w	800aca8 <_printf_float+0x23c>
 800adb6:	2301      	movs	r3, #1
 800adb8:	465a      	mov	r2, fp
 800adba:	4631      	mov	r1, r6
 800adbc:	4628      	mov	r0, r5
 800adbe:	47b8      	blx	r7
 800adc0:	3001      	adds	r0, #1
 800adc2:	f43f aeae 	beq.w	800ab22 <_printf_float+0xb6>
 800adc6:	f108 0801 	add.w	r8, r8, #1
 800adca:	e7ec      	b.n	800ada6 <_printf_float+0x33a>
 800adcc:	4642      	mov	r2, r8
 800adce:	4631      	mov	r1, r6
 800add0:	4628      	mov	r0, r5
 800add2:	47b8      	blx	r7
 800add4:	3001      	adds	r0, #1
 800add6:	d1c2      	bne.n	800ad5e <_printf_float+0x2f2>
 800add8:	e6a3      	b.n	800ab22 <_printf_float+0xb6>
 800adda:	2301      	movs	r3, #1
 800addc:	4631      	mov	r1, r6
 800adde:	4628      	mov	r0, r5
 800ade0:	9206      	str	r2, [sp, #24]
 800ade2:	47b8      	blx	r7
 800ade4:	3001      	adds	r0, #1
 800ade6:	f43f ae9c 	beq.w	800ab22 <_printf_float+0xb6>
 800adea:	9a06      	ldr	r2, [sp, #24]
 800adec:	f10b 0b01 	add.w	fp, fp, #1
 800adf0:	e7bb      	b.n	800ad6a <_printf_float+0x2fe>
 800adf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adf6:	4631      	mov	r1, r6
 800adf8:	4628      	mov	r0, r5
 800adfa:	47b8      	blx	r7
 800adfc:	3001      	adds	r0, #1
 800adfe:	d1c0      	bne.n	800ad82 <_printf_float+0x316>
 800ae00:	e68f      	b.n	800ab22 <_printf_float+0xb6>
 800ae02:	9a06      	ldr	r2, [sp, #24]
 800ae04:	464b      	mov	r3, r9
 800ae06:	4442      	add	r2, r8
 800ae08:	4631      	mov	r1, r6
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	47b8      	blx	r7
 800ae0e:	3001      	adds	r0, #1
 800ae10:	d1c3      	bne.n	800ad9a <_printf_float+0x32e>
 800ae12:	e686      	b.n	800ab22 <_printf_float+0xb6>
 800ae14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae18:	f1ba 0f01 	cmp.w	sl, #1
 800ae1c:	dc01      	bgt.n	800ae22 <_printf_float+0x3b6>
 800ae1e:	07db      	lsls	r3, r3, #31
 800ae20:	d536      	bpl.n	800ae90 <_printf_float+0x424>
 800ae22:	2301      	movs	r3, #1
 800ae24:	4642      	mov	r2, r8
 800ae26:	4631      	mov	r1, r6
 800ae28:	4628      	mov	r0, r5
 800ae2a:	47b8      	blx	r7
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	f43f ae78 	beq.w	800ab22 <_printf_float+0xb6>
 800ae32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae36:	4631      	mov	r1, r6
 800ae38:	4628      	mov	r0, r5
 800ae3a:	47b8      	blx	r7
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	f43f ae70 	beq.w	800ab22 <_printf_float+0xb6>
 800ae42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae46:	2200      	movs	r2, #0
 800ae48:	2300      	movs	r3, #0
 800ae4a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ae4e:	f7f5 fe6b 	bl	8000b28 <__aeabi_dcmpeq>
 800ae52:	b9c0      	cbnz	r0, 800ae86 <_printf_float+0x41a>
 800ae54:	4653      	mov	r3, sl
 800ae56:	f108 0201 	add.w	r2, r8, #1
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	47b8      	blx	r7
 800ae60:	3001      	adds	r0, #1
 800ae62:	d10c      	bne.n	800ae7e <_printf_float+0x412>
 800ae64:	e65d      	b.n	800ab22 <_printf_float+0xb6>
 800ae66:	2301      	movs	r3, #1
 800ae68:	465a      	mov	r2, fp
 800ae6a:	4631      	mov	r1, r6
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	47b8      	blx	r7
 800ae70:	3001      	adds	r0, #1
 800ae72:	f43f ae56 	beq.w	800ab22 <_printf_float+0xb6>
 800ae76:	f108 0801 	add.w	r8, r8, #1
 800ae7a:	45d0      	cmp	r8, sl
 800ae7c:	dbf3      	blt.n	800ae66 <_printf_float+0x3fa>
 800ae7e:	464b      	mov	r3, r9
 800ae80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ae84:	e6df      	b.n	800ac46 <_printf_float+0x1da>
 800ae86:	f04f 0800 	mov.w	r8, #0
 800ae8a:	f104 0b1a 	add.w	fp, r4, #26
 800ae8e:	e7f4      	b.n	800ae7a <_printf_float+0x40e>
 800ae90:	2301      	movs	r3, #1
 800ae92:	4642      	mov	r2, r8
 800ae94:	e7e1      	b.n	800ae5a <_printf_float+0x3ee>
 800ae96:	2301      	movs	r3, #1
 800ae98:	464a      	mov	r2, r9
 800ae9a:	4631      	mov	r1, r6
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	47b8      	blx	r7
 800aea0:	3001      	adds	r0, #1
 800aea2:	f43f ae3e 	beq.w	800ab22 <_printf_float+0xb6>
 800aea6:	f108 0801 	add.w	r8, r8, #1
 800aeaa:	68e3      	ldr	r3, [r4, #12]
 800aeac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aeae:	1a5b      	subs	r3, r3, r1
 800aeb0:	4543      	cmp	r3, r8
 800aeb2:	dcf0      	bgt.n	800ae96 <_printf_float+0x42a>
 800aeb4:	e6fc      	b.n	800acb0 <_printf_float+0x244>
 800aeb6:	f04f 0800 	mov.w	r8, #0
 800aeba:	f104 0919 	add.w	r9, r4, #25
 800aebe:	e7f4      	b.n	800aeaa <_printf_float+0x43e>

0800aec0 <_printf_common>:
 800aec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec4:	4616      	mov	r6, r2
 800aec6:	4698      	mov	r8, r3
 800aec8:	688a      	ldr	r2, [r1, #8]
 800aeca:	690b      	ldr	r3, [r1, #16]
 800aecc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aed0:	4293      	cmp	r3, r2
 800aed2:	bfb8      	it	lt
 800aed4:	4613      	movlt	r3, r2
 800aed6:	6033      	str	r3, [r6, #0]
 800aed8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aedc:	4607      	mov	r7, r0
 800aede:	460c      	mov	r4, r1
 800aee0:	b10a      	cbz	r2, 800aee6 <_printf_common+0x26>
 800aee2:	3301      	adds	r3, #1
 800aee4:	6033      	str	r3, [r6, #0]
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	0699      	lsls	r1, r3, #26
 800aeea:	bf42      	ittt	mi
 800aeec:	6833      	ldrmi	r3, [r6, #0]
 800aeee:	3302      	addmi	r3, #2
 800aef0:	6033      	strmi	r3, [r6, #0]
 800aef2:	6825      	ldr	r5, [r4, #0]
 800aef4:	f015 0506 	ands.w	r5, r5, #6
 800aef8:	d106      	bne.n	800af08 <_printf_common+0x48>
 800aefa:	f104 0a19 	add.w	sl, r4, #25
 800aefe:	68e3      	ldr	r3, [r4, #12]
 800af00:	6832      	ldr	r2, [r6, #0]
 800af02:	1a9b      	subs	r3, r3, r2
 800af04:	42ab      	cmp	r3, r5
 800af06:	dc26      	bgt.n	800af56 <_printf_common+0x96>
 800af08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af0c:	6822      	ldr	r2, [r4, #0]
 800af0e:	3b00      	subs	r3, #0
 800af10:	bf18      	it	ne
 800af12:	2301      	movne	r3, #1
 800af14:	0692      	lsls	r2, r2, #26
 800af16:	d42b      	bmi.n	800af70 <_printf_common+0xb0>
 800af18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af1c:	4641      	mov	r1, r8
 800af1e:	4638      	mov	r0, r7
 800af20:	47c8      	blx	r9
 800af22:	3001      	adds	r0, #1
 800af24:	d01e      	beq.n	800af64 <_printf_common+0xa4>
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	6922      	ldr	r2, [r4, #16]
 800af2a:	f003 0306 	and.w	r3, r3, #6
 800af2e:	2b04      	cmp	r3, #4
 800af30:	bf02      	ittt	eq
 800af32:	68e5      	ldreq	r5, [r4, #12]
 800af34:	6833      	ldreq	r3, [r6, #0]
 800af36:	1aed      	subeq	r5, r5, r3
 800af38:	68a3      	ldr	r3, [r4, #8]
 800af3a:	bf0c      	ite	eq
 800af3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af40:	2500      	movne	r5, #0
 800af42:	4293      	cmp	r3, r2
 800af44:	bfc4      	itt	gt
 800af46:	1a9b      	subgt	r3, r3, r2
 800af48:	18ed      	addgt	r5, r5, r3
 800af4a:	2600      	movs	r6, #0
 800af4c:	341a      	adds	r4, #26
 800af4e:	42b5      	cmp	r5, r6
 800af50:	d11a      	bne.n	800af88 <_printf_common+0xc8>
 800af52:	2000      	movs	r0, #0
 800af54:	e008      	b.n	800af68 <_printf_common+0xa8>
 800af56:	2301      	movs	r3, #1
 800af58:	4652      	mov	r2, sl
 800af5a:	4641      	mov	r1, r8
 800af5c:	4638      	mov	r0, r7
 800af5e:	47c8      	blx	r9
 800af60:	3001      	adds	r0, #1
 800af62:	d103      	bne.n	800af6c <_printf_common+0xac>
 800af64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6c:	3501      	adds	r5, #1
 800af6e:	e7c6      	b.n	800aefe <_printf_common+0x3e>
 800af70:	18e1      	adds	r1, r4, r3
 800af72:	1c5a      	adds	r2, r3, #1
 800af74:	2030      	movs	r0, #48	@ 0x30
 800af76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af7a:	4422      	add	r2, r4
 800af7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af84:	3302      	adds	r3, #2
 800af86:	e7c7      	b.n	800af18 <_printf_common+0x58>
 800af88:	2301      	movs	r3, #1
 800af8a:	4622      	mov	r2, r4
 800af8c:	4641      	mov	r1, r8
 800af8e:	4638      	mov	r0, r7
 800af90:	47c8      	blx	r9
 800af92:	3001      	adds	r0, #1
 800af94:	d0e6      	beq.n	800af64 <_printf_common+0xa4>
 800af96:	3601      	adds	r6, #1
 800af98:	e7d9      	b.n	800af4e <_printf_common+0x8e>
	...

0800af9c <_printf_i>:
 800af9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afa0:	7e0f      	ldrb	r7, [r1, #24]
 800afa2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800afa4:	2f78      	cmp	r7, #120	@ 0x78
 800afa6:	4691      	mov	r9, r2
 800afa8:	4680      	mov	r8, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	469a      	mov	sl, r3
 800afae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800afb2:	d807      	bhi.n	800afc4 <_printf_i+0x28>
 800afb4:	2f62      	cmp	r7, #98	@ 0x62
 800afb6:	d80a      	bhi.n	800afce <_printf_i+0x32>
 800afb8:	2f00      	cmp	r7, #0
 800afba:	f000 80d1 	beq.w	800b160 <_printf_i+0x1c4>
 800afbe:	2f58      	cmp	r7, #88	@ 0x58
 800afc0:	f000 80b8 	beq.w	800b134 <_printf_i+0x198>
 800afc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800afcc:	e03a      	b.n	800b044 <_printf_i+0xa8>
 800afce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800afd2:	2b15      	cmp	r3, #21
 800afd4:	d8f6      	bhi.n	800afc4 <_printf_i+0x28>
 800afd6:	a101      	add	r1, pc, #4	@ (adr r1, 800afdc <_printf_i+0x40>)
 800afd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afdc:	0800b035 	.word	0x0800b035
 800afe0:	0800b049 	.word	0x0800b049
 800afe4:	0800afc5 	.word	0x0800afc5
 800afe8:	0800afc5 	.word	0x0800afc5
 800afec:	0800afc5 	.word	0x0800afc5
 800aff0:	0800afc5 	.word	0x0800afc5
 800aff4:	0800b049 	.word	0x0800b049
 800aff8:	0800afc5 	.word	0x0800afc5
 800affc:	0800afc5 	.word	0x0800afc5
 800b000:	0800afc5 	.word	0x0800afc5
 800b004:	0800afc5 	.word	0x0800afc5
 800b008:	0800b147 	.word	0x0800b147
 800b00c:	0800b073 	.word	0x0800b073
 800b010:	0800b101 	.word	0x0800b101
 800b014:	0800afc5 	.word	0x0800afc5
 800b018:	0800afc5 	.word	0x0800afc5
 800b01c:	0800b169 	.word	0x0800b169
 800b020:	0800afc5 	.word	0x0800afc5
 800b024:	0800b073 	.word	0x0800b073
 800b028:	0800afc5 	.word	0x0800afc5
 800b02c:	0800afc5 	.word	0x0800afc5
 800b030:	0800b109 	.word	0x0800b109
 800b034:	6833      	ldr	r3, [r6, #0]
 800b036:	1d1a      	adds	r2, r3, #4
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	6032      	str	r2, [r6, #0]
 800b03c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b040:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b044:	2301      	movs	r3, #1
 800b046:	e09c      	b.n	800b182 <_printf_i+0x1e6>
 800b048:	6833      	ldr	r3, [r6, #0]
 800b04a:	6820      	ldr	r0, [r4, #0]
 800b04c:	1d19      	adds	r1, r3, #4
 800b04e:	6031      	str	r1, [r6, #0]
 800b050:	0606      	lsls	r6, r0, #24
 800b052:	d501      	bpl.n	800b058 <_printf_i+0xbc>
 800b054:	681d      	ldr	r5, [r3, #0]
 800b056:	e003      	b.n	800b060 <_printf_i+0xc4>
 800b058:	0645      	lsls	r5, r0, #25
 800b05a:	d5fb      	bpl.n	800b054 <_printf_i+0xb8>
 800b05c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b060:	2d00      	cmp	r5, #0
 800b062:	da03      	bge.n	800b06c <_printf_i+0xd0>
 800b064:	232d      	movs	r3, #45	@ 0x2d
 800b066:	426d      	negs	r5, r5
 800b068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b06c:	4858      	ldr	r0, [pc, #352]	@ (800b1d0 <_printf_i+0x234>)
 800b06e:	230a      	movs	r3, #10
 800b070:	e011      	b.n	800b096 <_printf_i+0xfa>
 800b072:	6821      	ldr	r1, [r4, #0]
 800b074:	6833      	ldr	r3, [r6, #0]
 800b076:	0608      	lsls	r0, r1, #24
 800b078:	f853 5b04 	ldr.w	r5, [r3], #4
 800b07c:	d402      	bmi.n	800b084 <_printf_i+0xe8>
 800b07e:	0649      	lsls	r1, r1, #25
 800b080:	bf48      	it	mi
 800b082:	b2ad      	uxthmi	r5, r5
 800b084:	2f6f      	cmp	r7, #111	@ 0x6f
 800b086:	4852      	ldr	r0, [pc, #328]	@ (800b1d0 <_printf_i+0x234>)
 800b088:	6033      	str	r3, [r6, #0]
 800b08a:	bf14      	ite	ne
 800b08c:	230a      	movne	r3, #10
 800b08e:	2308      	moveq	r3, #8
 800b090:	2100      	movs	r1, #0
 800b092:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b096:	6866      	ldr	r6, [r4, #4]
 800b098:	60a6      	str	r6, [r4, #8]
 800b09a:	2e00      	cmp	r6, #0
 800b09c:	db05      	blt.n	800b0aa <_printf_i+0x10e>
 800b09e:	6821      	ldr	r1, [r4, #0]
 800b0a0:	432e      	orrs	r6, r5
 800b0a2:	f021 0104 	bic.w	r1, r1, #4
 800b0a6:	6021      	str	r1, [r4, #0]
 800b0a8:	d04b      	beq.n	800b142 <_printf_i+0x1a6>
 800b0aa:	4616      	mov	r6, r2
 800b0ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800b0b0:	fb03 5711 	mls	r7, r3, r1, r5
 800b0b4:	5dc7      	ldrb	r7, [r0, r7]
 800b0b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0ba:	462f      	mov	r7, r5
 800b0bc:	42bb      	cmp	r3, r7
 800b0be:	460d      	mov	r5, r1
 800b0c0:	d9f4      	bls.n	800b0ac <_printf_i+0x110>
 800b0c2:	2b08      	cmp	r3, #8
 800b0c4:	d10b      	bne.n	800b0de <_printf_i+0x142>
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	07df      	lsls	r7, r3, #31
 800b0ca:	d508      	bpl.n	800b0de <_printf_i+0x142>
 800b0cc:	6923      	ldr	r3, [r4, #16]
 800b0ce:	6861      	ldr	r1, [r4, #4]
 800b0d0:	4299      	cmp	r1, r3
 800b0d2:	bfde      	ittt	le
 800b0d4:	2330      	movle	r3, #48	@ 0x30
 800b0d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b0de:	1b92      	subs	r2, r2, r6
 800b0e0:	6122      	str	r2, [r4, #16]
 800b0e2:	f8cd a000 	str.w	sl, [sp]
 800b0e6:	464b      	mov	r3, r9
 800b0e8:	aa03      	add	r2, sp, #12
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	f7ff fee7 	bl	800aec0 <_printf_common>
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	d14a      	bne.n	800b18c <_printf_i+0x1f0>
 800b0f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0fa:	b004      	add	sp, #16
 800b0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	f043 0320 	orr.w	r3, r3, #32
 800b106:	6023      	str	r3, [r4, #0]
 800b108:	4832      	ldr	r0, [pc, #200]	@ (800b1d4 <_printf_i+0x238>)
 800b10a:	2778      	movs	r7, #120	@ 0x78
 800b10c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	6831      	ldr	r1, [r6, #0]
 800b114:	061f      	lsls	r7, r3, #24
 800b116:	f851 5b04 	ldr.w	r5, [r1], #4
 800b11a:	d402      	bmi.n	800b122 <_printf_i+0x186>
 800b11c:	065f      	lsls	r7, r3, #25
 800b11e:	bf48      	it	mi
 800b120:	b2ad      	uxthmi	r5, r5
 800b122:	6031      	str	r1, [r6, #0]
 800b124:	07d9      	lsls	r1, r3, #31
 800b126:	bf44      	itt	mi
 800b128:	f043 0320 	orrmi.w	r3, r3, #32
 800b12c:	6023      	strmi	r3, [r4, #0]
 800b12e:	b11d      	cbz	r5, 800b138 <_printf_i+0x19c>
 800b130:	2310      	movs	r3, #16
 800b132:	e7ad      	b.n	800b090 <_printf_i+0xf4>
 800b134:	4826      	ldr	r0, [pc, #152]	@ (800b1d0 <_printf_i+0x234>)
 800b136:	e7e9      	b.n	800b10c <_printf_i+0x170>
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	f023 0320 	bic.w	r3, r3, #32
 800b13e:	6023      	str	r3, [r4, #0]
 800b140:	e7f6      	b.n	800b130 <_printf_i+0x194>
 800b142:	4616      	mov	r6, r2
 800b144:	e7bd      	b.n	800b0c2 <_printf_i+0x126>
 800b146:	6833      	ldr	r3, [r6, #0]
 800b148:	6825      	ldr	r5, [r4, #0]
 800b14a:	6961      	ldr	r1, [r4, #20]
 800b14c:	1d18      	adds	r0, r3, #4
 800b14e:	6030      	str	r0, [r6, #0]
 800b150:	062e      	lsls	r6, r5, #24
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	d501      	bpl.n	800b15a <_printf_i+0x1be>
 800b156:	6019      	str	r1, [r3, #0]
 800b158:	e002      	b.n	800b160 <_printf_i+0x1c4>
 800b15a:	0668      	lsls	r0, r5, #25
 800b15c:	d5fb      	bpl.n	800b156 <_printf_i+0x1ba>
 800b15e:	8019      	strh	r1, [r3, #0]
 800b160:	2300      	movs	r3, #0
 800b162:	6123      	str	r3, [r4, #16]
 800b164:	4616      	mov	r6, r2
 800b166:	e7bc      	b.n	800b0e2 <_printf_i+0x146>
 800b168:	6833      	ldr	r3, [r6, #0]
 800b16a:	1d1a      	adds	r2, r3, #4
 800b16c:	6032      	str	r2, [r6, #0]
 800b16e:	681e      	ldr	r6, [r3, #0]
 800b170:	6862      	ldr	r2, [r4, #4]
 800b172:	2100      	movs	r1, #0
 800b174:	4630      	mov	r0, r6
 800b176:	f7f5 f85b 	bl	8000230 <memchr>
 800b17a:	b108      	cbz	r0, 800b180 <_printf_i+0x1e4>
 800b17c:	1b80      	subs	r0, r0, r6
 800b17e:	6060      	str	r0, [r4, #4]
 800b180:	6863      	ldr	r3, [r4, #4]
 800b182:	6123      	str	r3, [r4, #16]
 800b184:	2300      	movs	r3, #0
 800b186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b18a:	e7aa      	b.n	800b0e2 <_printf_i+0x146>
 800b18c:	6923      	ldr	r3, [r4, #16]
 800b18e:	4632      	mov	r2, r6
 800b190:	4649      	mov	r1, r9
 800b192:	4640      	mov	r0, r8
 800b194:	47d0      	blx	sl
 800b196:	3001      	adds	r0, #1
 800b198:	d0ad      	beq.n	800b0f6 <_printf_i+0x15a>
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	079b      	lsls	r3, r3, #30
 800b19e:	d413      	bmi.n	800b1c8 <_printf_i+0x22c>
 800b1a0:	68e0      	ldr	r0, [r4, #12]
 800b1a2:	9b03      	ldr	r3, [sp, #12]
 800b1a4:	4298      	cmp	r0, r3
 800b1a6:	bfb8      	it	lt
 800b1a8:	4618      	movlt	r0, r3
 800b1aa:	e7a6      	b.n	800b0fa <_printf_i+0x15e>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	4632      	mov	r2, r6
 800b1b0:	4649      	mov	r1, r9
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	47d0      	blx	sl
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	d09d      	beq.n	800b0f6 <_printf_i+0x15a>
 800b1ba:	3501      	adds	r5, #1
 800b1bc:	68e3      	ldr	r3, [r4, #12]
 800b1be:	9903      	ldr	r1, [sp, #12]
 800b1c0:	1a5b      	subs	r3, r3, r1
 800b1c2:	42ab      	cmp	r3, r5
 800b1c4:	dcf2      	bgt.n	800b1ac <_printf_i+0x210>
 800b1c6:	e7eb      	b.n	800b1a0 <_printf_i+0x204>
 800b1c8:	2500      	movs	r5, #0
 800b1ca:	f104 0619 	add.w	r6, r4, #25
 800b1ce:	e7f5      	b.n	800b1bc <_printf_i+0x220>
 800b1d0:	0800fd28 	.word	0x0800fd28
 800b1d4:	0800fd39 	.word	0x0800fd39

0800b1d8 <_scanf_float>:
 800b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1dc:	b087      	sub	sp, #28
 800b1de:	4691      	mov	r9, r2
 800b1e0:	9303      	str	r3, [sp, #12]
 800b1e2:	688b      	ldr	r3, [r1, #8]
 800b1e4:	1e5a      	subs	r2, r3, #1
 800b1e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b1ea:	bf81      	itttt	hi
 800b1ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b1f0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b1f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b1f8:	608b      	strhi	r3, [r1, #8]
 800b1fa:	680b      	ldr	r3, [r1, #0]
 800b1fc:	460a      	mov	r2, r1
 800b1fe:	f04f 0500 	mov.w	r5, #0
 800b202:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b206:	f842 3b1c 	str.w	r3, [r2], #28
 800b20a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b20e:	4680      	mov	r8, r0
 800b210:	460c      	mov	r4, r1
 800b212:	bf98      	it	ls
 800b214:	f04f 0b00 	movls.w	fp, #0
 800b218:	9201      	str	r2, [sp, #4]
 800b21a:	4616      	mov	r6, r2
 800b21c:	46aa      	mov	sl, r5
 800b21e:	462f      	mov	r7, r5
 800b220:	9502      	str	r5, [sp, #8]
 800b222:	68a2      	ldr	r2, [r4, #8]
 800b224:	b15a      	cbz	r2, 800b23e <_scanf_float+0x66>
 800b226:	f8d9 3000 	ldr.w	r3, [r9]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	2b4e      	cmp	r3, #78	@ 0x4e
 800b22e:	d863      	bhi.n	800b2f8 <_scanf_float+0x120>
 800b230:	2b40      	cmp	r3, #64	@ 0x40
 800b232:	d83b      	bhi.n	800b2ac <_scanf_float+0xd4>
 800b234:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b238:	b2c8      	uxtb	r0, r1
 800b23a:	280e      	cmp	r0, #14
 800b23c:	d939      	bls.n	800b2b2 <_scanf_float+0xda>
 800b23e:	b11f      	cbz	r7, 800b248 <_scanf_float+0x70>
 800b240:	6823      	ldr	r3, [r4, #0]
 800b242:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b246:	6023      	str	r3, [r4, #0]
 800b248:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b24c:	f1ba 0f01 	cmp.w	sl, #1
 800b250:	f200 8114 	bhi.w	800b47c <_scanf_float+0x2a4>
 800b254:	9b01      	ldr	r3, [sp, #4]
 800b256:	429e      	cmp	r6, r3
 800b258:	f200 8105 	bhi.w	800b466 <_scanf_float+0x28e>
 800b25c:	2001      	movs	r0, #1
 800b25e:	b007      	add	sp, #28
 800b260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b264:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b268:	2a0d      	cmp	r2, #13
 800b26a:	d8e8      	bhi.n	800b23e <_scanf_float+0x66>
 800b26c:	a101      	add	r1, pc, #4	@ (adr r1, 800b274 <_scanf_float+0x9c>)
 800b26e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b272:	bf00      	nop
 800b274:	0800b3bd 	.word	0x0800b3bd
 800b278:	0800b23f 	.word	0x0800b23f
 800b27c:	0800b23f 	.word	0x0800b23f
 800b280:	0800b23f 	.word	0x0800b23f
 800b284:	0800b419 	.word	0x0800b419
 800b288:	0800b3f3 	.word	0x0800b3f3
 800b28c:	0800b23f 	.word	0x0800b23f
 800b290:	0800b23f 	.word	0x0800b23f
 800b294:	0800b3cb 	.word	0x0800b3cb
 800b298:	0800b23f 	.word	0x0800b23f
 800b29c:	0800b23f 	.word	0x0800b23f
 800b2a0:	0800b23f 	.word	0x0800b23f
 800b2a4:	0800b23f 	.word	0x0800b23f
 800b2a8:	0800b387 	.word	0x0800b387
 800b2ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b2b0:	e7da      	b.n	800b268 <_scanf_float+0x90>
 800b2b2:	290e      	cmp	r1, #14
 800b2b4:	d8c3      	bhi.n	800b23e <_scanf_float+0x66>
 800b2b6:	a001      	add	r0, pc, #4	@ (adr r0, 800b2bc <_scanf_float+0xe4>)
 800b2b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b2bc:	0800b377 	.word	0x0800b377
 800b2c0:	0800b23f 	.word	0x0800b23f
 800b2c4:	0800b377 	.word	0x0800b377
 800b2c8:	0800b407 	.word	0x0800b407
 800b2cc:	0800b23f 	.word	0x0800b23f
 800b2d0:	0800b319 	.word	0x0800b319
 800b2d4:	0800b35d 	.word	0x0800b35d
 800b2d8:	0800b35d 	.word	0x0800b35d
 800b2dc:	0800b35d 	.word	0x0800b35d
 800b2e0:	0800b35d 	.word	0x0800b35d
 800b2e4:	0800b35d 	.word	0x0800b35d
 800b2e8:	0800b35d 	.word	0x0800b35d
 800b2ec:	0800b35d 	.word	0x0800b35d
 800b2f0:	0800b35d 	.word	0x0800b35d
 800b2f4:	0800b35d 	.word	0x0800b35d
 800b2f8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b2fa:	d809      	bhi.n	800b310 <_scanf_float+0x138>
 800b2fc:	2b60      	cmp	r3, #96	@ 0x60
 800b2fe:	d8b1      	bhi.n	800b264 <_scanf_float+0x8c>
 800b300:	2b54      	cmp	r3, #84	@ 0x54
 800b302:	d07b      	beq.n	800b3fc <_scanf_float+0x224>
 800b304:	2b59      	cmp	r3, #89	@ 0x59
 800b306:	d19a      	bne.n	800b23e <_scanf_float+0x66>
 800b308:	2d07      	cmp	r5, #7
 800b30a:	d198      	bne.n	800b23e <_scanf_float+0x66>
 800b30c:	2508      	movs	r5, #8
 800b30e:	e02f      	b.n	800b370 <_scanf_float+0x198>
 800b310:	2b74      	cmp	r3, #116	@ 0x74
 800b312:	d073      	beq.n	800b3fc <_scanf_float+0x224>
 800b314:	2b79      	cmp	r3, #121	@ 0x79
 800b316:	e7f6      	b.n	800b306 <_scanf_float+0x12e>
 800b318:	6821      	ldr	r1, [r4, #0]
 800b31a:	05c8      	lsls	r0, r1, #23
 800b31c:	d51e      	bpl.n	800b35c <_scanf_float+0x184>
 800b31e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b322:	6021      	str	r1, [r4, #0]
 800b324:	3701      	adds	r7, #1
 800b326:	f1bb 0f00 	cmp.w	fp, #0
 800b32a:	d003      	beq.n	800b334 <_scanf_float+0x15c>
 800b32c:	3201      	adds	r2, #1
 800b32e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800b332:	60a2      	str	r2, [r4, #8]
 800b334:	68a3      	ldr	r3, [r4, #8]
 800b336:	3b01      	subs	r3, #1
 800b338:	60a3      	str	r3, [r4, #8]
 800b33a:	6923      	ldr	r3, [r4, #16]
 800b33c:	3301      	adds	r3, #1
 800b33e:	6123      	str	r3, [r4, #16]
 800b340:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b344:	3b01      	subs	r3, #1
 800b346:	2b00      	cmp	r3, #0
 800b348:	f8c9 3004 	str.w	r3, [r9, #4]
 800b34c:	f340 8082 	ble.w	800b454 <_scanf_float+0x27c>
 800b350:	f8d9 3000 	ldr.w	r3, [r9]
 800b354:	3301      	adds	r3, #1
 800b356:	f8c9 3000 	str.w	r3, [r9]
 800b35a:	e762      	b.n	800b222 <_scanf_float+0x4a>
 800b35c:	eb1a 0105 	adds.w	r1, sl, r5
 800b360:	f47f af6d 	bne.w	800b23e <_scanf_float+0x66>
 800b364:	6822      	ldr	r2, [r4, #0]
 800b366:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b36a:	6022      	str	r2, [r4, #0]
 800b36c:	460d      	mov	r5, r1
 800b36e:	468a      	mov	sl, r1
 800b370:	f806 3b01 	strb.w	r3, [r6], #1
 800b374:	e7de      	b.n	800b334 <_scanf_float+0x15c>
 800b376:	6822      	ldr	r2, [r4, #0]
 800b378:	0610      	lsls	r0, r2, #24
 800b37a:	f57f af60 	bpl.w	800b23e <_scanf_float+0x66>
 800b37e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b382:	6022      	str	r2, [r4, #0]
 800b384:	e7f4      	b.n	800b370 <_scanf_float+0x198>
 800b386:	f1ba 0f00 	cmp.w	sl, #0
 800b38a:	d10c      	bne.n	800b3a6 <_scanf_float+0x1ce>
 800b38c:	b977      	cbnz	r7, 800b3ac <_scanf_float+0x1d4>
 800b38e:	6822      	ldr	r2, [r4, #0]
 800b390:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b394:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b398:	d108      	bne.n	800b3ac <_scanf_float+0x1d4>
 800b39a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b39e:	6022      	str	r2, [r4, #0]
 800b3a0:	f04f 0a01 	mov.w	sl, #1
 800b3a4:	e7e4      	b.n	800b370 <_scanf_float+0x198>
 800b3a6:	f1ba 0f02 	cmp.w	sl, #2
 800b3aa:	d050      	beq.n	800b44e <_scanf_float+0x276>
 800b3ac:	2d01      	cmp	r5, #1
 800b3ae:	d002      	beq.n	800b3b6 <_scanf_float+0x1de>
 800b3b0:	2d04      	cmp	r5, #4
 800b3b2:	f47f af44 	bne.w	800b23e <_scanf_float+0x66>
 800b3b6:	3501      	adds	r5, #1
 800b3b8:	b2ed      	uxtb	r5, r5
 800b3ba:	e7d9      	b.n	800b370 <_scanf_float+0x198>
 800b3bc:	f1ba 0f01 	cmp.w	sl, #1
 800b3c0:	f47f af3d 	bne.w	800b23e <_scanf_float+0x66>
 800b3c4:	f04f 0a02 	mov.w	sl, #2
 800b3c8:	e7d2      	b.n	800b370 <_scanf_float+0x198>
 800b3ca:	b975      	cbnz	r5, 800b3ea <_scanf_float+0x212>
 800b3cc:	2f00      	cmp	r7, #0
 800b3ce:	f47f af37 	bne.w	800b240 <_scanf_float+0x68>
 800b3d2:	6822      	ldr	r2, [r4, #0]
 800b3d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b3d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b3dc:	f040 8103 	bne.w	800b5e6 <_scanf_float+0x40e>
 800b3e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b3e4:	6022      	str	r2, [r4, #0]
 800b3e6:	2501      	movs	r5, #1
 800b3e8:	e7c2      	b.n	800b370 <_scanf_float+0x198>
 800b3ea:	2d03      	cmp	r5, #3
 800b3ec:	d0e3      	beq.n	800b3b6 <_scanf_float+0x1de>
 800b3ee:	2d05      	cmp	r5, #5
 800b3f0:	e7df      	b.n	800b3b2 <_scanf_float+0x1da>
 800b3f2:	2d02      	cmp	r5, #2
 800b3f4:	f47f af23 	bne.w	800b23e <_scanf_float+0x66>
 800b3f8:	2503      	movs	r5, #3
 800b3fa:	e7b9      	b.n	800b370 <_scanf_float+0x198>
 800b3fc:	2d06      	cmp	r5, #6
 800b3fe:	f47f af1e 	bne.w	800b23e <_scanf_float+0x66>
 800b402:	2507      	movs	r5, #7
 800b404:	e7b4      	b.n	800b370 <_scanf_float+0x198>
 800b406:	6822      	ldr	r2, [r4, #0]
 800b408:	0591      	lsls	r1, r2, #22
 800b40a:	f57f af18 	bpl.w	800b23e <_scanf_float+0x66>
 800b40e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b412:	6022      	str	r2, [r4, #0]
 800b414:	9702      	str	r7, [sp, #8]
 800b416:	e7ab      	b.n	800b370 <_scanf_float+0x198>
 800b418:	6822      	ldr	r2, [r4, #0]
 800b41a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b41e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b422:	d005      	beq.n	800b430 <_scanf_float+0x258>
 800b424:	0550      	lsls	r0, r2, #21
 800b426:	f57f af0a 	bpl.w	800b23e <_scanf_float+0x66>
 800b42a:	2f00      	cmp	r7, #0
 800b42c:	f000 80db 	beq.w	800b5e6 <_scanf_float+0x40e>
 800b430:	0591      	lsls	r1, r2, #22
 800b432:	bf58      	it	pl
 800b434:	9902      	ldrpl	r1, [sp, #8]
 800b436:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b43a:	bf58      	it	pl
 800b43c:	1a79      	subpl	r1, r7, r1
 800b43e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b442:	bf58      	it	pl
 800b444:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b448:	6022      	str	r2, [r4, #0]
 800b44a:	2700      	movs	r7, #0
 800b44c:	e790      	b.n	800b370 <_scanf_float+0x198>
 800b44e:	f04f 0a03 	mov.w	sl, #3
 800b452:	e78d      	b.n	800b370 <_scanf_float+0x198>
 800b454:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b458:	4649      	mov	r1, r9
 800b45a:	4640      	mov	r0, r8
 800b45c:	4798      	blx	r3
 800b45e:	2800      	cmp	r0, #0
 800b460:	f43f aedf 	beq.w	800b222 <_scanf_float+0x4a>
 800b464:	e6eb      	b.n	800b23e <_scanf_float+0x66>
 800b466:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b46a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b46e:	464a      	mov	r2, r9
 800b470:	4640      	mov	r0, r8
 800b472:	4798      	blx	r3
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	3b01      	subs	r3, #1
 800b478:	6123      	str	r3, [r4, #16]
 800b47a:	e6eb      	b.n	800b254 <_scanf_float+0x7c>
 800b47c:	1e6b      	subs	r3, r5, #1
 800b47e:	2b06      	cmp	r3, #6
 800b480:	d824      	bhi.n	800b4cc <_scanf_float+0x2f4>
 800b482:	2d02      	cmp	r5, #2
 800b484:	d836      	bhi.n	800b4f4 <_scanf_float+0x31c>
 800b486:	9b01      	ldr	r3, [sp, #4]
 800b488:	429e      	cmp	r6, r3
 800b48a:	f67f aee7 	bls.w	800b25c <_scanf_float+0x84>
 800b48e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b492:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b496:	464a      	mov	r2, r9
 800b498:	4640      	mov	r0, r8
 800b49a:	4798      	blx	r3
 800b49c:	6923      	ldr	r3, [r4, #16]
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	6123      	str	r3, [r4, #16]
 800b4a2:	e7f0      	b.n	800b486 <_scanf_float+0x2ae>
 800b4a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b4a8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b4ac:	464a      	mov	r2, r9
 800b4ae:	4640      	mov	r0, r8
 800b4b0:	4798      	blx	r3
 800b4b2:	6923      	ldr	r3, [r4, #16]
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	6123      	str	r3, [r4, #16]
 800b4b8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b4bc:	fa5f fa8a 	uxtb.w	sl, sl
 800b4c0:	f1ba 0f02 	cmp.w	sl, #2
 800b4c4:	d1ee      	bne.n	800b4a4 <_scanf_float+0x2cc>
 800b4c6:	3d03      	subs	r5, #3
 800b4c8:	b2ed      	uxtb	r5, r5
 800b4ca:	1b76      	subs	r6, r6, r5
 800b4cc:	6823      	ldr	r3, [r4, #0]
 800b4ce:	05da      	lsls	r2, r3, #23
 800b4d0:	d530      	bpl.n	800b534 <_scanf_float+0x35c>
 800b4d2:	055b      	lsls	r3, r3, #21
 800b4d4:	d511      	bpl.n	800b4fa <_scanf_float+0x322>
 800b4d6:	9b01      	ldr	r3, [sp, #4]
 800b4d8:	429e      	cmp	r6, r3
 800b4da:	f67f aebf 	bls.w	800b25c <_scanf_float+0x84>
 800b4de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b4e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b4e6:	464a      	mov	r2, r9
 800b4e8:	4640      	mov	r0, r8
 800b4ea:	4798      	blx	r3
 800b4ec:	6923      	ldr	r3, [r4, #16]
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	e7f0      	b.n	800b4d6 <_scanf_float+0x2fe>
 800b4f4:	46aa      	mov	sl, r5
 800b4f6:	46b3      	mov	fp, r6
 800b4f8:	e7de      	b.n	800b4b8 <_scanf_float+0x2e0>
 800b4fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b4fe:	6923      	ldr	r3, [r4, #16]
 800b500:	2965      	cmp	r1, #101	@ 0x65
 800b502:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b506:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800b50a:	6123      	str	r3, [r4, #16]
 800b50c:	d00c      	beq.n	800b528 <_scanf_float+0x350>
 800b50e:	2945      	cmp	r1, #69	@ 0x45
 800b510:	d00a      	beq.n	800b528 <_scanf_float+0x350>
 800b512:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b516:	464a      	mov	r2, r9
 800b518:	4640      	mov	r0, r8
 800b51a:	4798      	blx	r3
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b522:	3b01      	subs	r3, #1
 800b524:	1eb5      	subs	r5, r6, #2
 800b526:	6123      	str	r3, [r4, #16]
 800b528:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b52c:	464a      	mov	r2, r9
 800b52e:	4640      	mov	r0, r8
 800b530:	4798      	blx	r3
 800b532:	462e      	mov	r6, r5
 800b534:	6822      	ldr	r2, [r4, #0]
 800b536:	f012 0210 	ands.w	r2, r2, #16
 800b53a:	d001      	beq.n	800b540 <_scanf_float+0x368>
 800b53c:	2000      	movs	r0, #0
 800b53e:	e68e      	b.n	800b25e <_scanf_float+0x86>
 800b540:	7032      	strb	r2, [r6, #0]
 800b542:	6823      	ldr	r3, [r4, #0]
 800b544:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b54c:	d125      	bne.n	800b59a <_scanf_float+0x3c2>
 800b54e:	9b02      	ldr	r3, [sp, #8]
 800b550:	429f      	cmp	r7, r3
 800b552:	d00a      	beq.n	800b56a <_scanf_float+0x392>
 800b554:	1bda      	subs	r2, r3, r7
 800b556:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b55a:	429e      	cmp	r6, r3
 800b55c:	bf28      	it	cs
 800b55e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b562:	4922      	ldr	r1, [pc, #136]	@ (800b5ec <_scanf_float+0x414>)
 800b564:	4630      	mov	r0, r6
 800b566:	f000 f87b 	bl	800b660 <siprintf>
 800b56a:	9901      	ldr	r1, [sp, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	4640      	mov	r0, r8
 800b570:	f000 ffb2 	bl	800c4d8 <_strtod_r>
 800b574:	9b03      	ldr	r3, [sp, #12]
 800b576:	6821      	ldr	r1, [r4, #0]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f011 0f02 	tst.w	r1, #2
 800b57e:	ec57 6b10 	vmov	r6, r7, d0
 800b582:	f103 0204 	add.w	r2, r3, #4
 800b586:	d015      	beq.n	800b5b4 <_scanf_float+0x3dc>
 800b588:	9903      	ldr	r1, [sp, #12]
 800b58a:	600a      	str	r2, [r1, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	e9c3 6700 	strd	r6, r7, [r3]
 800b592:	68e3      	ldr	r3, [r4, #12]
 800b594:	3301      	adds	r3, #1
 800b596:	60e3      	str	r3, [r4, #12]
 800b598:	e7d0      	b.n	800b53c <_scanf_float+0x364>
 800b59a:	9b04      	ldr	r3, [sp, #16]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d0e4      	beq.n	800b56a <_scanf_float+0x392>
 800b5a0:	9905      	ldr	r1, [sp, #20]
 800b5a2:	230a      	movs	r3, #10
 800b5a4:	3101      	adds	r1, #1
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	f001 f816 	bl	800c5d8 <_strtol_r>
 800b5ac:	9b04      	ldr	r3, [sp, #16]
 800b5ae:	9e05      	ldr	r6, [sp, #20]
 800b5b0:	1ac2      	subs	r2, r0, r3
 800b5b2:	e7d0      	b.n	800b556 <_scanf_float+0x37e>
 800b5b4:	f011 0f04 	tst.w	r1, #4
 800b5b8:	9903      	ldr	r1, [sp, #12]
 800b5ba:	600a      	str	r2, [r1, #0]
 800b5bc:	d1e6      	bne.n	800b58c <_scanf_float+0x3b4>
 800b5be:	681d      	ldr	r5, [r3, #0]
 800b5c0:	4632      	mov	r2, r6
 800b5c2:	463b      	mov	r3, r7
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	f7f5 fae0 	bl	8000b8c <__aeabi_dcmpun>
 800b5cc:	b128      	cbz	r0, 800b5da <_scanf_float+0x402>
 800b5ce:	4808      	ldr	r0, [pc, #32]	@ (800b5f0 <_scanf_float+0x418>)
 800b5d0:	f001 f8de 	bl	800c790 <nanf>
 800b5d4:	ed85 0a00 	vstr	s0, [r5]
 800b5d8:	e7db      	b.n	800b592 <_scanf_float+0x3ba>
 800b5da:	4630      	mov	r0, r6
 800b5dc:	4639      	mov	r1, r7
 800b5de:	f7f5 fb33 	bl	8000c48 <__aeabi_d2f>
 800b5e2:	6028      	str	r0, [r5, #0]
 800b5e4:	e7d5      	b.n	800b592 <_scanf_float+0x3ba>
 800b5e6:	2700      	movs	r7, #0
 800b5e8:	e62e      	b.n	800b248 <_scanf_float+0x70>
 800b5ea:	bf00      	nop
 800b5ec:	0800fd4a 	.word	0x0800fd4a
 800b5f0:	0800ff06 	.word	0x0800ff06

0800b5f4 <sniprintf>:
 800b5f4:	b40c      	push	{r2, r3}
 800b5f6:	b530      	push	{r4, r5, lr}
 800b5f8:	4b18      	ldr	r3, [pc, #96]	@ (800b65c <sniprintf+0x68>)
 800b5fa:	1e0c      	subs	r4, r1, #0
 800b5fc:	681d      	ldr	r5, [r3, #0]
 800b5fe:	b09d      	sub	sp, #116	@ 0x74
 800b600:	da08      	bge.n	800b614 <sniprintf+0x20>
 800b602:	238b      	movs	r3, #139	@ 0x8b
 800b604:	602b      	str	r3, [r5, #0]
 800b606:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b60a:	b01d      	add	sp, #116	@ 0x74
 800b60c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b610:	b002      	add	sp, #8
 800b612:	4770      	bx	lr
 800b614:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b618:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b61c:	f04f 0300 	mov.w	r3, #0
 800b620:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b622:	bf14      	ite	ne
 800b624:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b628:	4623      	moveq	r3, r4
 800b62a:	9304      	str	r3, [sp, #16]
 800b62c:	9307      	str	r3, [sp, #28]
 800b62e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b632:	9002      	str	r0, [sp, #8]
 800b634:	9006      	str	r0, [sp, #24]
 800b636:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b63a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b63c:	ab21      	add	r3, sp, #132	@ 0x84
 800b63e:	a902      	add	r1, sp, #8
 800b640:	4628      	mov	r0, r5
 800b642:	9301      	str	r3, [sp, #4]
 800b644:	f002 fae2 	bl	800dc0c <_svfiprintf_r>
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	bfbc      	itt	lt
 800b64c:	238b      	movlt	r3, #139	@ 0x8b
 800b64e:	602b      	strlt	r3, [r5, #0]
 800b650:	2c00      	cmp	r4, #0
 800b652:	d0da      	beq.n	800b60a <sniprintf+0x16>
 800b654:	9b02      	ldr	r3, [sp, #8]
 800b656:	2200      	movs	r2, #0
 800b658:	701a      	strb	r2, [r3, #0]
 800b65a:	e7d6      	b.n	800b60a <sniprintf+0x16>
 800b65c:	20000540 	.word	0x20000540

0800b660 <siprintf>:
 800b660:	b40e      	push	{r1, r2, r3}
 800b662:	b510      	push	{r4, lr}
 800b664:	b09d      	sub	sp, #116	@ 0x74
 800b666:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b668:	9002      	str	r0, [sp, #8]
 800b66a:	9006      	str	r0, [sp, #24]
 800b66c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b670:	480a      	ldr	r0, [pc, #40]	@ (800b69c <siprintf+0x3c>)
 800b672:	9107      	str	r1, [sp, #28]
 800b674:	9104      	str	r1, [sp, #16]
 800b676:	490a      	ldr	r1, [pc, #40]	@ (800b6a0 <siprintf+0x40>)
 800b678:	f853 2b04 	ldr.w	r2, [r3], #4
 800b67c:	9105      	str	r1, [sp, #20]
 800b67e:	2400      	movs	r4, #0
 800b680:	a902      	add	r1, sp, #8
 800b682:	6800      	ldr	r0, [r0, #0]
 800b684:	9301      	str	r3, [sp, #4]
 800b686:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b688:	f002 fac0 	bl	800dc0c <_svfiprintf_r>
 800b68c:	9b02      	ldr	r3, [sp, #8]
 800b68e:	701c      	strb	r4, [r3, #0]
 800b690:	b01d      	add	sp, #116	@ 0x74
 800b692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b696:	b003      	add	sp, #12
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	20000540 	.word	0x20000540
 800b6a0:	ffff0208 	.word	0xffff0208

0800b6a4 <siscanf>:
 800b6a4:	b40e      	push	{r1, r2, r3}
 800b6a6:	b570      	push	{r4, r5, r6, lr}
 800b6a8:	b09d      	sub	sp, #116	@ 0x74
 800b6aa:	ac21      	add	r4, sp, #132	@ 0x84
 800b6ac:	2500      	movs	r5, #0
 800b6ae:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800b6b2:	f854 6b04 	ldr.w	r6, [r4], #4
 800b6b6:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b6ba:	951b      	str	r5, [sp, #108]	@ 0x6c
 800b6bc:	9002      	str	r0, [sp, #8]
 800b6be:	9006      	str	r0, [sp, #24]
 800b6c0:	f7f4 fe06 	bl	80002d0 <strlen>
 800b6c4:	4b0b      	ldr	r3, [pc, #44]	@ (800b6f4 <siscanf+0x50>)
 800b6c6:	9003      	str	r0, [sp, #12]
 800b6c8:	9007      	str	r0, [sp, #28]
 800b6ca:	480b      	ldr	r0, [pc, #44]	@ (800b6f8 <siscanf+0x54>)
 800b6cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b6d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b6d6:	4632      	mov	r2, r6
 800b6d8:	4623      	mov	r3, r4
 800b6da:	a902      	add	r1, sp, #8
 800b6dc:	6800      	ldr	r0, [r0, #0]
 800b6de:	950f      	str	r5, [sp, #60]	@ 0x3c
 800b6e0:	9514      	str	r5, [sp, #80]	@ 0x50
 800b6e2:	9401      	str	r4, [sp, #4]
 800b6e4:	f002 fbe8 	bl	800deb8 <__ssvfiscanf_r>
 800b6e8:	b01d      	add	sp, #116	@ 0x74
 800b6ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b6ee:	b003      	add	sp, #12
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	0800b71f 	.word	0x0800b71f
 800b6f8:	20000540 	.word	0x20000540

0800b6fc <__sread>:
 800b6fc:	b510      	push	{r4, lr}
 800b6fe:	460c      	mov	r4, r1
 800b700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b704:	f000 ffc8 	bl	800c698 <_read_r>
 800b708:	2800      	cmp	r0, #0
 800b70a:	bfab      	itete	ge
 800b70c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b70e:	89a3      	ldrhlt	r3, [r4, #12]
 800b710:	181b      	addge	r3, r3, r0
 800b712:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b716:	bfac      	ite	ge
 800b718:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b71a:	81a3      	strhlt	r3, [r4, #12]
 800b71c:	bd10      	pop	{r4, pc}

0800b71e <__seofread>:
 800b71e:	2000      	movs	r0, #0
 800b720:	4770      	bx	lr

0800b722 <__swrite>:
 800b722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b726:	461f      	mov	r7, r3
 800b728:	898b      	ldrh	r3, [r1, #12]
 800b72a:	05db      	lsls	r3, r3, #23
 800b72c:	4605      	mov	r5, r0
 800b72e:	460c      	mov	r4, r1
 800b730:	4616      	mov	r6, r2
 800b732:	d505      	bpl.n	800b740 <__swrite+0x1e>
 800b734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b738:	2302      	movs	r3, #2
 800b73a:	2200      	movs	r2, #0
 800b73c:	f000 ff9a 	bl	800c674 <_lseek_r>
 800b740:	89a3      	ldrh	r3, [r4, #12]
 800b742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b746:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b74a:	81a3      	strh	r3, [r4, #12]
 800b74c:	4632      	mov	r2, r6
 800b74e:	463b      	mov	r3, r7
 800b750:	4628      	mov	r0, r5
 800b752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b756:	f000 bfb1 	b.w	800c6bc <_write_r>

0800b75a <__sseek>:
 800b75a:	b510      	push	{r4, lr}
 800b75c:	460c      	mov	r4, r1
 800b75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b762:	f000 ff87 	bl	800c674 <_lseek_r>
 800b766:	1c43      	adds	r3, r0, #1
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	bf15      	itete	ne
 800b76c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b76e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b772:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b776:	81a3      	strheq	r3, [r4, #12]
 800b778:	bf18      	it	ne
 800b77a:	81a3      	strhne	r3, [r4, #12]
 800b77c:	bd10      	pop	{r4, pc}

0800b77e <__sclose>:
 800b77e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b782:	f000 bfdf 	b.w	800c744 <_close_r>
	...

0800b788 <std>:
 800b788:	2300      	movs	r3, #0
 800b78a:	b510      	push	{r4, lr}
 800b78c:	4604      	mov	r4, r0
 800b78e:	e9c0 3300 	strd	r3, r3, [r0]
 800b792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b796:	6083      	str	r3, [r0, #8]
 800b798:	8181      	strh	r1, [r0, #12]
 800b79a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b79c:	81c2      	strh	r2, [r0, #14]
 800b79e:	6183      	str	r3, [r0, #24]
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	2208      	movs	r2, #8
 800b7a4:	305c      	adds	r0, #92	@ 0x5c
 800b7a6:	f000 ff37 	bl	800c618 <memset>
 800b7aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e0 <std+0x58>)
 800b7ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e4 <std+0x5c>)
 800b7b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e8 <std+0x60>)
 800b7b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7ec <std+0x64>)
 800b7b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f0 <std+0x68>)
 800b7bc:	6224      	str	r4, [r4, #32]
 800b7be:	429c      	cmp	r4, r3
 800b7c0:	d006      	beq.n	800b7d0 <std+0x48>
 800b7c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b7c6:	4294      	cmp	r4, r2
 800b7c8:	d002      	beq.n	800b7d0 <std+0x48>
 800b7ca:	33d0      	adds	r3, #208	@ 0xd0
 800b7cc:	429c      	cmp	r4, r3
 800b7ce:	d105      	bne.n	800b7dc <std+0x54>
 800b7d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7d8:	f000 bfac 	b.w	800c734 <__retarget_lock_init_recursive>
 800b7dc:	bd10      	pop	{r4, pc}
 800b7de:	bf00      	nop
 800b7e0:	0800b6fd 	.word	0x0800b6fd
 800b7e4:	0800b723 	.word	0x0800b723
 800b7e8:	0800b75b 	.word	0x0800b75b
 800b7ec:	0800b77f 	.word	0x0800b77f
 800b7f0:	20000c58 	.word	0x20000c58

0800b7f4 <stdio_exit_handler>:
 800b7f4:	4a02      	ldr	r2, [pc, #8]	@ (800b800 <stdio_exit_handler+0xc>)
 800b7f6:	4903      	ldr	r1, [pc, #12]	@ (800b804 <stdio_exit_handler+0x10>)
 800b7f8:	4803      	ldr	r0, [pc, #12]	@ (800b808 <stdio_exit_handler+0x14>)
 800b7fa:	f000 beef 	b.w	800c5dc <_fwalk_sglue>
 800b7fe:	bf00      	nop
 800b800:	200003c8 	.word	0x200003c8
 800b804:	0800e735 	.word	0x0800e735
 800b808:	20000544 	.word	0x20000544

0800b80c <cleanup_stdio>:
 800b80c:	6841      	ldr	r1, [r0, #4]
 800b80e:	4b0c      	ldr	r3, [pc, #48]	@ (800b840 <cleanup_stdio+0x34>)
 800b810:	4299      	cmp	r1, r3
 800b812:	b510      	push	{r4, lr}
 800b814:	4604      	mov	r4, r0
 800b816:	d001      	beq.n	800b81c <cleanup_stdio+0x10>
 800b818:	f002 ff8c 	bl	800e734 <_fflush_r>
 800b81c:	68a1      	ldr	r1, [r4, #8]
 800b81e:	4b09      	ldr	r3, [pc, #36]	@ (800b844 <cleanup_stdio+0x38>)
 800b820:	4299      	cmp	r1, r3
 800b822:	d002      	beq.n	800b82a <cleanup_stdio+0x1e>
 800b824:	4620      	mov	r0, r4
 800b826:	f002 ff85 	bl	800e734 <_fflush_r>
 800b82a:	68e1      	ldr	r1, [r4, #12]
 800b82c:	4b06      	ldr	r3, [pc, #24]	@ (800b848 <cleanup_stdio+0x3c>)
 800b82e:	4299      	cmp	r1, r3
 800b830:	d004      	beq.n	800b83c <cleanup_stdio+0x30>
 800b832:	4620      	mov	r0, r4
 800b834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b838:	f002 bf7c 	b.w	800e734 <_fflush_r>
 800b83c:	bd10      	pop	{r4, pc}
 800b83e:	bf00      	nop
 800b840:	20000c58 	.word	0x20000c58
 800b844:	20000cc0 	.word	0x20000cc0
 800b848:	20000d28 	.word	0x20000d28

0800b84c <global_stdio_init.part.0>:
 800b84c:	b510      	push	{r4, lr}
 800b84e:	4b0b      	ldr	r3, [pc, #44]	@ (800b87c <global_stdio_init.part.0+0x30>)
 800b850:	4c0b      	ldr	r4, [pc, #44]	@ (800b880 <global_stdio_init.part.0+0x34>)
 800b852:	4a0c      	ldr	r2, [pc, #48]	@ (800b884 <global_stdio_init.part.0+0x38>)
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	4620      	mov	r0, r4
 800b858:	2200      	movs	r2, #0
 800b85a:	2104      	movs	r1, #4
 800b85c:	f7ff ff94 	bl	800b788 <std>
 800b860:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b864:	2201      	movs	r2, #1
 800b866:	2109      	movs	r1, #9
 800b868:	f7ff ff8e 	bl	800b788 <std>
 800b86c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b870:	2202      	movs	r2, #2
 800b872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b876:	2112      	movs	r1, #18
 800b878:	f7ff bf86 	b.w	800b788 <std>
 800b87c:	20000d90 	.word	0x20000d90
 800b880:	20000c58 	.word	0x20000c58
 800b884:	0800b7f5 	.word	0x0800b7f5

0800b888 <__sfp_lock_acquire>:
 800b888:	4801      	ldr	r0, [pc, #4]	@ (800b890 <__sfp_lock_acquire+0x8>)
 800b88a:	f000 bf54 	b.w	800c736 <__retarget_lock_acquire_recursive>
 800b88e:	bf00      	nop
 800b890:	20000d95 	.word	0x20000d95

0800b894 <__sfp_lock_release>:
 800b894:	4801      	ldr	r0, [pc, #4]	@ (800b89c <__sfp_lock_release+0x8>)
 800b896:	f000 bf4f 	b.w	800c738 <__retarget_lock_release_recursive>
 800b89a:	bf00      	nop
 800b89c:	20000d95 	.word	0x20000d95

0800b8a0 <__sinit>:
 800b8a0:	b510      	push	{r4, lr}
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	f7ff fff0 	bl	800b888 <__sfp_lock_acquire>
 800b8a8:	6a23      	ldr	r3, [r4, #32]
 800b8aa:	b11b      	cbz	r3, 800b8b4 <__sinit+0x14>
 800b8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8b0:	f7ff bff0 	b.w	800b894 <__sfp_lock_release>
 800b8b4:	4b04      	ldr	r3, [pc, #16]	@ (800b8c8 <__sinit+0x28>)
 800b8b6:	6223      	str	r3, [r4, #32]
 800b8b8:	4b04      	ldr	r3, [pc, #16]	@ (800b8cc <__sinit+0x2c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1f5      	bne.n	800b8ac <__sinit+0xc>
 800b8c0:	f7ff ffc4 	bl	800b84c <global_stdio_init.part.0>
 800b8c4:	e7f2      	b.n	800b8ac <__sinit+0xc>
 800b8c6:	bf00      	nop
 800b8c8:	0800b80d 	.word	0x0800b80d
 800b8cc:	20000d90 	.word	0x20000d90

0800b8d0 <sulp>:
 800b8d0:	b570      	push	{r4, r5, r6, lr}
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	460d      	mov	r5, r1
 800b8d6:	ec45 4b10 	vmov	d0, r4, r5
 800b8da:	4616      	mov	r6, r2
 800b8dc:	f003 faca 	bl	800ee74 <__ulp>
 800b8e0:	ec51 0b10 	vmov	r0, r1, d0
 800b8e4:	b17e      	cbz	r6, 800b906 <sulp+0x36>
 800b8e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b8ea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	dd09      	ble.n	800b906 <sulp+0x36>
 800b8f2:	051b      	lsls	r3, r3, #20
 800b8f4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b8f8:	2400      	movs	r4, #0
 800b8fa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b8fe:	4622      	mov	r2, r4
 800b900:	462b      	mov	r3, r5
 800b902:	f7f4 fea9 	bl	8000658 <__aeabi_dmul>
 800b906:	ec41 0b10 	vmov	d0, r0, r1
 800b90a:	bd70      	pop	{r4, r5, r6, pc}
 800b90c:	0000      	movs	r0, r0
	...

0800b910 <_strtod_l>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	b09f      	sub	sp, #124	@ 0x7c
 800b916:	460c      	mov	r4, r1
 800b918:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b91a:	2200      	movs	r2, #0
 800b91c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b91e:	9005      	str	r0, [sp, #20]
 800b920:	f04f 0a00 	mov.w	sl, #0
 800b924:	f04f 0b00 	mov.w	fp, #0
 800b928:	460a      	mov	r2, r1
 800b92a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b92c:	7811      	ldrb	r1, [r2, #0]
 800b92e:	292b      	cmp	r1, #43	@ 0x2b
 800b930:	d04a      	beq.n	800b9c8 <_strtod_l+0xb8>
 800b932:	d838      	bhi.n	800b9a6 <_strtod_l+0x96>
 800b934:	290d      	cmp	r1, #13
 800b936:	d832      	bhi.n	800b99e <_strtod_l+0x8e>
 800b938:	2908      	cmp	r1, #8
 800b93a:	d832      	bhi.n	800b9a2 <_strtod_l+0x92>
 800b93c:	2900      	cmp	r1, #0
 800b93e:	d03b      	beq.n	800b9b8 <_strtod_l+0xa8>
 800b940:	2200      	movs	r2, #0
 800b942:	920e      	str	r2, [sp, #56]	@ 0x38
 800b944:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b946:	782a      	ldrb	r2, [r5, #0]
 800b948:	2a30      	cmp	r2, #48	@ 0x30
 800b94a:	f040 80b2 	bne.w	800bab2 <_strtod_l+0x1a2>
 800b94e:	786a      	ldrb	r2, [r5, #1]
 800b950:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b954:	2a58      	cmp	r2, #88	@ 0x58
 800b956:	d16e      	bne.n	800ba36 <_strtod_l+0x126>
 800b958:	9302      	str	r3, [sp, #8]
 800b95a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b960:	9300      	str	r3, [sp, #0]
 800b962:	4a8f      	ldr	r2, [pc, #572]	@ (800bba0 <_strtod_l+0x290>)
 800b964:	9805      	ldr	r0, [sp, #20]
 800b966:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b968:	a919      	add	r1, sp, #100	@ 0x64
 800b96a:	f001 fe23 	bl	800d5b4 <__gethex>
 800b96e:	f010 060f 	ands.w	r6, r0, #15
 800b972:	4604      	mov	r4, r0
 800b974:	d005      	beq.n	800b982 <_strtod_l+0x72>
 800b976:	2e06      	cmp	r6, #6
 800b978:	d128      	bne.n	800b9cc <_strtod_l+0xbc>
 800b97a:	3501      	adds	r5, #1
 800b97c:	2300      	movs	r3, #0
 800b97e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b980:	930e      	str	r3, [sp, #56]	@ 0x38
 800b982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b984:	2b00      	cmp	r3, #0
 800b986:	f040 858e 	bne.w	800c4a6 <_strtod_l+0xb96>
 800b98a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b98c:	b1cb      	cbz	r3, 800b9c2 <_strtod_l+0xb2>
 800b98e:	4652      	mov	r2, sl
 800b990:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b994:	ec43 2b10 	vmov	d0, r2, r3
 800b998:	b01f      	add	sp, #124	@ 0x7c
 800b99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99e:	2920      	cmp	r1, #32
 800b9a0:	d1ce      	bne.n	800b940 <_strtod_l+0x30>
 800b9a2:	3201      	adds	r2, #1
 800b9a4:	e7c1      	b.n	800b92a <_strtod_l+0x1a>
 800b9a6:	292d      	cmp	r1, #45	@ 0x2d
 800b9a8:	d1ca      	bne.n	800b940 <_strtod_l+0x30>
 800b9aa:	2101      	movs	r1, #1
 800b9ac:	910e      	str	r1, [sp, #56]	@ 0x38
 800b9ae:	1c51      	adds	r1, r2, #1
 800b9b0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b9b2:	7852      	ldrb	r2, [r2, #1]
 800b9b4:	2a00      	cmp	r2, #0
 800b9b6:	d1c5      	bne.n	800b944 <_strtod_l+0x34>
 800b9b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b9ba:	9419      	str	r4, [sp, #100]	@ 0x64
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f040 8570 	bne.w	800c4a2 <_strtod_l+0xb92>
 800b9c2:	4652      	mov	r2, sl
 800b9c4:	465b      	mov	r3, fp
 800b9c6:	e7e5      	b.n	800b994 <_strtod_l+0x84>
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	e7ef      	b.n	800b9ac <_strtod_l+0x9c>
 800b9cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b9ce:	b13a      	cbz	r2, 800b9e0 <_strtod_l+0xd0>
 800b9d0:	2135      	movs	r1, #53	@ 0x35
 800b9d2:	a81c      	add	r0, sp, #112	@ 0x70
 800b9d4:	f003 fb48 	bl	800f068 <__copybits>
 800b9d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9da:	9805      	ldr	r0, [sp, #20]
 800b9dc:	f002 ff1e 	bl	800e81c <_Bfree>
 800b9e0:	3e01      	subs	r6, #1
 800b9e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b9e4:	2e04      	cmp	r6, #4
 800b9e6:	d806      	bhi.n	800b9f6 <_strtod_l+0xe6>
 800b9e8:	e8df f006 	tbb	[pc, r6]
 800b9ec:	201d0314 	.word	0x201d0314
 800b9f0:	14          	.byte	0x14
 800b9f1:	00          	.byte	0x00
 800b9f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b9f6:	05e1      	lsls	r1, r4, #23
 800b9f8:	bf48      	it	mi
 800b9fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b9fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba02:	0d1b      	lsrs	r3, r3, #20
 800ba04:	051b      	lsls	r3, r3, #20
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1bb      	bne.n	800b982 <_strtod_l+0x72>
 800ba0a:	f000 fe69 	bl	800c6e0 <__errno>
 800ba0e:	2322      	movs	r3, #34	@ 0x22
 800ba10:	6003      	str	r3, [r0, #0]
 800ba12:	e7b6      	b.n	800b982 <_strtod_l+0x72>
 800ba14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ba18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ba1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ba20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ba24:	e7e7      	b.n	800b9f6 <_strtod_l+0xe6>
 800ba26:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800bba8 <_strtod_l+0x298>
 800ba2a:	e7e4      	b.n	800b9f6 <_strtod_l+0xe6>
 800ba2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ba30:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ba34:	e7df      	b.n	800b9f6 <_strtod_l+0xe6>
 800ba36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba3c:	785b      	ldrb	r3, [r3, #1]
 800ba3e:	2b30      	cmp	r3, #48	@ 0x30
 800ba40:	d0f9      	beq.n	800ba36 <_strtod_l+0x126>
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d09d      	beq.n	800b982 <_strtod_l+0x72>
 800ba46:	2301      	movs	r3, #1
 800ba48:	2700      	movs	r7, #0
 800ba4a:	9308      	str	r3, [sp, #32]
 800ba4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba4e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba50:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ba52:	46b9      	mov	r9, r7
 800ba54:	220a      	movs	r2, #10
 800ba56:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ba58:	7805      	ldrb	r5, [r0, #0]
 800ba5a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ba5e:	b2d9      	uxtb	r1, r3
 800ba60:	2909      	cmp	r1, #9
 800ba62:	d928      	bls.n	800bab6 <_strtod_l+0x1a6>
 800ba64:	494f      	ldr	r1, [pc, #316]	@ (800bba4 <_strtod_l+0x294>)
 800ba66:	2201      	movs	r2, #1
 800ba68:	f000 fdde 	bl	800c628 <strncmp>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d032      	beq.n	800bad6 <_strtod_l+0x1c6>
 800ba70:	2000      	movs	r0, #0
 800ba72:	462a      	mov	r2, r5
 800ba74:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba76:	464d      	mov	r5, r9
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2a65      	cmp	r2, #101	@ 0x65
 800ba7c:	d001      	beq.n	800ba82 <_strtod_l+0x172>
 800ba7e:	2a45      	cmp	r2, #69	@ 0x45
 800ba80:	d114      	bne.n	800baac <_strtod_l+0x19c>
 800ba82:	b91d      	cbnz	r5, 800ba8c <_strtod_l+0x17c>
 800ba84:	9a08      	ldr	r2, [sp, #32]
 800ba86:	4302      	orrs	r2, r0
 800ba88:	d096      	beq.n	800b9b8 <_strtod_l+0xa8>
 800ba8a:	2500      	movs	r5, #0
 800ba8c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ba8e:	1c62      	adds	r2, r4, #1
 800ba90:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba92:	7862      	ldrb	r2, [r4, #1]
 800ba94:	2a2b      	cmp	r2, #43	@ 0x2b
 800ba96:	d07a      	beq.n	800bb8e <_strtod_l+0x27e>
 800ba98:	2a2d      	cmp	r2, #45	@ 0x2d
 800ba9a:	d07e      	beq.n	800bb9a <_strtod_l+0x28a>
 800ba9c:	f04f 0c00 	mov.w	ip, #0
 800baa0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800baa4:	2909      	cmp	r1, #9
 800baa6:	f240 8085 	bls.w	800bbb4 <_strtod_l+0x2a4>
 800baaa:	9419      	str	r4, [sp, #100]	@ 0x64
 800baac:	f04f 0800 	mov.w	r8, #0
 800bab0:	e0a5      	b.n	800bbfe <_strtod_l+0x2ee>
 800bab2:	2300      	movs	r3, #0
 800bab4:	e7c8      	b.n	800ba48 <_strtod_l+0x138>
 800bab6:	f1b9 0f08 	cmp.w	r9, #8
 800baba:	bfd8      	it	le
 800babc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800babe:	f100 0001 	add.w	r0, r0, #1
 800bac2:	bfda      	itte	le
 800bac4:	fb02 3301 	mlale	r3, r2, r1, r3
 800bac8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800baca:	fb02 3707 	mlagt	r7, r2, r7, r3
 800bace:	f109 0901 	add.w	r9, r9, #1
 800bad2:	9019      	str	r0, [sp, #100]	@ 0x64
 800bad4:	e7bf      	b.n	800ba56 <_strtod_l+0x146>
 800bad6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bad8:	1c5a      	adds	r2, r3, #1
 800bada:	9219      	str	r2, [sp, #100]	@ 0x64
 800badc:	785a      	ldrb	r2, [r3, #1]
 800bade:	f1b9 0f00 	cmp.w	r9, #0
 800bae2:	d03b      	beq.n	800bb5c <_strtod_l+0x24c>
 800bae4:	900a      	str	r0, [sp, #40]	@ 0x28
 800bae6:	464d      	mov	r5, r9
 800bae8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800baec:	2b09      	cmp	r3, #9
 800baee:	d912      	bls.n	800bb16 <_strtod_l+0x206>
 800baf0:	2301      	movs	r3, #1
 800baf2:	e7c2      	b.n	800ba7a <_strtod_l+0x16a>
 800baf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baf6:	1c5a      	adds	r2, r3, #1
 800baf8:	9219      	str	r2, [sp, #100]	@ 0x64
 800bafa:	785a      	ldrb	r2, [r3, #1]
 800bafc:	3001      	adds	r0, #1
 800bafe:	2a30      	cmp	r2, #48	@ 0x30
 800bb00:	d0f8      	beq.n	800baf4 <_strtod_l+0x1e4>
 800bb02:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bb06:	2b08      	cmp	r3, #8
 800bb08:	f200 84d2 	bhi.w	800c4b0 <_strtod_l+0xba0>
 800bb0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb0e:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb10:	2000      	movs	r0, #0
 800bb12:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb14:	4605      	mov	r5, r0
 800bb16:	3a30      	subs	r2, #48	@ 0x30
 800bb18:	f100 0301 	add.w	r3, r0, #1
 800bb1c:	d018      	beq.n	800bb50 <_strtod_l+0x240>
 800bb1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb20:	4419      	add	r1, r3
 800bb22:	910a      	str	r1, [sp, #40]	@ 0x28
 800bb24:	462e      	mov	r6, r5
 800bb26:	f04f 0e0a 	mov.w	lr, #10
 800bb2a:	1c71      	adds	r1, r6, #1
 800bb2c:	eba1 0c05 	sub.w	ip, r1, r5
 800bb30:	4563      	cmp	r3, ip
 800bb32:	dc15      	bgt.n	800bb60 <_strtod_l+0x250>
 800bb34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800bb38:	182b      	adds	r3, r5, r0
 800bb3a:	2b08      	cmp	r3, #8
 800bb3c:	f105 0501 	add.w	r5, r5, #1
 800bb40:	4405      	add	r5, r0
 800bb42:	dc1a      	bgt.n	800bb7a <_strtod_l+0x26a>
 800bb44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb46:	230a      	movs	r3, #10
 800bb48:	fb03 2301 	mla	r3, r3, r1, r2
 800bb4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb4e:	2300      	movs	r3, #0
 800bb50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb52:	1c51      	adds	r1, r2, #1
 800bb54:	9119      	str	r1, [sp, #100]	@ 0x64
 800bb56:	7852      	ldrb	r2, [r2, #1]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	e7c5      	b.n	800bae8 <_strtod_l+0x1d8>
 800bb5c:	4648      	mov	r0, r9
 800bb5e:	e7ce      	b.n	800bafe <_strtod_l+0x1ee>
 800bb60:	2e08      	cmp	r6, #8
 800bb62:	dc05      	bgt.n	800bb70 <_strtod_l+0x260>
 800bb64:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800bb66:	fb0e f606 	mul.w	r6, lr, r6
 800bb6a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800bb6c:	460e      	mov	r6, r1
 800bb6e:	e7dc      	b.n	800bb2a <_strtod_l+0x21a>
 800bb70:	2910      	cmp	r1, #16
 800bb72:	bfd8      	it	le
 800bb74:	fb0e f707 	mulle.w	r7, lr, r7
 800bb78:	e7f8      	b.n	800bb6c <_strtod_l+0x25c>
 800bb7a:	2b0f      	cmp	r3, #15
 800bb7c:	bfdc      	itt	le
 800bb7e:	230a      	movle	r3, #10
 800bb80:	fb03 2707 	mlale	r7, r3, r7, r2
 800bb84:	e7e3      	b.n	800bb4e <_strtod_l+0x23e>
 800bb86:	2300      	movs	r3, #0
 800bb88:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e77a      	b.n	800ba84 <_strtod_l+0x174>
 800bb8e:	f04f 0c00 	mov.w	ip, #0
 800bb92:	1ca2      	adds	r2, r4, #2
 800bb94:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb96:	78a2      	ldrb	r2, [r4, #2]
 800bb98:	e782      	b.n	800baa0 <_strtod_l+0x190>
 800bb9a:	f04f 0c01 	mov.w	ip, #1
 800bb9e:	e7f8      	b.n	800bb92 <_strtod_l+0x282>
 800bba0:	0800ff1c 	.word	0x0800ff1c
 800bba4:	0800fd4f 	.word	0x0800fd4f
 800bba8:	7ff00000 	.word	0x7ff00000
 800bbac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bbae:	1c51      	adds	r1, r2, #1
 800bbb0:	9119      	str	r1, [sp, #100]	@ 0x64
 800bbb2:	7852      	ldrb	r2, [r2, #1]
 800bbb4:	2a30      	cmp	r2, #48	@ 0x30
 800bbb6:	d0f9      	beq.n	800bbac <_strtod_l+0x29c>
 800bbb8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bbbc:	2908      	cmp	r1, #8
 800bbbe:	f63f af75 	bhi.w	800baac <_strtod_l+0x19c>
 800bbc2:	3a30      	subs	r2, #48	@ 0x30
 800bbc4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbc6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bbc8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bbca:	f04f 080a 	mov.w	r8, #10
 800bbce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bbd0:	1c56      	adds	r6, r2, #1
 800bbd2:	9619      	str	r6, [sp, #100]	@ 0x64
 800bbd4:	7852      	ldrb	r2, [r2, #1]
 800bbd6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bbda:	f1be 0f09 	cmp.w	lr, #9
 800bbde:	d939      	bls.n	800bc54 <_strtod_l+0x344>
 800bbe0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bbe2:	1a76      	subs	r6, r6, r1
 800bbe4:	2e08      	cmp	r6, #8
 800bbe6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bbea:	dc03      	bgt.n	800bbf4 <_strtod_l+0x2e4>
 800bbec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbee:	4588      	cmp	r8, r1
 800bbf0:	bfa8      	it	ge
 800bbf2:	4688      	movge	r8, r1
 800bbf4:	f1bc 0f00 	cmp.w	ip, #0
 800bbf8:	d001      	beq.n	800bbfe <_strtod_l+0x2ee>
 800bbfa:	f1c8 0800 	rsb	r8, r8, #0
 800bbfe:	2d00      	cmp	r5, #0
 800bc00:	d14e      	bne.n	800bca0 <_strtod_l+0x390>
 800bc02:	9908      	ldr	r1, [sp, #32]
 800bc04:	4308      	orrs	r0, r1
 800bc06:	f47f aebc 	bne.w	800b982 <_strtod_l+0x72>
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f47f aed4 	bne.w	800b9b8 <_strtod_l+0xa8>
 800bc10:	2a69      	cmp	r2, #105	@ 0x69
 800bc12:	d028      	beq.n	800bc66 <_strtod_l+0x356>
 800bc14:	dc25      	bgt.n	800bc62 <_strtod_l+0x352>
 800bc16:	2a49      	cmp	r2, #73	@ 0x49
 800bc18:	d025      	beq.n	800bc66 <_strtod_l+0x356>
 800bc1a:	2a4e      	cmp	r2, #78	@ 0x4e
 800bc1c:	f47f aecc 	bne.w	800b9b8 <_strtod_l+0xa8>
 800bc20:	499a      	ldr	r1, [pc, #616]	@ (800be8c <_strtod_l+0x57c>)
 800bc22:	a819      	add	r0, sp, #100	@ 0x64
 800bc24:	f001 fee8 	bl	800d9f8 <__match>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	f43f aec5 	beq.w	800b9b8 <_strtod_l+0xa8>
 800bc2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	2b28      	cmp	r3, #40	@ 0x28
 800bc34:	d12e      	bne.n	800bc94 <_strtod_l+0x384>
 800bc36:	4996      	ldr	r1, [pc, #600]	@ (800be90 <_strtod_l+0x580>)
 800bc38:	aa1c      	add	r2, sp, #112	@ 0x70
 800bc3a:	a819      	add	r0, sp, #100	@ 0x64
 800bc3c:	f001 fef0 	bl	800da20 <__hexnan>
 800bc40:	2805      	cmp	r0, #5
 800bc42:	d127      	bne.n	800bc94 <_strtod_l+0x384>
 800bc44:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bc46:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bc4a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bc4e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bc52:	e696      	b.n	800b982 <_strtod_l+0x72>
 800bc54:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc56:	fb08 2101 	mla	r1, r8, r1, r2
 800bc5a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bc5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc60:	e7b5      	b.n	800bbce <_strtod_l+0x2be>
 800bc62:	2a6e      	cmp	r2, #110	@ 0x6e
 800bc64:	e7da      	b.n	800bc1c <_strtod_l+0x30c>
 800bc66:	498b      	ldr	r1, [pc, #556]	@ (800be94 <_strtod_l+0x584>)
 800bc68:	a819      	add	r0, sp, #100	@ 0x64
 800bc6a:	f001 fec5 	bl	800d9f8 <__match>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	f43f aea2 	beq.w	800b9b8 <_strtod_l+0xa8>
 800bc74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc76:	4988      	ldr	r1, [pc, #544]	@ (800be98 <_strtod_l+0x588>)
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	a819      	add	r0, sp, #100	@ 0x64
 800bc7c:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc7e:	f001 febb 	bl	800d9f8 <__match>
 800bc82:	b910      	cbnz	r0, 800bc8a <_strtod_l+0x37a>
 800bc84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc86:	3301      	adds	r3, #1
 800bc88:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc8a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800bea8 <_strtod_l+0x598>
 800bc8e:	f04f 0a00 	mov.w	sl, #0
 800bc92:	e676      	b.n	800b982 <_strtod_l+0x72>
 800bc94:	4881      	ldr	r0, [pc, #516]	@ (800be9c <_strtod_l+0x58c>)
 800bc96:	f000 fd73 	bl	800c780 <nan>
 800bc9a:	ec5b ab10 	vmov	sl, fp, d0
 800bc9e:	e670      	b.n	800b982 <_strtod_l+0x72>
 800bca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bca2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800bca4:	eba8 0303 	sub.w	r3, r8, r3
 800bca8:	f1b9 0f00 	cmp.w	r9, #0
 800bcac:	bf08      	it	eq
 800bcae:	46a9      	moveq	r9, r5
 800bcb0:	2d10      	cmp	r5, #16
 800bcb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcb4:	462c      	mov	r4, r5
 800bcb6:	bfa8      	it	ge
 800bcb8:	2410      	movge	r4, #16
 800bcba:	f7f4 fc53 	bl	8000564 <__aeabi_ui2d>
 800bcbe:	2d09      	cmp	r5, #9
 800bcc0:	4682      	mov	sl, r0
 800bcc2:	468b      	mov	fp, r1
 800bcc4:	dc13      	bgt.n	800bcee <_strtod_l+0x3de>
 800bcc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f43f ae5a 	beq.w	800b982 <_strtod_l+0x72>
 800bcce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcd0:	dd78      	ble.n	800bdc4 <_strtod_l+0x4b4>
 800bcd2:	2b16      	cmp	r3, #22
 800bcd4:	dc5f      	bgt.n	800bd96 <_strtod_l+0x486>
 800bcd6:	4972      	ldr	r1, [pc, #456]	@ (800bea0 <_strtod_l+0x590>)
 800bcd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bcdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bce0:	4652      	mov	r2, sl
 800bce2:	465b      	mov	r3, fp
 800bce4:	f7f4 fcb8 	bl	8000658 <__aeabi_dmul>
 800bce8:	4682      	mov	sl, r0
 800bcea:	468b      	mov	fp, r1
 800bcec:	e649      	b.n	800b982 <_strtod_l+0x72>
 800bcee:	4b6c      	ldr	r3, [pc, #432]	@ (800bea0 <_strtod_l+0x590>)
 800bcf0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bcf4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bcf8:	f7f4 fcae 	bl	8000658 <__aeabi_dmul>
 800bcfc:	4682      	mov	sl, r0
 800bcfe:	4638      	mov	r0, r7
 800bd00:	468b      	mov	fp, r1
 800bd02:	f7f4 fc2f 	bl	8000564 <__aeabi_ui2d>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4650      	mov	r0, sl
 800bd0c:	4659      	mov	r1, fp
 800bd0e:	f7f4 faed 	bl	80002ec <__adddf3>
 800bd12:	2d0f      	cmp	r5, #15
 800bd14:	4682      	mov	sl, r0
 800bd16:	468b      	mov	fp, r1
 800bd18:	ddd5      	ble.n	800bcc6 <_strtod_l+0x3b6>
 800bd1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd1c:	1b2c      	subs	r4, r5, r4
 800bd1e:	441c      	add	r4, r3
 800bd20:	2c00      	cmp	r4, #0
 800bd22:	f340 8093 	ble.w	800be4c <_strtod_l+0x53c>
 800bd26:	f014 030f 	ands.w	r3, r4, #15
 800bd2a:	d00a      	beq.n	800bd42 <_strtod_l+0x432>
 800bd2c:	495c      	ldr	r1, [pc, #368]	@ (800bea0 <_strtod_l+0x590>)
 800bd2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd32:	4652      	mov	r2, sl
 800bd34:	465b      	mov	r3, fp
 800bd36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd3a:	f7f4 fc8d 	bl	8000658 <__aeabi_dmul>
 800bd3e:	4682      	mov	sl, r0
 800bd40:	468b      	mov	fp, r1
 800bd42:	f034 040f 	bics.w	r4, r4, #15
 800bd46:	d073      	beq.n	800be30 <_strtod_l+0x520>
 800bd48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bd4c:	dd49      	ble.n	800bde2 <_strtod_l+0x4d2>
 800bd4e:	2400      	movs	r4, #0
 800bd50:	46a0      	mov	r8, r4
 800bd52:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bd54:	46a1      	mov	r9, r4
 800bd56:	9a05      	ldr	r2, [sp, #20]
 800bd58:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800bea8 <_strtod_l+0x598>
 800bd5c:	2322      	movs	r3, #34	@ 0x22
 800bd5e:	6013      	str	r3, [r2, #0]
 800bd60:	f04f 0a00 	mov.w	sl, #0
 800bd64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f43f ae0b 	beq.w	800b982 <_strtod_l+0x72>
 800bd6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd6e:	9805      	ldr	r0, [sp, #20]
 800bd70:	f002 fd54 	bl	800e81c <_Bfree>
 800bd74:	9805      	ldr	r0, [sp, #20]
 800bd76:	4649      	mov	r1, r9
 800bd78:	f002 fd50 	bl	800e81c <_Bfree>
 800bd7c:	9805      	ldr	r0, [sp, #20]
 800bd7e:	4641      	mov	r1, r8
 800bd80:	f002 fd4c 	bl	800e81c <_Bfree>
 800bd84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd86:	9805      	ldr	r0, [sp, #20]
 800bd88:	f002 fd48 	bl	800e81c <_Bfree>
 800bd8c:	9805      	ldr	r0, [sp, #20]
 800bd8e:	4621      	mov	r1, r4
 800bd90:	f002 fd44 	bl	800e81c <_Bfree>
 800bd94:	e5f5      	b.n	800b982 <_strtod_l+0x72>
 800bd96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	dbbc      	blt.n	800bd1a <_strtod_l+0x40a>
 800bda0:	4c3f      	ldr	r4, [pc, #252]	@ (800bea0 <_strtod_l+0x590>)
 800bda2:	f1c5 050f 	rsb	r5, r5, #15
 800bda6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bdaa:	4652      	mov	r2, sl
 800bdac:	465b      	mov	r3, fp
 800bdae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdb2:	f7f4 fc51 	bl	8000658 <__aeabi_dmul>
 800bdb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb8:	1b5d      	subs	r5, r3, r5
 800bdba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bdbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bdc2:	e78f      	b.n	800bce4 <_strtod_l+0x3d4>
 800bdc4:	3316      	adds	r3, #22
 800bdc6:	dba8      	blt.n	800bd1a <_strtod_l+0x40a>
 800bdc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdca:	eba3 0808 	sub.w	r8, r3, r8
 800bdce:	4b34      	ldr	r3, [pc, #208]	@ (800bea0 <_strtod_l+0x590>)
 800bdd0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bdd4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bdd8:	4650      	mov	r0, sl
 800bdda:	4659      	mov	r1, fp
 800bddc:	f7f4 fd66 	bl	80008ac <__aeabi_ddiv>
 800bde0:	e782      	b.n	800bce8 <_strtod_l+0x3d8>
 800bde2:	2300      	movs	r3, #0
 800bde4:	4f2f      	ldr	r7, [pc, #188]	@ (800bea4 <_strtod_l+0x594>)
 800bde6:	1124      	asrs	r4, r4, #4
 800bde8:	4650      	mov	r0, sl
 800bdea:	4659      	mov	r1, fp
 800bdec:	461e      	mov	r6, r3
 800bdee:	2c01      	cmp	r4, #1
 800bdf0:	dc21      	bgt.n	800be36 <_strtod_l+0x526>
 800bdf2:	b10b      	cbz	r3, 800bdf8 <_strtod_l+0x4e8>
 800bdf4:	4682      	mov	sl, r0
 800bdf6:	468b      	mov	fp, r1
 800bdf8:	492a      	ldr	r1, [pc, #168]	@ (800bea4 <_strtod_l+0x594>)
 800bdfa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bdfe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800be02:	4652      	mov	r2, sl
 800be04:	465b      	mov	r3, fp
 800be06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be0a:	f7f4 fc25 	bl	8000658 <__aeabi_dmul>
 800be0e:	4b26      	ldr	r3, [pc, #152]	@ (800bea8 <_strtod_l+0x598>)
 800be10:	460a      	mov	r2, r1
 800be12:	400b      	ands	r3, r1
 800be14:	4925      	ldr	r1, [pc, #148]	@ (800beac <_strtod_l+0x59c>)
 800be16:	428b      	cmp	r3, r1
 800be18:	4682      	mov	sl, r0
 800be1a:	d898      	bhi.n	800bd4e <_strtod_l+0x43e>
 800be1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800be20:	428b      	cmp	r3, r1
 800be22:	bf86      	itte	hi
 800be24:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800beb0 <_strtod_l+0x5a0>
 800be28:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800be2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800be30:	2300      	movs	r3, #0
 800be32:	9308      	str	r3, [sp, #32]
 800be34:	e076      	b.n	800bf24 <_strtod_l+0x614>
 800be36:	07e2      	lsls	r2, r4, #31
 800be38:	d504      	bpl.n	800be44 <_strtod_l+0x534>
 800be3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be3e:	f7f4 fc0b 	bl	8000658 <__aeabi_dmul>
 800be42:	2301      	movs	r3, #1
 800be44:	3601      	adds	r6, #1
 800be46:	1064      	asrs	r4, r4, #1
 800be48:	3708      	adds	r7, #8
 800be4a:	e7d0      	b.n	800bdee <_strtod_l+0x4de>
 800be4c:	d0f0      	beq.n	800be30 <_strtod_l+0x520>
 800be4e:	4264      	negs	r4, r4
 800be50:	f014 020f 	ands.w	r2, r4, #15
 800be54:	d00a      	beq.n	800be6c <_strtod_l+0x55c>
 800be56:	4b12      	ldr	r3, [pc, #72]	@ (800bea0 <_strtod_l+0x590>)
 800be58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be5c:	4650      	mov	r0, sl
 800be5e:	4659      	mov	r1, fp
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	f7f4 fd22 	bl	80008ac <__aeabi_ddiv>
 800be68:	4682      	mov	sl, r0
 800be6a:	468b      	mov	fp, r1
 800be6c:	1124      	asrs	r4, r4, #4
 800be6e:	d0df      	beq.n	800be30 <_strtod_l+0x520>
 800be70:	2c1f      	cmp	r4, #31
 800be72:	dd1f      	ble.n	800beb4 <_strtod_l+0x5a4>
 800be74:	2400      	movs	r4, #0
 800be76:	46a0      	mov	r8, r4
 800be78:	940b      	str	r4, [sp, #44]	@ 0x2c
 800be7a:	46a1      	mov	r9, r4
 800be7c:	9a05      	ldr	r2, [sp, #20]
 800be7e:	2322      	movs	r3, #34	@ 0x22
 800be80:	f04f 0a00 	mov.w	sl, #0
 800be84:	f04f 0b00 	mov.w	fp, #0
 800be88:	6013      	str	r3, [r2, #0]
 800be8a:	e76b      	b.n	800bd64 <_strtod_l+0x454>
 800be8c:	0800fd25 	.word	0x0800fd25
 800be90:	0800ff08 	.word	0x0800ff08
 800be94:	0800fd1d 	.word	0x0800fd1d
 800be98:	0800fd5c 	.word	0x0800fd5c
 800be9c:	0800ff06 	.word	0x0800ff06
 800bea0:	08010090 	.word	0x08010090
 800bea4:	08010068 	.word	0x08010068
 800bea8:	7ff00000 	.word	0x7ff00000
 800beac:	7ca00000 	.word	0x7ca00000
 800beb0:	7fefffff 	.word	0x7fefffff
 800beb4:	f014 0310 	ands.w	r3, r4, #16
 800beb8:	bf18      	it	ne
 800beba:	236a      	movne	r3, #106	@ 0x6a
 800bebc:	4ea9      	ldr	r6, [pc, #676]	@ (800c164 <_strtod_l+0x854>)
 800bebe:	9308      	str	r3, [sp, #32]
 800bec0:	4650      	mov	r0, sl
 800bec2:	4659      	mov	r1, fp
 800bec4:	2300      	movs	r3, #0
 800bec6:	07e7      	lsls	r7, r4, #31
 800bec8:	d504      	bpl.n	800bed4 <_strtod_l+0x5c4>
 800beca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bece:	f7f4 fbc3 	bl	8000658 <__aeabi_dmul>
 800bed2:	2301      	movs	r3, #1
 800bed4:	1064      	asrs	r4, r4, #1
 800bed6:	f106 0608 	add.w	r6, r6, #8
 800beda:	d1f4      	bne.n	800bec6 <_strtod_l+0x5b6>
 800bedc:	b10b      	cbz	r3, 800bee2 <_strtod_l+0x5d2>
 800bede:	4682      	mov	sl, r0
 800bee0:	468b      	mov	fp, r1
 800bee2:	9b08      	ldr	r3, [sp, #32]
 800bee4:	b1b3      	cbz	r3, 800bf14 <_strtod_l+0x604>
 800bee6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800beea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800beee:	2b00      	cmp	r3, #0
 800bef0:	4659      	mov	r1, fp
 800bef2:	dd0f      	ble.n	800bf14 <_strtod_l+0x604>
 800bef4:	2b1f      	cmp	r3, #31
 800bef6:	dd56      	ble.n	800bfa6 <_strtod_l+0x696>
 800bef8:	2b34      	cmp	r3, #52	@ 0x34
 800befa:	bfde      	ittt	le
 800befc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800bf00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bf04:	4093      	lslle	r3, r2
 800bf06:	f04f 0a00 	mov.w	sl, #0
 800bf0a:	bfcc      	ite	gt
 800bf0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bf10:	ea03 0b01 	andle.w	fp, r3, r1
 800bf14:	2200      	movs	r2, #0
 800bf16:	2300      	movs	r3, #0
 800bf18:	4650      	mov	r0, sl
 800bf1a:	4659      	mov	r1, fp
 800bf1c:	f7f4 fe04 	bl	8000b28 <__aeabi_dcmpeq>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d1a7      	bne.n	800be74 <_strtod_l+0x564>
 800bf24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bf2a:	9805      	ldr	r0, [sp, #20]
 800bf2c:	462b      	mov	r3, r5
 800bf2e:	464a      	mov	r2, r9
 800bf30:	f002 fcdc 	bl	800e8ec <__s2b>
 800bf34:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f43f af09 	beq.w	800bd4e <_strtod_l+0x43e>
 800bf3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf40:	2a00      	cmp	r2, #0
 800bf42:	eba3 0308 	sub.w	r3, r3, r8
 800bf46:	bfa8      	it	ge
 800bf48:	2300      	movge	r3, #0
 800bf4a:	9312      	str	r3, [sp, #72]	@ 0x48
 800bf4c:	2400      	movs	r4, #0
 800bf4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bf52:	9316      	str	r3, [sp, #88]	@ 0x58
 800bf54:	46a0      	mov	r8, r4
 800bf56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf58:	9805      	ldr	r0, [sp, #20]
 800bf5a:	6859      	ldr	r1, [r3, #4]
 800bf5c:	f002 fc1e 	bl	800e79c <_Balloc>
 800bf60:	4681      	mov	r9, r0
 800bf62:	2800      	cmp	r0, #0
 800bf64:	f43f aef7 	beq.w	800bd56 <_strtod_l+0x446>
 800bf68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf6a:	691a      	ldr	r2, [r3, #16]
 800bf6c:	3202      	adds	r2, #2
 800bf6e:	f103 010c 	add.w	r1, r3, #12
 800bf72:	0092      	lsls	r2, r2, #2
 800bf74:	300c      	adds	r0, #12
 800bf76:	f000 fbf5 	bl	800c764 <memcpy>
 800bf7a:	ec4b ab10 	vmov	d0, sl, fp
 800bf7e:	9805      	ldr	r0, [sp, #20]
 800bf80:	aa1c      	add	r2, sp, #112	@ 0x70
 800bf82:	a91b      	add	r1, sp, #108	@ 0x6c
 800bf84:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bf88:	f002 ffe4 	bl	800ef54 <__d2b>
 800bf8c:	901a      	str	r0, [sp, #104]	@ 0x68
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	f43f aee1 	beq.w	800bd56 <_strtod_l+0x446>
 800bf94:	9805      	ldr	r0, [sp, #20]
 800bf96:	2101      	movs	r1, #1
 800bf98:	f002 fd3e 	bl	800ea18 <__i2b>
 800bf9c:	4680      	mov	r8, r0
 800bf9e:	b948      	cbnz	r0, 800bfb4 <_strtod_l+0x6a4>
 800bfa0:	f04f 0800 	mov.w	r8, #0
 800bfa4:	e6d7      	b.n	800bd56 <_strtod_l+0x446>
 800bfa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfaa:	fa02 f303 	lsl.w	r3, r2, r3
 800bfae:	ea03 0a0a 	and.w	sl, r3, sl
 800bfb2:	e7af      	b.n	800bf14 <_strtod_l+0x604>
 800bfb4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bfb6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bfb8:	2d00      	cmp	r5, #0
 800bfba:	bfab      	itete	ge
 800bfbc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bfbe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bfc0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bfc2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bfc4:	bfac      	ite	ge
 800bfc6:	18ef      	addge	r7, r5, r3
 800bfc8:	1b5e      	sublt	r6, r3, r5
 800bfca:	9b08      	ldr	r3, [sp, #32]
 800bfcc:	1aed      	subs	r5, r5, r3
 800bfce:	4415      	add	r5, r2
 800bfd0:	4b65      	ldr	r3, [pc, #404]	@ (800c168 <_strtod_l+0x858>)
 800bfd2:	3d01      	subs	r5, #1
 800bfd4:	429d      	cmp	r5, r3
 800bfd6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bfda:	da50      	bge.n	800c07e <_strtod_l+0x76e>
 800bfdc:	1b5b      	subs	r3, r3, r5
 800bfde:	2b1f      	cmp	r3, #31
 800bfe0:	eba2 0203 	sub.w	r2, r2, r3
 800bfe4:	f04f 0101 	mov.w	r1, #1
 800bfe8:	dc3d      	bgt.n	800c066 <_strtod_l+0x756>
 800bfea:	fa01 f303 	lsl.w	r3, r1, r3
 800bfee:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bff0:	2300      	movs	r3, #0
 800bff2:	9310      	str	r3, [sp, #64]	@ 0x40
 800bff4:	18bd      	adds	r5, r7, r2
 800bff6:	9b08      	ldr	r3, [sp, #32]
 800bff8:	42af      	cmp	r7, r5
 800bffa:	4416      	add	r6, r2
 800bffc:	441e      	add	r6, r3
 800bffe:	463b      	mov	r3, r7
 800c000:	bfa8      	it	ge
 800c002:	462b      	movge	r3, r5
 800c004:	42b3      	cmp	r3, r6
 800c006:	bfa8      	it	ge
 800c008:	4633      	movge	r3, r6
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	bfc2      	ittt	gt
 800c00e:	1aed      	subgt	r5, r5, r3
 800c010:	1af6      	subgt	r6, r6, r3
 800c012:	1aff      	subgt	r7, r7, r3
 800c014:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c016:	2b00      	cmp	r3, #0
 800c018:	dd16      	ble.n	800c048 <_strtod_l+0x738>
 800c01a:	4641      	mov	r1, r8
 800c01c:	9805      	ldr	r0, [sp, #20]
 800c01e:	461a      	mov	r2, r3
 800c020:	f002 fdb2 	bl	800eb88 <__pow5mult>
 800c024:	4680      	mov	r8, r0
 800c026:	2800      	cmp	r0, #0
 800c028:	d0ba      	beq.n	800bfa0 <_strtod_l+0x690>
 800c02a:	4601      	mov	r1, r0
 800c02c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c02e:	9805      	ldr	r0, [sp, #20]
 800c030:	f002 fd08 	bl	800ea44 <__multiply>
 800c034:	900a      	str	r0, [sp, #40]	@ 0x28
 800c036:	2800      	cmp	r0, #0
 800c038:	f43f ae8d 	beq.w	800bd56 <_strtod_l+0x446>
 800c03c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c03e:	9805      	ldr	r0, [sp, #20]
 800c040:	f002 fbec 	bl	800e81c <_Bfree>
 800c044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c046:	931a      	str	r3, [sp, #104]	@ 0x68
 800c048:	2d00      	cmp	r5, #0
 800c04a:	dc1d      	bgt.n	800c088 <_strtod_l+0x778>
 800c04c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c04e:	2b00      	cmp	r3, #0
 800c050:	dd23      	ble.n	800c09a <_strtod_l+0x78a>
 800c052:	4649      	mov	r1, r9
 800c054:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c056:	9805      	ldr	r0, [sp, #20]
 800c058:	f002 fd96 	bl	800eb88 <__pow5mult>
 800c05c:	4681      	mov	r9, r0
 800c05e:	b9e0      	cbnz	r0, 800c09a <_strtod_l+0x78a>
 800c060:	f04f 0900 	mov.w	r9, #0
 800c064:	e677      	b.n	800bd56 <_strtod_l+0x446>
 800c066:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c06a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c06e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c072:	35e2      	adds	r5, #226	@ 0xe2
 800c074:	fa01 f305 	lsl.w	r3, r1, r5
 800c078:	9310      	str	r3, [sp, #64]	@ 0x40
 800c07a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c07c:	e7ba      	b.n	800bff4 <_strtod_l+0x6e4>
 800c07e:	2300      	movs	r3, #0
 800c080:	9310      	str	r3, [sp, #64]	@ 0x40
 800c082:	2301      	movs	r3, #1
 800c084:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c086:	e7b5      	b.n	800bff4 <_strtod_l+0x6e4>
 800c088:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c08a:	9805      	ldr	r0, [sp, #20]
 800c08c:	462a      	mov	r2, r5
 800c08e:	f002 fdd5 	bl	800ec3c <__lshift>
 800c092:	901a      	str	r0, [sp, #104]	@ 0x68
 800c094:	2800      	cmp	r0, #0
 800c096:	d1d9      	bne.n	800c04c <_strtod_l+0x73c>
 800c098:	e65d      	b.n	800bd56 <_strtod_l+0x446>
 800c09a:	2e00      	cmp	r6, #0
 800c09c:	dd07      	ble.n	800c0ae <_strtod_l+0x79e>
 800c09e:	4649      	mov	r1, r9
 800c0a0:	9805      	ldr	r0, [sp, #20]
 800c0a2:	4632      	mov	r2, r6
 800c0a4:	f002 fdca 	bl	800ec3c <__lshift>
 800c0a8:	4681      	mov	r9, r0
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d0d8      	beq.n	800c060 <_strtod_l+0x750>
 800c0ae:	2f00      	cmp	r7, #0
 800c0b0:	dd08      	ble.n	800c0c4 <_strtod_l+0x7b4>
 800c0b2:	4641      	mov	r1, r8
 800c0b4:	9805      	ldr	r0, [sp, #20]
 800c0b6:	463a      	mov	r2, r7
 800c0b8:	f002 fdc0 	bl	800ec3c <__lshift>
 800c0bc:	4680      	mov	r8, r0
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f43f ae49 	beq.w	800bd56 <_strtod_l+0x446>
 800c0c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c0c6:	9805      	ldr	r0, [sp, #20]
 800c0c8:	464a      	mov	r2, r9
 800c0ca:	f002 fe3f 	bl	800ed4c <__mdiff>
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	f43f ae40 	beq.w	800bd56 <_strtod_l+0x446>
 800c0d6:	68c3      	ldr	r3, [r0, #12]
 800c0d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0da:	2300      	movs	r3, #0
 800c0dc:	60c3      	str	r3, [r0, #12]
 800c0de:	4641      	mov	r1, r8
 800c0e0:	f002 fe18 	bl	800ed14 <__mcmp>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	da45      	bge.n	800c174 <_strtod_l+0x864>
 800c0e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ea:	ea53 030a 	orrs.w	r3, r3, sl
 800c0ee:	d16b      	bne.n	800c1c8 <_strtod_l+0x8b8>
 800c0f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d167      	bne.n	800c1c8 <_strtod_l+0x8b8>
 800c0f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0fc:	0d1b      	lsrs	r3, r3, #20
 800c0fe:	051b      	lsls	r3, r3, #20
 800c100:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c104:	d960      	bls.n	800c1c8 <_strtod_l+0x8b8>
 800c106:	6963      	ldr	r3, [r4, #20]
 800c108:	b913      	cbnz	r3, 800c110 <_strtod_l+0x800>
 800c10a:	6923      	ldr	r3, [r4, #16]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	dd5b      	ble.n	800c1c8 <_strtod_l+0x8b8>
 800c110:	4621      	mov	r1, r4
 800c112:	2201      	movs	r2, #1
 800c114:	9805      	ldr	r0, [sp, #20]
 800c116:	f002 fd91 	bl	800ec3c <__lshift>
 800c11a:	4641      	mov	r1, r8
 800c11c:	4604      	mov	r4, r0
 800c11e:	f002 fdf9 	bl	800ed14 <__mcmp>
 800c122:	2800      	cmp	r0, #0
 800c124:	dd50      	ble.n	800c1c8 <_strtod_l+0x8b8>
 800c126:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c12a:	9a08      	ldr	r2, [sp, #32]
 800c12c:	0d1b      	lsrs	r3, r3, #20
 800c12e:	051b      	lsls	r3, r3, #20
 800c130:	2a00      	cmp	r2, #0
 800c132:	d06a      	beq.n	800c20a <_strtod_l+0x8fa>
 800c134:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c138:	d867      	bhi.n	800c20a <_strtod_l+0x8fa>
 800c13a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c13e:	f67f ae9d 	bls.w	800be7c <_strtod_l+0x56c>
 800c142:	4b0a      	ldr	r3, [pc, #40]	@ (800c16c <_strtod_l+0x85c>)
 800c144:	4650      	mov	r0, sl
 800c146:	4659      	mov	r1, fp
 800c148:	2200      	movs	r2, #0
 800c14a:	f7f4 fa85 	bl	8000658 <__aeabi_dmul>
 800c14e:	4b08      	ldr	r3, [pc, #32]	@ (800c170 <_strtod_l+0x860>)
 800c150:	400b      	ands	r3, r1
 800c152:	4682      	mov	sl, r0
 800c154:	468b      	mov	fp, r1
 800c156:	2b00      	cmp	r3, #0
 800c158:	f47f ae08 	bne.w	800bd6c <_strtod_l+0x45c>
 800c15c:	9a05      	ldr	r2, [sp, #20]
 800c15e:	2322      	movs	r3, #34	@ 0x22
 800c160:	6013      	str	r3, [r2, #0]
 800c162:	e603      	b.n	800bd6c <_strtod_l+0x45c>
 800c164:	0800ff30 	.word	0x0800ff30
 800c168:	fffffc02 	.word	0xfffffc02
 800c16c:	39500000 	.word	0x39500000
 800c170:	7ff00000 	.word	0x7ff00000
 800c174:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c178:	d165      	bne.n	800c246 <_strtod_l+0x936>
 800c17a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c17c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c180:	b35a      	cbz	r2, 800c1da <_strtod_l+0x8ca>
 800c182:	4a9f      	ldr	r2, [pc, #636]	@ (800c400 <_strtod_l+0xaf0>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d12b      	bne.n	800c1e0 <_strtod_l+0x8d0>
 800c188:	9b08      	ldr	r3, [sp, #32]
 800c18a:	4651      	mov	r1, sl
 800c18c:	b303      	cbz	r3, 800c1d0 <_strtod_l+0x8c0>
 800c18e:	4b9d      	ldr	r3, [pc, #628]	@ (800c404 <_strtod_l+0xaf4>)
 800c190:	465a      	mov	r2, fp
 800c192:	4013      	ands	r3, r2
 800c194:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c198:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c19c:	d81b      	bhi.n	800c1d6 <_strtod_l+0x8c6>
 800c19e:	0d1b      	lsrs	r3, r3, #20
 800c1a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a8:	4299      	cmp	r1, r3
 800c1aa:	d119      	bne.n	800c1e0 <_strtod_l+0x8d0>
 800c1ac:	4b96      	ldr	r3, [pc, #600]	@ (800c408 <_strtod_l+0xaf8>)
 800c1ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d102      	bne.n	800c1ba <_strtod_l+0x8aa>
 800c1b4:	3101      	adds	r1, #1
 800c1b6:	f43f adce 	beq.w	800bd56 <_strtod_l+0x446>
 800c1ba:	4b92      	ldr	r3, [pc, #584]	@ (800c404 <_strtod_l+0xaf4>)
 800c1bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1be:	401a      	ands	r2, r3
 800c1c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c1c4:	f04f 0a00 	mov.w	sl, #0
 800c1c8:	9b08      	ldr	r3, [sp, #32]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d1b9      	bne.n	800c142 <_strtod_l+0x832>
 800c1ce:	e5cd      	b.n	800bd6c <_strtod_l+0x45c>
 800c1d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c1d4:	e7e8      	b.n	800c1a8 <_strtod_l+0x898>
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	e7e6      	b.n	800c1a8 <_strtod_l+0x898>
 800c1da:	ea53 030a 	orrs.w	r3, r3, sl
 800c1de:	d0a2      	beq.n	800c126 <_strtod_l+0x816>
 800c1e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c1e2:	b1db      	cbz	r3, 800c21c <_strtod_l+0x90c>
 800c1e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1e6:	4213      	tst	r3, r2
 800c1e8:	d0ee      	beq.n	800c1c8 <_strtod_l+0x8b8>
 800c1ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1ec:	9a08      	ldr	r2, [sp, #32]
 800c1ee:	4650      	mov	r0, sl
 800c1f0:	4659      	mov	r1, fp
 800c1f2:	b1bb      	cbz	r3, 800c224 <_strtod_l+0x914>
 800c1f4:	f7ff fb6c 	bl	800b8d0 <sulp>
 800c1f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1fc:	ec53 2b10 	vmov	r2, r3, d0
 800c200:	f7f4 f874 	bl	80002ec <__adddf3>
 800c204:	4682      	mov	sl, r0
 800c206:	468b      	mov	fp, r1
 800c208:	e7de      	b.n	800c1c8 <_strtod_l+0x8b8>
 800c20a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c20e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c212:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c216:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c21a:	e7d5      	b.n	800c1c8 <_strtod_l+0x8b8>
 800c21c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c21e:	ea13 0f0a 	tst.w	r3, sl
 800c222:	e7e1      	b.n	800c1e8 <_strtod_l+0x8d8>
 800c224:	f7ff fb54 	bl	800b8d0 <sulp>
 800c228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c22c:	ec53 2b10 	vmov	r2, r3, d0
 800c230:	f7f4 f85a 	bl	80002e8 <__aeabi_dsub>
 800c234:	2200      	movs	r2, #0
 800c236:	2300      	movs	r3, #0
 800c238:	4682      	mov	sl, r0
 800c23a:	468b      	mov	fp, r1
 800c23c:	f7f4 fc74 	bl	8000b28 <__aeabi_dcmpeq>
 800c240:	2800      	cmp	r0, #0
 800c242:	d0c1      	beq.n	800c1c8 <_strtod_l+0x8b8>
 800c244:	e61a      	b.n	800be7c <_strtod_l+0x56c>
 800c246:	4641      	mov	r1, r8
 800c248:	4620      	mov	r0, r4
 800c24a:	f002 fedb 	bl	800f004 <__ratio>
 800c24e:	ec57 6b10 	vmov	r6, r7, d0
 800c252:	2200      	movs	r2, #0
 800c254:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c258:	4630      	mov	r0, r6
 800c25a:	4639      	mov	r1, r7
 800c25c:	f7f4 fc78 	bl	8000b50 <__aeabi_dcmple>
 800c260:	2800      	cmp	r0, #0
 800c262:	d06f      	beq.n	800c344 <_strtod_l+0xa34>
 800c264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c266:	2b00      	cmp	r3, #0
 800c268:	d17a      	bne.n	800c360 <_strtod_l+0xa50>
 800c26a:	f1ba 0f00 	cmp.w	sl, #0
 800c26e:	d158      	bne.n	800c322 <_strtod_l+0xa12>
 800c270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c272:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c276:	2b00      	cmp	r3, #0
 800c278:	d15a      	bne.n	800c330 <_strtod_l+0xa20>
 800c27a:	4b64      	ldr	r3, [pc, #400]	@ (800c40c <_strtod_l+0xafc>)
 800c27c:	2200      	movs	r2, #0
 800c27e:	4630      	mov	r0, r6
 800c280:	4639      	mov	r1, r7
 800c282:	f7f4 fc5b 	bl	8000b3c <__aeabi_dcmplt>
 800c286:	2800      	cmp	r0, #0
 800c288:	d159      	bne.n	800c33e <_strtod_l+0xa2e>
 800c28a:	4630      	mov	r0, r6
 800c28c:	4639      	mov	r1, r7
 800c28e:	4b60      	ldr	r3, [pc, #384]	@ (800c410 <_strtod_l+0xb00>)
 800c290:	2200      	movs	r2, #0
 800c292:	f7f4 f9e1 	bl	8000658 <__aeabi_dmul>
 800c296:	4606      	mov	r6, r0
 800c298:	460f      	mov	r7, r1
 800c29a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c29e:	9606      	str	r6, [sp, #24]
 800c2a0:	9307      	str	r3, [sp, #28]
 800c2a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2a6:	4d57      	ldr	r5, [pc, #348]	@ (800c404 <_strtod_l+0xaf4>)
 800c2a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c2ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2ae:	401d      	ands	r5, r3
 800c2b0:	4b58      	ldr	r3, [pc, #352]	@ (800c414 <_strtod_l+0xb04>)
 800c2b2:	429d      	cmp	r5, r3
 800c2b4:	f040 80b2 	bne.w	800c41c <_strtod_l+0xb0c>
 800c2b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c2be:	ec4b ab10 	vmov	d0, sl, fp
 800c2c2:	f002 fdd7 	bl	800ee74 <__ulp>
 800c2c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2ca:	ec51 0b10 	vmov	r0, r1, d0
 800c2ce:	f7f4 f9c3 	bl	8000658 <__aeabi_dmul>
 800c2d2:	4652      	mov	r2, sl
 800c2d4:	465b      	mov	r3, fp
 800c2d6:	f7f4 f809 	bl	80002ec <__adddf3>
 800c2da:	460b      	mov	r3, r1
 800c2dc:	4949      	ldr	r1, [pc, #292]	@ (800c404 <_strtod_l+0xaf4>)
 800c2de:	4a4e      	ldr	r2, [pc, #312]	@ (800c418 <_strtod_l+0xb08>)
 800c2e0:	4019      	ands	r1, r3
 800c2e2:	4291      	cmp	r1, r2
 800c2e4:	4682      	mov	sl, r0
 800c2e6:	d942      	bls.n	800c36e <_strtod_l+0xa5e>
 800c2e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2ea:	4b47      	ldr	r3, [pc, #284]	@ (800c408 <_strtod_l+0xaf8>)
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d103      	bne.n	800c2f8 <_strtod_l+0x9e8>
 800c2f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	f43f ad2f 	beq.w	800bd56 <_strtod_l+0x446>
 800c2f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c408 <_strtod_l+0xaf8>
 800c2fc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800c300:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c302:	9805      	ldr	r0, [sp, #20]
 800c304:	f002 fa8a 	bl	800e81c <_Bfree>
 800c308:	9805      	ldr	r0, [sp, #20]
 800c30a:	4649      	mov	r1, r9
 800c30c:	f002 fa86 	bl	800e81c <_Bfree>
 800c310:	9805      	ldr	r0, [sp, #20]
 800c312:	4641      	mov	r1, r8
 800c314:	f002 fa82 	bl	800e81c <_Bfree>
 800c318:	9805      	ldr	r0, [sp, #20]
 800c31a:	4621      	mov	r1, r4
 800c31c:	f002 fa7e 	bl	800e81c <_Bfree>
 800c320:	e619      	b.n	800bf56 <_strtod_l+0x646>
 800c322:	f1ba 0f01 	cmp.w	sl, #1
 800c326:	d103      	bne.n	800c330 <_strtod_l+0xa20>
 800c328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f43f ada6 	beq.w	800be7c <_strtod_l+0x56c>
 800c330:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c3e0 <_strtod_l+0xad0>
 800c334:	4f35      	ldr	r7, [pc, #212]	@ (800c40c <_strtod_l+0xafc>)
 800c336:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c33a:	2600      	movs	r6, #0
 800c33c:	e7b1      	b.n	800c2a2 <_strtod_l+0x992>
 800c33e:	4f34      	ldr	r7, [pc, #208]	@ (800c410 <_strtod_l+0xb00>)
 800c340:	2600      	movs	r6, #0
 800c342:	e7aa      	b.n	800c29a <_strtod_l+0x98a>
 800c344:	4b32      	ldr	r3, [pc, #200]	@ (800c410 <_strtod_l+0xb00>)
 800c346:	4630      	mov	r0, r6
 800c348:	4639      	mov	r1, r7
 800c34a:	2200      	movs	r2, #0
 800c34c:	f7f4 f984 	bl	8000658 <__aeabi_dmul>
 800c350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c352:	4606      	mov	r6, r0
 800c354:	460f      	mov	r7, r1
 800c356:	2b00      	cmp	r3, #0
 800c358:	d09f      	beq.n	800c29a <_strtod_l+0x98a>
 800c35a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c35e:	e7a0      	b.n	800c2a2 <_strtod_l+0x992>
 800c360:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c3e8 <_strtod_l+0xad8>
 800c364:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c368:	ec57 6b17 	vmov	r6, r7, d7
 800c36c:	e799      	b.n	800c2a2 <_strtod_l+0x992>
 800c36e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c372:	9b08      	ldr	r3, [sp, #32]
 800c374:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1c1      	bne.n	800c300 <_strtod_l+0x9f0>
 800c37c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c380:	0d1b      	lsrs	r3, r3, #20
 800c382:	051b      	lsls	r3, r3, #20
 800c384:	429d      	cmp	r5, r3
 800c386:	d1bb      	bne.n	800c300 <_strtod_l+0x9f0>
 800c388:	4630      	mov	r0, r6
 800c38a:	4639      	mov	r1, r7
 800c38c:	f7f4 fcc4 	bl	8000d18 <__aeabi_d2lz>
 800c390:	f7f4 f934 	bl	80005fc <__aeabi_l2d>
 800c394:	4602      	mov	r2, r0
 800c396:	460b      	mov	r3, r1
 800c398:	4630      	mov	r0, r6
 800c39a:	4639      	mov	r1, r7
 800c39c:	f7f3 ffa4 	bl	80002e8 <__aeabi_dsub>
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c3a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3ae:	ea46 060a 	orr.w	r6, r6, sl
 800c3b2:	431e      	orrs	r6, r3
 800c3b4:	d06f      	beq.n	800c496 <_strtod_l+0xb86>
 800c3b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c3f0 <_strtod_l+0xae0>)
 800c3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3bc:	f7f4 fbbe 	bl	8000b3c <__aeabi_dcmplt>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	f47f acd3 	bne.w	800bd6c <_strtod_l+0x45c>
 800c3c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c3f8 <_strtod_l+0xae8>)
 800c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3d0:	f7f4 fbd2 	bl	8000b78 <__aeabi_dcmpgt>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d093      	beq.n	800c300 <_strtod_l+0x9f0>
 800c3d8:	e4c8      	b.n	800bd6c <_strtod_l+0x45c>
 800c3da:	bf00      	nop
 800c3dc:	f3af 8000 	nop.w
 800c3e0:	00000000 	.word	0x00000000
 800c3e4:	bff00000 	.word	0xbff00000
 800c3e8:	00000000 	.word	0x00000000
 800c3ec:	3ff00000 	.word	0x3ff00000
 800c3f0:	94a03595 	.word	0x94a03595
 800c3f4:	3fdfffff 	.word	0x3fdfffff
 800c3f8:	35afe535 	.word	0x35afe535
 800c3fc:	3fe00000 	.word	0x3fe00000
 800c400:	000fffff 	.word	0x000fffff
 800c404:	7ff00000 	.word	0x7ff00000
 800c408:	7fefffff 	.word	0x7fefffff
 800c40c:	3ff00000 	.word	0x3ff00000
 800c410:	3fe00000 	.word	0x3fe00000
 800c414:	7fe00000 	.word	0x7fe00000
 800c418:	7c9fffff 	.word	0x7c9fffff
 800c41c:	9b08      	ldr	r3, [sp, #32]
 800c41e:	b323      	cbz	r3, 800c46a <_strtod_l+0xb5a>
 800c420:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c424:	d821      	bhi.n	800c46a <_strtod_l+0xb5a>
 800c426:	a328      	add	r3, pc, #160	@ (adr r3, 800c4c8 <_strtod_l+0xbb8>)
 800c428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42c:	4630      	mov	r0, r6
 800c42e:	4639      	mov	r1, r7
 800c430:	f7f4 fb8e 	bl	8000b50 <__aeabi_dcmple>
 800c434:	b1a0      	cbz	r0, 800c460 <_strtod_l+0xb50>
 800c436:	4639      	mov	r1, r7
 800c438:	4630      	mov	r0, r6
 800c43a:	f7f4 fbe5 	bl	8000c08 <__aeabi_d2uiz>
 800c43e:	2801      	cmp	r0, #1
 800c440:	bf38      	it	cc
 800c442:	2001      	movcc	r0, #1
 800c444:	f7f4 f88e 	bl	8000564 <__aeabi_ui2d>
 800c448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c44a:	4606      	mov	r6, r0
 800c44c:	460f      	mov	r7, r1
 800c44e:	b9fb      	cbnz	r3, 800c490 <_strtod_l+0xb80>
 800c450:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c454:	9014      	str	r0, [sp, #80]	@ 0x50
 800c456:	9315      	str	r3, [sp, #84]	@ 0x54
 800c458:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c45c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c460:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c462:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c466:	1b5b      	subs	r3, r3, r5
 800c468:	9311      	str	r3, [sp, #68]	@ 0x44
 800c46a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c46e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c472:	f002 fcff 	bl	800ee74 <__ulp>
 800c476:	4650      	mov	r0, sl
 800c478:	ec53 2b10 	vmov	r2, r3, d0
 800c47c:	4659      	mov	r1, fp
 800c47e:	f7f4 f8eb 	bl	8000658 <__aeabi_dmul>
 800c482:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c486:	f7f3 ff31 	bl	80002ec <__adddf3>
 800c48a:	4682      	mov	sl, r0
 800c48c:	468b      	mov	fp, r1
 800c48e:	e770      	b.n	800c372 <_strtod_l+0xa62>
 800c490:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c494:	e7e0      	b.n	800c458 <_strtod_l+0xb48>
 800c496:	a30e      	add	r3, pc, #56	@ (adr r3, 800c4d0 <_strtod_l+0xbc0>)
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	f7f4 fb4e 	bl	8000b3c <__aeabi_dcmplt>
 800c4a0:	e798      	b.n	800c3d4 <_strtod_l+0xac4>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	930e      	str	r3, [sp, #56]	@ 0x38
 800c4a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c4a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4aa:	6013      	str	r3, [r2, #0]
 800c4ac:	f7ff ba6d 	b.w	800b98a <_strtod_l+0x7a>
 800c4b0:	2a65      	cmp	r2, #101	@ 0x65
 800c4b2:	f43f ab68 	beq.w	800bb86 <_strtod_l+0x276>
 800c4b6:	2a45      	cmp	r2, #69	@ 0x45
 800c4b8:	f43f ab65 	beq.w	800bb86 <_strtod_l+0x276>
 800c4bc:	2301      	movs	r3, #1
 800c4be:	f7ff bba0 	b.w	800bc02 <_strtod_l+0x2f2>
 800c4c2:	bf00      	nop
 800c4c4:	f3af 8000 	nop.w
 800c4c8:	ffc00000 	.word	0xffc00000
 800c4cc:	41dfffff 	.word	0x41dfffff
 800c4d0:	94a03595 	.word	0x94a03595
 800c4d4:	3fcfffff 	.word	0x3fcfffff

0800c4d8 <_strtod_r>:
 800c4d8:	4b01      	ldr	r3, [pc, #4]	@ (800c4e0 <_strtod_r+0x8>)
 800c4da:	f7ff ba19 	b.w	800b910 <_strtod_l>
 800c4de:	bf00      	nop
 800c4e0:	200003d4 	.word	0x200003d4

0800c4e4 <_strtol_l.isra.0>:
 800c4e4:	2b24      	cmp	r3, #36	@ 0x24
 800c4e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4ea:	4686      	mov	lr, r0
 800c4ec:	4690      	mov	r8, r2
 800c4ee:	d801      	bhi.n	800c4f4 <_strtol_l.isra.0+0x10>
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d106      	bne.n	800c502 <_strtol_l.isra.0+0x1e>
 800c4f4:	f000 f8f4 	bl	800c6e0 <__errno>
 800c4f8:	2316      	movs	r3, #22
 800c4fa:	6003      	str	r3, [r0, #0]
 800c4fc:	2000      	movs	r0, #0
 800c4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c502:	4834      	ldr	r0, [pc, #208]	@ (800c5d4 <_strtol_l.isra.0+0xf0>)
 800c504:	460d      	mov	r5, r1
 800c506:	462a      	mov	r2, r5
 800c508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c50c:	5d06      	ldrb	r6, [r0, r4]
 800c50e:	f016 0608 	ands.w	r6, r6, #8
 800c512:	d1f8      	bne.n	800c506 <_strtol_l.isra.0+0x22>
 800c514:	2c2d      	cmp	r4, #45	@ 0x2d
 800c516:	d110      	bne.n	800c53a <_strtol_l.isra.0+0x56>
 800c518:	782c      	ldrb	r4, [r5, #0]
 800c51a:	2601      	movs	r6, #1
 800c51c:	1c95      	adds	r5, r2, #2
 800c51e:	f033 0210 	bics.w	r2, r3, #16
 800c522:	d115      	bne.n	800c550 <_strtol_l.isra.0+0x6c>
 800c524:	2c30      	cmp	r4, #48	@ 0x30
 800c526:	d10d      	bne.n	800c544 <_strtol_l.isra.0+0x60>
 800c528:	782a      	ldrb	r2, [r5, #0]
 800c52a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c52e:	2a58      	cmp	r2, #88	@ 0x58
 800c530:	d108      	bne.n	800c544 <_strtol_l.isra.0+0x60>
 800c532:	786c      	ldrb	r4, [r5, #1]
 800c534:	3502      	adds	r5, #2
 800c536:	2310      	movs	r3, #16
 800c538:	e00a      	b.n	800c550 <_strtol_l.isra.0+0x6c>
 800c53a:	2c2b      	cmp	r4, #43	@ 0x2b
 800c53c:	bf04      	itt	eq
 800c53e:	782c      	ldrbeq	r4, [r5, #0]
 800c540:	1c95      	addeq	r5, r2, #2
 800c542:	e7ec      	b.n	800c51e <_strtol_l.isra.0+0x3a>
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1f6      	bne.n	800c536 <_strtol_l.isra.0+0x52>
 800c548:	2c30      	cmp	r4, #48	@ 0x30
 800c54a:	bf14      	ite	ne
 800c54c:	230a      	movne	r3, #10
 800c54e:	2308      	moveq	r3, #8
 800c550:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c554:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800c558:	2200      	movs	r2, #0
 800c55a:	fbbc f9f3 	udiv	r9, ip, r3
 800c55e:	4610      	mov	r0, r2
 800c560:	fb03 ca19 	mls	sl, r3, r9, ip
 800c564:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c568:	2f09      	cmp	r7, #9
 800c56a:	d80f      	bhi.n	800c58c <_strtol_l.isra.0+0xa8>
 800c56c:	463c      	mov	r4, r7
 800c56e:	42a3      	cmp	r3, r4
 800c570:	dd1b      	ble.n	800c5aa <_strtol_l.isra.0+0xc6>
 800c572:	1c57      	adds	r7, r2, #1
 800c574:	d007      	beq.n	800c586 <_strtol_l.isra.0+0xa2>
 800c576:	4581      	cmp	r9, r0
 800c578:	d314      	bcc.n	800c5a4 <_strtol_l.isra.0+0xc0>
 800c57a:	d101      	bne.n	800c580 <_strtol_l.isra.0+0x9c>
 800c57c:	45a2      	cmp	sl, r4
 800c57e:	db11      	blt.n	800c5a4 <_strtol_l.isra.0+0xc0>
 800c580:	fb00 4003 	mla	r0, r0, r3, r4
 800c584:	2201      	movs	r2, #1
 800c586:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c58a:	e7eb      	b.n	800c564 <_strtol_l.isra.0+0x80>
 800c58c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c590:	2f19      	cmp	r7, #25
 800c592:	d801      	bhi.n	800c598 <_strtol_l.isra.0+0xb4>
 800c594:	3c37      	subs	r4, #55	@ 0x37
 800c596:	e7ea      	b.n	800c56e <_strtol_l.isra.0+0x8a>
 800c598:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c59c:	2f19      	cmp	r7, #25
 800c59e:	d804      	bhi.n	800c5aa <_strtol_l.isra.0+0xc6>
 800c5a0:	3c57      	subs	r4, #87	@ 0x57
 800c5a2:	e7e4      	b.n	800c56e <_strtol_l.isra.0+0x8a>
 800c5a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c5a8:	e7ed      	b.n	800c586 <_strtol_l.isra.0+0xa2>
 800c5aa:	1c53      	adds	r3, r2, #1
 800c5ac:	d108      	bne.n	800c5c0 <_strtol_l.isra.0+0xdc>
 800c5ae:	2322      	movs	r3, #34	@ 0x22
 800c5b0:	f8ce 3000 	str.w	r3, [lr]
 800c5b4:	4660      	mov	r0, ip
 800c5b6:	f1b8 0f00 	cmp.w	r8, #0
 800c5ba:	d0a0      	beq.n	800c4fe <_strtol_l.isra.0+0x1a>
 800c5bc:	1e69      	subs	r1, r5, #1
 800c5be:	e006      	b.n	800c5ce <_strtol_l.isra.0+0xea>
 800c5c0:	b106      	cbz	r6, 800c5c4 <_strtol_l.isra.0+0xe0>
 800c5c2:	4240      	negs	r0, r0
 800c5c4:	f1b8 0f00 	cmp.w	r8, #0
 800c5c8:	d099      	beq.n	800c4fe <_strtol_l.isra.0+0x1a>
 800c5ca:	2a00      	cmp	r2, #0
 800c5cc:	d1f6      	bne.n	800c5bc <_strtol_l.isra.0+0xd8>
 800c5ce:	f8c8 1000 	str.w	r1, [r8]
 800c5d2:	e794      	b.n	800c4fe <_strtol_l.isra.0+0x1a>
 800c5d4:	0800ff59 	.word	0x0800ff59

0800c5d8 <_strtol_r>:
 800c5d8:	f7ff bf84 	b.w	800c4e4 <_strtol_l.isra.0>

0800c5dc <_fwalk_sglue>:
 800c5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e0:	4607      	mov	r7, r0
 800c5e2:	4688      	mov	r8, r1
 800c5e4:	4614      	mov	r4, r2
 800c5e6:	2600      	movs	r6, #0
 800c5e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5ec:	f1b9 0901 	subs.w	r9, r9, #1
 800c5f0:	d505      	bpl.n	800c5fe <_fwalk_sglue+0x22>
 800c5f2:	6824      	ldr	r4, [r4, #0]
 800c5f4:	2c00      	cmp	r4, #0
 800c5f6:	d1f7      	bne.n	800c5e8 <_fwalk_sglue+0xc>
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5fe:	89ab      	ldrh	r3, [r5, #12]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d907      	bls.n	800c614 <_fwalk_sglue+0x38>
 800c604:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c608:	3301      	adds	r3, #1
 800c60a:	d003      	beq.n	800c614 <_fwalk_sglue+0x38>
 800c60c:	4629      	mov	r1, r5
 800c60e:	4638      	mov	r0, r7
 800c610:	47c0      	blx	r8
 800c612:	4306      	orrs	r6, r0
 800c614:	3568      	adds	r5, #104	@ 0x68
 800c616:	e7e9      	b.n	800c5ec <_fwalk_sglue+0x10>

0800c618 <memset>:
 800c618:	4402      	add	r2, r0
 800c61a:	4603      	mov	r3, r0
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d100      	bne.n	800c622 <memset+0xa>
 800c620:	4770      	bx	lr
 800c622:	f803 1b01 	strb.w	r1, [r3], #1
 800c626:	e7f9      	b.n	800c61c <memset+0x4>

0800c628 <strncmp>:
 800c628:	b510      	push	{r4, lr}
 800c62a:	b16a      	cbz	r2, 800c648 <strncmp+0x20>
 800c62c:	3901      	subs	r1, #1
 800c62e:	1884      	adds	r4, r0, r2
 800c630:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c634:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c638:	429a      	cmp	r2, r3
 800c63a:	d103      	bne.n	800c644 <strncmp+0x1c>
 800c63c:	42a0      	cmp	r0, r4
 800c63e:	d001      	beq.n	800c644 <strncmp+0x1c>
 800c640:	2a00      	cmp	r2, #0
 800c642:	d1f5      	bne.n	800c630 <strncmp+0x8>
 800c644:	1ad0      	subs	r0, r2, r3
 800c646:	bd10      	pop	{r4, pc}
 800c648:	4610      	mov	r0, r2
 800c64a:	e7fc      	b.n	800c646 <strncmp+0x1e>

0800c64c <strncpy>:
 800c64c:	b510      	push	{r4, lr}
 800c64e:	3901      	subs	r1, #1
 800c650:	4603      	mov	r3, r0
 800c652:	b132      	cbz	r2, 800c662 <strncpy+0x16>
 800c654:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c658:	f803 4b01 	strb.w	r4, [r3], #1
 800c65c:	3a01      	subs	r2, #1
 800c65e:	2c00      	cmp	r4, #0
 800c660:	d1f7      	bne.n	800c652 <strncpy+0x6>
 800c662:	441a      	add	r2, r3
 800c664:	2100      	movs	r1, #0
 800c666:	4293      	cmp	r3, r2
 800c668:	d100      	bne.n	800c66c <strncpy+0x20>
 800c66a:	bd10      	pop	{r4, pc}
 800c66c:	f803 1b01 	strb.w	r1, [r3], #1
 800c670:	e7f9      	b.n	800c666 <strncpy+0x1a>
	...

0800c674 <_lseek_r>:
 800c674:	b538      	push	{r3, r4, r5, lr}
 800c676:	4d07      	ldr	r5, [pc, #28]	@ (800c694 <_lseek_r+0x20>)
 800c678:	4604      	mov	r4, r0
 800c67a:	4608      	mov	r0, r1
 800c67c:	4611      	mov	r1, r2
 800c67e:	2200      	movs	r2, #0
 800c680:	602a      	str	r2, [r5, #0]
 800c682:	461a      	mov	r2, r3
 800c684:	f7f5 faf3 	bl	8001c6e <_lseek>
 800c688:	1c43      	adds	r3, r0, #1
 800c68a:	d102      	bne.n	800c692 <_lseek_r+0x1e>
 800c68c:	682b      	ldr	r3, [r5, #0]
 800c68e:	b103      	cbz	r3, 800c692 <_lseek_r+0x1e>
 800c690:	6023      	str	r3, [r4, #0]
 800c692:	bd38      	pop	{r3, r4, r5, pc}
 800c694:	20000d98 	.word	0x20000d98

0800c698 <_read_r>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	4d07      	ldr	r5, [pc, #28]	@ (800c6b8 <_read_r+0x20>)
 800c69c:	4604      	mov	r4, r0
 800c69e:	4608      	mov	r0, r1
 800c6a0:	4611      	mov	r1, r2
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	602a      	str	r2, [r5, #0]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	f7f5 fa81 	bl	8001bae <_read>
 800c6ac:	1c43      	adds	r3, r0, #1
 800c6ae:	d102      	bne.n	800c6b6 <_read_r+0x1e>
 800c6b0:	682b      	ldr	r3, [r5, #0]
 800c6b2:	b103      	cbz	r3, 800c6b6 <_read_r+0x1e>
 800c6b4:	6023      	str	r3, [r4, #0]
 800c6b6:	bd38      	pop	{r3, r4, r5, pc}
 800c6b8:	20000d98 	.word	0x20000d98

0800c6bc <_write_r>:
 800c6bc:	b538      	push	{r3, r4, r5, lr}
 800c6be:	4d07      	ldr	r5, [pc, #28]	@ (800c6dc <_write_r+0x20>)
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	4608      	mov	r0, r1
 800c6c4:	4611      	mov	r1, r2
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	602a      	str	r2, [r5, #0]
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	f7f5 fa8c 	bl	8001be8 <_write>
 800c6d0:	1c43      	adds	r3, r0, #1
 800c6d2:	d102      	bne.n	800c6da <_write_r+0x1e>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	b103      	cbz	r3, 800c6da <_write_r+0x1e>
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	bd38      	pop	{r3, r4, r5, pc}
 800c6dc:	20000d98 	.word	0x20000d98

0800c6e0 <__errno>:
 800c6e0:	4b01      	ldr	r3, [pc, #4]	@ (800c6e8 <__errno+0x8>)
 800c6e2:	6818      	ldr	r0, [r3, #0]
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	20000540 	.word	0x20000540

0800c6ec <__libc_init_array>:
 800c6ec:	b570      	push	{r4, r5, r6, lr}
 800c6ee:	4d0d      	ldr	r5, [pc, #52]	@ (800c724 <__libc_init_array+0x38>)
 800c6f0:	4c0d      	ldr	r4, [pc, #52]	@ (800c728 <__libc_init_array+0x3c>)
 800c6f2:	1b64      	subs	r4, r4, r5
 800c6f4:	10a4      	asrs	r4, r4, #2
 800c6f6:	2600      	movs	r6, #0
 800c6f8:	42a6      	cmp	r6, r4
 800c6fa:	d109      	bne.n	800c710 <__libc_init_array+0x24>
 800c6fc:	4d0b      	ldr	r5, [pc, #44]	@ (800c72c <__libc_init_array+0x40>)
 800c6fe:	4c0c      	ldr	r4, [pc, #48]	@ (800c730 <__libc_init_array+0x44>)
 800c700:	f003 fa74 	bl	800fbec <_init>
 800c704:	1b64      	subs	r4, r4, r5
 800c706:	10a4      	asrs	r4, r4, #2
 800c708:	2600      	movs	r6, #0
 800c70a:	42a6      	cmp	r6, r4
 800c70c:	d105      	bne.n	800c71a <__libc_init_array+0x2e>
 800c70e:	bd70      	pop	{r4, r5, r6, pc}
 800c710:	f855 3b04 	ldr.w	r3, [r5], #4
 800c714:	4798      	blx	r3
 800c716:	3601      	adds	r6, #1
 800c718:	e7ee      	b.n	800c6f8 <__libc_init_array+0xc>
 800c71a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c71e:	4798      	blx	r3
 800c720:	3601      	adds	r6, #1
 800c722:	e7f2      	b.n	800c70a <__libc_init_array+0x1e>
 800c724:	08010198 	.word	0x08010198
 800c728:	08010198 	.word	0x08010198
 800c72c:	08010198 	.word	0x08010198
 800c730:	0801019c 	.word	0x0801019c

0800c734 <__retarget_lock_init_recursive>:
 800c734:	4770      	bx	lr

0800c736 <__retarget_lock_acquire_recursive>:
 800c736:	4770      	bx	lr

0800c738 <__retarget_lock_release_recursive>:
 800c738:	4770      	bx	lr
	...

0800c73c <_localeconv_r>:
 800c73c:	4800      	ldr	r0, [pc, #0]	@ (800c740 <_localeconv_r+0x4>)
 800c73e:	4770      	bx	lr
 800c740:	200004c4 	.word	0x200004c4

0800c744 <_close_r>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	4d06      	ldr	r5, [pc, #24]	@ (800c760 <_close_r+0x1c>)
 800c748:	2300      	movs	r3, #0
 800c74a:	4604      	mov	r4, r0
 800c74c:	4608      	mov	r0, r1
 800c74e:	602b      	str	r3, [r5, #0]
 800c750:	f7f5 fa66 	bl	8001c20 <_close>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_close_r+0x1a>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_close_r+0x1a>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20000d98 	.word	0x20000d98

0800c764 <memcpy>:
 800c764:	440a      	add	r2, r1
 800c766:	4291      	cmp	r1, r2
 800c768:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c76c:	d100      	bne.n	800c770 <memcpy+0xc>
 800c76e:	4770      	bx	lr
 800c770:	b510      	push	{r4, lr}
 800c772:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c77a:	4291      	cmp	r1, r2
 800c77c:	d1f9      	bne.n	800c772 <memcpy+0xe>
 800c77e:	bd10      	pop	{r4, pc}

0800c780 <nan>:
 800c780:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c788 <nan+0x8>
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	00000000 	.word	0x00000000
 800c78c:	7ff80000 	.word	0x7ff80000

0800c790 <nanf>:
 800c790:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c798 <nanf+0x8>
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	7fc00000 	.word	0x7fc00000

0800c79c <quorem>:
 800c79c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a0:	6903      	ldr	r3, [r0, #16]
 800c7a2:	690c      	ldr	r4, [r1, #16]
 800c7a4:	42a3      	cmp	r3, r4
 800c7a6:	4607      	mov	r7, r0
 800c7a8:	db7e      	blt.n	800c8a8 <quorem+0x10c>
 800c7aa:	3c01      	subs	r4, #1
 800c7ac:	f101 0814 	add.w	r8, r1, #20
 800c7b0:	00a3      	lsls	r3, r4, #2
 800c7b2:	f100 0514 	add.w	r5, r0, #20
 800c7b6:	9300      	str	r3, [sp, #0]
 800c7b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7bc:	9301      	str	r3, [sp, #4]
 800c7be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c7c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c7ce:	fbb2 f6f3 	udiv	r6, r2, r3
 800c7d2:	d32e      	bcc.n	800c832 <quorem+0x96>
 800c7d4:	f04f 0a00 	mov.w	sl, #0
 800c7d8:	46c4      	mov	ip, r8
 800c7da:	46ae      	mov	lr, r5
 800c7dc:	46d3      	mov	fp, sl
 800c7de:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c7e2:	b298      	uxth	r0, r3
 800c7e4:	fb06 a000 	mla	r0, r6, r0, sl
 800c7e8:	0c02      	lsrs	r2, r0, #16
 800c7ea:	0c1b      	lsrs	r3, r3, #16
 800c7ec:	fb06 2303 	mla	r3, r6, r3, r2
 800c7f0:	f8de 2000 	ldr.w	r2, [lr]
 800c7f4:	b280      	uxth	r0, r0
 800c7f6:	b292      	uxth	r2, r2
 800c7f8:	1a12      	subs	r2, r2, r0
 800c7fa:	445a      	add	r2, fp
 800c7fc:	f8de 0000 	ldr.w	r0, [lr]
 800c800:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c804:	b29b      	uxth	r3, r3
 800c806:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c80a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c80e:	b292      	uxth	r2, r2
 800c810:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c814:	45e1      	cmp	r9, ip
 800c816:	f84e 2b04 	str.w	r2, [lr], #4
 800c81a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c81e:	d2de      	bcs.n	800c7de <quorem+0x42>
 800c820:	9b00      	ldr	r3, [sp, #0]
 800c822:	58eb      	ldr	r3, [r5, r3]
 800c824:	b92b      	cbnz	r3, 800c832 <quorem+0x96>
 800c826:	9b01      	ldr	r3, [sp, #4]
 800c828:	3b04      	subs	r3, #4
 800c82a:	429d      	cmp	r5, r3
 800c82c:	461a      	mov	r2, r3
 800c82e:	d32f      	bcc.n	800c890 <quorem+0xf4>
 800c830:	613c      	str	r4, [r7, #16]
 800c832:	4638      	mov	r0, r7
 800c834:	f002 fa6e 	bl	800ed14 <__mcmp>
 800c838:	2800      	cmp	r0, #0
 800c83a:	db25      	blt.n	800c888 <quorem+0xec>
 800c83c:	4629      	mov	r1, r5
 800c83e:	2000      	movs	r0, #0
 800c840:	f858 2b04 	ldr.w	r2, [r8], #4
 800c844:	f8d1 c000 	ldr.w	ip, [r1]
 800c848:	fa1f fe82 	uxth.w	lr, r2
 800c84c:	fa1f f38c 	uxth.w	r3, ip
 800c850:	eba3 030e 	sub.w	r3, r3, lr
 800c854:	4403      	add	r3, r0
 800c856:	0c12      	lsrs	r2, r2, #16
 800c858:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c85c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c860:	b29b      	uxth	r3, r3
 800c862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c866:	45c1      	cmp	r9, r8
 800c868:	f841 3b04 	str.w	r3, [r1], #4
 800c86c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c870:	d2e6      	bcs.n	800c840 <quorem+0xa4>
 800c872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c87a:	b922      	cbnz	r2, 800c886 <quorem+0xea>
 800c87c:	3b04      	subs	r3, #4
 800c87e:	429d      	cmp	r5, r3
 800c880:	461a      	mov	r2, r3
 800c882:	d30b      	bcc.n	800c89c <quorem+0x100>
 800c884:	613c      	str	r4, [r7, #16]
 800c886:	3601      	adds	r6, #1
 800c888:	4630      	mov	r0, r6
 800c88a:	b003      	add	sp, #12
 800c88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c890:	6812      	ldr	r2, [r2, #0]
 800c892:	3b04      	subs	r3, #4
 800c894:	2a00      	cmp	r2, #0
 800c896:	d1cb      	bne.n	800c830 <quorem+0x94>
 800c898:	3c01      	subs	r4, #1
 800c89a:	e7c6      	b.n	800c82a <quorem+0x8e>
 800c89c:	6812      	ldr	r2, [r2, #0]
 800c89e:	3b04      	subs	r3, #4
 800c8a0:	2a00      	cmp	r2, #0
 800c8a2:	d1ef      	bne.n	800c884 <quorem+0xe8>
 800c8a4:	3c01      	subs	r4, #1
 800c8a6:	e7ea      	b.n	800c87e <quorem+0xe2>
 800c8a8:	2000      	movs	r0, #0
 800c8aa:	e7ee      	b.n	800c88a <quorem+0xee>
 800c8ac:	0000      	movs	r0, r0
	...

0800c8b0 <_dtoa_r>:
 800c8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b4:	69c7      	ldr	r7, [r0, #28]
 800c8b6:	b097      	sub	sp, #92	@ 0x5c
 800c8b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c8bc:	ec55 4b10 	vmov	r4, r5, d0
 800c8c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c8c2:	9107      	str	r1, [sp, #28]
 800c8c4:	4681      	mov	r9, r0
 800c8c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c8c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c8ca:	b97f      	cbnz	r7, 800c8ec <_dtoa_r+0x3c>
 800c8cc:	2010      	movs	r0, #16
 800c8ce:	f001 fc69 	bl	800e1a4 <malloc>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	f8c9 001c 	str.w	r0, [r9, #28]
 800c8d8:	b920      	cbnz	r0, 800c8e4 <_dtoa_r+0x34>
 800c8da:	4ba9      	ldr	r3, [pc, #676]	@ (800cb80 <_dtoa_r+0x2d0>)
 800c8dc:	21ef      	movs	r1, #239	@ 0xef
 800c8de:	48a9      	ldr	r0, [pc, #676]	@ (800cb84 <_dtoa_r+0x2d4>)
 800c8e0:	f002 fd16 	bl	800f310 <__assert_func>
 800c8e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c8e8:	6007      	str	r7, [r0, #0]
 800c8ea:	60c7      	str	r7, [r0, #12]
 800c8ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c8f0:	6819      	ldr	r1, [r3, #0]
 800c8f2:	b159      	cbz	r1, 800c90c <_dtoa_r+0x5c>
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	604a      	str	r2, [r1, #4]
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	4093      	lsls	r3, r2
 800c8fc:	608b      	str	r3, [r1, #8]
 800c8fe:	4648      	mov	r0, r9
 800c900:	f001 ff8c 	bl	800e81c <_Bfree>
 800c904:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c908:	2200      	movs	r2, #0
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	1e2b      	subs	r3, r5, #0
 800c90e:	bfb9      	ittee	lt
 800c910:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c914:	9305      	strlt	r3, [sp, #20]
 800c916:	2300      	movge	r3, #0
 800c918:	6033      	strge	r3, [r6, #0]
 800c91a:	9f05      	ldr	r7, [sp, #20]
 800c91c:	4b9a      	ldr	r3, [pc, #616]	@ (800cb88 <_dtoa_r+0x2d8>)
 800c91e:	bfbc      	itt	lt
 800c920:	2201      	movlt	r2, #1
 800c922:	6032      	strlt	r2, [r6, #0]
 800c924:	43bb      	bics	r3, r7
 800c926:	d112      	bne.n	800c94e <_dtoa_r+0x9e>
 800c928:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c92a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c92e:	6013      	str	r3, [r2, #0]
 800c930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c934:	4323      	orrs	r3, r4
 800c936:	f000 855a 	beq.w	800d3ee <_dtoa_r+0xb3e>
 800c93a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c93c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800cb9c <_dtoa_r+0x2ec>
 800c940:	2b00      	cmp	r3, #0
 800c942:	f000 855c 	beq.w	800d3fe <_dtoa_r+0xb4e>
 800c946:	f10a 0303 	add.w	r3, sl, #3
 800c94a:	f000 bd56 	b.w	800d3fa <_dtoa_r+0xb4a>
 800c94e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c952:	2200      	movs	r2, #0
 800c954:	ec51 0b17 	vmov	r0, r1, d7
 800c958:	2300      	movs	r3, #0
 800c95a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c95e:	f7f4 f8e3 	bl	8000b28 <__aeabi_dcmpeq>
 800c962:	4680      	mov	r8, r0
 800c964:	b158      	cbz	r0, 800c97e <_dtoa_r+0xce>
 800c966:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c968:	2301      	movs	r3, #1
 800c96a:	6013      	str	r3, [r2, #0]
 800c96c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c96e:	b113      	cbz	r3, 800c976 <_dtoa_r+0xc6>
 800c970:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c972:	4b86      	ldr	r3, [pc, #536]	@ (800cb8c <_dtoa_r+0x2dc>)
 800c974:	6013      	str	r3, [r2, #0]
 800c976:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800cba0 <_dtoa_r+0x2f0>
 800c97a:	f000 bd40 	b.w	800d3fe <_dtoa_r+0xb4e>
 800c97e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c982:	aa14      	add	r2, sp, #80	@ 0x50
 800c984:	a915      	add	r1, sp, #84	@ 0x54
 800c986:	4648      	mov	r0, r9
 800c988:	f002 fae4 	bl	800ef54 <__d2b>
 800c98c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c990:	9002      	str	r0, [sp, #8]
 800c992:	2e00      	cmp	r6, #0
 800c994:	d078      	beq.n	800ca88 <_dtoa_r+0x1d8>
 800c996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c998:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c99c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c9a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c9a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c9ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	4b76      	ldr	r3, [pc, #472]	@ (800cb90 <_dtoa_r+0x2e0>)
 800c9b6:	f7f3 fc97 	bl	80002e8 <__aeabi_dsub>
 800c9ba:	a36b      	add	r3, pc, #428	@ (adr r3, 800cb68 <_dtoa_r+0x2b8>)
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	f7f3 fe4a 	bl	8000658 <__aeabi_dmul>
 800c9c4:	a36a      	add	r3, pc, #424	@ (adr r3, 800cb70 <_dtoa_r+0x2c0>)
 800c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ca:	f7f3 fc8f 	bl	80002ec <__adddf3>
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	460d      	mov	r5, r1
 800c9d4:	f7f3 fdd6 	bl	8000584 <__aeabi_i2d>
 800c9d8:	a367      	add	r3, pc, #412	@ (adr r3, 800cb78 <_dtoa_r+0x2c8>)
 800c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9de:	f7f3 fe3b 	bl	8000658 <__aeabi_dmul>
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	f7f3 fc7f 	bl	80002ec <__adddf3>
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	460d      	mov	r5, r1
 800c9f2:	f7f4 f8e1 	bl	8000bb8 <__aeabi_d2iz>
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	4607      	mov	r7, r0
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	4629      	mov	r1, r5
 800ca00:	f7f4 f89c 	bl	8000b3c <__aeabi_dcmplt>
 800ca04:	b140      	cbz	r0, 800ca18 <_dtoa_r+0x168>
 800ca06:	4638      	mov	r0, r7
 800ca08:	f7f3 fdbc 	bl	8000584 <__aeabi_i2d>
 800ca0c:	4622      	mov	r2, r4
 800ca0e:	462b      	mov	r3, r5
 800ca10:	f7f4 f88a 	bl	8000b28 <__aeabi_dcmpeq>
 800ca14:	b900      	cbnz	r0, 800ca18 <_dtoa_r+0x168>
 800ca16:	3f01      	subs	r7, #1
 800ca18:	2f16      	cmp	r7, #22
 800ca1a:	d852      	bhi.n	800cac2 <_dtoa_r+0x212>
 800ca1c:	4b5d      	ldr	r3, [pc, #372]	@ (800cb94 <_dtoa_r+0x2e4>)
 800ca1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ca2a:	f7f4 f887 	bl	8000b3c <__aeabi_dcmplt>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d049      	beq.n	800cac6 <_dtoa_r+0x216>
 800ca32:	3f01      	subs	r7, #1
 800ca34:	2300      	movs	r3, #0
 800ca36:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ca3a:	1b9b      	subs	r3, r3, r6
 800ca3c:	1e5a      	subs	r2, r3, #1
 800ca3e:	bf45      	ittet	mi
 800ca40:	f1c3 0301 	rsbmi	r3, r3, #1
 800ca44:	9300      	strmi	r3, [sp, #0]
 800ca46:	2300      	movpl	r3, #0
 800ca48:	2300      	movmi	r3, #0
 800ca4a:	9206      	str	r2, [sp, #24]
 800ca4c:	bf54      	ite	pl
 800ca4e:	9300      	strpl	r3, [sp, #0]
 800ca50:	9306      	strmi	r3, [sp, #24]
 800ca52:	2f00      	cmp	r7, #0
 800ca54:	db39      	blt.n	800caca <_dtoa_r+0x21a>
 800ca56:	9b06      	ldr	r3, [sp, #24]
 800ca58:	970d      	str	r7, [sp, #52]	@ 0x34
 800ca5a:	443b      	add	r3, r7
 800ca5c:	9306      	str	r3, [sp, #24]
 800ca5e:	2300      	movs	r3, #0
 800ca60:	9308      	str	r3, [sp, #32]
 800ca62:	9b07      	ldr	r3, [sp, #28]
 800ca64:	2b09      	cmp	r3, #9
 800ca66:	d863      	bhi.n	800cb30 <_dtoa_r+0x280>
 800ca68:	2b05      	cmp	r3, #5
 800ca6a:	bfc4      	itt	gt
 800ca6c:	3b04      	subgt	r3, #4
 800ca6e:	9307      	strgt	r3, [sp, #28]
 800ca70:	9b07      	ldr	r3, [sp, #28]
 800ca72:	f1a3 0302 	sub.w	r3, r3, #2
 800ca76:	bfcc      	ite	gt
 800ca78:	2400      	movgt	r4, #0
 800ca7a:	2401      	movle	r4, #1
 800ca7c:	2b03      	cmp	r3, #3
 800ca7e:	d863      	bhi.n	800cb48 <_dtoa_r+0x298>
 800ca80:	e8df f003 	tbb	[pc, r3]
 800ca84:	2b375452 	.word	0x2b375452
 800ca88:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ca8c:	441e      	add	r6, r3
 800ca8e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ca92:	2b20      	cmp	r3, #32
 800ca94:	bfc1      	itttt	gt
 800ca96:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ca9a:	409f      	lslgt	r7, r3
 800ca9c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800caa0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800caa4:	bfd6      	itet	le
 800caa6:	f1c3 0320 	rsble	r3, r3, #32
 800caaa:	ea47 0003 	orrgt.w	r0, r7, r3
 800caae:	fa04 f003 	lslle.w	r0, r4, r3
 800cab2:	f7f3 fd57 	bl	8000564 <__aeabi_ui2d>
 800cab6:	2201      	movs	r2, #1
 800cab8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cabc:	3e01      	subs	r6, #1
 800cabe:	9212      	str	r2, [sp, #72]	@ 0x48
 800cac0:	e776      	b.n	800c9b0 <_dtoa_r+0x100>
 800cac2:	2301      	movs	r3, #1
 800cac4:	e7b7      	b.n	800ca36 <_dtoa_r+0x186>
 800cac6:	9010      	str	r0, [sp, #64]	@ 0x40
 800cac8:	e7b6      	b.n	800ca38 <_dtoa_r+0x188>
 800caca:	9b00      	ldr	r3, [sp, #0]
 800cacc:	1bdb      	subs	r3, r3, r7
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	427b      	negs	r3, r7
 800cad2:	9308      	str	r3, [sp, #32]
 800cad4:	2300      	movs	r3, #0
 800cad6:	930d      	str	r3, [sp, #52]	@ 0x34
 800cad8:	e7c3      	b.n	800ca62 <_dtoa_r+0x1b2>
 800cada:	2301      	movs	r3, #1
 800cadc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cade:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cae0:	eb07 0b03 	add.w	fp, r7, r3
 800cae4:	f10b 0301 	add.w	r3, fp, #1
 800cae8:	2b01      	cmp	r3, #1
 800caea:	9303      	str	r3, [sp, #12]
 800caec:	bfb8      	it	lt
 800caee:	2301      	movlt	r3, #1
 800caf0:	e006      	b.n	800cb00 <_dtoa_r+0x250>
 800caf2:	2301      	movs	r3, #1
 800caf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800caf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	dd28      	ble.n	800cb4e <_dtoa_r+0x29e>
 800cafc:	469b      	mov	fp, r3
 800cafe:	9303      	str	r3, [sp, #12]
 800cb00:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800cb04:	2100      	movs	r1, #0
 800cb06:	2204      	movs	r2, #4
 800cb08:	f102 0514 	add.w	r5, r2, #20
 800cb0c:	429d      	cmp	r5, r3
 800cb0e:	d926      	bls.n	800cb5e <_dtoa_r+0x2ae>
 800cb10:	6041      	str	r1, [r0, #4]
 800cb12:	4648      	mov	r0, r9
 800cb14:	f001 fe42 	bl	800e79c <_Balloc>
 800cb18:	4682      	mov	sl, r0
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d142      	bne.n	800cba4 <_dtoa_r+0x2f4>
 800cb1e:	4b1e      	ldr	r3, [pc, #120]	@ (800cb98 <_dtoa_r+0x2e8>)
 800cb20:	4602      	mov	r2, r0
 800cb22:	f240 11af 	movw	r1, #431	@ 0x1af
 800cb26:	e6da      	b.n	800c8de <_dtoa_r+0x2e>
 800cb28:	2300      	movs	r3, #0
 800cb2a:	e7e3      	b.n	800caf4 <_dtoa_r+0x244>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	e7d5      	b.n	800cadc <_dtoa_r+0x22c>
 800cb30:	2401      	movs	r4, #1
 800cb32:	2300      	movs	r3, #0
 800cb34:	9307      	str	r3, [sp, #28]
 800cb36:	9409      	str	r4, [sp, #36]	@ 0x24
 800cb38:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f8cd b00c 	str.w	fp, [sp, #12]
 800cb42:	2312      	movs	r3, #18
 800cb44:	920c      	str	r2, [sp, #48]	@ 0x30
 800cb46:	e7db      	b.n	800cb00 <_dtoa_r+0x250>
 800cb48:	2301      	movs	r3, #1
 800cb4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb4c:	e7f4      	b.n	800cb38 <_dtoa_r+0x288>
 800cb4e:	f04f 0b01 	mov.w	fp, #1
 800cb52:	f8cd b00c 	str.w	fp, [sp, #12]
 800cb56:	465b      	mov	r3, fp
 800cb58:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800cb5c:	e7d0      	b.n	800cb00 <_dtoa_r+0x250>
 800cb5e:	3101      	adds	r1, #1
 800cb60:	0052      	lsls	r2, r2, #1
 800cb62:	e7d1      	b.n	800cb08 <_dtoa_r+0x258>
 800cb64:	f3af 8000 	nop.w
 800cb68:	636f4361 	.word	0x636f4361
 800cb6c:	3fd287a7 	.word	0x3fd287a7
 800cb70:	8b60c8b3 	.word	0x8b60c8b3
 800cb74:	3fc68a28 	.word	0x3fc68a28
 800cb78:	509f79fb 	.word	0x509f79fb
 800cb7c:	3fd34413 	.word	0x3fd34413
 800cb80:	0800fd66 	.word	0x0800fd66
 800cb84:	0800fd7d 	.word	0x0800fd7d
 800cb88:	7ff00000 	.word	0x7ff00000
 800cb8c:	0800fe6e 	.word	0x0800fe6e
 800cb90:	3ff80000 	.word	0x3ff80000
 800cb94:	08010090 	.word	0x08010090
 800cb98:	0800fdd5 	.word	0x0800fdd5
 800cb9c:	0800fd62 	.word	0x0800fd62
 800cba0:	0800fe6d 	.word	0x0800fe6d
 800cba4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cba8:	6018      	str	r0, [r3, #0]
 800cbaa:	9b03      	ldr	r3, [sp, #12]
 800cbac:	2b0e      	cmp	r3, #14
 800cbae:	f200 80a1 	bhi.w	800ccf4 <_dtoa_r+0x444>
 800cbb2:	2c00      	cmp	r4, #0
 800cbb4:	f000 809e 	beq.w	800ccf4 <_dtoa_r+0x444>
 800cbb8:	2f00      	cmp	r7, #0
 800cbba:	dd33      	ble.n	800cc24 <_dtoa_r+0x374>
 800cbbc:	4b9c      	ldr	r3, [pc, #624]	@ (800ce30 <_dtoa_r+0x580>)
 800cbbe:	f007 020f 	and.w	r2, r7, #15
 800cbc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbc6:	ed93 7b00 	vldr	d7, [r3]
 800cbca:	05f8      	lsls	r0, r7, #23
 800cbcc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800cbd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cbd4:	d516      	bpl.n	800cc04 <_dtoa_r+0x354>
 800cbd6:	4b97      	ldr	r3, [pc, #604]	@ (800ce34 <_dtoa_r+0x584>)
 800cbd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cbdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cbe0:	f7f3 fe64 	bl	80008ac <__aeabi_ddiv>
 800cbe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cbe8:	f004 040f 	and.w	r4, r4, #15
 800cbec:	2603      	movs	r6, #3
 800cbee:	4d91      	ldr	r5, [pc, #580]	@ (800ce34 <_dtoa_r+0x584>)
 800cbf0:	b954      	cbnz	r4, 800cc08 <_dtoa_r+0x358>
 800cbf2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cbf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbfa:	f7f3 fe57 	bl	80008ac <__aeabi_ddiv>
 800cbfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc02:	e028      	b.n	800cc56 <_dtoa_r+0x3a6>
 800cc04:	2602      	movs	r6, #2
 800cc06:	e7f2      	b.n	800cbee <_dtoa_r+0x33e>
 800cc08:	07e1      	lsls	r1, r4, #31
 800cc0a:	d508      	bpl.n	800cc1e <_dtoa_r+0x36e>
 800cc0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cc10:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cc14:	f7f3 fd20 	bl	8000658 <__aeabi_dmul>
 800cc18:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cc1c:	3601      	adds	r6, #1
 800cc1e:	1064      	asrs	r4, r4, #1
 800cc20:	3508      	adds	r5, #8
 800cc22:	e7e5      	b.n	800cbf0 <_dtoa_r+0x340>
 800cc24:	f000 80af 	beq.w	800cd86 <_dtoa_r+0x4d6>
 800cc28:	427c      	negs	r4, r7
 800cc2a:	4b81      	ldr	r3, [pc, #516]	@ (800ce30 <_dtoa_r+0x580>)
 800cc2c:	4d81      	ldr	r5, [pc, #516]	@ (800ce34 <_dtoa_r+0x584>)
 800cc2e:	f004 020f 	and.w	r2, r4, #15
 800cc32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cc3e:	f7f3 fd0b 	bl	8000658 <__aeabi_dmul>
 800cc42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc46:	1124      	asrs	r4, r4, #4
 800cc48:	2300      	movs	r3, #0
 800cc4a:	2602      	movs	r6, #2
 800cc4c:	2c00      	cmp	r4, #0
 800cc4e:	f040 808f 	bne.w	800cd70 <_dtoa_r+0x4c0>
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1d3      	bne.n	800cbfe <_dtoa_r+0x34e>
 800cc56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cc58:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f000 8094 	beq.w	800cd8a <_dtoa_r+0x4da>
 800cc62:	4b75      	ldr	r3, [pc, #468]	@ (800ce38 <_dtoa_r+0x588>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	4620      	mov	r0, r4
 800cc68:	4629      	mov	r1, r5
 800cc6a:	f7f3 ff67 	bl	8000b3c <__aeabi_dcmplt>
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	f000 808b 	beq.w	800cd8a <_dtoa_r+0x4da>
 800cc74:	9b03      	ldr	r3, [sp, #12]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f000 8087 	beq.w	800cd8a <_dtoa_r+0x4da>
 800cc7c:	f1bb 0f00 	cmp.w	fp, #0
 800cc80:	dd34      	ble.n	800ccec <_dtoa_r+0x43c>
 800cc82:	4620      	mov	r0, r4
 800cc84:	4b6d      	ldr	r3, [pc, #436]	@ (800ce3c <_dtoa_r+0x58c>)
 800cc86:	2200      	movs	r2, #0
 800cc88:	4629      	mov	r1, r5
 800cc8a:	f7f3 fce5 	bl	8000658 <__aeabi_dmul>
 800cc8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc92:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800cc96:	3601      	adds	r6, #1
 800cc98:	465c      	mov	r4, fp
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f7f3 fc72 	bl	8000584 <__aeabi_i2d>
 800cca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cca4:	f7f3 fcd8 	bl	8000658 <__aeabi_dmul>
 800cca8:	4b65      	ldr	r3, [pc, #404]	@ (800ce40 <_dtoa_r+0x590>)
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f7f3 fb1e 	bl	80002ec <__adddf3>
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ccb6:	2c00      	cmp	r4, #0
 800ccb8:	d16a      	bne.n	800cd90 <_dtoa_r+0x4e0>
 800ccba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccbe:	4b61      	ldr	r3, [pc, #388]	@ (800ce44 <_dtoa_r+0x594>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f7f3 fb11 	bl	80002e8 <__aeabi_dsub>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ccce:	462a      	mov	r2, r5
 800ccd0:	4633      	mov	r3, r6
 800ccd2:	f7f3 ff51 	bl	8000b78 <__aeabi_dcmpgt>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	f040 8298 	bne.w	800d20c <_dtoa_r+0x95c>
 800ccdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cce0:	462a      	mov	r2, r5
 800cce2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cce6:	f7f3 ff29 	bl	8000b3c <__aeabi_dcmplt>
 800ccea:	bb38      	cbnz	r0, 800cd3c <_dtoa_r+0x48c>
 800ccec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ccf0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ccf4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f2c0 8157 	blt.w	800cfaa <_dtoa_r+0x6fa>
 800ccfc:	2f0e      	cmp	r7, #14
 800ccfe:	f300 8154 	bgt.w	800cfaa <_dtoa_r+0x6fa>
 800cd02:	4b4b      	ldr	r3, [pc, #300]	@ (800ce30 <_dtoa_r+0x580>)
 800cd04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cd08:	ed93 7b00 	vldr	d7, [r3]
 800cd0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	ed8d 7b00 	vstr	d7, [sp]
 800cd14:	f280 80e5 	bge.w	800cee2 <_dtoa_r+0x632>
 800cd18:	9b03      	ldr	r3, [sp, #12]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f300 80e1 	bgt.w	800cee2 <_dtoa_r+0x632>
 800cd20:	d10c      	bne.n	800cd3c <_dtoa_r+0x48c>
 800cd22:	4b48      	ldr	r3, [pc, #288]	@ (800ce44 <_dtoa_r+0x594>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	ec51 0b17 	vmov	r0, r1, d7
 800cd2a:	f7f3 fc95 	bl	8000658 <__aeabi_dmul>
 800cd2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd32:	f7f3 ff17 	bl	8000b64 <__aeabi_dcmpge>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	f000 8266 	beq.w	800d208 <_dtoa_r+0x958>
 800cd3c:	2400      	movs	r4, #0
 800cd3e:	4625      	mov	r5, r4
 800cd40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd42:	4656      	mov	r6, sl
 800cd44:	ea6f 0803 	mvn.w	r8, r3
 800cd48:	2700      	movs	r7, #0
 800cd4a:	4621      	mov	r1, r4
 800cd4c:	4648      	mov	r0, r9
 800cd4e:	f001 fd65 	bl	800e81c <_Bfree>
 800cd52:	2d00      	cmp	r5, #0
 800cd54:	f000 80bd 	beq.w	800ced2 <_dtoa_r+0x622>
 800cd58:	b12f      	cbz	r7, 800cd66 <_dtoa_r+0x4b6>
 800cd5a:	42af      	cmp	r7, r5
 800cd5c:	d003      	beq.n	800cd66 <_dtoa_r+0x4b6>
 800cd5e:	4639      	mov	r1, r7
 800cd60:	4648      	mov	r0, r9
 800cd62:	f001 fd5b 	bl	800e81c <_Bfree>
 800cd66:	4629      	mov	r1, r5
 800cd68:	4648      	mov	r0, r9
 800cd6a:	f001 fd57 	bl	800e81c <_Bfree>
 800cd6e:	e0b0      	b.n	800ced2 <_dtoa_r+0x622>
 800cd70:	07e2      	lsls	r2, r4, #31
 800cd72:	d505      	bpl.n	800cd80 <_dtoa_r+0x4d0>
 800cd74:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd78:	f7f3 fc6e 	bl	8000658 <__aeabi_dmul>
 800cd7c:	3601      	adds	r6, #1
 800cd7e:	2301      	movs	r3, #1
 800cd80:	1064      	asrs	r4, r4, #1
 800cd82:	3508      	adds	r5, #8
 800cd84:	e762      	b.n	800cc4c <_dtoa_r+0x39c>
 800cd86:	2602      	movs	r6, #2
 800cd88:	e765      	b.n	800cc56 <_dtoa_r+0x3a6>
 800cd8a:	9c03      	ldr	r4, [sp, #12]
 800cd8c:	46b8      	mov	r8, r7
 800cd8e:	e784      	b.n	800cc9a <_dtoa_r+0x3ea>
 800cd90:	4b27      	ldr	r3, [pc, #156]	@ (800ce30 <_dtoa_r+0x580>)
 800cd92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd9c:	4454      	add	r4, sl
 800cd9e:	2900      	cmp	r1, #0
 800cda0:	d054      	beq.n	800ce4c <_dtoa_r+0x59c>
 800cda2:	4929      	ldr	r1, [pc, #164]	@ (800ce48 <_dtoa_r+0x598>)
 800cda4:	2000      	movs	r0, #0
 800cda6:	f7f3 fd81 	bl	80008ac <__aeabi_ddiv>
 800cdaa:	4633      	mov	r3, r6
 800cdac:	462a      	mov	r2, r5
 800cdae:	f7f3 fa9b 	bl	80002e8 <__aeabi_dsub>
 800cdb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cdb6:	4656      	mov	r6, sl
 800cdb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdbc:	f7f3 fefc 	bl	8000bb8 <__aeabi_d2iz>
 800cdc0:	4605      	mov	r5, r0
 800cdc2:	f7f3 fbdf 	bl	8000584 <__aeabi_i2d>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdce:	f7f3 fa8b 	bl	80002e8 <__aeabi_dsub>
 800cdd2:	3530      	adds	r5, #48	@ 0x30
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cddc:	f806 5b01 	strb.w	r5, [r6], #1
 800cde0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cde4:	f7f3 feaa 	bl	8000b3c <__aeabi_dcmplt>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d172      	bne.n	800ced2 <_dtoa_r+0x622>
 800cdec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdf0:	4911      	ldr	r1, [pc, #68]	@ (800ce38 <_dtoa_r+0x588>)
 800cdf2:	2000      	movs	r0, #0
 800cdf4:	f7f3 fa78 	bl	80002e8 <__aeabi_dsub>
 800cdf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cdfc:	f7f3 fe9e 	bl	8000b3c <__aeabi_dcmplt>
 800ce00:	2800      	cmp	r0, #0
 800ce02:	f040 80b4 	bne.w	800cf6e <_dtoa_r+0x6be>
 800ce06:	42a6      	cmp	r6, r4
 800ce08:	f43f af70 	beq.w	800ccec <_dtoa_r+0x43c>
 800ce0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ce10:	4b0a      	ldr	r3, [pc, #40]	@ (800ce3c <_dtoa_r+0x58c>)
 800ce12:	2200      	movs	r2, #0
 800ce14:	f7f3 fc20 	bl	8000658 <__aeabi_dmul>
 800ce18:	4b08      	ldr	r3, [pc, #32]	@ (800ce3c <_dtoa_r+0x58c>)
 800ce1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ce1e:	2200      	movs	r2, #0
 800ce20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce24:	f7f3 fc18 	bl	8000658 <__aeabi_dmul>
 800ce28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce2c:	e7c4      	b.n	800cdb8 <_dtoa_r+0x508>
 800ce2e:	bf00      	nop
 800ce30:	08010090 	.word	0x08010090
 800ce34:	08010068 	.word	0x08010068
 800ce38:	3ff00000 	.word	0x3ff00000
 800ce3c:	40240000 	.word	0x40240000
 800ce40:	401c0000 	.word	0x401c0000
 800ce44:	40140000 	.word	0x40140000
 800ce48:	3fe00000 	.word	0x3fe00000
 800ce4c:	4631      	mov	r1, r6
 800ce4e:	4628      	mov	r0, r5
 800ce50:	f7f3 fc02 	bl	8000658 <__aeabi_dmul>
 800ce54:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ce58:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ce5a:	4656      	mov	r6, sl
 800ce5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce60:	f7f3 feaa 	bl	8000bb8 <__aeabi_d2iz>
 800ce64:	4605      	mov	r5, r0
 800ce66:	f7f3 fb8d 	bl	8000584 <__aeabi_i2d>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce72:	f7f3 fa39 	bl	80002e8 <__aeabi_dsub>
 800ce76:	3530      	adds	r5, #48	@ 0x30
 800ce78:	f806 5b01 	strb.w	r5, [r6], #1
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	460b      	mov	r3, r1
 800ce80:	42a6      	cmp	r6, r4
 800ce82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce86:	f04f 0200 	mov.w	r2, #0
 800ce8a:	d124      	bne.n	800ced6 <_dtoa_r+0x626>
 800ce8c:	4baf      	ldr	r3, [pc, #700]	@ (800d14c <_dtoa_r+0x89c>)
 800ce8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ce92:	f7f3 fa2b 	bl	80002ec <__adddf3>
 800ce96:	4602      	mov	r2, r0
 800ce98:	460b      	mov	r3, r1
 800ce9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce9e:	f7f3 fe6b 	bl	8000b78 <__aeabi_dcmpgt>
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d163      	bne.n	800cf6e <_dtoa_r+0x6be>
 800cea6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ceaa:	49a8      	ldr	r1, [pc, #672]	@ (800d14c <_dtoa_r+0x89c>)
 800ceac:	2000      	movs	r0, #0
 800ceae:	f7f3 fa1b 	bl	80002e8 <__aeabi_dsub>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ceba:	f7f3 fe3f 	bl	8000b3c <__aeabi_dcmplt>
 800cebe:	2800      	cmp	r0, #0
 800cec0:	f43f af14 	beq.w	800ccec <_dtoa_r+0x43c>
 800cec4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cec6:	1e73      	subs	r3, r6, #1
 800cec8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ceca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cece:	2b30      	cmp	r3, #48	@ 0x30
 800ced0:	d0f8      	beq.n	800cec4 <_dtoa_r+0x614>
 800ced2:	4647      	mov	r7, r8
 800ced4:	e03b      	b.n	800cf4e <_dtoa_r+0x69e>
 800ced6:	4b9e      	ldr	r3, [pc, #632]	@ (800d150 <_dtoa_r+0x8a0>)
 800ced8:	f7f3 fbbe 	bl	8000658 <__aeabi_dmul>
 800cedc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cee0:	e7bc      	b.n	800ce5c <_dtoa_r+0x5ac>
 800cee2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cee6:	4656      	mov	r6, sl
 800cee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ceec:	4620      	mov	r0, r4
 800ceee:	4629      	mov	r1, r5
 800cef0:	f7f3 fcdc 	bl	80008ac <__aeabi_ddiv>
 800cef4:	f7f3 fe60 	bl	8000bb8 <__aeabi_d2iz>
 800cef8:	4680      	mov	r8, r0
 800cefa:	f7f3 fb43 	bl	8000584 <__aeabi_i2d>
 800cefe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf02:	f7f3 fba9 	bl	8000658 <__aeabi_dmul>
 800cf06:	4602      	mov	r2, r0
 800cf08:	460b      	mov	r3, r1
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cf12:	f7f3 f9e9 	bl	80002e8 <__aeabi_dsub>
 800cf16:	f806 4b01 	strb.w	r4, [r6], #1
 800cf1a:	9d03      	ldr	r5, [sp, #12]
 800cf1c:	eba6 040a 	sub.w	r4, r6, sl
 800cf20:	42a5      	cmp	r5, r4
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	d133      	bne.n	800cf90 <_dtoa_r+0x6e0>
 800cf28:	f7f3 f9e0 	bl	80002ec <__adddf3>
 800cf2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf30:	4604      	mov	r4, r0
 800cf32:	460d      	mov	r5, r1
 800cf34:	f7f3 fe20 	bl	8000b78 <__aeabi_dcmpgt>
 800cf38:	b9c0      	cbnz	r0, 800cf6c <_dtoa_r+0x6bc>
 800cf3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf3e:	4620      	mov	r0, r4
 800cf40:	4629      	mov	r1, r5
 800cf42:	f7f3 fdf1 	bl	8000b28 <__aeabi_dcmpeq>
 800cf46:	b110      	cbz	r0, 800cf4e <_dtoa_r+0x69e>
 800cf48:	f018 0f01 	tst.w	r8, #1
 800cf4c:	d10e      	bne.n	800cf6c <_dtoa_r+0x6bc>
 800cf4e:	9902      	ldr	r1, [sp, #8]
 800cf50:	4648      	mov	r0, r9
 800cf52:	f001 fc63 	bl	800e81c <_Bfree>
 800cf56:	2300      	movs	r3, #0
 800cf58:	7033      	strb	r3, [r6, #0]
 800cf5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf5c:	3701      	adds	r7, #1
 800cf5e:	601f      	str	r7, [r3, #0]
 800cf60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	f000 824b 	beq.w	800d3fe <_dtoa_r+0xb4e>
 800cf68:	601e      	str	r6, [r3, #0]
 800cf6a:	e248      	b.n	800d3fe <_dtoa_r+0xb4e>
 800cf6c:	46b8      	mov	r8, r7
 800cf6e:	4633      	mov	r3, r6
 800cf70:	461e      	mov	r6, r3
 800cf72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf76:	2a39      	cmp	r2, #57	@ 0x39
 800cf78:	d106      	bne.n	800cf88 <_dtoa_r+0x6d8>
 800cf7a:	459a      	cmp	sl, r3
 800cf7c:	d1f8      	bne.n	800cf70 <_dtoa_r+0x6c0>
 800cf7e:	2230      	movs	r2, #48	@ 0x30
 800cf80:	f108 0801 	add.w	r8, r8, #1
 800cf84:	f88a 2000 	strb.w	r2, [sl]
 800cf88:	781a      	ldrb	r2, [r3, #0]
 800cf8a:	3201      	adds	r2, #1
 800cf8c:	701a      	strb	r2, [r3, #0]
 800cf8e:	e7a0      	b.n	800ced2 <_dtoa_r+0x622>
 800cf90:	4b6f      	ldr	r3, [pc, #444]	@ (800d150 <_dtoa_r+0x8a0>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	f7f3 fb60 	bl	8000658 <__aeabi_dmul>
 800cf98:	2200      	movs	r2, #0
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	460d      	mov	r5, r1
 800cfa0:	f7f3 fdc2 	bl	8000b28 <__aeabi_dcmpeq>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d09f      	beq.n	800cee8 <_dtoa_r+0x638>
 800cfa8:	e7d1      	b.n	800cf4e <_dtoa_r+0x69e>
 800cfaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfac:	2a00      	cmp	r2, #0
 800cfae:	f000 80ea 	beq.w	800d186 <_dtoa_r+0x8d6>
 800cfb2:	9a07      	ldr	r2, [sp, #28]
 800cfb4:	2a01      	cmp	r2, #1
 800cfb6:	f300 80cd 	bgt.w	800d154 <_dtoa_r+0x8a4>
 800cfba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cfbc:	2a00      	cmp	r2, #0
 800cfbe:	f000 80c1 	beq.w	800d144 <_dtoa_r+0x894>
 800cfc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cfc6:	9c08      	ldr	r4, [sp, #32]
 800cfc8:	9e00      	ldr	r6, [sp, #0]
 800cfca:	9a00      	ldr	r2, [sp, #0]
 800cfcc:	441a      	add	r2, r3
 800cfce:	9200      	str	r2, [sp, #0]
 800cfd0:	9a06      	ldr	r2, [sp, #24]
 800cfd2:	2101      	movs	r1, #1
 800cfd4:	441a      	add	r2, r3
 800cfd6:	4648      	mov	r0, r9
 800cfd8:	9206      	str	r2, [sp, #24]
 800cfda:	f001 fd1d 	bl	800ea18 <__i2b>
 800cfde:	4605      	mov	r5, r0
 800cfe0:	b166      	cbz	r6, 800cffc <_dtoa_r+0x74c>
 800cfe2:	9b06      	ldr	r3, [sp, #24]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	dd09      	ble.n	800cffc <_dtoa_r+0x74c>
 800cfe8:	42b3      	cmp	r3, r6
 800cfea:	9a00      	ldr	r2, [sp, #0]
 800cfec:	bfa8      	it	ge
 800cfee:	4633      	movge	r3, r6
 800cff0:	1ad2      	subs	r2, r2, r3
 800cff2:	9200      	str	r2, [sp, #0]
 800cff4:	9a06      	ldr	r2, [sp, #24]
 800cff6:	1af6      	subs	r6, r6, r3
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	9306      	str	r3, [sp, #24]
 800cffc:	9b08      	ldr	r3, [sp, #32]
 800cffe:	b30b      	cbz	r3, 800d044 <_dtoa_r+0x794>
 800d000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d002:	2b00      	cmp	r3, #0
 800d004:	f000 80c6 	beq.w	800d194 <_dtoa_r+0x8e4>
 800d008:	2c00      	cmp	r4, #0
 800d00a:	f000 80c0 	beq.w	800d18e <_dtoa_r+0x8de>
 800d00e:	4629      	mov	r1, r5
 800d010:	4622      	mov	r2, r4
 800d012:	4648      	mov	r0, r9
 800d014:	f001 fdb8 	bl	800eb88 <__pow5mult>
 800d018:	9a02      	ldr	r2, [sp, #8]
 800d01a:	4601      	mov	r1, r0
 800d01c:	4605      	mov	r5, r0
 800d01e:	4648      	mov	r0, r9
 800d020:	f001 fd10 	bl	800ea44 <__multiply>
 800d024:	9902      	ldr	r1, [sp, #8]
 800d026:	4680      	mov	r8, r0
 800d028:	4648      	mov	r0, r9
 800d02a:	f001 fbf7 	bl	800e81c <_Bfree>
 800d02e:	9b08      	ldr	r3, [sp, #32]
 800d030:	1b1b      	subs	r3, r3, r4
 800d032:	9308      	str	r3, [sp, #32]
 800d034:	f000 80b1 	beq.w	800d19a <_dtoa_r+0x8ea>
 800d038:	9a08      	ldr	r2, [sp, #32]
 800d03a:	4641      	mov	r1, r8
 800d03c:	4648      	mov	r0, r9
 800d03e:	f001 fda3 	bl	800eb88 <__pow5mult>
 800d042:	9002      	str	r0, [sp, #8]
 800d044:	2101      	movs	r1, #1
 800d046:	4648      	mov	r0, r9
 800d048:	f001 fce6 	bl	800ea18 <__i2b>
 800d04c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d04e:	4604      	mov	r4, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	f000 81d8 	beq.w	800d406 <_dtoa_r+0xb56>
 800d056:	461a      	mov	r2, r3
 800d058:	4601      	mov	r1, r0
 800d05a:	4648      	mov	r0, r9
 800d05c:	f001 fd94 	bl	800eb88 <__pow5mult>
 800d060:	9b07      	ldr	r3, [sp, #28]
 800d062:	2b01      	cmp	r3, #1
 800d064:	4604      	mov	r4, r0
 800d066:	f300 809f 	bgt.w	800d1a8 <_dtoa_r+0x8f8>
 800d06a:	9b04      	ldr	r3, [sp, #16]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f040 8097 	bne.w	800d1a0 <_dtoa_r+0x8f0>
 800d072:	9b05      	ldr	r3, [sp, #20]
 800d074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f040 8093 	bne.w	800d1a4 <_dtoa_r+0x8f4>
 800d07e:	9b05      	ldr	r3, [sp, #20]
 800d080:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d084:	0d1b      	lsrs	r3, r3, #20
 800d086:	051b      	lsls	r3, r3, #20
 800d088:	b133      	cbz	r3, 800d098 <_dtoa_r+0x7e8>
 800d08a:	9b00      	ldr	r3, [sp, #0]
 800d08c:	3301      	adds	r3, #1
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	9b06      	ldr	r3, [sp, #24]
 800d092:	3301      	adds	r3, #1
 800d094:	9306      	str	r3, [sp, #24]
 800d096:	2301      	movs	r3, #1
 800d098:	9308      	str	r3, [sp, #32]
 800d09a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	f000 81b8 	beq.w	800d412 <_dtoa_r+0xb62>
 800d0a2:	6923      	ldr	r3, [r4, #16]
 800d0a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d0a8:	6918      	ldr	r0, [r3, #16]
 800d0aa:	f001 fc69 	bl	800e980 <__hi0bits>
 800d0ae:	f1c0 0020 	rsb	r0, r0, #32
 800d0b2:	9b06      	ldr	r3, [sp, #24]
 800d0b4:	4418      	add	r0, r3
 800d0b6:	f010 001f 	ands.w	r0, r0, #31
 800d0ba:	f000 8082 	beq.w	800d1c2 <_dtoa_r+0x912>
 800d0be:	f1c0 0320 	rsb	r3, r0, #32
 800d0c2:	2b04      	cmp	r3, #4
 800d0c4:	dd73      	ble.n	800d1ae <_dtoa_r+0x8fe>
 800d0c6:	9b00      	ldr	r3, [sp, #0]
 800d0c8:	f1c0 001c 	rsb	r0, r0, #28
 800d0cc:	4403      	add	r3, r0
 800d0ce:	9300      	str	r3, [sp, #0]
 800d0d0:	9b06      	ldr	r3, [sp, #24]
 800d0d2:	4403      	add	r3, r0
 800d0d4:	4406      	add	r6, r0
 800d0d6:	9306      	str	r3, [sp, #24]
 800d0d8:	9b00      	ldr	r3, [sp, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	dd05      	ble.n	800d0ea <_dtoa_r+0x83a>
 800d0de:	9902      	ldr	r1, [sp, #8]
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	4648      	mov	r0, r9
 800d0e4:	f001 fdaa 	bl	800ec3c <__lshift>
 800d0e8:	9002      	str	r0, [sp, #8]
 800d0ea:	9b06      	ldr	r3, [sp, #24]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	dd05      	ble.n	800d0fc <_dtoa_r+0x84c>
 800d0f0:	4621      	mov	r1, r4
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	4648      	mov	r0, r9
 800d0f6:	f001 fda1 	bl	800ec3c <__lshift>
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d061      	beq.n	800d1c6 <_dtoa_r+0x916>
 800d102:	9802      	ldr	r0, [sp, #8]
 800d104:	4621      	mov	r1, r4
 800d106:	f001 fe05 	bl	800ed14 <__mcmp>
 800d10a:	2800      	cmp	r0, #0
 800d10c:	da5b      	bge.n	800d1c6 <_dtoa_r+0x916>
 800d10e:	2300      	movs	r3, #0
 800d110:	9902      	ldr	r1, [sp, #8]
 800d112:	220a      	movs	r2, #10
 800d114:	4648      	mov	r0, r9
 800d116:	f001 fba3 	bl	800e860 <__multadd>
 800d11a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d11c:	9002      	str	r0, [sp, #8]
 800d11e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800d122:	2b00      	cmp	r3, #0
 800d124:	f000 8177 	beq.w	800d416 <_dtoa_r+0xb66>
 800d128:	4629      	mov	r1, r5
 800d12a:	2300      	movs	r3, #0
 800d12c:	220a      	movs	r2, #10
 800d12e:	4648      	mov	r0, r9
 800d130:	f001 fb96 	bl	800e860 <__multadd>
 800d134:	f1bb 0f00 	cmp.w	fp, #0
 800d138:	4605      	mov	r5, r0
 800d13a:	dc6f      	bgt.n	800d21c <_dtoa_r+0x96c>
 800d13c:	9b07      	ldr	r3, [sp, #28]
 800d13e:	2b02      	cmp	r3, #2
 800d140:	dc49      	bgt.n	800d1d6 <_dtoa_r+0x926>
 800d142:	e06b      	b.n	800d21c <_dtoa_r+0x96c>
 800d144:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d146:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d14a:	e73c      	b.n	800cfc6 <_dtoa_r+0x716>
 800d14c:	3fe00000 	.word	0x3fe00000
 800d150:	40240000 	.word	0x40240000
 800d154:	9b03      	ldr	r3, [sp, #12]
 800d156:	1e5c      	subs	r4, r3, #1
 800d158:	9b08      	ldr	r3, [sp, #32]
 800d15a:	42a3      	cmp	r3, r4
 800d15c:	db09      	blt.n	800d172 <_dtoa_r+0x8c2>
 800d15e:	1b1c      	subs	r4, r3, r4
 800d160:	9b03      	ldr	r3, [sp, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	f6bf af30 	bge.w	800cfc8 <_dtoa_r+0x718>
 800d168:	9b00      	ldr	r3, [sp, #0]
 800d16a:	9a03      	ldr	r2, [sp, #12]
 800d16c:	1a9e      	subs	r6, r3, r2
 800d16e:	2300      	movs	r3, #0
 800d170:	e72b      	b.n	800cfca <_dtoa_r+0x71a>
 800d172:	9b08      	ldr	r3, [sp, #32]
 800d174:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d176:	9408      	str	r4, [sp, #32]
 800d178:	1ae3      	subs	r3, r4, r3
 800d17a:	441a      	add	r2, r3
 800d17c:	9e00      	ldr	r6, [sp, #0]
 800d17e:	9b03      	ldr	r3, [sp, #12]
 800d180:	920d      	str	r2, [sp, #52]	@ 0x34
 800d182:	2400      	movs	r4, #0
 800d184:	e721      	b.n	800cfca <_dtoa_r+0x71a>
 800d186:	9c08      	ldr	r4, [sp, #32]
 800d188:	9e00      	ldr	r6, [sp, #0]
 800d18a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d18c:	e728      	b.n	800cfe0 <_dtoa_r+0x730>
 800d18e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d192:	e751      	b.n	800d038 <_dtoa_r+0x788>
 800d194:	9a08      	ldr	r2, [sp, #32]
 800d196:	9902      	ldr	r1, [sp, #8]
 800d198:	e750      	b.n	800d03c <_dtoa_r+0x78c>
 800d19a:	f8cd 8008 	str.w	r8, [sp, #8]
 800d19e:	e751      	b.n	800d044 <_dtoa_r+0x794>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	e779      	b.n	800d098 <_dtoa_r+0x7e8>
 800d1a4:	9b04      	ldr	r3, [sp, #16]
 800d1a6:	e777      	b.n	800d098 <_dtoa_r+0x7e8>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	9308      	str	r3, [sp, #32]
 800d1ac:	e779      	b.n	800d0a2 <_dtoa_r+0x7f2>
 800d1ae:	d093      	beq.n	800d0d8 <_dtoa_r+0x828>
 800d1b0:	9a00      	ldr	r2, [sp, #0]
 800d1b2:	331c      	adds	r3, #28
 800d1b4:	441a      	add	r2, r3
 800d1b6:	9200      	str	r2, [sp, #0]
 800d1b8:	9a06      	ldr	r2, [sp, #24]
 800d1ba:	441a      	add	r2, r3
 800d1bc:	441e      	add	r6, r3
 800d1be:	9206      	str	r2, [sp, #24]
 800d1c0:	e78a      	b.n	800d0d8 <_dtoa_r+0x828>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	e7f4      	b.n	800d1b0 <_dtoa_r+0x900>
 800d1c6:	9b03      	ldr	r3, [sp, #12]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	46b8      	mov	r8, r7
 800d1cc:	dc20      	bgt.n	800d210 <_dtoa_r+0x960>
 800d1ce:	469b      	mov	fp, r3
 800d1d0:	9b07      	ldr	r3, [sp, #28]
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	dd1e      	ble.n	800d214 <_dtoa_r+0x964>
 800d1d6:	f1bb 0f00 	cmp.w	fp, #0
 800d1da:	f47f adb1 	bne.w	800cd40 <_dtoa_r+0x490>
 800d1de:	4621      	mov	r1, r4
 800d1e0:	465b      	mov	r3, fp
 800d1e2:	2205      	movs	r2, #5
 800d1e4:	4648      	mov	r0, r9
 800d1e6:	f001 fb3b 	bl	800e860 <__multadd>
 800d1ea:	4601      	mov	r1, r0
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	9802      	ldr	r0, [sp, #8]
 800d1f0:	f001 fd90 	bl	800ed14 <__mcmp>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	f77f ada3 	ble.w	800cd40 <_dtoa_r+0x490>
 800d1fa:	4656      	mov	r6, sl
 800d1fc:	2331      	movs	r3, #49	@ 0x31
 800d1fe:	f806 3b01 	strb.w	r3, [r6], #1
 800d202:	f108 0801 	add.w	r8, r8, #1
 800d206:	e59f      	b.n	800cd48 <_dtoa_r+0x498>
 800d208:	9c03      	ldr	r4, [sp, #12]
 800d20a:	46b8      	mov	r8, r7
 800d20c:	4625      	mov	r5, r4
 800d20e:	e7f4      	b.n	800d1fa <_dtoa_r+0x94a>
 800d210:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d216:	2b00      	cmp	r3, #0
 800d218:	f000 8101 	beq.w	800d41e <_dtoa_r+0xb6e>
 800d21c:	2e00      	cmp	r6, #0
 800d21e:	dd05      	ble.n	800d22c <_dtoa_r+0x97c>
 800d220:	4629      	mov	r1, r5
 800d222:	4632      	mov	r2, r6
 800d224:	4648      	mov	r0, r9
 800d226:	f001 fd09 	bl	800ec3c <__lshift>
 800d22a:	4605      	mov	r5, r0
 800d22c:	9b08      	ldr	r3, [sp, #32]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d05c      	beq.n	800d2ec <_dtoa_r+0xa3c>
 800d232:	6869      	ldr	r1, [r5, #4]
 800d234:	4648      	mov	r0, r9
 800d236:	f001 fab1 	bl	800e79c <_Balloc>
 800d23a:	4606      	mov	r6, r0
 800d23c:	b928      	cbnz	r0, 800d24a <_dtoa_r+0x99a>
 800d23e:	4b82      	ldr	r3, [pc, #520]	@ (800d448 <_dtoa_r+0xb98>)
 800d240:	4602      	mov	r2, r0
 800d242:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d246:	f7ff bb4a 	b.w	800c8de <_dtoa_r+0x2e>
 800d24a:	692a      	ldr	r2, [r5, #16]
 800d24c:	3202      	adds	r2, #2
 800d24e:	0092      	lsls	r2, r2, #2
 800d250:	f105 010c 	add.w	r1, r5, #12
 800d254:	300c      	adds	r0, #12
 800d256:	f7ff fa85 	bl	800c764 <memcpy>
 800d25a:	2201      	movs	r2, #1
 800d25c:	4631      	mov	r1, r6
 800d25e:	4648      	mov	r0, r9
 800d260:	f001 fcec 	bl	800ec3c <__lshift>
 800d264:	f10a 0301 	add.w	r3, sl, #1
 800d268:	9300      	str	r3, [sp, #0]
 800d26a:	eb0a 030b 	add.w	r3, sl, fp
 800d26e:	9308      	str	r3, [sp, #32]
 800d270:	9b04      	ldr	r3, [sp, #16]
 800d272:	f003 0301 	and.w	r3, r3, #1
 800d276:	462f      	mov	r7, r5
 800d278:	9306      	str	r3, [sp, #24]
 800d27a:	4605      	mov	r5, r0
 800d27c:	9b00      	ldr	r3, [sp, #0]
 800d27e:	9802      	ldr	r0, [sp, #8]
 800d280:	4621      	mov	r1, r4
 800d282:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800d286:	f7ff fa89 	bl	800c79c <quorem>
 800d28a:	4603      	mov	r3, r0
 800d28c:	3330      	adds	r3, #48	@ 0x30
 800d28e:	9003      	str	r0, [sp, #12]
 800d290:	4639      	mov	r1, r7
 800d292:	9802      	ldr	r0, [sp, #8]
 800d294:	9309      	str	r3, [sp, #36]	@ 0x24
 800d296:	f001 fd3d 	bl	800ed14 <__mcmp>
 800d29a:	462a      	mov	r2, r5
 800d29c:	9004      	str	r0, [sp, #16]
 800d29e:	4621      	mov	r1, r4
 800d2a0:	4648      	mov	r0, r9
 800d2a2:	f001 fd53 	bl	800ed4c <__mdiff>
 800d2a6:	68c2      	ldr	r2, [r0, #12]
 800d2a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	bb02      	cbnz	r2, 800d2f0 <_dtoa_r+0xa40>
 800d2ae:	4601      	mov	r1, r0
 800d2b0:	9802      	ldr	r0, [sp, #8]
 800d2b2:	f001 fd2f 	bl	800ed14 <__mcmp>
 800d2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	4631      	mov	r1, r6
 800d2bc:	4648      	mov	r0, r9
 800d2be:	920c      	str	r2, [sp, #48]	@ 0x30
 800d2c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2c2:	f001 faab 	bl	800e81c <_Bfree>
 800d2c6:	9b07      	ldr	r3, [sp, #28]
 800d2c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d2ca:	9e00      	ldr	r6, [sp, #0]
 800d2cc:	ea42 0103 	orr.w	r1, r2, r3
 800d2d0:	9b06      	ldr	r3, [sp, #24]
 800d2d2:	4319      	orrs	r1, r3
 800d2d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2d6:	d10d      	bne.n	800d2f4 <_dtoa_r+0xa44>
 800d2d8:	2b39      	cmp	r3, #57	@ 0x39
 800d2da:	d027      	beq.n	800d32c <_dtoa_r+0xa7c>
 800d2dc:	9a04      	ldr	r2, [sp, #16]
 800d2de:	2a00      	cmp	r2, #0
 800d2e0:	dd01      	ble.n	800d2e6 <_dtoa_r+0xa36>
 800d2e2:	9b03      	ldr	r3, [sp, #12]
 800d2e4:	3331      	adds	r3, #49	@ 0x31
 800d2e6:	f88b 3000 	strb.w	r3, [fp]
 800d2ea:	e52e      	b.n	800cd4a <_dtoa_r+0x49a>
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	e7b9      	b.n	800d264 <_dtoa_r+0x9b4>
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	e7e2      	b.n	800d2ba <_dtoa_r+0xa0a>
 800d2f4:	9904      	ldr	r1, [sp, #16]
 800d2f6:	2900      	cmp	r1, #0
 800d2f8:	db04      	blt.n	800d304 <_dtoa_r+0xa54>
 800d2fa:	9807      	ldr	r0, [sp, #28]
 800d2fc:	4301      	orrs	r1, r0
 800d2fe:	9806      	ldr	r0, [sp, #24]
 800d300:	4301      	orrs	r1, r0
 800d302:	d120      	bne.n	800d346 <_dtoa_r+0xa96>
 800d304:	2a00      	cmp	r2, #0
 800d306:	ddee      	ble.n	800d2e6 <_dtoa_r+0xa36>
 800d308:	9902      	ldr	r1, [sp, #8]
 800d30a:	9300      	str	r3, [sp, #0]
 800d30c:	2201      	movs	r2, #1
 800d30e:	4648      	mov	r0, r9
 800d310:	f001 fc94 	bl	800ec3c <__lshift>
 800d314:	4621      	mov	r1, r4
 800d316:	9002      	str	r0, [sp, #8]
 800d318:	f001 fcfc 	bl	800ed14 <__mcmp>
 800d31c:	2800      	cmp	r0, #0
 800d31e:	9b00      	ldr	r3, [sp, #0]
 800d320:	dc02      	bgt.n	800d328 <_dtoa_r+0xa78>
 800d322:	d1e0      	bne.n	800d2e6 <_dtoa_r+0xa36>
 800d324:	07da      	lsls	r2, r3, #31
 800d326:	d5de      	bpl.n	800d2e6 <_dtoa_r+0xa36>
 800d328:	2b39      	cmp	r3, #57	@ 0x39
 800d32a:	d1da      	bne.n	800d2e2 <_dtoa_r+0xa32>
 800d32c:	2339      	movs	r3, #57	@ 0x39
 800d32e:	f88b 3000 	strb.w	r3, [fp]
 800d332:	4633      	mov	r3, r6
 800d334:	461e      	mov	r6, r3
 800d336:	3b01      	subs	r3, #1
 800d338:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d33c:	2a39      	cmp	r2, #57	@ 0x39
 800d33e:	d04e      	beq.n	800d3de <_dtoa_r+0xb2e>
 800d340:	3201      	adds	r2, #1
 800d342:	701a      	strb	r2, [r3, #0]
 800d344:	e501      	b.n	800cd4a <_dtoa_r+0x49a>
 800d346:	2a00      	cmp	r2, #0
 800d348:	dd03      	ble.n	800d352 <_dtoa_r+0xaa2>
 800d34a:	2b39      	cmp	r3, #57	@ 0x39
 800d34c:	d0ee      	beq.n	800d32c <_dtoa_r+0xa7c>
 800d34e:	3301      	adds	r3, #1
 800d350:	e7c9      	b.n	800d2e6 <_dtoa_r+0xa36>
 800d352:	9a00      	ldr	r2, [sp, #0]
 800d354:	9908      	ldr	r1, [sp, #32]
 800d356:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d35a:	428a      	cmp	r2, r1
 800d35c:	d028      	beq.n	800d3b0 <_dtoa_r+0xb00>
 800d35e:	9902      	ldr	r1, [sp, #8]
 800d360:	2300      	movs	r3, #0
 800d362:	220a      	movs	r2, #10
 800d364:	4648      	mov	r0, r9
 800d366:	f001 fa7b 	bl	800e860 <__multadd>
 800d36a:	42af      	cmp	r7, r5
 800d36c:	9002      	str	r0, [sp, #8]
 800d36e:	f04f 0300 	mov.w	r3, #0
 800d372:	f04f 020a 	mov.w	r2, #10
 800d376:	4639      	mov	r1, r7
 800d378:	4648      	mov	r0, r9
 800d37a:	d107      	bne.n	800d38c <_dtoa_r+0xadc>
 800d37c:	f001 fa70 	bl	800e860 <__multadd>
 800d380:	4607      	mov	r7, r0
 800d382:	4605      	mov	r5, r0
 800d384:	9b00      	ldr	r3, [sp, #0]
 800d386:	3301      	adds	r3, #1
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	e777      	b.n	800d27c <_dtoa_r+0x9cc>
 800d38c:	f001 fa68 	bl	800e860 <__multadd>
 800d390:	4629      	mov	r1, r5
 800d392:	4607      	mov	r7, r0
 800d394:	2300      	movs	r3, #0
 800d396:	220a      	movs	r2, #10
 800d398:	4648      	mov	r0, r9
 800d39a:	f001 fa61 	bl	800e860 <__multadd>
 800d39e:	4605      	mov	r5, r0
 800d3a0:	e7f0      	b.n	800d384 <_dtoa_r+0xad4>
 800d3a2:	f1bb 0f00 	cmp.w	fp, #0
 800d3a6:	bfcc      	ite	gt
 800d3a8:	465e      	movgt	r6, fp
 800d3aa:	2601      	movle	r6, #1
 800d3ac:	4456      	add	r6, sl
 800d3ae:	2700      	movs	r7, #0
 800d3b0:	9902      	ldr	r1, [sp, #8]
 800d3b2:	9300      	str	r3, [sp, #0]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	4648      	mov	r0, r9
 800d3b8:	f001 fc40 	bl	800ec3c <__lshift>
 800d3bc:	4621      	mov	r1, r4
 800d3be:	9002      	str	r0, [sp, #8]
 800d3c0:	f001 fca8 	bl	800ed14 <__mcmp>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	dcb4      	bgt.n	800d332 <_dtoa_r+0xa82>
 800d3c8:	d102      	bne.n	800d3d0 <_dtoa_r+0xb20>
 800d3ca:	9b00      	ldr	r3, [sp, #0]
 800d3cc:	07db      	lsls	r3, r3, #31
 800d3ce:	d4b0      	bmi.n	800d332 <_dtoa_r+0xa82>
 800d3d0:	4633      	mov	r3, r6
 800d3d2:	461e      	mov	r6, r3
 800d3d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3d8:	2a30      	cmp	r2, #48	@ 0x30
 800d3da:	d0fa      	beq.n	800d3d2 <_dtoa_r+0xb22>
 800d3dc:	e4b5      	b.n	800cd4a <_dtoa_r+0x49a>
 800d3de:	459a      	cmp	sl, r3
 800d3e0:	d1a8      	bne.n	800d334 <_dtoa_r+0xa84>
 800d3e2:	2331      	movs	r3, #49	@ 0x31
 800d3e4:	f108 0801 	add.w	r8, r8, #1
 800d3e8:	f88a 3000 	strb.w	r3, [sl]
 800d3ec:	e4ad      	b.n	800cd4a <_dtoa_r+0x49a>
 800d3ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d3f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d44c <_dtoa_r+0xb9c>
 800d3f4:	b11b      	cbz	r3, 800d3fe <_dtoa_r+0xb4e>
 800d3f6:	f10a 0308 	add.w	r3, sl, #8
 800d3fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d3fc:	6013      	str	r3, [r2, #0]
 800d3fe:	4650      	mov	r0, sl
 800d400:	b017      	add	sp, #92	@ 0x5c
 800d402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d406:	9b07      	ldr	r3, [sp, #28]
 800d408:	2b01      	cmp	r3, #1
 800d40a:	f77f ae2e 	ble.w	800d06a <_dtoa_r+0x7ba>
 800d40e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d410:	9308      	str	r3, [sp, #32]
 800d412:	2001      	movs	r0, #1
 800d414:	e64d      	b.n	800d0b2 <_dtoa_r+0x802>
 800d416:	f1bb 0f00 	cmp.w	fp, #0
 800d41a:	f77f aed9 	ble.w	800d1d0 <_dtoa_r+0x920>
 800d41e:	4656      	mov	r6, sl
 800d420:	9802      	ldr	r0, [sp, #8]
 800d422:	4621      	mov	r1, r4
 800d424:	f7ff f9ba 	bl	800c79c <quorem>
 800d428:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d42c:	f806 3b01 	strb.w	r3, [r6], #1
 800d430:	eba6 020a 	sub.w	r2, r6, sl
 800d434:	4593      	cmp	fp, r2
 800d436:	ddb4      	ble.n	800d3a2 <_dtoa_r+0xaf2>
 800d438:	9902      	ldr	r1, [sp, #8]
 800d43a:	2300      	movs	r3, #0
 800d43c:	220a      	movs	r2, #10
 800d43e:	4648      	mov	r0, r9
 800d440:	f001 fa0e 	bl	800e860 <__multadd>
 800d444:	9002      	str	r0, [sp, #8]
 800d446:	e7eb      	b.n	800d420 <_dtoa_r+0xb70>
 800d448:	0800fdd5 	.word	0x0800fdd5
 800d44c:	0800fd59 	.word	0x0800fd59

0800d450 <_free_r>:
 800d450:	b538      	push	{r3, r4, r5, lr}
 800d452:	4605      	mov	r5, r0
 800d454:	2900      	cmp	r1, #0
 800d456:	d041      	beq.n	800d4dc <_free_r+0x8c>
 800d458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d45c:	1f0c      	subs	r4, r1, #4
 800d45e:	2b00      	cmp	r3, #0
 800d460:	bfb8      	it	lt
 800d462:	18e4      	addlt	r4, r4, r3
 800d464:	f001 f98e 	bl	800e784 <__malloc_lock>
 800d468:	4a1d      	ldr	r2, [pc, #116]	@ (800d4e0 <_free_r+0x90>)
 800d46a:	6813      	ldr	r3, [r2, #0]
 800d46c:	b933      	cbnz	r3, 800d47c <_free_r+0x2c>
 800d46e:	6063      	str	r3, [r4, #4]
 800d470:	6014      	str	r4, [r2, #0]
 800d472:	4628      	mov	r0, r5
 800d474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d478:	f001 b98a 	b.w	800e790 <__malloc_unlock>
 800d47c:	42a3      	cmp	r3, r4
 800d47e:	d908      	bls.n	800d492 <_free_r+0x42>
 800d480:	6820      	ldr	r0, [r4, #0]
 800d482:	1821      	adds	r1, r4, r0
 800d484:	428b      	cmp	r3, r1
 800d486:	bf01      	itttt	eq
 800d488:	6819      	ldreq	r1, [r3, #0]
 800d48a:	685b      	ldreq	r3, [r3, #4]
 800d48c:	1809      	addeq	r1, r1, r0
 800d48e:	6021      	streq	r1, [r4, #0]
 800d490:	e7ed      	b.n	800d46e <_free_r+0x1e>
 800d492:	461a      	mov	r2, r3
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	b10b      	cbz	r3, 800d49c <_free_r+0x4c>
 800d498:	42a3      	cmp	r3, r4
 800d49a:	d9fa      	bls.n	800d492 <_free_r+0x42>
 800d49c:	6811      	ldr	r1, [r2, #0]
 800d49e:	1850      	adds	r0, r2, r1
 800d4a0:	42a0      	cmp	r0, r4
 800d4a2:	d10b      	bne.n	800d4bc <_free_r+0x6c>
 800d4a4:	6820      	ldr	r0, [r4, #0]
 800d4a6:	4401      	add	r1, r0
 800d4a8:	1850      	adds	r0, r2, r1
 800d4aa:	4283      	cmp	r3, r0
 800d4ac:	6011      	str	r1, [r2, #0]
 800d4ae:	d1e0      	bne.n	800d472 <_free_r+0x22>
 800d4b0:	6818      	ldr	r0, [r3, #0]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	6053      	str	r3, [r2, #4]
 800d4b6:	4408      	add	r0, r1
 800d4b8:	6010      	str	r0, [r2, #0]
 800d4ba:	e7da      	b.n	800d472 <_free_r+0x22>
 800d4bc:	d902      	bls.n	800d4c4 <_free_r+0x74>
 800d4be:	230c      	movs	r3, #12
 800d4c0:	602b      	str	r3, [r5, #0]
 800d4c2:	e7d6      	b.n	800d472 <_free_r+0x22>
 800d4c4:	6820      	ldr	r0, [r4, #0]
 800d4c6:	1821      	adds	r1, r4, r0
 800d4c8:	428b      	cmp	r3, r1
 800d4ca:	bf04      	itt	eq
 800d4cc:	6819      	ldreq	r1, [r3, #0]
 800d4ce:	685b      	ldreq	r3, [r3, #4]
 800d4d0:	6063      	str	r3, [r4, #4]
 800d4d2:	bf04      	itt	eq
 800d4d4:	1809      	addeq	r1, r1, r0
 800d4d6:	6021      	streq	r1, [r4, #0]
 800d4d8:	6054      	str	r4, [r2, #4]
 800d4da:	e7ca      	b.n	800d472 <_free_r+0x22>
 800d4dc:	bd38      	pop	{r3, r4, r5, pc}
 800d4de:	bf00      	nop
 800d4e0:	20000da0 	.word	0x20000da0

0800d4e4 <rshift>:
 800d4e4:	6903      	ldr	r3, [r0, #16]
 800d4e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d4ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d4f2:	f100 0414 	add.w	r4, r0, #20
 800d4f6:	dd45      	ble.n	800d584 <rshift+0xa0>
 800d4f8:	f011 011f 	ands.w	r1, r1, #31
 800d4fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d500:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d504:	d10c      	bne.n	800d520 <rshift+0x3c>
 800d506:	f100 0710 	add.w	r7, r0, #16
 800d50a:	4629      	mov	r1, r5
 800d50c:	42b1      	cmp	r1, r6
 800d50e:	d334      	bcc.n	800d57a <rshift+0x96>
 800d510:	1a9b      	subs	r3, r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	1eea      	subs	r2, r5, #3
 800d516:	4296      	cmp	r6, r2
 800d518:	bf38      	it	cc
 800d51a:	2300      	movcc	r3, #0
 800d51c:	4423      	add	r3, r4
 800d51e:	e015      	b.n	800d54c <rshift+0x68>
 800d520:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d524:	f1c1 0820 	rsb	r8, r1, #32
 800d528:	40cf      	lsrs	r7, r1
 800d52a:	f105 0e04 	add.w	lr, r5, #4
 800d52e:	46a1      	mov	r9, r4
 800d530:	4576      	cmp	r6, lr
 800d532:	46f4      	mov	ip, lr
 800d534:	d815      	bhi.n	800d562 <rshift+0x7e>
 800d536:	1a9a      	subs	r2, r3, r2
 800d538:	0092      	lsls	r2, r2, #2
 800d53a:	3a04      	subs	r2, #4
 800d53c:	3501      	adds	r5, #1
 800d53e:	42ae      	cmp	r6, r5
 800d540:	bf38      	it	cc
 800d542:	2200      	movcc	r2, #0
 800d544:	18a3      	adds	r3, r4, r2
 800d546:	50a7      	str	r7, [r4, r2]
 800d548:	b107      	cbz	r7, 800d54c <rshift+0x68>
 800d54a:	3304      	adds	r3, #4
 800d54c:	1b1a      	subs	r2, r3, r4
 800d54e:	42a3      	cmp	r3, r4
 800d550:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d554:	bf08      	it	eq
 800d556:	2300      	moveq	r3, #0
 800d558:	6102      	str	r2, [r0, #16]
 800d55a:	bf08      	it	eq
 800d55c:	6143      	streq	r3, [r0, #20]
 800d55e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d562:	f8dc c000 	ldr.w	ip, [ip]
 800d566:	fa0c fc08 	lsl.w	ip, ip, r8
 800d56a:	ea4c 0707 	orr.w	r7, ip, r7
 800d56e:	f849 7b04 	str.w	r7, [r9], #4
 800d572:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d576:	40cf      	lsrs	r7, r1
 800d578:	e7da      	b.n	800d530 <rshift+0x4c>
 800d57a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d57e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d582:	e7c3      	b.n	800d50c <rshift+0x28>
 800d584:	4623      	mov	r3, r4
 800d586:	e7e1      	b.n	800d54c <rshift+0x68>

0800d588 <__hexdig_fun>:
 800d588:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d58c:	2b09      	cmp	r3, #9
 800d58e:	d802      	bhi.n	800d596 <__hexdig_fun+0xe>
 800d590:	3820      	subs	r0, #32
 800d592:	b2c0      	uxtb	r0, r0
 800d594:	4770      	bx	lr
 800d596:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d59a:	2b05      	cmp	r3, #5
 800d59c:	d801      	bhi.n	800d5a2 <__hexdig_fun+0x1a>
 800d59e:	3847      	subs	r0, #71	@ 0x47
 800d5a0:	e7f7      	b.n	800d592 <__hexdig_fun+0xa>
 800d5a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d5a6:	2b05      	cmp	r3, #5
 800d5a8:	d801      	bhi.n	800d5ae <__hexdig_fun+0x26>
 800d5aa:	3827      	subs	r0, #39	@ 0x27
 800d5ac:	e7f1      	b.n	800d592 <__hexdig_fun+0xa>
 800d5ae:	2000      	movs	r0, #0
 800d5b0:	4770      	bx	lr
	...

0800d5b4 <__gethex>:
 800d5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b8:	b085      	sub	sp, #20
 800d5ba:	468a      	mov	sl, r1
 800d5bc:	9302      	str	r3, [sp, #8]
 800d5be:	680b      	ldr	r3, [r1, #0]
 800d5c0:	9001      	str	r0, [sp, #4]
 800d5c2:	4690      	mov	r8, r2
 800d5c4:	1c9c      	adds	r4, r3, #2
 800d5c6:	46a1      	mov	r9, r4
 800d5c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d5cc:	2830      	cmp	r0, #48	@ 0x30
 800d5ce:	d0fa      	beq.n	800d5c6 <__gethex+0x12>
 800d5d0:	eba9 0303 	sub.w	r3, r9, r3
 800d5d4:	f1a3 0b02 	sub.w	fp, r3, #2
 800d5d8:	f7ff ffd6 	bl	800d588 <__hexdig_fun>
 800d5dc:	4605      	mov	r5, r0
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	d168      	bne.n	800d6b4 <__gethex+0x100>
 800d5e2:	49a0      	ldr	r1, [pc, #640]	@ (800d864 <__gethex+0x2b0>)
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	4648      	mov	r0, r9
 800d5e8:	f7ff f81e 	bl	800c628 <strncmp>
 800d5ec:	4607      	mov	r7, r0
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d167      	bne.n	800d6c2 <__gethex+0x10e>
 800d5f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d5f6:	4626      	mov	r6, r4
 800d5f8:	f7ff ffc6 	bl	800d588 <__hexdig_fun>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d062      	beq.n	800d6c6 <__gethex+0x112>
 800d600:	4623      	mov	r3, r4
 800d602:	7818      	ldrb	r0, [r3, #0]
 800d604:	2830      	cmp	r0, #48	@ 0x30
 800d606:	4699      	mov	r9, r3
 800d608:	f103 0301 	add.w	r3, r3, #1
 800d60c:	d0f9      	beq.n	800d602 <__gethex+0x4e>
 800d60e:	f7ff ffbb 	bl	800d588 <__hexdig_fun>
 800d612:	fab0 f580 	clz	r5, r0
 800d616:	096d      	lsrs	r5, r5, #5
 800d618:	f04f 0b01 	mov.w	fp, #1
 800d61c:	464a      	mov	r2, r9
 800d61e:	4616      	mov	r6, r2
 800d620:	3201      	adds	r2, #1
 800d622:	7830      	ldrb	r0, [r6, #0]
 800d624:	f7ff ffb0 	bl	800d588 <__hexdig_fun>
 800d628:	2800      	cmp	r0, #0
 800d62a:	d1f8      	bne.n	800d61e <__gethex+0x6a>
 800d62c:	498d      	ldr	r1, [pc, #564]	@ (800d864 <__gethex+0x2b0>)
 800d62e:	2201      	movs	r2, #1
 800d630:	4630      	mov	r0, r6
 800d632:	f7fe fff9 	bl	800c628 <strncmp>
 800d636:	2800      	cmp	r0, #0
 800d638:	d13f      	bne.n	800d6ba <__gethex+0x106>
 800d63a:	b944      	cbnz	r4, 800d64e <__gethex+0x9a>
 800d63c:	1c74      	adds	r4, r6, #1
 800d63e:	4622      	mov	r2, r4
 800d640:	4616      	mov	r6, r2
 800d642:	3201      	adds	r2, #1
 800d644:	7830      	ldrb	r0, [r6, #0]
 800d646:	f7ff ff9f 	bl	800d588 <__hexdig_fun>
 800d64a:	2800      	cmp	r0, #0
 800d64c:	d1f8      	bne.n	800d640 <__gethex+0x8c>
 800d64e:	1ba4      	subs	r4, r4, r6
 800d650:	00a7      	lsls	r7, r4, #2
 800d652:	7833      	ldrb	r3, [r6, #0]
 800d654:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d658:	2b50      	cmp	r3, #80	@ 0x50
 800d65a:	d13e      	bne.n	800d6da <__gethex+0x126>
 800d65c:	7873      	ldrb	r3, [r6, #1]
 800d65e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d660:	d033      	beq.n	800d6ca <__gethex+0x116>
 800d662:	2b2d      	cmp	r3, #45	@ 0x2d
 800d664:	d034      	beq.n	800d6d0 <__gethex+0x11c>
 800d666:	1c71      	adds	r1, r6, #1
 800d668:	2400      	movs	r4, #0
 800d66a:	7808      	ldrb	r0, [r1, #0]
 800d66c:	f7ff ff8c 	bl	800d588 <__hexdig_fun>
 800d670:	1e43      	subs	r3, r0, #1
 800d672:	b2db      	uxtb	r3, r3
 800d674:	2b18      	cmp	r3, #24
 800d676:	d830      	bhi.n	800d6da <__gethex+0x126>
 800d678:	f1a0 0210 	sub.w	r2, r0, #16
 800d67c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d680:	f7ff ff82 	bl	800d588 <__hexdig_fun>
 800d684:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d688:	fa5f fc8c 	uxtb.w	ip, ip
 800d68c:	f1bc 0f18 	cmp.w	ip, #24
 800d690:	f04f 030a 	mov.w	r3, #10
 800d694:	d91e      	bls.n	800d6d4 <__gethex+0x120>
 800d696:	b104      	cbz	r4, 800d69a <__gethex+0xe6>
 800d698:	4252      	negs	r2, r2
 800d69a:	4417      	add	r7, r2
 800d69c:	f8ca 1000 	str.w	r1, [sl]
 800d6a0:	b1ed      	cbz	r5, 800d6de <__gethex+0x12a>
 800d6a2:	f1bb 0f00 	cmp.w	fp, #0
 800d6a6:	bf0c      	ite	eq
 800d6a8:	2506      	moveq	r5, #6
 800d6aa:	2500      	movne	r5, #0
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	b005      	add	sp, #20
 800d6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b4:	2500      	movs	r5, #0
 800d6b6:	462c      	mov	r4, r5
 800d6b8:	e7b0      	b.n	800d61c <__gethex+0x68>
 800d6ba:	2c00      	cmp	r4, #0
 800d6bc:	d1c7      	bne.n	800d64e <__gethex+0x9a>
 800d6be:	4627      	mov	r7, r4
 800d6c0:	e7c7      	b.n	800d652 <__gethex+0x9e>
 800d6c2:	464e      	mov	r6, r9
 800d6c4:	462f      	mov	r7, r5
 800d6c6:	2501      	movs	r5, #1
 800d6c8:	e7c3      	b.n	800d652 <__gethex+0x9e>
 800d6ca:	2400      	movs	r4, #0
 800d6cc:	1cb1      	adds	r1, r6, #2
 800d6ce:	e7cc      	b.n	800d66a <__gethex+0xb6>
 800d6d0:	2401      	movs	r4, #1
 800d6d2:	e7fb      	b.n	800d6cc <__gethex+0x118>
 800d6d4:	fb03 0002 	mla	r0, r3, r2, r0
 800d6d8:	e7ce      	b.n	800d678 <__gethex+0xc4>
 800d6da:	4631      	mov	r1, r6
 800d6dc:	e7de      	b.n	800d69c <__gethex+0xe8>
 800d6de:	eba6 0309 	sub.w	r3, r6, r9
 800d6e2:	3b01      	subs	r3, #1
 800d6e4:	4629      	mov	r1, r5
 800d6e6:	2b07      	cmp	r3, #7
 800d6e8:	dc0a      	bgt.n	800d700 <__gethex+0x14c>
 800d6ea:	9801      	ldr	r0, [sp, #4]
 800d6ec:	f001 f856 	bl	800e79c <_Balloc>
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	b940      	cbnz	r0, 800d706 <__gethex+0x152>
 800d6f4:	4b5c      	ldr	r3, [pc, #368]	@ (800d868 <__gethex+0x2b4>)
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	21e4      	movs	r1, #228	@ 0xe4
 800d6fa:	485c      	ldr	r0, [pc, #368]	@ (800d86c <__gethex+0x2b8>)
 800d6fc:	f001 fe08 	bl	800f310 <__assert_func>
 800d700:	3101      	adds	r1, #1
 800d702:	105b      	asrs	r3, r3, #1
 800d704:	e7ef      	b.n	800d6e6 <__gethex+0x132>
 800d706:	f100 0a14 	add.w	sl, r0, #20
 800d70a:	2300      	movs	r3, #0
 800d70c:	4655      	mov	r5, sl
 800d70e:	469b      	mov	fp, r3
 800d710:	45b1      	cmp	r9, r6
 800d712:	d337      	bcc.n	800d784 <__gethex+0x1d0>
 800d714:	f845 bb04 	str.w	fp, [r5], #4
 800d718:	eba5 050a 	sub.w	r5, r5, sl
 800d71c:	10ad      	asrs	r5, r5, #2
 800d71e:	6125      	str	r5, [r4, #16]
 800d720:	4658      	mov	r0, fp
 800d722:	f001 f92d 	bl	800e980 <__hi0bits>
 800d726:	016d      	lsls	r5, r5, #5
 800d728:	f8d8 6000 	ldr.w	r6, [r8]
 800d72c:	1a2d      	subs	r5, r5, r0
 800d72e:	42b5      	cmp	r5, r6
 800d730:	dd54      	ble.n	800d7dc <__gethex+0x228>
 800d732:	1bad      	subs	r5, r5, r6
 800d734:	4629      	mov	r1, r5
 800d736:	4620      	mov	r0, r4
 800d738:	f001 fcb9 	bl	800f0ae <__any_on>
 800d73c:	4681      	mov	r9, r0
 800d73e:	b178      	cbz	r0, 800d760 <__gethex+0x1ac>
 800d740:	1e6b      	subs	r3, r5, #1
 800d742:	1159      	asrs	r1, r3, #5
 800d744:	f003 021f 	and.w	r2, r3, #31
 800d748:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d74c:	f04f 0901 	mov.w	r9, #1
 800d750:	fa09 f202 	lsl.w	r2, r9, r2
 800d754:	420a      	tst	r2, r1
 800d756:	d003      	beq.n	800d760 <__gethex+0x1ac>
 800d758:	454b      	cmp	r3, r9
 800d75a:	dc36      	bgt.n	800d7ca <__gethex+0x216>
 800d75c:	f04f 0902 	mov.w	r9, #2
 800d760:	4629      	mov	r1, r5
 800d762:	4620      	mov	r0, r4
 800d764:	f7ff febe 	bl	800d4e4 <rshift>
 800d768:	442f      	add	r7, r5
 800d76a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d76e:	42bb      	cmp	r3, r7
 800d770:	da42      	bge.n	800d7f8 <__gethex+0x244>
 800d772:	9801      	ldr	r0, [sp, #4]
 800d774:	4621      	mov	r1, r4
 800d776:	f001 f851 	bl	800e81c <_Bfree>
 800d77a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d77c:	2300      	movs	r3, #0
 800d77e:	6013      	str	r3, [r2, #0]
 800d780:	25a3      	movs	r5, #163	@ 0xa3
 800d782:	e793      	b.n	800d6ac <__gethex+0xf8>
 800d784:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d788:	2a2e      	cmp	r2, #46	@ 0x2e
 800d78a:	d012      	beq.n	800d7b2 <__gethex+0x1fe>
 800d78c:	2b20      	cmp	r3, #32
 800d78e:	d104      	bne.n	800d79a <__gethex+0x1e6>
 800d790:	f845 bb04 	str.w	fp, [r5], #4
 800d794:	f04f 0b00 	mov.w	fp, #0
 800d798:	465b      	mov	r3, fp
 800d79a:	7830      	ldrb	r0, [r6, #0]
 800d79c:	9303      	str	r3, [sp, #12]
 800d79e:	f7ff fef3 	bl	800d588 <__hexdig_fun>
 800d7a2:	9b03      	ldr	r3, [sp, #12]
 800d7a4:	f000 000f 	and.w	r0, r0, #15
 800d7a8:	4098      	lsls	r0, r3
 800d7aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800d7ae:	3304      	adds	r3, #4
 800d7b0:	e7ae      	b.n	800d710 <__gethex+0x15c>
 800d7b2:	45b1      	cmp	r9, r6
 800d7b4:	d8ea      	bhi.n	800d78c <__gethex+0x1d8>
 800d7b6:	492b      	ldr	r1, [pc, #172]	@ (800d864 <__gethex+0x2b0>)
 800d7b8:	9303      	str	r3, [sp, #12]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	4630      	mov	r0, r6
 800d7be:	f7fe ff33 	bl	800c628 <strncmp>
 800d7c2:	9b03      	ldr	r3, [sp, #12]
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d1e1      	bne.n	800d78c <__gethex+0x1d8>
 800d7c8:	e7a2      	b.n	800d710 <__gethex+0x15c>
 800d7ca:	1ea9      	subs	r1, r5, #2
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f001 fc6e 	bl	800f0ae <__any_on>
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d0c2      	beq.n	800d75c <__gethex+0x1a8>
 800d7d6:	f04f 0903 	mov.w	r9, #3
 800d7da:	e7c1      	b.n	800d760 <__gethex+0x1ac>
 800d7dc:	da09      	bge.n	800d7f2 <__gethex+0x23e>
 800d7de:	1b75      	subs	r5, r6, r5
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	9801      	ldr	r0, [sp, #4]
 800d7e4:	462a      	mov	r2, r5
 800d7e6:	f001 fa29 	bl	800ec3c <__lshift>
 800d7ea:	1b7f      	subs	r7, r7, r5
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	f100 0a14 	add.w	sl, r0, #20
 800d7f2:	f04f 0900 	mov.w	r9, #0
 800d7f6:	e7b8      	b.n	800d76a <__gethex+0x1b6>
 800d7f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d7fc:	42bd      	cmp	r5, r7
 800d7fe:	dd6f      	ble.n	800d8e0 <__gethex+0x32c>
 800d800:	1bed      	subs	r5, r5, r7
 800d802:	42ae      	cmp	r6, r5
 800d804:	dc34      	bgt.n	800d870 <__gethex+0x2bc>
 800d806:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	d022      	beq.n	800d854 <__gethex+0x2a0>
 800d80e:	2b03      	cmp	r3, #3
 800d810:	d024      	beq.n	800d85c <__gethex+0x2a8>
 800d812:	2b01      	cmp	r3, #1
 800d814:	d115      	bne.n	800d842 <__gethex+0x28e>
 800d816:	42ae      	cmp	r6, r5
 800d818:	d113      	bne.n	800d842 <__gethex+0x28e>
 800d81a:	2e01      	cmp	r6, #1
 800d81c:	d10b      	bne.n	800d836 <__gethex+0x282>
 800d81e:	9a02      	ldr	r2, [sp, #8]
 800d820:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d824:	6013      	str	r3, [r2, #0]
 800d826:	2301      	movs	r3, #1
 800d828:	6123      	str	r3, [r4, #16]
 800d82a:	f8ca 3000 	str.w	r3, [sl]
 800d82e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d830:	2562      	movs	r5, #98	@ 0x62
 800d832:	601c      	str	r4, [r3, #0]
 800d834:	e73a      	b.n	800d6ac <__gethex+0xf8>
 800d836:	1e71      	subs	r1, r6, #1
 800d838:	4620      	mov	r0, r4
 800d83a:	f001 fc38 	bl	800f0ae <__any_on>
 800d83e:	2800      	cmp	r0, #0
 800d840:	d1ed      	bne.n	800d81e <__gethex+0x26a>
 800d842:	9801      	ldr	r0, [sp, #4]
 800d844:	4621      	mov	r1, r4
 800d846:	f000 ffe9 	bl	800e81c <_Bfree>
 800d84a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d84c:	2300      	movs	r3, #0
 800d84e:	6013      	str	r3, [r2, #0]
 800d850:	2550      	movs	r5, #80	@ 0x50
 800d852:	e72b      	b.n	800d6ac <__gethex+0xf8>
 800d854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d856:	2b00      	cmp	r3, #0
 800d858:	d1f3      	bne.n	800d842 <__gethex+0x28e>
 800d85a:	e7e0      	b.n	800d81e <__gethex+0x26a>
 800d85c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d1dd      	bne.n	800d81e <__gethex+0x26a>
 800d862:	e7ee      	b.n	800d842 <__gethex+0x28e>
 800d864:	0800fd4f 	.word	0x0800fd4f
 800d868:	0800fdd5 	.word	0x0800fdd5
 800d86c:	0800fde6 	.word	0x0800fde6
 800d870:	1e6f      	subs	r7, r5, #1
 800d872:	f1b9 0f00 	cmp.w	r9, #0
 800d876:	d130      	bne.n	800d8da <__gethex+0x326>
 800d878:	b127      	cbz	r7, 800d884 <__gethex+0x2d0>
 800d87a:	4639      	mov	r1, r7
 800d87c:	4620      	mov	r0, r4
 800d87e:	f001 fc16 	bl	800f0ae <__any_on>
 800d882:	4681      	mov	r9, r0
 800d884:	117a      	asrs	r2, r7, #5
 800d886:	2301      	movs	r3, #1
 800d888:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d88c:	f007 071f 	and.w	r7, r7, #31
 800d890:	40bb      	lsls	r3, r7
 800d892:	4213      	tst	r3, r2
 800d894:	4629      	mov	r1, r5
 800d896:	4620      	mov	r0, r4
 800d898:	bf18      	it	ne
 800d89a:	f049 0902 	orrne.w	r9, r9, #2
 800d89e:	f7ff fe21 	bl	800d4e4 <rshift>
 800d8a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d8a6:	1b76      	subs	r6, r6, r5
 800d8a8:	2502      	movs	r5, #2
 800d8aa:	f1b9 0f00 	cmp.w	r9, #0
 800d8ae:	d047      	beq.n	800d940 <__gethex+0x38c>
 800d8b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d8b4:	2b02      	cmp	r3, #2
 800d8b6:	d015      	beq.n	800d8e4 <__gethex+0x330>
 800d8b8:	2b03      	cmp	r3, #3
 800d8ba:	d017      	beq.n	800d8ec <__gethex+0x338>
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d109      	bne.n	800d8d4 <__gethex+0x320>
 800d8c0:	f019 0f02 	tst.w	r9, #2
 800d8c4:	d006      	beq.n	800d8d4 <__gethex+0x320>
 800d8c6:	f8da 3000 	ldr.w	r3, [sl]
 800d8ca:	ea49 0903 	orr.w	r9, r9, r3
 800d8ce:	f019 0f01 	tst.w	r9, #1
 800d8d2:	d10e      	bne.n	800d8f2 <__gethex+0x33e>
 800d8d4:	f045 0510 	orr.w	r5, r5, #16
 800d8d8:	e032      	b.n	800d940 <__gethex+0x38c>
 800d8da:	f04f 0901 	mov.w	r9, #1
 800d8de:	e7d1      	b.n	800d884 <__gethex+0x2d0>
 800d8e0:	2501      	movs	r5, #1
 800d8e2:	e7e2      	b.n	800d8aa <__gethex+0x2f6>
 800d8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8e6:	f1c3 0301 	rsb	r3, r3, #1
 800d8ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d8ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d0f0      	beq.n	800d8d4 <__gethex+0x320>
 800d8f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d8f6:	f104 0314 	add.w	r3, r4, #20
 800d8fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d8fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d902:	f04f 0c00 	mov.w	ip, #0
 800d906:	4618      	mov	r0, r3
 800d908:	f853 2b04 	ldr.w	r2, [r3], #4
 800d90c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800d910:	d01b      	beq.n	800d94a <__gethex+0x396>
 800d912:	3201      	adds	r2, #1
 800d914:	6002      	str	r2, [r0, #0]
 800d916:	2d02      	cmp	r5, #2
 800d918:	f104 0314 	add.w	r3, r4, #20
 800d91c:	d13c      	bne.n	800d998 <__gethex+0x3e4>
 800d91e:	f8d8 2000 	ldr.w	r2, [r8]
 800d922:	3a01      	subs	r2, #1
 800d924:	42b2      	cmp	r2, r6
 800d926:	d109      	bne.n	800d93c <__gethex+0x388>
 800d928:	1171      	asrs	r1, r6, #5
 800d92a:	2201      	movs	r2, #1
 800d92c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d930:	f006 061f 	and.w	r6, r6, #31
 800d934:	fa02 f606 	lsl.w	r6, r2, r6
 800d938:	421e      	tst	r6, r3
 800d93a:	d13a      	bne.n	800d9b2 <__gethex+0x3fe>
 800d93c:	f045 0520 	orr.w	r5, r5, #32
 800d940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d942:	601c      	str	r4, [r3, #0]
 800d944:	9b02      	ldr	r3, [sp, #8]
 800d946:	601f      	str	r7, [r3, #0]
 800d948:	e6b0      	b.n	800d6ac <__gethex+0xf8>
 800d94a:	4299      	cmp	r1, r3
 800d94c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d950:	d8d9      	bhi.n	800d906 <__gethex+0x352>
 800d952:	68a3      	ldr	r3, [r4, #8]
 800d954:	459b      	cmp	fp, r3
 800d956:	db17      	blt.n	800d988 <__gethex+0x3d4>
 800d958:	6861      	ldr	r1, [r4, #4]
 800d95a:	9801      	ldr	r0, [sp, #4]
 800d95c:	3101      	adds	r1, #1
 800d95e:	f000 ff1d 	bl	800e79c <_Balloc>
 800d962:	4681      	mov	r9, r0
 800d964:	b918      	cbnz	r0, 800d96e <__gethex+0x3ba>
 800d966:	4b1a      	ldr	r3, [pc, #104]	@ (800d9d0 <__gethex+0x41c>)
 800d968:	4602      	mov	r2, r0
 800d96a:	2184      	movs	r1, #132	@ 0x84
 800d96c:	e6c5      	b.n	800d6fa <__gethex+0x146>
 800d96e:	6922      	ldr	r2, [r4, #16]
 800d970:	3202      	adds	r2, #2
 800d972:	f104 010c 	add.w	r1, r4, #12
 800d976:	0092      	lsls	r2, r2, #2
 800d978:	300c      	adds	r0, #12
 800d97a:	f7fe fef3 	bl	800c764 <memcpy>
 800d97e:	4621      	mov	r1, r4
 800d980:	9801      	ldr	r0, [sp, #4]
 800d982:	f000 ff4b 	bl	800e81c <_Bfree>
 800d986:	464c      	mov	r4, r9
 800d988:	6923      	ldr	r3, [r4, #16]
 800d98a:	1c5a      	adds	r2, r3, #1
 800d98c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d990:	6122      	str	r2, [r4, #16]
 800d992:	2201      	movs	r2, #1
 800d994:	615a      	str	r2, [r3, #20]
 800d996:	e7be      	b.n	800d916 <__gethex+0x362>
 800d998:	6922      	ldr	r2, [r4, #16]
 800d99a:	455a      	cmp	r2, fp
 800d99c:	dd0b      	ble.n	800d9b6 <__gethex+0x402>
 800d99e:	2101      	movs	r1, #1
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f7ff fd9f 	bl	800d4e4 <rshift>
 800d9a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d9aa:	3701      	adds	r7, #1
 800d9ac:	42bb      	cmp	r3, r7
 800d9ae:	f6ff aee0 	blt.w	800d772 <__gethex+0x1be>
 800d9b2:	2501      	movs	r5, #1
 800d9b4:	e7c2      	b.n	800d93c <__gethex+0x388>
 800d9b6:	f016 061f 	ands.w	r6, r6, #31
 800d9ba:	d0fa      	beq.n	800d9b2 <__gethex+0x3fe>
 800d9bc:	4453      	add	r3, sl
 800d9be:	f1c6 0620 	rsb	r6, r6, #32
 800d9c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d9c6:	f000 ffdb 	bl	800e980 <__hi0bits>
 800d9ca:	42b0      	cmp	r0, r6
 800d9cc:	dbe7      	blt.n	800d99e <__gethex+0x3ea>
 800d9ce:	e7f0      	b.n	800d9b2 <__gethex+0x3fe>
 800d9d0:	0800fdd5 	.word	0x0800fdd5

0800d9d4 <L_shift>:
 800d9d4:	f1c2 0208 	rsb	r2, r2, #8
 800d9d8:	0092      	lsls	r2, r2, #2
 800d9da:	b570      	push	{r4, r5, r6, lr}
 800d9dc:	f1c2 0620 	rsb	r6, r2, #32
 800d9e0:	6843      	ldr	r3, [r0, #4]
 800d9e2:	6804      	ldr	r4, [r0, #0]
 800d9e4:	fa03 f506 	lsl.w	r5, r3, r6
 800d9e8:	432c      	orrs	r4, r5
 800d9ea:	40d3      	lsrs	r3, r2
 800d9ec:	6004      	str	r4, [r0, #0]
 800d9ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800d9f2:	4288      	cmp	r0, r1
 800d9f4:	d3f4      	bcc.n	800d9e0 <L_shift+0xc>
 800d9f6:	bd70      	pop	{r4, r5, r6, pc}

0800d9f8 <__match>:
 800d9f8:	b530      	push	{r4, r5, lr}
 800d9fa:	6803      	ldr	r3, [r0, #0]
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da02:	b914      	cbnz	r4, 800da0a <__match+0x12>
 800da04:	6003      	str	r3, [r0, #0]
 800da06:	2001      	movs	r0, #1
 800da08:	bd30      	pop	{r4, r5, pc}
 800da0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800da12:	2d19      	cmp	r5, #25
 800da14:	bf98      	it	ls
 800da16:	3220      	addls	r2, #32
 800da18:	42a2      	cmp	r2, r4
 800da1a:	d0f0      	beq.n	800d9fe <__match+0x6>
 800da1c:	2000      	movs	r0, #0
 800da1e:	e7f3      	b.n	800da08 <__match+0x10>

0800da20 <__hexnan>:
 800da20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da24:	680b      	ldr	r3, [r1, #0]
 800da26:	6801      	ldr	r1, [r0, #0]
 800da28:	115e      	asrs	r6, r3, #5
 800da2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800da2e:	f013 031f 	ands.w	r3, r3, #31
 800da32:	b087      	sub	sp, #28
 800da34:	bf18      	it	ne
 800da36:	3604      	addne	r6, #4
 800da38:	2500      	movs	r5, #0
 800da3a:	1f37      	subs	r7, r6, #4
 800da3c:	4682      	mov	sl, r0
 800da3e:	4690      	mov	r8, r2
 800da40:	9301      	str	r3, [sp, #4]
 800da42:	f846 5c04 	str.w	r5, [r6, #-4]
 800da46:	46b9      	mov	r9, r7
 800da48:	463c      	mov	r4, r7
 800da4a:	9502      	str	r5, [sp, #8]
 800da4c:	46ab      	mov	fp, r5
 800da4e:	784a      	ldrb	r2, [r1, #1]
 800da50:	1c4b      	adds	r3, r1, #1
 800da52:	9303      	str	r3, [sp, #12]
 800da54:	b342      	cbz	r2, 800daa8 <__hexnan+0x88>
 800da56:	4610      	mov	r0, r2
 800da58:	9105      	str	r1, [sp, #20]
 800da5a:	9204      	str	r2, [sp, #16]
 800da5c:	f7ff fd94 	bl	800d588 <__hexdig_fun>
 800da60:	2800      	cmp	r0, #0
 800da62:	d151      	bne.n	800db08 <__hexnan+0xe8>
 800da64:	9a04      	ldr	r2, [sp, #16]
 800da66:	9905      	ldr	r1, [sp, #20]
 800da68:	2a20      	cmp	r2, #32
 800da6a:	d818      	bhi.n	800da9e <__hexnan+0x7e>
 800da6c:	9b02      	ldr	r3, [sp, #8]
 800da6e:	459b      	cmp	fp, r3
 800da70:	dd13      	ble.n	800da9a <__hexnan+0x7a>
 800da72:	454c      	cmp	r4, r9
 800da74:	d206      	bcs.n	800da84 <__hexnan+0x64>
 800da76:	2d07      	cmp	r5, #7
 800da78:	dc04      	bgt.n	800da84 <__hexnan+0x64>
 800da7a:	462a      	mov	r2, r5
 800da7c:	4649      	mov	r1, r9
 800da7e:	4620      	mov	r0, r4
 800da80:	f7ff ffa8 	bl	800d9d4 <L_shift>
 800da84:	4544      	cmp	r4, r8
 800da86:	d952      	bls.n	800db2e <__hexnan+0x10e>
 800da88:	2300      	movs	r3, #0
 800da8a:	f1a4 0904 	sub.w	r9, r4, #4
 800da8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800da92:	f8cd b008 	str.w	fp, [sp, #8]
 800da96:	464c      	mov	r4, r9
 800da98:	461d      	mov	r5, r3
 800da9a:	9903      	ldr	r1, [sp, #12]
 800da9c:	e7d7      	b.n	800da4e <__hexnan+0x2e>
 800da9e:	2a29      	cmp	r2, #41	@ 0x29
 800daa0:	d157      	bne.n	800db52 <__hexnan+0x132>
 800daa2:	3102      	adds	r1, #2
 800daa4:	f8ca 1000 	str.w	r1, [sl]
 800daa8:	f1bb 0f00 	cmp.w	fp, #0
 800daac:	d051      	beq.n	800db52 <__hexnan+0x132>
 800daae:	454c      	cmp	r4, r9
 800dab0:	d206      	bcs.n	800dac0 <__hexnan+0xa0>
 800dab2:	2d07      	cmp	r5, #7
 800dab4:	dc04      	bgt.n	800dac0 <__hexnan+0xa0>
 800dab6:	462a      	mov	r2, r5
 800dab8:	4649      	mov	r1, r9
 800daba:	4620      	mov	r0, r4
 800dabc:	f7ff ff8a 	bl	800d9d4 <L_shift>
 800dac0:	4544      	cmp	r4, r8
 800dac2:	d936      	bls.n	800db32 <__hexnan+0x112>
 800dac4:	f1a8 0204 	sub.w	r2, r8, #4
 800dac8:	4623      	mov	r3, r4
 800daca:	f853 1b04 	ldr.w	r1, [r3], #4
 800dace:	f842 1f04 	str.w	r1, [r2, #4]!
 800dad2:	429f      	cmp	r7, r3
 800dad4:	d2f9      	bcs.n	800daca <__hexnan+0xaa>
 800dad6:	1b3b      	subs	r3, r7, r4
 800dad8:	f023 0303 	bic.w	r3, r3, #3
 800dadc:	3304      	adds	r3, #4
 800dade:	3401      	adds	r4, #1
 800dae0:	3e03      	subs	r6, #3
 800dae2:	42b4      	cmp	r4, r6
 800dae4:	bf88      	it	hi
 800dae6:	2304      	movhi	r3, #4
 800dae8:	4443      	add	r3, r8
 800daea:	2200      	movs	r2, #0
 800daec:	f843 2b04 	str.w	r2, [r3], #4
 800daf0:	429f      	cmp	r7, r3
 800daf2:	d2fb      	bcs.n	800daec <__hexnan+0xcc>
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	b91b      	cbnz	r3, 800db00 <__hexnan+0xe0>
 800daf8:	4547      	cmp	r7, r8
 800dafa:	d128      	bne.n	800db4e <__hexnan+0x12e>
 800dafc:	2301      	movs	r3, #1
 800dafe:	603b      	str	r3, [r7, #0]
 800db00:	2005      	movs	r0, #5
 800db02:	b007      	add	sp, #28
 800db04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db08:	3501      	adds	r5, #1
 800db0a:	2d08      	cmp	r5, #8
 800db0c:	f10b 0b01 	add.w	fp, fp, #1
 800db10:	dd06      	ble.n	800db20 <__hexnan+0x100>
 800db12:	4544      	cmp	r4, r8
 800db14:	d9c1      	bls.n	800da9a <__hexnan+0x7a>
 800db16:	2300      	movs	r3, #0
 800db18:	f844 3c04 	str.w	r3, [r4, #-4]
 800db1c:	2501      	movs	r5, #1
 800db1e:	3c04      	subs	r4, #4
 800db20:	6822      	ldr	r2, [r4, #0]
 800db22:	f000 000f 	and.w	r0, r0, #15
 800db26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800db2a:	6020      	str	r0, [r4, #0]
 800db2c:	e7b5      	b.n	800da9a <__hexnan+0x7a>
 800db2e:	2508      	movs	r5, #8
 800db30:	e7b3      	b.n	800da9a <__hexnan+0x7a>
 800db32:	9b01      	ldr	r3, [sp, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d0dd      	beq.n	800daf4 <__hexnan+0xd4>
 800db38:	f1c3 0320 	rsb	r3, r3, #32
 800db3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db40:	40da      	lsrs	r2, r3
 800db42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800db46:	4013      	ands	r3, r2
 800db48:	f846 3c04 	str.w	r3, [r6, #-4]
 800db4c:	e7d2      	b.n	800daf4 <__hexnan+0xd4>
 800db4e:	3f04      	subs	r7, #4
 800db50:	e7d0      	b.n	800daf4 <__hexnan+0xd4>
 800db52:	2004      	movs	r0, #4
 800db54:	e7d5      	b.n	800db02 <__hexnan+0xe2>

0800db56 <__ssputs_r>:
 800db56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db5a:	688e      	ldr	r6, [r1, #8]
 800db5c:	461f      	mov	r7, r3
 800db5e:	42be      	cmp	r6, r7
 800db60:	680b      	ldr	r3, [r1, #0]
 800db62:	4682      	mov	sl, r0
 800db64:	460c      	mov	r4, r1
 800db66:	4690      	mov	r8, r2
 800db68:	d82d      	bhi.n	800dbc6 <__ssputs_r+0x70>
 800db6a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db6e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800db72:	d026      	beq.n	800dbc2 <__ssputs_r+0x6c>
 800db74:	6965      	ldr	r5, [r4, #20]
 800db76:	6909      	ldr	r1, [r1, #16]
 800db78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db7c:	eba3 0901 	sub.w	r9, r3, r1
 800db80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db84:	1c7b      	adds	r3, r7, #1
 800db86:	444b      	add	r3, r9
 800db88:	106d      	asrs	r5, r5, #1
 800db8a:	429d      	cmp	r5, r3
 800db8c:	bf38      	it	cc
 800db8e:	461d      	movcc	r5, r3
 800db90:	0553      	lsls	r3, r2, #21
 800db92:	d527      	bpl.n	800dbe4 <__ssputs_r+0x8e>
 800db94:	4629      	mov	r1, r5
 800db96:	f000 fb2f 	bl	800e1f8 <_malloc_r>
 800db9a:	4606      	mov	r6, r0
 800db9c:	b360      	cbz	r0, 800dbf8 <__ssputs_r+0xa2>
 800db9e:	6921      	ldr	r1, [r4, #16]
 800dba0:	464a      	mov	r2, r9
 800dba2:	f7fe fddf 	bl	800c764 <memcpy>
 800dba6:	89a3      	ldrh	r3, [r4, #12]
 800dba8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dbac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbb0:	81a3      	strh	r3, [r4, #12]
 800dbb2:	6126      	str	r6, [r4, #16]
 800dbb4:	6165      	str	r5, [r4, #20]
 800dbb6:	444e      	add	r6, r9
 800dbb8:	eba5 0509 	sub.w	r5, r5, r9
 800dbbc:	6026      	str	r6, [r4, #0]
 800dbbe:	60a5      	str	r5, [r4, #8]
 800dbc0:	463e      	mov	r6, r7
 800dbc2:	42be      	cmp	r6, r7
 800dbc4:	d900      	bls.n	800dbc8 <__ssputs_r+0x72>
 800dbc6:	463e      	mov	r6, r7
 800dbc8:	6820      	ldr	r0, [r4, #0]
 800dbca:	4632      	mov	r2, r6
 800dbcc:	4641      	mov	r1, r8
 800dbce:	f001 fb74 	bl	800f2ba <memmove>
 800dbd2:	68a3      	ldr	r3, [r4, #8]
 800dbd4:	1b9b      	subs	r3, r3, r6
 800dbd6:	60a3      	str	r3, [r4, #8]
 800dbd8:	6823      	ldr	r3, [r4, #0]
 800dbda:	4433      	add	r3, r6
 800dbdc:	6023      	str	r3, [r4, #0]
 800dbde:	2000      	movs	r0, #0
 800dbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe4:	462a      	mov	r2, r5
 800dbe6:	f001 fabd 	bl	800f164 <_realloc_r>
 800dbea:	4606      	mov	r6, r0
 800dbec:	2800      	cmp	r0, #0
 800dbee:	d1e0      	bne.n	800dbb2 <__ssputs_r+0x5c>
 800dbf0:	6921      	ldr	r1, [r4, #16]
 800dbf2:	4650      	mov	r0, sl
 800dbf4:	f7ff fc2c 	bl	800d450 <_free_r>
 800dbf8:	230c      	movs	r3, #12
 800dbfa:	f8ca 3000 	str.w	r3, [sl]
 800dbfe:	89a3      	ldrh	r3, [r4, #12]
 800dc00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc04:	81a3      	strh	r3, [r4, #12]
 800dc06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc0a:	e7e9      	b.n	800dbe0 <__ssputs_r+0x8a>

0800dc0c <_svfiprintf_r>:
 800dc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc10:	4698      	mov	r8, r3
 800dc12:	898b      	ldrh	r3, [r1, #12]
 800dc14:	061b      	lsls	r3, r3, #24
 800dc16:	b09d      	sub	sp, #116	@ 0x74
 800dc18:	4607      	mov	r7, r0
 800dc1a:	460d      	mov	r5, r1
 800dc1c:	4614      	mov	r4, r2
 800dc1e:	d510      	bpl.n	800dc42 <_svfiprintf_r+0x36>
 800dc20:	690b      	ldr	r3, [r1, #16]
 800dc22:	b973      	cbnz	r3, 800dc42 <_svfiprintf_r+0x36>
 800dc24:	2140      	movs	r1, #64	@ 0x40
 800dc26:	f000 fae7 	bl	800e1f8 <_malloc_r>
 800dc2a:	6028      	str	r0, [r5, #0]
 800dc2c:	6128      	str	r0, [r5, #16]
 800dc2e:	b930      	cbnz	r0, 800dc3e <_svfiprintf_r+0x32>
 800dc30:	230c      	movs	r3, #12
 800dc32:	603b      	str	r3, [r7, #0]
 800dc34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc38:	b01d      	add	sp, #116	@ 0x74
 800dc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc3e:	2340      	movs	r3, #64	@ 0x40
 800dc40:	616b      	str	r3, [r5, #20]
 800dc42:	2300      	movs	r3, #0
 800dc44:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc46:	2320      	movs	r3, #32
 800dc48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc50:	2330      	movs	r3, #48	@ 0x30
 800dc52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ddf0 <_svfiprintf_r+0x1e4>
 800dc56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc5a:	f04f 0901 	mov.w	r9, #1
 800dc5e:	4623      	mov	r3, r4
 800dc60:	469a      	mov	sl, r3
 800dc62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc66:	b10a      	cbz	r2, 800dc6c <_svfiprintf_r+0x60>
 800dc68:	2a25      	cmp	r2, #37	@ 0x25
 800dc6a:	d1f9      	bne.n	800dc60 <_svfiprintf_r+0x54>
 800dc6c:	ebba 0b04 	subs.w	fp, sl, r4
 800dc70:	d00b      	beq.n	800dc8a <_svfiprintf_r+0x7e>
 800dc72:	465b      	mov	r3, fp
 800dc74:	4622      	mov	r2, r4
 800dc76:	4629      	mov	r1, r5
 800dc78:	4638      	mov	r0, r7
 800dc7a:	f7ff ff6c 	bl	800db56 <__ssputs_r>
 800dc7e:	3001      	adds	r0, #1
 800dc80:	f000 80a7 	beq.w	800ddd2 <_svfiprintf_r+0x1c6>
 800dc84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc86:	445a      	add	r2, fp
 800dc88:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc8a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	f000 809f 	beq.w	800ddd2 <_svfiprintf_r+0x1c6>
 800dc94:	2300      	movs	r3, #0
 800dc96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc9e:	f10a 0a01 	add.w	sl, sl, #1
 800dca2:	9304      	str	r3, [sp, #16]
 800dca4:	9307      	str	r3, [sp, #28]
 800dca6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dcaa:	931a      	str	r3, [sp, #104]	@ 0x68
 800dcac:	4654      	mov	r4, sl
 800dcae:	2205      	movs	r2, #5
 800dcb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcb4:	484e      	ldr	r0, [pc, #312]	@ (800ddf0 <_svfiprintf_r+0x1e4>)
 800dcb6:	f7f2 fabb 	bl	8000230 <memchr>
 800dcba:	9a04      	ldr	r2, [sp, #16]
 800dcbc:	b9d8      	cbnz	r0, 800dcf6 <_svfiprintf_r+0xea>
 800dcbe:	06d0      	lsls	r0, r2, #27
 800dcc0:	bf44      	itt	mi
 800dcc2:	2320      	movmi	r3, #32
 800dcc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcc8:	0711      	lsls	r1, r2, #28
 800dcca:	bf44      	itt	mi
 800dccc:	232b      	movmi	r3, #43	@ 0x2b
 800dcce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcd2:	f89a 3000 	ldrb.w	r3, [sl]
 800dcd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcd8:	d015      	beq.n	800dd06 <_svfiprintf_r+0xfa>
 800dcda:	9a07      	ldr	r2, [sp, #28]
 800dcdc:	4654      	mov	r4, sl
 800dcde:	2000      	movs	r0, #0
 800dce0:	f04f 0c0a 	mov.w	ip, #10
 800dce4:	4621      	mov	r1, r4
 800dce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcea:	3b30      	subs	r3, #48	@ 0x30
 800dcec:	2b09      	cmp	r3, #9
 800dcee:	d94b      	bls.n	800dd88 <_svfiprintf_r+0x17c>
 800dcf0:	b1b0      	cbz	r0, 800dd20 <_svfiprintf_r+0x114>
 800dcf2:	9207      	str	r2, [sp, #28]
 800dcf4:	e014      	b.n	800dd20 <_svfiprintf_r+0x114>
 800dcf6:	eba0 0308 	sub.w	r3, r0, r8
 800dcfa:	fa09 f303 	lsl.w	r3, r9, r3
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	9304      	str	r3, [sp, #16]
 800dd02:	46a2      	mov	sl, r4
 800dd04:	e7d2      	b.n	800dcac <_svfiprintf_r+0xa0>
 800dd06:	9b03      	ldr	r3, [sp, #12]
 800dd08:	1d19      	adds	r1, r3, #4
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	9103      	str	r1, [sp, #12]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	bfbb      	ittet	lt
 800dd12:	425b      	neglt	r3, r3
 800dd14:	f042 0202 	orrlt.w	r2, r2, #2
 800dd18:	9307      	strge	r3, [sp, #28]
 800dd1a:	9307      	strlt	r3, [sp, #28]
 800dd1c:	bfb8      	it	lt
 800dd1e:	9204      	strlt	r2, [sp, #16]
 800dd20:	7823      	ldrb	r3, [r4, #0]
 800dd22:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd24:	d10a      	bne.n	800dd3c <_svfiprintf_r+0x130>
 800dd26:	7863      	ldrb	r3, [r4, #1]
 800dd28:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd2a:	d132      	bne.n	800dd92 <_svfiprintf_r+0x186>
 800dd2c:	9b03      	ldr	r3, [sp, #12]
 800dd2e:	1d1a      	adds	r2, r3, #4
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	9203      	str	r2, [sp, #12]
 800dd34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd38:	3402      	adds	r4, #2
 800dd3a:	9305      	str	r3, [sp, #20]
 800dd3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800de00 <_svfiprintf_r+0x1f4>
 800dd40:	7821      	ldrb	r1, [r4, #0]
 800dd42:	2203      	movs	r2, #3
 800dd44:	4650      	mov	r0, sl
 800dd46:	f7f2 fa73 	bl	8000230 <memchr>
 800dd4a:	b138      	cbz	r0, 800dd5c <_svfiprintf_r+0x150>
 800dd4c:	9b04      	ldr	r3, [sp, #16]
 800dd4e:	eba0 000a 	sub.w	r0, r0, sl
 800dd52:	2240      	movs	r2, #64	@ 0x40
 800dd54:	4082      	lsls	r2, r0
 800dd56:	4313      	orrs	r3, r2
 800dd58:	3401      	adds	r4, #1
 800dd5a:	9304      	str	r3, [sp, #16]
 800dd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd60:	4824      	ldr	r0, [pc, #144]	@ (800ddf4 <_svfiprintf_r+0x1e8>)
 800dd62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd66:	2206      	movs	r2, #6
 800dd68:	f7f2 fa62 	bl	8000230 <memchr>
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	d036      	beq.n	800ddde <_svfiprintf_r+0x1d2>
 800dd70:	4b21      	ldr	r3, [pc, #132]	@ (800ddf8 <_svfiprintf_r+0x1ec>)
 800dd72:	bb1b      	cbnz	r3, 800ddbc <_svfiprintf_r+0x1b0>
 800dd74:	9b03      	ldr	r3, [sp, #12]
 800dd76:	3307      	adds	r3, #7
 800dd78:	f023 0307 	bic.w	r3, r3, #7
 800dd7c:	3308      	adds	r3, #8
 800dd7e:	9303      	str	r3, [sp, #12]
 800dd80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd82:	4433      	add	r3, r6
 800dd84:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd86:	e76a      	b.n	800dc5e <_svfiprintf_r+0x52>
 800dd88:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd8c:	460c      	mov	r4, r1
 800dd8e:	2001      	movs	r0, #1
 800dd90:	e7a8      	b.n	800dce4 <_svfiprintf_r+0xd8>
 800dd92:	2300      	movs	r3, #0
 800dd94:	3401      	adds	r4, #1
 800dd96:	9305      	str	r3, [sp, #20]
 800dd98:	4619      	mov	r1, r3
 800dd9a:	f04f 0c0a 	mov.w	ip, #10
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dda4:	3a30      	subs	r2, #48	@ 0x30
 800dda6:	2a09      	cmp	r2, #9
 800dda8:	d903      	bls.n	800ddb2 <_svfiprintf_r+0x1a6>
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d0c6      	beq.n	800dd3c <_svfiprintf_r+0x130>
 800ddae:	9105      	str	r1, [sp, #20]
 800ddb0:	e7c4      	b.n	800dd3c <_svfiprintf_r+0x130>
 800ddb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	2301      	movs	r3, #1
 800ddba:	e7f0      	b.n	800dd9e <_svfiprintf_r+0x192>
 800ddbc:	ab03      	add	r3, sp, #12
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	462a      	mov	r2, r5
 800ddc2:	4b0e      	ldr	r3, [pc, #56]	@ (800ddfc <_svfiprintf_r+0x1f0>)
 800ddc4:	a904      	add	r1, sp, #16
 800ddc6:	4638      	mov	r0, r7
 800ddc8:	f7fc fe50 	bl	800aa6c <_printf_float>
 800ddcc:	1c42      	adds	r2, r0, #1
 800ddce:	4606      	mov	r6, r0
 800ddd0:	d1d6      	bne.n	800dd80 <_svfiprintf_r+0x174>
 800ddd2:	89ab      	ldrh	r3, [r5, #12]
 800ddd4:	065b      	lsls	r3, r3, #25
 800ddd6:	f53f af2d 	bmi.w	800dc34 <_svfiprintf_r+0x28>
 800ddda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dddc:	e72c      	b.n	800dc38 <_svfiprintf_r+0x2c>
 800ddde:	ab03      	add	r3, sp, #12
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	462a      	mov	r2, r5
 800dde4:	4b05      	ldr	r3, [pc, #20]	@ (800ddfc <_svfiprintf_r+0x1f0>)
 800dde6:	a904      	add	r1, sp, #16
 800dde8:	4638      	mov	r0, r7
 800ddea:	f7fd f8d7 	bl	800af9c <_printf_i>
 800ddee:	e7ed      	b.n	800ddcc <_svfiprintf_r+0x1c0>
 800ddf0:	0800fe46 	.word	0x0800fe46
 800ddf4:	0800fe50 	.word	0x0800fe50
 800ddf8:	0800aa6d 	.word	0x0800aa6d
 800ddfc:	0800db57 	.word	0x0800db57
 800de00:	0800fe4c 	.word	0x0800fe4c

0800de04 <_sungetc_r>:
 800de04:	b538      	push	{r3, r4, r5, lr}
 800de06:	1c4b      	adds	r3, r1, #1
 800de08:	4614      	mov	r4, r2
 800de0a:	d103      	bne.n	800de14 <_sungetc_r+0x10>
 800de0c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800de10:	4628      	mov	r0, r5
 800de12:	bd38      	pop	{r3, r4, r5, pc}
 800de14:	8993      	ldrh	r3, [r2, #12]
 800de16:	f023 0320 	bic.w	r3, r3, #32
 800de1a:	8193      	strh	r3, [r2, #12]
 800de1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de1e:	6852      	ldr	r2, [r2, #4]
 800de20:	b2cd      	uxtb	r5, r1
 800de22:	b18b      	cbz	r3, 800de48 <_sungetc_r+0x44>
 800de24:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800de26:	4293      	cmp	r3, r2
 800de28:	dd08      	ble.n	800de3c <_sungetc_r+0x38>
 800de2a:	6823      	ldr	r3, [r4, #0]
 800de2c:	1e5a      	subs	r2, r3, #1
 800de2e:	6022      	str	r2, [r4, #0]
 800de30:	f803 5c01 	strb.w	r5, [r3, #-1]
 800de34:	6863      	ldr	r3, [r4, #4]
 800de36:	3301      	adds	r3, #1
 800de38:	6063      	str	r3, [r4, #4]
 800de3a:	e7e9      	b.n	800de10 <_sungetc_r+0xc>
 800de3c:	4621      	mov	r1, r4
 800de3e:	f001 f957 	bl	800f0f0 <__submore>
 800de42:	2800      	cmp	r0, #0
 800de44:	d0f1      	beq.n	800de2a <_sungetc_r+0x26>
 800de46:	e7e1      	b.n	800de0c <_sungetc_r+0x8>
 800de48:	6921      	ldr	r1, [r4, #16]
 800de4a:	6823      	ldr	r3, [r4, #0]
 800de4c:	b151      	cbz	r1, 800de64 <_sungetc_r+0x60>
 800de4e:	4299      	cmp	r1, r3
 800de50:	d208      	bcs.n	800de64 <_sungetc_r+0x60>
 800de52:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800de56:	42a9      	cmp	r1, r5
 800de58:	d104      	bne.n	800de64 <_sungetc_r+0x60>
 800de5a:	3b01      	subs	r3, #1
 800de5c:	3201      	adds	r2, #1
 800de5e:	6023      	str	r3, [r4, #0]
 800de60:	6062      	str	r2, [r4, #4]
 800de62:	e7d5      	b.n	800de10 <_sungetc_r+0xc>
 800de64:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800de68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de6c:	6363      	str	r3, [r4, #52]	@ 0x34
 800de6e:	2303      	movs	r3, #3
 800de70:	63a3      	str	r3, [r4, #56]	@ 0x38
 800de72:	4623      	mov	r3, r4
 800de74:	f803 5f46 	strb.w	r5, [r3, #70]!
 800de78:	6023      	str	r3, [r4, #0]
 800de7a:	2301      	movs	r3, #1
 800de7c:	e7dc      	b.n	800de38 <_sungetc_r+0x34>

0800de7e <__ssrefill_r>:
 800de7e:	b510      	push	{r4, lr}
 800de80:	460c      	mov	r4, r1
 800de82:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800de84:	b169      	cbz	r1, 800dea2 <__ssrefill_r+0x24>
 800de86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de8a:	4299      	cmp	r1, r3
 800de8c:	d001      	beq.n	800de92 <__ssrefill_r+0x14>
 800de8e:	f7ff fadf 	bl	800d450 <_free_r>
 800de92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de94:	6063      	str	r3, [r4, #4]
 800de96:	2000      	movs	r0, #0
 800de98:	6360      	str	r0, [r4, #52]	@ 0x34
 800de9a:	b113      	cbz	r3, 800dea2 <__ssrefill_r+0x24>
 800de9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800de9e:	6023      	str	r3, [r4, #0]
 800dea0:	bd10      	pop	{r4, pc}
 800dea2:	6923      	ldr	r3, [r4, #16]
 800dea4:	6023      	str	r3, [r4, #0]
 800dea6:	2300      	movs	r3, #0
 800dea8:	6063      	str	r3, [r4, #4]
 800deaa:	89a3      	ldrh	r3, [r4, #12]
 800deac:	f043 0320 	orr.w	r3, r3, #32
 800deb0:	81a3      	strh	r3, [r4, #12]
 800deb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800deb6:	e7f3      	b.n	800dea0 <__ssrefill_r+0x22>

0800deb8 <__ssvfiscanf_r>:
 800deb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	460c      	mov	r4, r1
 800debe:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800dec2:	2100      	movs	r1, #0
 800dec4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800dec8:	49a6      	ldr	r1, [pc, #664]	@ (800e164 <__ssvfiscanf_r+0x2ac>)
 800deca:	91a0      	str	r1, [sp, #640]	@ 0x280
 800decc:	f10d 0804 	add.w	r8, sp, #4
 800ded0:	49a5      	ldr	r1, [pc, #660]	@ (800e168 <__ssvfiscanf_r+0x2b0>)
 800ded2:	4fa6      	ldr	r7, [pc, #664]	@ (800e16c <__ssvfiscanf_r+0x2b4>)
 800ded4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ded8:	4606      	mov	r6, r0
 800deda:	91a1      	str	r1, [sp, #644]	@ 0x284
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	f892 9000 	ldrb.w	r9, [r2]
 800dee2:	f1b9 0f00 	cmp.w	r9, #0
 800dee6:	f000 8158 	beq.w	800e19a <__ssvfiscanf_r+0x2e2>
 800deea:	f817 3009 	ldrb.w	r3, [r7, r9]
 800deee:	f013 0308 	ands.w	r3, r3, #8
 800def2:	f102 0501 	add.w	r5, r2, #1
 800def6:	d019      	beq.n	800df2c <__ssvfiscanf_r+0x74>
 800def8:	6863      	ldr	r3, [r4, #4]
 800defa:	2b00      	cmp	r3, #0
 800defc:	dd0f      	ble.n	800df1e <__ssvfiscanf_r+0x66>
 800defe:	6823      	ldr	r3, [r4, #0]
 800df00:	781a      	ldrb	r2, [r3, #0]
 800df02:	5cba      	ldrb	r2, [r7, r2]
 800df04:	0712      	lsls	r2, r2, #28
 800df06:	d401      	bmi.n	800df0c <__ssvfiscanf_r+0x54>
 800df08:	462a      	mov	r2, r5
 800df0a:	e7e8      	b.n	800dede <__ssvfiscanf_r+0x26>
 800df0c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800df0e:	3201      	adds	r2, #1
 800df10:	9245      	str	r2, [sp, #276]	@ 0x114
 800df12:	6862      	ldr	r2, [r4, #4]
 800df14:	3301      	adds	r3, #1
 800df16:	3a01      	subs	r2, #1
 800df18:	6062      	str	r2, [r4, #4]
 800df1a:	6023      	str	r3, [r4, #0]
 800df1c:	e7ec      	b.n	800def8 <__ssvfiscanf_r+0x40>
 800df1e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800df20:	4621      	mov	r1, r4
 800df22:	4630      	mov	r0, r6
 800df24:	4798      	blx	r3
 800df26:	2800      	cmp	r0, #0
 800df28:	d0e9      	beq.n	800defe <__ssvfiscanf_r+0x46>
 800df2a:	e7ed      	b.n	800df08 <__ssvfiscanf_r+0x50>
 800df2c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800df30:	f040 8085 	bne.w	800e03e <__ssvfiscanf_r+0x186>
 800df34:	9341      	str	r3, [sp, #260]	@ 0x104
 800df36:	9343      	str	r3, [sp, #268]	@ 0x10c
 800df38:	7853      	ldrb	r3, [r2, #1]
 800df3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800df3c:	bf02      	ittt	eq
 800df3e:	2310      	moveq	r3, #16
 800df40:	1c95      	addeq	r5, r2, #2
 800df42:	9341      	streq	r3, [sp, #260]	@ 0x104
 800df44:	220a      	movs	r2, #10
 800df46:	46aa      	mov	sl, r5
 800df48:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800df4c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800df50:	2b09      	cmp	r3, #9
 800df52:	d91e      	bls.n	800df92 <__ssvfiscanf_r+0xda>
 800df54:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800e170 <__ssvfiscanf_r+0x2b8>
 800df58:	2203      	movs	r2, #3
 800df5a:	4658      	mov	r0, fp
 800df5c:	f7f2 f968 	bl	8000230 <memchr>
 800df60:	b138      	cbz	r0, 800df72 <__ssvfiscanf_r+0xba>
 800df62:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800df64:	eba0 000b 	sub.w	r0, r0, fp
 800df68:	2301      	movs	r3, #1
 800df6a:	4083      	lsls	r3, r0
 800df6c:	4313      	orrs	r3, r2
 800df6e:	9341      	str	r3, [sp, #260]	@ 0x104
 800df70:	4655      	mov	r5, sl
 800df72:	f815 3b01 	ldrb.w	r3, [r5], #1
 800df76:	2b78      	cmp	r3, #120	@ 0x78
 800df78:	d806      	bhi.n	800df88 <__ssvfiscanf_r+0xd0>
 800df7a:	2b57      	cmp	r3, #87	@ 0x57
 800df7c:	d810      	bhi.n	800dfa0 <__ssvfiscanf_r+0xe8>
 800df7e:	2b25      	cmp	r3, #37	@ 0x25
 800df80:	d05d      	beq.n	800e03e <__ssvfiscanf_r+0x186>
 800df82:	d857      	bhi.n	800e034 <__ssvfiscanf_r+0x17c>
 800df84:	2b00      	cmp	r3, #0
 800df86:	d075      	beq.n	800e074 <__ssvfiscanf_r+0x1bc>
 800df88:	2303      	movs	r3, #3
 800df8a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800df8c:	230a      	movs	r3, #10
 800df8e:	9342      	str	r3, [sp, #264]	@ 0x108
 800df90:	e088      	b.n	800e0a4 <__ssvfiscanf_r+0x1ec>
 800df92:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800df94:	fb02 1103 	mla	r1, r2, r3, r1
 800df98:	3930      	subs	r1, #48	@ 0x30
 800df9a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800df9c:	4655      	mov	r5, sl
 800df9e:	e7d2      	b.n	800df46 <__ssvfiscanf_r+0x8e>
 800dfa0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800dfa4:	2a20      	cmp	r2, #32
 800dfa6:	d8ef      	bhi.n	800df88 <__ssvfiscanf_r+0xd0>
 800dfa8:	a101      	add	r1, pc, #4	@ (adr r1, 800dfb0 <__ssvfiscanf_r+0xf8>)
 800dfaa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dfae:	bf00      	nop
 800dfb0:	0800e083 	.word	0x0800e083
 800dfb4:	0800df89 	.word	0x0800df89
 800dfb8:	0800df89 	.word	0x0800df89
 800dfbc:	0800e0dd 	.word	0x0800e0dd
 800dfc0:	0800df89 	.word	0x0800df89
 800dfc4:	0800df89 	.word	0x0800df89
 800dfc8:	0800df89 	.word	0x0800df89
 800dfcc:	0800df89 	.word	0x0800df89
 800dfd0:	0800df89 	.word	0x0800df89
 800dfd4:	0800df89 	.word	0x0800df89
 800dfd8:	0800df89 	.word	0x0800df89
 800dfdc:	0800e0f3 	.word	0x0800e0f3
 800dfe0:	0800e0d9 	.word	0x0800e0d9
 800dfe4:	0800e03b 	.word	0x0800e03b
 800dfe8:	0800e03b 	.word	0x0800e03b
 800dfec:	0800e03b 	.word	0x0800e03b
 800dff0:	0800df89 	.word	0x0800df89
 800dff4:	0800e095 	.word	0x0800e095
 800dff8:	0800df89 	.word	0x0800df89
 800dffc:	0800df89 	.word	0x0800df89
 800e000:	0800df89 	.word	0x0800df89
 800e004:	0800df89 	.word	0x0800df89
 800e008:	0800e103 	.word	0x0800e103
 800e00c:	0800e09d 	.word	0x0800e09d
 800e010:	0800e07b 	.word	0x0800e07b
 800e014:	0800df89 	.word	0x0800df89
 800e018:	0800df89 	.word	0x0800df89
 800e01c:	0800e0ff 	.word	0x0800e0ff
 800e020:	0800df89 	.word	0x0800df89
 800e024:	0800e0d9 	.word	0x0800e0d9
 800e028:	0800df89 	.word	0x0800df89
 800e02c:	0800df89 	.word	0x0800df89
 800e030:	0800e083 	.word	0x0800e083
 800e034:	3b45      	subs	r3, #69	@ 0x45
 800e036:	2b02      	cmp	r3, #2
 800e038:	d8a6      	bhi.n	800df88 <__ssvfiscanf_r+0xd0>
 800e03a:	2305      	movs	r3, #5
 800e03c:	e031      	b.n	800e0a2 <__ssvfiscanf_r+0x1ea>
 800e03e:	6863      	ldr	r3, [r4, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	dd0d      	ble.n	800e060 <__ssvfiscanf_r+0x1a8>
 800e044:	6823      	ldr	r3, [r4, #0]
 800e046:	781a      	ldrb	r2, [r3, #0]
 800e048:	454a      	cmp	r2, r9
 800e04a:	f040 80a6 	bne.w	800e19a <__ssvfiscanf_r+0x2e2>
 800e04e:	3301      	adds	r3, #1
 800e050:	6862      	ldr	r2, [r4, #4]
 800e052:	6023      	str	r3, [r4, #0]
 800e054:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e056:	3a01      	subs	r2, #1
 800e058:	3301      	adds	r3, #1
 800e05a:	6062      	str	r2, [r4, #4]
 800e05c:	9345      	str	r3, [sp, #276]	@ 0x114
 800e05e:	e753      	b.n	800df08 <__ssvfiscanf_r+0x50>
 800e060:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e062:	4621      	mov	r1, r4
 800e064:	4630      	mov	r0, r6
 800e066:	4798      	blx	r3
 800e068:	2800      	cmp	r0, #0
 800e06a:	d0eb      	beq.n	800e044 <__ssvfiscanf_r+0x18c>
 800e06c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e06e:	2800      	cmp	r0, #0
 800e070:	f040 808b 	bne.w	800e18a <__ssvfiscanf_r+0x2d2>
 800e074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e078:	e08b      	b.n	800e192 <__ssvfiscanf_r+0x2da>
 800e07a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e07c:	f042 0220 	orr.w	r2, r2, #32
 800e080:	9241      	str	r2, [sp, #260]	@ 0x104
 800e082:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e088:	9241      	str	r2, [sp, #260]	@ 0x104
 800e08a:	2210      	movs	r2, #16
 800e08c:	2b6e      	cmp	r3, #110	@ 0x6e
 800e08e:	9242      	str	r2, [sp, #264]	@ 0x108
 800e090:	d902      	bls.n	800e098 <__ssvfiscanf_r+0x1e0>
 800e092:	e005      	b.n	800e0a0 <__ssvfiscanf_r+0x1e8>
 800e094:	2300      	movs	r3, #0
 800e096:	9342      	str	r3, [sp, #264]	@ 0x108
 800e098:	2303      	movs	r3, #3
 800e09a:	e002      	b.n	800e0a2 <__ssvfiscanf_r+0x1ea>
 800e09c:	2308      	movs	r3, #8
 800e09e:	9342      	str	r3, [sp, #264]	@ 0x108
 800e0a0:	2304      	movs	r3, #4
 800e0a2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e0a4:	6863      	ldr	r3, [r4, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	dd39      	ble.n	800e11e <__ssvfiscanf_r+0x266>
 800e0aa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e0ac:	0659      	lsls	r1, r3, #25
 800e0ae:	d404      	bmi.n	800e0ba <__ssvfiscanf_r+0x202>
 800e0b0:	6823      	ldr	r3, [r4, #0]
 800e0b2:	781a      	ldrb	r2, [r3, #0]
 800e0b4:	5cba      	ldrb	r2, [r7, r2]
 800e0b6:	0712      	lsls	r2, r2, #28
 800e0b8:	d438      	bmi.n	800e12c <__ssvfiscanf_r+0x274>
 800e0ba:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e0bc:	2b02      	cmp	r3, #2
 800e0be:	dc47      	bgt.n	800e150 <__ssvfiscanf_r+0x298>
 800e0c0:	466b      	mov	r3, sp
 800e0c2:	4622      	mov	r2, r4
 800e0c4:	a941      	add	r1, sp, #260	@ 0x104
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	f000 f928 	bl	800e31c <_scanf_chars>
 800e0cc:	2801      	cmp	r0, #1
 800e0ce:	d064      	beq.n	800e19a <__ssvfiscanf_r+0x2e2>
 800e0d0:	2802      	cmp	r0, #2
 800e0d2:	f47f af19 	bne.w	800df08 <__ssvfiscanf_r+0x50>
 800e0d6:	e7c9      	b.n	800e06c <__ssvfiscanf_r+0x1b4>
 800e0d8:	220a      	movs	r2, #10
 800e0da:	e7d7      	b.n	800e08c <__ssvfiscanf_r+0x1d4>
 800e0dc:	4629      	mov	r1, r5
 800e0de:	4640      	mov	r0, r8
 800e0e0:	f000 fa6a 	bl	800e5b8 <__sccl>
 800e0e4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0ea:	9341      	str	r3, [sp, #260]	@ 0x104
 800e0ec:	4605      	mov	r5, r0
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e7d7      	b.n	800e0a2 <__ssvfiscanf_r+0x1ea>
 800e0f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e0f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0f8:	9341      	str	r3, [sp, #260]	@ 0x104
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	e7d1      	b.n	800e0a2 <__ssvfiscanf_r+0x1ea>
 800e0fe:	2302      	movs	r3, #2
 800e100:	e7cf      	b.n	800e0a2 <__ssvfiscanf_r+0x1ea>
 800e102:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e104:	06c3      	lsls	r3, r0, #27
 800e106:	f53f aeff 	bmi.w	800df08 <__ssvfiscanf_r+0x50>
 800e10a:	9b00      	ldr	r3, [sp, #0]
 800e10c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e10e:	1d19      	adds	r1, r3, #4
 800e110:	9100      	str	r1, [sp, #0]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	07c0      	lsls	r0, r0, #31
 800e116:	bf4c      	ite	mi
 800e118:	801a      	strhmi	r2, [r3, #0]
 800e11a:	601a      	strpl	r2, [r3, #0]
 800e11c:	e6f4      	b.n	800df08 <__ssvfiscanf_r+0x50>
 800e11e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e120:	4621      	mov	r1, r4
 800e122:	4630      	mov	r0, r6
 800e124:	4798      	blx	r3
 800e126:	2800      	cmp	r0, #0
 800e128:	d0bf      	beq.n	800e0aa <__ssvfiscanf_r+0x1f2>
 800e12a:	e79f      	b.n	800e06c <__ssvfiscanf_r+0x1b4>
 800e12c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e12e:	3201      	adds	r2, #1
 800e130:	9245      	str	r2, [sp, #276]	@ 0x114
 800e132:	6862      	ldr	r2, [r4, #4]
 800e134:	3a01      	subs	r2, #1
 800e136:	2a00      	cmp	r2, #0
 800e138:	6062      	str	r2, [r4, #4]
 800e13a:	dd02      	ble.n	800e142 <__ssvfiscanf_r+0x28a>
 800e13c:	3301      	adds	r3, #1
 800e13e:	6023      	str	r3, [r4, #0]
 800e140:	e7b6      	b.n	800e0b0 <__ssvfiscanf_r+0x1f8>
 800e142:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e144:	4621      	mov	r1, r4
 800e146:	4630      	mov	r0, r6
 800e148:	4798      	blx	r3
 800e14a:	2800      	cmp	r0, #0
 800e14c:	d0b0      	beq.n	800e0b0 <__ssvfiscanf_r+0x1f8>
 800e14e:	e78d      	b.n	800e06c <__ssvfiscanf_r+0x1b4>
 800e150:	2b04      	cmp	r3, #4
 800e152:	dc0f      	bgt.n	800e174 <__ssvfiscanf_r+0x2bc>
 800e154:	466b      	mov	r3, sp
 800e156:	4622      	mov	r2, r4
 800e158:	a941      	add	r1, sp, #260	@ 0x104
 800e15a:	4630      	mov	r0, r6
 800e15c:	f000 f938 	bl	800e3d0 <_scanf_i>
 800e160:	e7b4      	b.n	800e0cc <__ssvfiscanf_r+0x214>
 800e162:	bf00      	nop
 800e164:	0800de05 	.word	0x0800de05
 800e168:	0800de7f 	.word	0x0800de7f
 800e16c:	0800ff59 	.word	0x0800ff59
 800e170:	0800fe4c 	.word	0x0800fe4c
 800e174:	4b0a      	ldr	r3, [pc, #40]	@ (800e1a0 <__ssvfiscanf_r+0x2e8>)
 800e176:	2b00      	cmp	r3, #0
 800e178:	f43f aec6 	beq.w	800df08 <__ssvfiscanf_r+0x50>
 800e17c:	466b      	mov	r3, sp
 800e17e:	4622      	mov	r2, r4
 800e180:	a941      	add	r1, sp, #260	@ 0x104
 800e182:	4630      	mov	r0, r6
 800e184:	f7fd f828 	bl	800b1d8 <_scanf_float>
 800e188:	e7a0      	b.n	800e0cc <__ssvfiscanf_r+0x214>
 800e18a:	89a3      	ldrh	r3, [r4, #12]
 800e18c:	065b      	lsls	r3, r3, #25
 800e18e:	f53f af71 	bmi.w	800e074 <__ssvfiscanf_r+0x1bc>
 800e192:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e19c:	e7f9      	b.n	800e192 <__ssvfiscanf_r+0x2da>
 800e19e:	bf00      	nop
 800e1a0:	0800b1d9 	.word	0x0800b1d9

0800e1a4 <malloc>:
 800e1a4:	4b02      	ldr	r3, [pc, #8]	@ (800e1b0 <malloc+0xc>)
 800e1a6:	4601      	mov	r1, r0
 800e1a8:	6818      	ldr	r0, [r3, #0]
 800e1aa:	f000 b825 	b.w	800e1f8 <_malloc_r>
 800e1ae:	bf00      	nop
 800e1b0:	20000540 	.word	0x20000540

0800e1b4 <sbrk_aligned>:
 800e1b4:	b570      	push	{r4, r5, r6, lr}
 800e1b6:	4e0f      	ldr	r6, [pc, #60]	@ (800e1f4 <sbrk_aligned+0x40>)
 800e1b8:	460c      	mov	r4, r1
 800e1ba:	6831      	ldr	r1, [r6, #0]
 800e1bc:	4605      	mov	r5, r0
 800e1be:	b911      	cbnz	r1, 800e1c6 <sbrk_aligned+0x12>
 800e1c0:	f001 f896 	bl	800f2f0 <_sbrk_r>
 800e1c4:	6030      	str	r0, [r6, #0]
 800e1c6:	4621      	mov	r1, r4
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	f001 f891 	bl	800f2f0 <_sbrk_r>
 800e1ce:	1c43      	adds	r3, r0, #1
 800e1d0:	d103      	bne.n	800e1da <sbrk_aligned+0x26>
 800e1d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	bd70      	pop	{r4, r5, r6, pc}
 800e1da:	1cc4      	adds	r4, r0, #3
 800e1dc:	f024 0403 	bic.w	r4, r4, #3
 800e1e0:	42a0      	cmp	r0, r4
 800e1e2:	d0f8      	beq.n	800e1d6 <sbrk_aligned+0x22>
 800e1e4:	1a21      	subs	r1, r4, r0
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	f001 f882 	bl	800f2f0 <_sbrk_r>
 800e1ec:	3001      	adds	r0, #1
 800e1ee:	d1f2      	bne.n	800e1d6 <sbrk_aligned+0x22>
 800e1f0:	e7ef      	b.n	800e1d2 <sbrk_aligned+0x1e>
 800e1f2:	bf00      	nop
 800e1f4:	20000d9c 	.word	0x20000d9c

0800e1f8 <_malloc_r>:
 800e1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1fc:	1ccd      	adds	r5, r1, #3
 800e1fe:	f025 0503 	bic.w	r5, r5, #3
 800e202:	3508      	adds	r5, #8
 800e204:	2d0c      	cmp	r5, #12
 800e206:	bf38      	it	cc
 800e208:	250c      	movcc	r5, #12
 800e20a:	2d00      	cmp	r5, #0
 800e20c:	4606      	mov	r6, r0
 800e20e:	db01      	blt.n	800e214 <_malloc_r+0x1c>
 800e210:	42a9      	cmp	r1, r5
 800e212:	d904      	bls.n	800e21e <_malloc_r+0x26>
 800e214:	230c      	movs	r3, #12
 800e216:	6033      	str	r3, [r6, #0]
 800e218:	2000      	movs	r0, #0
 800e21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e21e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2f4 <_malloc_r+0xfc>
 800e222:	f000 faaf 	bl	800e784 <__malloc_lock>
 800e226:	f8d8 3000 	ldr.w	r3, [r8]
 800e22a:	461c      	mov	r4, r3
 800e22c:	bb44      	cbnz	r4, 800e280 <_malloc_r+0x88>
 800e22e:	4629      	mov	r1, r5
 800e230:	4630      	mov	r0, r6
 800e232:	f7ff ffbf 	bl	800e1b4 <sbrk_aligned>
 800e236:	1c43      	adds	r3, r0, #1
 800e238:	4604      	mov	r4, r0
 800e23a:	d158      	bne.n	800e2ee <_malloc_r+0xf6>
 800e23c:	f8d8 4000 	ldr.w	r4, [r8]
 800e240:	4627      	mov	r7, r4
 800e242:	2f00      	cmp	r7, #0
 800e244:	d143      	bne.n	800e2ce <_malloc_r+0xd6>
 800e246:	2c00      	cmp	r4, #0
 800e248:	d04b      	beq.n	800e2e2 <_malloc_r+0xea>
 800e24a:	6823      	ldr	r3, [r4, #0]
 800e24c:	4639      	mov	r1, r7
 800e24e:	4630      	mov	r0, r6
 800e250:	eb04 0903 	add.w	r9, r4, r3
 800e254:	f001 f84c 	bl	800f2f0 <_sbrk_r>
 800e258:	4581      	cmp	r9, r0
 800e25a:	d142      	bne.n	800e2e2 <_malloc_r+0xea>
 800e25c:	6821      	ldr	r1, [r4, #0]
 800e25e:	1a6d      	subs	r5, r5, r1
 800e260:	4629      	mov	r1, r5
 800e262:	4630      	mov	r0, r6
 800e264:	f7ff ffa6 	bl	800e1b4 <sbrk_aligned>
 800e268:	3001      	adds	r0, #1
 800e26a:	d03a      	beq.n	800e2e2 <_malloc_r+0xea>
 800e26c:	6823      	ldr	r3, [r4, #0]
 800e26e:	442b      	add	r3, r5
 800e270:	6023      	str	r3, [r4, #0]
 800e272:	f8d8 3000 	ldr.w	r3, [r8]
 800e276:	685a      	ldr	r2, [r3, #4]
 800e278:	bb62      	cbnz	r2, 800e2d4 <_malloc_r+0xdc>
 800e27a:	f8c8 7000 	str.w	r7, [r8]
 800e27e:	e00f      	b.n	800e2a0 <_malloc_r+0xa8>
 800e280:	6822      	ldr	r2, [r4, #0]
 800e282:	1b52      	subs	r2, r2, r5
 800e284:	d420      	bmi.n	800e2c8 <_malloc_r+0xd0>
 800e286:	2a0b      	cmp	r2, #11
 800e288:	d917      	bls.n	800e2ba <_malloc_r+0xc2>
 800e28a:	1961      	adds	r1, r4, r5
 800e28c:	42a3      	cmp	r3, r4
 800e28e:	6025      	str	r5, [r4, #0]
 800e290:	bf18      	it	ne
 800e292:	6059      	strne	r1, [r3, #4]
 800e294:	6863      	ldr	r3, [r4, #4]
 800e296:	bf08      	it	eq
 800e298:	f8c8 1000 	streq.w	r1, [r8]
 800e29c:	5162      	str	r2, [r4, r5]
 800e29e:	604b      	str	r3, [r1, #4]
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f000 fa75 	bl	800e790 <__malloc_unlock>
 800e2a6:	f104 000b 	add.w	r0, r4, #11
 800e2aa:	1d23      	adds	r3, r4, #4
 800e2ac:	f020 0007 	bic.w	r0, r0, #7
 800e2b0:	1ac2      	subs	r2, r0, r3
 800e2b2:	bf1c      	itt	ne
 800e2b4:	1a1b      	subne	r3, r3, r0
 800e2b6:	50a3      	strne	r3, [r4, r2]
 800e2b8:	e7af      	b.n	800e21a <_malloc_r+0x22>
 800e2ba:	6862      	ldr	r2, [r4, #4]
 800e2bc:	42a3      	cmp	r3, r4
 800e2be:	bf0c      	ite	eq
 800e2c0:	f8c8 2000 	streq.w	r2, [r8]
 800e2c4:	605a      	strne	r2, [r3, #4]
 800e2c6:	e7eb      	b.n	800e2a0 <_malloc_r+0xa8>
 800e2c8:	4623      	mov	r3, r4
 800e2ca:	6864      	ldr	r4, [r4, #4]
 800e2cc:	e7ae      	b.n	800e22c <_malloc_r+0x34>
 800e2ce:	463c      	mov	r4, r7
 800e2d0:	687f      	ldr	r7, [r7, #4]
 800e2d2:	e7b6      	b.n	800e242 <_malloc_r+0x4a>
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	42a3      	cmp	r3, r4
 800e2da:	d1fb      	bne.n	800e2d4 <_malloc_r+0xdc>
 800e2dc:	2300      	movs	r3, #0
 800e2de:	6053      	str	r3, [r2, #4]
 800e2e0:	e7de      	b.n	800e2a0 <_malloc_r+0xa8>
 800e2e2:	230c      	movs	r3, #12
 800e2e4:	6033      	str	r3, [r6, #0]
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	f000 fa52 	bl	800e790 <__malloc_unlock>
 800e2ec:	e794      	b.n	800e218 <_malloc_r+0x20>
 800e2ee:	6005      	str	r5, [r0, #0]
 800e2f0:	e7d6      	b.n	800e2a0 <_malloc_r+0xa8>
 800e2f2:	bf00      	nop
 800e2f4:	20000da0 	.word	0x20000da0

0800e2f8 <__ascii_mbtowc>:
 800e2f8:	b082      	sub	sp, #8
 800e2fa:	b901      	cbnz	r1, 800e2fe <__ascii_mbtowc+0x6>
 800e2fc:	a901      	add	r1, sp, #4
 800e2fe:	b142      	cbz	r2, 800e312 <__ascii_mbtowc+0x1a>
 800e300:	b14b      	cbz	r3, 800e316 <__ascii_mbtowc+0x1e>
 800e302:	7813      	ldrb	r3, [r2, #0]
 800e304:	600b      	str	r3, [r1, #0]
 800e306:	7812      	ldrb	r2, [r2, #0]
 800e308:	1e10      	subs	r0, r2, #0
 800e30a:	bf18      	it	ne
 800e30c:	2001      	movne	r0, #1
 800e30e:	b002      	add	sp, #8
 800e310:	4770      	bx	lr
 800e312:	4610      	mov	r0, r2
 800e314:	e7fb      	b.n	800e30e <__ascii_mbtowc+0x16>
 800e316:	f06f 0001 	mvn.w	r0, #1
 800e31a:	e7f8      	b.n	800e30e <__ascii_mbtowc+0x16>

0800e31c <_scanf_chars>:
 800e31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e320:	4615      	mov	r5, r2
 800e322:	688a      	ldr	r2, [r1, #8]
 800e324:	4680      	mov	r8, r0
 800e326:	460c      	mov	r4, r1
 800e328:	b932      	cbnz	r2, 800e338 <_scanf_chars+0x1c>
 800e32a:	698a      	ldr	r2, [r1, #24]
 800e32c:	2a00      	cmp	r2, #0
 800e32e:	bf14      	ite	ne
 800e330:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800e334:	2201      	moveq	r2, #1
 800e336:	608a      	str	r2, [r1, #8]
 800e338:	6822      	ldr	r2, [r4, #0]
 800e33a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e3cc <_scanf_chars+0xb0>
 800e33e:	06d1      	lsls	r1, r2, #27
 800e340:	bf5f      	itttt	pl
 800e342:	681a      	ldrpl	r2, [r3, #0]
 800e344:	1d11      	addpl	r1, r2, #4
 800e346:	6019      	strpl	r1, [r3, #0]
 800e348:	6816      	ldrpl	r6, [r2, #0]
 800e34a:	2700      	movs	r7, #0
 800e34c:	69a0      	ldr	r0, [r4, #24]
 800e34e:	b188      	cbz	r0, 800e374 <_scanf_chars+0x58>
 800e350:	2801      	cmp	r0, #1
 800e352:	d107      	bne.n	800e364 <_scanf_chars+0x48>
 800e354:	682b      	ldr	r3, [r5, #0]
 800e356:	781a      	ldrb	r2, [r3, #0]
 800e358:	6963      	ldr	r3, [r4, #20]
 800e35a:	5c9b      	ldrb	r3, [r3, r2]
 800e35c:	b953      	cbnz	r3, 800e374 <_scanf_chars+0x58>
 800e35e:	2f00      	cmp	r7, #0
 800e360:	d031      	beq.n	800e3c6 <_scanf_chars+0xaa>
 800e362:	e022      	b.n	800e3aa <_scanf_chars+0x8e>
 800e364:	2802      	cmp	r0, #2
 800e366:	d120      	bne.n	800e3aa <_scanf_chars+0x8e>
 800e368:	682b      	ldr	r3, [r5, #0]
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e370:	071b      	lsls	r3, r3, #28
 800e372:	d41a      	bmi.n	800e3aa <_scanf_chars+0x8e>
 800e374:	6823      	ldr	r3, [r4, #0]
 800e376:	06da      	lsls	r2, r3, #27
 800e378:	bf5e      	ittt	pl
 800e37a:	682b      	ldrpl	r3, [r5, #0]
 800e37c:	781b      	ldrbpl	r3, [r3, #0]
 800e37e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e382:	682a      	ldr	r2, [r5, #0]
 800e384:	686b      	ldr	r3, [r5, #4]
 800e386:	3201      	adds	r2, #1
 800e388:	602a      	str	r2, [r5, #0]
 800e38a:	68a2      	ldr	r2, [r4, #8]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	3a01      	subs	r2, #1
 800e390:	606b      	str	r3, [r5, #4]
 800e392:	3701      	adds	r7, #1
 800e394:	60a2      	str	r2, [r4, #8]
 800e396:	b142      	cbz	r2, 800e3aa <_scanf_chars+0x8e>
 800e398:	2b00      	cmp	r3, #0
 800e39a:	dcd7      	bgt.n	800e34c <_scanf_chars+0x30>
 800e39c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	4640      	mov	r0, r8
 800e3a4:	4798      	blx	r3
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	d0d0      	beq.n	800e34c <_scanf_chars+0x30>
 800e3aa:	6823      	ldr	r3, [r4, #0]
 800e3ac:	f013 0310 	ands.w	r3, r3, #16
 800e3b0:	d105      	bne.n	800e3be <_scanf_chars+0xa2>
 800e3b2:	68e2      	ldr	r2, [r4, #12]
 800e3b4:	3201      	adds	r2, #1
 800e3b6:	60e2      	str	r2, [r4, #12]
 800e3b8:	69a2      	ldr	r2, [r4, #24]
 800e3ba:	b102      	cbz	r2, 800e3be <_scanf_chars+0xa2>
 800e3bc:	7033      	strb	r3, [r6, #0]
 800e3be:	6923      	ldr	r3, [r4, #16]
 800e3c0:	443b      	add	r3, r7
 800e3c2:	6123      	str	r3, [r4, #16]
 800e3c4:	2000      	movs	r0, #0
 800e3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ca:	bf00      	nop
 800e3cc:	0800ff59 	.word	0x0800ff59

0800e3d0 <_scanf_i>:
 800e3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3d4:	4698      	mov	r8, r3
 800e3d6:	4b74      	ldr	r3, [pc, #464]	@ (800e5a8 <_scanf_i+0x1d8>)
 800e3d8:	460c      	mov	r4, r1
 800e3da:	4682      	mov	sl, r0
 800e3dc:	4616      	mov	r6, r2
 800e3de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e3e2:	b087      	sub	sp, #28
 800e3e4:	ab03      	add	r3, sp, #12
 800e3e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e3ea:	4b70      	ldr	r3, [pc, #448]	@ (800e5ac <_scanf_i+0x1dc>)
 800e3ec:	69a1      	ldr	r1, [r4, #24]
 800e3ee:	4a70      	ldr	r2, [pc, #448]	@ (800e5b0 <_scanf_i+0x1e0>)
 800e3f0:	2903      	cmp	r1, #3
 800e3f2:	bf08      	it	eq
 800e3f4:	461a      	moveq	r2, r3
 800e3f6:	68a3      	ldr	r3, [r4, #8]
 800e3f8:	9201      	str	r2, [sp, #4]
 800e3fa:	1e5a      	subs	r2, r3, #1
 800e3fc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e400:	bf88      	it	hi
 800e402:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e406:	4627      	mov	r7, r4
 800e408:	bf82      	ittt	hi
 800e40a:	eb03 0905 	addhi.w	r9, r3, r5
 800e40e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e412:	60a3      	strhi	r3, [r4, #8]
 800e414:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e418:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e41c:	bf98      	it	ls
 800e41e:	f04f 0900 	movls.w	r9, #0
 800e422:	6023      	str	r3, [r4, #0]
 800e424:	463d      	mov	r5, r7
 800e426:	f04f 0b00 	mov.w	fp, #0
 800e42a:	6831      	ldr	r1, [r6, #0]
 800e42c:	ab03      	add	r3, sp, #12
 800e42e:	7809      	ldrb	r1, [r1, #0]
 800e430:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e434:	2202      	movs	r2, #2
 800e436:	f7f1 fefb 	bl	8000230 <memchr>
 800e43a:	b328      	cbz	r0, 800e488 <_scanf_i+0xb8>
 800e43c:	f1bb 0f01 	cmp.w	fp, #1
 800e440:	d159      	bne.n	800e4f6 <_scanf_i+0x126>
 800e442:	6862      	ldr	r2, [r4, #4]
 800e444:	b92a      	cbnz	r2, 800e452 <_scanf_i+0x82>
 800e446:	6822      	ldr	r2, [r4, #0]
 800e448:	2108      	movs	r1, #8
 800e44a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e44e:	6061      	str	r1, [r4, #4]
 800e450:	6022      	str	r2, [r4, #0]
 800e452:	6822      	ldr	r2, [r4, #0]
 800e454:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e458:	6022      	str	r2, [r4, #0]
 800e45a:	68a2      	ldr	r2, [r4, #8]
 800e45c:	1e51      	subs	r1, r2, #1
 800e45e:	60a1      	str	r1, [r4, #8]
 800e460:	b192      	cbz	r2, 800e488 <_scanf_i+0xb8>
 800e462:	6832      	ldr	r2, [r6, #0]
 800e464:	1c51      	adds	r1, r2, #1
 800e466:	6031      	str	r1, [r6, #0]
 800e468:	7812      	ldrb	r2, [r2, #0]
 800e46a:	f805 2b01 	strb.w	r2, [r5], #1
 800e46e:	6872      	ldr	r2, [r6, #4]
 800e470:	3a01      	subs	r2, #1
 800e472:	2a00      	cmp	r2, #0
 800e474:	6072      	str	r2, [r6, #4]
 800e476:	dc07      	bgt.n	800e488 <_scanf_i+0xb8>
 800e478:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e47c:	4631      	mov	r1, r6
 800e47e:	4650      	mov	r0, sl
 800e480:	4790      	blx	r2
 800e482:	2800      	cmp	r0, #0
 800e484:	f040 8085 	bne.w	800e592 <_scanf_i+0x1c2>
 800e488:	f10b 0b01 	add.w	fp, fp, #1
 800e48c:	f1bb 0f03 	cmp.w	fp, #3
 800e490:	d1cb      	bne.n	800e42a <_scanf_i+0x5a>
 800e492:	6863      	ldr	r3, [r4, #4]
 800e494:	b90b      	cbnz	r3, 800e49a <_scanf_i+0xca>
 800e496:	230a      	movs	r3, #10
 800e498:	6063      	str	r3, [r4, #4]
 800e49a:	6863      	ldr	r3, [r4, #4]
 800e49c:	4945      	ldr	r1, [pc, #276]	@ (800e5b4 <_scanf_i+0x1e4>)
 800e49e:	6960      	ldr	r0, [r4, #20]
 800e4a0:	1ac9      	subs	r1, r1, r3
 800e4a2:	f000 f889 	bl	800e5b8 <__sccl>
 800e4a6:	f04f 0b00 	mov.w	fp, #0
 800e4aa:	68a3      	ldr	r3, [r4, #8]
 800e4ac:	6822      	ldr	r2, [r4, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d03d      	beq.n	800e52e <_scanf_i+0x15e>
 800e4b2:	6831      	ldr	r1, [r6, #0]
 800e4b4:	6960      	ldr	r0, [r4, #20]
 800e4b6:	f891 c000 	ldrb.w	ip, [r1]
 800e4ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	d035      	beq.n	800e52e <_scanf_i+0x15e>
 800e4c2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e4c6:	d124      	bne.n	800e512 <_scanf_i+0x142>
 800e4c8:	0510      	lsls	r0, r2, #20
 800e4ca:	d522      	bpl.n	800e512 <_scanf_i+0x142>
 800e4cc:	f10b 0b01 	add.w	fp, fp, #1
 800e4d0:	f1b9 0f00 	cmp.w	r9, #0
 800e4d4:	d003      	beq.n	800e4de <_scanf_i+0x10e>
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800e4dc:	60a3      	str	r3, [r4, #8]
 800e4de:	6873      	ldr	r3, [r6, #4]
 800e4e0:	3b01      	subs	r3, #1
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	6073      	str	r3, [r6, #4]
 800e4e6:	dd1b      	ble.n	800e520 <_scanf_i+0x150>
 800e4e8:	6833      	ldr	r3, [r6, #0]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	6033      	str	r3, [r6, #0]
 800e4ee:	68a3      	ldr	r3, [r4, #8]
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	60a3      	str	r3, [r4, #8]
 800e4f4:	e7d9      	b.n	800e4aa <_scanf_i+0xda>
 800e4f6:	f1bb 0f02 	cmp.w	fp, #2
 800e4fa:	d1ae      	bne.n	800e45a <_scanf_i+0x8a>
 800e4fc:	6822      	ldr	r2, [r4, #0]
 800e4fe:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e502:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e506:	d1c4      	bne.n	800e492 <_scanf_i+0xc2>
 800e508:	2110      	movs	r1, #16
 800e50a:	6061      	str	r1, [r4, #4]
 800e50c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e510:	e7a2      	b.n	800e458 <_scanf_i+0x88>
 800e512:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e516:	6022      	str	r2, [r4, #0]
 800e518:	780b      	ldrb	r3, [r1, #0]
 800e51a:	f805 3b01 	strb.w	r3, [r5], #1
 800e51e:	e7de      	b.n	800e4de <_scanf_i+0x10e>
 800e520:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e524:	4631      	mov	r1, r6
 800e526:	4650      	mov	r0, sl
 800e528:	4798      	blx	r3
 800e52a:	2800      	cmp	r0, #0
 800e52c:	d0df      	beq.n	800e4ee <_scanf_i+0x11e>
 800e52e:	6823      	ldr	r3, [r4, #0]
 800e530:	05d9      	lsls	r1, r3, #23
 800e532:	d50d      	bpl.n	800e550 <_scanf_i+0x180>
 800e534:	42bd      	cmp	r5, r7
 800e536:	d909      	bls.n	800e54c <_scanf_i+0x17c>
 800e538:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e53c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e540:	4632      	mov	r2, r6
 800e542:	4650      	mov	r0, sl
 800e544:	4798      	blx	r3
 800e546:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800e54a:	464d      	mov	r5, r9
 800e54c:	42bd      	cmp	r5, r7
 800e54e:	d028      	beq.n	800e5a2 <_scanf_i+0x1d2>
 800e550:	6822      	ldr	r2, [r4, #0]
 800e552:	f012 0210 	ands.w	r2, r2, #16
 800e556:	d113      	bne.n	800e580 <_scanf_i+0x1b0>
 800e558:	702a      	strb	r2, [r5, #0]
 800e55a:	6863      	ldr	r3, [r4, #4]
 800e55c:	9e01      	ldr	r6, [sp, #4]
 800e55e:	4639      	mov	r1, r7
 800e560:	4650      	mov	r0, sl
 800e562:	47b0      	blx	r6
 800e564:	f8d8 3000 	ldr.w	r3, [r8]
 800e568:	6821      	ldr	r1, [r4, #0]
 800e56a:	1d1a      	adds	r2, r3, #4
 800e56c:	f8c8 2000 	str.w	r2, [r8]
 800e570:	f011 0f20 	tst.w	r1, #32
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	d00f      	beq.n	800e598 <_scanf_i+0x1c8>
 800e578:	6018      	str	r0, [r3, #0]
 800e57a:	68e3      	ldr	r3, [r4, #12]
 800e57c:	3301      	adds	r3, #1
 800e57e:	60e3      	str	r3, [r4, #12]
 800e580:	6923      	ldr	r3, [r4, #16]
 800e582:	1bed      	subs	r5, r5, r7
 800e584:	445d      	add	r5, fp
 800e586:	442b      	add	r3, r5
 800e588:	6123      	str	r3, [r4, #16]
 800e58a:	2000      	movs	r0, #0
 800e58c:	b007      	add	sp, #28
 800e58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e592:	f04f 0b00 	mov.w	fp, #0
 800e596:	e7ca      	b.n	800e52e <_scanf_i+0x15e>
 800e598:	07ca      	lsls	r2, r1, #31
 800e59a:	bf4c      	ite	mi
 800e59c:	8018      	strhmi	r0, [r3, #0]
 800e59e:	6018      	strpl	r0, [r3, #0]
 800e5a0:	e7eb      	b.n	800e57a <_scanf_i+0x1aa>
 800e5a2:	2001      	movs	r0, #1
 800e5a4:	e7f2      	b.n	800e58c <_scanf_i+0x1bc>
 800e5a6:	bf00      	nop
 800e5a8:	0800fce0 	.word	0x0800fce0
 800e5ac:	0800c5d9 	.word	0x0800c5d9
 800e5b0:	0800f29d 	.word	0x0800f29d
 800e5b4:	0800fe67 	.word	0x0800fe67

0800e5b8 <__sccl>:
 800e5b8:	b570      	push	{r4, r5, r6, lr}
 800e5ba:	780b      	ldrb	r3, [r1, #0]
 800e5bc:	4604      	mov	r4, r0
 800e5be:	2b5e      	cmp	r3, #94	@ 0x5e
 800e5c0:	bf0b      	itete	eq
 800e5c2:	784b      	ldrbeq	r3, [r1, #1]
 800e5c4:	1c4a      	addne	r2, r1, #1
 800e5c6:	1c8a      	addeq	r2, r1, #2
 800e5c8:	2100      	movne	r1, #0
 800e5ca:	bf08      	it	eq
 800e5cc:	2101      	moveq	r1, #1
 800e5ce:	3801      	subs	r0, #1
 800e5d0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e5d4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e5d8:	42a8      	cmp	r0, r5
 800e5da:	d1fb      	bne.n	800e5d4 <__sccl+0x1c>
 800e5dc:	b90b      	cbnz	r3, 800e5e2 <__sccl+0x2a>
 800e5de:	1e50      	subs	r0, r2, #1
 800e5e0:	bd70      	pop	{r4, r5, r6, pc}
 800e5e2:	f081 0101 	eor.w	r1, r1, #1
 800e5e6:	54e1      	strb	r1, [r4, r3]
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e5f0:	2d2d      	cmp	r5, #45	@ 0x2d
 800e5f2:	d005      	beq.n	800e600 <__sccl+0x48>
 800e5f4:	2d5d      	cmp	r5, #93	@ 0x5d
 800e5f6:	d016      	beq.n	800e626 <__sccl+0x6e>
 800e5f8:	2d00      	cmp	r5, #0
 800e5fa:	d0f1      	beq.n	800e5e0 <__sccl+0x28>
 800e5fc:	462b      	mov	r3, r5
 800e5fe:	e7f2      	b.n	800e5e6 <__sccl+0x2e>
 800e600:	7846      	ldrb	r6, [r0, #1]
 800e602:	2e5d      	cmp	r6, #93	@ 0x5d
 800e604:	d0fa      	beq.n	800e5fc <__sccl+0x44>
 800e606:	42b3      	cmp	r3, r6
 800e608:	dcf8      	bgt.n	800e5fc <__sccl+0x44>
 800e60a:	3002      	adds	r0, #2
 800e60c:	461a      	mov	r2, r3
 800e60e:	3201      	adds	r2, #1
 800e610:	4296      	cmp	r6, r2
 800e612:	54a1      	strb	r1, [r4, r2]
 800e614:	dcfb      	bgt.n	800e60e <__sccl+0x56>
 800e616:	1af2      	subs	r2, r6, r3
 800e618:	3a01      	subs	r2, #1
 800e61a:	1c5d      	adds	r5, r3, #1
 800e61c:	42b3      	cmp	r3, r6
 800e61e:	bfa8      	it	ge
 800e620:	2200      	movge	r2, #0
 800e622:	18ab      	adds	r3, r5, r2
 800e624:	e7e1      	b.n	800e5ea <__sccl+0x32>
 800e626:	4610      	mov	r0, r2
 800e628:	e7da      	b.n	800e5e0 <__sccl+0x28>
	...

0800e62c <__sflush_r>:
 800e62c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e634:	0716      	lsls	r6, r2, #28
 800e636:	4605      	mov	r5, r0
 800e638:	460c      	mov	r4, r1
 800e63a:	d454      	bmi.n	800e6e6 <__sflush_r+0xba>
 800e63c:	684b      	ldr	r3, [r1, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	dc02      	bgt.n	800e648 <__sflush_r+0x1c>
 800e642:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e644:	2b00      	cmp	r3, #0
 800e646:	dd48      	ble.n	800e6da <__sflush_r+0xae>
 800e648:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e64a:	2e00      	cmp	r6, #0
 800e64c:	d045      	beq.n	800e6da <__sflush_r+0xae>
 800e64e:	2300      	movs	r3, #0
 800e650:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e654:	682f      	ldr	r7, [r5, #0]
 800e656:	6a21      	ldr	r1, [r4, #32]
 800e658:	602b      	str	r3, [r5, #0]
 800e65a:	d030      	beq.n	800e6be <__sflush_r+0x92>
 800e65c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e65e:	89a3      	ldrh	r3, [r4, #12]
 800e660:	0759      	lsls	r1, r3, #29
 800e662:	d505      	bpl.n	800e670 <__sflush_r+0x44>
 800e664:	6863      	ldr	r3, [r4, #4]
 800e666:	1ad2      	subs	r2, r2, r3
 800e668:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e66a:	b10b      	cbz	r3, 800e670 <__sflush_r+0x44>
 800e66c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e66e:	1ad2      	subs	r2, r2, r3
 800e670:	2300      	movs	r3, #0
 800e672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e674:	6a21      	ldr	r1, [r4, #32]
 800e676:	4628      	mov	r0, r5
 800e678:	47b0      	blx	r6
 800e67a:	1c43      	adds	r3, r0, #1
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	d106      	bne.n	800e68e <__sflush_r+0x62>
 800e680:	6829      	ldr	r1, [r5, #0]
 800e682:	291d      	cmp	r1, #29
 800e684:	d82b      	bhi.n	800e6de <__sflush_r+0xb2>
 800e686:	4a2a      	ldr	r2, [pc, #168]	@ (800e730 <__sflush_r+0x104>)
 800e688:	40ca      	lsrs	r2, r1
 800e68a:	07d6      	lsls	r6, r2, #31
 800e68c:	d527      	bpl.n	800e6de <__sflush_r+0xb2>
 800e68e:	2200      	movs	r2, #0
 800e690:	6062      	str	r2, [r4, #4]
 800e692:	04d9      	lsls	r1, r3, #19
 800e694:	6922      	ldr	r2, [r4, #16]
 800e696:	6022      	str	r2, [r4, #0]
 800e698:	d504      	bpl.n	800e6a4 <__sflush_r+0x78>
 800e69a:	1c42      	adds	r2, r0, #1
 800e69c:	d101      	bne.n	800e6a2 <__sflush_r+0x76>
 800e69e:	682b      	ldr	r3, [r5, #0]
 800e6a0:	b903      	cbnz	r3, 800e6a4 <__sflush_r+0x78>
 800e6a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800e6a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6a6:	602f      	str	r7, [r5, #0]
 800e6a8:	b1b9      	cbz	r1, 800e6da <__sflush_r+0xae>
 800e6aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6ae:	4299      	cmp	r1, r3
 800e6b0:	d002      	beq.n	800e6b8 <__sflush_r+0x8c>
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f7fe fecc 	bl	800d450 <_free_r>
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6bc:	e00d      	b.n	800e6da <__sflush_r+0xae>
 800e6be:	2301      	movs	r3, #1
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	47b0      	blx	r6
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	1c50      	adds	r0, r2, #1
 800e6c8:	d1c9      	bne.n	800e65e <__sflush_r+0x32>
 800e6ca:	682b      	ldr	r3, [r5, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d0c6      	beq.n	800e65e <__sflush_r+0x32>
 800e6d0:	2b1d      	cmp	r3, #29
 800e6d2:	d001      	beq.n	800e6d8 <__sflush_r+0xac>
 800e6d4:	2b16      	cmp	r3, #22
 800e6d6:	d11e      	bne.n	800e716 <__sflush_r+0xea>
 800e6d8:	602f      	str	r7, [r5, #0]
 800e6da:	2000      	movs	r0, #0
 800e6dc:	e022      	b.n	800e724 <__sflush_r+0xf8>
 800e6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6e2:	b21b      	sxth	r3, r3
 800e6e4:	e01b      	b.n	800e71e <__sflush_r+0xf2>
 800e6e6:	690f      	ldr	r7, [r1, #16]
 800e6e8:	2f00      	cmp	r7, #0
 800e6ea:	d0f6      	beq.n	800e6da <__sflush_r+0xae>
 800e6ec:	0793      	lsls	r3, r2, #30
 800e6ee:	680e      	ldr	r6, [r1, #0]
 800e6f0:	bf08      	it	eq
 800e6f2:	694b      	ldreq	r3, [r1, #20]
 800e6f4:	600f      	str	r7, [r1, #0]
 800e6f6:	bf18      	it	ne
 800e6f8:	2300      	movne	r3, #0
 800e6fa:	eba6 0807 	sub.w	r8, r6, r7
 800e6fe:	608b      	str	r3, [r1, #8]
 800e700:	f1b8 0f00 	cmp.w	r8, #0
 800e704:	dde9      	ble.n	800e6da <__sflush_r+0xae>
 800e706:	6a21      	ldr	r1, [r4, #32]
 800e708:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e70a:	4643      	mov	r3, r8
 800e70c:	463a      	mov	r2, r7
 800e70e:	4628      	mov	r0, r5
 800e710:	47b0      	blx	r6
 800e712:	2800      	cmp	r0, #0
 800e714:	dc08      	bgt.n	800e728 <__sflush_r+0xfc>
 800e716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e71a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e71e:	81a3      	strh	r3, [r4, #12]
 800e720:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e728:	4407      	add	r7, r0
 800e72a:	eba8 0800 	sub.w	r8, r8, r0
 800e72e:	e7e7      	b.n	800e700 <__sflush_r+0xd4>
 800e730:	20400001 	.word	0x20400001

0800e734 <_fflush_r>:
 800e734:	b538      	push	{r3, r4, r5, lr}
 800e736:	690b      	ldr	r3, [r1, #16]
 800e738:	4605      	mov	r5, r0
 800e73a:	460c      	mov	r4, r1
 800e73c:	b913      	cbnz	r3, 800e744 <_fflush_r+0x10>
 800e73e:	2500      	movs	r5, #0
 800e740:	4628      	mov	r0, r5
 800e742:	bd38      	pop	{r3, r4, r5, pc}
 800e744:	b118      	cbz	r0, 800e74e <_fflush_r+0x1a>
 800e746:	6a03      	ldr	r3, [r0, #32]
 800e748:	b90b      	cbnz	r3, 800e74e <_fflush_r+0x1a>
 800e74a:	f7fd f8a9 	bl	800b8a0 <__sinit>
 800e74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d0f3      	beq.n	800e73e <_fflush_r+0xa>
 800e756:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e758:	07d0      	lsls	r0, r2, #31
 800e75a:	d404      	bmi.n	800e766 <_fflush_r+0x32>
 800e75c:	0599      	lsls	r1, r3, #22
 800e75e:	d402      	bmi.n	800e766 <_fflush_r+0x32>
 800e760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e762:	f7fd ffe8 	bl	800c736 <__retarget_lock_acquire_recursive>
 800e766:	4628      	mov	r0, r5
 800e768:	4621      	mov	r1, r4
 800e76a:	f7ff ff5f 	bl	800e62c <__sflush_r>
 800e76e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e770:	07da      	lsls	r2, r3, #31
 800e772:	4605      	mov	r5, r0
 800e774:	d4e4      	bmi.n	800e740 <_fflush_r+0xc>
 800e776:	89a3      	ldrh	r3, [r4, #12]
 800e778:	059b      	lsls	r3, r3, #22
 800e77a:	d4e1      	bmi.n	800e740 <_fflush_r+0xc>
 800e77c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e77e:	f7fd ffdb 	bl	800c738 <__retarget_lock_release_recursive>
 800e782:	e7dd      	b.n	800e740 <_fflush_r+0xc>

0800e784 <__malloc_lock>:
 800e784:	4801      	ldr	r0, [pc, #4]	@ (800e78c <__malloc_lock+0x8>)
 800e786:	f7fd bfd6 	b.w	800c736 <__retarget_lock_acquire_recursive>
 800e78a:	bf00      	nop
 800e78c:	20000d94 	.word	0x20000d94

0800e790 <__malloc_unlock>:
 800e790:	4801      	ldr	r0, [pc, #4]	@ (800e798 <__malloc_unlock+0x8>)
 800e792:	f7fd bfd1 	b.w	800c738 <__retarget_lock_release_recursive>
 800e796:	bf00      	nop
 800e798:	20000d94 	.word	0x20000d94

0800e79c <_Balloc>:
 800e79c:	b570      	push	{r4, r5, r6, lr}
 800e79e:	69c6      	ldr	r6, [r0, #28]
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	460d      	mov	r5, r1
 800e7a4:	b976      	cbnz	r6, 800e7c4 <_Balloc+0x28>
 800e7a6:	2010      	movs	r0, #16
 800e7a8:	f7ff fcfc 	bl	800e1a4 <malloc>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	61e0      	str	r0, [r4, #28]
 800e7b0:	b920      	cbnz	r0, 800e7bc <_Balloc+0x20>
 800e7b2:	4b18      	ldr	r3, [pc, #96]	@ (800e814 <_Balloc+0x78>)
 800e7b4:	4818      	ldr	r0, [pc, #96]	@ (800e818 <_Balloc+0x7c>)
 800e7b6:	216b      	movs	r1, #107	@ 0x6b
 800e7b8:	f000 fdaa 	bl	800f310 <__assert_func>
 800e7bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7c0:	6006      	str	r6, [r0, #0]
 800e7c2:	60c6      	str	r6, [r0, #12]
 800e7c4:	69e6      	ldr	r6, [r4, #28]
 800e7c6:	68f3      	ldr	r3, [r6, #12]
 800e7c8:	b183      	cbz	r3, 800e7ec <_Balloc+0x50>
 800e7ca:	69e3      	ldr	r3, [r4, #28]
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e7d2:	b9b8      	cbnz	r0, 800e804 <_Balloc+0x68>
 800e7d4:	2101      	movs	r1, #1
 800e7d6:	fa01 f605 	lsl.w	r6, r1, r5
 800e7da:	1d72      	adds	r2, r6, #5
 800e7dc:	0092      	lsls	r2, r2, #2
 800e7de:	4620      	mov	r0, r4
 800e7e0:	f000 fdb4 	bl	800f34c <_calloc_r>
 800e7e4:	b160      	cbz	r0, 800e800 <_Balloc+0x64>
 800e7e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e7ea:	e00e      	b.n	800e80a <_Balloc+0x6e>
 800e7ec:	2221      	movs	r2, #33	@ 0x21
 800e7ee:	2104      	movs	r1, #4
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	f000 fdab 	bl	800f34c <_calloc_r>
 800e7f6:	69e3      	ldr	r3, [r4, #28]
 800e7f8:	60f0      	str	r0, [r6, #12]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d1e4      	bne.n	800e7ca <_Balloc+0x2e>
 800e800:	2000      	movs	r0, #0
 800e802:	bd70      	pop	{r4, r5, r6, pc}
 800e804:	6802      	ldr	r2, [r0, #0]
 800e806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e80a:	2300      	movs	r3, #0
 800e80c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e810:	e7f7      	b.n	800e802 <_Balloc+0x66>
 800e812:	bf00      	nop
 800e814:	0800fd66 	.word	0x0800fd66
 800e818:	0800fe72 	.word	0x0800fe72

0800e81c <_Bfree>:
 800e81c:	b570      	push	{r4, r5, r6, lr}
 800e81e:	69c6      	ldr	r6, [r0, #28]
 800e820:	4605      	mov	r5, r0
 800e822:	460c      	mov	r4, r1
 800e824:	b976      	cbnz	r6, 800e844 <_Bfree+0x28>
 800e826:	2010      	movs	r0, #16
 800e828:	f7ff fcbc 	bl	800e1a4 <malloc>
 800e82c:	4602      	mov	r2, r0
 800e82e:	61e8      	str	r0, [r5, #28]
 800e830:	b920      	cbnz	r0, 800e83c <_Bfree+0x20>
 800e832:	4b09      	ldr	r3, [pc, #36]	@ (800e858 <_Bfree+0x3c>)
 800e834:	4809      	ldr	r0, [pc, #36]	@ (800e85c <_Bfree+0x40>)
 800e836:	218f      	movs	r1, #143	@ 0x8f
 800e838:	f000 fd6a 	bl	800f310 <__assert_func>
 800e83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e840:	6006      	str	r6, [r0, #0]
 800e842:	60c6      	str	r6, [r0, #12]
 800e844:	b13c      	cbz	r4, 800e856 <_Bfree+0x3a>
 800e846:	69eb      	ldr	r3, [r5, #28]
 800e848:	6862      	ldr	r2, [r4, #4]
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e850:	6021      	str	r1, [r4, #0]
 800e852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e856:	bd70      	pop	{r4, r5, r6, pc}
 800e858:	0800fd66 	.word	0x0800fd66
 800e85c:	0800fe72 	.word	0x0800fe72

0800e860 <__multadd>:
 800e860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e864:	690d      	ldr	r5, [r1, #16]
 800e866:	4607      	mov	r7, r0
 800e868:	460c      	mov	r4, r1
 800e86a:	461e      	mov	r6, r3
 800e86c:	f101 0c14 	add.w	ip, r1, #20
 800e870:	2000      	movs	r0, #0
 800e872:	f8dc 3000 	ldr.w	r3, [ip]
 800e876:	b299      	uxth	r1, r3
 800e878:	fb02 6101 	mla	r1, r2, r1, r6
 800e87c:	0c1e      	lsrs	r6, r3, #16
 800e87e:	0c0b      	lsrs	r3, r1, #16
 800e880:	fb02 3306 	mla	r3, r2, r6, r3
 800e884:	b289      	uxth	r1, r1
 800e886:	3001      	adds	r0, #1
 800e888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e88c:	4285      	cmp	r5, r0
 800e88e:	f84c 1b04 	str.w	r1, [ip], #4
 800e892:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e896:	dcec      	bgt.n	800e872 <__multadd+0x12>
 800e898:	b30e      	cbz	r6, 800e8de <__multadd+0x7e>
 800e89a:	68a3      	ldr	r3, [r4, #8]
 800e89c:	42ab      	cmp	r3, r5
 800e89e:	dc19      	bgt.n	800e8d4 <__multadd+0x74>
 800e8a0:	6861      	ldr	r1, [r4, #4]
 800e8a2:	4638      	mov	r0, r7
 800e8a4:	3101      	adds	r1, #1
 800e8a6:	f7ff ff79 	bl	800e79c <_Balloc>
 800e8aa:	4680      	mov	r8, r0
 800e8ac:	b928      	cbnz	r0, 800e8ba <__multadd+0x5a>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	4b0c      	ldr	r3, [pc, #48]	@ (800e8e4 <__multadd+0x84>)
 800e8b2:	480d      	ldr	r0, [pc, #52]	@ (800e8e8 <__multadd+0x88>)
 800e8b4:	21ba      	movs	r1, #186	@ 0xba
 800e8b6:	f000 fd2b 	bl	800f310 <__assert_func>
 800e8ba:	6922      	ldr	r2, [r4, #16]
 800e8bc:	3202      	adds	r2, #2
 800e8be:	f104 010c 	add.w	r1, r4, #12
 800e8c2:	0092      	lsls	r2, r2, #2
 800e8c4:	300c      	adds	r0, #12
 800e8c6:	f7fd ff4d 	bl	800c764 <memcpy>
 800e8ca:	4621      	mov	r1, r4
 800e8cc:	4638      	mov	r0, r7
 800e8ce:	f7ff ffa5 	bl	800e81c <_Bfree>
 800e8d2:	4644      	mov	r4, r8
 800e8d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e8d8:	3501      	adds	r5, #1
 800e8da:	615e      	str	r6, [r3, #20]
 800e8dc:	6125      	str	r5, [r4, #16]
 800e8de:	4620      	mov	r0, r4
 800e8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e4:	0800fdd5 	.word	0x0800fdd5
 800e8e8:	0800fe72 	.word	0x0800fe72

0800e8ec <__s2b>:
 800e8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8f0:	460c      	mov	r4, r1
 800e8f2:	4615      	mov	r5, r2
 800e8f4:	461f      	mov	r7, r3
 800e8f6:	2209      	movs	r2, #9
 800e8f8:	3308      	adds	r3, #8
 800e8fa:	4606      	mov	r6, r0
 800e8fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e900:	2100      	movs	r1, #0
 800e902:	2201      	movs	r2, #1
 800e904:	429a      	cmp	r2, r3
 800e906:	db09      	blt.n	800e91c <__s2b+0x30>
 800e908:	4630      	mov	r0, r6
 800e90a:	f7ff ff47 	bl	800e79c <_Balloc>
 800e90e:	b940      	cbnz	r0, 800e922 <__s2b+0x36>
 800e910:	4602      	mov	r2, r0
 800e912:	4b19      	ldr	r3, [pc, #100]	@ (800e978 <__s2b+0x8c>)
 800e914:	4819      	ldr	r0, [pc, #100]	@ (800e97c <__s2b+0x90>)
 800e916:	21d3      	movs	r1, #211	@ 0xd3
 800e918:	f000 fcfa 	bl	800f310 <__assert_func>
 800e91c:	0052      	lsls	r2, r2, #1
 800e91e:	3101      	adds	r1, #1
 800e920:	e7f0      	b.n	800e904 <__s2b+0x18>
 800e922:	9b08      	ldr	r3, [sp, #32]
 800e924:	6143      	str	r3, [r0, #20]
 800e926:	2d09      	cmp	r5, #9
 800e928:	f04f 0301 	mov.w	r3, #1
 800e92c:	6103      	str	r3, [r0, #16]
 800e92e:	dd16      	ble.n	800e95e <__s2b+0x72>
 800e930:	f104 0909 	add.w	r9, r4, #9
 800e934:	46c8      	mov	r8, r9
 800e936:	442c      	add	r4, r5
 800e938:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e93c:	4601      	mov	r1, r0
 800e93e:	3b30      	subs	r3, #48	@ 0x30
 800e940:	220a      	movs	r2, #10
 800e942:	4630      	mov	r0, r6
 800e944:	f7ff ff8c 	bl	800e860 <__multadd>
 800e948:	45a0      	cmp	r8, r4
 800e94a:	d1f5      	bne.n	800e938 <__s2b+0x4c>
 800e94c:	f1a5 0408 	sub.w	r4, r5, #8
 800e950:	444c      	add	r4, r9
 800e952:	1b2d      	subs	r5, r5, r4
 800e954:	1963      	adds	r3, r4, r5
 800e956:	42bb      	cmp	r3, r7
 800e958:	db04      	blt.n	800e964 <__s2b+0x78>
 800e95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e95e:	340a      	adds	r4, #10
 800e960:	2509      	movs	r5, #9
 800e962:	e7f6      	b.n	800e952 <__s2b+0x66>
 800e964:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e968:	4601      	mov	r1, r0
 800e96a:	3b30      	subs	r3, #48	@ 0x30
 800e96c:	220a      	movs	r2, #10
 800e96e:	4630      	mov	r0, r6
 800e970:	f7ff ff76 	bl	800e860 <__multadd>
 800e974:	e7ee      	b.n	800e954 <__s2b+0x68>
 800e976:	bf00      	nop
 800e978:	0800fdd5 	.word	0x0800fdd5
 800e97c:	0800fe72 	.word	0x0800fe72

0800e980 <__hi0bits>:
 800e980:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e984:	4603      	mov	r3, r0
 800e986:	bf36      	itet	cc
 800e988:	0403      	lslcc	r3, r0, #16
 800e98a:	2000      	movcs	r0, #0
 800e98c:	2010      	movcc	r0, #16
 800e98e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e992:	bf3c      	itt	cc
 800e994:	021b      	lslcc	r3, r3, #8
 800e996:	3008      	addcc	r0, #8
 800e998:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e99c:	bf3c      	itt	cc
 800e99e:	011b      	lslcc	r3, r3, #4
 800e9a0:	3004      	addcc	r0, #4
 800e9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9a6:	bf3c      	itt	cc
 800e9a8:	009b      	lslcc	r3, r3, #2
 800e9aa:	3002      	addcc	r0, #2
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	db05      	blt.n	800e9bc <__hi0bits+0x3c>
 800e9b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e9b4:	f100 0001 	add.w	r0, r0, #1
 800e9b8:	bf08      	it	eq
 800e9ba:	2020      	moveq	r0, #32
 800e9bc:	4770      	bx	lr

0800e9be <__lo0bits>:
 800e9be:	6803      	ldr	r3, [r0, #0]
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	f013 0007 	ands.w	r0, r3, #7
 800e9c6:	d00b      	beq.n	800e9e0 <__lo0bits+0x22>
 800e9c8:	07d9      	lsls	r1, r3, #31
 800e9ca:	d421      	bmi.n	800ea10 <__lo0bits+0x52>
 800e9cc:	0798      	lsls	r0, r3, #30
 800e9ce:	bf49      	itett	mi
 800e9d0:	085b      	lsrmi	r3, r3, #1
 800e9d2:	089b      	lsrpl	r3, r3, #2
 800e9d4:	2001      	movmi	r0, #1
 800e9d6:	6013      	strmi	r3, [r2, #0]
 800e9d8:	bf5c      	itt	pl
 800e9da:	6013      	strpl	r3, [r2, #0]
 800e9dc:	2002      	movpl	r0, #2
 800e9de:	4770      	bx	lr
 800e9e0:	b299      	uxth	r1, r3
 800e9e2:	b909      	cbnz	r1, 800e9e8 <__lo0bits+0x2a>
 800e9e4:	0c1b      	lsrs	r3, r3, #16
 800e9e6:	2010      	movs	r0, #16
 800e9e8:	b2d9      	uxtb	r1, r3
 800e9ea:	b909      	cbnz	r1, 800e9f0 <__lo0bits+0x32>
 800e9ec:	3008      	adds	r0, #8
 800e9ee:	0a1b      	lsrs	r3, r3, #8
 800e9f0:	0719      	lsls	r1, r3, #28
 800e9f2:	bf04      	itt	eq
 800e9f4:	091b      	lsreq	r3, r3, #4
 800e9f6:	3004      	addeq	r0, #4
 800e9f8:	0799      	lsls	r1, r3, #30
 800e9fa:	bf04      	itt	eq
 800e9fc:	089b      	lsreq	r3, r3, #2
 800e9fe:	3002      	addeq	r0, #2
 800ea00:	07d9      	lsls	r1, r3, #31
 800ea02:	d403      	bmi.n	800ea0c <__lo0bits+0x4e>
 800ea04:	085b      	lsrs	r3, r3, #1
 800ea06:	f100 0001 	add.w	r0, r0, #1
 800ea0a:	d003      	beq.n	800ea14 <__lo0bits+0x56>
 800ea0c:	6013      	str	r3, [r2, #0]
 800ea0e:	4770      	bx	lr
 800ea10:	2000      	movs	r0, #0
 800ea12:	4770      	bx	lr
 800ea14:	2020      	movs	r0, #32
 800ea16:	4770      	bx	lr

0800ea18 <__i2b>:
 800ea18:	b510      	push	{r4, lr}
 800ea1a:	460c      	mov	r4, r1
 800ea1c:	2101      	movs	r1, #1
 800ea1e:	f7ff febd 	bl	800e79c <_Balloc>
 800ea22:	4602      	mov	r2, r0
 800ea24:	b928      	cbnz	r0, 800ea32 <__i2b+0x1a>
 800ea26:	4b05      	ldr	r3, [pc, #20]	@ (800ea3c <__i2b+0x24>)
 800ea28:	4805      	ldr	r0, [pc, #20]	@ (800ea40 <__i2b+0x28>)
 800ea2a:	f240 1145 	movw	r1, #325	@ 0x145
 800ea2e:	f000 fc6f 	bl	800f310 <__assert_func>
 800ea32:	2301      	movs	r3, #1
 800ea34:	6144      	str	r4, [r0, #20]
 800ea36:	6103      	str	r3, [r0, #16]
 800ea38:	bd10      	pop	{r4, pc}
 800ea3a:	bf00      	nop
 800ea3c:	0800fdd5 	.word	0x0800fdd5
 800ea40:	0800fe72 	.word	0x0800fe72

0800ea44 <__multiply>:
 800ea44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea48:	4617      	mov	r7, r2
 800ea4a:	690a      	ldr	r2, [r1, #16]
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	bfa8      	it	ge
 800ea52:	463b      	movge	r3, r7
 800ea54:	4689      	mov	r9, r1
 800ea56:	bfa4      	itt	ge
 800ea58:	460f      	movge	r7, r1
 800ea5a:	4699      	movge	r9, r3
 800ea5c:	693d      	ldr	r5, [r7, #16]
 800ea5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	6879      	ldr	r1, [r7, #4]
 800ea66:	eb05 060a 	add.w	r6, r5, sl
 800ea6a:	42b3      	cmp	r3, r6
 800ea6c:	b085      	sub	sp, #20
 800ea6e:	bfb8      	it	lt
 800ea70:	3101      	addlt	r1, #1
 800ea72:	f7ff fe93 	bl	800e79c <_Balloc>
 800ea76:	b930      	cbnz	r0, 800ea86 <__multiply+0x42>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	4b41      	ldr	r3, [pc, #260]	@ (800eb80 <__multiply+0x13c>)
 800ea7c:	4841      	ldr	r0, [pc, #260]	@ (800eb84 <__multiply+0x140>)
 800ea7e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ea82:	f000 fc45 	bl	800f310 <__assert_func>
 800ea86:	f100 0414 	add.w	r4, r0, #20
 800ea8a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ea8e:	4623      	mov	r3, r4
 800ea90:	2200      	movs	r2, #0
 800ea92:	4573      	cmp	r3, lr
 800ea94:	d320      	bcc.n	800ead8 <__multiply+0x94>
 800ea96:	f107 0814 	add.w	r8, r7, #20
 800ea9a:	f109 0114 	add.w	r1, r9, #20
 800ea9e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800eaa2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800eaa6:	9302      	str	r3, [sp, #8]
 800eaa8:	1beb      	subs	r3, r5, r7
 800eaaa:	3b15      	subs	r3, #21
 800eaac:	f023 0303 	bic.w	r3, r3, #3
 800eab0:	3304      	adds	r3, #4
 800eab2:	3715      	adds	r7, #21
 800eab4:	42bd      	cmp	r5, r7
 800eab6:	bf38      	it	cc
 800eab8:	2304      	movcc	r3, #4
 800eaba:	9301      	str	r3, [sp, #4]
 800eabc:	9b02      	ldr	r3, [sp, #8]
 800eabe:	9103      	str	r1, [sp, #12]
 800eac0:	428b      	cmp	r3, r1
 800eac2:	d80c      	bhi.n	800eade <__multiply+0x9a>
 800eac4:	2e00      	cmp	r6, #0
 800eac6:	dd03      	ble.n	800ead0 <__multiply+0x8c>
 800eac8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d055      	beq.n	800eb7c <__multiply+0x138>
 800ead0:	6106      	str	r6, [r0, #16]
 800ead2:	b005      	add	sp, #20
 800ead4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead8:	f843 2b04 	str.w	r2, [r3], #4
 800eadc:	e7d9      	b.n	800ea92 <__multiply+0x4e>
 800eade:	f8b1 a000 	ldrh.w	sl, [r1]
 800eae2:	f1ba 0f00 	cmp.w	sl, #0
 800eae6:	d01f      	beq.n	800eb28 <__multiply+0xe4>
 800eae8:	46c4      	mov	ip, r8
 800eaea:	46a1      	mov	r9, r4
 800eaec:	2700      	movs	r7, #0
 800eaee:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eaf2:	f8d9 3000 	ldr.w	r3, [r9]
 800eaf6:	fa1f fb82 	uxth.w	fp, r2
 800eafa:	b29b      	uxth	r3, r3
 800eafc:	fb0a 330b 	mla	r3, sl, fp, r3
 800eb00:	443b      	add	r3, r7
 800eb02:	f8d9 7000 	ldr.w	r7, [r9]
 800eb06:	0c12      	lsrs	r2, r2, #16
 800eb08:	0c3f      	lsrs	r7, r7, #16
 800eb0a:	fb0a 7202 	mla	r2, sl, r2, r7
 800eb0e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb18:	4565      	cmp	r5, ip
 800eb1a:	f849 3b04 	str.w	r3, [r9], #4
 800eb1e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800eb22:	d8e4      	bhi.n	800eaee <__multiply+0xaa>
 800eb24:	9b01      	ldr	r3, [sp, #4]
 800eb26:	50e7      	str	r7, [r4, r3]
 800eb28:	9b03      	ldr	r3, [sp, #12]
 800eb2a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eb2e:	3104      	adds	r1, #4
 800eb30:	f1b9 0f00 	cmp.w	r9, #0
 800eb34:	d020      	beq.n	800eb78 <__multiply+0x134>
 800eb36:	6823      	ldr	r3, [r4, #0]
 800eb38:	4647      	mov	r7, r8
 800eb3a:	46a4      	mov	ip, r4
 800eb3c:	f04f 0a00 	mov.w	sl, #0
 800eb40:	f8b7 b000 	ldrh.w	fp, [r7]
 800eb44:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800eb48:	fb09 220b 	mla	r2, r9, fp, r2
 800eb4c:	4452      	add	r2, sl
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb54:	f84c 3b04 	str.w	r3, [ip], #4
 800eb58:	f857 3b04 	ldr.w	r3, [r7], #4
 800eb5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb60:	f8bc 3000 	ldrh.w	r3, [ip]
 800eb64:	fb09 330a 	mla	r3, r9, sl, r3
 800eb68:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800eb6c:	42bd      	cmp	r5, r7
 800eb6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb72:	d8e5      	bhi.n	800eb40 <__multiply+0xfc>
 800eb74:	9a01      	ldr	r2, [sp, #4]
 800eb76:	50a3      	str	r3, [r4, r2]
 800eb78:	3404      	adds	r4, #4
 800eb7a:	e79f      	b.n	800eabc <__multiply+0x78>
 800eb7c:	3e01      	subs	r6, #1
 800eb7e:	e7a1      	b.n	800eac4 <__multiply+0x80>
 800eb80:	0800fdd5 	.word	0x0800fdd5
 800eb84:	0800fe72 	.word	0x0800fe72

0800eb88 <__pow5mult>:
 800eb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb8c:	4615      	mov	r5, r2
 800eb8e:	f012 0203 	ands.w	r2, r2, #3
 800eb92:	4607      	mov	r7, r0
 800eb94:	460e      	mov	r6, r1
 800eb96:	d007      	beq.n	800eba8 <__pow5mult+0x20>
 800eb98:	4c25      	ldr	r4, [pc, #148]	@ (800ec30 <__pow5mult+0xa8>)
 800eb9a:	3a01      	subs	r2, #1
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eba2:	f7ff fe5d 	bl	800e860 <__multadd>
 800eba6:	4606      	mov	r6, r0
 800eba8:	10ad      	asrs	r5, r5, #2
 800ebaa:	d03d      	beq.n	800ec28 <__pow5mult+0xa0>
 800ebac:	69fc      	ldr	r4, [r7, #28]
 800ebae:	b97c      	cbnz	r4, 800ebd0 <__pow5mult+0x48>
 800ebb0:	2010      	movs	r0, #16
 800ebb2:	f7ff faf7 	bl	800e1a4 <malloc>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	61f8      	str	r0, [r7, #28]
 800ebba:	b928      	cbnz	r0, 800ebc8 <__pow5mult+0x40>
 800ebbc:	4b1d      	ldr	r3, [pc, #116]	@ (800ec34 <__pow5mult+0xac>)
 800ebbe:	481e      	ldr	r0, [pc, #120]	@ (800ec38 <__pow5mult+0xb0>)
 800ebc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ebc4:	f000 fba4 	bl	800f310 <__assert_func>
 800ebc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ebcc:	6004      	str	r4, [r0, #0]
 800ebce:	60c4      	str	r4, [r0, #12]
 800ebd0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ebd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebd8:	b94c      	cbnz	r4, 800ebee <__pow5mult+0x66>
 800ebda:	f240 2171 	movw	r1, #625	@ 0x271
 800ebde:	4638      	mov	r0, r7
 800ebe0:	f7ff ff1a 	bl	800ea18 <__i2b>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebea:	4604      	mov	r4, r0
 800ebec:	6003      	str	r3, [r0, #0]
 800ebee:	f04f 0900 	mov.w	r9, #0
 800ebf2:	07eb      	lsls	r3, r5, #31
 800ebf4:	d50a      	bpl.n	800ec0c <__pow5mult+0x84>
 800ebf6:	4631      	mov	r1, r6
 800ebf8:	4622      	mov	r2, r4
 800ebfa:	4638      	mov	r0, r7
 800ebfc:	f7ff ff22 	bl	800ea44 <__multiply>
 800ec00:	4631      	mov	r1, r6
 800ec02:	4680      	mov	r8, r0
 800ec04:	4638      	mov	r0, r7
 800ec06:	f7ff fe09 	bl	800e81c <_Bfree>
 800ec0a:	4646      	mov	r6, r8
 800ec0c:	106d      	asrs	r5, r5, #1
 800ec0e:	d00b      	beq.n	800ec28 <__pow5mult+0xa0>
 800ec10:	6820      	ldr	r0, [r4, #0]
 800ec12:	b938      	cbnz	r0, 800ec24 <__pow5mult+0x9c>
 800ec14:	4622      	mov	r2, r4
 800ec16:	4621      	mov	r1, r4
 800ec18:	4638      	mov	r0, r7
 800ec1a:	f7ff ff13 	bl	800ea44 <__multiply>
 800ec1e:	6020      	str	r0, [r4, #0]
 800ec20:	f8c0 9000 	str.w	r9, [r0]
 800ec24:	4604      	mov	r4, r0
 800ec26:	e7e4      	b.n	800ebf2 <__pow5mult+0x6a>
 800ec28:	4630      	mov	r0, r6
 800ec2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec2e:	bf00      	nop
 800ec30:	0801005c 	.word	0x0801005c
 800ec34:	0800fd66 	.word	0x0800fd66
 800ec38:	0800fe72 	.word	0x0800fe72

0800ec3c <__lshift>:
 800ec3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec40:	460c      	mov	r4, r1
 800ec42:	6849      	ldr	r1, [r1, #4]
 800ec44:	6923      	ldr	r3, [r4, #16]
 800ec46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec4a:	68a3      	ldr	r3, [r4, #8]
 800ec4c:	4607      	mov	r7, r0
 800ec4e:	4691      	mov	r9, r2
 800ec50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec54:	f108 0601 	add.w	r6, r8, #1
 800ec58:	42b3      	cmp	r3, r6
 800ec5a:	db0b      	blt.n	800ec74 <__lshift+0x38>
 800ec5c:	4638      	mov	r0, r7
 800ec5e:	f7ff fd9d 	bl	800e79c <_Balloc>
 800ec62:	4605      	mov	r5, r0
 800ec64:	b948      	cbnz	r0, 800ec7a <__lshift+0x3e>
 800ec66:	4602      	mov	r2, r0
 800ec68:	4b28      	ldr	r3, [pc, #160]	@ (800ed0c <__lshift+0xd0>)
 800ec6a:	4829      	ldr	r0, [pc, #164]	@ (800ed10 <__lshift+0xd4>)
 800ec6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ec70:	f000 fb4e 	bl	800f310 <__assert_func>
 800ec74:	3101      	adds	r1, #1
 800ec76:	005b      	lsls	r3, r3, #1
 800ec78:	e7ee      	b.n	800ec58 <__lshift+0x1c>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f100 0114 	add.w	r1, r0, #20
 800ec80:	f100 0210 	add.w	r2, r0, #16
 800ec84:	4618      	mov	r0, r3
 800ec86:	4553      	cmp	r3, sl
 800ec88:	db33      	blt.n	800ecf2 <__lshift+0xb6>
 800ec8a:	6920      	ldr	r0, [r4, #16]
 800ec8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec90:	f104 0314 	add.w	r3, r4, #20
 800ec94:	f019 091f 	ands.w	r9, r9, #31
 800ec98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eca0:	d02b      	beq.n	800ecfa <__lshift+0xbe>
 800eca2:	f1c9 0e20 	rsb	lr, r9, #32
 800eca6:	468a      	mov	sl, r1
 800eca8:	2200      	movs	r2, #0
 800ecaa:	6818      	ldr	r0, [r3, #0]
 800ecac:	fa00 f009 	lsl.w	r0, r0, r9
 800ecb0:	4310      	orrs	r0, r2
 800ecb2:	f84a 0b04 	str.w	r0, [sl], #4
 800ecb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecba:	459c      	cmp	ip, r3
 800ecbc:	fa22 f20e 	lsr.w	r2, r2, lr
 800ecc0:	d8f3      	bhi.n	800ecaa <__lshift+0x6e>
 800ecc2:	ebac 0304 	sub.w	r3, ip, r4
 800ecc6:	3b15      	subs	r3, #21
 800ecc8:	f023 0303 	bic.w	r3, r3, #3
 800eccc:	3304      	adds	r3, #4
 800ecce:	f104 0015 	add.w	r0, r4, #21
 800ecd2:	4560      	cmp	r0, ip
 800ecd4:	bf88      	it	hi
 800ecd6:	2304      	movhi	r3, #4
 800ecd8:	50ca      	str	r2, [r1, r3]
 800ecda:	b10a      	cbz	r2, 800ece0 <__lshift+0xa4>
 800ecdc:	f108 0602 	add.w	r6, r8, #2
 800ece0:	3e01      	subs	r6, #1
 800ece2:	4638      	mov	r0, r7
 800ece4:	612e      	str	r6, [r5, #16]
 800ece6:	4621      	mov	r1, r4
 800ece8:	f7ff fd98 	bl	800e81c <_Bfree>
 800ecec:	4628      	mov	r0, r5
 800ecee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf2:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	e7c5      	b.n	800ec86 <__lshift+0x4a>
 800ecfa:	3904      	subs	r1, #4
 800ecfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed00:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed04:	459c      	cmp	ip, r3
 800ed06:	d8f9      	bhi.n	800ecfc <__lshift+0xc0>
 800ed08:	e7ea      	b.n	800ece0 <__lshift+0xa4>
 800ed0a:	bf00      	nop
 800ed0c:	0800fdd5 	.word	0x0800fdd5
 800ed10:	0800fe72 	.word	0x0800fe72

0800ed14 <__mcmp>:
 800ed14:	690a      	ldr	r2, [r1, #16]
 800ed16:	4603      	mov	r3, r0
 800ed18:	6900      	ldr	r0, [r0, #16]
 800ed1a:	1a80      	subs	r0, r0, r2
 800ed1c:	b530      	push	{r4, r5, lr}
 800ed1e:	d10e      	bne.n	800ed3e <__mcmp+0x2a>
 800ed20:	3314      	adds	r3, #20
 800ed22:	3114      	adds	r1, #20
 800ed24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ed28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ed2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ed30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ed34:	4295      	cmp	r5, r2
 800ed36:	d003      	beq.n	800ed40 <__mcmp+0x2c>
 800ed38:	d205      	bcs.n	800ed46 <__mcmp+0x32>
 800ed3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed3e:	bd30      	pop	{r4, r5, pc}
 800ed40:	42a3      	cmp	r3, r4
 800ed42:	d3f3      	bcc.n	800ed2c <__mcmp+0x18>
 800ed44:	e7fb      	b.n	800ed3e <__mcmp+0x2a>
 800ed46:	2001      	movs	r0, #1
 800ed48:	e7f9      	b.n	800ed3e <__mcmp+0x2a>
	...

0800ed4c <__mdiff>:
 800ed4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed50:	4689      	mov	r9, r1
 800ed52:	4606      	mov	r6, r0
 800ed54:	4611      	mov	r1, r2
 800ed56:	4648      	mov	r0, r9
 800ed58:	4614      	mov	r4, r2
 800ed5a:	f7ff ffdb 	bl	800ed14 <__mcmp>
 800ed5e:	1e05      	subs	r5, r0, #0
 800ed60:	d112      	bne.n	800ed88 <__mdiff+0x3c>
 800ed62:	4629      	mov	r1, r5
 800ed64:	4630      	mov	r0, r6
 800ed66:	f7ff fd19 	bl	800e79c <_Balloc>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	b928      	cbnz	r0, 800ed7a <__mdiff+0x2e>
 800ed6e:	4b3f      	ldr	r3, [pc, #252]	@ (800ee6c <__mdiff+0x120>)
 800ed70:	f240 2137 	movw	r1, #567	@ 0x237
 800ed74:	483e      	ldr	r0, [pc, #248]	@ (800ee70 <__mdiff+0x124>)
 800ed76:	f000 facb 	bl	800f310 <__assert_func>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed80:	4610      	mov	r0, r2
 800ed82:	b003      	add	sp, #12
 800ed84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed88:	bfbc      	itt	lt
 800ed8a:	464b      	movlt	r3, r9
 800ed8c:	46a1      	movlt	r9, r4
 800ed8e:	4630      	mov	r0, r6
 800ed90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ed94:	bfba      	itte	lt
 800ed96:	461c      	movlt	r4, r3
 800ed98:	2501      	movlt	r5, #1
 800ed9a:	2500      	movge	r5, #0
 800ed9c:	f7ff fcfe 	bl	800e79c <_Balloc>
 800eda0:	4602      	mov	r2, r0
 800eda2:	b918      	cbnz	r0, 800edac <__mdiff+0x60>
 800eda4:	4b31      	ldr	r3, [pc, #196]	@ (800ee6c <__mdiff+0x120>)
 800eda6:	f240 2145 	movw	r1, #581	@ 0x245
 800edaa:	e7e3      	b.n	800ed74 <__mdiff+0x28>
 800edac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800edb0:	6926      	ldr	r6, [r4, #16]
 800edb2:	60c5      	str	r5, [r0, #12]
 800edb4:	f109 0310 	add.w	r3, r9, #16
 800edb8:	f109 0514 	add.w	r5, r9, #20
 800edbc:	f104 0e14 	add.w	lr, r4, #20
 800edc0:	f100 0b14 	add.w	fp, r0, #20
 800edc4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800edc8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800edcc:	9301      	str	r3, [sp, #4]
 800edce:	46d9      	mov	r9, fp
 800edd0:	f04f 0c00 	mov.w	ip, #0
 800edd4:	9b01      	ldr	r3, [sp, #4]
 800edd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800edda:	f853 af04 	ldr.w	sl, [r3, #4]!
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	fa1f f38a 	uxth.w	r3, sl
 800ede4:	4619      	mov	r1, r3
 800ede6:	b283      	uxth	r3, r0
 800ede8:	1acb      	subs	r3, r1, r3
 800edea:	0c00      	lsrs	r0, r0, #16
 800edec:	4463      	add	r3, ip
 800edee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800edf2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800edfc:	4576      	cmp	r6, lr
 800edfe:	f849 3b04 	str.w	r3, [r9], #4
 800ee02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee06:	d8e5      	bhi.n	800edd4 <__mdiff+0x88>
 800ee08:	1b33      	subs	r3, r6, r4
 800ee0a:	3b15      	subs	r3, #21
 800ee0c:	f023 0303 	bic.w	r3, r3, #3
 800ee10:	3415      	adds	r4, #21
 800ee12:	3304      	adds	r3, #4
 800ee14:	42a6      	cmp	r6, r4
 800ee16:	bf38      	it	cc
 800ee18:	2304      	movcc	r3, #4
 800ee1a:	441d      	add	r5, r3
 800ee1c:	445b      	add	r3, fp
 800ee1e:	461e      	mov	r6, r3
 800ee20:	462c      	mov	r4, r5
 800ee22:	4544      	cmp	r4, r8
 800ee24:	d30e      	bcc.n	800ee44 <__mdiff+0xf8>
 800ee26:	f108 0103 	add.w	r1, r8, #3
 800ee2a:	1b49      	subs	r1, r1, r5
 800ee2c:	f021 0103 	bic.w	r1, r1, #3
 800ee30:	3d03      	subs	r5, #3
 800ee32:	45a8      	cmp	r8, r5
 800ee34:	bf38      	it	cc
 800ee36:	2100      	movcc	r1, #0
 800ee38:	440b      	add	r3, r1
 800ee3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee3e:	b191      	cbz	r1, 800ee66 <__mdiff+0x11a>
 800ee40:	6117      	str	r7, [r2, #16]
 800ee42:	e79d      	b.n	800ed80 <__mdiff+0x34>
 800ee44:	f854 1b04 	ldr.w	r1, [r4], #4
 800ee48:	46e6      	mov	lr, ip
 800ee4a:	0c08      	lsrs	r0, r1, #16
 800ee4c:	fa1c fc81 	uxtah	ip, ip, r1
 800ee50:	4471      	add	r1, lr
 800ee52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ee56:	b289      	uxth	r1, r1
 800ee58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ee5c:	f846 1b04 	str.w	r1, [r6], #4
 800ee60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee64:	e7dd      	b.n	800ee22 <__mdiff+0xd6>
 800ee66:	3f01      	subs	r7, #1
 800ee68:	e7e7      	b.n	800ee3a <__mdiff+0xee>
 800ee6a:	bf00      	nop
 800ee6c:	0800fdd5 	.word	0x0800fdd5
 800ee70:	0800fe72 	.word	0x0800fe72

0800ee74 <__ulp>:
 800ee74:	b082      	sub	sp, #8
 800ee76:	ed8d 0b00 	vstr	d0, [sp]
 800ee7a:	9a01      	ldr	r2, [sp, #4]
 800ee7c:	4b0f      	ldr	r3, [pc, #60]	@ (800eebc <__ulp+0x48>)
 800ee7e:	4013      	ands	r3, r2
 800ee80:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	dc08      	bgt.n	800ee9a <__ulp+0x26>
 800ee88:	425b      	negs	r3, r3
 800ee8a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ee8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ee92:	da04      	bge.n	800ee9e <__ulp+0x2a>
 800ee94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ee98:	4113      	asrs	r3, r2
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	e008      	b.n	800eeb0 <__ulp+0x3c>
 800ee9e:	f1a2 0314 	sub.w	r3, r2, #20
 800eea2:	2b1e      	cmp	r3, #30
 800eea4:	bfda      	itte	le
 800eea6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800eeaa:	40da      	lsrle	r2, r3
 800eeac:	2201      	movgt	r2, #1
 800eeae:	2300      	movs	r3, #0
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	ec41 0b10 	vmov	d0, r0, r1
 800eeb8:	b002      	add	sp, #8
 800eeba:	4770      	bx	lr
 800eebc:	7ff00000 	.word	0x7ff00000

0800eec0 <__b2d>:
 800eec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eec4:	6906      	ldr	r6, [r0, #16]
 800eec6:	f100 0814 	add.w	r8, r0, #20
 800eeca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800eece:	1f37      	subs	r7, r6, #4
 800eed0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eed4:	4610      	mov	r0, r2
 800eed6:	f7ff fd53 	bl	800e980 <__hi0bits>
 800eeda:	f1c0 0320 	rsb	r3, r0, #32
 800eede:	280a      	cmp	r0, #10
 800eee0:	600b      	str	r3, [r1, #0]
 800eee2:	491b      	ldr	r1, [pc, #108]	@ (800ef50 <__b2d+0x90>)
 800eee4:	dc15      	bgt.n	800ef12 <__b2d+0x52>
 800eee6:	f1c0 0c0b 	rsb	ip, r0, #11
 800eeea:	fa22 f30c 	lsr.w	r3, r2, ip
 800eeee:	45b8      	cmp	r8, r7
 800eef0:	ea43 0501 	orr.w	r5, r3, r1
 800eef4:	bf34      	ite	cc
 800eef6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eefa:	2300      	movcs	r3, #0
 800eefc:	3015      	adds	r0, #21
 800eefe:	fa02 f000 	lsl.w	r0, r2, r0
 800ef02:	fa23 f30c 	lsr.w	r3, r3, ip
 800ef06:	4303      	orrs	r3, r0
 800ef08:	461c      	mov	r4, r3
 800ef0a:	ec45 4b10 	vmov	d0, r4, r5
 800ef0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef12:	45b8      	cmp	r8, r7
 800ef14:	bf3a      	itte	cc
 800ef16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ef1a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ef1e:	2300      	movcs	r3, #0
 800ef20:	380b      	subs	r0, #11
 800ef22:	d012      	beq.n	800ef4a <__b2d+0x8a>
 800ef24:	f1c0 0120 	rsb	r1, r0, #32
 800ef28:	fa23 f401 	lsr.w	r4, r3, r1
 800ef2c:	4082      	lsls	r2, r0
 800ef2e:	4322      	orrs	r2, r4
 800ef30:	4547      	cmp	r7, r8
 800ef32:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ef36:	bf8c      	ite	hi
 800ef38:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ef3c:	2200      	movls	r2, #0
 800ef3e:	4083      	lsls	r3, r0
 800ef40:	40ca      	lsrs	r2, r1
 800ef42:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ef46:	4313      	orrs	r3, r2
 800ef48:	e7de      	b.n	800ef08 <__b2d+0x48>
 800ef4a:	ea42 0501 	orr.w	r5, r2, r1
 800ef4e:	e7db      	b.n	800ef08 <__b2d+0x48>
 800ef50:	3ff00000 	.word	0x3ff00000

0800ef54 <__d2b>:
 800ef54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef58:	460f      	mov	r7, r1
 800ef5a:	2101      	movs	r1, #1
 800ef5c:	ec59 8b10 	vmov	r8, r9, d0
 800ef60:	4616      	mov	r6, r2
 800ef62:	f7ff fc1b 	bl	800e79c <_Balloc>
 800ef66:	4604      	mov	r4, r0
 800ef68:	b930      	cbnz	r0, 800ef78 <__d2b+0x24>
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	4b23      	ldr	r3, [pc, #140]	@ (800effc <__d2b+0xa8>)
 800ef6e:	4824      	ldr	r0, [pc, #144]	@ (800f000 <__d2b+0xac>)
 800ef70:	f240 310f 	movw	r1, #783	@ 0x30f
 800ef74:	f000 f9cc 	bl	800f310 <__assert_func>
 800ef78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ef7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef80:	b10d      	cbz	r5, 800ef86 <__d2b+0x32>
 800ef82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ef86:	9301      	str	r3, [sp, #4]
 800ef88:	f1b8 0300 	subs.w	r3, r8, #0
 800ef8c:	d023      	beq.n	800efd6 <__d2b+0x82>
 800ef8e:	4668      	mov	r0, sp
 800ef90:	9300      	str	r3, [sp, #0]
 800ef92:	f7ff fd14 	bl	800e9be <__lo0bits>
 800ef96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ef9a:	b1d0      	cbz	r0, 800efd2 <__d2b+0x7e>
 800ef9c:	f1c0 0320 	rsb	r3, r0, #32
 800efa0:	fa02 f303 	lsl.w	r3, r2, r3
 800efa4:	430b      	orrs	r3, r1
 800efa6:	40c2      	lsrs	r2, r0
 800efa8:	6163      	str	r3, [r4, #20]
 800efaa:	9201      	str	r2, [sp, #4]
 800efac:	9b01      	ldr	r3, [sp, #4]
 800efae:	61a3      	str	r3, [r4, #24]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	bf0c      	ite	eq
 800efb4:	2201      	moveq	r2, #1
 800efb6:	2202      	movne	r2, #2
 800efb8:	6122      	str	r2, [r4, #16]
 800efba:	b1a5      	cbz	r5, 800efe6 <__d2b+0x92>
 800efbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800efc0:	4405      	add	r5, r0
 800efc2:	603d      	str	r5, [r7, #0]
 800efc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800efc8:	6030      	str	r0, [r6, #0]
 800efca:	4620      	mov	r0, r4
 800efcc:	b003      	add	sp, #12
 800efce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efd2:	6161      	str	r1, [r4, #20]
 800efd4:	e7ea      	b.n	800efac <__d2b+0x58>
 800efd6:	a801      	add	r0, sp, #4
 800efd8:	f7ff fcf1 	bl	800e9be <__lo0bits>
 800efdc:	9b01      	ldr	r3, [sp, #4]
 800efde:	6163      	str	r3, [r4, #20]
 800efe0:	3020      	adds	r0, #32
 800efe2:	2201      	movs	r2, #1
 800efe4:	e7e8      	b.n	800efb8 <__d2b+0x64>
 800efe6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800efea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800efee:	6038      	str	r0, [r7, #0]
 800eff0:	6918      	ldr	r0, [r3, #16]
 800eff2:	f7ff fcc5 	bl	800e980 <__hi0bits>
 800eff6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800effa:	e7e5      	b.n	800efc8 <__d2b+0x74>
 800effc:	0800fdd5 	.word	0x0800fdd5
 800f000:	0800fe72 	.word	0x0800fe72

0800f004 <__ratio>:
 800f004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f008:	b085      	sub	sp, #20
 800f00a:	e9cd 1000 	strd	r1, r0, [sp]
 800f00e:	a902      	add	r1, sp, #8
 800f010:	f7ff ff56 	bl	800eec0 <__b2d>
 800f014:	9800      	ldr	r0, [sp, #0]
 800f016:	a903      	add	r1, sp, #12
 800f018:	ec55 4b10 	vmov	r4, r5, d0
 800f01c:	f7ff ff50 	bl	800eec0 <__b2d>
 800f020:	9b01      	ldr	r3, [sp, #4]
 800f022:	6919      	ldr	r1, [r3, #16]
 800f024:	9b00      	ldr	r3, [sp, #0]
 800f026:	691b      	ldr	r3, [r3, #16]
 800f028:	1ac9      	subs	r1, r1, r3
 800f02a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f02e:	1a9b      	subs	r3, r3, r2
 800f030:	ec5b ab10 	vmov	sl, fp, d0
 800f034:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f038:	2b00      	cmp	r3, #0
 800f03a:	bfce      	itee	gt
 800f03c:	462a      	movgt	r2, r5
 800f03e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f042:	465a      	movle	r2, fp
 800f044:	462f      	mov	r7, r5
 800f046:	46d9      	mov	r9, fp
 800f048:	bfcc      	ite	gt
 800f04a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f04e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f052:	464b      	mov	r3, r9
 800f054:	4652      	mov	r2, sl
 800f056:	4620      	mov	r0, r4
 800f058:	4639      	mov	r1, r7
 800f05a:	f7f1 fc27 	bl	80008ac <__aeabi_ddiv>
 800f05e:	ec41 0b10 	vmov	d0, r0, r1
 800f062:	b005      	add	sp, #20
 800f064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f068 <__copybits>:
 800f068:	3901      	subs	r1, #1
 800f06a:	b570      	push	{r4, r5, r6, lr}
 800f06c:	1149      	asrs	r1, r1, #5
 800f06e:	6914      	ldr	r4, [r2, #16]
 800f070:	3101      	adds	r1, #1
 800f072:	f102 0314 	add.w	r3, r2, #20
 800f076:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f07a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f07e:	1f05      	subs	r5, r0, #4
 800f080:	42a3      	cmp	r3, r4
 800f082:	d30c      	bcc.n	800f09e <__copybits+0x36>
 800f084:	1aa3      	subs	r3, r4, r2
 800f086:	3b11      	subs	r3, #17
 800f088:	f023 0303 	bic.w	r3, r3, #3
 800f08c:	3211      	adds	r2, #17
 800f08e:	42a2      	cmp	r2, r4
 800f090:	bf88      	it	hi
 800f092:	2300      	movhi	r3, #0
 800f094:	4418      	add	r0, r3
 800f096:	2300      	movs	r3, #0
 800f098:	4288      	cmp	r0, r1
 800f09a:	d305      	bcc.n	800f0a8 <__copybits+0x40>
 800f09c:	bd70      	pop	{r4, r5, r6, pc}
 800f09e:	f853 6b04 	ldr.w	r6, [r3], #4
 800f0a2:	f845 6f04 	str.w	r6, [r5, #4]!
 800f0a6:	e7eb      	b.n	800f080 <__copybits+0x18>
 800f0a8:	f840 3b04 	str.w	r3, [r0], #4
 800f0ac:	e7f4      	b.n	800f098 <__copybits+0x30>

0800f0ae <__any_on>:
 800f0ae:	f100 0214 	add.w	r2, r0, #20
 800f0b2:	6900      	ldr	r0, [r0, #16]
 800f0b4:	114b      	asrs	r3, r1, #5
 800f0b6:	4298      	cmp	r0, r3
 800f0b8:	b510      	push	{r4, lr}
 800f0ba:	db11      	blt.n	800f0e0 <__any_on+0x32>
 800f0bc:	dd0a      	ble.n	800f0d4 <__any_on+0x26>
 800f0be:	f011 011f 	ands.w	r1, r1, #31
 800f0c2:	d007      	beq.n	800f0d4 <__any_on+0x26>
 800f0c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f0c8:	fa24 f001 	lsr.w	r0, r4, r1
 800f0cc:	fa00 f101 	lsl.w	r1, r0, r1
 800f0d0:	428c      	cmp	r4, r1
 800f0d2:	d10b      	bne.n	800f0ec <__any_on+0x3e>
 800f0d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d803      	bhi.n	800f0e4 <__any_on+0x36>
 800f0dc:	2000      	movs	r0, #0
 800f0de:	bd10      	pop	{r4, pc}
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	e7f7      	b.n	800f0d4 <__any_on+0x26>
 800f0e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f0e8:	2900      	cmp	r1, #0
 800f0ea:	d0f5      	beq.n	800f0d8 <__any_on+0x2a>
 800f0ec:	2001      	movs	r0, #1
 800f0ee:	e7f6      	b.n	800f0de <__any_on+0x30>

0800f0f0 <__submore>:
 800f0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f4:	460c      	mov	r4, r1
 800f0f6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f0f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0fc:	4299      	cmp	r1, r3
 800f0fe:	d11d      	bne.n	800f13c <__submore+0x4c>
 800f100:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f104:	f7ff f878 	bl	800e1f8 <_malloc_r>
 800f108:	b918      	cbnz	r0, 800f112 <__submore+0x22>
 800f10a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f112:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f116:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f118:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f11c:	6360      	str	r0, [r4, #52]	@ 0x34
 800f11e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f122:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f126:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f12a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f12e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f132:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f136:	6020      	str	r0, [r4, #0]
 800f138:	2000      	movs	r0, #0
 800f13a:	e7e8      	b.n	800f10e <__submore+0x1e>
 800f13c:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f13e:	0077      	lsls	r7, r6, #1
 800f140:	463a      	mov	r2, r7
 800f142:	f000 f80f 	bl	800f164 <_realloc_r>
 800f146:	4605      	mov	r5, r0
 800f148:	2800      	cmp	r0, #0
 800f14a:	d0de      	beq.n	800f10a <__submore+0x1a>
 800f14c:	eb00 0806 	add.w	r8, r0, r6
 800f150:	4601      	mov	r1, r0
 800f152:	4632      	mov	r2, r6
 800f154:	4640      	mov	r0, r8
 800f156:	f7fd fb05 	bl	800c764 <memcpy>
 800f15a:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f15e:	f8c4 8000 	str.w	r8, [r4]
 800f162:	e7e9      	b.n	800f138 <__submore+0x48>

0800f164 <_realloc_r>:
 800f164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f168:	4607      	mov	r7, r0
 800f16a:	4614      	mov	r4, r2
 800f16c:	460d      	mov	r5, r1
 800f16e:	b921      	cbnz	r1, 800f17a <_realloc_r+0x16>
 800f170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f174:	4611      	mov	r1, r2
 800f176:	f7ff b83f 	b.w	800e1f8 <_malloc_r>
 800f17a:	b92a      	cbnz	r2, 800f188 <_realloc_r+0x24>
 800f17c:	f7fe f968 	bl	800d450 <_free_r>
 800f180:	4625      	mov	r5, r4
 800f182:	4628      	mov	r0, r5
 800f184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f188:	f000 f8f4 	bl	800f374 <_malloc_usable_size_r>
 800f18c:	4284      	cmp	r4, r0
 800f18e:	4606      	mov	r6, r0
 800f190:	d802      	bhi.n	800f198 <_realloc_r+0x34>
 800f192:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f196:	d8f4      	bhi.n	800f182 <_realloc_r+0x1e>
 800f198:	4621      	mov	r1, r4
 800f19a:	4638      	mov	r0, r7
 800f19c:	f7ff f82c 	bl	800e1f8 <_malloc_r>
 800f1a0:	4680      	mov	r8, r0
 800f1a2:	b908      	cbnz	r0, 800f1a8 <_realloc_r+0x44>
 800f1a4:	4645      	mov	r5, r8
 800f1a6:	e7ec      	b.n	800f182 <_realloc_r+0x1e>
 800f1a8:	42b4      	cmp	r4, r6
 800f1aa:	4622      	mov	r2, r4
 800f1ac:	4629      	mov	r1, r5
 800f1ae:	bf28      	it	cs
 800f1b0:	4632      	movcs	r2, r6
 800f1b2:	f7fd fad7 	bl	800c764 <memcpy>
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	4638      	mov	r0, r7
 800f1ba:	f7fe f949 	bl	800d450 <_free_r>
 800f1be:	e7f1      	b.n	800f1a4 <_realloc_r+0x40>

0800f1c0 <_strtoul_l.isra.0>:
 800f1c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1c4:	4e34      	ldr	r6, [pc, #208]	@ (800f298 <_strtoul_l.isra.0+0xd8>)
 800f1c6:	4686      	mov	lr, r0
 800f1c8:	460d      	mov	r5, r1
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1d0:	5d37      	ldrb	r7, [r6, r4]
 800f1d2:	f017 0708 	ands.w	r7, r7, #8
 800f1d6:	d1f8      	bne.n	800f1ca <_strtoul_l.isra.0+0xa>
 800f1d8:	2c2d      	cmp	r4, #45	@ 0x2d
 800f1da:	d110      	bne.n	800f1fe <_strtoul_l.isra.0+0x3e>
 800f1dc:	782c      	ldrb	r4, [r5, #0]
 800f1de:	2701      	movs	r7, #1
 800f1e0:	1c85      	adds	r5, r0, #2
 800f1e2:	f033 0010 	bics.w	r0, r3, #16
 800f1e6:	d115      	bne.n	800f214 <_strtoul_l.isra.0+0x54>
 800f1e8:	2c30      	cmp	r4, #48	@ 0x30
 800f1ea:	d10d      	bne.n	800f208 <_strtoul_l.isra.0+0x48>
 800f1ec:	7828      	ldrb	r0, [r5, #0]
 800f1ee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f1f2:	2858      	cmp	r0, #88	@ 0x58
 800f1f4:	d108      	bne.n	800f208 <_strtoul_l.isra.0+0x48>
 800f1f6:	786c      	ldrb	r4, [r5, #1]
 800f1f8:	3502      	adds	r5, #2
 800f1fa:	2310      	movs	r3, #16
 800f1fc:	e00a      	b.n	800f214 <_strtoul_l.isra.0+0x54>
 800f1fe:	2c2b      	cmp	r4, #43	@ 0x2b
 800f200:	bf04      	itt	eq
 800f202:	782c      	ldrbeq	r4, [r5, #0]
 800f204:	1c85      	addeq	r5, r0, #2
 800f206:	e7ec      	b.n	800f1e2 <_strtoul_l.isra.0+0x22>
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d1f6      	bne.n	800f1fa <_strtoul_l.isra.0+0x3a>
 800f20c:	2c30      	cmp	r4, #48	@ 0x30
 800f20e:	bf14      	ite	ne
 800f210:	230a      	movne	r3, #10
 800f212:	2308      	moveq	r3, #8
 800f214:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800f218:	2600      	movs	r6, #0
 800f21a:	fbb8 f8f3 	udiv	r8, r8, r3
 800f21e:	fb03 f908 	mul.w	r9, r3, r8
 800f222:	ea6f 0909 	mvn.w	r9, r9
 800f226:	4630      	mov	r0, r6
 800f228:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f22c:	f1bc 0f09 	cmp.w	ip, #9
 800f230:	d810      	bhi.n	800f254 <_strtoul_l.isra.0+0x94>
 800f232:	4664      	mov	r4, ip
 800f234:	42a3      	cmp	r3, r4
 800f236:	dd1e      	ble.n	800f276 <_strtoul_l.isra.0+0xb6>
 800f238:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800f23c:	d007      	beq.n	800f24e <_strtoul_l.isra.0+0x8e>
 800f23e:	4580      	cmp	r8, r0
 800f240:	d316      	bcc.n	800f270 <_strtoul_l.isra.0+0xb0>
 800f242:	d101      	bne.n	800f248 <_strtoul_l.isra.0+0x88>
 800f244:	45a1      	cmp	r9, r4
 800f246:	db13      	blt.n	800f270 <_strtoul_l.isra.0+0xb0>
 800f248:	fb00 4003 	mla	r0, r0, r3, r4
 800f24c:	2601      	movs	r6, #1
 800f24e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f252:	e7e9      	b.n	800f228 <_strtoul_l.isra.0+0x68>
 800f254:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f258:	f1bc 0f19 	cmp.w	ip, #25
 800f25c:	d801      	bhi.n	800f262 <_strtoul_l.isra.0+0xa2>
 800f25e:	3c37      	subs	r4, #55	@ 0x37
 800f260:	e7e8      	b.n	800f234 <_strtoul_l.isra.0+0x74>
 800f262:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f266:	f1bc 0f19 	cmp.w	ip, #25
 800f26a:	d804      	bhi.n	800f276 <_strtoul_l.isra.0+0xb6>
 800f26c:	3c57      	subs	r4, #87	@ 0x57
 800f26e:	e7e1      	b.n	800f234 <_strtoul_l.isra.0+0x74>
 800f270:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800f274:	e7eb      	b.n	800f24e <_strtoul_l.isra.0+0x8e>
 800f276:	1c73      	adds	r3, r6, #1
 800f278:	d106      	bne.n	800f288 <_strtoul_l.isra.0+0xc8>
 800f27a:	2322      	movs	r3, #34	@ 0x22
 800f27c:	f8ce 3000 	str.w	r3, [lr]
 800f280:	4630      	mov	r0, r6
 800f282:	b932      	cbnz	r2, 800f292 <_strtoul_l.isra.0+0xd2>
 800f284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f288:	b107      	cbz	r7, 800f28c <_strtoul_l.isra.0+0xcc>
 800f28a:	4240      	negs	r0, r0
 800f28c:	2a00      	cmp	r2, #0
 800f28e:	d0f9      	beq.n	800f284 <_strtoul_l.isra.0+0xc4>
 800f290:	b106      	cbz	r6, 800f294 <_strtoul_l.isra.0+0xd4>
 800f292:	1e69      	subs	r1, r5, #1
 800f294:	6011      	str	r1, [r2, #0]
 800f296:	e7f5      	b.n	800f284 <_strtoul_l.isra.0+0xc4>
 800f298:	0800ff59 	.word	0x0800ff59

0800f29c <_strtoul_r>:
 800f29c:	f7ff bf90 	b.w	800f1c0 <_strtoul_l.isra.0>

0800f2a0 <__ascii_wctomb>:
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	4608      	mov	r0, r1
 800f2a4:	b141      	cbz	r1, 800f2b8 <__ascii_wctomb+0x18>
 800f2a6:	2aff      	cmp	r2, #255	@ 0xff
 800f2a8:	d904      	bls.n	800f2b4 <__ascii_wctomb+0x14>
 800f2aa:	228a      	movs	r2, #138	@ 0x8a
 800f2ac:	601a      	str	r2, [r3, #0]
 800f2ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f2b2:	4770      	bx	lr
 800f2b4:	700a      	strb	r2, [r1, #0]
 800f2b6:	2001      	movs	r0, #1
 800f2b8:	4770      	bx	lr

0800f2ba <memmove>:
 800f2ba:	4288      	cmp	r0, r1
 800f2bc:	b510      	push	{r4, lr}
 800f2be:	eb01 0402 	add.w	r4, r1, r2
 800f2c2:	d902      	bls.n	800f2ca <memmove+0x10>
 800f2c4:	4284      	cmp	r4, r0
 800f2c6:	4623      	mov	r3, r4
 800f2c8:	d807      	bhi.n	800f2da <memmove+0x20>
 800f2ca:	1e43      	subs	r3, r0, #1
 800f2cc:	42a1      	cmp	r1, r4
 800f2ce:	d008      	beq.n	800f2e2 <memmove+0x28>
 800f2d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2d8:	e7f8      	b.n	800f2cc <memmove+0x12>
 800f2da:	4402      	add	r2, r0
 800f2dc:	4601      	mov	r1, r0
 800f2de:	428a      	cmp	r2, r1
 800f2e0:	d100      	bne.n	800f2e4 <memmove+0x2a>
 800f2e2:	bd10      	pop	{r4, pc}
 800f2e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2ec:	e7f7      	b.n	800f2de <memmove+0x24>
	...

0800f2f0 <_sbrk_r>:
 800f2f0:	b538      	push	{r3, r4, r5, lr}
 800f2f2:	4d06      	ldr	r5, [pc, #24]	@ (800f30c <_sbrk_r+0x1c>)
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	4608      	mov	r0, r1
 800f2fa:	602b      	str	r3, [r5, #0]
 800f2fc:	f7f2 fcc4 	bl	8001c88 <_sbrk>
 800f300:	1c43      	adds	r3, r0, #1
 800f302:	d102      	bne.n	800f30a <_sbrk_r+0x1a>
 800f304:	682b      	ldr	r3, [r5, #0]
 800f306:	b103      	cbz	r3, 800f30a <_sbrk_r+0x1a>
 800f308:	6023      	str	r3, [r4, #0]
 800f30a:	bd38      	pop	{r3, r4, r5, pc}
 800f30c:	20000d98 	.word	0x20000d98

0800f310 <__assert_func>:
 800f310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f312:	4614      	mov	r4, r2
 800f314:	461a      	mov	r2, r3
 800f316:	4b09      	ldr	r3, [pc, #36]	@ (800f33c <__assert_func+0x2c>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	4605      	mov	r5, r0
 800f31c:	68d8      	ldr	r0, [r3, #12]
 800f31e:	b14c      	cbz	r4, 800f334 <__assert_func+0x24>
 800f320:	4b07      	ldr	r3, [pc, #28]	@ (800f340 <__assert_func+0x30>)
 800f322:	9100      	str	r1, [sp, #0]
 800f324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f328:	4906      	ldr	r1, [pc, #24]	@ (800f344 <__assert_func+0x34>)
 800f32a:	462b      	mov	r3, r5
 800f32c:	f000 f82a 	bl	800f384 <fiprintf>
 800f330:	f000 f83a 	bl	800f3a8 <abort>
 800f334:	4b04      	ldr	r3, [pc, #16]	@ (800f348 <__assert_func+0x38>)
 800f336:	461c      	mov	r4, r3
 800f338:	e7f3      	b.n	800f322 <__assert_func+0x12>
 800f33a:	bf00      	nop
 800f33c:	20000540 	.word	0x20000540
 800f340:	0800fecb 	.word	0x0800fecb
 800f344:	0800fed8 	.word	0x0800fed8
 800f348:	0800ff06 	.word	0x0800ff06

0800f34c <_calloc_r>:
 800f34c:	b570      	push	{r4, r5, r6, lr}
 800f34e:	fba1 5402 	umull	r5, r4, r1, r2
 800f352:	b934      	cbnz	r4, 800f362 <_calloc_r+0x16>
 800f354:	4629      	mov	r1, r5
 800f356:	f7fe ff4f 	bl	800e1f8 <_malloc_r>
 800f35a:	4606      	mov	r6, r0
 800f35c:	b928      	cbnz	r0, 800f36a <_calloc_r+0x1e>
 800f35e:	4630      	mov	r0, r6
 800f360:	bd70      	pop	{r4, r5, r6, pc}
 800f362:	220c      	movs	r2, #12
 800f364:	6002      	str	r2, [r0, #0]
 800f366:	2600      	movs	r6, #0
 800f368:	e7f9      	b.n	800f35e <_calloc_r+0x12>
 800f36a:	462a      	mov	r2, r5
 800f36c:	4621      	mov	r1, r4
 800f36e:	f7fd f953 	bl	800c618 <memset>
 800f372:	e7f4      	b.n	800f35e <_calloc_r+0x12>

0800f374 <_malloc_usable_size_r>:
 800f374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f378:	1f18      	subs	r0, r3, #4
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	bfbc      	itt	lt
 800f37e:	580b      	ldrlt	r3, [r1, r0]
 800f380:	18c0      	addlt	r0, r0, r3
 800f382:	4770      	bx	lr

0800f384 <fiprintf>:
 800f384:	b40e      	push	{r1, r2, r3}
 800f386:	b503      	push	{r0, r1, lr}
 800f388:	4601      	mov	r1, r0
 800f38a:	ab03      	add	r3, sp, #12
 800f38c:	4805      	ldr	r0, [pc, #20]	@ (800f3a4 <fiprintf+0x20>)
 800f38e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f392:	6800      	ldr	r0, [r0, #0]
 800f394:	9301      	str	r3, [sp, #4]
 800f396:	f000 f837 	bl	800f408 <_vfiprintf_r>
 800f39a:	b002      	add	sp, #8
 800f39c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3a0:	b003      	add	sp, #12
 800f3a2:	4770      	bx	lr
 800f3a4:	20000540 	.word	0x20000540

0800f3a8 <abort>:
 800f3a8:	b508      	push	{r3, lr}
 800f3aa:	2006      	movs	r0, #6
 800f3ac:	f000 fa62 	bl	800f874 <raise>
 800f3b0:	2001      	movs	r0, #1
 800f3b2:	f7f2 fbf1 	bl	8001b98 <_exit>

0800f3b6 <__sfputc_r>:
 800f3b6:	6893      	ldr	r3, [r2, #8]
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	b410      	push	{r4}
 800f3be:	6093      	str	r3, [r2, #8]
 800f3c0:	da08      	bge.n	800f3d4 <__sfputc_r+0x1e>
 800f3c2:	6994      	ldr	r4, [r2, #24]
 800f3c4:	42a3      	cmp	r3, r4
 800f3c6:	db01      	blt.n	800f3cc <__sfputc_r+0x16>
 800f3c8:	290a      	cmp	r1, #10
 800f3ca:	d103      	bne.n	800f3d4 <__sfputc_r+0x1e>
 800f3cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3d0:	f000 b932 	b.w	800f638 <__swbuf_r>
 800f3d4:	6813      	ldr	r3, [r2, #0]
 800f3d6:	1c58      	adds	r0, r3, #1
 800f3d8:	6010      	str	r0, [r2, #0]
 800f3da:	7019      	strb	r1, [r3, #0]
 800f3dc:	4608      	mov	r0, r1
 800f3de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3e2:	4770      	bx	lr

0800f3e4 <__sfputs_r>:
 800f3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3e6:	4606      	mov	r6, r0
 800f3e8:	460f      	mov	r7, r1
 800f3ea:	4614      	mov	r4, r2
 800f3ec:	18d5      	adds	r5, r2, r3
 800f3ee:	42ac      	cmp	r4, r5
 800f3f0:	d101      	bne.n	800f3f6 <__sfputs_r+0x12>
 800f3f2:	2000      	movs	r0, #0
 800f3f4:	e007      	b.n	800f406 <__sfputs_r+0x22>
 800f3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3fa:	463a      	mov	r2, r7
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	f7ff ffda 	bl	800f3b6 <__sfputc_r>
 800f402:	1c43      	adds	r3, r0, #1
 800f404:	d1f3      	bne.n	800f3ee <__sfputs_r+0xa>
 800f406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f408 <_vfiprintf_r>:
 800f408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f40c:	460d      	mov	r5, r1
 800f40e:	b09d      	sub	sp, #116	@ 0x74
 800f410:	4614      	mov	r4, r2
 800f412:	4698      	mov	r8, r3
 800f414:	4606      	mov	r6, r0
 800f416:	b118      	cbz	r0, 800f420 <_vfiprintf_r+0x18>
 800f418:	6a03      	ldr	r3, [r0, #32]
 800f41a:	b90b      	cbnz	r3, 800f420 <_vfiprintf_r+0x18>
 800f41c:	f7fc fa40 	bl	800b8a0 <__sinit>
 800f420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f422:	07d9      	lsls	r1, r3, #31
 800f424:	d405      	bmi.n	800f432 <_vfiprintf_r+0x2a>
 800f426:	89ab      	ldrh	r3, [r5, #12]
 800f428:	059a      	lsls	r2, r3, #22
 800f42a:	d402      	bmi.n	800f432 <_vfiprintf_r+0x2a>
 800f42c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f42e:	f7fd f982 	bl	800c736 <__retarget_lock_acquire_recursive>
 800f432:	89ab      	ldrh	r3, [r5, #12]
 800f434:	071b      	lsls	r3, r3, #28
 800f436:	d501      	bpl.n	800f43c <_vfiprintf_r+0x34>
 800f438:	692b      	ldr	r3, [r5, #16]
 800f43a:	b99b      	cbnz	r3, 800f464 <_vfiprintf_r+0x5c>
 800f43c:	4629      	mov	r1, r5
 800f43e:	4630      	mov	r0, r6
 800f440:	f000 f938 	bl	800f6b4 <__swsetup_r>
 800f444:	b170      	cbz	r0, 800f464 <_vfiprintf_r+0x5c>
 800f446:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f448:	07dc      	lsls	r4, r3, #31
 800f44a:	d504      	bpl.n	800f456 <_vfiprintf_r+0x4e>
 800f44c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f450:	b01d      	add	sp, #116	@ 0x74
 800f452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f456:	89ab      	ldrh	r3, [r5, #12]
 800f458:	0598      	lsls	r0, r3, #22
 800f45a:	d4f7      	bmi.n	800f44c <_vfiprintf_r+0x44>
 800f45c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f45e:	f7fd f96b 	bl	800c738 <__retarget_lock_release_recursive>
 800f462:	e7f3      	b.n	800f44c <_vfiprintf_r+0x44>
 800f464:	2300      	movs	r3, #0
 800f466:	9309      	str	r3, [sp, #36]	@ 0x24
 800f468:	2320      	movs	r3, #32
 800f46a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f46e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f472:	2330      	movs	r3, #48	@ 0x30
 800f474:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f624 <_vfiprintf_r+0x21c>
 800f478:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f47c:	f04f 0901 	mov.w	r9, #1
 800f480:	4623      	mov	r3, r4
 800f482:	469a      	mov	sl, r3
 800f484:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f488:	b10a      	cbz	r2, 800f48e <_vfiprintf_r+0x86>
 800f48a:	2a25      	cmp	r2, #37	@ 0x25
 800f48c:	d1f9      	bne.n	800f482 <_vfiprintf_r+0x7a>
 800f48e:	ebba 0b04 	subs.w	fp, sl, r4
 800f492:	d00b      	beq.n	800f4ac <_vfiprintf_r+0xa4>
 800f494:	465b      	mov	r3, fp
 800f496:	4622      	mov	r2, r4
 800f498:	4629      	mov	r1, r5
 800f49a:	4630      	mov	r0, r6
 800f49c:	f7ff ffa2 	bl	800f3e4 <__sfputs_r>
 800f4a0:	3001      	adds	r0, #1
 800f4a2:	f000 80a7 	beq.w	800f5f4 <_vfiprintf_r+0x1ec>
 800f4a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4a8:	445a      	add	r2, fp
 800f4aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	f000 809f 	beq.w	800f5f4 <_vfiprintf_r+0x1ec>
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f4bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4c0:	f10a 0a01 	add.w	sl, sl, #1
 800f4c4:	9304      	str	r3, [sp, #16]
 800f4c6:	9307      	str	r3, [sp, #28]
 800f4c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f4cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800f4ce:	4654      	mov	r4, sl
 800f4d0:	2205      	movs	r2, #5
 800f4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4d6:	4853      	ldr	r0, [pc, #332]	@ (800f624 <_vfiprintf_r+0x21c>)
 800f4d8:	f7f0 feaa 	bl	8000230 <memchr>
 800f4dc:	9a04      	ldr	r2, [sp, #16]
 800f4de:	b9d8      	cbnz	r0, 800f518 <_vfiprintf_r+0x110>
 800f4e0:	06d1      	lsls	r1, r2, #27
 800f4e2:	bf44      	itt	mi
 800f4e4:	2320      	movmi	r3, #32
 800f4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4ea:	0713      	lsls	r3, r2, #28
 800f4ec:	bf44      	itt	mi
 800f4ee:	232b      	movmi	r3, #43	@ 0x2b
 800f4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800f4f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4fa:	d015      	beq.n	800f528 <_vfiprintf_r+0x120>
 800f4fc:	9a07      	ldr	r2, [sp, #28]
 800f4fe:	4654      	mov	r4, sl
 800f500:	2000      	movs	r0, #0
 800f502:	f04f 0c0a 	mov.w	ip, #10
 800f506:	4621      	mov	r1, r4
 800f508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f50c:	3b30      	subs	r3, #48	@ 0x30
 800f50e:	2b09      	cmp	r3, #9
 800f510:	d94b      	bls.n	800f5aa <_vfiprintf_r+0x1a2>
 800f512:	b1b0      	cbz	r0, 800f542 <_vfiprintf_r+0x13a>
 800f514:	9207      	str	r2, [sp, #28]
 800f516:	e014      	b.n	800f542 <_vfiprintf_r+0x13a>
 800f518:	eba0 0308 	sub.w	r3, r0, r8
 800f51c:	fa09 f303 	lsl.w	r3, r9, r3
 800f520:	4313      	orrs	r3, r2
 800f522:	9304      	str	r3, [sp, #16]
 800f524:	46a2      	mov	sl, r4
 800f526:	e7d2      	b.n	800f4ce <_vfiprintf_r+0xc6>
 800f528:	9b03      	ldr	r3, [sp, #12]
 800f52a:	1d19      	adds	r1, r3, #4
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	9103      	str	r1, [sp, #12]
 800f530:	2b00      	cmp	r3, #0
 800f532:	bfbb      	ittet	lt
 800f534:	425b      	neglt	r3, r3
 800f536:	f042 0202 	orrlt.w	r2, r2, #2
 800f53a:	9307      	strge	r3, [sp, #28]
 800f53c:	9307      	strlt	r3, [sp, #28]
 800f53e:	bfb8      	it	lt
 800f540:	9204      	strlt	r2, [sp, #16]
 800f542:	7823      	ldrb	r3, [r4, #0]
 800f544:	2b2e      	cmp	r3, #46	@ 0x2e
 800f546:	d10a      	bne.n	800f55e <_vfiprintf_r+0x156>
 800f548:	7863      	ldrb	r3, [r4, #1]
 800f54a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f54c:	d132      	bne.n	800f5b4 <_vfiprintf_r+0x1ac>
 800f54e:	9b03      	ldr	r3, [sp, #12]
 800f550:	1d1a      	adds	r2, r3, #4
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	9203      	str	r2, [sp, #12]
 800f556:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f55a:	3402      	adds	r4, #2
 800f55c:	9305      	str	r3, [sp, #20]
 800f55e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f634 <_vfiprintf_r+0x22c>
 800f562:	7821      	ldrb	r1, [r4, #0]
 800f564:	2203      	movs	r2, #3
 800f566:	4650      	mov	r0, sl
 800f568:	f7f0 fe62 	bl	8000230 <memchr>
 800f56c:	b138      	cbz	r0, 800f57e <_vfiprintf_r+0x176>
 800f56e:	9b04      	ldr	r3, [sp, #16]
 800f570:	eba0 000a 	sub.w	r0, r0, sl
 800f574:	2240      	movs	r2, #64	@ 0x40
 800f576:	4082      	lsls	r2, r0
 800f578:	4313      	orrs	r3, r2
 800f57a:	3401      	adds	r4, #1
 800f57c:	9304      	str	r3, [sp, #16]
 800f57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f582:	4829      	ldr	r0, [pc, #164]	@ (800f628 <_vfiprintf_r+0x220>)
 800f584:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f588:	2206      	movs	r2, #6
 800f58a:	f7f0 fe51 	bl	8000230 <memchr>
 800f58e:	2800      	cmp	r0, #0
 800f590:	d03f      	beq.n	800f612 <_vfiprintf_r+0x20a>
 800f592:	4b26      	ldr	r3, [pc, #152]	@ (800f62c <_vfiprintf_r+0x224>)
 800f594:	bb1b      	cbnz	r3, 800f5de <_vfiprintf_r+0x1d6>
 800f596:	9b03      	ldr	r3, [sp, #12]
 800f598:	3307      	adds	r3, #7
 800f59a:	f023 0307 	bic.w	r3, r3, #7
 800f59e:	3308      	adds	r3, #8
 800f5a0:	9303      	str	r3, [sp, #12]
 800f5a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5a4:	443b      	add	r3, r7
 800f5a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5a8:	e76a      	b.n	800f480 <_vfiprintf_r+0x78>
 800f5aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	2001      	movs	r0, #1
 800f5b2:	e7a8      	b.n	800f506 <_vfiprintf_r+0xfe>
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	3401      	adds	r4, #1
 800f5b8:	9305      	str	r3, [sp, #20]
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	f04f 0c0a 	mov.w	ip, #10
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5c6:	3a30      	subs	r2, #48	@ 0x30
 800f5c8:	2a09      	cmp	r2, #9
 800f5ca:	d903      	bls.n	800f5d4 <_vfiprintf_r+0x1cc>
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d0c6      	beq.n	800f55e <_vfiprintf_r+0x156>
 800f5d0:	9105      	str	r1, [sp, #20]
 800f5d2:	e7c4      	b.n	800f55e <_vfiprintf_r+0x156>
 800f5d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5d8:	4604      	mov	r4, r0
 800f5da:	2301      	movs	r3, #1
 800f5dc:	e7f0      	b.n	800f5c0 <_vfiprintf_r+0x1b8>
 800f5de:	ab03      	add	r3, sp, #12
 800f5e0:	9300      	str	r3, [sp, #0]
 800f5e2:	462a      	mov	r2, r5
 800f5e4:	4b12      	ldr	r3, [pc, #72]	@ (800f630 <_vfiprintf_r+0x228>)
 800f5e6:	a904      	add	r1, sp, #16
 800f5e8:	4630      	mov	r0, r6
 800f5ea:	f7fb fa3f 	bl	800aa6c <_printf_float>
 800f5ee:	4607      	mov	r7, r0
 800f5f0:	1c78      	adds	r0, r7, #1
 800f5f2:	d1d6      	bne.n	800f5a2 <_vfiprintf_r+0x19a>
 800f5f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5f6:	07d9      	lsls	r1, r3, #31
 800f5f8:	d405      	bmi.n	800f606 <_vfiprintf_r+0x1fe>
 800f5fa:	89ab      	ldrh	r3, [r5, #12]
 800f5fc:	059a      	lsls	r2, r3, #22
 800f5fe:	d402      	bmi.n	800f606 <_vfiprintf_r+0x1fe>
 800f600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f602:	f7fd f899 	bl	800c738 <__retarget_lock_release_recursive>
 800f606:	89ab      	ldrh	r3, [r5, #12]
 800f608:	065b      	lsls	r3, r3, #25
 800f60a:	f53f af1f 	bmi.w	800f44c <_vfiprintf_r+0x44>
 800f60e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f610:	e71e      	b.n	800f450 <_vfiprintf_r+0x48>
 800f612:	ab03      	add	r3, sp, #12
 800f614:	9300      	str	r3, [sp, #0]
 800f616:	462a      	mov	r2, r5
 800f618:	4b05      	ldr	r3, [pc, #20]	@ (800f630 <_vfiprintf_r+0x228>)
 800f61a:	a904      	add	r1, sp, #16
 800f61c:	4630      	mov	r0, r6
 800f61e:	f7fb fcbd 	bl	800af9c <_printf_i>
 800f622:	e7e4      	b.n	800f5ee <_vfiprintf_r+0x1e6>
 800f624:	0800fe46 	.word	0x0800fe46
 800f628:	0800fe50 	.word	0x0800fe50
 800f62c:	0800aa6d 	.word	0x0800aa6d
 800f630:	0800f3e5 	.word	0x0800f3e5
 800f634:	0800fe4c 	.word	0x0800fe4c

0800f638 <__swbuf_r>:
 800f638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f63a:	460e      	mov	r6, r1
 800f63c:	4614      	mov	r4, r2
 800f63e:	4605      	mov	r5, r0
 800f640:	b118      	cbz	r0, 800f64a <__swbuf_r+0x12>
 800f642:	6a03      	ldr	r3, [r0, #32]
 800f644:	b90b      	cbnz	r3, 800f64a <__swbuf_r+0x12>
 800f646:	f7fc f92b 	bl	800b8a0 <__sinit>
 800f64a:	69a3      	ldr	r3, [r4, #24]
 800f64c:	60a3      	str	r3, [r4, #8]
 800f64e:	89a3      	ldrh	r3, [r4, #12]
 800f650:	071a      	lsls	r2, r3, #28
 800f652:	d501      	bpl.n	800f658 <__swbuf_r+0x20>
 800f654:	6923      	ldr	r3, [r4, #16]
 800f656:	b943      	cbnz	r3, 800f66a <__swbuf_r+0x32>
 800f658:	4621      	mov	r1, r4
 800f65a:	4628      	mov	r0, r5
 800f65c:	f000 f82a 	bl	800f6b4 <__swsetup_r>
 800f660:	b118      	cbz	r0, 800f66a <__swbuf_r+0x32>
 800f662:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f666:	4638      	mov	r0, r7
 800f668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f66a:	6823      	ldr	r3, [r4, #0]
 800f66c:	6922      	ldr	r2, [r4, #16]
 800f66e:	1a98      	subs	r0, r3, r2
 800f670:	6963      	ldr	r3, [r4, #20]
 800f672:	b2f6      	uxtb	r6, r6
 800f674:	4283      	cmp	r3, r0
 800f676:	4637      	mov	r7, r6
 800f678:	dc05      	bgt.n	800f686 <__swbuf_r+0x4e>
 800f67a:	4621      	mov	r1, r4
 800f67c:	4628      	mov	r0, r5
 800f67e:	f7ff f859 	bl	800e734 <_fflush_r>
 800f682:	2800      	cmp	r0, #0
 800f684:	d1ed      	bne.n	800f662 <__swbuf_r+0x2a>
 800f686:	68a3      	ldr	r3, [r4, #8]
 800f688:	3b01      	subs	r3, #1
 800f68a:	60a3      	str	r3, [r4, #8]
 800f68c:	6823      	ldr	r3, [r4, #0]
 800f68e:	1c5a      	adds	r2, r3, #1
 800f690:	6022      	str	r2, [r4, #0]
 800f692:	701e      	strb	r6, [r3, #0]
 800f694:	6962      	ldr	r2, [r4, #20]
 800f696:	1c43      	adds	r3, r0, #1
 800f698:	429a      	cmp	r2, r3
 800f69a:	d004      	beq.n	800f6a6 <__swbuf_r+0x6e>
 800f69c:	89a3      	ldrh	r3, [r4, #12]
 800f69e:	07db      	lsls	r3, r3, #31
 800f6a0:	d5e1      	bpl.n	800f666 <__swbuf_r+0x2e>
 800f6a2:	2e0a      	cmp	r6, #10
 800f6a4:	d1df      	bne.n	800f666 <__swbuf_r+0x2e>
 800f6a6:	4621      	mov	r1, r4
 800f6a8:	4628      	mov	r0, r5
 800f6aa:	f7ff f843 	bl	800e734 <_fflush_r>
 800f6ae:	2800      	cmp	r0, #0
 800f6b0:	d0d9      	beq.n	800f666 <__swbuf_r+0x2e>
 800f6b2:	e7d6      	b.n	800f662 <__swbuf_r+0x2a>

0800f6b4 <__swsetup_r>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	4b29      	ldr	r3, [pc, #164]	@ (800f75c <__swsetup_r+0xa8>)
 800f6b8:	4605      	mov	r5, r0
 800f6ba:	6818      	ldr	r0, [r3, #0]
 800f6bc:	460c      	mov	r4, r1
 800f6be:	b118      	cbz	r0, 800f6c8 <__swsetup_r+0x14>
 800f6c0:	6a03      	ldr	r3, [r0, #32]
 800f6c2:	b90b      	cbnz	r3, 800f6c8 <__swsetup_r+0x14>
 800f6c4:	f7fc f8ec 	bl	800b8a0 <__sinit>
 800f6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6cc:	0719      	lsls	r1, r3, #28
 800f6ce:	d422      	bmi.n	800f716 <__swsetup_r+0x62>
 800f6d0:	06da      	lsls	r2, r3, #27
 800f6d2:	d407      	bmi.n	800f6e4 <__swsetup_r+0x30>
 800f6d4:	2209      	movs	r2, #9
 800f6d6:	602a      	str	r2, [r5, #0]
 800f6d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6dc:	81a3      	strh	r3, [r4, #12]
 800f6de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f6e2:	e033      	b.n	800f74c <__swsetup_r+0x98>
 800f6e4:	0758      	lsls	r0, r3, #29
 800f6e6:	d512      	bpl.n	800f70e <__swsetup_r+0x5a>
 800f6e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6ea:	b141      	cbz	r1, 800f6fe <__swsetup_r+0x4a>
 800f6ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6f0:	4299      	cmp	r1, r3
 800f6f2:	d002      	beq.n	800f6fa <__swsetup_r+0x46>
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	f7fd feab 	bl	800d450 <_free_r>
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6fe:	89a3      	ldrh	r3, [r4, #12]
 800f700:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f704:	81a3      	strh	r3, [r4, #12]
 800f706:	2300      	movs	r3, #0
 800f708:	6063      	str	r3, [r4, #4]
 800f70a:	6923      	ldr	r3, [r4, #16]
 800f70c:	6023      	str	r3, [r4, #0]
 800f70e:	89a3      	ldrh	r3, [r4, #12]
 800f710:	f043 0308 	orr.w	r3, r3, #8
 800f714:	81a3      	strh	r3, [r4, #12]
 800f716:	6923      	ldr	r3, [r4, #16]
 800f718:	b94b      	cbnz	r3, 800f72e <__swsetup_r+0x7a>
 800f71a:	89a3      	ldrh	r3, [r4, #12]
 800f71c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f724:	d003      	beq.n	800f72e <__swsetup_r+0x7a>
 800f726:	4621      	mov	r1, r4
 800f728:	4628      	mov	r0, r5
 800f72a:	f000 f83f 	bl	800f7ac <__smakebuf_r>
 800f72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f732:	f013 0201 	ands.w	r2, r3, #1
 800f736:	d00a      	beq.n	800f74e <__swsetup_r+0x9a>
 800f738:	2200      	movs	r2, #0
 800f73a:	60a2      	str	r2, [r4, #8]
 800f73c:	6962      	ldr	r2, [r4, #20]
 800f73e:	4252      	negs	r2, r2
 800f740:	61a2      	str	r2, [r4, #24]
 800f742:	6922      	ldr	r2, [r4, #16]
 800f744:	b942      	cbnz	r2, 800f758 <__swsetup_r+0xa4>
 800f746:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f74a:	d1c5      	bne.n	800f6d8 <__swsetup_r+0x24>
 800f74c:	bd38      	pop	{r3, r4, r5, pc}
 800f74e:	0799      	lsls	r1, r3, #30
 800f750:	bf58      	it	pl
 800f752:	6962      	ldrpl	r2, [r4, #20]
 800f754:	60a2      	str	r2, [r4, #8]
 800f756:	e7f4      	b.n	800f742 <__swsetup_r+0x8e>
 800f758:	2000      	movs	r0, #0
 800f75a:	e7f7      	b.n	800f74c <__swsetup_r+0x98>
 800f75c:	20000540 	.word	0x20000540

0800f760 <__swhatbuf_r>:
 800f760:	b570      	push	{r4, r5, r6, lr}
 800f762:	460c      	mov	r4, r1
 800f764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f768:	2900      	cmp	r1, #0
 800f76a:	b096      	sub	sp, #88	@ 0x58
 800f76c:	4615      	mov	r5, r2
 800f76e:	461e      	mov	r6, r3
 800f770:	da0d      	bge.n	800f78e <__swhatbuf_r+0x2e>
 800f772:	89a3      	ldrh	r3, [r4, #12]
 800f774:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f778:	f04f 0100 	mov.w	r1, #0
 800f77c:	bf14      	ite	ne
 800f77e:	2340      	movne	r3, #64	@ 0x40
 800f780:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f784:	2000      	movs	r0, #0
 800f786:	6031      	str	r1, [r6, #0]
 800f788:	602b      	str	r3, [r5, #0]
 800f78a:	b016      	add	sp, #88	@ 0x58
 800f78c:	bd70      	pop	{r4, r5, r6, pc}
 800f78e:	466a      	mov	r2, sp
 800f790:	f000 f89c 	bl	800f8cc <_fstat_r>
 800f794:	2800      	cmp	r0, #0
 800f796:	dbec      	blt.n	800f772 <__swhatbuf_r+0x12>
 800f798:	9901      	ldr	r1, [sp, #4]
 800f79a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f79e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f7a2:	4259      	negs	r1, r3
 800f7a4:	4159      	adcs	r1, r3
 800f7a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7aa:	e7eb      	b.n	800f784 <__swhatbuf_r+0x24>

0800f7ac <__smakebuf_r>:
 800f7ac:	898b      	ldrh	r3, [r1, #12]
 800f7ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7b0:	079d      	lsls	r5, r3, #30
 800f7b2:	4606      	mov	r6, r0
 800f7b4:	460c      	mov	r4, r1
 800f7b6:	d507      	bpl.n	800f7c8 <__smakebuf_r+0x1c>
 800f7b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f7bc:	6023      	str	r3, [r4, #0]
 800f7be:	6123      	str	r3, [r4, #16]
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	6163      	str	r3, [r4, #20]
 800f7c4:	b003      	add	sp, #12
 800f7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7c8:	ab01      	add	r3, sp, #4
 800f7ca:	466a      	mov	r2, sp
 800f7cc:	f7ff ffc8 	bl	800f760 <__swhatbuf_r>
 800f7d0:	9f00      	ldr	r7, [sp, #0]
 800f7d2:	4605      	mov	r5, r0
 800f7d4:	4639      	mov	r1, r7
 800f7d6:	4630      	mov	r0, r6
 800f7d8:	f7fe fd0e 	bl	800e1f8 <_malloc_r>
 800f7dc:	b948      	cbnz	r0, 800f7f2 <__smakebuf_r+0x46>
 800f7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7e2:	059a      	lsls	r2, r3, #22
 800f7e4:	d4ee      	bmi.n	800f7c4 <__smakebuf_r+0x18>
 800f7e6:	f023 0303 	bic.w	r3, r3, #3
 800f7ea:	f043 0302 	orr.w	r3, r3, #2
 800f7ee:	81a3      	strh	r3, [r4, #12]
 800f7f0:	e7e2      	b.n	800f7b8 <__smakebuf_r+0xc>
 800f7f2:	89a3      	ldrh	r3, [r4, #12]
 800f7f4:	6020      	str	r0, [r4, #0]
 800f7f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7fa:	81a3      	strh	r3, [r4, #12]
 800f7fc:	9b01      	ldr	r3, [sp, #4]
 800f7fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f802:	b15b      	cbz	r3, 800f81c <__smakebuf_r+0x70>
 800f804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f808:	4630      	mov	r0, r6
 800f80a:	f000 f83b 	bl	800f884 <_isatty_r>
 800f80e:	b128      	cbz	r0, 800f81c <__smakebuf_r+0x70>
 800f810:	89a3      	ldrh	r3, [r4, #12]
 800f812:	f023 0303 	bic.w	r3, r3, #3
 800f816:	f043 0301 	orr.w	r3, r3, #1
 800f81a:	81a3      	strh	r3, [r4, #12]
 800f81c:	89a3      	ldrh	r3, [r4, #12]
 800f81e:	431d      	orrs	r5, r3
 800f820:	81a5      	strh	r5, [r4, #12]
 800f822:	e7cf      	b.n	800f7c4 <__smakebuf_r+0x18>

0800f824 <_raise_r>:
 800f824:	291f      	cmp	r1, #31
 800f826:	b538      	push	{r3, r4, r5, lr}
 800f828:	4605      	mov	r5, r0
 800f82a:	460c      	mov	r4, r1
 800f82c:	d904      	bls.n	800f838 <_raise_r+0x14>
 800f82e:	2316      	movs	r3, #22
 800f830:	6003      	str	r3, [r0, #0]
 800f832:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f836:	bd38      	pop	{r3, r4, r5, pc}
 800f838:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f83a:	b112      	cbz	r2, 800f842 <_raise_r+0x1e>
 800f83c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f840:	b94b      	cbnz	r3, 800f856 <_raise_r+0x32>
 800f842:	4628      	mov	r0, r5
 800f844:	f000 f840 	bl	800f8c8 <_getpid_r>
 800f848:	4622      	mov	r2, r4
 800f84a:	4601      	mov	r1, r0
 800f84c:	4628      	mov	r0, r5
 800f84e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f852:	f000 b827 	b.w	800f8a4 <_kill_r>
 800f856:	2b01      	cmp	r3, #1
 800f858:	d00a      	beq.n	800f870 <_raise_r+0x4c>
 800f85a:	1c59      	adds	r1, r3, #1
 800f85c:	d103      	bne.n	800f866 <_raise_r+0x42>
 800f85e:	2316      	movs	r3, #22
 800f860:	6003      	str	r3, [r0, #0]
 800f862:	2001      	movs	r0, #1
 800f864:	e7e7      	b.n	800f836 <_raise_r+0x12>
 800f866:	2100      	movs	r1, #0
 800f868:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f86c:	4620      	mov	r0, r4
 800f86e:	4798      	blx	r3
 800f870:	2000      	movs	r0, #0
 800f872:	e7e0      	b.n	800f836 <_raise_r+0x12>

0800f874 <raise>:
 800f874:	4b02      	ldr	r3, [pc, #8]	@ (800f880 <raise+0xc>)
 800f876:	4601      	mov	r1, r0
 800f878:	6818      	ldr	r0, [r3, #0]
 800f87a:	f7ff bfd3 	b.w	800f824 <_raise_r>
 800f87e:	bf00      	nop
 800f880:	20000540 	.word	0x20000540

0800f884 <_isatty_r>:
 800f884:	b538      	push	{r3, r4, r5, lr}
 800f886:	4d06      	ldr	r5, [pc, #24]	@ (800f8a0 <_isatty_r+0x1c>)
 800f888:	2300      	movs	r3, #0
 800f88a:	4604      	mov	r4, r0
 800f88c:	4608      	mov	r0, r1
 800f88e:	602b      	str	r3, [r5, #0]
 800f890:	f7f2 f9e2 	bl	8001c58 <_isatty>
 800f894:	1c43      	adds	r3, r0, #1
 800f896:	d102      	bne.n	800f89e <_isatty_r+0x1a>
 800f898:	682b      	ldr	r3, [r5, #0]
 800f89a:	b103      	cbz	r3, 800f89e <_isatty_r+0x1a>
 800f89c:	6023      	str	r3, [r4, #0]
 800f89e:	bd38      	pop	{r3, r4, r5, pc}
 800f8a0:	20000d98 	.word	0x20000d98

0800f8a4 <_kill_r>:
 800f8a4:	b538      	push	{r3, r4, r5, lr}
 800f8a6:	4d07      	ldr	r5, [pc, #28]	@ (800f8c4 <_kill_r+0x20>)
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	4608      	mov	r0, r1
 800f8ae:	4611      	mov	r1, r2
 800f8b0:	602b      	str	r3, [r5, #0]
 800f8b2:	f7f2 f961 	bl	8001b78 <_kill>
 800f8b6:	1c43      	adds	r3, r0, #1
 800f8b8:	d102      	bne.n	800f8c0 <_kill_r+0x1c>
 800f8ba:	682b      	ldr	r3, [r5, #0]
 800f8bc:	b103      	cbz	r3, 800f8c0 <_kill_r+0x1c>
 800f8be:	6023      	str	r3, [r4, #0]
 800f8c0:	bd38      	pop	{r3, r4, r5, pc}
 800f8c2:	bf00      	nop
 800f8c4:	20000d98 	.word	0x20000d98

0800f8c8 <_getpid_r>:
 800f8c8:	f7f2 b94e 	b.w	8001b68 <_getpid>

0800f8cc <_fstat_r>:
 800f8cc:	b538      	push	{r3, r4, r5, lr}
 800f8ce:	4d07      	ldr	r5, [pc, #28]	@ (800f8ec <_fstat_r+0x20>)
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	4604      	mov	r4, r0
 800f8d4:	4608      	mov	r0, r1
 800f8d6:	4611      	mov	r1, r2
 800f8d8:	602b      	str	r3, [r5, #0]
 800f8da:	f7f2 f9ad 	bl	8001c38 <_fstat>
 800f8de:	1c43      	adds	r3, r0, #1
 800f8e0:	d102      	bne.n	800f8e8 <_fstat_r+0x1c>
 800f8e2:	682b      	ldr	r3, [r5, #0]
 800f8e4:	b103      	cbz	r3, 800f8e8 <_fstat_r+0x1c>
 800f8e6:	6023      	str	r3, [r4, #0]
 800f8e8:	bd38      	pop	{r3, r4, r5, pc}
 800f8ea:	bf00      	nop
 800f8ec:	20000d98 	.word	0x20000d98

0800f8f0 <atan2f>:
 800f8f0:	f000 b800 	b.w	800f8f4 <__ieee754_atan2f>

0800f8f4 <__ieee754_atan2f>:
 800f8f4:	ee10 2a90 	vmov	r2, s1
 800f8f8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800f8fc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f900:	b510      	push	{r4, lr}
 800f902:	eef0 7a40 	vmov.f32	s15, s0
 800f906:	d806      	bhi.n	800f916 <__ieee754_atan2f+0x22>
 800f908:	ee10 0a10 	vmov	r0, s0
 800f90c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800f910:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f914:	d904      	bls.n	800f920 <__ieee754_atan2f+0x2c>
 800f916:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f91a:	eeb0 0a67 	vmov.f32	s0, s15
 800f91e:	bd10      	pop	{r4, pc}
 800f920:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800f924:	d103      	bne.n	800f92e <__ieee754_atan2f+0x3a>
 800f926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f92a:	f000 b883 	b.w	800fa34 <atanf>
 800f92e:	1794      	asrs	r4, r2, #30
 800f930:	f004 0402 	and.w	r4, r4, #2
 800f934:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f938:	b943      	cbnz	r3, 800f94c <__ieee754_atan2f+0x58>
 800f93a:	2c02      	cmp	r4, #2
 800f93c:	d05e      	beq.n	800f9fc <__ieee754_atan2f+0x108>
 800f93e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800fa10 <__ieee754_atan2f+0x11c>
 800f942:	2c03      	cmp	r4, #3
 800f944:	bf08      	it	eq
 800f946:	eef0 7a47 	vmoveq.f32	s15, s14
 800f94a:	e7e6      	b.n	800f91a <__ieee754_atan2f+0x26>
 800f94c:	b941      	cbnz	r1, 800f960 <__ieee754_atan2f+0x6c>
 800f94e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800fa14 <__ieee754_atan2f+0x120>
 800f952:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800fa18 <__ieee754_atan2f+0x124>
 800f956:	2800      	cmp	r0, #0
 800f958:	bfa8      	it	ge
 800f95a:	eef0 7a47 	vmovge.f32	s15, s14
 800f95e:	e7dc      	b.n	800f91a <__ieee754_atan2f+0x26>
 800f960:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f964:	d110      	bne.n	800f988 <__ieee754_atan2f+0x94>
 800f966:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f96a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800f96e:	d107      	bne.n	800f980 <__ieee754_atan2f+0x8c>
 800f970:	2c02      	cmp	r4, #2
 800f972:	d846      	bhi.n	800fa02 <__ieee754_atan2f+0x10e>
 800f974:	4b29      	ldr	r3, [pc, #164]	@ (800fa1c <__ieee754_atan2f+0x128>)
 800f976:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f97a:	edd3 7a00 	vldr	s15, [r3]
 800f97e:	e7cc      	b.n	800f91a <__ieee754_atan2f+0x26>
 800f980:	2c02      	cmp	r4, #2
 800f982:	d841      	bhi.n	800fa08 <__ieee754_atan2f+0x114>
 800f984:	4b26      	ldr	r3, [pc, #152]	@ (800fa20 <__ieee754_atan2f+0x12c>)
 800f986:	e7f6      	b.n	800f976 <__ieee754_atan2f+0x82>
 800f988:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f98c:	d0df      	beq.n	800f94e <__ieee754_atan2f+0x5a>
 800f98e:	1a5b      	subs	r3, r3, r1
 800f990:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800f994:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f998:	da1a      	bge.n	800f9d0 <__ieee754_atan2f+0xdc>
 800f99a:	2a00      	cmp	r2, #0
 800f99c:	da01      	bge.n	800f9a2 <__ieee754_atan2f+0xae>
 800f99e:	313c      	adds	r1, #60	@ 0x3c
 800f9a0:	db19      	blt.n	800f9d6 <__ieee754_atan2f+0xe2>
 800f9a2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f9a6:	f000 f919 	bl	800fbdc <fabsf>
 800f9aa:	f000 f843 	bl	800fa34 <atanf>
 800f9ae:	eef0 7a40 	vmov.f32	s15, s0
 800f9b2:	2c01      	cmp	r4, #1
 800f9b4:	d012      	beq.n	800f9dc <__ieee754_atan2f+0xe8>
 800f9b6:	2c02      	cmp	r4, #2
 800f9b8:	d017      	beq.n	800f9ea <__ieee754_atan2f+0xf6>
 800f9ba:	2c00      	cmp	r4, #0
 800f9bc:	d0ad      	beq.n	800f91a <__ieee754_atan2f+0x26>
 800f9be:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800fa24 <__ieee754_atan2f+0x130>
 800f9c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9c6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800fa28 <__ieee754_atan2f+0x134>
 800f9ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f9ce:	e7a4      	b.n	800f91a <__ieee754_atan2f+0x26>
 800f9d0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800fa18 <__ieee754_atan2f+0x124>
 800f9d4:	e7ed      	b.n	800f9b2 <__ieee754_atan2f+0xbe>
 800f9d6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800fa2c <__ieee754_atan2f+0x138>
 800f9da:	e7ea      	b.n	800f9b2 <__ieee754_atan2f+0xbe>
 800f9dc:	ee17 3a90 	vmov	r3, s15
 800f9e0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f9e4:	ee07 3a90 	vmov	s15, r3
 800f9e8:	e797      	b.n	800f91a <__ieee754_atan2f+0x26>
 800f9ea:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800fa24 <__ieee754_atan2f+0x130>
 800f9ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9f2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800fa28 <__ieee754_atan2f+0x134>
 800f9f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9fa:	e78e      	b.n	800f91a <__ieee754_atan2f+0x26>
 800f9fc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800fa28 <__ieee754_atan2f+0x134>
 800fa00:	e78b      	b.n	800f91a <__ieee754_atan2f+0x26>
 800fa02:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800fa30 <__ieee754_atan2f+0x13c>
 800fa06:	e788      	b.n	800f91a <__ieee754_atan2f+0x26>
 800fa08:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800fa2c <__ieee754_atan2f+0x138>
 800fa0c:	e785      	b.n	800f91a <__ieee754_atan2f+0x26>
 800fa0e:	bf00      	nop
 800fa10:	c0490fdb 	.word	0xc0490fdb
 800fa14:	bfc90fdb 	.word	0xbfc90fdb
 800fa18:	3fc90fdb 	.word	0x3fc90fdb
 800fa1c:	08010164 	.word	0x08010164
 800fa20:	08010158 	.word	0x08010158
 800fa24:	33bbbd2e 	.word	0x33bbbd2e
 800fa28:	40490fdb 	.word	0x40490fdb
 800fa2c:	00000000 	.word	0x00000000
 800fa30:	3f490fdb 	.word	0x3f490fdb

0800fa34 <atanf>:
 800fa34:	b538      	push	{r3, r4, r5, lr}
 800fa36:	ee10 5a10 	vmov	r5, s0
 800fa3a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800fa3e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800fa42:	eef0 7a40 	vmov.f32	s15, s0
 800fa46:	d310      	bcc.n	800fa6a <atanf+0x36>
 800fa48:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800fa4c:	d904      	bls.n	800fa58 <atanf+0x24>
 800fa4e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fa52:	eeb0 0a67 	vmov.f32	s0, s15
 800fa56:	bd38      	pop	{r3, r4, r5, pc}
 800fa58:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800fb90 <atanf+0x15c>
 800fa5c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800fb94 <atanf+0x160>
 800fa60:	2d00      	cmp	r5, #0
 800fa62:	bfc8      	it	gt
 800fa64:	eef0 7a47 	vmovgt.f32	s15, s14
 800fa68:	e7f3      	b.n	800fa52 <atanf+0x1e>
 800fa6a:	4b4b      	ldr	r3, [pc, #300]	@ (800fb98 <atanf+0x164>)
 800fa6c:	429c      	cmp	r4, r3
 800fa6e:	d810      	bhi.n	800fa92 <atanf+0x5e>
 800fa70:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800fa74:	d20a      	bcs.n	800fa8c <atanf+0x58>
 800fa76:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800fb9c <atanf+0x168>
 800fa7a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fa7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa82:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fa86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa8a:	dce2      	bgt.n	800fa52 <atanf+0x1e>
 800fa8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fa90:	e013      	b.n	800faba <atanf+0x86>
 800fa92:	f000 f8a3 	bl	800fbdc <fabsf>
 800fa96:	4b42      	ldr	r3, [pc, #264]	@ (800fba0 <atanf+0x16c>)
 800fa98:	429c      	cmp	r4, r3
 800fa9a:	d84f      	bhi.n	800fb3c <atanf+0x108>
 800fa9c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800faa0:	429c      	cmp	r4, r3
 800faa2:	d841      	bhi.n	800fb28 <atanf+0xf4>
 800faa4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800faa8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800faac:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fab0:	2300      	movs	r3, #0
 800fab2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fab6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800faba:	1c5a      	adds	r2, r3, #1
 800fabc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800fac0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800fba4 <atanf+0x170>
 800fac4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800fba8 <atanf+0x174>
 800fac8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800fbac <atanf+0x178>
 800facc:	ee66 6a06 	vmul.f32	s13, s12, s12
 800fad0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800fad4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800fbb0 <atanf+0x17c>
 800fad8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fadc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800fbb4 <atanf+0x180>
 800fae0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fae4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800fbb8 <atanf+0x184>
 800fae8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800faec:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800fbbc <atanf+0x188>
 800faf0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800faf4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800fbc0 <atanf+0x18c>
 800faf8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800fafc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800fbc4 <atanf+0x190>
 800fb00:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fb04:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800fbc8 <atanf+0x194>
 800fb08:	eea7 5a26 	vfma.f32	s10, s14, s13
 800fb0c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800fbcc <atanf+0x198>
 800fb10:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fb14:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fb18:	eea5 7a86 	vfma.f32	s14, s11, s12
 800fb1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fb20:	d121      	bne.n	800fb66 <atanf+0x132>
 800fb22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb26:	e794      	b.n	800fa52 <atanf+0x1e>
 800fb28:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fb2c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fb30:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fb34:	2301      	movs	r3, #1
 800fb36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fb3a:	e7be      	b.n	800faba <atanf+0x86>
 800fb3c:	4b24      	ldr	r3, [pc, #144]	@ (800fbd0 <atanf+0x19c>)
 800fb3e:	429c      	cmp	r4, r3
 800fb40:	d80b      	bhi.n	800fb5a <atanf+0x126>
 800fb42:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800fb46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb4a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fb4e:	2302      	movs	r3, #2
 800fb50:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fb54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb58:	e7af      	b.n	800faba <atanf+0x86>
 800fb5a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800fb5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fb62:	2303      	movs	r3, #3
 800fb64:	e7a9      	b.n	800faba <atanf+0x86>
 800fb66:	4a1b      	ldr	r2, [pc, #108]	@ (800fbd4 <atanf+0x1a0>)
 800fb68:	491b      	ldr	r1, [pc, #108]	@ (800fbd8 <atanf+0x1a4>)
 800fb6a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fb6e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fb72:	edd3 6a00 	vldr	s13, [r3]
 800fb76:	ee37 7a66 	vsub.f32	s14, s14, s13
 800fb7a:	2d00      	cmp	r5, #0
 800fb7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb80:	edd2 7a00 	vldr	s15, [r2]
 800fb84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb88:	bfb8      	it	lt
 800fb8a:	eef1 7a67 	vneglt.f32	s15, s15
 800fb8e:	e760      	b.n	800fa52 <atanf+0x1e>
 800fb90:	bfc90fdb 	.word	0xbfc90fdb
 800fb94:	3fc90fdb 	.word	0x3fc90fdb
 800fb98:	3edfffff 	.word	0x3edfffff
 800fb9c:	7149f2ca 	.word	0x7149f2ca
 800fba0:	3f97ffff 	.word	0x3f97ffff
 800fba4:	3c8569d7 	.word	0x3c8569d7
 800fba8:	3d4bda59 	.word	0x3d4bda59
 800fbac:	bd6ef16b 	.word	0xbd6ef16b
 800fbb0:	3d886b35 	.word	0x3d886b35
 800fbb4:	3dba2e6e 	.word	0x3dba2e6e
 800fbb8:	3e124925 	.word	0x3e124925
 800fbbc:	3eaaaaab 	.word	0x3eaaaaab
 800fbc0:	bd15a221 	.word	0xbd15a221
 800fbc4:	bd9d8795 	.word	0xbd9d8795
 800fbc8:	bde38e38 	.word	0xbde38e38
 800fbcc:	be4ccccd 	.word	0xbe4ccccd
 800fbd0:	401bffff 	.word	0x401bffff
 800fbd4:	08010180 	.word	0x08010180
 800fbd8:	08010170 	.word	0x08010170

0800fbdc <fabsf>:
 800fbdc:	ee10 3a10 	vmov	r3, s0
 800fbe0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fbe4:	ee00 3a10 	vmov	s0, r3
 800fbe8:	4770      	bx	lr
	...

0800fbec <_init>:
 800fbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbee:	bf00      	nop
 800fbf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbf2:	bc08      	pop	{r3}
 800fbf4:	469e      	mov	lr, r3
 800fbf6:	4770      	bx	lr

0800fbf8 <_fini>:
 800fbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbfa:	bf00      	nop
 800fbfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbfe:	bc08      	pop	{r3}
 800fc00:	469e      	mov	lr, r3
 800fc02:	4770      	bx	lr
