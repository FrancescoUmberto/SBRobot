
self-balancing-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080060c8  080060c8  000070c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006158  08006158  00008414  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006158  08006158  00007158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006160  08006160  00008414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006160  08006160  00007160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006164  08006164  00007164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000414  20000000  08006168  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000414  0800657c  00008414  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  0800657c  0000884c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008414  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013228  00000000  00000000  00008444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6a  00000000  00000000  0001b66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0001e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c93  00000000  00000000  0001f600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b4b  00000000  00000000  00020293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001521b  00000000  00000000  00043dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3d22  00000000  00000000  00058ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cd1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004878  00000000  00000000  0012cd60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  001315d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000414 	.word	0x20000414
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080060b0 	.word	0x080060b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000418 	.word	0x20000418
 800020c:	080060b0 	.word	0x080060b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b50:	f000 b988 	b.w	8000e64 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	468e      	mov	lr, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	4688      	mov	r8, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4617      	mov	r7, r2
 8000b80:	d962      	bls.n	8000c48 <__udivmoddi4+0xdc>
 8000b82:	fab2 f682 	clz	r6, r2
 8000b86:	b14e      	cbz	r6, 8000b9c <__udivmoddi4+0x30>
 8000b88:	f1c6 0320 	rsb	r3, r6, #32
 8000b8c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	40b7      	lsls	r7, r6
 8000b96:	ea43 0808 	orr.w	r8, r3, r8
 8000b9a:	40b4      	lsls	r4, r6
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	fa1f fc87 	uxth.w	ip, r7
 8000ba4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ba8:	0c23      	lsrs	r3, r4, #16
 8000baa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb2:	fb01 f20c 	mul.w	r2, r1, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0x62>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000bc0:	f080 80ea 	bcs.w	8000d98 <__udivmoddi4+0x22c>
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f240 80e7 	bls.w	8000d98 <__udivmoddi4+0x22c>
 8000bca:	3902      	subs	r1, #2
 8000bcc:	443b      	add	r3, r7
 8000bce:	1a9a      	subs	r2, r3, r2
 8000bd0:	b2a3      	uxth	r3, r4
 8000bd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bde:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be2:	459c      	cmp	ip, r3
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0x8e>
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000bec:	f080 80d6 	bcs.w	8000d9c <__udivmoddi4+0x230>
 8000bf0:	459c      	cmp	ip, r3
 8000bf2:	f240 80d3 	bls.w	8000d9c <__udivmoddi4+0x230>
 8000bf6:	443b      	add	r3, r7
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bfe:	eba3 030c 	sub.w	r3, r3, ip
 8000c02:	2100      	movs	r1, #0
 8000c04:	b11d      	cbz	r5, 8000c0e <__udivmoddi4+0xa2>
 8000c06:	40f3      	lsrs	r3, r6
 8000c08:	2200      	movs	r2, #0
 8000c0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d905      	bls.n	8000c22 <__udivmoddi4+0xb6>
 8000c16:	b10d      	cbz	r5, 8000c1c <__udivmoddi4+0xb0>
 8000c18:	e9c5 0100 	strd	r0, r1, [r5]
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4608      	mov	r0, r1
 8000c20:	e7f5      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c22:	fab3 f183 	clz	r1, r3
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d146      	bne.n	8000cb8 <__udivmoddi4+0x14c>
 8000c2a:	4573      	cmp	r3, lr
 8000c2c:	d302      	bcc.n	8000c34 <__udivmoddi4+0xc8>
 8000c2e:	4282      	cmp	r2, r0
 8000c30:	f200 8105 	bhi.w	8000e3e <__udivmoddi4+0x2d2>
 8000c34:	1a84      	subs	r4, r0, r2
 8000c36:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	4690      	mov	r8, r2
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d0e5      	beq.n	8000c0e <__udivmoddi4+0xa2>
 8000c42:	e9c5 4800 	strd	r4, r8, [r5]
 8000c46:	e7e2      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f000 8090 	beq.w	8000d6e <__udivmoddi4+0x202>
 8000c4e:	fab2 f682 	clz	r6, r2
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f040 80a4 	bne.w	8000da0 <__udivmoddi4+0x234>
 8000c58:	1a8a      	subs	r2, r1, r2
 8000c5a:	0c03      	lsrs	r3, r0, #16
 8000c5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c60:	b280      	uxth	r0, r0
 8000c62:	b2bc      	uxth	r4, r7
 8000c64:	2101      	movs	r1, #1
 8000c66:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c6a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c72:	fb04 f20c 	mul.w	r2, r4, ip
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x11e>
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x11c>
 8000c82:	429a      	cmp	r2, r3
 8000c84:	f200 80e0 	bhi.w	8000e48 <__udivmoddi4+0x2dc>
 8000c88:	46c4      	mov	ip, r8
 8000c8a:	1a9b      	subs	r3, r3, r2
 8000c8c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c90:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c94:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c98:	fb02 f404 	mul.w	r4, r2, r4
 8000c9c:	429c      	cmp	r4, r3
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x144>
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x142>
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	f200 80ca 	bhi.w	8000e42 <__udivmoddi4+0x2d6>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	1b1b      	subs	r3, r3, r4
 8000cb2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cb6:	e7a5      	b.n	8000c04 <__udivmoddi4+0x98>
 8000cb8:	f1c1 0620 	rsb	r6, r1, #32
 8000cbc:	408b      	lsls	r3, r1
 8000cbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000cc2:	431f      	orrs	r7, r3
 8000cc4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cc8:	fa20 f306 	lsr.w	r3, r0, r6
 8000ccc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cd0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cd4:	4323      	orrs	r3, r4
 8000cd6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cda:	fa1f fc87 	uxth.w	ip, r7
 8000cde:	fbbe f0f9 	udiv	r0, lr, r9
 8000ce2:	0c1c      	lsrs	r4, r3, #16
 8000ce4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ce8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cec:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x1a0>
 8000cf8:	193c      	adds	r4, r7, r4
 8000cfa:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000cfe:	f080 809c 	bcs.w	8000e3a <__udivmoddi4+0x2ce>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f240 8099 	bls.w	8000e3a <__udivmoddi4+0x2ce>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	443c      	add	r4, r7
 8000d0c:	eba4 040e 	sub.w	r4, r4, lr
 8000d10:	fa1f fe83 	uxth.w	lr, r3
 8000d14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d18:	fb09 4413 	mls	r4, r9, r3, r4
 8000d1c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d20:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x1ce>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d2e:	f080 8082 	bcs.w	8000e36 <__udivmoddi4+0x2ca>
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d97f      	bls.n	8000e36 <__udivmoddi4+0x2ca>
 8000d36:	3b02      	subs	r3, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d3e:	eba4 040c 	sub.w	r4, r4, ip
 8000d42:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d46:	4564      	cmp	r4, ip
 8000d48:	4673      	mov	r3, lr
 8000d4a:	46e1      	mov	r9, ip
 8000d4c:	d362      	bcc.n	8000e14 <__udivmoddi4+0x2a8>
 8000d4e:	d05f      	beq.n	8000e10 <__udivmoddi4+0x2a4>
 8000d50:	b15d      	cbz	r5, 8000d6a <__udivmoddi4+0x1fe>
 8000d52:	ebb8 0203 	subs.w	r2, r8, r3
 8000d56:	eb64 0409 	sbc.w	r4, r4, r9
 8000d5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d62:	431e      	orrs	r6, r3
 8000d64:	40cc      	lsrs	r4, r1
 8000d66:	e9c5 6400 	strd	r6, r4, [r5]
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	e74f      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000d6e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d72:	0c01      	lsrs	r1, r0, #16
 8000d74:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d78:	b280      	uxth	r0, r0
 8000d7a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4638      	mov	r0, r7
 8000d82:	463c      	mov	r4, r7
 8000d84:	46b8      	mov	r8, r7
 8000d86:	46be      	mov	lr, r7
 8000d88:	2620      	movs	r6, #32
 8000d8a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d8e:	eba2 0208 	sub.w	r2, r2, r8
 8000d92:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d96:	e766      	b.n	8000c66 <__udivmoddi4+0xfa>
 8000d98:	4601      	mov	r1, r0
 8000d9a:	e718      	b.n	8000bce <__udivmoddi4+0x62>
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	e72c      	b.n	8000bfa <__udivmoddi4+0x8e>
 8000da0:	f1c6 0220 	rsb	r2, r6, #32
 8000da4:	fa2e f302 	lsr.w	r3, lr, r2
 8000da8:	40b7      	lsls	r7, r6
 8000daa:	40b1      	lsls	r1, r6
 8000dac:	fa20 f202 	lsr.w	r2, r0, r2
 8000db0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db4:	430a      	orrs	r2, r1
 8000db6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dba:	b2bc      	uxth	r4, r7
 8000dbc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc6:	fb08 f904 	mul.w	r9, r8, r4
 8000dca:	40b0      	lsls	r0, r6
 8000dcc:	4589      	cmp	r9, r1
 8000dce:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dd2:	b280      	uxth	r0, r0
 8000dd4:	d93e      	bls.n	8000e54 <__udivmoddi4+0x2e8>
 8000dd6:	1879      	adds	r1, r7, r1
 8000dd8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ddc:	d201      	bcs.n	8000de2 <__udivmoddi4+0x276>
 8000dde:	4589      	cmp	r9, r1
 8000de0:	d81f      	bhi.n	8000e22 <__udivmoddi4+0x2b6>
 8000de2:	eba1 0109 	sub.w	r1, r1, r9
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fb09 f804 	mul.w	r8, r9, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	b292      	uxth	r2, r2
 8000df4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df8:	4542      	cmp	r2, r8
 8000dfa:	d229      	bcs.n	8000e50 <__udivmoddi4+0x2e4>
 8000dfc:	18ba      	adds	r2, r7, r2
 8000dfe:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e02:	d2c4      	bcs.n	8000d8e <__udivmoddi4+0x222>
 8000e04:	4542      	cmp	r2, r8
 8000e06:	d2c2      	bcs.n	8000d8e <__udivmoddi4+0x222>
 8000e08:	f1a9 0102 	sub.w	r1, r9, #2
 8000e0c:	443a      	add	r2, r7
 8000e0e:	e7be      	b.n	8000d8e <__udivmoddi4+0x222>
 8000e10:	45f0      	cmp	r8, lr
 8000e12:	d29d      	bcs.n	8000d50 <__udivmoddi4+0x1e4>
 8000e14:	ebbe 0302 	subs.w	r3, lr, r2
 8000e18:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	46e1      	mov	r9, ip
 8000e20:	e796      	b.n	8000d50 <__udivmoddi4+0x1e4>
 8000e22:	eba7 0909 	sub.w	r9, r7, r9
 8000e26:	4449      	add	r1, r9
 8000e28:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e2c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e30:	fb09 f804 	mul.w	r8, r9, r4
 8000e34:	e7db      	b.n	8000dee <__udivmoddi4+0x282>
 8000e36:	4673      	mov	r3, lr
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1ce>
 8000e3a:	4650      	mov	r0, sl
 8000e3c:	e766      	b.n	8000d0c <__udivmoddi4+0x1a0>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xd2>
 8000e42:	443b      	add	r3, r7
 8000e44:	3a02      	subs	r2, #2
 8000e46:	e733      	b.n	8000cb0 <__udivmoddi4+0x144>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	443b      	add	r3, r7
 8000e4e:	e71c      	b.n	8000c8a <__udivmoddi4+0x11e>
 8000e50:	4649      	mov	r1, r9
 8000e52:	e79c      	b.n	8000d8e <__udivmoddi4+0x222>
 8000e54:	eba1 0109 	sub.w	r1, r1, r9
 8000e58:	46c4      	mov	ip, r8
 8000e5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5e:	fb09 f804 	mul.w	r8, r9, r4
 8000e62:	e7c4      	b.n	8000dee <__udivmoddi4+0x282>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b73      	ldr	r3, [pc, #460]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a72      	ldr	r2, [pc, #456]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b70      	ldr	r3, [pc, #448]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b6c      	ldr	r3, [pc, #432]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a6b      	ldr	r2, [pc, #428]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b69      	ldr	r3, [pc, #420]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	4b65      	ldr	r3, [pc, #404]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a64      	ldr	r2, [pc, #400]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b62      	ldr	r3, [pc, #392]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	4b5e      	ldr	r3, [pc, #376]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a5d      	ldr	r2, [pc, #372]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	4b57      	ldr	r3, [pc, #348]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a56      	ldr	r2, [pc, #344]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b54      	ldr	r3, [pc, #336]	@ (8001050 <MX_GPIO_Init+0x1e8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2130      	movs	r1, #48	@ 0x30
 8000f0e:	4851      	ldr	r0, [pc, #324]	@ (8001054 <MX_GPIO_Init+0x1ec>)
 8000f10:	f002 f886 	bl	8003020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_DIR_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2111      	movs	r1, #17
 8000f18:	484f      	ldr	r0, [pc, #316]	@ (8001058 <MX_GPIO_Init+0x1f0>)
 8000f1a:	f002 f881 	bl	8003020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BTN2_GPIO_Port, LED_BTN2_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f24:	484d      	ldr	r0, [pc, #308]	@ (800105c <MX_GPIO_Init+0x1f4>)
 8000f26:	f002 f87b 	bl	8003020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f30:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4846      	ldr	r0, [pc, #280]	@ (800105c <MX_GPIO_Init+0x1f4>)
 8000f42:	f001 fed9 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC6 PC7 PC8 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f46:	f641 53dd 	movw	r3, #7645	@ 0x1ddd
 8000f4a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4840      	ldr	r0, [pc, #256]	@ (800105c <MX_GPIO_Init+0x1f4>)
 8000f5c:	f001 fecc 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_DIR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|LD2_Pin;
 8000f60:	2330      	movs	r3, #48	@ 0x30
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4837      	ldr	r0, [pc, #220]	@ (8001054 <MX_GPIO_Init+0x1ec>)
 8000f78:	f001 febe 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f80:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4832      	ldr	r0, [pc, #200]	@ (800105c <MX_GPIO_Init+0x1f4>)
 8000f92:	f001 feb1 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 8000f96:	2301      	movs	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	482a      	ldr	r0, [pc, #168]	@ (8001058 <MX_GPIO_Init+0x1f0>)
 8000fae:	f001 fea3 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000fb2:	f24f 3326 	movw	r3, #62246	@ 0xf326
 8000fb6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4824      	ldr	r0, [pc, #144]	@ (8001058 <MX_GPIO_Init+0x1f0>)
 8000fc8:	f001 fe96 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BTN2_Pin */
  GPIO_InitStruct.Pin = LED_BTN2_Pin;
 8000fcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BTN2_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481d      	ldr	r0, [pc, #116]	@ (800105c <MX_GPIO_Init+0x1f4>)
 8000fe6:	f001 fe87 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fea:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 8000fee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4815      	ldr	r0, [pc, #84]	@ (8001054 <MX_GPIO_Init+0x1ec>)
 8001000:	f001 fe7a 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001004:	2304      	movs	r3, #4
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001008:	2303      	movs	r3, #3
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4812      	ldr	r0, [pc, #72]	@ (8001060 <MX_GPIO_Init+0x1f8>)
 8001018:	f001 fe6e 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 800101c:	2310      	movs	r3, #16
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4809      	ldr	r0, [pc, #36]	@ (8001058 <MX_GPIO_Init+0x1f0>)
 8001034:	f001 fe60 	bl	8002cf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2017      	movs	r0, #23
 800103e:	f001 fe24 	bl	8002c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001042:	2017      	movs	r0, #23
 8001044:	f001 fe3d 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	@ 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000
 8001058:	40020400 	.word	0x40020400
 800105c:	40020800 	.word	0x40020800
 8001060:	40020c00 	.word	0x40020c00

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001068:	f001 fc9e 	bl	80029a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106c:	f000 f83c 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f7ff fefa 	bl	8000e68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001074:	f000 fd5e 	bl	8001b34 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001078:	f000 faea 	bl	8001650 <MX_TIM4_Init>
  MX_TIM6_Init();
 800107c:	f000 fb96 	bl	80017ac <MX_TIM6_Init>
  MX_SPI2_Init();
 8001080:	f000 f8e0 	bl	8001244 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001084:	f000 fa38 	bl	80014f8 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001088:	f000 fbc6 	bl	8001818 <MX_TIM7_Init>
  MX_TIM3_Init();
 800108c:	f000 fa8c 	bl	80015a8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001090:	f000 fb32 	bl	80016f8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);						// Display timer (0.1MHz)
 8001094:	480e      	ldr	r0, [pc, #56]	@ (80010d0 <main+0x6c>)
 8001096:	f003 f8f1 	bl	800427c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);						// Timeline
 800109a:	480e      	ldr	r0, [pc, #56]	@ (80010d4 <main+0x70>)
 800109c:	f003 f8ee 	bl	800427c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		// Encoder right
 80010a0:	213c      	movs	r1, #60	@ 0x3c
 80010a2:	480d      	ldr	r0, [pc, #52]	@ (80010d8 <main+0x74>)
 80010a4:	f003 fb18 	bl	80046d8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);		// Encoder left
 80010a8:	213c      	movs	r1, #60	@ 0x3c
 80010aa:	480c      	ldr	r0, [pc, #48]	@ (80010dc <main+0x78>)
 80010ac:	f003 fb14 	bl	80046d8 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);				// Stepper left
 80010b0:	2104      	movs	r1, #4
 80010b2:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <main+0x7c>)
 80010b4:	f003 f9a2 	bl	80043fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);				// Stepper right
 80010b8:	2100      	movs	r1, #0
 80010ba:	480a      	ldr	r0, [pc, #40]	@ (80010e4 <main+0x80>)
 80010bc:	f003 f99e 	bl	80043fc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(50);
 80010c0:	2032      	movs	r0, #50	@ 0x32
 80010c2:	f001 fce3 	bl	8002a8c <HAL_Delay>
  Robot_init();
 80010c6:	f001 faed 	bl	80026a4 <Robot_init>
//  MAX72_Start_Scrolling("Work in progress...");
  while (1)
 80010ca:	bf00      	nop
 80010cc:	e7fd      	b.n	80010ca <main+0x66>
 80010ce:	bf00      	nop
 80010d0:	200005ac 	.word	0x200005ac
 80010d4:	200005f4 	.word	0x200005f4
 80010d8:	200004d4 	.word	0x200004d4
 80010dc:	2000051c 	.word	0x2000051c
 80010e0:	2000048c 	.word	0x2000048c
 80010e4:	20000564 	.word	0x20000564

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	@ 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2234      	movs	r2, #52	@ 0x34
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 fb5c 	bl	80057b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	4b2a      	ldr	r3, [pc, #168]	@ (80011bc <SystemClock_Config+0xd4>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	4a29      	ldr	r2, [pc, #164]	@ (80011bc <SystemClock_Config+0xd4>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	@ 0x40
 800111c:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <SystemClock_Config+0xd4>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001128:	2300      	movs	r3, #0
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	4b24      	ldr	r3, [pc, #144]	@ (80011c0 <SystemClock_Config+0xd8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001134:	4a22      	ldr	r2, [pc, #136]	@ (80011c0 <SystemClock_Config+0xd8>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b20      	ldr	r3, [pc, #128]	@ (80011c0 <SystemClock_Config+0xd8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001148:	2302      	movs	r3, #2
 800114a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114c:	2301      	movs	r3, #1
 800114e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001150:	2310      	movs	r3, #16
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001154:	2302      	movs	r3, #2
 8001156:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001158:	2300      	movs	r3, #0
 800115a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800115c:	2310      	movs	r3, #16
 800115e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001160:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001164:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001166:	2304      	movs	r3, #4
 8001168:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800116a:	2302      	movs	r3, #2
 800116c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800116e:	2302      	movs	r3, #2
 8001170:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fae8 	bl	800374c <HAL_RCC_OscConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001182:	f000 f859 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	230f      	movs	r3, #15
 8001188:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118a:	2302      	movs	r3, #2
 800118c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001192:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	2102      	movs	r1, #2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 ff88 	bl	80030b8 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011ae:	f000 f843 	bl	8001238 <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3750      	adds	r7, #80	@ 0x50
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d109      	bne.n	80011ea <HAL_TIM_PeriodElapsedCallback+0x26>
//		MAX72_Scroll_Timer_ISR(); // Scrolling function
		MAX72_Print_Float(encoder_l.speed, 4, 1);
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80011dc:	2101      	movs	r1, #1
 80011de:	2004      	movs	r0, #4
 80011e0:	eeb0 0a67 	vmov.f32	s0, s15
 80011e4:	f001 f860 	bl	80022a8 <MAX72_Print_Float>
//		MAX72_Print_Float(encoder_l.speed);
	} else if (htim->Instance == TIM7) {
		speed_control(&stepper_r);
		speed_control(&stepper_l);
	}
}
 80011e8:	e00a      	b.n	8001200 <HAL_TIM_PeriodElapsedCallback+0x3c>
	} else if (htim->Instance == TIM7) {
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a08      	ldr	r2, [pc, #32]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d105      	bne.n	8001200 <HAL_TIM_PeriodElapsedCallback+0x3c>
		speed_control(&stepper_r);
 80011f4:	4807      	ldr	r0, [pc, #28]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80011f6:	f001 fa97 	bl	8002728 <speed_control>
		speed_control(&stepper_l);
 80011fa:	4807      	ldr	r0, [pc, #28]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80011fc:	f001 fa94 	bl	8002728 <speed_control>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40001000 	.word	0x40001000
 800120c:	200006c8 	.word	0x200006c8
 8001210:	40001400 	.word	0x40001400
 8001214:	200006a8 	.word	0x200006a8
 8001218:	200006dc 	.word	0x200006dc

0800121c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_5) {
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	2b20      	cmp	r3, #32
 800122a:	d101      	bne.n	8001230 <HAL_GPIO_EXTI_Callback+0x14>
    on_click();
 800122c:	f000 fcf4 	bl	8001c18 <on_click>
  }
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <Error_Handler+0x8>

08001244 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001248:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <MX_SPI2_Init+0x68>)
 800124a:	4a19      	ldr	r2, [pc, #100]	@ (80012b0 <MX_SPI2_Init+0x6c>)
 800124c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800124e:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <MX_SPI2_Init+0x68>)
 8001250:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001254:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <MX_SPI2_Init+0x68>)
 8001258:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800125c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <MX_SPI2_Init+0x68>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <MX_SPI2_Init+0x68>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800126a:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <MX_SPI2_Init+0x68>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001270:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <MX_SPI2_Init+0x68>)
 8001272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001276:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <MX_SPI2_Init+0x68>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <MX_SPI2_Init+0x68>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001284:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_SPI2_Init+0x68>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <MX_SPI2_Init+0x68>)
 800128c:	2200      	movs	r2, #0
 800128e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MX_SPI2_Init+0x68>)
 8001292:	220a      	movs	r2, #10
 8001294:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_SPI2_Init+0x68>)
 8001298:	f002 fcf6 	bl	8003c88 <HAL_SPI_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80012a2:	f7ff ffc9 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000430 	.word	0x20000430
 80012b0:	40003800 	.word	0x40003800

080012b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a28      	ldr	r2, [pc, #160]	@ (8001374 <HAL_SPI_MspInit+0xc0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d14a      	bne.n	800136c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b27      	ldr	r3, [pc, #156]	@ (8001378 <HAL_SPI_MspInit+0xc4>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a26      	ldr	r2, [pc, #152]	@ (8001378 <HAL_SPI_MspInit+0xc4>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <HAL_SPI_MspInit+0xc4>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <HAL_SPI_MspInit+0xc4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001378 <HAL_SPI_MspInit+0xc4>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <HAL_SPI_MspInit+0xc4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <HAL_SPI_MspInit+0xc4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a18      	ldr	r2, [pc, #96]	@ (8001378 <HAL_SPI_MspInit+0xc4>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <HAL_SPI_MspInit+0xc4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800132a:	2302      	movs	r3, #2
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800133a:	2307      	movs	r3, #7
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	480d      	ldr	r0, [pc, #52]	@ (800137c <HAL_SPI_MspInit+0xc8>)
 8001346:	f001 fcd7 	bl	8002cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 800134a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135c:	2305      	movs	r3, #5
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	@ (8001380 <HAL_SPI_MspInit+0xcc>)
 8001368:	f001 fcc6 	bl	8002cf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	@ 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40003800 	.word	0x40003800
 8001378:	40023800 	.word	0x40023800
 800137c:	40020800 	.word	0x40020800
 8001380:	40020400 	.word	0x40020400

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <HAL_MspInit+0x4c>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	4a0f      	ldr	r2, [pc, #60]	@ (80013d0 <HAL_MspInit+0x4c>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001398:	6453      	str	r3, [r2, #68]	@ 0x44
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <HAL_MspInit+0x4c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <HAL_MspInit+0x4c>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	4a08      	ldr	r2, [pc, #32]	@ (80013d0 <HAL_MspInit+0x4c>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_MspInit+0x4c>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013c2:	2007      	movs	r0, #7
 80013c4:	f001 fc56 	bl	8002c74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <NMI_Handler+0x4>

080013dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <MemManage_Handler+0x4>

080013ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142a:	f001 fb0f 	bl	8002a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}

08001432 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001436:	2020      	movs	r0, #32
 8001438:	f001 fe26 	bl	8003088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <TIM6_DAC_IRQHandler+0x10>)
 8001446:	f003 f9d5 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200005ac 	.word	0x200005ac

08001454 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <TIM7_IRQHandler+0x10>)
 800145a:	f003 f9cb 	bl	80047f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200005f4 	.word	0x200005f4

08001468 <_sbrk>:
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	4a14      	ldr	r2, [pc, #80]	@ (80014c4 <_sbrk+0x5c>)
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <_sbrk+0x60>)
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x22>
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <_sbrk+0x64>)
 8001486:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <_sbrk+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d207      	bcs.n	80014a8 <_sbrk+0x40>
 8001498:	f004 f994 	bl	80057c4 <__errno>
 800149c:	4603      	mov	r3, r0
 800149e:	220c      	movs	r2, #12
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a6:	e009      	b.n	80014bc <_sbrk+0x54>
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <_sbrk+0x64>)
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20020000 	.word	0x20020000
 80014c8:	00000400 	.word	0x00000400
 80014cc:	20000488 	.word	0x20000488
 80014d0:	20000850 	.word	0x20000850

080014d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <SystemInit+0x20>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014de:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <SystemInit+0x20>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800151a:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <MX_TIM2_Init+0xac>)
 800151c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001520:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001522:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <MX_TIM2_Init+0xac>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <MX_TIM2_Init+0xac>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800152e:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <MX_TIM2_Init+0xac>)
 8001530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001534:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <MX_TIM2_Init+0xac>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153c:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <MX_TIM2_Init+0xac>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001542:	4818      	ldr	r0, [pc, #96]	@ (80015a4 <MX_TIM2_Init+0xac>)
 8001544:	f002 ff0a 	bl	800435c <HAL_TIM_PWM_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800154e:	f7ff fe73 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	4619      	mov	r1, r3
 8001560:	4810      	ldr	r0, [pc, #64]	@ (80015a4 <MX_TIM2_Init+0xac>)
 8001562:	f003 fd9d 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800156c:	f7ff fe64 	bl	8001238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001570:	2360      	movs	r3, #96	@ 0x60
 8001572:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2204      	movs	r2, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4807      	ldr	r0, [pc, #28]	@ (80015a4 <MX_TIM2_Init+0xac>)
 8001588:	f003 fa24 	bl	80049d4 <HAL_TIM_PWM_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001592:	f7ff fe51 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001596:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <MX_TIM2_Init+0xac>)
 8001598:	f000 fa6e 	bl	8001a78 <HAL_TIM_MspPostInit>

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	@ 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000048c 	.word	0x2000048c

080015a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	@ 0x30
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	2224      	movs	r2, #36	@ 0x24
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f004 f8fc 	bl	80057b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015c4:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <MX_TIM3_Init+0xa0>)
 80015c6:	4a21      	ldr	r2, [pc, #132]	@ (800164c <MX_TIM3_Init+0xa4>)
 80015c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <MX_TIM3_Init+0xa0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <MX_TIM3_Init+0xa0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001648 <MX_TIM3_Init+0xa0>)
 80015d8:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80015dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015de:	4b1a      	ldr	r3, [pc, #104]	@ (8001648 <MX_TIM3_Init+0xa0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e4:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <MX_TIM3_Init+0xa0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015ea:	2303      	movs	r3, #3
 80015ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015f2:	2301      	movs	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001602:	2301      	movs	r3, #1
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	4619      	mov	r1, r3
 8001614:	480c      	ldr	r0, [pc, #48]	@ (8001648 <MX_TIM3_Init+0xa0>)
 8001616:	f002 ffb9 	bl	800458c <HAL_TIM_Encoder_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001620:	f7ff fe0a 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	@ (8001648 <MX_TIM3_Init+0xa0>)
 8001632:	f003 fd35 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800163c:	f7ff fdfc 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	3730      	adds	r7, #48	@ 0x30
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200004d4 	.word	0x200004d4
 800164c:	40000400 	.word	0x40000400

08001650 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	@ 0x30
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2224      	movs	r2, #36	@ 0x24
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f004 f8a8 	bl	80057b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800166c:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <MX_TIM4_Init+0xa0>)
 800166e:	4a21      	ldr	r2, [pc, #132]	@ (80016f4 <MX_TIM4_Init+0xa4>)
 8001670:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001672:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <MX_TIM4_Init+0xa0>)
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <MX_TIM4_Init+0xa0>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8191;
 800167e:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <MX_TIM4_Init+0xa0>)
 8001680:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001684:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <MX_TIM4_Init+0xa0>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <MX_TIM4_Init+0xa0>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001692:	2303      	movs	r3, #3
 8001694:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800169a:	2301      	movs	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016aa:	2301      	movs	r3, #1
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <MX_TIM4_Init+0xa0>)
 80016be:	f002 ff65 	bl	800458c <HAL_TIM_Encoder_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80016c8:	f7ff fdb6 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <MX_TIM4_Init+0xa0>)
 80016da:	f003 fce1 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80016e4:	f7ff fda8 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3730      	adds	r7, #48	@ 0x30
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000051c 	.word	0x2000051c
 80016f4:	40000800 	.word	0x40000800

080016f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fe:	f107 0320 	add.w	r3, r7, #32
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800171a:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <MX_TIM5_Init+0xac>)
 800171c:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <MX_TIM5_Init+0xb0>)
 800171e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001720:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <MX_TIM5_Init+0xac>)
 8001722:	2200      	movs	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001726:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <MX_TIM5_Init+0xac>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <MX_TIM5_Init+0xac>)
 800172e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001732:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <MX_TIM5_Init+0xac>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <MX_TIM5_Init+0xac>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001740:	4818      	ldr	r0, [pc, #96]	@ (80017a4 <MX_TIM5_Init+0xac>)
 8001742:	f002 fe0b 	bl	800435c <HAL_TIM_PWM_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800174c:	f7ff fd74 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001758:	f107 0320 	add.w	r3, r7, #32
 800175c:	4619      	mov	r1, r3
 800175e:	4811      	ldr	r0, [pc, #68]	@ (80017a4 <MX_TIM5_Init+0xac>)
 8001760:	f003 fc9e 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800176a:	f7ff fd65 	bl	8001238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176e:	2360      	movs	r3, #96	@ 0x60
 8001770:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2200      	movs	r2, #0
 8001782:	4619      	mov	r1, r3
 8001784:	4807      	ldr	r0, [pc, #28]	@ (80017a4 <MX_TIM5_Init+0xac>)
 8001786:	f003 f925 	bl	80049d4 <HAL_TIM_PWM_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001790:	f7ff fd52 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001794:	4803      	ldr	r0, [pc, #12]	@ (80017a4 <MX_TIM5_Init+0xac>)
 8001796:	f000 f96f 	bl	8001a78 <HAL_TIM_MspPostInit>

}
 800179a:	bf00      	nop
 800179c:	3728      	adds	r7, #40	@ 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000564 	.word	0x20000564
 80017a8:	40000c00 	.word	0x40000c00

080017ac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b2:	463b      	mov	r3, r7
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017ba:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <MX_TIM6_Init+0x64>)
 80017bc:	4a15      	ldr	r2, [pc, #84]	@ (8001814 <MX_TIM6_Init+0x68>)
 80017be:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <MX_TIM6_Init+0x64>)
 80017c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <MX_TIM6_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <MX_TIM6_Init+0x64>)
 80017d0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80017d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <MX_TIM6_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017dc:	480c      	ldr	r0, [pc, #48]	@ (8001810 <MX_TIM6_Init+0x64>)
 80017de:	f002 fcfd 	bl	80041dc <HAL_TIM_Base_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80017e8:	f7ff fd26 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017f4:	463b      	mov	r3, r7
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	@ (8001810 <MX_TIM6_Init+0x64>)
 80017fa:	f003 fc51 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001804:	f7ff fd18 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200005ac 	.word	0x200005ac
 8001814:	40001000 	.word	0x40001000

08001818 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181e:	463b      	mov	r3, r7
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <MX_TIM7_Init+0x64>)
 8001828:	4a15      	ldr	r2, [pc, #84]	@ (8001880 <MX_TIM7_Init+0x68>)
 800182a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 249;
 800182c:	4b13      	ldr	r3, [pc, #76]	@ (800187c <MX_TIM7_Init+0x64>)
 800182e:	22f9      	movs	r2, #249	@ 0xf9
 8001830:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	4b12      	ldr	r3, [pc, #72]	@ (800187c <MX_TIM7_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8001838:	4b10      	ldr	r3, [pc, #64]	@ (800187c <MX_TIM7_Init+0x64>)
 800183a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800183e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001840:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <MX_TIM7_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001846:	480d      	ldr	r0, [pc, #52]	@ (800187c <MX_TIM7_Init+0x64>)
 8001848:	f002 fcc8 	bl	80041dc <HAL_TIM_Base_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001852:	f7ff fcf1 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800185e:	463b      	mov	r3, r7
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	@ (800187c <MX_TIM7_Init+0x64>)
 8001864:	f003 fc1c 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800186e:	f7ff fce3 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200005f4 	.word	0x200005f4
 8001880:	40001400 	.word	0x40001400

08001884 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001894:	d10e      	bne.n	80018b4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <HAL_TIM_PWM_MspInit+0x64>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	4a12      	ldr	r2, [pc, #72]	@ (80018e8 <HAL_TIM_PWM_MspInit+0x64>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <HAL_TIM_PWM_MspInit+0x64>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80018b2:	e012      	b.n	80018da <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0c      	ldr	r2, [pc, #48]	@ (80018ec <HAL_TIM_PWM_MspInit+0x68>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d10d      	bne.n	80018da <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <HAL_TIM_PWM_MspInit+0x64>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	4a08      	ldr	r2, [pc, #32]	@ (80018e8 <HAL_TIM_PWM_MspInit+0x64>)
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_TIM_PWM_MspInit+0x64>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40000c00 	.word	0x40000c00

080018f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	@ 0x30
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a32      	ldr	r2, [pc, #200]	@ (80019d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d12c      	bne.n	800196c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	4b31      	ldr	r3, [pc, #196]	@ (80019dc <HAL_TIM_Encoder_MspInit+0xec>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	4a30      	ldr	r2, [pc, #192]	@ (80019dc <HAL_TIM_Encoder_MspInit+0xec>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6413      	str	r3, [r2, #64]	@ 0x40
 8001922:	4b2e      	ldr	r3, [pc, #184]	@ (80019dc <HAL_TIM_Encoder_MspInit+0xec>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <HAL_TIM_Encoder_MspInit+0xec>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a29      	ldr	r2, [pc, #164]	@ (80019dc <HAL_TIM_Encoder_MspInit+0xec>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <HAL_TIM_Encoder_MspInit+0xec>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 800194a:	23c0      	movs	r3, #192	@ 0xc0
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800195a:	2302      	movs	r3, #2
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	481e      	ldr	r0, [pc, #120]	@ (80019e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001966:	f001 f9c7 	bl	8002cf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800196a:	e030      	b.n	80019ce <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1c      	ldr	r2, [pc, #112]	@ (80019e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d12b      	bne.n	80019ce <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <HAL_TIM_Encoder_MspInit+0xec>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	4a17      	ldr	r2, [pc, #92]	@ (80019dc <HAL_TIM_Encoder_MspInit+0xec>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6413      	str	r3, [r2, #64]	@ 0x40
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <HAL_TIM_Encoder_MspInit+0xec>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <HAL_TIM_Encoder_MspInit+0xec>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a10      	ldr	r2, [pc, #64]	@ (80019dc <HAL_TIM_Encoder_MspInit+0xec>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <HAL_TIM_Encoder_MspInit+0xec>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin|ENC2_CH2_Pin;
 80019ae:	23c0      	movs	r3, #192	@ 0xc0
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019be:	2302      	movs	r3, #2
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	4807      	ldr	r0, [pc, #28]	@ (80019e8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80019ca:	f001 f995 	bl	8002cf8 <HAL_GPIO_Init>
}
 80019ce:	bf00      	nop
 80019d0:	3730      	adds	r7, #48	@ 0x30
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40000400 	.word	0x40000400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40000800 	.word	0x40000800
 80019e8:	40020400 	.word	0x40020400

080019ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a6c <HAL_TIM_Base_MspInit+0x80>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d116      	bne.n	8001a2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <HAL_TIM_Base_MspInit+0x84>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	4a1a      	ldr	r2, [pc, #104]	@ (8001a70 <HAL_TIM_Base_MspInit+0x84>)
 8001a08:	f043 0310 	orr.w	r3, r3, #16
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0e:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <HAL_TIM_Base_MspInit+0x84>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2036      	movs	r0, #54	@ 0x36
 8001a20:	f001 f933 	bl	8002c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a24:	2036      	movs	r0, #54	@ 0x36
 8001a26:	f001 f94c 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001a2a:	e01a      	b.n	8001a62 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a10      	ldr	r2, [pc, #64]	@ (8001a74 <HAL_TIM_Base_MspInit+0x88>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d115      	bne.n	8001a62 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a70 <HAL_TIM_Base_MspInit+0x84>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a70 <HAL_TIM_Base_MspInit+0x84>)
 8001a40:	f043 0320 	orr.w	r3, r3, #32
 8001a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <HAL_TIM_Base_MspInit+0x84>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2037      	movs	r0, #55	@ 0x37
 8001a58:	f001 f917 	bl	8002c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a5c:	2037      	movs	r0, #55	@ 0x37
 8001a5e:	f001 f930 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40001000 	.word	0x40001000
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40001400 	.word	0x40001400

08001a78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a98:	d11e      	bne.n	8001ad8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <HAL_TIM_MspPostInit+0xb0>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a21      	ldr	r2, [pc, #132]	@ (8001b28 <HAL_TIM_MspPostInit+0xb0>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <HAL_TIM_MspPostInit+0xb0>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M2_PUL_Pin;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_PUL_GPIO_Port, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4816      	ldr	r0, [pc, #88]	@ (8001b2c <HAL_TIM_MspPostInit+0xb4>)
 8001ad2:	f001 f911 	bl	8002cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ad6:	e022      	b.n	8001b1e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a14      	ldr	r2, [pc, #80]	@ (8001b30 <HAL_TIM_MspPostInit+0xb8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d11d      	bne.n	8001b1e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <HAL_TIM_MspPostInit+0xb0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a0f      	ldr	r2, [pc, #60]	@ (8001b28 <HAL_TIM_MspPostInit+0xb0>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <HAL_TIM_MspPostInit+0xb0>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PUL_Pin;
 8001afe:	2301      	movs	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_PUL_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	4804      	ldr	r0, [pc, #16]	@ (8001b2c <HAL_TIM_MspPostInit+0xb4>)
 8001b1a:	f001 f8ed 	bl	8002cf8 <HAL_GPIO_Init>
}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	@ 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40000c00 	.word	0x40000c00

08001b34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <MX_USART2_UART_Init+0x50>)
 8001b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b58:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <MX_USART2_UART_Init+0x4c>)
 8001b6c:	f003 fb28 	bl	80051c0 <HAL_UART_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b76:	f7ff fb5f 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000063c 	.word	0x2000063c
 8001b84:	40004400 	.word	0x40004400

08001b88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <HAL_UART_MspInit+0x84>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12b      	bne.n	8001c02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <HAL_UART_MspInit+0x88>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	4a17      	ldr	r2, [pc, #92]	@ (8001c10 <HAL_UART_MspInit+0x88>)
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <HAL_UART_MspInit+0x88>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <HAL_UART_MspInit+0x88>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	4a10      	ldr	r2, [pc, #64]	@ (8001c10 <HAL_UART_MspInit+0x88>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <HAL_UART_MspInit+0x88>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001be2:	230c      	movs	r3, #12
 8001be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <HAL_UART_MspInit+0x8c>)
 8001bfe:	f001 f87b 	bl	8002cf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	@ 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40004400 	.word	0x40004400
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020000 	.word	0x40020000

08001c18 <on_click>:
#define DEBOUNCE_DELAY 100 // ms

static uint32_t last_debounce_time = 0;
static uint8_t active = 0;

void on_click(){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY){
 8001c1c:	f000 ff2a 	bl	8002a74 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <on_click+0x6c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b64      	cmp	r3, #100	@ 0x64
 8001c2a:	d929      	bls.n	8001c80 <on_click+0x68>
		last_debounce_time = HAL_GetTick();
 8001c2c:	f000 ff22 	bl	8002a74 <HAL_GetTick>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <on_click+0x6c>)
 8001c34:	6013      	str	r3, [r2, #0]
		active ^= 1;
 8001c36:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <on_click+0x70>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	f083 0301 	eor.w	r3, r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <on_click+0x70>)
 8001c42:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001c44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c48:	4810      	ldr	r0, [pc, #64]	@ (8001c8c <on_click+0x74>)
 8001c4a:	f001 fa02 	bl	8003052 <HAL_GPIO_TogglePin>

		if(active){
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <on_click+0x70>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00a      	beq.n	8001c6c <on_click+0x54>
			set_speed(&stepper_l, 3);
 8001c56:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001c5a:	480d      	ldr	r0, [pc, #52]	@ (8001c90 <on_click+0x78>)
 8001c5c:	f000 fdfe 	bl	800285c <set_speed>
			set_speed(&stepper_r, 3);
 8001c60:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001c64:	480b      	ldr	r0, [pc, #44]	@ (8001c94 <on_click+0x7c>)
 8001c66:	f000 fdf9 	bl	800285c <set_speed>
		} else{
			set_speed(&stepper_l, 0);
			set_speed(&stepper_r, 0);
		}
	}
}
 8001c6a:	e009      	b.n	8001c80 <on_click+0x68>
			set_speed(&stepper_l, 0);
 8001c6c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001c98 <on_click+0x80>
 8001c70:	4807      	ldr	r0, [pc, #28]	@ (8001c90 <on_click+0x78>)
 8001c72:	f000 fdf3 	bl	800285c <set_speed>
			set_speed(&stepper_r, 0);
 8001c76:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001c98 <on_click+0x80>
 8001c7a:	4806      	ldr	r0, [pc, #24]	@ (8001c94 <on_click+0x7c>)
 8001c7c:	f000 fdee 	bl	800285c <set_speed>
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000684 	.word	0x20000684
 8001c88:	20000688 	.word	0x20000688
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	200006dc 	.word	0x200006dc
 8001c94:	200006a8 	.word	0x200006a8
 8001c98:	00000000 	.word	0x00000000

08001c9c <MAX72_init>:
    {'~', {0b00000, 0b00000, 0b00000, 0b01001, 0b10110, 0b00000, 0b00000, 0b00000}},
};


void MAX72_init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
    uint8_t txBuf[8];
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	e034      	b.n	8001d12 <MAX72_init+0x76>
        // riempi txBuf con 4 volte InitCommands[cmd]
        for (uint8_t dev=0; dev<4; dev++) {
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73bb      	strb	r3, [r7, #14]
 8001cac:	e01a      	b.n	8001ce4 <MAX72_init+0x48>
            txBuf[dev*2]   = InitCommands[cmd][0];
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	7bbb      	ldrb	r3, [r7, #14]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	491b      	ldr	r1, [pc, #108]	@ (8001d24 <MAX72_init+0x88>)
 8001cb6:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8001cba:	3310      	adds	r3, #16
 8001cbc:	443b      	add	r3, r7
 8001cbe:	f803 2c0c 	strb.w	r2, [r3, #-12]
            txBuf[dev*2+1] = InitCommands[cmd][1];
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	7bba      	ldrb	r2, [r7, #14]
 8001cc6:	0052      	lsls	r2, r2, #1
 8001cc8:	3201      	adds	r2, #1
 8001cca:	4916      	ldr	r1, [pc, #88]	@ (8001d24 <MAX72_init+0x88>)
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	440b      	add	r3, r1
 8001cd0:	7859      	ldrb	r1, [r3, #1]
 8001cd2:	f102 0310 	add.w	r3, r2, #16
 8001cd6:	443b      	add	r3, r7
 8001cd8:	460a      	mov	r2, r1
 8001cda:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (uint8_t dev=0; dev<4; dev++) {
 8001cde:	7bbb      	ldrb	r3, [r7, #14]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	73bb      	strb	r3, [r7, #14]
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d9e1      	bls.n	8001cae <MAX72_init+0x12>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // CS
 8001cea:	2200      	movs	r2, #0
 8001cec:	2110      	movs	r1, #16
 8001cee:	480e      	ldr	r0, [pc, #56]	@ (8001d28 <MAX72_init+0x8c>)
 8001cf0:	f001 f996 	bl	8003020 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8001cf4:	1d39      	adds	r1, r7, #4
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cfa:	2208      	movs	r2, #8
 8001cfc:	480b      	ldr	r0, [pc, #44]	@ (8001d2c <MAX72_init+0x90>)
 8001cfe:	f002 f84c 	bl	8003d9a <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // CS
 8001d02:	2201      	movs	r2, #1
 8001d04:	2110      	movs	r1, #16
 8001d06:	4808      	ldr	r0, [pc, #32]	@ (8001d28 <MAX72_init+0x8c>)
 8001d08:	f001 f98a 	bl	8003020 <HAL_GPIO_WritePin>
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d9c7      	bls.n	8001ca8 <MAX72_init+0xc>
    }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	08006118 	.word	0x08006118
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	20000430 	.word	0x20000430

08001d30 <MAX72_SendRow>:

void MAX72_SendRow(uint8_t row, uint8_t pattern[4])
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[8];
    // pattern[i] = dato per il modulo i
    for (uint8_t dev=0; dev<4; dev++) {
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	75fb      	strb	r3, [r7, #23]
 8001d40:	e014      	b.n	8001d6c <MAX72_SendRow+0x3c>
        txBuf[dev*2]   = row;          // registro DIG[row]
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	3318      	adds	r3, #24
 8001d48:	443b      	add	r3, r7
 8001d4a:	79fa      	ldrb	r2, [r7, #7]
 8001d4c:	f803 2c0c 	strb.w	r2, [r3, #-12]
        txBuf[dev*2+1] = pattern[dev]; // i‑esimo byte di dati
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	441a      	add	r2, r3
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	7812      	ldrb	r2, [r2, #0]
 8001d5e:	3318      	adds	r3, #24
 8001d60:	443b      	add	r3, r7
 8001d62:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t dev=0; dev<4; dev++) {
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	75fb      	strb	r3, [r7, #23]
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d9e7      	bls.n	8001d42 <MAX72_SendRow+0x12>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2110      	movs	r1, #16
 8001d76:	480a      	ldr	r0, [pc, #40]	@ (8001da0 <MAX72_SendRow+0x70>)
 8001d78:	f001 f952 	bl	8003020 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8001d7c:	f107 010c 	add.w	r1, r7, #12
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d84:	2208      	movs	r2, #8
 8001d86:	4807      	ldr	r0, [pc, #28]	@ (8001da4 <MAX72_SendRow+0x74>)
 8001d88:	f002 f807 	bl	8003d9a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2110      	movs	r1, #16
 8001d90:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <MAX72_SendRow+0x70>)
 8001d92:	f001 f945 	bl	8003020 <HAL_GPIO_WritePin>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40020400 	.word	0x40020400
 8001da4:	20000430 	.word	0x20000430

08001da8 <MAX72_Print_String>:
//        MAX72_SendRow(row+1, pat); // rows: 1-8
//    }
//}

void MAX72_Print_String(const char *str, uint8_t settings)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b094      	sub	sp, #80	@ 0x50
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
    uint8_t len = strlen(str);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7fe fa2b 	bl	8000210 <strlen>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    if (settings == MINIDIGITS) {
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	f040 8119 	bne.w	8001ffa <MAX72_Print_String+0x252>
    	char padded[8] = {0};
 8001dc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
    	        // Calcola padding all'inizio (right align)
    	        uint8_t start = (len < 8) ? (8 - len) : 0;
 8001dd2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001dd6:	2b07      	cmp	r3, #7
 8001dd8:	d805      	bhi.n	8001de6 <MAX72_Print_String+0x3e>
 8001dda:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001dde:	f1c3 0308 	rsb	r3, r3, #8
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	e000      	b.n	8001de8 <MAX72_Print_String+0x40>
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    	        // Spazi iniziali
    	        for (uint8_t i = 0; i < start; i++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001df2:	e00b      	b.n	8001e0c <MAX72_Print_String+0x64>
    	            padded[i] = ' ';
 8001df4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001df8:	3350      	adds	r3, #80	@ 0x50
 8001dfa:	443b      	add	r3, r7
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < start; i++)
 8001e02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e06:	3301      	adds	r3, #1
 8001e08:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001e0c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001e10:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d3ed      	bcc.n	8001df4 <MAX72_Print_String+0x4c>
    	        // Copia la stringa
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8001e1e:	e012      	b.n	8001e46 <MAX72_Print_String+0x9e>
    	            padded[start + i] = str[i];
 8001e20:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	441a      	add	r2, r3
 8001e28:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8001e2c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001e30:	440b      	add	r3, r1
 8001e32:	7812      	ldrb	r2, [r2, #0]
 8001e34:	3350      	adds	r3, #80	@ 0x50
 8001e36:	443b      	add	r3, r7
 8001e38:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8001e3c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001e40:	3301      	adds	r3, #1
 8001e42:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8001e46:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001e4a:	2b07      	cmp	r3, #7
 8001e4c:	d805      	bhi.n	8001e5a <MAX72_Print_String+0xb2>
 8001e4e:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8001e52:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d3e2      	bcc.n	8001e20 <MAX72_Print_String+0x78>

        char reversed[8];
        for (uint8_t i = 0; i < 8; i++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8001e60:	e012      	b.n	8001e88 <MAX72_Print_String+0xe0>
            reversed[i] = padded[7 - i];
 8001e62:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e66:	f1c3 0207 	rsb	r2, r3, #7
 8001e6a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e6e:	3250      	adds	r2, #80	@ 0x50
 8001e70:	443a      	add	r2, r7
 8001e72:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8001e76:	3350      	adds	r3, #80	@ 0x50
 8001e78:	443b      	add	r3, r7
 8001e7a:	f803 2c28 	strb.w	r2, [r3, #-40]
        for (uint8_t i = 0; i < 8; i++)
 8001e7e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e82:	3301      	adds	r3, #1
 8001e84:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8001e88:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e8c:	2b07      	cmp	r3, #7
 8001e8e:	d9e8      	bls.n	8001e62 <MAX72_Print_String+0xba>

        for (uint8_t row = 0; row < 8; row++) {
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8001e96:	e0aa      	b.n	8001fee <MAX72_Print_String+0x246>
            uint8_t pat[4] = {0};
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24

            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001ea2:	e090      	b.n	8001fc6 <MAX72_Print_String+0x21e>
                uint8_t c1 = reversed[byte_idx * 2];
 8001ea4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	3350      	adds	r3, #80	@ 0x50
 8001eac:	443b      	add	r3, r7
 8001eae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001eb2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t c2 = reversed[byte_idx * 2 + 1];
 8001eb6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	3350      	adds	r3, #80	@ 0x50
 8001ec0:	443b      	add	r3, r7
 8001ec2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ec6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                uint8_t char1_pattern = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                uint8_t char2_pattern = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                if (c1 >= '0' && c1 <= '9')
 8001ed6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001eda:	2b2f      	cmp	r3, #47	@ 0x2f
 8001edc:	d913      	bls.n	8001f06 <MAX72_Print_String+0x15e>
 8001ede:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001ee2:	2b39      	cmp	r3, #57	@ 0x39
 8001ee4:	d80f      	bhi.n	8001f06 <MAX72_Print_String+0x15e>
                    char1_pattern = DIGITS[c1 - '0' + 2][row] & 0x07;
 8001ee6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001eea:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 8001eee:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001ef2:	49cd      	ldr	r1, [pc, #820]	@ (8002228 <MAX72_Print_String+0x480>)
 8001ef4:	00d2      	lsls	r2, r2, #3
 8001ef6:	440a      	add	r2, r1
 8001ef8:	4413      	add	r3, r2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001f04:	e019      	b.n	8001f3a <MAX72_Print_String+0x192>
                else if (c1 == '-')
 8001f06:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001f0a:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f0c:	d109      	bne.n	8001f22 <MAX72_Print_String+0x17a>
                    char1_pattern = DIGITS[1][row] & 0x07;
 8001f0e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001f12:	4ac5      	ldr	r2, [pc, #788]	@ (8002228 <MAX72_Print_String+0x480>)
 8001f14:	4413      	add	r3, r2
 8001f16:	7a1b      	ldrb	r3, [r3, #8]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001f20:	e00b      	b.n	8001f3a <MAX72_Print_String+0x192>
                else if (c1 == '.')
 8001f22:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001f26:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f28:	d107      	bne.n	8001f3a <MAX72_Print_String+0x192>
					char1_pattern = DIGITS[0][row] & 0x07;
 8001f2a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001f2e:	4abe      	ldr	r2, [pc, #760]	@ (8002228 <MAX72_Print_String+0x480>)
 8001f30:	5cd3      	ldrb	r3, [r2, r3]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

                if (c2 >= '0' && c2 <= '9')
 8001f3a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001f3e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f40:	d913      	bls.n	8001f6a <MAX72_Print_String+0x1c2>
 8001f42:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001f46:	2b39      	cmp	r3, #57	@ 0x39
 8001f48:	d80f      	bhi.n	8001f6a <MAX72_Print_String+0x1c2>
                    char2_pattern = DIGITS[c2 - '0' + 2][row] & 0x07;
 8001f4a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001f4e:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 8001f52:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001f56:	49b4      	ldr	r1, [pc, #720]	@ (8002228 <MAX72_Print_String+0x480>)
 8001f58:	00d2      	lsls	r2, r2, #3
 8001f5a:	440a      	add	r2, r1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8001f68:	e019      	b.n	8001f9e <MAX72_Print_String+0x1f6>
                else if (c2 == '-')
 8001f6a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001f6e:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f70:	d109      	bne.n	8001f86 <MAX72_Print_String+0x1de>
                    char2_pattern = DIGITS[1][row] & 0x07;
 8001f72:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001f76:	4aac      	ldr	r2, [pc, #688]	@ (8002228 <MAX72_Print_String+0x480>)
 8001f78:	4413      	add	r3, r2
 8001f7a:	7a1b      	ldrb	r3, [r3, #8]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8001f84:	e00b      	b.n	8001f9e <MAX72_Print_String+0x1f6>
                else if (c2 == '.')
 8001f86:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001f8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f8c:	d107      	bne.n	8001f9e <MAX72_Print_String+0x1f6>
                	char2_pattern = DIGITS[0][row] & 0x07;
 8001f8e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001f92:	4aa5      	ldr	r2, [pc, #660]	@ (8002228 <MAX72_Print_String+0x480>)
 8001f94:	5cd3      	ldrb	r3, [r2, r3]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                pat[byte_idx] = (char1_pattern << 4) | char2_pattern;
 8001f9e:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	b25a      	sxtb	r2, r3
 8001fa6:	f997 3049 	ldrsb.w	r3, [r7, #73]	@ 0x49
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b25a      	sxtb	r2, r3
 8001fae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	3350      	adds	r3, #80	@ 0x50
 8001fb6:	443b      	add	r3, r7
 8001fb8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8001fbc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001fc6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	f67f af6a 	bls.w	8001ea4 <MAX72_Print_String+0xfc>
            }

            MAX72_SendRow(row + 1, pat);
 8001fd0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fea6 	bl	8001d30 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8001fe4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8001fee:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001ff2:	2b07      	cmp	r3, #7
 8001ff4:	f67f af50 	bls.w	8001e98 <MAX72_Print_String+0xf0>
            for (uint8_t i = 0; i < 4; i++)
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
            MAX72_SendRow(row + 1, pat);
        }
    }
}
 8001ff8:	e150      	b.n	800229c <MAX72_Print_String+0x4f4>
    else if (settings == FLOAT) {
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	f040 80d1 	bne.w	80021a4 <MAX72_Print_String+0x3fc>
        char reversed[4] = {0};
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
        int8_t dot_pos = -1;
 8002006:	23ff      	movs	r3, #255	@ 0xff
 8002008:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < len; i++)
 800200c:	2300      	movs	r3, #0
 800200e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002012:	e010      	b.n	8002036 <MAX72_Print_String+0x28e>
            if (str[i] == '.') { dot_pos = i; break; }
 8002014:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	4413      	add	r3, r2
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002020:	d104      	bne.n	800202c <MAX72_Print_String+0x284>
 8002022:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002026:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 800202a:	e00a      	b.n	8002042 <MAX72_Print_String+0x29a>
        for (uint8_t i = 0; i < len; i++)
 800202c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002030:	3301      	adds	r3, #1
 8002032:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002036:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800203a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800203e:	429a      	cmp	r2, r3
 8002040:	d3e8      	bcc.n	8002014 <MAX72_Print_String+0x26c>
        char no_dot_str[5] = {0};
 8002042:	f107 0318 	add.w	r3, r7, #24
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	711a      	strb	r2, [r3, #4]
        uint8_t no_dot_len = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 8002052:	2300      	movs	r3, #0
 8002054:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002058:	e019      	b.n	800208e <MAX72_Print_String+0x2e6>
            if (str[i] != '.') no_dot_str[no_dot_len++] = str[i];
 800205a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b2e      	cmp	r3, #46	@ 0x2e
 8002066:	d00d      	beq.n	8002084 <MAX72_Print_String+0x2dc>
 8002068:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	441a      	add	r2, r3
 8002070:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002074:	1c59      	adds	r1, r3, #1
 8002076:	f887 1046 	strb.w	r1, [r7, #70]	@ 0x46
 800207a:	7812      	ldrb	r2, [r2, #0]
 800207c:	3350      	adds	r3, #80	@ 0x50
 800207e:	443b      	add	r3, r7
 8002080:	f803 2c38 	strb.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 8002084:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002088:	3301      	adds	r3, #1
 800208a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800208e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002092:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002096:	429a      	cmp	r2, r3
 8002098:	d203      	bcs.n	80020a2 <MAX72_Print_String+0x2fa>
 800209a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d9db      	bls.n	800205a <MAX72_Print_String+0x2b2>
        dot_pos = no_dot_len - dot_pos - 1;
 80020a2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80020a6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < 4; i++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80020bc:	e01c      	b.n	80020f8 <MAX72_Print_String+0x350>
            reversed[i] = (i < no_dot_len) ? no_dot_str[no_dot_len - 1 - i] : ' ';
 80020be:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80020c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d20a      	bcs.n	80020e0 <MAX72_Print_String+0x338>
 80020ca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80020ce:	1e5a      	subs	r2, r3, #1
 80020d0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	3350      	adds	r3, #80	@ 0x50
 80020d8:	443b      	add	r3, r7
 80020da:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80020de:	e000      	b.n	80020e2 <MAX72_Print_String+0x33a>
 80020e0:	2220      	movs	r2, #32
 80020e2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80020e6:	3350      	adds	r3, #80	@ 0x50
 80020e8:	443b      	add	r3, r7
 80020ea:	f803 2c30 	strb.w	r2, [r3, #-48]
        for (uint8_t i = 0; i < 4; i++)
 80020ee:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80020f2:	3301      	adds	r3, #1
 80020f4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80020f8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d9de      	bls.n	80020be <MAX72_Print_String+0x316>
        for (uint8_t row = 0; row < 8; row++) {
 8002100:	2300      	movs	r3, #0
 8002102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002106:	e048      	b.n	800219a <MAX72_Print_String+0x3f2>
            for (uint8_t i = 0; i < 4; i++)
 8002108:	2300      	movs	r3, #0
 800210a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800210e:	e01e      	b.n	800214e <MAX72_Print_String+0x3a6>
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 8002110:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002114:	3350      	adds	r3, #80	@ 0x50
 8002116:	443b      	add	r3, r7
 8002118:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800211c:	f1a3 0220 	sub.w	r2, r3, #32
 8002120:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 8002124:	4841      	ldr	r0, [pc, #260]	@ (800222c <MAX72_Print_String+0x484>)
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	4403      	add	r3, r0
 800212e:	440b      	add	r3, r1
 8002130:	3301      	adds	r3, #1
 8002132:	781a      	ldrb	r2, [r3, #0]
 8002134:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002138:	00d2      	lsls	r2, r2, #3
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	3350      	adds	r3, #80	@ 0x50
 800213e:	443b      	add	r3, r7
 8002140:	f803 2c3c 	strb.w	r2, [r3, #-60]
            for (uint8_t i = 0; i < 4; i++)
 8002144:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002148:	3301      	adds	r3, #1
 800214a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800214e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002152:	2b03      	cmp	r3, #3
 8002154:	d9dc      	bls.n	8002110 <MAX72_Print_String+0x368>
            if (row == 0) pat[dot_pos] |= 0b010;
 8002156:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10e      	bne.n	800217c <MAX72_Print_String+0x3d4>
 800215e:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8002162:	3350      	adds	r3, #80	@ 0x50
 8002164:	443b      	add	r3, r7
 8002166:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 800216a:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 800216e:	f042 0202 	orr.w	r2, r2, #2
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	3350      	adds	r3, #80	@ 0x50
 8002176:	443b      	add	r3, r7
 8002178:	f803 2c3c 	strb.w	r2, [r3, #-60]
            MAX72_SendRow(row + 1, pat);
 800217c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002180:	3301      	adds	r3, #1
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f107 0214 	add.w	r2, r7, #20
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fdd0 	bl	8001d30 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8002190:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002194:	3301      	adds	r3, #1
 8002196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800219a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800219e:	2b07      	cmp	r3, #7
 80021a0:	d9b2      	bls.n	8002108 <MAX72_Print_String+0x360>
}
 80021a2:	e07b      	b.n	800229c <MAX72_Print_String+0x4f4>
        char reversed[4] = {0};
 80021a4:	2300      	movs	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80021ae:	e014      	b.n	80021da <MAX72_Print_String+0x432>
            reversed[i] = str[len - 1 - i];
 80021b0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80021b4:	1e5a      	subs	r2, r3, #1
 80021b6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	441a      	add	r2, r3
 80021c2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80021c6:	7812      	ldrb	r2, [r2, #0]
 80021c8:	3350      	adds	r3, #80	@ 0x50
 80021ca:	443b      	add	r3, r7
 80021cc:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 80021d0:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80021d4:	3301      	adds	r3, #1
 80021d6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80021da:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d805      	bhi.n	80021ee <MAX72_Print_String+0x446>
 80021e2:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 80021e6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d3e0      	bcc.n	80021b0 <MAX72_Print_String+0x408>
        for (uint8_t i = len; i < 4; i++)
 80021ee:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80021f2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80021f6:	e00b      	b.n	8002210 <MAX72_Print_String+0x468>
            reversed[i] = ' ';
 80021f8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80021fc:	3350      	adds	r3, #80	@ 0x50
 80021fe:	443b      	add	r3, r7
 8002200:	2220      	movs	r2, #32
 8002202:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = len; i < 4; i++)
 8002206:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800220a:	3301      	adds	r3, #1
 800220c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8002210:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002214:	2b03      	cmp	r3, #3
 8002216:	d9ef      	bls.n	80021f8 <MAX72_Print_String+0x450>
        for (uint8_t row = 0; row < 8; row++) {
 8002218:	2300      	movs	r3, #0
 800221a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800221e:	e039      	b.n	8002294 <MAX72_Print_String+0x4ec>
            for (uint8_t i = 0; i < 4; i++)
 8002220:	2300      	movs	r3, #0
 8002222:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002226:	e022      	b.n	800226e <MAX72_Print_String+0x4c6>
 8002228:	2000035c 	.word	0x2000035c
 800222c:	20000004 	.word	0x20000004
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 8002230:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002234:	3350      	adds	r3, #80	@ 0x50
 8002236:	443b      	add	r3, r7
 8002238:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800223c:	f1a3 0220 	sub.w	r2, r3, #32
 8002240:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8002244:	4817      	ldr	r0, [pc, #92]	@ (80022a4 <MAX72_Print_String+0x4fc>)
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	4403      	add	r3, r0
 800224e:	440b      	add	r3, r1
 8002250:	3301      	adds	r3, #1
 8002252:	781a      	ldrb	r2, [r3, #0]
 8002254:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002258:	00d2      	lsls	r2, r2, #3
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	3350      	adds	r3, #80	@ 0x50
 800225e:	443b      	add	r3, r7
 8002260:	f803 2c44 	strb.w	r2, [r3, #-68]
            for (uint8_t i = 0; i < 4; i++)
 8002264:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002268:	3301      	adds	r3, #1
 800226a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800226e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002272:	2b03      	cmp	r3, #3
 8002274:	d9dc      	bls.n	8002230 <MAX72_Print_String+0x488>
            MAX72_SendRow(row + 1, pat);
 8002276:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800227a:	3301      	adds	r3, #1
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f107 020c 	add.w	r2, r7, #12
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fd53 	bl	8001d30 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 800228a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800228e:	3301      	adds	r3, #1
 8002290:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002294:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002298:	2b07      	cmp	r3, #7
 800229a:	d9c1      	bls.n	8002220 <MAX72_Print_String+0x478>
}
 800229c:	bf00      	nop
 800229e:	3750      	adds	r7, #80	@ 0x50
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000004 	.word	0x20000004

080022a8 <MAX72_Print_Float>:

    MAX72_Print_String(str, minidigits ? MINIDIGITS : NO_SETTINGS);
//    MAX72_Print_String(str);
}

void MAX72_Print_Float(float num, uint8_t decimals, uint8_t minidigits) {
 80022a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022ac:	b095      	sub	sp, #84	@ 0x54
 80022ae:	af04      	add	r7, sp, #16
 80022b0:	ed87 0a01 	vstr	s0, [r7, #4]
 80022b4:	4603      	mov	r3, r0
 80022b6:	460a      	mov	r2, r1
 80022b8:	70fb      	strb	r3, [r7, #3]
 80022ba:	4613      	mov	r3, r2
 80022bc:	70bb      	strb	r3, [r7, #2]
 80022be:	466b      	mov	r3, sp
 80022c0:	461e      	mov	r6, r3
    uint8_t max_chars = 8;
 80022c2:	2308      	movs	r3, #8
 80022c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char str[max_chars + 1]; // +1 for null terminator
 80022c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022cc:	1c59      	adds	r1, r3, #1
 80022ce:	1e4b      	subs	r3, r1, #1
 80022d0:	623b      	str	r3, [r7, #32]
 80022d2:	460a      	mov	r2, r1
 80022d4:	2300      	movs	r3, #0
 80022d6:	4690      	mov	r8, r2
 80022d8:	4699      	mov	r9, r3
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022ee:	460a      	mov	r2, r1
 80022f0:	2300      	movs	r3, #0
 80022f2:	4614      	mov	r4, r2
 80022f4:	461d      	mov	r5, r3
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	00eb      	lsls	r3, r5, #3
 8002300:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002304:	00e2      	lsls	r2, r4, #3
 8002306:	460b      	mov	r3, r1
 8002308:	3307      	adds	r3, #7
 800230a:	08db      	lsrs	r3, r3, #3
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	ebad 0d03 	sub.w	sp, sp, r3
 8002312:	ab04      	add	r3, sp, #16
 8002314:	3300      	adds	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]

    // Gestione del segno
    char sign = (num < 0) ? '-' : '\0';
 8002318:	edd7 7a01 	vldr	s15, [r7, #4]
 800231c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002324:	d501      	bpl.n	800232a <MAX72_Print_Float+0x82>
 8002326:	232d      	movs	r3, #45	@ 0x2d
 8002328:	e000      	b.n	800232c <MAX72_Print_Float+0x84>
 800232a:	2300      	movs	r3, #0
 800232c:	76fb      	strb	r3, [r7, #27]
    float abs_num = (num < 0) ? -num : num;
 800232e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	d504      	bpl.n	8002346 <MAX72_Print_Float+0x9e>
 800233c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002340:	eef1 7a67 	vneg.f32	s15, s15
 8002344:	e001      	b.n	800234a <MAX72_Print_Float+0xa2>
 8002346:	edd7 7a01 	vldr	s15, [r7, #4]
 800234a:	edc7 7a05 	vstr	s15, [r7, #20]

    // Separa parte intera e decimale
    unsigned int_part = (unsigned) abs_num;
 800234e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002356:	ee17 3a90 	vmov	r3, s15
 800235a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float frac_part = abs_num - int_part;
 800235c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002366:	ed97 7a05 	vldr	s14, [r7, #20]
 800236a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236e:	edc7 7a04 	vstr	s15, [r7, #16]


    // Calcola quanti caratteri servono per la parte intera
    uint8_t int_digits = (int_part == 0) ? 0 : 1;
 8002372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002374:	2b00      	cmp	r3, #0
 8002376:	bf14      	ite	ne
 8002378:	2301      	movne	r3, #1
 800237a:	2300      	moveq	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    unsigned temp = int_part;
 8002382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002384:	637b      	str	r3, [r7, #52]	@ 0x34
    while (temp >= 10) {
 8002386:	e00a      	b.n	800239e <MAX72_Print_Float+0xf6>
        temp /= 10;
 8002388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238a:	4a5d      	ldr	r2, [pc, #372]	@ (8002500 <MAX72_Print_Float+0x258>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
        int_digits++;
 8002394:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002398:	3301      	adds	r3, #1
 800239a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    while (temp >= 10) {
 800239e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a0:	2b09      	cmp	r3, #9
 80023a2:	d8f1      	bhi.n	8002388 <MAX72_Print_Float+0xe0>
    }

    // Calcola spazio disponibile per decimali
    uint8_t available_for_decimals = max_chars - (sign != '\0' ? 1 : 0) - int_digits - 1; // -1 per il punto decimale
 80023a4:	7efb      	ldrb	r3, [r7, #27]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	bf14      	ite	ne
 80023aa:	2301      	movne	r3, #1
 80023ac:	2300      	moveq	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]

    // Limita i decimali al minimo tra quelli richiesti e quelli disponibili
    uint8_t actual_decimals = (decimals < available_for_decimals) ? decimals : available_for_decimals;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	4293      	cmp	r3, r2
 80023cc:	bf28      	it	cs
 80023ce:	4613      	movcs	r3, r2
 80023d0:	73bb      	strb	r3, [r7, #14]

    // Se non c'è spazio nemmeno per un decimale, mostra solo la parte intera
    if (available_for_decimals == 0) {
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d11b      	bne.n	8002410 <MAX72_Print_Float+0x168>
        if (int_part == 0) {
 80023d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <MAX72_Print_Float+0x144>
            snprintf(str, sizeof(str), "0");
 80023de:	460b      	mov	r3, r1
 80023e0:	4a48      	ldr	r2, [pc, #288]	@ (8002504 <MAX72_Print_Float+0x25c>)
 80023e2:	4619      	mov	r1, r3
 80023e4:	69f8      	ldr	r0, [r7, #28]
 80023e6:	f003 f9af 	bl	8005748 <sniprintf>
 80023ea:	e079      	b.n	80024e0 <MAX72_Print_Float+0x238>
        } else {
            if (sign != '\0') {
 80023ec:	7efb      	ldrb	r3, [r7, #27]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <MAX72_Print_Float+0x15c>
                snprintf(str, sizeof(str), "%c%u", sign, int_part);
 80023f2:	7efa      	ldrb	r2, [r7, #27]
 80023f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	4a43      	ldr	r2, [pc, #268]	@ (8002508 <MAX72_Print_Float+0x260>)
 80023fc:	69f8      	ldr	r0, [r7, #28]
 80023fe:	f003 f9a3 	bl	8005748 <sniprintf>
 8002402:	e06d      	b.n	80024e0 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u", int_part);
 8002404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002406:	4a41      	ldr	r2, [pc, #260]	@ (800250c <MAX72_Print_Float+0x264>)
 8002408:	69f8      	ldr	r0, [r7, #28]
 800240a:	f003 f99d 	bl	8005748 <sniprintf>
 800240e:	e067      	b.n	80024e0 <MAX72_Print_Float+0x238>
            }
        }
    } else {
        // Calcola il moltiplicatore per i decimali
        unsigned multiplier = 1;
 8002410:	2301      	movs	r3, #1
 8002412:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8002414:	2300      	movs	r3, #0
 8002416:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800241a:	e00a      	b.n	8002432 <MAX72_Print_Float+0x18a>
            multiplier *= 10;
 800241c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8002428:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800242c:	3301      	adds	r3, #1
 800242e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002432:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002436:	7bbb      	ldrb	r3, [r7, #14]
 8002438:	429a      	cmp	r2, r3
 800243a:	d3ef      	bcc.n	800241c <MAX72_Print_Float+0x174>
        }

        // Arrotonda la parte frazionaria
        unsigned frac_digits = (unsigned) (frac_part * multiplier + 0.5f);
 800243c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002446:	edd7 7a04 	vldr	s15, [r7, #16]
 800244a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002452:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800245a:	ee17 3a90 	vmov	r3, s15
 800245e:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Gestisce il caso di overflow nell'arrotondamento
        if (frac_digits >= multiplier) {
 8002460:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	429a      	cmp	r2, r3
 8002466:	d304      	bcc.n	8002472 <MAX72_Print_Float+0x1ca>
            int_part++;
 8002468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800246a:	3301      	adds	r3, #1
 800246c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            frac_digits = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Costruisce la stringa
        if (int_part == 0) {
 8002472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d118      	bne.n	80024aa <MAX72_Print_Float+0x202>
            // Omette la parte intera se è 0
            if (sign != '\0') {
 8002478:	7efb      	ldrb	r3, [r7, #27]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00c      	beq.n	8002498 <MAX72_Print_Float+0x1f0>
                snprintf(str, sizeof(str), "%c.%0*u", sign, actual_decimals, frac_digits);
 800247e:	4608      	mov	r0, r1
 8002480:	7ef9      	ldrb	r1, [r7, #27]
 8002482:	7bbb      	ldrb	r3, [r7, #14]
 8002484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002486:	9201      	str	r2, [sp, #4]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	460b      	mov	r3, r1
 800248c:	4a20      	ldr	r2, [pc, #128]	@ (8002510 <MAX72_Print_Float+0x268>)
 800248e:	4601      	mov	r1, r0
 8002490:	69f8      	ldr	r0, [r7, #28]
 8002492:	f003 f959 	bl	8005748 <sniprintf>
 8002496:	e023      	b.n	80024e0 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), ".%0*u", actual_decimals, frac_digits);
 8002498:	7bba      	ldrb	r2, [r7, #14]
 800249a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002514 <MAX72_Print_Float+0x26c>)
 80024a2:	69f8      	ldr	r0, [r7, #28]
 80024a4:	f003 f950 	bl	8005748 <sniprintf>
 80024a8:	e01a      	b.n	80024e0 <MAX72_Print_Float+0x238>
            }
        } else {
            // Include la parte intera
            if (sign != '\0') {
 80024aa:	7efb      	ldrb	r3, [r7, #27]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00e      	beq.n	80024ce <MAX72_Print_Float+0x226>
                snprintf(str, sizeof(str), "%c%u.%0*u", sign, int_part, actual_decimals, frac_digits);
 80024b0:	4608      	mov	r0, r1
 80024b2:	7ef9      	ldrb	r1, [r7, #27]
 80024b4:	7bbb      	ldrb	r3, [r7, #14]
 80024b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024b8:	9202      	str	r2, [sp, #8]
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	460b      	mov	r3, r1
 80024c2:	4a15      	ldr	r2, [pc, #84]	@ (8002518 <MAX72_Print_Float+0x270>)
 80024c4:	4601      	mov	r1, r0
 80024c6:	69f8      	ldr	r0, [r7, #28]
 80024c8:	f003 f93e 	bl	8005748 <sniprintf>
 80024cc:	e008      	b.n	80024e0 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u.%0*u", int_part, actual_decimals, frac_digits);
 80024ce:	7bbb      	ldrb	r3, [r7, #14]
 80024d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024d2:	9201      	str	r2, [sp, #4]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024d8:	4a10      	ldr	r2, [pc, #64]	@ (800251c <MAX72_Print_Float+0x274>)
 80024da:	69f8      	ldr	r0, [r7, #28]
 80024dc:	f003 f934 	bl	8005748 <sniprintf>
            }
        }
    }

    MAX72_Print_String(str, minidigits ? MINIDIGITS : FLOAT);
 80024e0:	78bb      	ldrb	r3, [r7, #2]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MAX72_Print_Float+0x242>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e000      	b.n	80024ec <MAX72_Print_Float+0x244>
 80024ea:	2301      	movs	r3, #1
 80024ec:	4619      	mov	r1, r3
 80024ee:	69f8      	ldr	r0, [r7, #28]
 80024f0:	f7ff fc5a 	bl	8001da8 <MAX72_Print_String>
 80024f4:	46b5      	mov	sp, r6
//    MAX72_Print_String(str);
}
 80024f6:	bf00      	nop
 80024f8:	3744      	adds	r7, #68	@ 0x44
 80024fa:	46bd      	mov	sp, r7
 80024fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002500:	cccccccd 	.word	0xcccccccd
 8002504:	080060d0 	.word	0x080060d0
 8002508:	080060d4 	.word	0x080060d4
 800250c:	080060cc 	.word	0x080060cc
 8002510:	080060dc 	.word	0x080060dc
 8002514:	080060e4 	.word	0x080060e4
 8002518:	080060ec 	.word	0x080060ec
 800251c:	080060f8 	.word	0x080060f8

08002520 <update_direction>:
#include <stdio.h>

float SAMPLING_PERIOD; // seconds
uint32_t HCLK;

static void update_direction(encoder_t *encoder){
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	encoder->direction = (encoder->tim->CR1 & TIM_CR1_DIR_Msk) >> TIM_CR1_DIR_Pos;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	b2da      	uxtb	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	701a      	strb	r2, [r3, #0]
	return;
 800253c:	bf00      	nop
}
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <update_displacement>:

static void update_displacement(encoder_t *encoder){
 8002548:	b5b0      	push	{r4, r5, r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

	encoder->displacement = ((float)encoder->tim->CNT - 4096) * DCF * encoder->direction_invert;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800255e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80025c8 <update_displacement+0x80>
 8002562:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002566:	ee17 0a90 	vmov	r0, s15
 800256a:	f7fe f80d 	bl	8000588 <__aeabi_f2d>
 800256e:	a314      	add	r3, pc, #80	@ (adr r3, 80025c0 <update_displacement+0x78>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	f7fe f860 	bl	8000638 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4614      	mov	r4, r2
 800257e:	461d      	mov	r5, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd ffec 	bl	8000564 <__aeabi_i2d>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4620      	mov	r0, r4
 8002592:	4629      	mov	r1, r5
 8002594:	f7fe f850 	bl	8000638 <__aeabi_dmul>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	f7fe fa7c 	bl	8000a9c <__aeabi_d2f>
 80025a4:	4602      	mov	r2, r0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	605a      	str	r2, [r3, #4]
	encoder->tim->CNT = 4096;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025b2:	625a      	str	r2, [r3, #36]	@ 0x24
	return;
 80025b4:	bf00      	nop
}
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bdb0      	pop	{r4, r5, r7, pc}
 80025bc:	f3af 8000 	nop.w
 80025c0:	7bb1a72c 	.word	0x7bb1a72c
 80025c4:	3f4921fa 	.word	0x3f4921fa
 80025c8:	45800000 	.word	0x45800000

080025cc <compute_speed>:

static void compute_speed(encoder_t *encoder){
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	encoder->speed = encoder->displacement / SAMPLING_PERIOD;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	edd3 6a01 	vldr	s13, [r3, #4]
 80025da:	4b07      	ldr	r3, [pc, #28]	@ (80025f8 <compute_speed+0x2c>)
 80025dc:	ed93 7a00 	vldr	s14, [r3]
 80025e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000068c 	.word	0x2000068c

080025fc <update_data>:

void update_data(encoder_t *encoder){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	update_direction(encoder);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff8b 	bl	8002520 <update_direction>
	update_displacement(encoder);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ff9c 	bl	8002548 <update_displacement>
	compute_speed(encoder);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ffdb 	bl	80025cc <compute_speed>
	return;
 8002616:	bf00      	nop
}
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <encoder_init>:

// em_tim : encoder mode timer | s_tim : sampling timer
void encoder_init(encoder_t *encoder, TIM_HandleTypeDef *em_tim, TIM_HandleTypeDef *s_tim, int8_t direction_invert){
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	70fb      	strb	r3, [r7, #3]
	encoder->tim = em_tim->Instance;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	60da      	str	r2, [r3, #12]
	encoder->tim->CNT = 4096;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800263e:	625a      	str	r2, [r3, #36]	@ 0x24
	encoder->direction_invert = direction_invert;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	741a      	strb	r2, [r3, #16]

	encoder->speed = 0;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
	HCLK = HAL_RCC_GetHCLKFreq();
 800264e:	f000 fe19 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 8002652:	4603      	mov	r3, r0
 8002654:	4a11      	ldr	r2, [pc, #68]	@ (800269c <encoder_init+0x7c>)
 8002656:	6013      	str	r3, [r2, #0]
	SAMPLING_PERIOD = (float)(1+s_tim->Instance->ARR)*(1+s_tim->Instance->PSC)/HCLK;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265e:	3301      	adds	r3, #1
 8002660:	ee07 3a90 	vmov	s15, r3
 8002664:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266e:	3301      	adds	r3, #1
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002678:	ee67 6a27 	vmul.f32	s13, s14, s15
 800267c:	4b07      	ldr	r3, [pc, #28]	@ (800269c <encoder_init+0x7c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	ee07 3a90 	vmov	s15, r3
 8002684:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800268c:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <encoder_init+0x80>)
 800268e:	edc3 7a00 	vstr	s15, [r3]
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000690 	.word	0x20000690
 80026a0:	2000068c 	.word	0x2000068c

080026a4 <Robot_init>:
stepper_t stepper_r;

encoder_t encoder_l;
stepper_t stepper_l;

void Robot_init(){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af02      	add	r7, sp, #8

	encoder_init(&encoder_l, &htim3, &htim7, -1);
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026ae:	4a12      	ldr	r2, [pc, #72]	@ (80026f8 <Robot_init+0x54>)
 80026b0:	4912      	ldr	r1, [pc, #72]	@ (80026fc <Robot_init+0x58>)
 80026b2:	4813      	ldr	r0, [pc, #76]	@ (8002700 <Robot_init+0x5c>)
 80026b4:	f7ff ffb4 	bl	8002620 <encoder_init>
	stepper_init(&stepper_l, &htim5, TIM_CHANNEL_1, &encoder_l, GPIOA, GPIO_PIN_4);
 80026b8:	2310      	movs	r3, #16
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <Robot_init+0x60>)
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002700 <Robot_init+0x5c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	4910      	ldr	r1, [pc, #64]	@ (8002708 <Robot_init+0x64>)
 80026c6:	4811      	ldr	r0, [pc, #68]	@ (800270c <Robot_init+0x68>)
 80026c8:	f000 f8d8 	bl	800287c <stepper_init>

	encoder_init(&encoder_r, &htim4, &htim7, 1);
 80026cc:	2301      	movs	r3, #1
 80026ce:	4a0a      	ldr	r2, [pc, #40]	@ (80026f8 <Robot_init+0x54>)
 80026d0:	490f      	ldr	r1, [pc, #60]	@ (8002710 <Robot_init+0x6c>)
 80026d2:	4810      	ldr	r0, [pc, #64]	@ (8002714 <Robot_init+0x70>)
 80026d4:	f7ff ffa4 	bl	8002620 <encoder_init>
	stepper_init(&stepper_r, &htim2, TIM_CHANNEL_2, &encoder_r, GPIOB, GPIO_PIN_0);
 80026d8:	2301      	movs	r3, #1
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002718 <Robot_init+0x74>)
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <Robot_init+0x70>)
 80026e2:	2204      	movs	r2, #4
 80026e4:	490d      	ldr	r1, [pc, #52]	@ (800271c <Robot_init+0x78>)
 80026e6:	480e      	ldr	r0, [pc, #56]	@ (8002720 <Robot_init+0x7c>)
 80026e8:	f000 f8c8 	bl	800287c <stepper_init>


	MAX72_init();
 80026ec:	f7ff fad6 	bl	8001c9c <MAX72_init>
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200005f4 	.word	0x200005f4
 80026fc:	200004d4 	.word	0x200004d4
 8002700:	200006c8 	.word	0x200006c8
 8002704:	40020000 	.word	0x40020000
 8002708:	20000564 	.word	0x20000564
 800270c:	200006dc 	.word	0x200006dc
 8002710:	2000051c 	.word	0x2000051c
 8002714:	20000694 	.word	0x20000694
 8002718:	40020400 	.word	0x40020400
 800271c:	2000048c 	.word	0x2000048c
 8002720:	200006a8 	.word	0x200006a8
 8002724:	00000000 	.word	0x00000000

08002728 <speed_control>:
#include <stdio.h>
#include <math.h>

float err = 0;

void speed_control(stepper_t *stepper){
 8002728:	b5b0      	push	{r4, r5, r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	update_data(stepper->encoder);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff61 	bl	80025fc <update_data>

	float e = stepper->setpoint_speed - stepper->encoder->speed;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	edd3 7a02 	vldr	s15, [r3, #8]
 8002748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800274c:	edc7 7a05 	vstr	s15, [r7, #20]
	float delta_f = e / ANGLE_STEP ;
 8002750:	6978      	ldr	r0, [r7, #20]
 8002752:	f7fd ff19 	bl	8000588 <__aeabi_f2d>
 8002756:	a33f      	add	r3, pc, #252	@ (adr r3, 8002854 <speed_control+0x12c>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fe f896 	bl	800088c <__aeabi_ddiv>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe f998 	bl	8000a9c <__aeabi_d2f>
 800276c:	4603      	mov	r3, r0
 800276e:	613b      	str	r3, [r7, #16]

	stepper->frequency += delta_f;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	ed93 7a02 	vldr	s14, [r3, #8]
 8002776:	edd7 7a04 	vldr	s15, [r7, #16]
 800277a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	edc3 7a02 	vstr	s15, [r3, #8]

	uint8_t sign = stepper->frequency > 0;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	edd3 7a02 	vldr	s15, [r3, #8]
 800278a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	bfcc      	ite	gt
 8002794:	2301      	movgt	r3, #1
 8002796:	2300      	movle	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(stepper->DIR_PORT, stepper->DIR_PIN, (stepper->encoder->direction_invert > 0 ? sign : !sign));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	4618      	mov	r0, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8b99      	ldrh	r1, [r3, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	dc06      	bgt.n	80027c0 <speed_control+0x98>
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e000      	b.n	80027c2 <speed_control+0x9a>
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f000 fc2c 	bl	8003020 <HAL_GPIO_WritePin>

	err = e;
 80027c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002848 <speed_control+0x120>)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	6013      	str	r3, [r2, #0]

	// period = (1+ARR)*(1+PSC)/HCLK;
	stepper->tim->ARR = fabs(1/stepper->frequency)*HCLK-1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80027d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027dc:	eef0 7ae7 	vabs.f32	s15, s15
 80027e0:	ee17 0a90 	vmov	r0, s15
 80027e4:	f7fd fed0 	bl	8000588 <__aeabi_f2d>
 80027e8:	4604      	mov	r4, r0
 80027ea:	460d      	mov	r5, r1
 80027ec:	4b17      	ldr	r3, [pc, #92]	@ (800284c <speed_control+0x124>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fea7 	bl	8000544 <__aeabi_ui2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4620      	mov	r0, r4
 80027fc:	4629      	mov	r1, r5
 80027fe:	f7fd ff1b 	bl	8000638 <__aeabi_dmul>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <speed_control+0x128>)
 8002810:	f7fd fd5a 	bl	80002c8 <__aeabi_dsub>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691c      	ldr	r4, [r3, #16]
 8002820:	f7fe f91c 	bl	8000a5c <__aeabi_d2uiz>
 8002824:	4603      	mov	r3, r0
 8002826:	62e3      	str	r3, [r4, #44]	@ 0x2c
	*stepper->CCR = (stepper->tim->ARR+1)/2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	0852      	lsrs	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
	stepper->tim->EGR = TIM_EGR_UG;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2201      	movs	r2, #1
 800283e:	615a      	str	r2, [r3, #20]
}
 8002840:	bf00      	nop
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bdb0      	pop	{r4, r5, r7, pc}
 8002848:	200006fc 	.word	0x200006fc
 800284c:	20000690 	.word	0x20000690
 8002850:	3ff00000 	.word	0x3ff00000
 8002854:	e362eeeb 	.word	0xe362eeeb
 8002858:	3f5015bf 	.word	0x3f5015bf

0800285c <set_speed>:

void set_speed(stepper_t *stepper, float speed){
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	ed87 0a00 	vstr	s0, [r7]
	stepper->setpoint_speed = speed;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	605a      	str	r2, [r3, #4]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <stepper_init>:

void stepper_init(stepper_t *stepper, TIM_HandleTypeDef *htim, uint32_t tim_channel,
		encoder_t *encoder, uint32_t DIR_PORT, uint16_t DIR_PIN){
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
	stepper->angle_step = ANGLE_STEP;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4a30      	ldr	r2, [pc, #192]	@ (8002950 <stepper_init+0xd4>)
 800288e:	601a      	str	r2, [r3, #0]
	stepper->tim = htim->Instance;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	611a      	str	r2, [r3, #16]
	stepper->DIR_PORT = DIR_PORT;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	619a      	str	r2, [r3, #24]
	stepper->DIR_PIN = DIR_PIN;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8bba      	ldrh	r2, [r7, #28]
 80028a2:	839a      	strh	r2, [r3, #28]
	switch (tim_channel){
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	d838      	bhi.n	800291c <stepper_init+0xa0>
 80028aa:	a201      	add	r2, pc, #4	@ (adr r2, 80028b0 <stepper_init+0x34>)
 80028ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b0:	080028e5 	.word	0x080028e5
 80028b4:	0800291d 	.word	0x0800291d
 80028b8:	0800291d 	.word	0x0800291d
 80028bc:	0800291d 	.word	0x0800291d
 80028c0:	080028f3 	.word	0x080028f3
 80028c4:	0800291d 	.word	0x0800291d
 80028c8:	0800291d 	.word	0x0800291d
 80028cc:	0800291d 	.word	0x0800291d
 80028d0:	08002901 	.word	0x08002901
 80028d4:	0800291d 	.word	0x0800291d
 80028d8:	0800291d 	.word	0x0800291d
 80028dc:	0800291d 	.word	0x0800291d
 80028e0:	0800290f 	.word	0x0800290f
	case TIM_CHANNEL_1:
		stepper->CCR = &stepper->tim->CCR1;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	615a      	str	r2, [r3, #20]
		break;
 80028f0:	e018      	b.n	8002924 <stepper_init+0xa8>
	case TIM_CHANNEL_2:
		stepper->CCR = &stepper->tim->CCR2;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	615a      	str	r2, [r3, #20]
		break;
 80028fe:	e011      	b.n	8002924 <stepper_init+0xa8>
	case TIM_CHANNEL_3:
		stepper->CCR = &stepper->tim->CCR3;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	615a      	str	r2, [r3, #20]
		break;
 800290c:	e00a      	b.n	8002924 <stepper_init+0xa8>
	case TIM_CHANNEL_4:
		stepper->CCR = &stepper->tim->CCR4;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	615a      	str	r2, [r3, #20]
		break;
 800291a:	e003      	b.n	8002924 <stepper_init+0xa8>
	default:
		stepper->CCR = NULL;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	615a      	str	r2, [r3, #20]
		break;
 8002922:	bf00      	nop
	}

	if (stepper->CCR != NULL)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <stepper_init+0xb8>
		*stepper->CCR = 0; // Disattiva il PWM (duty cycle 0)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

	stepper->encoder = encoder;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	60da      	str	r2, [r3, #12]
	stepper->setpoint_speed = 0;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	605a      	str	r2, [r3, #4]
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	3a80adff 	.word	0x3a80adff

08002954 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002954:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800298c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002958:	f7fe fdbc 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800295c:	480c      	ldr	r0, [pc, #48]	@ (8002990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800295e:	490d      	ldr	r1, [pc, #52]	@ (8002994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002960:	4a0d      	ldr	r2, [pc, #52]	@ (8002998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002964:	e002      	b.n	800296c <LoopCopyDataInit>

08002966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296a:	3304      	adds	r3, #4

0800296c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800296c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800296e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002970:	d3f9      	bcc.n	8002966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002974:	4c0a      	ldr	r4, [pc, #40]	@ (80029a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002978:	e001      	b.n	800297e <LoopFillZerobss>

0800297a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800297c:	3204      	adds	r2, #4

0800297e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800297e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002980:	d3fb      	bcc.n	800297a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002982:	f002 ff25 	bl	80057d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002986:	f7fe fb6d 	bl	8001064 <main>
  bx  lr    
 800298a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 800298c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002994:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 8002998:	08006168 	.word	0x08006168
  ldr r2, =_sbss
 800299c:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 80029a0:	2000084c 	.word	0x2000084c

080029a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029a4:	e7fe      	b.n	80029a4 <ADC_IRQHandler>
	...

080029a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029ac:	4b0e      	ldr	r3, [pc, #56]	@ (80029e8 <HAL_Init+0x40>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a0d      	ldr	r2, [pc, #52]	@ (80029e8 <HAL_Init+0x40>)
 80029b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029b8:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <HAL_Init+0x40>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <HAL_Init+0x40>)
 80029be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029c4:	4b08      	ldr	r3, [pc, #32]	@ (80029e8 <HAL_Init+0x40>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a07      	ldr	r2, [pc, #28]	@ (80029e8 <HAL_Init+0x40>)
 80029ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d0:	2003      	movs	r0, #3
 80029d2:	f000 f94f 	bl	8002c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f000 f808 	bl	80029ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029dc:	f7fe fcd2 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023c00 	.word	0x40023c00

080029ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f4:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <HAL_InitTick+0x54>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <HAL_InitTick+0x58>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	4619      	mov	r1, r3
 80029fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f967 	bl	8002cde <HAL_SYSTICK_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00e      	b.n	8002a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b0f      	cmp	r3, #15
 8002a1e:	d80a      	bhi.n	8002a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a20:	2200      	movs	r2, #0
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a28:	f000 f92f 	bl	8002c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a2c:	4a06      	ldr	r2, [pc, #24]	@ (8002a48 <HAL_InitTick+0x5c>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000000 	.word	0x20000000
 8002a44:	200003c0 	.word	0x200003c0
 8002a48:	200003bc 	.word	0x200003bc

08002a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HAL_IncTick+0x20>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_IncTick+0x24>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <HAL_IncTick+0x24>)
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	200003c0 	.word	0x200003c0
 8002a70:	20000700 	.word	0x20000700

08002a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return uwTick;
 8002a78:	4b03      	ldr	r3, [pc, #12]	@ (8002a88 <HAL_GetTick+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000700 	.word	0x20000700

08002a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a94:	f7ff ffee 	bl	8002a74 <HAL_GetTick>
 8002a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aa4:	d005      	beq.n	8002ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad0 <HAL_Delay+0x44>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ab2:	bf00      	nop
 8002ab4:	f7ff ffde 	bl	8002a74 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d8f7      	bhi.n	8002ab4 <HAL_Delay+0x28>
  {
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	200003c0 	.word	0x200003c0

08002ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002af0:	4013      	ands	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b06:	4a04      	ldr	r2, [pc, #16]	@ (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	60d3      	str	r3, [r2, #12]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b20:	4b04      	ldr	r3, [pc, #16]	@ (8002b34 <__NVIC_GetPriorityGrouping+0x18>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	f003 0307 	and.w	r3, r3, #7
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	db0b      	blt.n	8002b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	f003 021f 	and.w	r2, r3, #31
 8002b50:	4907      	ldr	r1, [pc, #28]	@ (8002b70 <__NVIC_EnableIRQ+0x38>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	2001      	movs	r0, #1
 8002b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000e100 	.word	0xe000e100

08002b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	db0a      	blt.n	8002b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	490c      	ldr	r1, [pc, #48]	@ (8002bc0 <__NVIC_SetPriority+0x4c>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	440b      	add	r3, r1
 8002b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b9c:	e00a      	b.n	8002bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4908      	ldr	r1, [pc, #32]	@ (8002bc4 <__NVIC_SetPriority+0x50>)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	3b04      	subs	r3, #4
 8002bac:	0112      	lsls	r2, r2, #4
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	761a      	strb	r2, [r3, #24]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000e100 	.word	0xe000e100
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	@ 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f1c3 0307 	rsb	r3, r3, #7
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	bf28      	it	cs
 8002be6:	2304      	movcs	r3, #4
 8002be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d902      	bls.n	8002bf8 <NVIC_EncodePriority+0x30>
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3b03      	subs	r3, #3
 8002bf6:	e000      	b.n	8002bfa <NVIC_EncodePriority+0x32>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	43d9      	mvns	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	4313      	orrs	r3, r2
         );
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	@ 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c40:	d301      	bcc.n	8002c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00f      	b.n	8002c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c46:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <SysTick_Config+0x40>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c4e:	210f      	movs	r1, #15
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c54:	f7ff ff8e 	bl	8002b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c58:	4b05      	ldr	r3, [pc, #20]	@ (8002c70 <SysTick_Config+0x40>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5e:	4b04      	ldr	r3, [pc, #16]	@ (8002c70 <SysTick_Config+0x40>)
 8002c60:	2207      	movs	r2, #7
 8002c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	e000e010 	.word	0xe000e010

08002c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ff29 	bl	8002ad4 <__NVIC_SetPriorityGrouping>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c9c:	f7ff ff3e 	bl	8002b1c <__NVIC_GetPriorityGrouping>
 8002ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff ff8e 	bl	8002bc8 <NVIC_EncodePriority>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff5d 	bl	8002b74 <__NVIC_SetPriority>
}
 8002cba:	bf00      	nop
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff31 	bl	8002b38 <__NVIC_EnableIRQ>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ffa2 	bl	8002c30 <SysTick_Config>
 8002cec:	4603      	mov	r3, r0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	@ 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	e165      	b.n	8002fe0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d14:	2201      	movs	r2, #1
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f040 8154 	bne.w	8002fda <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d005      	beq.n	8002d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d130      	bne.n	8002dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d80:	2201      	movs	r2, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 0201 	and.w	r2, r3, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d017      	beq.n	8002de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d123      	bne.n	8002e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	08da      	lsrs	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3208      	adds	r2, #8
 8002dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	08da      	lsrs	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3208      	adds	r2, #8
 8002e36:	69b9      	ldr	r1, [r7, #24]
 8002e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	2203      	movs	r2, #3
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0203 	and.w	r2, r3, #3
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80ae 	beq.w	8002fda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff8 <HAL_GPIO_Init+0x300>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e86:	4a5c      	ldr	r2, [pc, #368]	@ (8002ff8 <HAL_GPIO_Init+0x300>)
 8002e88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e8e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ff8 <HAL_GPIO_Init+0x300>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9a:	4a58      	ldr	r2, [pc, #352]	@ (8002ffc <HAL_GPIO_Init+0x304>)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4f      	ldr	r2, [pc, #316]	@ (8003000 <HAL_GPIO_Init+0x308>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d025      	beq.n	8002f12 <HAL_GPIO_Init+0x21a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4e      	ldr	r2, [pc, #312]	@ (8003004 <HAL_GPIO_Init+0x30c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d01f      	beq.n	8002f0e <HAL_GPIO_Init+0x216>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a4d      	ldr	r2, [pc, #308]	@ (8003008 <HAL_GPIO_Init+0x310>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d019      	beq.n	8002f0a <HAL_GPIO_Init+0x212>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a4c      	ldr	r2, [pc, #304]	@ (800300c <HAL_GPIO_Init+0x314>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_GPIO_Init+0x20e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a4b      	ldr	r2, [pc, #300]	@ (8003010 <HAL_GPIO_Init+0x318>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00d      	beq.n	8002f02 <HAL_GPIO_Init+0x20a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8003014 <HAL_GPIO_Init+0x31c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d007      	beq.n	8002efe <HAL_GPIO_Init+0x206>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a49      	ldr	r2, [pc, #292]	@ (8003018 <HAL_GPIO_Init+0x320>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d101      	bne.n	8002efa <HAL_GPIO_Init+0x202>
 8002ef6:	2306      	movs	r3, #6
 8002ef8:	e00c      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002efa:	2307      	movs	r3, #7
 8002efc:	e00a      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002efe:	2305      	movs	r3, #5
 8002f00:	e008      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002f02:	2304      	movs	r3, #4
 8002f04:	e006      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002f06:	2303      	movs	r3, #3
 8002f08:	e004      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e002      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_GPIO_Init+0x21c>
 8002f12:	2300      	movs	r3, #0
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	f002 0203 	and.w	r2, r2, #3
 8002f1a:	0092      	lsls	r2, r2, #2
 8002f1c:	4093      	lsls	r3, r2
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f24:	4935      	ldr	r1, [pc, #212]	@ (8002ffc <HAL_GPIO_Init+0x304>)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f32:	4b3a      	ldr	r3, [pc, #232]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f56:	4a31      	ldr	r2, [pc, #196]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f80:	4a26      	ldr	r2, [pc, #152]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f86:	4b25      	ldr	r3, [pc, #148]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002faa:	4a1c      	ldr	r2, [pc, #112]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd4:	4a11      	ldr	r2, [pc, #68]	@ (800301c <HAL_GPIO_Init+0x324>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b0f      	cmp	r3, #15
 8002fe4:	f67f ae96 	bls.w	8002d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3724      	adds	r7, #36	@ 0x24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40013800 	.word	0x40013800
 8003000:	40020000 	.word	0x40020000
 8003004:	40020400 	.word	0x40020400
 8003008:	40020800 	.word	0x40020800
 800300c:	40020c00 	.word	0x40020c00
 8003010:	40021000 	.word	0x40021000
 8003014:	40021400 	.word	0x40021400
 8003018:	40021800 	.word	0x40021800
 800301c:	40013c00 	.word	0x40013c00

08003020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
 800302c:	4613      	mov	r3, r2
 800302e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003030:	787b      	ldrb	r3, [r7, #1]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003036:	887a      	ldrh	r2, [r7, #2]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800303c:	e003      	b.n	8003046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	041a      	lsls	r2, r3, #16
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	619a      	str	r2, [r3, #24]
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003052:	b480      	push	{r7}
 8003054:	b085      	sub	sp, #20
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003064:	887a      	ldrh	r2, [r7, #2]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4013      	ands	r3, r2
 800306a:	041a      	lsls	r2, r3, #16
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	43d9      	mvns	r1, r3
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	400b      	ands	r3, r1
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	619a      	str	r2, [r3, #24]
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003092:	4b08      	ldr	r3, [pc, #32]	@ (80030b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d006      	beq.n	80030ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800309e:	4a05      	ldr	r2, [pc, #20]	@ (80030b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe f8b8 	bl	800121c <HAL_GPIO_EXTI_Callback>
  }
}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40013c00 	.word	0x40013c00

080030b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0cc      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b68      	ldr	r3, [pc, #416]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d90c      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b65      	ldr	r3, [pc, #404]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b63      	ldr	r3, [pc, #396]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0b8      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800310c:	4b59      	ldr	r3, [pc, #356]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a58      	ldr	r2, [pc, #352]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003124:	4b53      	ldr	r3, [pc, #332]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a52      	ldr	r2, [pc, #328]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800312e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	4b50      	ldr	r3, [pc, #320]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	494d      	ldr	r1, [pc, #308]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d044      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b47      	ldr	r3, [pc, #284]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d119      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e07f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d003      	beq.n	8003176 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003172:	2b03      	cmp	r3, #3
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b3f      	ldr	r3, [pc, #252]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e06f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b3b      	ldr	r3, [pc, #236]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e067      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b37      	ldr	r3, [pc, #220]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4934      	ldr	r1, [pc, #208]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7ff fc64 	bl	8002a74 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7ff fc60 	bl	8002a74 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e04f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b25      	ldr	r3, [pc, #148]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d20c      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b22      	ldr	r3, [pc, #136]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b20      	ldr	r3, [pc, #128]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e032      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800320c:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4916      	ldr	r1, [pc, #88]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800322a:	4b12      	ldr	r3, [pc, #72]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	490e      	ldr	r1, [pc, #56]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800323e:	f000 f855 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8003242:	4602      	mov	r2, r0
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	490a      	ldr	r1, [pc, #40]	@ (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	5ccb      	ldrb	r3, [r1, r3]
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	4a09      	ldr	r2, [pc, #36]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800325a:	4b09      	ldr	r3, [pc, #36]	@ (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fbc4 	bl	80029ec <HAL_InitTick>

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023c00 	.word	0x40023c00
 8003274:	40023800 	.word	0x40023800
 8003278:	08006100 	.word	0x08006100
 800327c:	20000000 	.word	0x20000000
 8003280:	200003bc 	.word	0x200003bc

08003284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003288:	4b03      	ldr	r3, [pc, #12]	@ (8003298 <HAL_RCC_GetHCLKFreq+0x14>)
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000000 	.word	0x20000000

0800329c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032a0:	f7ff fff0 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b05      	ldr	r3, [pc, #20]	@ (80032bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0a9b      	lsrs	r3, r3, #10
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4903      	ldr	r1, [pc, #12]	@ (80032c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	08006110 	.word	0x08006110

080032c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032c8:	f7ff ffdc 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0b5b      	lsrs	r3, r3, #13
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4903      	ldr	r1, [pc, #12]	@ (80032e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	08006110 	.word	0x08006110

080032ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f0:	b0ae      	sub	sp, #184	@ 0xb8
 80032f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003312:	4bcb      	ldr	r3, [pc, #812]	@ (8003640 <HAL_RCC_GetSysClockFreq+0x354>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b0c      	cmp	r3, #12
 800331c:	f200 8206 	bhi.w	800372c <HAL_RCC_GetSysClockFreq+0x440>
 8003320:	a201      	add	r2, pc, #4	@ (adr r2, 8003328 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003326:	bf00      	nop
 8003328:	0800335d 	.word	0x0800335d
 800332c:	0800372d 	.word	0x0800372d
 8003330:	0800372d 	.word	0x0800372d
 8003334:	0800372d 	.word	0x0800372d
 8003338:	08003365 	.word	0x08003365
 800333c:	0800372d 	.word	0x0800372d
 8003340:	0800372d 	.word	0x0800372d
 8003344:	0800372d 	.word	0x0800372d
 8003348:	0800336d 	.word	0x0800336d
 800334c:	0800372d 	.word	0x0800372d
 8003350:	0800372d 	.word	0x0800372d
 8003354:	0800372d 	.word	0x0800372d
 8003358:	0800355d 	.word	0x0800355d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800335c:	4bb9      	ldr	r3, [pc, #740]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x358>)
 800335e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003362:	e1e7      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003364:	4bb8      	ldr	r3, [pc, #736]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003366:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800336a:	e1e3      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800336c:	4bb4      	ldr	r3, [pc, #720]	@ (8003640 <HAL_RCC_GetSysClockFreq+0x354>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003374:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003378:	4bb1      	ldr	r3, [pc, #708]	@ (8003640 <HAL_RCC_GetSysClockFreq+0x354>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d071      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003384:	4bae      	ldr	r3, [pc, #696]	@ (8003640 <HAL_RCC_GetSysClockFreq+0x354>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	099b      	lsrs	r3, r3, #6
 800338a:	2200      	movs	r2, #0
 800338c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003390:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003394:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033aa:	4622      	mov	r2, r4
 80033ac:	462b      	mov	r3, r5
 80033ae:	f04f 0000 	mov.w	r0, #0
 80033b2:	f04f 0100 	mov.w	r1, #0
 80033b6:	0159      	lsls	r1, r3, #5
 80033b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033bc:	0150      	lsls	r0, r2, #5
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4621      	mov	r1, r4
 80033c4:	1a51      	subs	r1, r2, r1
 80033c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80033c8:	4629      	mov	r1, r5
 80033ca:	eb63 0301 	sbc.w	r3, r3, r1
 80033ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80033dc:	4649      	mov	r1, r9
 80033de:	018b      	lsls	r3, r1, #6
 80033e0:	4641      	mov	r1, r8
 80033e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033e6:	4641      	mov	r1, r8
 80033e8:	018a      	lsls	r2, r1, #6
 80033ea:	4641      	mov	r1, r8
 80033ec:	1a51      	subs	r1, r2, r1
 80033ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033f0:	4649      	mov	r1, r9
 80033f2:	eb63 0301 	sbc.w	r3, r3, r1
 80033f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003404:	4649      	mov	r1, r9
 8003406:	00cb      	lsls	r3, r1, #3
 8003408:	4641      	mov	r1, r8
 800340a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800340e:	4641      	mov	r1, r8
 8003410:	00ca      	lsls	r2, r1, #3
 8003412:	4610      	mov	r0, r2
 8003414:	4619      	mov	r1, r3
 8003416:	4603      	mov	r3, r0
 8003418:	4622      	mov	r2, r4
 800341a:	189b      	adds	r3, r3, r2
 800341c:	633b      	str	r3, [r7, #48]	@ 0x30
 800341e:	462b      	mov	r3, r5
 8003420:	460a      	mov	r2, r1
 8003422:	eb42 0303 	adc.w	r3, r2, r3
 8003426:	637b      	str	r3, [r7, #52]	@ 0x34
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003434:	4629      	mov	r1, r5
 8003436:	024b      	lsls	r3, r1, #9
 8003438:	4621      	mov	r1, r4
 800343a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800343e:	4621      	mov	r1, r4
 8003440:	024a      	lsls	r2, r1, #9
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
 8003446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800344a:	2200      	movs	r2, #0
 800344c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003450:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003454:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003458:	f7fd fb70 	bl	8000b3c <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4613      	mov	r3, r2
 8003462:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003466:	e067      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003468:	4b75      	ldr	r3, [pc, #468]	@ (8003640 <HAL_RCC_GetSysClockFreq+0x354>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	2200      	movs	r2, #0
 8003470:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003474:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003478:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800347c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003480:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003482:	2300      	movs	r3, #0
 8003484:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003486:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800348a:	4622      	mov	r2, r4
 800348c:	462b      	mov	r3, r5
 800348e:	f04f 0000 	mov.w	r0, #0
 8003492:	f04f 0100 	mov.w	r1, #0
 8003496:	0159      	lsls	r1, r3, #5
 8003498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800349c:	0150      	lsls	r0, r2, #5
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4621      	mov	r1, r4
 80034a4:	1a51      	subs	r1, r2, r1
 80034a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80034a8:	4629      	mov	r1, r5
 80034aa:	eb63 0301 	sbc.w	r3, r3, r1
 80034ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80034bc:	4649      	mov	r1, r9
 80034be:	018b      	lsls	r3, r1, #6
 80034c0:	4641      	mov	r1, r8
 80034c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034c6:	4641      	mov	r1, r8
 80034c8:	018a      	lsls	r2, r1, #6
 80034ca:	4641      	mov	r1, r8
 80034cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80034d0:	4649      	mov	r1, r9
 80034d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ea:	4692      	mov	sl, r2
 80034ec:	469b      	mov	fp, r3
 80034ee:	4623      	mov	r3, r4
 80034f0:	eb1a 0303 	adds.w	r3, sl, r3
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	462b      	mov	r3, r5
 80034f8:	eb4b 0303 	adc.w	r3, fp, r3
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800350a:	4629      	mov	r1, r5
 800350c:	028b      	lsls	r3, r1, #10
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003514:	4621      	mov	r1, r4
 8003516:	028a      	lsls	r2, r1, #10
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003520:	2200      	movs	r2, #0
 8003522:	673b      	str	r3, [r7, #112]	@ 0x70
 8003524:	677a      	str	r2, [r7, #116]	@ 0x74
 8003526:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800352a:	f7fd fb07 	bl	8000b3c <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4613      	mov	r3, r2
 8003534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003538:	4b41      	ldr	r3, [pc, #260]	@ (8003640 <HAL_RCC_GetSysClockFreq+0x354>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	0c1b      	lsrs	r3, r3, #16
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	3301      	adds	r3, #1
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800354a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800354e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003552:	fbb2 f3f3 	udiv	r3, r2, r3
 8003556:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800355a:	e0eb      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800355c:	4b38      	ldr	r3, [pc, #224]	@ (8003640 <HAL_RCC_GetSysClockFreq+0x354>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003564:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003568:	4b35      	ldr	r3, [pc, #212]	@ (8003640 <HAL_RCC_GetSysClockFreq+0x354>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d06b      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003574:	4b32      	ldr	r3, [pc, #200]	@ (8003640 <HAL_RCC_GetSysClockFreq+0x354>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	099b      	lsrs	r3, r3, #6
 800357a:	2200      	movs	r2, #0
 800357c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800357e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003580:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003586:	663b      	str	r3, [r7, #96]	@ 0x60
 8003588:	2300      	movs	r3, #0
 800358a:	667b      	str	r3, [r7, #100]	@ 0x64
 800358c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003590:	4622      	mov	r2, r4
 8003592:	462b      	mov	r3, r5
 8003594:	f04f 0000 	mov.w	r0, #0
 8003598:	f04f 0100 	mov.w	r1, #0
 800359c:	0159      	lsls	r1, r3, #5
 800359e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035a2:	0150      	lsls	r0, r2, #5
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4621      	mov	r1, r4
 80035aa:	1a51      	subs	r1, r2, r1
 80035ac:	61b9      	str	r1, [r7, #24]
 80035ae:	4629      	mov	r1, r5
 80035b0:	eb63 0301 	sbc.w	r3, r3, r1
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80035c2:	4659      	mov	r1, fp
 80035c4:	018b      	lsls	r3, r1, #6
 80035c6:	4651      	mov	r1, sl
 80035c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035cc:	4651      	mov	r1, sl
 80035ce:	018a      	lsls	r2, r1, #6
 80035d0:	4651      	mov	r1, sl
 80035d2:	ebb2 0801 	subs.w	r8, r2, r1
 80035d6:	4659      	mov	r1, fp
 80035d8:	eb63 0901 	sbc.w	r9, r3, r1
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035f0:	4690      	mov	r8, r2
 80035f2:	4699      	mov	r9, r3
 80035f4:	4623      	mov	r3, r4
 80035f6:	eb18 0303 	adds.w	r3, r8, r3
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	462b      	mov	r3, r5
 80035fe:	eb49 0303 	adc.w	r3, r9, r3
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003610:	4629      	mov	r1, r5
 8003612:	024b      	lsls	r3, r1, #9
 8003614:	4621      	mov	r1, r4
 8003616:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800361a:	4621      	mov	r1, r4
 800361c:	024a      	lsls	r2, r1, #9
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003626:	2200      	movs	r2, #0
 8003628:	65bb      	str	r3, [r7, #88]	@ 0x58
 800362a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800362c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003630:	f7fd fa84 	bl	8000b3c <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4613      	mov	r3, r2
 800363a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800363e:	e065      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x420>
 8003640:	40023800 	.word	0x40023800
 8003644:	00f42400 	.word	0x00f42400
 8003648:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364c:	4b3d      	ldr	r3, [pc, #244]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x458>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	2200      	movs	r2, #0
 8003654:	4618      	mov	r0, r3
 8003656:	4611      	mov	r1, r2
 8003658:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800365c:	653b      	str	r3, [r7, #80]	@ 0x50
 800365e:	2300      	movs	r3, #0
 8003660:	657b      	str	r3, [r7, #84]	@ 0x54
 8003662:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003666:	4642      	mov	r2, r8
 8003668:	464b      	mov	r3, r9
 800366a:	f04f 0000 	mov.w	r0, #0
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	0159      	lsls	r1, r3, #5
 8003674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003678:	0150      	lsls	r0, r2, #5
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4641      	mov	r1, r8
 8003680:	1a51      	subs	r1, r2, r1
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	4649      	mov	r1, r9
 8003686:	eb63 0301 	sbc.w	r3, r3, r1
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003698:	4659      	mov	r1, fp
 800369a:	018b      	lsls	r3, r1, #6
 800369c:	4651      	mov	r1, sl
 800369e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036a2:	4651      	mov	r1, sl
 80036a4:	018a      	lsls	r2, r1, #6
 80036a6:	4651      	mov	r1, sl
 80036a8:	1a54      	subs	r4, r2, r1
 80036aa:	4659      	mov	r1, fp
 80036ac:	eb63 0501 	sbc.w	r5, r3, r1
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	00eb      	lsls	r3, r5, #3
 80036ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036be:	00e2      	lsls	r2, r4, #3
 80036c0:	4614      	mov	r4, r2
 80036c2:	461d      	mov	r5, r3
 80036c4:	4643      	mov	r3, r8
 80036c6:	18e3      	adds	r3, r4, r3
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	464b      	mov	r3, r9
 80036cc:	eb45 0303 	adc.w	r3, r5, r3
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036de:	4629      	mov	r1, r5
 80036e0:	028b      	lsls	r3, r1, #10
 80036e2:	4621      	mov	r1, r4
 80036e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036e8:	4621      	mov	r1, r4
 80036ea:	028a      	lsls	r2, r1, #10
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036f4:	2200      	movs	r2, #0
 80036f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036f8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80036fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036fe:	f7fd fa1d 	bl	8000b3c <__aeabi_uldivmod>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4613      	mov	r3, r2
 8003708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800370c:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <HAL_RCC_GetSysClockFreq+0x458>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	0f1b      	lsrs	r3, r3, #28
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800371a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800371e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800372a:	e003      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800372c:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x45c>)
 800372e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003732:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003734:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003738:	4618      	mov	r0, r3
 800373a:	37b8      	adds	r7, #184	@ 0xb8
 800373c:	46bd      	mov	sp, r7
 800373e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	00f42400 	.word	0x00f42400

0800374c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e28d      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8083 	beq.w	8003872 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800376c:	4b94      	ldr	r3, [pc, #592]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b04      	cmp	r3, #4
 8003776:	d019      	beq.n	80037ac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003778:	4b91      	ldr	r3, [pc, #580]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003780:	2b08      	cmp	r3, #8
 8003782:	d106      	bne.n	8003792 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003784:	4b8e      	ldr	r3, [pc, #568]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800378c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003790:	d00c      	beq.n	80037ac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003792:	4b8b      	ldr	r3, [pc, #556]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d112      	bne.n	80037c4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379e:	4b88      	ldr	r3, [pc, #544]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037aa:	d10b      	bne.n	80037c4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	4b84      	ldr	r3, [pc, #528]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d05b      	beq.n	8003870 <HAL_RCC_OscConfig+0x124>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d157      	bne.n	8003870 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e25a      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037cc:	d106      	bne.n	80037dc <HAL_RCC_OscConfig+0x90>
 80037ce:	4b7c      	ldr	r3, [pc, #496]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7b      	ldr	r2, [pc, #492]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e01d      	b.n	8003818 <HAL_RCC_OscConfig+0xcc>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0xb4>
 80037e6:	4b76      	ldr	r3, [pc, #472]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a75      	ldr	r2, [pc, #468]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b73      	ldr	r3, [pc, #460]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a72      	ldr	r2, [pc, #456]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0xcc>
 8003800:	4b6f      	ldr	r3, [pc, #444]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a6e      	ldr	r2, [pc, #440]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b6c      	ldr	r3, [pc, #432]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a6b      	ldr	r2, [pc, #428]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7ff f928 	bl	8002a74 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003828:	f7ff f924 	bl	8002a74 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	@ 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e21f      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b61      	ldr	r3, [pc, #388]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0xdc>
 8003846:	e014      	b.n	8003872 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7ff f914 	bl	8002a74 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003850:	f7ff f910 	bl	8002a74 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	@ 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e20b      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	4b57      	ldr	r3, [pc, #348]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x104>
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d06f      	beq.n	800395e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800387e:	4b50      	ldr	r3, [pc, #320]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b00      	cmp	r3, #0
 8003888:	d017      	beq.n	80038ba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800388a:	4b4d      	ldr	r3, [pc, #308]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003892:	2b08      	cmp	r3, #8
 8003894:	d105      	bne.n	80038a2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003896:	4b4a      	ldr	r3, [pc, #296]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a2:	4b47      	ldr	r3, [pc, #284]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	d11c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ae:	4b44      	ldr	r3, [pc, #272]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ba:	4b41      	ldr	r3, [pc, #260]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_RCC_OscConfig+0x186>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e1d3      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d2:	4b3b      	ldr	r3, [pc, #236]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4937      	ldr	r1, [pc, #220]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	e03a      	b.n	800395e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f0:	4b34      	ldr	r3, [pc, #208]	@ (80039c4 <HAL_RCC_OscConfig+0x278>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7ff f8bd 	bl	8002a74 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fe:	f7ff f8b9 	bl	8002a74 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e1b4      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	4b2b      	ldr	r3, [pc, #172]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391c:	4b28      	ldr	r3, [pc, #160]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4925      	ldr	r1, [pc, #148]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]
 8003930:	e015      	b.n	800395e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003932:	4b24      	ldr	r3, [pc, #144]	@ (80039c4 <HAL_RCC_OscConfig+0x278>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7ff f89c 	bl	8002a74 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003940:	f7ff f898 	bl	8002a74 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e193      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	4b1b      	ldr	r3, [pc, #108]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d036      	beq.n	80039d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003972:	4b15      	ldr	r3, [pc, #84]	@ (80039c8 <HAL_RCC_OscConfig+0x27c>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7ff f87c 	bl	8002a74 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003980:	f7ff f878 	bl	8002a74 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e173      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <HAL_RCC_OscConfig+0x274>)
 8003994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x234>
 800399e:	e01b      	b.n	80039d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a0:	4b09      	ldr	r3, [pc, #36]	@ (80039c8 <HAL_RCC_OscConfig+0x27c>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a6:	f7ff f865 	bl	8002a74 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	e00e      	b.n	80039cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ae:	f7ff f861 	bl	8002a74 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d907      	bls.n	80039cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e15c      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
 80039c0:	40023800 	.word	0x40023800
 80039c4:	42470000 	.word	0x42470000
 80039c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039cc:	4b8a      	ldr	r3, [pc, #552]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 80039ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1ea      	bne.n	80039ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8097 	beq.w	8003b14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e6:	2300      	movs	r3, #0
 80039e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ea:	4b83      	ldr	r3, [pc, #524]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10f      	bne.n	8003a16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	4b7f      	ldr	r3, [pc, #508]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	4a7e      	ldr	r2, [pc, #504]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a06:	4b7c      	ldr	r3, [pc, #496]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	4b79      	ldr	r3, [pc, #484]	@ (8003bfc <HAL_RCC_OscConfig+0x4b0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d118      	bne.n	8003a54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a22:	4b76      	ldr	r3, [pc, #472]	@ (8003bfc <HAL_RCC_OscConfig+0x4b0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a75      	ldr	r2, [pc, #468]	@ (8003bfc <HAL_RCC_OscConfig+0x4b0>)
 8003a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2e:	f7ff f821 	bl	8002a74 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a36:	f7ff f81d 	bl	8002a74 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e118      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	4b6c      	ldr	r3, [pc, #432]	@ (8003bfc <HAL_RCC_OscConfig+0x4b0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCC_OscConfig+0x31e>
 8003a5c:	4b66      	ldr	r3, [pc, #408]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a60:	4a65      	ldr	r2, [pc, #404]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a68:	e01c      	b.n	8003aa4 <HAL_RCC_OscConfig+0x358>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x340>
 8003a72:	4b61      	ldr	r3, [pc, #388]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a76:	4a60      	ldr	r2, [pc, #384]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a7e:	4b5e      	ldr	r3, [pc, #376]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a82:	4a5d      	ldr	r2, [pc, #372]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a8a:	e00b      	b.n	8003aa4 <HAL_RCC_OscConfig+0x358>
 8003a8c:	4b5a      	ldr	r3, [pc, #360]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a90:	4a59      	ldr	r2, [pc, #356]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a98:	4b57      	ldr	r3, [pc, #348]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9c:	4a56      	ldr	r2, [pc, #344]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003a9e:	f023 0304 	bic.w	r3, r3, #4
 8003aa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fe ffe2 	bl	8002a74 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab4:	f7fe ffde 	bl	8002a74 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e0d7      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aca:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0ee      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x368>
 8003ad6:	e014      	b.n	8003b02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad8:	f7fe ffcc 	bl	8002a74 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fe ffc8 	bl	8002a74 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e0c1      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af6:	4b40      	ldr	r3, [pc, #256]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1ee      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b08:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80ad 	beq.w	8003c78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b1e:	4b36      	ldr	r3, [pc, #216]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d060      	beq.n	8003bec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d145      	bne.n	8003bbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b33      	ldr	r3, [pc, #204]	@ (8003c00 <HAL_RCC_OscConfig+0x4b4>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fe ff9c 	bl	8002a74 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fe ff98 	bl	8002a74 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e093      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	4b29      	ldr	r3, [pc, #164]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	019b      	lsls	r3, r3, #6
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	3b01      	subs	r3, #1
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b88:	071b      	lsls	r3, r3, #28
 8003b8a:	491b      	ldr	r1, [pc, #108]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b90:	4b1b      	ldr	r3, [pc, #108]	@ (8003c00 <HAL_RCC_OscConfig+0x4b4>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b96:	f7fe ff6d 	bl	8002a74 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9e:	f7fe ff69 	bl	8002a74 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e064      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb0:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x452>
 8003bbc:	e05c      	b.n	8003c78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b10      	ldr	r3, [pc, #64]	@ (8003c00 <HAL_RCC_OscConfig+0x4b4>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fe ff56 	bl	8002a74 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe ff52 	bl	8002a74 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e04d      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x480>
 8003bea:	e045      	b.n	8003c78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e040      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c04:	4b1f      	ldr	r3, [pc, #124]	@ (8003c84 <HAL_RCC_OscConfig+0x538>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d030      	beq.n	8003c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d129      	bne.n	8003c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d122      	bne.n	8003c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c34:	4013      	ands	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d119      	bne.n	8003c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d10f      	bne.n	8003c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800

08003c88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e07b      	b.n	8003d92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d108      	bne.n	8003cb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003caa:	d009      	beq.n	8003cc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	61da      	str	r2, [r3, #28]
 8003cb2:	e005      	b.n	8003cc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fd faea 	bl	80012b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d44:	ea42 0103 	orr.w	r1, r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	f003 0104 	and.w	r1, r3, #4
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	f003 0210 	and.w	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b088      	sub	sp, #32
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	603b      	str	r3, [r7, #0]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003daa:	f7fe fe63 	bl	8002a74 <HAL_GetTick>
 8003dae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003db0:	88fb      	ldrh	r3, [r7, #6]
 8003db2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d001      	beq.n	8003dc4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e12a      	b.n	800401a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_SPI_Transmit+0x36>
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e122      	b.n	800401a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_SPI_Transmit+0x48>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e11b      	b.n	800401a <HAL_SPI_Transmit+0x280>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2203      	movs	r2, #3
 8003dee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	88fa      	ldrh	r2, [r7, #6]
 8003e02:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e30:	d10f      	bne.n	8003e52 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5c:	2b40      	cmp	r3, #64	@ 0x40
 8003e5e:	d007      	beq.n	8003e70 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e78:	d152      	bne.n	8003f20 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_SPI_Transmit+0xee>
 8003e82:	8b7b      	ldrh	r3, [r7, #26]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d145      	bne.n	8003f14 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8c:	881a      	ldrh	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e98:	1c9a      	adds	r2, r3, #2
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003eac:	e032      	b.n	8003f14 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d112      	bne.n	8003ee2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec0:	881a      	ldrh	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	1c9a      	adds	r2, r3, #2
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ee0:	e018      	b.n	8003f14 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ee2:	f7fe fdc7 	bl	8002a74 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d803      	bhi.n	8003efa <HAL_SPI_Transmit+0x160>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ef8:	d102      	bne.n	8003f00 <HAL_SPI_Transmit+0x166>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e082      	b.n	800401a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1c7      	bne.n	8003eae <HAL_SPI_Transmit+0x114>
 8003f1e:	e053      	b.n	8003fc8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_SPI_Transmit+0x194>
 8003f28:	8b7b      	ldrh	r3, [r7, #26]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d147      	bne.n	8003fbe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	7812      	ldrb	r2, [r2, #0]
 8003f3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f54:	e033      	b.n	8003fbe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d113      	bne.n	8003f8c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	7812      	ldrb	r2, [r2, #0]
 8003f70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f8a:	e018      	b.n	8003fbe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f8c:	f7fe fd72 	bl	8002a74 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d803      	bhi.n	8003fa4 <HAL_SPI_Transmit+0x20a>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fa2:	d102      	bne.n	8003faa <HAL_SPI_Transmit+0x210>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e02d      	b.n	800401a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1c6      	bne.n	8003f56 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	6839      	ldr	r1, [r7, #0]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f8b1 	bl	8004134 <SPI_EndRxTxTransaction>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004018:	2300      	movs	r3, #0
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004034:	f7fe fd1e 	bl	8002a74 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	4413      	add	r3, r2
 8004042:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004044:	f7fe fd16 	bl	8002a74 <HAL_GetTick>
 8004048:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800404a:	4b39      	ldr	r3, [pc, #228]	@ (8004130 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	015b      	lsls	r3, r3, #5
 8004050:	0d1b      	lsrs	r3, r3, #20
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	fb02 f303 	mul.w	r3, r2, r3
 8004058:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800405a:	e055      	b.n	8004108 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004062:	d051      	beq.n	8004108 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004064:	f7fe fd06 	bl	8002a74 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	429a      	cmp	r2, r3
 8004072:	d902      	bls.n	800407a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d13d      	bne.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004088:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004092:	d111      	bne.n	80040b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800409c:	d004      	beq.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a6:	d107      	bne.n	80040b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c0:	d10f      	bne.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e018      	b.n	8004128 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d102      	bne.n	8004102 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	e002      	b.n	8004108 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	3b01      	subs	r3, #1
 8004106:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	4013      	ands	r3, r2
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	429a      	cmp	r2, r3
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	429a      	cmp	r2, r3
 8004124:	d19a      	bne.n	800405c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000000 	.word	0x20000000

08004134 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2201      	movs	r2, #1
 8004148:	2102      	movs	r1, #2
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff ff6a 	bl	8004024 <SPI_WaitFlagStateUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e032      	b.n	80041cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004166:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <SPI_EndRxTxTransaction+0xa0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1b      	ldr	r2, [pc, #108]	@ (80041d8 <SPI_EndRxTxTransaction+0xa4>)
 800416c:	fba2 2303 	umull	r2, r3, r2, r3
 8004170:	0d5b      	lsrs	r3, r3, #21
 8004172:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004184:	d112      	bne.n	80041ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2200      	movs	r2, #0
 800418e:	2180      	movs	r1, #128	@ 0x80
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7ff ff47 	bl	8004024 <SPI_WaitFlagStateUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d016      	beq.n	80041ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a0:	f043 0220 	orr.w	r2, r3, #32
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e00f      	b.n	80041cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c2:	2b80      	cmp	r3, #128	@ 0x80
 80041c4:	d0f2      	beq.n	80041ac <SPI_EndRxTxTransaction+0x78>
 80041c6:	e000      	b.n	80041ca <SPI_EndRxTxTransaction+0x96>
        break;
 80041c8:	bf00      	nop
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20000000 	.word	0x20000000
 80041d8:	165e9f81 	.word	0x165e9f81

080041dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e041      	b.n	8004272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fd fbf2 	bl	80019ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f000 fcc4 	bl	8004ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d001      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e04e      	b.n	8004332 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a23      	ldr	r2, [pc, #140]	@ (8004340 <HAL_TIM_Base_Start_IT+0xc4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d022      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042be:	d01d      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004344 <HAL_TIM_Base_Start_IT+0xc8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d018      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004348 <HAL_TIM_Base_Start_IT+0xcc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d013      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1c      	ldr	r2, [pc, #112]	@ (800434c <HAL_TIM_Base_Start_IT+0xd0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00e      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004350 <HAL_TIM_Base_Start_IT+0xd4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d009      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a19      	ldr	r2, [pc, #100]	@ (8004354 <HAL_TIM_Base_Start_IT+0xd8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x80>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a18      	ldr	r2, [pc, #96]	@ (8004358 <HAL_TIM_Base_Start_IT+0xdc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d111      	bne.n	8004320 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b06      	cmp	r3, #6
 800430c:	d010      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431e:	e007      	b.n	8004330 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40010000 	.word	0x40010000
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40010400 	.word	0x40010400
 8004354:	40014000 	.word	0x40014000
 8004358:	40001800 	.word	0x40001800

0800435c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e041      	b.n	80043f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fd fa7e 	bl	8001884 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3304      	adds	r3, #4
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f000 fc04 	bl	8004ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <HAL_TIM_PWM_Start+0x24>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e022      	b.n	8004466 <HAL_TIM_PWM_Start+0x6a>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b04      	cmp	r3, #4
 8004424:	d109      	bne.n	800443a <HAL_TIM_PWM_Start+0x3e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	bf14      	ite	ne
 8004432:	2301      	movne	r3, #1
 8004434:	2300      	moveq	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	e015      	b.n	8004466 <HAL_TIM_PWM_Start+0x6a>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d109      	bne.n	8004454 <HAL_TIM_PWM_Start+0x58>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e008      	b.n	8004466 <HAL_TIM_PWM_Start+0x6a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	bf14      	ite	ne
 8004460:	2301      	movne	r3, #1
 8004462:	2300      	moveq	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e07c      	b.n	8004568 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <HAL_TIM_PWM_Start+0x82>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800447c:	e013      	b.n	80044a6 <HAL_TIM_PWM_Start+0xaa>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b04      	cmp	r3, #4
 8004482:	d104      	bne.n	800448e <HAL_TIM_PWM_Start+0x92>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800448c:	e00b      	b.n	80044a6 <HAL_TIM_PWM_Start+0xaa>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d104      	bne.n	800449e <HAL_TIM_PWM_Start+0xa2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800449c:	e003      	b.n	80044a6 <HAL_TIM_PWM_Start+0xaa>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2202      	movs	r2, #2
 80044a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2201      	movs	r2, #1
 80044ac:	6839      	ldr	r1, [r7, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fdd0 	bl	8005054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004570 <HAL_TIM_PWM_Start+0x174>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_TIM_PWM_Start+0xcc>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004574 <HAL_TIM_PWM_Start+0x178>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d101      	bne.n	80044cc <HAL_TIM_PWM_Start+0xd0>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <HAL_TIM_PWM_Start+0xd2>
 80044cc:	2300      	movs	r3, #0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a22      	ldr	r2, [pc, #136]	@ (8004570 <HAL_TIM_PWM_Start+0x174>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d022      	beq.n	8004532 <HAL_TIM_PWM_Start+0x136>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f4:	d01d      	beq.n	8004532 <HAL_TIM_PWM_Start+0x136>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004578 <HAL_TIM_PWM_Start+0x17c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d018      	beq.n	8004532 <HAL_TIM_PWM_Start+0x136>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1d      	ldr	r2, [pc, #116]	@ (800457c <HAL_TIM_PWM_Start+0x180>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <HAL_TIM_PWM_Start+0x136>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1c      	ldr	r2, [pc, #112]	@ (8004580 <HAL_TIM_PWM_Start+0x184>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00e      	beq.n	8004532 <HAL_TIM_PWM_Start+0x136>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a16      	ldr	r2, [pc, #88]	@ (8004574 <HAL_TIM_PWM_Start+0x178>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d009      	beq.n	8004532 <HAL_TIM_PWM_Start+0x136>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a18      	ldr	r2, [pc, #96]	@ (8004584 <HAL_TIM_PWM_Start+0x188>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_TIM_PWM_Start+0x136>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a16      	ldr	r2, [pc, #88]	@ (8004588 <HAL_TIM_PWM_Start+0x18c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d111      	bne.n	8004556 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b06      	cmp	r3, #6
 8004542:	d010      	beq.n	8004566 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004554:	e007      	b.n	8004566 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40010000 	.word	0x40010000
 8004574:	40010400 	.word	0x40010400
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800
 8004580:	40000c00 	.word	0x40000c00
 8004584:	40014000 	.word	0x40014000
 8004588:	40001800 	.word	0x40001800

0800458c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e097      	b.n	80046d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7fd f99b 	bl	80018f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045d0:	f023 0307 	bic.w	r3, r3, #7
 80045d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3304      	adds	r3, #4
 80045de:	4619      	mov	r1, r3
 80045e0:	4610      	mov	r0, r2
 80045e2:	f000 fae1 	bl	8004ba8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	4313      	orrs	r3, r2
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800462c:	f023 030c 	bic.w	r3, r3, #12
 8004630:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004638:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800463c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	4313      	orrs	r3, r2
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	011a      	lsls	r2, r3, #4
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	031b      	lsls	r3, r3, #12
 800465c:	4313      	orrs	r3, r2
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800466a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004672:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	4313      	orrs	r3, r2
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004700:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d110      	bne.n	800472a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d102      	bne.n	8004714 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800470e:	7b7b      	ldrb	r3, [r7, #13]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d001      	beq.n	8004718 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e069      	b.n	80047ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004728:	e031      	b.n	800478e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d110      	bne.n	8004752 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004730:	7bbb      	ldrb	r3, [r7, #14]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d102      	bne.n	800473c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004736:	7b3b      	ldrb	r3, [r7, #12]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d001      	beq.n	8004740 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e055      	b.n	80047ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004750:	e01d      	b.n	800478e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d108      	bne.n	800476a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004758:	7bbb      	ldrb	r3, [r7, #14]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d105      	bne.n	800476a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800475e:	7b7b      	ldrb	r3, [r7, #13]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d102      	bne.n	800476a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004764:	7b3b      	ldrb	r3, [r7, #12]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d001      	beq.n	800476e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e03e      	b.n	80047ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2202      	movs	r2, #2
 800478a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_TIM_Encoder_Start+0xc4>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b04      	cmp	r3, #4
 8004798:	d008      	beq.n	80047ac <HAL_TIM_Encoder_Start+0xd4>
 800479a:	e00f      	b.n	80047bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2201      	movs	r2, #1
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fc55 	bl	8005054 <TIM_CCxChannelCmd>
      break;
 80047aa:	e016      	b.n	80047da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2201      	movs	r2, #1
 80047b2:	2104      	movs	r1, #4
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fc4d 	bl	8005054 <TIM_CCxChannelCmd>
      break;
 80047ba:	e00e      	b.n	80047da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2201      	movs	r2, #1
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fc45 	bl	8005054 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2201      	movs	r2, #1
 80047d0:	2104      	movs	r1, #4
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fc3e 	bl	8005054 <TIM_CCxChannelCmd>
      break;
 80047d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d020      	beq.n	8004858 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01b      	beq.n	8004858 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0202 	mvn.w	r2, #2
 8004828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f994 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 8004844:	e005      	b.n	8004852 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f986 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f997 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d020      	beq.n	80048a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01b      	beq.n	80048a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0204 	mvn.w	r2, #4
 8004874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f96e 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f960 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f971 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d020      	beq.n	80048f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01b      	beq.n	80048f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0208 	mvn.w	r2, #8
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2204      	movs	r2, #4
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f948 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f93a 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f94b 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d020      	beq.n	800493c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01b      	beq.n	800493c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0210 	mvn.w	r2, #16
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2208      	movs	r2, #8
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f922 	bl	8004b6c <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f914 	bl	8004b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f925 	bl	8004b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00c      	beq.n	8004960 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0201 	mvn.w	r2, #1
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fc fc32 	bl	80011c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00c      	beq.n	8004984 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800497c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fc14 	bl	80051ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00c      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f8f6 	bl	8004b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00c      	beq.n	80049cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0220 	mvn.w	r2, #32
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fbe6 	bl	8005198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e0ae      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b0c      	cmp	r3, #12
 80049fe:	f200 809f 	bhi.w	8004b40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a02:	a201      	add	r2, pc, #4	@ (adr r2, 8004a08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a3d 	.word	0x08004a3d
 8004a0c:	08004b41 	.word	0x08004b41
 8004a10:	08004b41 	.word	0x08004b41
 8004a14:	08004b41 	.word	0x08004b41
 8004a18:	08004a7d 	.word	0x08004a7d
 8004a1c:	08004b41 	.word	0x08004b41
 8004a20:	08004b41 	.word	0x08004b41
 8004a24:	08004b41 	.word	0x08004b41
 8004a28:	08004abf 	.word	0x08004abf
 8004a2c:	08004b41 	.word	0x08004b41
 8004a30:	08004b41 	.word	0x08004b41
 8004a34:	08004b41 	.word	0x08004b41
 8004a38:	08004aff 	.word	0x08004aff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f956 	bl	8004cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699a      	ldr	r2, [r3, #24]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0208 	orr.w	r2, r2, #8
 8004a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0204 	bic.w	r2, r2, #4
 8004a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6999      	ldr	r1, [r3, #24]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	619a      	str	r2, [r3, #24]
      break;
 8004a7a:	e064      	b.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f9a6 	bl	8004dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6999      	ldr	r1, [r3, #24]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	021a      	lsls	r2, r3, #8
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	619a      	str	r2, [r3, #24]
      break;
 8004abc:	e043      	b.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 f9fb 	bl	8004ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0208 	orr.w	r2, r2, #8
 8004ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0204 	bic.w	r2, r2, #4
 8004ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69d9      	ldr	r1, [r3, #28]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	61da      	str	r2, [r3, #28]
      break;
 8004afc:	e023      	b.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fa4f 	bl	8004fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69d9      	ldr	r1, [r3, #28]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	021a      	lsls	r2, r3, #8
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	61da      	str	r2, [r3, #28]
      break;
 8004b3e:	e002      	b.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	75fb      	strb	r3, [r7, #23]
      break;
 8004b44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a43      	ldr	r2, [pc, #268]	@ (8004cc8 <TIM_Base_SetConfig+0x120>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc6:	d00f      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a40      	ldr	r2, [pc, #256]	@ (8004ccc <TIM_Base_SetConfig+0x124>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00b      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a3f      	ldr	r2, [pc, #252]	@ (8004cd0 <TIM_Base_SetConfig+0x128>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d007      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a3e      	ldr	r2, [pc, #248]	@ (8004cd4 <TIM_Base_SetConfig+0x12c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a3d      	ldr	r2, [pc, #244]	@ (8004cd8 <TIM_Base_SetConfig+0x130>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d108      	bne.n	8004bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a32      	ldr	r2, [pc, #200]	@ (8004cc8 <TIM_Base_SetConfig+0x120>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d02b      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c08:	d027      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a2f      	ldr	r2, [pc, #188]	@ (8004ccc <TIM_Base_SetConfig+0x124>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d023      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a2e      	ldr	r2, [pc, #184]	@ (8004cd0 <TIM_Base_SetConfig+0x128>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01f      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004cd4 <TIM_Base_SetConfig+0x12c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01b      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a2c      	ldr	r2, [pc, #176]	@ (8004cd8 <TIM_Base_SetConfig+0x130>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d017      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8004cdc <TIM_Base_SetConfig+0x134>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a2a      	ldr	r2, [pc, #168]	@ (8004ce0 <TIM_Base_SetConfig+0x138>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00f      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a29      	ldr	r2, [pc, #164]	@ (8004ce4 <TIM_Base_SetConfig+0x13c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00b      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a28      	ldr	r2, [pc, #160]	@ (8004ce8 <TIM_Base_SetConfig+0x140>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d007      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a27      	ldr	r2, [pc, #156]	@ (8004cec <TIM_Base_SetConfig+0x144>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d003      	beq.n	8004c5a <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a26      	ldr	r2, [pc, #152]	@ (8004cf0 <TIM_Base_SetConfig+0x148>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d108      	bne.n	8004c6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004cc8 <TIM_Base_SetConfig+0x120>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <TIM_Base_SetConfig+0xf2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a10      	ldr	r2, [pc, #64]	@ (8004cd8 <TIM_Base_SetConfig+0x130>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d103      	bne.n	8004ca2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f043 0204 	orr.w	r2, r3, #4
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	601a      	str	r2, [r3, #0]
}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40010000 	.word	0x40010000
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40000c00 	.word	0x40000c00
 8004cd8:	40010400 	.word	0x40010400
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40014400 	.word	0x40014400
 8004ce4:	40014800 	.word	0x40014800
 8004ce8:	40001800 	.word	0x40001800
 8004cec:	40001c00 	.word	0x40001c00
 8004cf0:	40002000 	.word	0x40002000

08004cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f023 0201 	bic.w	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0303 	bic.w	r3, r3, #3
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f023 0302 	bic.w	r3, r3, #2
 8004d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a20      	ldr	r2, [pc, #128]	@ (8004dcc <TIM_OC1_SetConfig+0xd8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_OC1_SetConfig+0x64>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd0 <TIM_OC1_SetConfig+0xdc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d10c      	bne.n	8004d72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f023 0308 	bic.w	r3, r3, #8
 8004d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f023 0304 	bic.w	r3, r3, #4
 8004d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a15      	ldr	r2, [pc, #84]	@ (8004dcc <TIM_OC1_SetConfig+0xd8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_OC1_SetConfig+0x8e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a14      	ldr	r2, [pc, #80]	@ (8004dd0 <TIM_OC1_SetConfig+0xdc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d111      	bne.n	8004da6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	621a      	str	r2, [r3, #32]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	40010000 	.word	0x40010000
 8004dd0:	40010400 	.word	0x40010400

08004dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f023 0210 	bic.w	r2, r3, #16
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0320 	bic.w	r3, r3, #32
 8004e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a22      	ldr	r2, [pc, #136]	@ (8004eb8 <TIM_OC2_SetConfig+0xe4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_OC2_SetConfig+0x68>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a21      	ldr	r2, [pc, #132]	@ (8004ebc <TIM_OC2_SetConfig+0xe8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d10d      	bne.n	8004e58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a17      	ldr	r2, [pc, #92]	@ (8004eb8 <TIM_OC2_SetConfig+0xe4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_OC2_SetConfig+0x94>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a16      	ldr	r2, [pc, #88]	@ (8004ebc <TIM_OC2_SetConfig+0xe8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d113      	bne.n	8004e90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	621a      	str	r2, [r3, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40010400 	.word	0x40010400

08004ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a21      	ldr	r2, [pc, #132]	@ (8004fa0 <TIM_OC3_SetConfig+0xe0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_OC3_SetConfig+0x66>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a20      	ldr	r2, [pc, #128]	@ (8004fa4 <TIM_OC3_SetConfig+0xe4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d10d      	bne.n	8004f42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a16      	ldr	r2, [pc, #88]	@ (8004fa0 <TIM_OC3_SetConfig+0xe0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_OC3_SetConfig+0x92>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a15      	ldr	r2, [pc, #84]	@ (8004fa4 <TIM_OC3_SetConfig+0xe4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d113      	bne.n	8004f7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	621a      	str	r2, [r3, #32]
}
 8004f94:	bf00      	nop
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40010400 	.word	0x40010400

08004fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	031b      	lsls	r3, r3, #12
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a12      	ldr	r2, [pc, #72]	@ (800504c <TIM_OC4_SetConfig+0xa4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_OC4_SetConfig+0x68>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a11      	ldr	r2, [pc, #68]	@ (8005050 <TIM_OC4_SetConfig+0xa8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d109      	bne.n	8005024 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005016:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	019b      	lsls	r3, r3, #6
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40010400 	.word	0x40010400

08005054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2201      	movs	r2, #1
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a1a      	ldr	r2, [r3, #32]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	43db      	mvns	r3, r3
 8005076:	401a      	ands	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1a      	ldr	r2, [r3, #32]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	431a      	orrs	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e05a      	b.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a21      	ldr	r2, [pc, #132]	@ (800517c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d022      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005104:	d01d      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1d      	ldr	r2, [pc, #116]	@ (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d018      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1b      	ldr	r2, [pc, #108]	@ (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1a      	ldr	r2, [pc, #104]	@ (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00e      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a18      	ldr	r2, [pc, #96]	@ (800518c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a17      	ldr	r2, [pc, #92]	@ (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a15      	ldr	r2, [pc, #84]	@ (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d10c      	bne.n	800515c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	4313      	orrs	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40010000 	.word	0x40010000
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800
 8005188:	40000c00 	.word	0x40000c00
 800518c:	40010400 	.word	0x40010400
 8005190:	40014000 	.word	0x40014000
 8005194:	40001800 	.word	0x40001800

08005198 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e042      	b.n	8005258 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fc fcce 	bl	8001b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2224      	movs	r2, #36	@ 0x24
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f82b 	bl	8005260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005264:	b0c0      	sub	sp, #256	@ 0x100
 8005266:	af00      	add	r7, sp, #0
 8005268:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527c:	68d9      	ldr	r1, [r3, #12]
 800527e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	ea40 0301 	orr.w	r3, r0, r1
 8005288:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	431a      	orrs	r2, r3
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	431a      	orrs	r2, r3
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052b8:	f021 010c 	bic.w	r1, r1, #12
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052c6:	430b      	orrs	r3, r1
 80052c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80052d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052da:	6999      	ldr	r1, [r3, #24]
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	ea40 0301 	orr.w	r3, r0, r1
 80052e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b8f      	ldr	r3, [pc, #572]	@ (800552c <UART_SetConfig+0x2cc>)
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d005      	beq.n	8005300 <UART_SetConfig+0xa0>
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4b8d      	ldr	r3, [pc, #564]	@ (8005530 <UART_SetConfig+0x2d0>)
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d104      	bne.n	800530a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005300:	f7fd ffe0 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8005304:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005308:	e003      	b.n	8005312 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800530a:	f7fd ffc7 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 800530e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800531c:	f040 810c 	bne.w	8005538 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005324:	2200      	movs	r2, #0
 8005326:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800532a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800532e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005332:	4622      	mov	r2, r4
 8005334:	462b      	mov	r3, r5
 8005336:	1891      	adds	r1, r2, r2
 8005338:	65b9      	str	r1, [r7, #88]	@ 0x58
 800533a:	415b      	adcs	r3, r3
 800533c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800533e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005342:	4621      	mov	r1, r4
 8005344:	eb12 0801 	adds.w	r8, r2, r1
 8005348:	4629      	mov	r1, r5
 800534a:	eb43 0901 	adc.w	r9, r3, r1
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800535a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800535e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005362:	4690      	mov	r8, r2
 8005364:	4699      	mov	r9, r3
 8005366:	4623      	mov	r3, r4
 8005368:	eb18 0303 	adds.w	r3, r8, r3
 800536c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005370:	462b      	mov	r3, r5
 8005372:	eb49 0303 	adc.w	r3, r9, r3
 8005376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800537a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005386:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800538a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800538e:	460b      	mov	r3, r1
 8005390:	18db      	adds	r3, r3, r3
 8005392:	653b      	str	r3, [r7, #80]	@ 0x50
 8005394:	4613      	mov	r3, r2
 8005396:	eb42 0303 	adc.w	r3, r2, r3
 800539a:	657b      	str	r3, [r7, #84]	@ 0x54
 800539c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053a4:	f7fb fbca 	bl	8000b3c <__aeabi_uldivmod>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4b61      	ldr	r3, [pc, #388]	@ (8005534 <UART_SetConfig+0x2d4>)
 80053ae:	fba3 2302 	umull	r2, r3, r3, r2
 80053b2:	095b      	lsrs	r3, r3, #5
 80053b4:	011c      	lsls	r4, r3, #4
 80053b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053c8:	4642      	mov	r2, r8
 80053ca:	464b      	mov	r3, r9
 80053cc:	1891      	adds	r1, r2, r2
 80053ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80053d0:	415b      	adcs	r3, r3
 80053d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80053d8:	4641      	mov	r1, r8
 80053da:	eb12 0a01 	adds.w	sl, r2, r1
 80053de:	4649      	mov	r1, r9
 80053e0:	eb43 0b01 	adc.w	fp, r3, r1
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053f8:	4692      	mov	sl, r2
 80053fa:	469b      	mov	fp, r3
 80053fc:	4643      	mov	r3, r8
 80053fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005402:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005406:	464b      	mov	r3, r9
 8005408:	eb4b 0303 	adc.w	r3, fp, r3
 800540c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800541c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005420:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005424:	460b      	mov	r3, r1
 8005426:	18db      	adds	r3, r3, r3
 8005428:	643b      	str	r3, [r7, #64]	@ 0x40
 800542a:	4613      	mov	r3, r2
 800542c:	eb42 0303 	adc.w	r3, r2, r3
 8005430:	647b      	str	r3, [r7, #68]	@ 0x44
 8005432:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005436:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800543a:	f7fb fb7f 	bl	8000b3c <__aeabi_uldivmod>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4611      	mov	r1, r2
 8005444:	4b3b      	ldr	r3, [pc, #236]	@ (8005534 <UART_SetConfig+0x2d4>)
 8005446:	fba3 2301 	umull	r2, r3, r3, r1
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	2264      	movs	r2, #100	@ 0x64
 800544e:	fb02 f303 	mul.w	r3, r2, r3
 8005452:	1acb      	subs	r3, r1, r3
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800545a:	4b36      	ldr	r3, [pc, #216]	@ (8005534 <UART_SetConfig+0x2d4>)
 800545c:	fba3 2302 	umull	r2, r3, r3, r2
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005468:	441c      	add	r4, r3
 800546a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800546e:	2200      	movs	r2, #0
 8005470:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005474:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005478:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800547c:	4642      	mov	r2, r8
 800547e:	464b      	mov	r3, r9
 8005480:	1891      	adds	r1, r2, r2
 8005482:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005484:	415b      	adcs	r3, r3
 8005486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800548c:	4641      	mov	r1, r8
 800548e:	1851      	adds	r1, r2, r1
 8005490:	6339      	str	r1, [r7, #48]	@ 0x30
 8005492:	4649      	mov	r1, r9
 8005494:	414b      	adcs	r3, r1
 8005496:	637b      	str	r3, [r7, #52]	@ 0x34
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054a4:	4659      	mov	r1, fp
 80054a6:	00cb      	lsls	r3, r1, #3
 80054a8:	4651      	mov	r1, sl
 80054aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ae:	4651      	mov	r1, sl
 80054b0:	00ca      	lsls	r2, r1, #3
 80054b2:	4610      	mov	r0, r2
 80054b4:	4619      	mov	r1, r3
 80054b6:	4603      	mov	r3, r0
 80054b8:	4642      	mov	r2, r8
 80054ba:	189b      	adds	r3, r3, r2
 80054bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054c0:	464b      	mov	r3, r9
 80054c2:	460a      	mov	r2, r1
 80054c4:	eb42 0303 	adc.w	r3, r2, r3
 80054c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80054dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054e0:	460b      	mov	r3, r1
 80054e2:	18db      	adds	r3, r3, r3
 80054e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054e6:	4613      	mov	r3, r2
 80054e8:	eb42 0303 	adc.w	r3, r2, r3
 80054ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80054f6:	f7fb fb21 	bl	8000b3c <__aeabi_uldivmod>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005534 <UART_SetConfig+0x2d4>)
 8005500:	fba3 1302 	umull	r1, r3, r3, r2
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	2164      	movs	r1, #100	@ 0x64
 8005508:	fb01 f303 	mul.w	r3, r1, r3
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	3332      	adds	r3, #50	@ 0x32
 8005512:	4a08      	ldr	r2, [pc, #32]	@ (8005534 <UART_SetConfig+0x2d4>)
 8005514:	fba2 2303 	umull	r2, r3, r2, r3
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	f003 0207 	and.w	r2, r3, #7
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4422      	add	r2, r4
 8005526:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005528:	e106      	b.n	8005738 <UART_SetConfig+0x4d8>
 800552a:	bf00      	nop
 800552c:	40011000 	.word	0x40011000
 8005530:	40011400 	.word	0x40011400
 8005534:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800553c:	2200      	movs	r2, #0
 800553e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005542:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005546:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800554a:	4642      	mov	r2, r8
 800554c:	464b      	mov	r3, r9
 800554e:	1891      	adds	r1, r2, r2
 8005550:	6239      	str	r1, [r7, #32]
 8005552:	415b      	adcs	r3, r3
 8005554:	627b      	str	r3, [r7, #36]	@ 0x24
 8005556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800555a:	4641      	mov	r1, r8
 800555c:	1854      	adds	r4, r2, r1
 800555e:	4649      	mov	r1, r9
 8005560:	eb43 0501 	adc.w	r5, r3, r1
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	00eb      	lsls	r3, r5, #3
 800556e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005572:	00e2      	lsls	r2, r4, #3
 8005574:	4614      	mov	r4, r2
 8005576:	461d      	mov	r5, r3
 8005578:	4643      	mov	r3, r8
 800557a:	18e3      	adds	r3, r4, r3
 800557c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005580:	464b      	mov	r3, r9
 8005582:	eb45 0303 	adc.w	r3, r5, r3
 8005586:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005596:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055a6:	4629      	mov	r1, r5
 80055a8:	008b      	lsls	r3, r1, #2
 80055aa:	4621      	mov	r1, r4
 80055ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055b0:	4621      	mov	r1, r4
 80055b2:	008a      	lsls	r2, r1, #2
 80055b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055b8:	f7fb fac0 	bl	8000b3c <__aeabi_uldivmod>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4b60      	ldr	r3, [pc, #384]	@ (8005744 <UART_SetConfig+0x4e4>)
 80055c2:	fba3 2302 	umull	r2, r3, r3, r2
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	011c      	lsls	r4, r3, #4
 80055ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80055dc:	4642      	mov	r2, r8
 80055de:	464b      	mov	r3, r9
 80055e0:	1891      	adds	r1, r2, r2
 80055e2:	61b9      	str	r1, [r7, #24]
 80055e4:	415b      	adcs	r3, r3
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055ec:	4641      	mov	r1, r8
 80055ee:	1851      	adds	r1, r2, r1
 80055f0:	6139      	str	r1, [r7, #16]
 80055f2:	4649      	mov	r1, r9
 80055f4:	414b      	adcs	r3, r1
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005604:	4659      	mov	r1, fp
 8005606:	00cb      	lsls	r3, r1, #3
 8005608:	4651      	mov	r1, sl
 800560a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800560e:	4651      	mov	r1, sl
 8005610:	00ca      	lsls	r2, r1, #3
 8005612:	4610      	mov	r0, r2
 8005614:	4619      	mov	r1, r3
 8005616:	4603      	mov	r3, r0
 8005618:	4642      	mov	r2, r8
 800561a:	189b      	adds	r3, r3, r2
 800561c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005620:	464b      	mov	r3, r9
 8005622:	460a      	mov	r2, r1
 8005624:	eb42 0303 	adc.w	r3, r2, r3
 8005628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005636:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005644:	4649      	mov	r1, r9
 8005646:	008b      	lsls	r3, r1, #2
 8005648:	4641      	mov	r1, r8
 800564a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800564e:	4641      	mov	r1, r8
 8005650:	008a      	lsls	r2, r1, #2
 8005652:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005656:	f7fb fa71 	bl	8000b3c <__aeabi_uldivmod>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4611      	mov	r1, r2
 8005660:	4b38      	ldr	r3, [pc, #224]	@ (8005744 <UART_SetConfig+0x4e4>)
 8005662:	fba3 2301 	umull	r2, r3, r3, r1
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	2264      	movs	r2, #100	@ 0x64
 800566a:	fb02 f303 	mul.w	r3, r2, r3
 800566e:	1acb      	subs	r3, r1, r3
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	3332      	adds	r3, #50	@ 0x32
 8005674:	4a33      	ldr	r2, [pc, #204]	@ (8005744 <UART_SetConfig+0x4e4>)
 8005676:	fba2 2303 	umull	r2, r3, r2, r3
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005680:	441c      	add	r4, r3
 8005682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005686:	2200      	movs	r2, #0
 8005688:	673b      	str	r3, [r7, #112]	@ 0x70
 800568a:	677a      	str	r2, [r7, #116]	@ 0x74
 800568c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005690:	4642      	mov	r2, r8
 8005692:	464b      	mov	r3, r9
 8005694:	1891      	adds	r1, r2, r2
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	415b      	adcs	r3, r3
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056a0:	4641      	mov	r1, r8
 80056a2:	1851      	adds	r1, r2, r1
 80056a4:	6039      	str	r1, [r7, #0]
 80056a6:	4649      	mov	r1, r9
 80056a8:	414b      	adcs	r3, r1
 80056aa:	607b      	str	r3, [r7, #4]
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056b8:	4659      	mov	r1, fp
 80056ba:	00cb      	lsls	r3, r1, #3
 80056bc:	4651      	mov	r1, sl
 80056be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056c2:	4651      	mov	r1, sl
 80056c4:	00ca      	lsls	r2, r1, #3
 80056c6:	4610      	mov	r0, r2
 80056c8:	4619      	mov	r1, r3
 80056ca:	4603      	mov	r3, r0
 80056cc:	4642      	mov	r2, r8
 80056ce:	189b      	adds	r3, r3, r2
 80056d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056d2:	464b      	mov	r3, r9
 80056d4:	460a      	mov	r2, r1
 80056d6:	eb42 0303 	adc.w	r3, r2, r3
 80056da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80056e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80056f4:	4649      	mov	r1, r9
 80056f6:	008b      	lsls	r3, r1, #2
 80056f8:	4641      	mov	r1, r8
 80056fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056fe:	4641      	mov	r1, r8
 8005700:	008a      	lsls	r2, r1, #2
 8005702:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005706:	f7fb fa19 	bl	8000b3c <__aeabi_uldivmod>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	4b0d      	ldr	r3, [pc, #52]	@ (8005744 <UART_SetConfig+0x4e4>)
 8005710:	fba3 1302 	umull	r1, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	2164      	movs	r1, #100	@ 0x64
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	3332      	adds	r3, #50	@ 0x32
 8005722:	4a08      	ldr	r2, [pc, #32]	@ (8005744 <UART_SetConfig+0x4e4>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	f003 020f 	and.w	r2, r3, #15
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4422      	add	r2, r4
 8005736:	609a      	str	r2, [r3, #8]
}
 8005738:	bf00      	nop
 800573a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800573e:	46bd      	mov	sp, r7
 8005740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005744:	51eb851f 	.word	0x51eb851f

08005748 <sniprintf>:
 8005748:	b40c      	push	{r2, r3}
 800574a:	b530      	push	{r4, r5, lr}
 800574c:	4b18      	ldr	r3, [pc, #96]	@ (80057b0 <sniprintf+0x68>)
 800574e:	1e0c      	subs	r4, r1, #0
 8005750:	681d      	ldr	r5, [r3, #0]
 8005752:	b09d      	sub	sp, #116	@ 0x74
 8005754:	da08      	bge.n	8005768 <sniprintf+0x20>
 8005756:	238b      	movs	r3, #139	@ 0x8b
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800575e:	b01d      	add	sp, #116	@ 0x74
 8005760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005764:	b002      	add	sp, #8
 8005766:	4770      	bx	lr
 8005768:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800576c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005776:	bf14      	ite	ne
 8005778:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800577c:	4623      	moveq	r3, r4
 800577e:	9304      	str	r3, [sp, #16]
 8005780:	9307      	str	r3, [sp, #28]
 8005782:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005786:	9002      	str	r0, [sp, #8]
 8005788:	9006      	str	r0, [sp, #24]
 800578a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800578e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005790:	ab21      	add	r3, sp, #132	@ 0x84
 8005792:	a902      	add	r1, sp, #8
 8005794:	4628      	mov	r0, r5
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	f000 f89c 	bl	80058d4 <_svfiprintf_r>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	bfbc      	itt	lt
 80057a0:	238b      	movlt	r3, #139	@ 0x8b
 80057a2:	602b      	strlt	r3, [r5, #0]
 80057a4:	2c00      	cmp	r4, #0
 80057a6:	d0da      	beq.n	800575e <sniprintf+0x16>
 80057a8:	9b02      	ldr	r3, [sp, #8]
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	e7d6      	b.n	800575e <sniprintf+0x16>
 80057b0:	200003c4 	.word	0x200003c4

080057b4 <memset>:
 80057b4:	4402      	add	r2, r0
 80057b6:	4603      	mov	r3, r0
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d100      	bne.n	80057be <memset+0xa>
 80057bc:	4770      	bx	lr
 80057be:	f803 1b01 	strb.w	r1, [r3], #1
 80057c2:	e7f9      	b.n	80057b8 <memset+0x4>

080057c4 <__errno>:
 80057c4:	4b01      	ldr	r3, [pc, #4]	@ (80057cc <__errno+0x8>)
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	200003c4 	.word	0x200003c4

080057d0 <__libc_init_array>:
 80057d0:	b570      	push	{r4, r5, r6, lr}
 80057d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005808 <__libc_init_array+0x38>)
 80057d4:	4c0d      	ldr	r4, [pc, #52]	@ (800580c <__libc_init_array+0x3c>)
 80057d6:	1b64      	subs	r4, r4, r5
 80057d8:	10a4      	asrs	r4, r4, #2
 80057da:	2600      	movs	r6, #0
 80057dc:	42a6      	cmp	r6, r4
 80057de:	d109      	bne.n	80057f4 <__libc_init_array+0x24>
 80057e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005810 <__libc_init_array+0x40>)
 80057e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005814 <__libc_init_array+0x44>)
 80057e4:	f000 fc64 	bl	80060b0 <_init>
 80057e8:	1b64      	subs	r4, r4, r5
 80057ea:	10a4      	asrs	r4, r4, #2
 80057ec:	2600      	movs	r6, #0
 80057ee:	42a6      	cmp	r6, r4
 80057f0:	d105      	bne.n	80057fe <__libc_init_array+0x2e>
 80057f2:	bd70      	pop	{r4, r5, r6, pc}
 80057f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f8:	4798      	blx	r3
 80057fa:	3601      	adds	r6, #1
 80057fc:	e7ee      	b.n	80057dc <__libc_init_array+0xc>
 80057fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005802:	4798      	blx	r3
 8005804:	3601      	adds	r6, #1
 8005806:	e7f2      	b.n	80057ee <__libc_init_array+0x1e>
 8005808:	08006160 	.word	0x08006160
 800580c:	08006160 	.word	0x08006160
 8005810:	08006160 	.word	0x08006160
 8005814:	08006164 	.word	0x08006164

08005818 <__retarget_lock_acquire_recursive>:
 8005818:	4770      	bx	lr

0800581a <__retarget_lock_release_recursive>:
 800581a:	4770      	bx	lr

0800581c <__ssputs_r>:
 800581c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005820:	688e      	ldr	r6, [r1, #8]
 8005822:	461f      	mov	r7, r3
 8005824:	42be      	cmp	r6, r7
 8005826:	680b      	ldr	r3, [r1, #0]
 8005828:	4682      	mov	sl, r0
 800582a:	460c      	mov	r4, r1
 800582c:	4690      	mov	r8, r2
 800582e:	d82d      	bhi.n	800588c <__ssputs_r+0x70>
 8005830:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005834:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005838:	d026      	beq.n	8005888 <__ssputs_r+0x6c>
 800583a:	6965      	ldr	r5, [r4, #20]
 800583c:	6909      	ldr	r1, [r1, #16]
 800583e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005842:	eba3 0901 	sub.w	r9, r3, r1
 8005846:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800584a:	1c7b      	adds	r3, r7, #1
 800584c:	444b      	add	r3, r9
 800584e:	106d      	asrs	r5, r5, #1
 8005850:	429d      	cmp	r5, r3
 8005852:	bf38      	it	cc
 8005854:	461d      	movcc	r5, r3
 8005856:	0553      	lsls	r3, r2, #21
 8005858:	d527      	bpl.n	80058aa <__ssputs_r+0x8e>
 800585a:	4629      	mov	r1, r5
 800585c:	f000 f958 	bl	8005b10 <_malloc_r>
 8005860:	4606      	mov	r6, r0
 8005862:	b360      	cbz	r0, 80058be <__ssputs_r+0xa2>
 8005864:	6921      	ldr	r1, [r4, #16]
 8005866:	464a      	mov	r2, r9
 8005868:	f000 fbc2 	bl	8005ff0 <memcpy>
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005876:	81a3      	strh	r3, [r4, #12]
 8005878:	6126      	str	r6, [r4, #16]
 800587a:	6165      	str	r5, [r4, #20]
 800587c:	444e      	add	r6, r9
 800587e:	eba5 0509 	sub.w	r5, r5, r9
 8005882:	6026      	str	r6, [r4, #0]
 8005884:	60a5      	str	r5, [r4, #8]
 8005886:	463e      	mov	r6, r7
 8005888:	42be      	cmp	r6, r7
 800588a:	d900      	bls.n	800588e <__ssputs_r+0x72>
 800588c:	463e      	mov	r6, r7
 800588e:	6820      	ldr	r0, [r4, #0]
 8005890:	4632      	mov	r2, r6
 8005892:	4641      	mov	r1, r8
 8005894:	f000 fb82 	bl	8005f9c <memmove>
 8005898:	68a3      	ldr	r3, [r4, #8]
 800589a:	1b9b      	subs	r3, r3, r6
 800589c:	60a3      	str	r3, [r4, #8]
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	4433      	add	r3, r6
 80058a2:	6023      	str	r3, [r4, #0]
 80058a4:	2000      	movs	r0, #0
 80058a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058aa:	462a      	mov	r2, r5
 80058ac:	f000 fb48 	bl	8005f40 <_realloc_r>
 80058b0:	4606      	mov	r6, r0
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d1e0      	bne.n	8005878 <__ssputs_r+0x5c>
 80058b6:	6921      	ldr	r1, [r4, #16]
 80058b8:	4650      	mov	r0, sl
 80058ba:	f000 fba7 	bl	800600c <_free_r>
 80058be:	230c      	movs	r3, #12
 80058c0:	f8ca 3000 	str.w	r3, [sl]
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058ca:	81a3      	strh	r3, [r4, #12]
 80058cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058d0:	e7e9      	b.n	80058a6 <__ssputs_r+0x8a>
	...

080058d4 <_svfiprintf_r>:
 80058d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d8:	4698      	mov	r8, r3
 80058da:	898b      	ldrh	r3, [r1, #12]
 80058dc:	061b      	lsls	r3, r3, #24
 80058de:	b09d      	sub	sp, #116	@ 0x74
 80058e0:	4607      	mov	r7, r0
 80058e2:	460d      	mov	r5, r1
 80058e4:	4614      	mov	r4, r2
 80058e6:	d510      	bpl.n	800590a <_svfiprintf_r+0x36>
 80058e8:	690b      	ldr	r3, [r1, #16]
 80058ea:	b973      	cbnz	r3, 800590a <_svfiprintf_r+0x36>
 80058ec:	2140      	movs	r1, #64	@ 0x40
 80058ee:	f000 f90f 	bl	8005b10 <_malloc_r>
 80058f2:	6028      	str	r0, [r5, #0]
 80058f4:	6128      	str	r0, [r5, #16]
 80058f6:	b930      	cbnz	r0, 8005906 <_svfiprintf_r+0x32>
 80058f8:	230c      	movs	r3, #12
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005900:	b01d      	add	sp, #116	@ 0x74
 8005902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005906:	2340      	movs	r3, #64	@ 0x40
 8005908:	616b      	str	r3, [r5, #20]
 800590a:	2300      	movs	r3, #0
 800590c:	9309      	str	r3, [sp, #36]	@ 0x24
 800590e:	2320      	movs	r3, #32
 8005910:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005914:	f8cd 800c 	str.w	r8, [sp, #12]
 8005918:	2330      	movs	r3, #48	@ 0x30
 800591a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ab8 <_svfiprintf_r+0x1e4>
 800591e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005922:	f04f 0901 	mov.w	r9, #1
 8005926:	4623      	mov	r3, r4
 8005928:	469a      	mov	sl, r3
 800592a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800592e:	b10a      	cbz	r2, 8005934 <_svfiprintf_r+0x60>
 8005930:	2a25      	cmp	r2, #37	@ 0x25
 8005932:	d1f9      	bne.n	8005928 <_svfiprintf_r+0x54>
 8005934:	ebba 0b04 	subs.w	fp, sl, r4
 8005938:	d00b      	beq.n	8005952 <_svfiprintf_r+0x7e>
 800593a:	465b      	mov	r3, fp
 800593c:	4622      	mov	r2, r4
 800593e:	4629      	mov	r1, r5
 8005940:	4638      	mov	r0, r7
 8005942:	f7ff ff6b 	bl	800581c <__ssputs_r>
 8005946:	3001      	adds	r0, #1
 8005948:	f000 80a7 	beq.w	8005a9a <_svfiprintf_r+0x1c6>
 800594c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800594e:	445a      	add	r2, fp
 8005950:	9209      	str	r2, [sp, #36]	@ 0x24
 8005952:	f89a 3000 	ldrb.w	r3, [sl]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 809f 	beq.w	8005a9a <_svfiprintf_r+0x1c6>
 800595c:	2300      	movs	r3, #0
 800595e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005966:	f10a 0a01 	add.w	sl, sl, #1
 800596a:	9304      	str	r3, [sp, #16]
 800596c:	9307      	str	r3, [sp, #28]
 800596e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005972:	931a      	str	r3, [sp, #104]	@ 0x68
 8005974:	4654      	mov	r4, sl
 8005976:	2205      	movs	r2, #5
 8005978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800597c:	484e      	ldr	r0, [pc, #312]	@ (8005ab8 <_svfiprintf_r+0x1e4>)
 800597e:	f7fa fc4f 	bl	8000220 <memchr>
 8005982:	9a04      	ldr	r2, [sp, #16]
 8005984:	b9d8      	cbnz	r0, 80059be <_svfiprintf_r+0xea>
 8005986:	06d0      	lsls	r0, r2, #27
 8005988:	bf44      	itt	mi
 800598a:	2320      	movmi	r3, #32
 800598c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005990:	0711      	lsls	r1, r2, #28
 8005992:	bf44      	itt	mi
 8005994:	232b      	movmi	r3, #43	@ 0x2b
 8005996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800599a:	f89a 3000 	ldrb.w	r3, [sl]
 800599e:	2b2a      	cmp	r3, #42	@ 0x2a
 80059a0:	d015      	beq.n	80059ce <_svfiprintf_r+0xfa>
 80059a2:	9a07      	ldr	r2, [sp, #28]
 80059a4:	4654      	mov	r4, sl
 80059a6:	2000      	movs	r0, #0
 80059a8:	f04f 0c0a 	mov.w	ip, #10
 80059ac:	4621      	mov	r1, r4
 80059ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059b2:	3b30      	subs	r3, #48	@ 0x30
 80059b4:	2b09      	cmp	r3, #9
 80059b6:	d94b      	bls.n	8005a50 <_svfiprintf_r+0x17c>
 80059b8:	b1b0      	cbz	r0, 80059e8 <_svfiprintf_r+0x114>
 80059ba:	9207      	str	r2, [sp, #28]
 80059bc:	e014      	b.n	80059e8 <_svfiprintf_r+0x114>
 80059be:	eba0 0308 	sub.w	r3, r0, r8
 80059c2:	fa09 f303 	lsl.w	r3, r9, r3
 80059c6:	4313      	orrs	r3, r2
 80059c8:	9304      	str	r3, [sp, #16]
 80059ca:	46a2      	mov	sl, r4
 80059cc:	e7d2      	b.n	8005974 <_svfiprintf_r+0xa0>
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	1d19      	adds	r1, r3, #4
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	9103      	str	r1, [sp, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	bfbb      	ittet	lt
 80059da:	425b      	neglt	r3, r3
 80059dc:	f042 0202 	orrlt.w	r2, r2, #2
 80059e0:	9307      	strge	r3, [sp, #28]
 80059e2:	9307      	strlt	r3, [sp, #28]
 80059e4:	bfb8      	it	lt
 80059e6:	9204      	strlt	r2, [sp, #16]
 80059e8:	7823      	ldrb	r3, [r4, #0]
 80059ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80059ec:	d10a      	bne.n	8005a04 <_svfiprintf_r+0x130>
 80059ee:	7863      	ldrb	r3, [r4, #1]
 80059f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80059f2:	d132      	bne.n	8005a5a <_svfiprintf_r+0x186>
 80059f4:	9b03      	ldr	r3, [sp, #12]
 80059f6:	1d1a      	adds	r2, r3, #4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	9203      	str	r2, [sp, #12]
 80059fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a00:	3402      	adds	r4, #2
 8005a02:	9305      	str	r3, [sp, #20]
 8005a04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ac8 <_svfiprintf_r+0x1f4>
 8005a08:	7821      	ldrb	r1, [r4, #0]
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	4650      	mov	r0, sl
 8005a0e:	f7fa fc07 	bl	8000220 <memchr>
 8005a12:	b138      	cbz	r0, 8005a24 <_svfiprintf_r+0x150>
 8005a14:	9b04      	ldr	r3, [sp, #16]
 8005a16:	eba0 000a 	sub.w	r0, r0, sl
 8005a1a:	2240      	movs	r2, #64	@ 0x40
 8005a1c:	4082      	lsls	r2, r0
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	3401      	adds	r4, #1
 8005a22:	9304      	str	r3, [sp, #16]
 8005a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a28:	4824      	ldr	r0, [pc, #144]	@ (8005abc <_svfiprintf_r+0x1e8>)
 8005a2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a2e:	2206      	movs	r2, #6
 8005a30:	f7fa fbf6 	bl	8000220 <memchr>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d036      	beq.n	8005aa6 <_svfiprintf_r+0x1d2>
 8005a38:	4b21      	ldr	r3, [pc, #132]	@ (8005ac0 <_svfiprintf_r+0x1ec>)
 8005a3a:	bb1b      	cbnz	r3, 8005a84 <_svfiprintf_r+0x1b0>
 8005a3c:	9b03      	ldr	r3, [sp, #12]
 8005a3e:	3307      	adds	r3, #7
 8005a40:	f023 0307 	bic.w	r3, r3, #7
 8005a44:	3308      	adds	r3, #8
 8005a46:	9303      	str	r3, [sp, #12]
 8005a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a4a:	4433      	add	r3, r6
 8005a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a4e:	e76a      	b.n	8005926 <_svfiprintf_r+0x52>
 8005a50:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a54:	460c      	mov	r4, r1
 8005a56:	2001      	movs	r0, #1
 8005a58:	e7a8      	b.n	80059ac <_svfiprintf_r+0xd8>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	3401      	adds	r4, #1
 8005a5e:	9305      	str	r3, [sp, #20]
 8005a60:	4619      	mov	r1, r3
 8005a62:	f04f 0c0a 	mov.w	ip, #10
 8005a66:	4620      	mov	r0, r4
 8005a68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a6c:	3a30      	subs	r2, #48	@ 0x30
 8005a6e:	2a09      	cmp	r2, #9
 8005a70:	d903      	bls.n	8005a7a <_svfiprintf_r+0x1a6>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0c6      	beq.n	8005a04 <_svfiprintf_r+0x130>
 8005a76:	9105      	str	r1, [sp, #20]
 8005a78:	e7c4      	b.n	8005a04 <_svfiprintf_r+0x130>
 8005a7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a7e:	4604      	mov	r4, r0
 8005a80:	2301      	movs	r3, #1
 8005a82:	e7f0      	b.n	8005a66 <_svfiprintf_r+0x192>
 8005a84:	ab03      	add	r3, sp, #12
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	462a      	mov	r2, r5
 8005a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac4 <_svfiprintf_r+0x1f0>)
 8005a8c:	a904      	add	r1, sp, #16
 8005a8e:	4638      	mov	r0, r7
 8005a90:	f3af 8000 	nop.w
 8005a94:	1c42      	adds	r2, r0, #1
 8005a96:	4606      	mov	r6, r0
 8005a98:	d1d6      	bne.n	8005a48 <_svfiprintf_r+0x174>
 8005a9a:	89ab      	ldrh	r3, [r5, #12]
 8005a9c:	065b      	lsls	r3, r3, #25
 8005a9e:	f53f af2d 	bmi.w	80058fc <_svfiprintf_r+0x28>
 8005aa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005aa4:	e72c      	b.n	8005900 <_svfiprintf_r+0x2c>
 8005aa6:	ab03      	add	r3, sp, #12
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	462a      	mov	r2, r5
 8005aac:	4b05      	ldr	r3, [pc, #20]	@ (8005ac4 <_svfiprintf_r+0x1f0>)
 8005aae:	a904      	add	r1, sp, #16
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	f000 f91b 	bl	8005cec <_printf_i>
 8005ab6:	e7ed      	b.n	8005a94 <_svfiprintf_r+0x1c0>
 8005ab8:	08006122 	.word	0x08006122
 8005abc:	0800612c 	.word	0x0800612c
 8005ac0:	00000000 	.word	0x00000000
 8005ac4:	0800581d 	.word	0x0800581d
 8005ac8:	08006128 	.word	0x08006128

08005acc <sbrk_aligned>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	4e0f      	ldr	r6, [pc, #60]	@ (8005b0c <sbrk_aligned+0x40>)
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	6831      	ldr	r1, [r6, #0]
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	b911      	cbnz	r1, 8005ade <sbrk_aligned+0x12>
 8005ad8:	f000 fa7a 	bl	8005fd0 <_sbrk_r>
 8005adc:	6030      	str	r0, [r6, #0]
 8005ade:	4621      	mov	r1, r4
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	f000 fa75 	bl	8005fd0 <_sbrk_r>
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	d103      	bne.n	8005af2 <sbrk_aligned+0x26>
 8005aea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005aee:	4620      	mov	r0, r4
 8005af0:	bd70      	pop	{r4, r5, r6, pc}
 8005af2:	1cc4      	adds	r4, r0, #3
 8005af4:	f024 0403 	bic.w	r4, r4, #3
 8005af8:	42a0      	cmp	r0, r4
 8005afa:	d0f8      	beq.n	8005aee <sbrk_aligned+0x22>
 8005afc:	1a21      	subs	r1, r4, r0
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 fa66 	bl	8005fd0 <_sbrk_r>
 8005b04:	3001      	adds	r0, #1
 8005b06:	d1f2      	bne.n	8005aee <sbrk_aligned+0x22>
 8005b08:	e7ef      	b.n	8005aea <sbrk_aligned+0x1e>
 8005b0a:	bf00      	nop
 8005b0c:	20000840 	.word	0x20000840

08005b10 <_malloc_r>:
 8005b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b14:	1ccd      	adds	r5, r1, #3
 8005b16:	f025 0503 	bic.w	r5, r5, #3
 8005b1a:	3508      	adds	r5, #8
 8005b1c:	2d0c      	cmp	r5, #12
 8005b1e:	bf38      	it	cc
 8005b20:	250c      	movcc	r5, #12
 8005b22:	2d00      	cmp	r5, #0
 8005b24:	4606      	mov	r6, r0
 8005b26:	db01      	blt.n	8005b2c <_malloc_r+0x1c>
 8005b28:	42a9      	cmp	r1, r5
 8005b2a:	d904      	bls.n	8005b36 <_malloc_r+0x26>
 8005b2c:	230c      	movs	r3, #12
 8005b2e:	6033      	str	r3, [r6, #0]
 8005b30:	2000      	movs	r0, #0
 8005b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c0c <_malloc_r+0xfc>
 8005b3a:	f000 f9f5 	bl	8005f28 <__malloc_lock>
 8005b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b42:	461c      	mov	r4, r3
 8005b44:	bb44      	cbnz	r4, 8005b98 <_malloc_r+0x88>
 8005b46:	4629      	mov	r1, r5
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f7ff ffbf 	bl	8005acc <sbrk_aligned>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	4604      	mov	r4, r0
 8005b52:	d158      	bne.n	8005c06 <_malloc_r+0xf6>
 8005b54:	f8d8 4000 	ldr.w	r4, [r8]
 8005b58:	4627      	mov	r7, r4
 8005b5a:	2f00      	cmp	r7, #0
 8005b5c:	d143      	bne.n	8005be6 <_malloc_r+0xd6>
 8005b5e:	2c00      	cmp	r4, #0
 8005b60:	d04b      	beq.n	8005bfa <_malloc_r+0xea>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	4639      	mov	r1, r7
 8005b66:	4630      	mov	r0, r6
 8005b68:	eb04 0903 	add.w	r9, r4, r3
 8005b6c:	f000 fa30 	bl	8005fd0 <_sbrk_r>
 8005b70:	4581      	cmp	r9, r0
 8005b72:	d142      	bne.n	8005bfa <_malloc_r+0xea>
 8005b74:	6821      	ldr	r1, [r4, #0]
 8005b76:	1a6d      	subs	r5, r5, r1
 8005b78:	4629      	mov	r1, r5
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f7ff ffa6 	bl	8005acc <sbrk_aligned>
 8005b80:	3001      	adds	r0, #1
 8005b82:	d03a      	beq.n	8005bfa <_malloc_r+0xea>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	442b      	add	r3, r5
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	bb62      	cbnz	r2, 8005bec <_malloc_r+0xdc>
 8005b92:	f8c8 7000 	str.w	r7, [r8]
 8005b96:	e00f      	b.n	8005bb8 <_malloc_r+0xa8>
 8005b98:	6822      	ldr	r2, [r4, #0]
 8005b9a:	1b52      	subs	r2, r2, r5
 8005b9c:	d420      	bmi.n	8005be0 <_malloc_r+0xd0>
 8005b9e:	2a0b      	cmp	r2, #11
 8005ba0:	d917      	bls.n	8005bd2 <_malloc_r+0xc2>
 8005ba2:	1961      	adds	r1, r4, r5
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	6025      	str	r5, [r4, #0]
 8005ba8:	bf18      	it	ne
 8005baa:	6059      	strne	r1, [r3, #4]
 8005bac:	6863      	ldr	r3, [r4, #4]
 8005bae:	bf08      	it	eq
 8005bb0:	f8c8 1000 	streq.w	r1, [r8]
 8005bb4:	5162      	str	r2, [r4, r5]
 8005bb6:	604b      	str	r3, [r1, #4]
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f000 f9bb 	bl	8005f34 <__malloc_unlock>
 8005bbe:	f104 000b 	add.w	r0, r4, #11
 8005bc2:	1d23      	adds	r3, r4, #4
 8005bc4:	f020 0007 	bic.w	r0, r0, #7
 8005bc8:	1ac2      	subs	r2, r0, r3
 8005bca:	bf1c      	itt	ne
 8005bcc:	1a1b      	subne	r3, r3, r0
 8005bce:	50a3      	strne	r3, [r4, r2]
 8005bd0:	e7af      	b.n	8005b32 <_malloc_r+0x22>
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	bf0c      	ite	eq
 8005bd8:	f8c8 2000 	streq.w	r2, [r8]
 8005bdc:	605a      	strne	r2, [r3, #4]
 8005bde:	e7eb      	b.n	8005bb8 <_malloc_r+0xa8>
 8005be0:	4623      	mov	r3, r4
 8005be2:	6864      	ldr	r4, [r4, #4]
 8005be4:	e7ae      	b.n	8005b44 <_malloc_r+0x34>
 8005be6:	463c      	mov	r4, r7
 8005be8:	687f      	ldr	r7, [r7, #4]
 8005bea:	e7b6      	b.n	8005b5a <_malloc_r+0x4a>
 8005bec:	461a      	mov	r2, r3
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	d1fb      	bne.n	8005bec <_malloc_r+0xdc>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	6053      	str	r3, [r2, #4]
 8005bf8:	e7de      	b.n	8005bb8 <_malloc_r+0xa8>
 8005bfa:	230c      	movs	r3, #12
 8005bfc:	6033      	str	r3, [r6, #0]
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f000 f998 	bl	8005f34 <__malloc_unlock>
 8005c04:	e794      	b.n	8005b30 <_malloc_r+0x20>
 8005c06:	6005      	str	r5, [r0, #0]
 8005c08:	e7d6      	b.n	8005bb8 <_malloc_r+0xa8>
 8005c0a:	bf00      	nop
 8005c0c:	20000844 	.word	0x20000844

08005c10 <_printf_common>:
 8005c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c14:	4616      	mov	r6, r2
 8005c16:	4698      	mov	r8, r3
 8005c18:	688a      	ldr	r2, [r1, #8]
 8005c1a:	690b      	ldr	r3, [r1, #16]
 8005c1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c20:	4293      	cmp	r3, r2
 8005c22:	bfb8      	it	lt
 8005c24:	4613      	movlt	r3, r2
 8005c26:	6033      	str	r3, [r6, #0]
 8005c28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c2c:	4607      	mov	r7, r0
 8005c2e:	460c      	mov	r4, r1
 8005c30:	b10a      	cbz	r2, 8005c36 <_printf_common+0x26>
 8005c32:	3301      	adds	r3, #1
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	0699      	lsls	r1, r3, #26
 8005c3a:	bf42      	ittt	mi
 8005c3c:	6833      	ldrmi	r3, [r6, #0]
 8005c3e:	3302      	addmi	r3, #2
 8005c40:	6033      	strmi	r3, [r6, #0]
 8005c42:	6825      	ldr	r5, [r4, #0]
 8005c44:	f015 0506 	ands.w	r5, r5, #6
 8005c48:	d106      	bne.n	8005c58 <_printf_common+0x48>
 8005c4a:	f104 0a19 	add.w	sl, r4, #25
 8005c4e:	68e3      	ldr	r3, [r4, #12]
 8005c50:	6832      	ldr	r2, [r6, #0]
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	42ab      	cmp	r3, r5
 8005c56:	dc26      	bgt.n	8005ca6 <_printf_common+0x96>
 8005c58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c5c:	6822      	ldr	r2, [r4, #0]
 8005c5e:	3b00      	subs	r3, #0
 8005c60:	bf18      	it	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	0692      	lsls	r2, r2, #26
 8005c66:	d42b      	bmi.n	8005cc0 <_printf_common+0xb0>
 8005c68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c6c:	4641      	mov	r1, r8
 8005c6e:	4638      	mov	r0, r7
 8005c70:	47c8      	blx	r9
 8005c72:	3001      	adds	r0, #1
 8005c74:	d01e      	beq.n	8005cb4 <_printf_common+0xa4>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	6922      	ldr	r2, [r4, #16]
 8005c7a:	f003 0306 	and.w	r3, r3, #6
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	bf02      	ittt	eq
 8005c82:	68e5      	ldreq	r5, [r4, #12]
 8005c84:	6833      	ldreq	r3, [r6, #0]
 8005c86:	1aed      	subeq	r5, r5, r3
 8005c88:	68a3      	ldr	r3, [r4, #8]
 8005c8a:	bf0c      	ite	eq
 8005c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c90:	2500      	movne	r5, #0
 8005c92:	4293      	cmp	r3, r2
 8005c94:	bfc4      	itt	gt
 8005c96:	1a9b      	subgt	r3, r3, r2
 8005c98:	18ed      	addgt	r5, r5, r3
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	341a      	adds	r4, #26
 8005c9e:	42b5      	cmp	r5, r6
 8005ca0:	d11a      	bne.n	8005cd8 <_printf_common+0xc8>
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	e008      	b.n	8005cb8 <_printf_common+0xa8>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	4652      	mov	r2, sl
 8005caa:	4641      	mov	r1, r8
 8005cac:	4638      	mov	r0, r7
 8005cae:	47c8      	blx	r9
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d103      	bne.n	8005cbc <_printf_common+0xac>
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbc:	3501      	adds	r5, #1
 8005cbe:	e7c6      	b.n	8005c4e <_printf_common+0x3e>
 8005cc0:	18e1      	adds	r1, r4, r3
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	2030      	movs	r0, #48	@ 0x30
 8005cc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005cca:	4422      	add	r2, r4
 8005ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005cd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	e7c7      	b.n	8005c68 <_printf_common+0x58>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4622      	mov	r2, r4
 8005cdc:	4641      	mov	r1, r8
 8005cde:	4638      	mov	r0, r7
 8005ce0:	47c8      	blx	r9
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d0e6      	beq.n	8005cb4 <_printf_common+0xa4>
 8005ce6:	3601      	adds	r6, #1
 8005ce8:	e7d9      	b.n	8005c9e <_printf_common+0x8e>
	...

08005cec <_printf_i>:
 8005cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf0:	7e0f      	ldrb	r7, [r1, #24]
 8005cf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cf4:	2f78      	cmp	r7, #120	@ 0x78
 8005cf6:	4691      	mov	r9, r2
 8005cf8:	4680      	mov	r8, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	469a      	mov	sl, r3
 8005cfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d02:	d807      	bhi.n	8005d14 <_printf_i+0x28>
 8005d04:	2f62      	cmp	r7, #98	@ 0x62
 8005d06:	d80a      	bhi.n	8005d1e <_printf_i+0x32>
 8005d08:	2f00      	cmp	r7, #0
 8005d0a:	f000 80d1 	beq.w	8005eb0 <_printf_i+0x1c4>
 8005d0e:	2f58      	cmp	r7, #88	@ 0x58
 8005d10:	f000 80b8 	beq.w	8005e84 <_printf_i+0x198>
 8005d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d1c:	e03a      	b.n	8005d94 <_printf_i+0xa8>
 8005d1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d22:	2b15      	cmp	r3, #21
 8005d24:	d8f6      	bhi.n	8005d14 <_printf_i+0x28>
 8005d26:	a101      	add	r1, pc, #4	@ (adr r1, 8005d2c <_printf_i+0x40>)
 8005d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d2c:	08005d85 	.word	0x08005d85
 8005d30:	08005d99 	.word	0x08005d99
 8005d34:	08005d15 	.word	0x08005d15
 8005d38:	08005d15 	.word	0x08005d15
 8005d3c:	08005d15 	.word	0x08005d15
 8005d40:	08005d15 	.word	0x08005d15
 8005d44:	08005d99 	.word	0x08005d99
 8005d48:	08005d15 	.word	0x08005d15
 8005d4c:	08005d15 	.word	0x08005d15
 8005d50:	08005d15 	.word	0x08005d15
 8005d54:	08005d15 	.word	0x08005d15
 8005d58:	08005e97 	.word	0x08005e97
 8005d5c:	08005dc3 	.word	0x08005dc3
 8005d60:	08005e51 	.word	0x08005e51
 8005d64:	08005d15 	.word	0x08005d15
 8005d68:	08005d15 	.word	0x08005d15
 8005d6c:	08005eb9 	.word	0x08005eb9
 8005d70:	08005d15 	.word	0x08005d15
 8005d74:	08005dc3 	.word	0x08005dc3
 8005d78:	08005d15 	.word	0x08005d15
 8005d7c:	08005d15 	.word	0x08005d15
 8005d80:	08005e59 	.word	0x08005e59
 8005d84:	6833      	ldr	r3, [r6, #0]
 8005d86:	1d1a      	adds	r2, r3, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6032      	str	r2, [r6, #0]
 8005d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d94:	2301      	movs	r3, #1
 8005d96:	e09c      	b.n	8005ed2 <_printf_i+0x1e6>
 8005d98:	6833      	ldr	r3, [r6, #0]
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	1d19      	adds	r1, r3, #4
 8005d9e:	6031      	str	r1, [r6, #0]
 8005da0:	0606      	lsls	r6, r0, #24
 8005da2:	d501      	bpl.n	8005da8 <_printf_i+0xbc>
 8005da4:	681d      	ldr	r5, [r3, #0]
 8005da6:	e003      	b.n	8005db0 <_printf_i+0xc4>
 8005da8:	0645      	lsls	r5, r0, #25
 8005daa:	d5fb      	bpl.n	8005da4 <_printf_i+0xb8>
 8005dac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	da03      	bge.n	8005dbc <_printf_i+0xd0>
 8005db4:	232d      	movs	r3, #45	@ 0x2d
 8005db6:	426d      	negs	r5, r5
 8005db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dbc:	4858      	ldr	r0, [pc, #352]	@ (8005f20 <_printf_i+0x234>)
 8005dbe:	230a      	movs	r3, #10
 8005dc0:	e011      	b.n	8005de6 <_printf_i+0xfa>
 8005dc2:	6821      	ldr	r1, [r4, #0]
 8005dc4:	6833      	ldr	r3, [r6, #0]
 8005dc6:	0608      	lsls	r0, r1, #24
 8005dc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005dcc:	d402      	bmi.n	8005dd4 <_printf_i+0xe8>
 8005dce:	0649      	lsls	r1, r1, #25
 8005dd0:	bf48      	it	mi
 8005dd2:	b2ad      	uxthmi	r5, r5
 8005dd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dd6:	4852      	ldr	r0, [pc, #328]	@ (8005f20 <_printf_i+0x234>)
 8005dd8:	6033      	str	r3, [r6, #0]
 8005dda:	bf14      	ite	ne
 8005ddc:	230a      	movne	r3, #10
 8005dde:	2308      	moveq	r3, #8
 8005de0:	2100      	movs	r1, #0
 8005de2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005de6:	6866      	ldr	r6, [r4, #4]
 8005de8:	60a6      	str	r6, [r4, #8]
 8005dea:	2e00      	cmp	r6, #0
 8005dec:	db05      	blt.n	8005dfa <_printf_i+0x10e>
 8005dee:	6821      	ldr	r1, [r4, #0]
 8005df0:	432e      	orrs	r6, r5
 8005df2:	f021 0104 	bic.w	r1, r1, #4
 8005df6:	6021      	str	r1, [r4, #0]
 8005df8:	d04b      	beq.n	8005e92 <_printf_i+0x1a6>
 8005dfa:	4616      	mov	r6, r2
 8005dfc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e00:	fb03 5711 	mls	r7, r3, r1, r5
 8005e04:	5dc7      	ldrb	r7, [r0, r7]
 8005e06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e0a:	462f      	mov	r7, r5
 8005e0c:	42bb      	cmp	r3, r7
 8005e0e:	460d      	mov	r5, r1
 8005e10:	d9f4      	bls.n	8005dfc <_printf_i+0x110>
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d10b      	bne.n	8005e2e <_printf_i+0x142>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	07df      	lsls	r7, r3, #31
 8005e1a:	d508      	bpl.n	8005e2e <_printf_i+0x142>
 8005e1c:	6923      	ldr	r3, [r4, #16]
 8005e1e:	6861      	ldr	r1, [r4, #4]
 8005e20:	4299      	cmp	r1, r3
 8005e22:	bfde      	ittt	le
 8005e24:	2330      	movle	r3, #48	@ 0x30
 8005e26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e2a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005e2e:	1b92      	subs	r2, r2, r6
 8005e30:	6122      	str	r2, [r4, #16]
 8005e32:	f8cd a000 	str.w	sl, [sp]
 8005e36:	464b      	mov	r3, r9
 8005e38:	aa03      	add	r2, sp, #12
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	f7ff fee7 	bl	8005c10 <_printf_common>
 8005e42:	3001      	adds	r0, #1
 8005e44:	d14a      	bne.n	8005edc <_printf_i+0x1f0>
 8005e46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e4a:	b004      	add	sp, #16
 8005e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	f043 0320 	orr.w	r3, r3, #32
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	4832      	ldr	r0, [pc, #200]	@ (8005f24 <_printf_i+0x238>)
 8005e5a:	2778      	movs	r7, #120	@ 0x78
 8005e5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	6831      	ldr	r1, [r6, #0]
 8005e64:	061f      	lsls	r7, r3, #24
 8005e66:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e6a:	d402      	bmi.n	8005e72 <_printf_i+0x186>
 8005e6c:	065f      	lsls	r7, r3, #25
 8005e6e:	bf48      	it	mi
 8005e70:	b2ad      	uxthmi	r5, r5
 8005e72:	6031      	str	r1, [r6, #0]
 8005e74:	07d9      	lsls	r1, r3, #31
 8005e76:	bf44      	itt	mi
 8005e78:	f043 0320 	orrmi.w	r3, r3, #32
 8005e7c:	6023      	strmi	r3, [r4, #0]
 8005e7e:	b11d      	cbz	r5, 8005e88 <_printf_i+0x19c>
 8005e80:	2310      	movs	r3, #16
 8005e82:	e7ad      	b.n	8005de0 <_printf_i+0xf4>
 8005e84:	4826      	ldr	r0, [pc, #152]	@ (8005f20 <_printf_i+0x234>)
 8005e86:	e7e9      	b.n	8005e5c <_printf_i+0x170>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	f023 0320 	bic.w	r3, r3, #32
 8005e8e:	6023      	str	r3, [r4, #0]
 8005e90:	e7f6      	b.n	8005e80 <_printf_i+0x194>
 8005e92:	4616      	mov	r6, r2
 8005e94:	e7bd      	b.n	8005e12 <_printf_i+0x126>
 8005e96:	6833      	ldr	r3, [r6, #0]
 8005e98:	6825      	ldr	r5, [r4, #0]
 8005e9a:	6961      	ldr	r1, [r4, #20]
 8005e9c:	1d18      	adds	r0, r3, #4
 8005e9e:	6030      	str	r0, [r6, #0]
 8005ea0:	062e      	lsls	r6, r5, #24
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	d501      	bpl.n	8005eaa <_printf_i+0x1be>
 8005ea6:	6019      	str	r1, [r3, #0]
 8005ea8:	e002      	b.n	8005eb0 <_printf_i+0x1c4>
 8005eaa:	0668      	lsls	r0, r5, #25
 8005eac:	d5fb      	bpl.n	8005ea6 <_printf_i+0x1ba>
 8005eae:	8019      	strh	r1, [r3, #0]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	6123      	str	r3, [r4, #16]
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	e7bc      	b.n	8005e32 <_printf_i+0x146>
 8005eb8:	6833      	ldr	r3, [r6, #0]
 8005eba:	1d1a      	adds	r2, r3, #4
 8005ebc:	6032      	str	r2, [r6, #0]
 8005ebe:	681e      	ldr	r6, [r3, #0]
 8005ec0:	6862      	ldr	r2, [r4, #4]
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f7fa f9ab 	bl	8000220 <memchr>
 8005eca:	b108      	cbz	r0, 8005ed0 <_printf_i+0x1e4>
 8005ecc:	1b80      	subs	r0, r0, r6
 8005ece:	6060      	str	r0, [r4, #4]
 8005ed0:	6863      	ldr	r3, [r4, #4]
 8005ed2:	6123      	str	r3, [r4, #16]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eda:	e7aa      	b.n	8005e32 <_printf_i+0x146>
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	4632      	mov	r2, r6
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	47d0      	blx	sl
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d0ad      	beq.n	8005e46 <_printf_i+0x15a>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	079b      	lsls	r3, r3, #30
 8005eee:	d413      	bmi.n	8005f18 <_printf_i+0x22c>
 8005ef0:	68e0      	ldr	r0, [r4, #12]
 8005ef2:	9b03      	ldr	r3, [sp, #12]
 8005ef4:	4298      	cmp	r0, r3
 8005ef6:	bfb8      	it	lt
 8005ef8:	4618      	movlt	r0, r3
 8005efa:	e7a6      	b.n	8005e4a <_printf_i+0x15e>
 8005efc:	2301      	movs	r3, #1
 8005efe:	4632      	mov	r2, r6
 8005f00:	4649      	mov	r1, r9
 8005f02:	4640      	mov	r0, r8
 8005f04:	47d0      	blx	sl
 8005f06:	3001      	adds	r0, #1
 8005f08:	d09d      	beq.n	8005e46 <_printf_i+0x15a>
 8005f0a:	3501      	adds	r5, #1
 8005f0c:	68e3      	ldr	r3, [r4, #12]
 8005f0e:	9903      	ldr	r1, [sp, #12]
 8005f10:	1a5b      	subs	r3, r3, r1
 8005f12:	42ab      	cmp	r3, r5
 8005f14:	dcf2      	bgt.n	8005efc <_printf_i+0x210>
 8005f16:	e7eb      	b.n	8005ef0 <_printf_i+0x204>
 8005f18:	2500      	movs	r5, #0
 8005f1a:	f104 0619 	add.w	r6, r4, #25
 8005f1e:	e7f5      	b.n	8005f0c <_printf_i+0x220>
 8005f20:	08006133 	.word	0x08006133
 8005f24:	08006144 	.word	0x08006144

08005f28 <__malloc_lock>:
 8005f28:	4801      	ldr	r0, [pc, #4]	@ (8005f30 <__malloc_lock+0x8>)
 8005f2a:	f7ff bc75 	b.w	8005818 <__retarget_lock_acquire_recursive>
 8005f2e:	bf00      	nop
 8005f30:	2000083c 	.word	0x2000083c

08005f34 <__malloc_unlock>:
 8005f34:	4801      	ldr	r0, [pc, #4]	@ (8005f3c <__malloc_unlock+0x8>)
 8005f36:	f7ff bc70 	b.w	800581a <__retarget_lock_release_recursive>
 8005f3a:	bf00      	nop
 8005f3c:	2000083c 	.word	0x2000083c

08005f40 <_realloc_r>:
 8005f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f44:	4607      	mov	r7, r0
 8005f46:	4614      	mov	r4, r2
 8005f48:	460d      	mov	r5, r1
 8005f4a:	b921      	cbnz	r1, 8005f56 <_realloc_r+0x16>
 8005f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f50:	4611      	mov	r1, r2
 8005f52:	f7ff bddd 	b.w	8005b10 <_malloc_r>
 8005f56:	b92a      	cbnz	r2, 8005f64 <_realloc_r+0x24>
 8005f58:	f000 f858 	bl	800600c <_free_r>
 8005f5c:	4625      	mov	r5, r4
 8005f5e:	4628      	mov	r0, r5
 8005f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f64:	f000 f89c 	bl	80060a0 <_malloc_usable_size_r>
 8005f68:	4284      	cmp	r4, r0
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	d802      	bhi.n	8005f74 <_realloc_r+0x34>
 8005f6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f72:	d8f4      	bhi.n	8005f5e <_realloc_r+0x1e>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4638      	mov	r0, r7
 8005f78:	f7ff fdca 	bl	8005b10 <_malloc_r>
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	b908      	cbnz	r0, 8005f84 <_realloc_r+0x44>
 8005f80:	4645      	mov	r5, r8
 8005f82:	e7ec      	b.n	8005f5e <_realloc_r+0x1e>
 8005f84:	42b4      	cmp	r4, r6
 8005f86:	4622      	mov	r2, r4
 8005f88:	4629      	mov	r1, r5
 8005f8a:	bf28      	it	cs
 8005f8c:	4632      	movcs	r2, r6
 8005f8e:	f000 f82f 	bl	8005ff0 <memcpy>
 8005f92:	4629      	mov	r1, r5
 8005f94:	4638      	mov	r0, r7
 8005f96:	f000 f839 	bl	800600c <_free_r>
 8005f9a:	e7f1      	b.n	8005f80 <_realloc_r+0x40>

08005f9c <memmove>:
 8005f9c:	4288      	cmp	r0, r1
 8005f9e:	b510      	push	{r4, lr}
 8005fa0:	eb01 0402 	add.w	r4, r1, r2
 8005fa4:	d902      	bls.n	8005fac <memmove+0x10>
 8005fa6:	4284      	cmp	r4, r0
 8005fa8:	4623      	mov	r3, r4
 8005faa:	d807      	bhi.n	8005fbc <memmove+0x20>
 8005fac:	1e43      	subs	r3, r0, #1
 8005fae:	42a1      	cmp	r1, r4
 8005fb0:	d008      	beq.n	8005fc4 <memmove+0x28>
 8005fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fba:	e7f8      	b.n	8005fae <memmove+0x12>
 8005fbc:	4402      	add	r2, r0
 8005fbe:	4601      	mov	r1, r0
 8005fc0:	428a      	cmp	r2, r1
 8005fc2:	d100      	bne.n	8005fc6 <memmove+0x2a>
 8005fc4:	bd10      	pop	{r4, pc}
 8005fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fce:	e7f7      	b.n	8005fc0 <memmove+0x24>

08005fd0 <_sbrk_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4d06      	ldr	r5, [pc, #24]	@ (8005fec <_sbrk_r+0x1c>)
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4608      	mov	r0, r1
 8005fda:	602b      	str	r3, [r5, #0]
 8005fdc:	f7fb fa44 	bl	8001468 <_sbrk>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_sbrk_r+0x1a>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_sbrk_r+0x1a>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	20000848 	.word	0x20000848

08005ff0 <memcpy>:
 8005ff0:	440a      	add	r2, r1
 8005ff2:	4291      	cmp	r1, r2
 8005ff4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005ff8:	d100      	bne.n	8005ffc <memcpy+0xc>
 8005ffa:	4770      	bx	lr
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006006:	4291      	cmp	r1, r2
 8006008:	d1f9      	bne.n	8005ffe <memcpy+0xe>
 800600a:	bd10      	pop	{r4, pc}

0800600c <_free_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4605      	mov	r5, r0
 8006010:	2900      	cmp	r1, #0
 8006012:	d041      	beq.n	8006098 <_free_r+0x8c>
 8006014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006018:	1f0c      	subs	r4, r1, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	bfb8      	it	lt
 800601e:	18e4      	addlt	r4, r4, r3
 8006020:	f7ff ff82 	bl	8005f28 <__malloc_lock>
 8006024:	4a1d      	ldr	r2, [pc, #116]	@ (800609c <_free_r+0x90>)
 8006026:	6813      	ldr	r3, [r2, #0]
 8006028:	b933      	cbnz	r3, 8006038 <_free_r+0x2c>
 800602a:	6063      	str	r3, [r4, #4]
 800602c:	6014      	str	r4, [r2, #0]
 800602e:	4628      	mov	r0, r5
 8006030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006034:	f7ff bf7e 	b.w	8005f34 <__malloc_unlock>
 8006038:	42a3      	cmp	r3, r4
 800603a:	d908      	bls.n	800604e <_free_r+0x42>
 800603c:	6820      	ldr	r0, [r4, #0]
 800603e:	1821      	adds	r1, r4, r0
 8006040:	428b      	cmp	r3, r1
 8006042:	bf01      	itttt	eq
 8006044:	6819      	ldreq	r1, [r3, #0]
 8006046:	685b      	ldreq	r3, [r3, #4]
 8006048:	1809      	addeq	r1, r1, r0
 800604a:	6021      	streq	r1, [r4, #0]
 800604c:	e7ed      	b.n	800602a <_free_r+0x1e>
 800604e:	461a      	mov	r2, r3
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	b10b      	cbz	r3, 8006058 <_free_r+0x4c>
 8006054:	42a3      	cmp	r3, r4
 8006056:	d9fa      	bls.n	800604e <_free_r+0x42>
 8006058:	6811      	ldr	r1, [r2, #0]
 800605a:	1850      	adds	r0, r2, r1
 800605c:	42a0      	cmp	r0, r4
 800605e:	d10b      	bne.n	8006078 <_free_r+0x6c>
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	4401      	add	r1, r0
 8006064:	1850      	adds	r0, r2, r1
 8006066:	4283      	cmp	r3, r0
 8006068:	6011      	str	r1, [r2, #0]
 800606a:	d1e0      	bne.n	800602e <_free_r+0x22>
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	6053      	str	r3, [r2, #4]
 8006072:	4408      	add	r0, r1
 8006074:	6010      	str	r0, [r2, #0]
 8006076:	e7da      	b.n	800602e <_free_r+0x22>
 8006078:	d902      	bls.n	8006080 <_free_r+0x74>
 800607a:	230c      	movs	r3, #12
 800607c:	602b      	str	r3, [r5, #0]
 800607e:	e7d6      	b.n	800602e <_free_r+0x22>
 8006080:	6820      	ldr	r0, [r4, #0]
 8006082:	1821      	adds	r1, r4, r0
 8006084:	428b      	cmp	r3, r1
 8006086:	bf04      	itt	eq
 8006088:	6819      	ldreq	r1, [r3, #0]
 800608a:	685b      	ldreq	r3, [r3, #4]
 800608c:	6063      	str	r3, [r4, #4]
 800608e:	bf04      	itt	eq
 8006090:	1809      	addeq	r1, r1, r0
 8006092:	6021      	streq	r1, [r4, #0]
 8006094:	6054      	str	r4, [r2, #4]
 8006096:	e7ca      	b.n	800602e <_free_r+0x22>
 8006098:	bd38      	pop	{r3, r4, r5, pc}
 800609a:	bf00      	nop
 800609c:	20000844 	.word	0x20000844

080060a0 <_malloc_usable_size_r>:
 80060a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a4:	1f18      	subs	r0, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bfbc      	itt	lt
 80060aa:	580b      	ldrlt	r3, [r1, r0]
 80060ac:	18c0      	addlt	r0, r0, r3
 80060ae:	4770      	bx	lr

080060b0 <_init>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr

080060bc <_fini>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	bf00      	nop
 80060c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c2:	bc08      	pop	{r3}
 80060c4:	469e      	mov	lr, r3
 80060c6:	4770      	bx	lr
