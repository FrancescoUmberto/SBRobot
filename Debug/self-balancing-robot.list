
self-balancing-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009af0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08009cc0  08009cc0  0000acc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0cc  0800a0cc  0000c590  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a0cc  0800a0cc  0000b0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d4  0800a0d4  0000c590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d4  0800a0d4  0000b0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0d8  0800a0d8  0000b0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000590  20000000  0800a0dc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000590  0800a66c  0000c590  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  0800a66c  0000cb44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c590  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016834  00000000  00000000  0000c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a27  00000000  00000000  00022df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00026820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2a  00000000  00000000  00027a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000269b3  00000000  00000000  000288a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019745  00000000  00000000  0004f255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2617  00000000  00000000  0006899a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014afb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc4  00000000  00000000  0014aff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00150bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000590 	.word	0x20000590
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009ca8 	.word	0x08009ca8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000594 	.word	0x20000594
 800020c:	08009ca8 	.word	0x08009ca8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <MX_ADC1_Init+0x98>)
 8001008:	4a21      	ldr	r2, [pc, #132]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <MX_ADC1_Init+0x98>)
 800100e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001014:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <MX_ADC1_Init+0x98>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_ADC1_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001020:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_ADC1_Init+0x98>)
 8001022:	2200      	movs	r2, #0
 8001024:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001026:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_ADC1_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_ADC1_Init+0x98>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_ADC1_Init+0x98>)
 8001036:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <MX_ADC1_Init+0xa0>)
 8001038:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_ADC1_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <MX_ADC1_Init+0x98>)
 8001042:	2201      	movs	r2, #1
 8001044:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_ADC1_Init+0x98>)
 8001050:	2201      	movs	r2, #1
 8001052:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001054:	480d      	ldr	r0, [pc, #52]	@ (800108c <MX_ADC1_Init+0x98>)
 8001056:	f002 fd7d 	bl	8003b54 <HAL_ADC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001060:	f000 faf1 	bl	8001646 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001064:	2309      	movs	r3, #9
 8001066:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_ADC1_Init+0x98>)
 8001076:	f002 ff4f 	bl	8003f18 <HAL_ADC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001080:	f000 fae1 	bl	8001646 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200005ac 	.word	0x200005ac
 8001090:	40012000 	.word	0x40012000
 8001094:	0f000001 	.word	0x0f000001

08001098 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	@ 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a17      	ldr	r2, [pc, #92]	@ (8001114 <HAL_ADC_MspInit+0x7c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d127      	bne.n	800110a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	4a15      	ldr	r2, [pc, #84]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <HAL_ADC_MspInit+0x80>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 80010f2:	2302      	movs	r3, #2
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <HAL_ADC_MspInit+0x84>)
 8001106:	f003 fa47 	bl	8004598 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	@ 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40012000 	.word	0x40012000
 8001118:	40023800 	.word	0x40023800
 800111c:	40020400 	.word	0x40020400

08001120 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b73      	ldr	r3, [pc, #460]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a72      	ldr	r2, [pc, #456]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b70      	ldr	r3, [pc, #448]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b6c      	ldr	r3, [pc, #432]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a6b      	ldr	r2, [pc, #428]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 800115c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b69      	ldr	r3, [pc, #420]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	4b65      	ldr	r3, [pc, #404]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a64      	ldr	r2, [pc, #400]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b62      	ldr	r3, [pc, #392]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b5e      	ldr	r3, [pc, #376]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a5d      	ldr	r2, [pc, #372]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b5b      	ldr	r3, [pc, #364]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b57      	ldr	r3, [pc, #348]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a56      	ldr	r2, [pc, #344]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b54      	ldr	r3, [pc, #336]	@ (8001308 <MX_GPIO_Init+0x1e8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2130      	movs	r1, #48	@ 0x30
 80011c6:	4851      	ldr	r0, [pc, #324]	@ (800130c <MX_GPIO_Init+0x1ec>)
 80011c8:	f003 fb7a 	bl	80048c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_DIR_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2111      	movs	r1, #17
 80011d0:	484f      	ldr	r0, [pc, #316]	@ (8001310 <MX_GPIO_Init+0x1f0>)
 80011d2:	f003 fb75 	bl	80048c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BTN2_GPIO_Port, LED_BTN2_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011dc:	484d      	ldr	r0, [pc, #308]	@ (8001314 <MX_GPIO_Init+0x1f4>)
 80011de:	f003 fb6f 	bl	80048c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4846      	ldr	r0, [pc, #280]	@ (8001314 <MX_GPIO_Init+0x1f4>)
 80011fa:	f003 f9cd 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC6 PC7 PC8 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80011fe:	f641 53dd 	movw	r3, #7645	@ 0x1ddd
 8001202:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001204:	2303      	movs	r3, #3
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4840      	ldr	r0, [pc, #256]	@ (8001314 <MX_GPIO_Init+0x1f4>)
 8001214:	f003 f9c0 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_DIR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|LD2_Pin;
 8001218:	2330      	movs	r3, #48	@ 0x30
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4837      	ldr	r0, [pc, #220]	@ (800130c <MX_GPIO_Init+0x1ec>)
 8001230:	f003 f9b2 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8001234:	2320      	movs	r3, #32
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001238:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800123c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123e:	2301      	movs	r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4832      	ldr	r0, [pc, #200]	@ (8001314 <MX_GPIO_Init+0x1f4>)
 800124a:	f003 f9a5 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 800124e:	2301      	movs	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	482a      	ldr	r0, [pc, #168]	@ (8001310 <MX_GPIO_Init+0x1f0>)
 8001266:	f003 f997 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800126a:	f24f 3324 	movw	r3, #62244	@ 0xf324
 800126e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001270:	2303      	movs	r3, #3
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4824      	ldr	r0, [pc, #144]	@ (8001310 <MX_GPIO_Init+0x1f0>)
 8001280:	f003 f98a 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BTN2_Pin */
  GPIO_InitStruct.Pin = LED_BTN2_Pin;
 8001284:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BTN2_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	481d      	ldr	r0, [pc, #116]	@ (8001314 <MX_GPIO_Init+0x1f4>)
 800129e:	f003 f97b 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012a2:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 80012a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a8:	2303      	movs	r3, #3
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	4815      	ldr	r0, [pc, #84]	@ (800130c <MX_GPIO_Init+0x1ec>)
 80012b8:	f003 f96e 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012bc:	2304      	movs	r3, #4
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c0:	2303      	movs	r3, #3
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4812      	ldr	r0, [pc, #72]	@ (8001318 <MX_GPIO_Init+0x1f8>)
 80012d0:	f003 f962 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 80012d4:	2310      	movs	r3, #16
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4809      	ldr	r0, [pc, #36]	@ (8001310 <MX_GPIO_Init+0x1f0>)
 80012ec:	f003 f954 	bl	8004598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2017      	movs	r0, #23
 80012f6:	f003 f918 	bl	800452a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012fa:	2017      	movs	r0, #23
 80012fc:	f003 f931 	bl	8004562 <HAL_NVIC_EnableIRQ>

}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	@ 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00

0800131c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001324:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001328:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d013      	beq.n	800135c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001334:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001338:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800133c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00b      	beq.n	800135c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001344:	e000      	b.n	8001348 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001346:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001348:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f9      	beq.n	8001346 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001352:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800135c:	687b      	ldr	r3, [r7, #4]
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001372:	f002 fb59 	bl	8003a28 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001376:	f000 f8ad 	bl	80014d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137a:	f7ff fed1 	bl	8001120 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800137e:	f000 fe71 	bl	8002064 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001382:	f000 fbfd 	bl	8001b80 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001386:	f000 fca9 	bl	8001cdc <MX_TIM6_Init>
  MX_SPI2_Init();
 800138a:	f000 f963 	bl	8001654 <MX_SPI2_Init>
  MX_TIM2_Init();
 800138e:	f000 fb4b 	bl	8001a28 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001392:	f000 fcd9 	bl	8001d48 <MX_TIM7_Init>
  MX_TIM3_Init();
 8001396:	f000 fb9f 	bl	8001ad8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800139a:	f000 fc45 	bl	8001c28 <MX_TIM5_Init>
  MX_ADC1_Init();
 800139e:	f7ff fe29 	bl	8000ff4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);						// Display timer (0.1MHz)
 80013a2:	483e      	ldr	r0, [pc, #248]	@ (800149c <main+0x130>)
 80013a4:	f004 fbba 	bl	8005b1c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);						// Timeline
 80013a8:	483d      	ldr	r0, [pc, #244]	@ (80014a0 <main+0x134>)
 80013aa:	f004 fbb7 	bl	8005b1c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		// Encoder right
 80013ae:	213c      	movs	r1, #60	@ 0x3c
 80013b0:	483c      	ldr	r0, [pc, #240]	@ (80014a4 <main+0x138>)
 80013b2:	f004 fde1 	bl	8005f78 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);		// Encoder left
 80013b6:	213c      	movs	r1, #60	@ 0x3c
 80013b8:	483b      	ldr	r0, [pc, #236]	@ (80014a8 <main+0x13c>)
 80013ba:	f004 fddd 	bl	8005f78 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);				// Stepper left
 80013be:	2104      	movs	r1, #4
 80013c0:	483a      	ldr	r0, [pc, #232]	@ (80014ac <main+0x140>)
 80013c2:	f004 fc6b 	bl	8005c9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);				// Stepper right
 80013c6:	2100      	movs	r1, #0
 80013c8:	4839      	ldr	r0, [pc, #228]	@ (80014b0 <main+0x144>)
 80013ca:	f004 fc67 	bl	8005c9c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(50);
 80013ce:	2032      	movs	r0, #50	@ 0x32
 80013d0:	f002 fb9c 	bl	8003b0c <HAL_Delay>
  Robot_init();
 80013d4:	f001 f8f0 	bl	80025b8 <Robot_init>

  char str[] = "SBRobot";
 80013d8:	4a36      	ldr	r2, [pc, #216]	@ (80014b4 <main+0x148>)
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013e2:	e883 0003 	stmia.w	r3, {r0, r1}
  display_data_t data = {str, PRINT_SCROLL, NO_SETTINGS, DISPLAY_TYPE_STRING, 0};
 80013e6:	f107 0318 	add.w	r3, r7, #24
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	2303      	movs	r3, #3
 80013ee:	753b      	strb	r3, [r7, #20]
 80013f0:	2300      	movs	r3, #0
 80013f2:	757b      	strb	r3, [r7, #21]
 80013f4:	230a      	movs	r3, #10
 80013f6:	75bb      	strb	r3, [r7, #22]
 80013f8:	2300      	movs	r3, #0
 80013fa:	75fb      	strb	r3, [r7, #23]
  MAX72_Add_Data(&display, &data);
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	4619      	mov	r1, r3
 8001402:	482d      	ldr	r0, [pc, #180]	@ (80014b8 <main+0x14c>)
 8001404:	f001 fafb 	bl	80029fe <MAX72_Add_Data>

  display_data_t data2 = {&encoder_l.speed, PRINT_FLOAT, MINIDIGITS, DISPLAY_TYPE_FLOAT, 3};
 8001408:	4a2c      	ldr	r2, [pc, #176]	@ (80014bc <main+0x150>)
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001412:	e883 0003 	stmia.w	r3, {r0, r1}
  MAX72_Add_Data(&display, &data2);
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	4619      	mov	r1, r3
 800141c:	4826      	ldr	r0, [pc, #152]	@ (80014b8 <main+0x14c>)
 800141e:	f001 faee 	bl	80029fe <MAX72_Add_Data>

  display_data_t data3 = {&power_module.voltage, PRINT_FLOAT, NO_SETTINGS, DISPLAY_TYPE_FLOAT, 2};
 8001422:	4a27      	ldr	r2, [pc, #156]	@ (80014c0 <main+0x154>)
 8001424:	463b      	mov	r3, r7
 8001426:	e892 0003 	ldmia.w	r2, {r0, r1}
 800142a:	e883 0003 	stmia.w	r3, {r0, r1}
  MAX72_Add_Data(&display, &data3);
 800142e:	463b      	mov	r3, r7
 8001430:	4619      	mov	r1, r3
 8001432:	4821      	ldr	r0, [pc, #132]	@ (80014b8 <main+0x14c>)
 8001434:	f001 fae3 	bl	80029fe <MAX72_Add_Data>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint8_t last_cnt = 255;
	  if (last_cnt != tim6_update_cnt) { // Update every 100ms
 8001438:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <main+0x158>)
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	4b22      	ldr	r3, [pc, #136]	@ (80014c8 <main+0x15c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d0f9      	beq.n	8001438 <main+0xcc>
	      last_cnt = tim6_update_cnt;
 8001444:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <main+0x15c>)
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <main+0x158>)
 800144a:	701a      	strb	r2, [r3, #0]

	      PowerModule_update_data(&power_module);
 800144c:	481f      	ldr	r0, [pc, #124]	@ (80014cc <main+0x160>)
 800144e:	f000 fff7 	bl	8002440 <PowerModule_update_data>

	      if (tim6_update_cnt % 5 == 0) { // Update every 500ms
 8001452:	4b1d      	ldr	r3, [pc, #116]	@ (80014c8 <main+0x15c>)
 8001454:	781a      	ldrb	r2, [r3, #0]
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <main+0x164>)
 8001458:	fba3 1302 	umull	r1, r3, r3, r2
 800145c:	0899      	lsrs	r1, r3, #2
 800145e:	460b      	mov	r3, r1
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d114      	bne.n	8001496 <main+0x12a>
	    	  // Display refresh data
	    	  MAX72_Update_Data(&display);
 800146c:	4812      	ldr	r0, [pc, #72]	@ (80014b8 <main+0x14c>)
 800146e:	f001 faf1 	bl	8002a54 <MAX72_Update_Data>

	    	  if (tim6_update_cnt % 10 == 0) { // Every 1 second
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <main+0x15c>)
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <main+0x164>)
 8001478:	fba3 1302 	umull	r1, r3, r3, r2
 800147c:	08d9      	lsrs	r1, r3, #3
 800147e:	460b      	mov	r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d103      	bne.n	8001496 <main+0x12a>
	    		  MAX72_Change_Data(&display,0);
 800148e:	2100      	movs	r1, #0
 8001490:	4809      	ldr	r0, [pc, #36]	@ (80014b8 <main+0x14c>)
 8001492:	f001 fbcd 	bl	8002c30 <MAX72_Change_Data>
	    	  }
	      }

	      MAX72_Scroll_Process(); // Process scrolling text
 8001496:	f002 f911 	bl	80036bc <MAX72_Scroll_Process>
  {
 800149a:	e7cd      	b.n	8001438 <main+0xcc>
 800149c:	20000774 	.word	0x20000774
 80014a0:	200007bc 	.word	0x200007bc
 80014a4:	2000069c 	.word	0x2000069c
 80014a8:	200006e4 	.word	0x200006e4
 80014ac:	20000654 	.word	0x20000654
 80014b0:	2000072c 	.word	0x2000072c
 80014b4:	08009cc0 	.word	0x08009cc0
 80014b8:	20000978 	.word	0x20000978
 80014bc:	08009cc8 	.word	0x08009cc8
 80014c0:	08009cd0 	.word	0x08009cd0
 80014c4:	20000000 	.word	0x20000000
 80014c8:	200005f4 	.word	0x200005f4
 80014cc:	200008c4 	.word	0x200008c4
 80014d0:	cccccccd 	.word	0xcccccccd

080014d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	@ 0x50
 80014d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	2234      	movs	r2, #52	@ 0x34
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f006 face 	bl	8007a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <SystemClock_Config+0xd4>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	4a29      	ldr	r2, [pc, #164]	@ (80015a8 <SystemClock_Config+0xd4>)
 8001502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001506:	6413      	str	r3, [r2, #64]	@ 0x40
 8001508:	4b27      	ldr	r3, [pc, #156]	@ (80015a8 <SystemClock_Config+0xd4>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	4b24      	ldr	r3, [pc, #144]	@ (80015ac <SystemClock_Config+0xd8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001520:	4a22      	ldr	r2, [pc, #136]	@ (80015ac <SystemClock_Config+0xd8>)
 8001522:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <SystemClock_Config+0xd8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001534:	2302      	movs	r3, #2
 8001536:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001538:	2301      	movs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153c:	2310      	movs	r3, #16
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001540:	2302      	movs	r3, #2
 8001542:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001544:	2300      	movs	r3, #0
 8001546:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001548:	2310      	movs	r3, #16
 800154a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800154c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001550:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001552:	2304      	movs	r3, #4
 8001554:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001556:	2302      	movs	r3, #2
 8001558:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800155a:	2302      	movs	r3, #2
 800155c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4618      	mov	r0, r3
 8001564:	f003 fd42 	bl	8004fec <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800156e:	f000 f86a 	bl	8001646 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001576:	2302      	movs	r3, #2
 8001578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800157e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001588:	f107 0308 	add.w	r3, r7, #8
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f003 f9e2 	bl	8004958 <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800159a:	f000 f854 	bl	8001646 <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	3750      	adds	r7, #80	@ 0x50
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40007000 	.word	0x40007000

080015b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0f      	ldr	r2, [pc, #60]	@ (80015fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d10d      	bne.n	80015de <HAL_TIM_PeriodElapsedCallback+0x2e>
		tim6_update_cnt++;
 80015c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015cc:	701a      	strb	r2, [r3, #0]
		if (tim6_update_cnt == 250){
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2bfa      	cmp	r3, #250	@ 0xfa
 80015d4:	d10e      	bne.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x44>
			tim6_update_cnt = 0;
 80015d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
		}
	} else if (htim->Instance == TIM7) {
		speed_control(&stepper_r);
		speed_control(&stepper_l);
	}
}
 80015dc:	e00a      	b.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x44>
	} else if (htim->Instance == TIM7) {
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d105      	bne.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x44>
		speed_control(&stepper_r);
 80015e8:	4807      	ldr	r0, [pc, #28]	@ (8001608 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015ea:	f001 f82f 	bl	800264c <speed_control>
		speed_control(&stepper_l);
 80015ee:	4807      	ldr	r0, [pc, #28]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80015f0:	f001 f82c 	bl	800264c <speed_control>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40001000 	.word	0x40001000
 8001600:	200005f4 	.word	0x200005f4
 8001604:	40001400 	.word	0x40001400
 8001608:	20000870 	.word	0x20000870
 800160c:	200008a4 	.word	0x200008a4

08001610 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_5) {
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	2b20      	cmp	r3, #32
 800161e:	d101      	bne.n	8001624 <HAL_GPIO_EXTI_Callback+0x14>
    on_click();
 8001620:	f000 fd92 	bl	8002148 <on_click>
  }
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <__io_putchar>:

int __io_putchar(int ch){
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fe70 	bl	800131c <ITM_SendChar>
	return ch;
 800163c:	687b      	ldr	r3, [r7, #4]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164a:	b672      	cpsid	i
}
 800164c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164e:	bf00      	nop
 8001650:	e7fd      	b.n	800164e <Error_Handler+0x8>
	...

08001654 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001658:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <MX_SPI2_Init+0x68>)
 800165a:	4a19      	ldr	r2, [pc, #100]	@ (80016c0 <MX_SPI2_Init+0x6c>)
 800165c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800165e:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001660:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001664:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001668:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800166c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <MX_SPI2_Init+0x68>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001680:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001686:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <MX_SPI2_Init+0x68>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <MX_SPI2_Init+0x68>)
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <MX_SPI2_Init+0x68>)
 80016a2:	220a      	movs	r2, #10
 80016a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <MX_SPI2_Init+0x68>)
 80016a8:	f003 ff3e 	bl	8005528 <HAL_SPI_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80016b2:	f7ff ffc8 	bl	8001646 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200005f8 	.word	0x200005f8
 80016c0:	40003800 	.word	0x40003800

080016c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a28      	ldr	r2, [pc, #160]	@ (8001784 <HAL_SPI_MspInit+0xc0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d14a      	bne.n	800177c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b27      	ldr	r3, [pc, #156]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	4a26      	ldr	r2, [pc, #152]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f6:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b20      	ldr	r3, [pc, #128]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a1f      	ldr	r2, [pc, #124]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a18      	ldr	r2, [pc, #96]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800173a:	2302      	movs	r3, #2
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800174a:	2307      	movs	r3, #7
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	480d      	ldr	r0, [pc, #52]	@ (800178c <HAL_SPI_MspInit+0xc8>)
 8001756:	f002 ff1f 	bl	8004598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 800175a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800176c:	2305      	movs	r3, #5
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	4806      	ldr	r0, [pc, #24]	@ (8001790 <HAL_SPI_MspInit+0xcc>)
 8001778:	f002 ff0e 	bl	8004598 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	@ 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40003800 	.word	0x40003800
 8001788:	40023800 	.word	0x40023800
 800178c:	40020800 	.word	0x40020800
 8001790:	40020400 	.word	0x40020400

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	4a0f      	ldr	r2, [pc, #60]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	4a08      	ldr	r2, [pc, #32]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017d2:	2007      	movs	r0, #7
 80017d4:	f002 fe9e 	bl	8004514 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <NMI_Handler+0x4>

080017ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <MemManage_Handler+0x4>

080017fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <UsageFault_Handler+0x4>

0800180c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183a:	f002 f947 	bl	8003acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}

08001842 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001846:	2020      	movs	r0, #32
 8001848:	f003 f86e 	bl	8004928 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <TIM6_DAC_IRQHandler+0x10>)
 8001856:	f004 fc1d 	bl	8006094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000774 	.word	0x20000774

08001864 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <TIM7_IRQHandler+0x10>)
 800186a:	f004 fc13 	bl	8006094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200007bc 	.word	0x200007bc

08001878 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return 1;
 800187c:	2301      	movs	r3, #1
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_kill>:

int _kill(int pid, int sig)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001892:	f006 f8ff 	bl	8007a94 <__errno>
 8001896:	4603      	mov	r3, r0
 8001898:	2216      	movs	r2, #22
 800189a:	601a      	str	r2, [r3, #0]
  return -1;
 800189c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_exit>:

void _exit (int status)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ffe7 	bl	8001888 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ba:	bf00      	nop
 80018bc:	e7fd      	b.n	80018ba <_exit+0x12>

080018be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e00a      	b.n	80018e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018d0:	f3af 8000 	nop.w
 80018d4:	4601      	mov	r1, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	60ba      	str	r2, [r7, #8]
 80018dc:	b2ca      	uxtb	r2, r1
 80018de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3301      	adds	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dbf0      	blt.n	80018d0 <_read+0x12>
  }

  return len;
 80018ee:	687b      	ldr	r3, [r7, #4]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e009      	b.n	800191e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	60ba      	str	r2, [r7, #8]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fe8a 	bl	800162c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	dbf1      	blt.n	800190a <_write+0x12>
  }
  return len;
 8001926:	687b      	ldr	r3, [r7, #4]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_close>:

int _close(int file)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001958:	605a      	str	r2, [r3, #4]
  return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_isatty>:

int _isatty(int file)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001970:	2301      	movs	r3, #1
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197e:	b480      	push	{r7}
 8001980:	b085      	sub	sp, #20
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f006 f864 	bl	8007a94 <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20020000 	.word	0x20020000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	20000650 	.word	0x20000650
 8001a00:	20000b48 	.word	0x20000b48

08001a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2e:	f107 0320 	add.w	r3, r7, #32
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]
 8001a46:	615a      	str	r2, [r3, #20]
 8001a48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <MX_TIM2_Init+0xac>)
 8001a4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <MX_TIM2_Init+0xac>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a58:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <MX_TIM2_Init+0xac>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <MX_TIM2_Init+0xac>)
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <MX_TIM2_Init+0xac>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <MX_TIM2_Init+0xac>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a72:	4818      	ldr	r0, [pc, #96]	@ (8001ad4 <MX_TIM2_Init+0xac>)
 8001a74:	f004 f8c2 	bl	8005bfc <HAL_TIM_PWM_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a7e:	f7ff fde2 	bl	8001646 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a8a:	f107 0320 	add.w	r3, r7, #32
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4810      	ldr	r0, [pc, #64]	@ (8001ad4 <MX_TIM2_Init+0xac>)
 8001a92:	f004 ff55 	bl	8006940 <HAL_TIMEx_MasterConfigSynchronization>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a9c:	f7ff fdd3 	bl	8001646 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa0:	2360      	movs	r3, #96	@ 0x60
 8001aa2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4807      	ldr	r0, [pc, #28]	@ (8001ad4 <MX_TIM2_Init+0xac>)
 8001ab8:	f004 fbdc 	bl	8006274 <HAL_TIM_PWM_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001ac2:	f7ff fdc0 	bl	8001646 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ac6:	4803      	ldr	r0, [pc, #12]	@ (8001ad4 <MX_TIM2_Init+0xac>)
 8001ac8:	f000 fa6e 	bl	8001fa8 <HAL_TIM_MspPostInit>

}
 8001acc:	bf00      	nop
 8001ace:	3728      	adds	r7, #40	@ 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000654 	.word	0x20000654

08001ad8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	@ 0x30
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	2224      	movs	r2, #36	@ 0x24
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f005 ffcc 	bl	8007a84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001af4:	4b20      	ldr	r3, [pc, #128]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001af6:	4a21      	ldr	r2, [pc, #132]	@ (8001b7c <MX_TIM3_Init+0xa4>)
 8001af8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001afa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 8001b06:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001b08:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b22:	2301      	movs	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b32:	2301      	movs	r3, #1
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	4619      	mov	r1, r3
 8001b44:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001b46:	f004 f971 	bl	8005e2c <HAL_TIM_Encoder_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b50:	f7ff fd79 	bl	8001646 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001b62:	f004 feed 	bl	8006940 <HAL_TIMEx_MasterConfigSynchronization>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b6c:	f7ff fd6b 	bl	8001646 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	3730      	adds	r7, #48	@ 0x30
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2000069c 	.word	0x2000069c
 8001b7c:	40000400 	.word	0x40000400

08001b80 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08c      	sub	sp, #48	@ 0x30
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	2224      	movs	r2, #36	@ 0x24
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f005 ff78 	bl	8007a84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b9c:	4b20      	ldr	r3, [pc, #128]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001b9e:	4a21      	ldr	r2, [pc, #132]	@ (8001c24 <MX_TIM4_Init+0xa4>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8191;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001bb0:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001bb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001bee:	f004 f91d 	bl	8005e2c <HAL_TIM_Encoder_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001bf8:	f7ff fd25 	bl	8001646 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001c0a:	f004 fe99 	bl	8006940 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c14:	f7ff fd17 	bl	8001646 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3730      	adds	r7, #48	@ 0x30
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200006e4 	.word	0x200006e4
 8001c24:	40000800 	.word	0x40000800

08001c28 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	@ 0x28
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2e:	f107 0320 	add.w	r3, r7, #32
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
 8001c44:	611a      	str	r2, [r3, #16]
 8001c46:	615a      	str	r2, [r3, #20]
 8001c48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c4a:	4b22      	ldr	r3, [pc, #136]	@ (8001cd4 <MX_TIM5_Init+0xac>)
 8001c4c:	4a22      	ldr	r2, [pc, #136]	@ (8001cd8 <MX_TIM5_Init+0xb0>)
 8001c4e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c50:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <MX_TIM5_Init+0xac>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <MX_TIM5_Init+0xac>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <MX_TIM5_Init+0xac>)
 8001c5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c62:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <MX_TIM5_Init+0xac>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <MX_TIM5_Init+0xac>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c70:	4818      	ldr	r0, [pc, #96]	@ (8001cd4 <MX_TIM5_Init+0xac>)
 8001c72:	f003 ffc3 	bl	8005bfc <HAL_TIM_PWM_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001c7c:	f7ff fce3 	bl	8001646 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c88:	f107 0320 	add.w	r3, r7, #32
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4811      	ldr	r0, [pc, #68]	@ (8001cd4 <MX_TIM5_Init+0xac>)
 8001c90:	f004 fe56 	bl	8006940 <HAL_TIMEx_MasterConfigSynchronization>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001c9a:	f7ff fcd4 	bl	8001646 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c9e:	2360      	movs	r3, #96	@ 0x60
 8001ca0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4807      	ldr	r0, [pc, #28]	@ (8001cd4 <MX_TIM5_Init+0xac>)
 8001cb6:	f004 fadd 	bl	8006274 <HAL_TIM_PWM_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001cc0:	f7ff fcc1 	bl	8001646 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001cc4:	4803      	ldr	r0, [pc, #12]	@ (8001cd4 <MX_TIM5_Init+0xac>)
 8001cc6:	f000 f96f 	bl	8001fa8 <HAL_TIM_MspPostInit>

}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	@ 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000072c 	.word	0x2000072c
 8001cd8:	40000c00 	.word	0x40000c00

08001cdc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <MX_TIM6_Init+0x64>)
 8001cec:	4a15      	ldr	r2, [pc, #84]	@ (8001d44 <MX_TIM6_Init+0x68>)
 8001cee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <MX_TIM6_Init+0x64>)
 8001cf2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cf6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <MX_TIM6_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <MX_TIM6_Init+0x64>)
 8001d00:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001d04:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <MX_TIM6_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d0c:	480c      	ldr	r0, [pc, #48]	@ (8001d40 <MX_TIM6_Init+0x64>)
 8001d0e:	f003 feb5 	bl	8005a7c <HAL_TIM_Base_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d18:	f7ff fc95 	bl	8001646 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d24:	463b      	mov	r3, r7
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <MX_TIM6_Init+0x64>)
 8001d2a:	f004 fe09 	bl	8006940 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001d34:	f7ff fc87 	bl	8001646 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000774 	.word	0x20000774
 8001d44:	40001000 	.word	0x40001000

08001d48 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4e:	463b      	mov	r3, r7
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <MX_TIM7_Init+0x64>)
 8001d58:	4a15      	ldr	r2, [pc, #84]	@ (8001db0 <MX_TIM7_Init+0x68>)
 8001d5a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 249;
 8001d5c:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <MX_TIM7_Init+0x64>)
 8001d5e:	22f9      	movs	r2, #249	@ 0xf9
 8001d60:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <MX_TIM7_Init+0x64>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8001d68:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <MX_TIM7_Init+0x64>)
 8001d6a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001d6e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <MX_TIM7_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d76:	480d      	ldr	r0, [pc, #52]	@ (8001dac <MX_TIM7_Init+0x64>)
 8001d78:	f003 fe80 	bl	8005a7c <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001d82:	f7ff fc60 	bl	8001646 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4619      	mov	r1, r3
 8001d92:	4806      	ldr	r0, [pc, #24]	@ (8001dac <MX_TIM7_Init+0x64>)
 8001d94:	f004 fdd4 	bl	8006940 <HAL_TIMEx_MasterConfigSynchronization>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001d9e:	f7ff fc52 	bl	8001646 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200007bc 	.word	0x200007bc
 8001db0:	40001400 	.word	0x40001400

08001db4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc4:	d10e      	bne.n	8001de4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <HAL_TIM_PWM_MspInit+0x64>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <HAL_TIM_PWM_MspInit+0x64>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <HAL_TIM_PWM_MspInit+0x64>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001de2:	e012      	b.n	8001e0a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0c      	ldr	r2, [pc, #48]	@ (8001e1c <HAL_TIM_PWM_MspInit+0x68>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d10d      	bne.n	8001e0a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_TIM_PWM_MspInit+0x64>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	4a08      	ldr	r2, [pc, #32]	@ (8001e18 <HAL_TIM_PWM_MspInit+0x64>)
 8001df8:	f043 0308 	orr.w	r3, r3, #8
 8001dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_TIM_PWM_MspInit+0x64>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40000c00 	.word	0x40000c00

08001e20 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	@ 0x30
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a32      	ldr	r2, [pc, #200]	@ (8001f08 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d12c      	bne.n	8001e9c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	4b31      	ldr	r3, [pc, #196]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xec>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	4a30      	ldr	r2, [pc, #192]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xec>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e52:	4b2e      	ldr	r3, [pc, #184]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xec>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xec>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	4a29      	ldr	r2, [pc, #164]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xec>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6e:	4b27      	ldr	r3, [pc, #156]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xec>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 8001e7a:	23c0      	movs	r3, #192	@ 0xc0
 8001e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	4619      	mov	r1, r3
 8001e94:	481e      	ldr	r0, [pc, #120]	@ (8001f10 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e96:	f002 fb7f 	bl	8004598 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e9a:	e030      	b.n	8001efe <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f14 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d12b      	bne.n	8001efe <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b18      	ldr	r3, [pc, #96]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xec>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	4a17      	ldr	r2, [pc, #92]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xec>)
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xec>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xec>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a10      	ldr	r2, [pc, #64]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xec>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <HAL_TIM_Encoder_MspInit+0xec>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin|ENC2_CH2_Pin;
 8001ede:	23c0      	movs	r3, #192	@ 0xc0
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 031c 	add.w	r3, r7, #28
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4807      	ldr	r0, [pc, #28]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001efa:	f002 fb4d 	bl	8004598 <HAL_GPIO_Init>
}
 8001efe:	bf00      	nop
 8001f00:	3730      	adds	r7, #48	@ 0x30
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000
 8001f14:	40000800 	.word	0x40000800
 8001f18:	40020400 	.word	0x40020400

08001f1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	@ (8001f9c <HAL_TIM_Base_MspInit+0x80>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d116      	bne.n	8001f5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x84>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x84>)
 8001f38:	f043 0310 	orr.w	r3, r3, #16
 8001f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3e:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x84>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2036      	movs	r0, #54	@ 0x36
 8001f50:	f002 faeb 	bl	800452a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f54:	2036      	movs	r0, #54	@ 0x36
 8001f56:	f002 fb04 	bl	8004562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001f5a:	e01a      	b.n	8001f92 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a10      	ldr	r2, [pc, #64]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x88>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d115      	bne.n	8001f92 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x84>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x84>)
 8001f70:	f043 0320 	orr.w	r3, r3, #32
 8001f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f76:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x84>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	2037      	movs	r0, #55	@ 0x37
 8001f88:	f002 facf 	bl	800452a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f8c:	2037      	movs	r0, #55	@ 0x37
 8001f8e:	f002 fae8 	bl	8004562 <HAL_NVIC_EnableIRQ>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40001000 	.word	0x40001000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40001400 	.word	0x40001400

08001fa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc8:	d11e      	bne.n	8002008 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <HAL_TIM_MspPostInit+0xb0>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a21      	ldr	r2, [pc, #132]	@ (8002058 <HAL_TIM_MspPostInit+0xb0>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <HAL_TIM_MspPostInit+0xb0>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M2_PUL_Pin;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_PUL_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	4816      	ldr	r0, [pc, #88]	@ (800205c <HAL_TIM_MspPostInit+0xb4>)
 8002002:	f002 fac9 	bl	8004598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002006:	e022      	b.n	800204e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a14      	ldr	r2, [pc, #80]	@ (8002060 <HAL_TIM_MspPostInit+0xb8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d11d      	bne.n	800204e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <HAL_TIM_MspPostInit+0xb0>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a0f      	ldr	r2, [pc, #60]	@ (8002058 <HAL_TIM_MspPostInit+0xb0>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <HAL_TIM_MspPostInit+0xb0>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PUL_Pin;
 800202e:	2301      	movs	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800203e:	2302      	movs	r3, #2
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_PUL_GPIO_Port, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4804      	ldr	r0, [pc, #16]	@ (800205c <HAL_TIM_MspPostInit+0xb4>)
 800204a:	f002 faa5 	bl	8004598 <HAL_GPIO_Init>
}
 800204e:	bf00      	nop
 8002050:	3728      	adds	r7, #40	@ 0x28
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000
 8002060:	40000c00 	.word	0x40000c00

08002064 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002068:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <MX_USART2_UART_Init+0x4c>)
 800206a:	4a12      	ldr	r2, [pc, #72]	@ (80020b4 <MX_USART2_UART_Init+0x50>)
 800206c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <MX_USART2_UART_Init+0x4c>)
 8002070:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002074:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002076:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <MX_USART2_UART_Init+0x4c>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <MX_USART2_UART_Init+0x4c>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002082:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <MX_USART2_UART_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <MX_USART2_UART_Init+0x4c>)
 800208a:	220c      	movs	r2, #12
 800208c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208e:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <MX_USART2_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <MX_USART2_UART_Init+0x4c>)
 8002096:	2200      	movs	r2, #0
 8002098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800209a:	4805      	ldr	r0, [pc, #20]	@ (80020b0 <MX_USART2_UART_Init+0x4c>)
 800209c:	f004 fce0 	bl	8006a60 <HAL_UART_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020a6:	f7ff face 	bl	8001646 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000804 	.word	0x20000804
 80020b4:	40004400 	.word	0x40004400

080020b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	@ 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a19      	ldr	r2, [pc, #100]	@ (800213c <HAL_UART_MspInit+0x84>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d12b      	bne.n	8002132 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <HAL_UART_MspInit+0x88>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a17      	ldr	r2, [pc, #92]	@ (8002140 <HAL_UART_MspInit+0x88>)
 80020e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ea:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <HAL_UART_MspInit+0x88>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <HAL_UART_MspInit+0x88>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a10      	ldr	r2, [pc, #64]	@ (8002140 <HAL_UART_MspInit+0x88>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <HAL_UART_MspInit+0x88>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002112:	230c      	movs	r3, #12
 8002114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002122:	2307      	movs	r3, #7
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4619      	mov	r1, r3
 800212c:	4805      	ldr	r0, [pc, #20]	@ (8002144 <HAL_UART_MspInit+0x8c>)
 800212e:	f002 fa33 	bl	8004598 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002132:	bf00      	nop
 8002134:	3728      	adds	r7, #40	@ 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40004400 	.word	0x40004400
 8002140:	40023800 	.word	0x40023800
 8002144:	40020000 	.word	0x40020000

08002148 <on_click>:
#define DEBOUNCE_DELAY 100 // ms

static uint32_t last_debounce_time = 0;
static uint8_t active = 0;

void on_click(){
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY){
 800214c:	f001 fcd2 	bl	8003af4 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <on_click+0x6c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b64      	cmp	r3, #100	@ 0x64
 800215a:	d929      	bls.n	80021b0 <on_click+0x68>
		last_debounce_time = HAL_GetTick();
 800215c:	f001 fcca 	bl	8003af4 <HAL_GetTick>
 8002160:	4603      	mov	r3, r0
 8002162:	4a14      	ldr	r2, [pc, #80]	@ (80021b4 <on_click+0x6c>)
 8002164:	6013      	str	r3, [r2, #0]
		active ^= 1;
 8002166:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <on_click+0x70>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	f083 0301 	eor.w	r3, r3, #1
 800216e:	b2da      	uxtb	r2, r3
 8002170:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <on_click+0x70>)
 8002172:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8002174:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002178:	4810      	ldr	r0, [pc, #64]	@ (80021bc <on_click+0x74>)
 800217a:	f002 fbba 	bl	80048f2 <HAL_GPIO_TogglePin>

		if(active){
 800217e:	4b0e      	ldr	r3, [pc, #56]	@ (80021b8 <on_click+0x70>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <on_click+0x54>
			set_speed(&stepper_l, 3);
 8002186:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800218a:	480d      	ldr	r0, [pc, #52]	@ (80021c0 <on_click+0x78>)
 800218c:	f000 fb00 	bl	8002790 <set_speed>
			set_speed(&stepper_r, 3);
 8002190:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002194:	480b      	ldr	r0, [pc, #44]	@ (80021c4 <on_click+0x7c>)
 8002196:	f000 fafb 	bl	8002790 <set_speed>
		} else{
			set_speed(&stepper_l, 0);
			set_speed(&stepper_r, 0);
		}
	}
}
 800219a:	e009      	b.n	80021b0 <on_click+0x68>
			set_speed(&stepper_l, 0);
 800219c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80021c8 <on_click+0x80>
 80021a0:	4807      	ldr	r0, [pc, #28]	@ (80021c0 <on_click+0x78>)
 80021a2:	f000 faf5 	bl	8002790 <set_speed>
			set_speed(&stepper_r, 0);
 80021a6:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80021c8 <on_click+0x80>
 80021aa:	4806      	ldr	r0, [pc, #24]	@ (80021c4 <on_click+0x7c>)
 80021ac:	f000 faf0 	bl	8002790 <set_speed>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000084c 	.word	0x2000084c
 80021b8:	20000850 	.word	0x20000850
 80021bc:	40020800 	.word	0x40020800
 80021c0:	200008a4 	.word	0x200008a4
 80021c4:	20000870 	.word	0x20000870
 80021c8:	00000000 	.word	0x00000000

080021cc <update_direction>:
#include <stdio.h>

float SAMPLING_PERIOD; // seconds
uint32_t HCLK;

static void update_direction(encoder_t *encoder){
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	encoder->direction = (encoder->tim->CR1 & TIM_CR1_DIR_Msk) >> TIM_CR1_DIR_Pos;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	701a      	strb	r2, [r3, #0]
	return;
 80021e8:	bf00      	nop
}
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	0000      	movs	r0, r0
	...

080021f8 <update_displacement>:

static void update_displacement(encoder_t *encoder){
 80021f8:	b5b0      	push	{r4, r5, r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

	encoder->displacement = ((float)encoder->tim->CNT - 4096) * DCF * encoder->direction_invert;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	ee07 3a90 	vmov	s15, r3
 800220a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002278 <update_displacement+0x80>
 8002212:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002216:	ee17 0a90 	vmov	r0, s15
 800221a:	f7fe f9b5 	bl	8000588 <__aeabi_f2d>
 800221e:	a314      	add	r3, pc, #80	@ (adr r3, 8002270 <update_displacement+0x78>)
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	f7fe fa08 	bl	8000638 <__aeabi_dmul>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4614      	mov	r4, r2
 800222e:	461d      	mov	r5, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe f994 	bl	8000564 <__aeabi_i2d>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4620      	mov	r0, r4
 8002242:	4629      	mov	r1, r5
 8002244:	f7fe f9f8 	bl	8000638 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	f7fe fcea 	bl	8000c28 <__aeabi_d2f>
 8002254:	4602      	mov	r2, r0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	605a      	str	r2, [r3, #4]
	encoder->tim->CNT = 4096;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002262:	625a      	str	r2, [r3, #36]	@ 0x24
	return;
 8002264:	bf00      	nop
}
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bdb0      	pop	{r4, r5, r7, pc}
 800226c:	f3af 8000 	nop.w
 8002270:	7bb1a72c 	.word	0x7bb1a72c
 8002274:	3f4921fa 	.word	0x3f4921fa
 8002278:	45800000 	.word	0x45800000

0800227c <compute_speed>:

static void compute_speed(encoder_t *encoder){
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	encoder->speed = encoder->displacement / SAMPLING_PERIOD;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	edd3 6a01 	vldr	s13, [r3, #4]
 800228a:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <compute_speed+0x2c>)
 800228c:	ed93 7a00 	vldr	s14, [r3]
 8002290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20000854 	.word	0x20000854

080022ac <Encoder_read>:

void Encoder_read(encoder_t *encoder){
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	update_direction(encoder);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff89 	bl	80021cc <update_direction>
	update_displacement(encoder);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ff9c 	bl	80021f8 <update_displacement>
	compute_speed(encoder);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffdb 	bl	800227c <compute_speed>
	return;
 80022c6:	bf00      	nop
}
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <Encoder_init>:

// em_tim : encoder mode timer | s_tim : sampling timer
void Encoder_init(encoder_t *encoder, TIM_HandleTypeDef *em_tim, TIM_HandleTypeDef *s_tim, int8_t direction_invert){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	70fb      	strb	r3, [r7, #3]
	encoder->tim = em_tim->Instance;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	60da      	str	r2, [r3, #12]
	encoder->tim->CNT = 4096;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022ee:	625a      	str	r2, [r3, #36]	@ 0x24
	encoder->direction_invert = direction_invert;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	741a      	strb	r2, [r3, #16]

	encoder->speed = 0;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
	HCLK = HAL_RCC_GetHCLKFreq();
 80022fe:	f002 fc11 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8002302:	4603      	mov	r3, r0
 8002304:	4a11      	ldr	r2, [pc, #68]	@ (800234c <Encoder_init+0x7c>)
 8002306:	6013      	str	r3, [r2, #0]
	SAMPLING_PERIOD = (float)(1+s_tim->Instance->ARR)*(1+s_tim->Instance->PSC)/HCLK;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230e:	3301      	adds	r3, #1
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231e:	3301      	adds	r3, #1
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002328:	ee67 6a27 	vmul.f32	s13, s14, s15
 800232c:	4b07      	ldr	r3, [pc, #28]	@ (800234c <Encoder_init+0x7c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800233c:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <Encoder_init+0x80>)
 800233e:	edc3 7a00 	vstr	s15, [r3]
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000858 	.word	0x20000858
 8002350:	20000854 	.word	0x20000854
 8002354:	00000000 	.word	0x00000000

08002358 <PowerModule_init>:
#include "headers/power_module.h"
#include "headers/display.h"
#include "gpio.h"

void PowerModule_init(power_module_t *power_module, ADC_HandleTypeDef *hadc){
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
	power_module->warning_limit = WARNING_LIMIT; // Imposta il limite di avviso
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a34      	ldr	r2, [pc, #208]	@ (8002438 <PowerModule_init+0xe0>)
 8002366:	605a      	str	r2, [r3, #4]
	power_module->stop_limit = STOP_LIMIT; // Imposta il limite di stop
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a34      	ldr	r2, [pc, #208]	@ (800243c <PowerModule_init+0xe4>)
 800236c:	609a      	str	r2, [r3, #8]
	power_module->warning_issued = 0; // Inizializza il flag di avviso
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	731a      	strb	r2, [r3, #12]
	power_module->stop_issued = 0; // Inizializza il flag di stop
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	735a      	strb	r2, [r3, #13]
	power_module->hadc = *hadc; // Initialize ADC handle
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	3364      	adds	r3, #100	@ 0x64
 8002380:	4611      	mov	r1, r2
 8002382:	2248      	movs	r2, #72	@ 0x48
 8002384:	4618      	mov	r0, r3
 8002386:	f005 fbb7 	bl	8007af8 <memcpy>

	HAL_ADC_Start(&power_module->hadc);  // Avvia manualmente
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3364      	adds	r3, #100	@ 0x64
 800238e:	4618      	mov	r0, r3
 8002390:	f001 fc24 	bl	8003bdc <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&power_module->hadc, 10) == HAL_OK) {  // Timeout corto
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3364      	adds	r3, #100	@ 0x64
 8002398:	210a      	movs	r1, #10
 800239a:	4618      	mov	r0, r3
 800239c:	f001 fd23 	bl	8003de6 <HAL_ADC_PollForConversion>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11f      	bne.n	80023e6 <PowerModule_init+0x8e>
		power_module->voltage = HAL_ADC_GetValue(&power_module->hadc) / SLOPE - OFFSET;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3364      	adds	r3, #100	@ 0x64
 80023aa:	4618      	mov	r0, r3
 80023ac:	f001 fda6 	bl	8003efc <HAL_ADC_GetValue>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f8c6 	bl	8000544 <__aeabi_ui2d>
 80023b8:	a31b      	add	r3, pc, #108	@ (adr r3, 8002428 <PowerModule_init+0xd0>)
 80023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023be:	f7fe fa65 	bl	800088c <__aeabi_ddiv>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	a319      	add	r3, pc, #100	@ (adr r3, 8002430 <PowerModule_init+0xd8>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f7fd ff7a 	bl	80002c8 <__aeabi_dsub>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f7fe fc24 	bl	8000c28 <__aeabi_d2f>
 80023e0:	4602      	mov	r2, r0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Stop(&power_module->hadc);  // Ferma l’ADC dopo la conversione
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3364      	adds	r3, #100	@ 0x64
 80023ea:	4618      	mov	r0, r3
 80023ec:	f001 fcc8 	bl	8003d80 <HAL_ADC_Stop>

	// Inizializza l'accumulatore
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e00a      	b.n	800240c <PowerModule_init+0xb4>
		power_module->accumulator[i] = power_module->voltage; // Inizializza con il primo valore letto
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3304      	adds	r3, #4
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	3301      	adds	r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b13      	cmp	r3, #19
 8002410:	ddf1      	ble.n	80023f6 <PowerModule_init+0x9e>
	}
	power_module->accumulator_idx = 0; // Inizializza l'indice dell'accumulatore
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	f3af 8000 	nop.w
 8002428:	e147ae14 	.word	0xe147ae14
 800242c:	405c847a 	.word	0x405c847a
 8002430:	c540196f 	.word	0xc540196f
 8002434:	3fb12c42 	.word	0x3fb12c42
 8002438:	41b00000 	.word	0x41b00000
 800243c:	41a00000 	.word	0x41a00000

08002440 <PowerModule_update_data>:

void PowerModule_update_data(power_module_t *power_module){
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&power_module->hadc);  // Avvia l'ADC
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3364      	adds	r3, #100	@ 0x64
 800244c:	4618      	mov	r0, r3
 800244e:	f001 fbc5 	bl	8003bdc <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&power_module->hadc, 10) == HAL_OK) {  // Timeout corto
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3364      	adds	r3, #100	@ 0x64
 8002456:	210a      	movs	r1, #10
 8002458:	4618      	mov	r0, r3
 800245a:	f001 fcc4 	bl	8003de6 <HAL_ADC_PollForConversion>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	f040 808f 	bne.w	8002584 <PowerModule_update_data+0x144>
		// Aggiunge il nuovo valore all'accumulatore
		power_module->accumulator[power_module->accumulator_idx] = HAL_ADC_GetValue(&power_module->hadc) / SLOPE - OFFSET; // Calcola la tensione
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3364      	adds	r3, #100	@ 0x64
 800246a:	4618      	mov	r0, r3
 800246c:	f001 fd46 	bl	8003efc <HAL_ADC_GetValue>
 8002470:	4603      	mov	r3, r0
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe f866 	bl	8000544 <__aeabi_ui2d>
 8002478:	a34b      	add	r3, pc, #300	@ (adr r3, 80025a8 <PowerModule_update_data+0x168>)
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	f7fe fa05 	bl	800088c <__aeabi_ddiv>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	a349      	add	r3, pc, #292	@ (adr r3, 80025b0 <PowerModule_update_data+0x170>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f7fd ff1a 	bl	80002c8 <__aeabi_dsub>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80024a2:	461c      	mov	r4, r3
 80024a4:	f7fe fbc0 	bl	8000c28 <__aeabi_d2f>
 80024a8:	4601      	mov	r1, r0
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	1d23      	adds	r3, r4, #4
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	6019      	str	r1, [r3, #0]
		power_module->accumulator_idx = (power_module->accumulator_idx + 1) % ACCUMULATOR_SIZE; // Aggiorna l'indice ciclicamente
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	4b36      	ldr	r3, [pc, #216]	@ (8002598 <PowerModule_update_data+0x158>)
 80024be:	fb83 1302 	smull	r1, r3, r3, r2
 80024c2:	10d9      	asrs	r1, r3, #3
 80024c4:	17d3      	asrs	r3, r2, #31
 80024c6:	1ac9      	subs	r1, r1, r3
 80024c8:	460b      	mov	r3, r1
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	1ad1      	subs	r1, r2, r3
 80024d2:	b2ca      	uxtb	r2, r1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

		// Calcola la media dei valori nell'accumulatore
		float sum = 0.0f;
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	e00f      	b.n	8002506 <PowerModule_update_data+0xc6>
			sum += power_module->accumulator[i];
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	3304      	adds	r3, #4
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80024f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fc:	edc7 7a03 	vstr	s15, [r7, #12]
		for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	3301      	adds	r3, #1
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b13      	cmp	r3, #19
 800250a:	ddec      	ble.n	80024e6 <PowerModule_update_data+0xa6>
		}
		power_module->voltage = sum / ACCUMULATOR_SIZE; // Aggiorna la tensione con la media
 800250c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002510:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8002514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	edc3 7a00 	vstr	s15, [r3]

		// Controlla i limiti
		if (power_module->voltage < power_module->warning_limit) {
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	ed93 7a00 	vldr	s14, [r3]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	edd3 7a01 	vldr	s15, [r3, #4]
 800252a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	d527      	bpl.n	8002584 <PowerModule_update_data+0x144>
			if (power_module->voltage < power_module->stop_limit) { // Se la tensione è sotto il limite di stop
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	ed93 7a00 	vldr	s14, [r3]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002548:	d50e      	bpl.n	8002568 <PowerModule_update_data+0x128>
				if (!power_module->stop_issued) { // Se non è già stato emesso un stop
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7b5b      	ldrb	r3, [r3, #13]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d118      	bne.n	8002584 <PowerModule_update_data+0x144>
					MAX72_Stop_Changing_Data(&display, 1); // Ferma il cambio automatico dei dati
 8002552:	2101      	movs	r1, #1
 8002554:	4811      	ldr	r0, [pc, #68]	@ (800259c <PowerModule_update_data+0x15c>)
 8002556:	f000 fbd5 	bl	8002d04 <MAX72_Stop_Changing_Data>
					MAX72_Scroll_Start_IT("Critical Voltage!"); // Avvia lo scrolling del messaggio di stop
 800255a:	4811      	ldr	r0, [pc, #68]	@ (80025a0 <PowerModule_update_data+0x160>)
 800255c:	f001 f83e 	bl	80035dc <MAX72_Scroll_Start_IT>
					power_module->stop_issued = 1; // Imposta il flag di stop emesso
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	735a      	strb	r2, [r3, #13]
 8002566:	e00d      	b.n	8002584 <PowerModule_update_data+0x144>
				}
			} else if (!power_module->warning_issued) { // Se non è già stato emesso un avviso
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7b1b      	ldrb	r3, [r3, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <PowerModule_update_data+0x144>
				MAX72_Stop_Changing_Data(&display, 1); // Ferma il cambio automatico dei dati
 8002570:	2101      	movs	r1, #1
 8002572:	480a      	ldr	r0, [pc, #40]	@ (800259c <PowerModule_update_data+0x15c>)
 8002574:	f000 fbc6 	bl	8002d04 <MAX72_Stop_Changing_Data>
				MAX72_Scroll_Start_IT("Low Voltage!"); // Avvia lo scrolling del messaggio di avviso
 8002578:	480a      	ldr	r0, [pc, #40]	@ (80025a4 <PowerModule_update_data+0x164>)
 800257a:	f001 f82f 	bl	80035dc <MAX72_Scroll_Start_IT>
				power_module->warning_issued = 1; // Imposta il flag di avviso emesso
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	731a      	strb	r2, [r3, #12]
			}

		}
	}
	HAL_ADC_Stop(&power_module->hadc);  // Ferma l'ADC dopo la conversione
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3364      	adds	r3, #100	@ 0x64
 8002588:	4618      	mov	r0, r3
 800258a:	f001 fbf9 	bl	8003d80 <HAL_ADC_Stop>
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bd90      	pop	{r4, r7, pc}
 8002596:	bf00      	nop
 8002598:	66666667 	.word	0x66666667
 800259c:	20000978 	.word	0x20000978
 80025a0:	08009cd8 	.word	0x08009cd8
 80025a4:	08009cec 	.word	0x08009cec
 80025a8:	e147ae14 	.word	0xe147ae14
 80025ac:	405c847a 	.word	0x405c847a
 80025b0:	c540196f 	.word	0xc540196f
 80025b4:	3fb12c42 	.word	0x3fb12c42

080025b8 <Robot_init>:
stepper_t stepper_l;

imu_t imu;
power_module_t power_module;

void Robot_init(){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af02      	add	r7, sp, #8

	Encoder_init(&encoder_l, &htim3, &htim7, -1);
 80025be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025c2:	4a14      	ldr	r2, [pc, #80]	@ (8002614 <Robot_init+0x5c>)
 80025c4:	4914      	ldr	r1, [pc, #80]	@ (8002618 <Robot_init+0x60>)
 80025c6:	4815      	ldr	r0, [pc, #84]	@ (800261c <Robot_init+0x64>)
 80025c8:	f7ff fe82 	bl	80022d0 <Encoder_init>
	Stepper_init(&stepper_l, &htim5, TIM_CHANNEL_1, &encoder_l, GPIOA, GPIO_PIN_4);
 80025cc:	2310      	movs	r3, #16
 80025ce:	9301      	str	r3, [sp, #4]
 80025d0:	4b13      	ldr	r3, [pc, #76]	@ (8002620 <Robot_init+0x68>)
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	4b11      	ldr	r3, [pc, #68]	@ (800261c <Robot_init+0x64>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	4912      	ldr	r1, [pc, #72]	@ (8002624 <Robot_init+0x6c>)
 80025da:	4813      	ldr	r0, [pc, #76]	@ (8002628 <Robot_init+0x70>)
 80025dc:	f000 f8e8 	bl	80027b0 <Stepper_init>

	Encoder_init(&encoder_r, &htim4, &htim7, 1);
 80025e0:	2301      	movs	r3, #1
 80025e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002614 <Robot_init+0x5c>)
 80025e4:	4911      	ldr	r1, [pc, #68]	@ (800262c <Robot_init+0x74>)
 80025e6:	4812      	ldr	r0, [pc, #72]	@ (8002630 <Robot_init+0x78>)
 80025e8:	f7ff fe72 	bl	80022d0 <Encoder_init>
	Stepper_init(&stepper_r, &htim2, TIM_CHANNEL_2, &encoder_r, GPIOB, GPIO_PIN_0);
 80025ec:	2301      	movs	r3, #1
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <Robot_init+0x7c>)
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <Robot_init+0x78>)
 80025f6:	2204      	movs	r2, #4
 80025f8:	490f      	ldr	r1, [pc, #60]	@ (8002638 <Robot_init+0x80>)
 80025fa:	4810      	ldr	r0, [pc, #64]	@ (800263c <Robot_init+0x84>)
 80025fc:	f000 f8d8 	bl	80027b0 <Stepper_init>

	// IMU Init to do
	PowerModule_init(&power_module, &hadc1);
 8002600:	490f      	ldr	r1, [pc, #60]	@ (8002640 <Robot_init+0x88>)
 8002602:	4810      	ldr	r0, [pc, #64]	@ (8002644 <Robot_init+0x8c>)
 8002604:	f7ff fea8 	bl	8002358 <PowerModule_init>

	MAX72_init(&display);
 8002608:	480f      	ldr	r0, [pc, #60]	@ (8002648 <Robot_init+0x90>)
 800260a:	f000 f93d 	bl	8002888 <MAX72_init>
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200007bc 	.word	0x200007bc
 8002618:	2000069c 	.word	0x2000069c
 800261c:	20000890 	.word	0x20000890
 8002620:	40020000 	.word	0x40020000
 8002624:	2000072c 	.word	0x2000072c
 8002628:	200008a4 	.word	0x200008a4
 800262c:	200006e4 	.word	0x200006e4
 8002630:	2000085c 	.word	0x2000085c
 8002634:	40020400 	.word	0x40020400
 8002638:	20000654 	.word	0x20000654
 800263c:	20000870 	.word	0x20000870
 8002640:	200005ac 	.word	0x200005ac
 8002644:	200008c4 	.word	0x200008c4
 8002648:	20000978 	.word	0x20000978

0800264c <speed_control>:
float err = 0;
float freq = 0;

static const float constant = 1020*0.05/2;

void speed_control(stepper_t *stepper){
 800264c:	b5b0      	push	{r4, r5, r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	Encoder_read(stepper->encoder);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fe27 	bl	80022ac <Encoder_read>

	float e = stepper->setpoint_speed - stepper->encoder->speed;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	ed93 7a01 	vldr	s14, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	edd3 7a02 	vldr	s15, [r3, #8]
 800266c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002670:	edc7 7a03 	vstr	s15, [r7, #12]
//	float delta_f = e / ANGLE_STEP ;
//
//	stepper->frequency += delta_f;

	stepper->frequency += 350*e + constant*(e+err);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	ed93 7a02 	vldr	s14, [r3, #8]
 800267a:	edd7 7a03 	vldr	s15, [r7, #12]
 800267e:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002778 <speed_control+0x12c>
 8002682:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002686:	4b3d      	ldr	r3, [pc, #244]	@ (800277c <speed_control+0x130>)
 8002688:	ed93 6a00 	vldr	s12, [r3]
 800268c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002690:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002694:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002780 <speed_control+0x134>
 8002698:	ee67 7a86 	vmul.f32	s15, s15, s12
 800269c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	edc3 7a02 	vstr	s15, [r3, #8]
	uint8_t sign = stepper->frequency > 0;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80026b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b8:	bfcc      	ite	gt
 80026ba:	2301      	movgt	r3, #1
 80026bc:	2300      	movle	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	72fb      	strb	r3, [r7, #11]

	freq = stepper->frequency;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002784 <speed_control+0x138>)
 80026c8:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(stepper->DIR_PORT, stepper->DIR_PIN, (stepper->encoder->direction_invert > 0 ? sign : !sign));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	4618      	mov	r0, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8b99      	ldrh	r1, [r3, #28]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	dc06      	bgt.n	80026ee <speed_control+0xa2>
 80026e0:	7afb      	ldrb	r3, [r7, #11]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	e000      	b.n	80026f0 <speed_control+0xa4>
 80026ee:	7afb      	ldrb	r3, [r7, #11]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f002 f8e5 	bl	80048c0 <HAL_GPIO_WritePin>

	err = e;
 80026f6:	4a21      	ldr	r2, [pc, #132]	@ (800277c <speed_control+0x130>)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6013      	str	r3, [r2, #0]

	// period = (1+ARR)*(1+PSC)/HCLK;
	stepper->tim->ARR = fabs(1/stepper->frequency)*HCLK-1;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8002702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800270a:	eef0 7ae7 	vabs.f32	s15, s15
 800270e:	ee17 0a90 	vmov	r0, s15
 8002712:	f7fd ff39 	bl	8000588 <__aeabi_f2d>
 8002716:	4604      	mov	r4, r0
 8002718:	460d      	mov	r5, r1
 800271a:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <speed_control+0x13c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd ff10 	bl	8000544 <__aeabi_ui2d>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4620      	mov	r0, r4
 800272a:	4629      	mov	r1, r5
 800272c:	f7fd ff84 	bl	8000638 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <speed_control+0x140>)
 800273e:	f7fd fdc3 	bl	80002c8 <__aeabi_dsub>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691c      	ldr	r4, [r3, #16]
 800274e:	f7fe fa4b 	bl	8000be8 <__aeabi_d2uiz>
 8002752:	4603      	mov	r3, r0
 8002754:	62e3      	str	r3, [r4, #44]	@ 0x2c
	*stepper->CCR = (stepper->tim->ARR+1)/2;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	0852      	lsrs	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]
	stepper->tim->EGR = TIM_EGR_UG;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2201      	movs	r2, #1
 800276c:	615a      	str	r2, [r3, #20]
}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bdb0      	pop	{r4, r5, r7, pc}
 8002776:	bf00      	nop
 8002778:	43af0000 	.word	0x43af0000
 800277c:	20000970 	.word	0x20000970
 8002780:	41cc0000 	.word	0x41cc0000
 8002784:	20000974 	.word	0x20000974
 8002788:	20000858 	.word	0x20000858
 800278c:	3ff00000 	.word	0x3ff00000

08002790 <set_speed>:

void set_speed(stepper_t *stepper, float speed){
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	ed87 0a00 	vstr	s0, [r7]
	stepper->setpoint_speed = speed;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	605a      	str	r2, [r3, #4]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <Stepper_init>:

void Stepper_init(stepper_t *stepper, TIM_HandleTypeDef *htim, uint32_t tim_channel,
		encoder_t *encoder, GPIO_TypeDef *DIR_PORT, uint16_t DIR_PIN){
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
	stepper->angle_step = ANGLE_STEP;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a30      	ldr	r2, [pc, #192]	@ (8002884 <Stepper_init+0xd4>)
 80027c2:	601a      	str	r2, [r3, #0]
	stepper->tim = htim->Instance;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	611a      	str	r2, [r3, #16]
	stepper->DIR_PORT = DIR_PORT;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	619a      	str	r2, [r3, #24]
	stepper->DIR_PIN = DIR_PIN;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8bba      	ldrh	r2, [r7, #28]
 80027d6:	839a      	strh	r2, [r3, #28]
	switch (tim_channel){
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d838      	bhi.n	8002850 <Stepper_init+0xa0>
 80027de:	a201      	add	r2, pc, #4	@ (adr r2, 80027e4 <Stepper_init+0x34>)
 80027e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e4:	08002819 	.word	0x08002819
 80027e8:	08002851 	.word	0x08002851
 80027ec:	08002851 	.word	0x08002851
 80027f0:	08002851 	.word	0x08002851
 80027f4:	08002827 	.word	0x08002827
 80027f8:	08002851 	.word	0x08002851
 80027fc:	08002851 	.word	0x08002851
 8002800:	08002851 	.word	0x08002851
 8002804:	08002835 	.word	0x08002835
 8002808:	08002851 	.word	0x08002851
 800280c:	08002851 	.word	0x08002851
 8002810:	08002851 	.word	0x08002851
 8002814:	08002843 	.word	0x08002843
	case TIM_CHANNEL_1:
		stepper->CCR = &stepper->tim->CCR1;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	615a      	str	r2, [r3, #20]
		break;
 8002824:	e018      	b.n	8002858 <Stepper_init+0xa8>
	case TIM_CHANNEL_2:
		stepper->CCR = &stepper->tim->CCR2;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	615a      	str	r2, [r3, #20]
		break;
 8002832:	e011      	b.n	8002858 <Stepper_init+0xa8>
	case TIM_CHANNEL_3:
		stepper->CCR = &stepper->tim->CCR3;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	615a      	str	r2, [r3, #20]
		break;
 8002840:	e00a      	b.n	8002858 <Stepper_init+0xa8>
	case TIM_CHANNEL_4:
		stepper->CCR = &stepper->tim->CCR4;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	615a      	str	r2, [r3, #20]
		break;
 800284e:	e003      	b.n	8002858 <Stepper_init+0xa8>
	default:
		stepper->CCR = NULL;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	615a      	str	r2, [r3, #20]
		break;
 8002856:	bf00      	nop
	}

	if (stepper->CCR != NULL)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <Stepper_init+0xb8>
		*stepper->CCR = 0; // Disattiva il PWM (duty cycle 0)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

	stepper->encoder = encoder;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	60da      	str	r2, [r3, #12]
	stepper->setpoint_speed = 0;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	605a      	str	r2, [r3, #4]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	3a80adff 	.word	0x3a80adff

08002888 <MAX72_init>:
    {0x0C, 0x01}, // Shutdown Register: normal operation
    {0x0F, 0x00}  // Display Test: off
};

void MAX72_init(display_t *display)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[8];
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8002890:	2300      	movs	r3, #0
 8002892:	75fb      	strb	r3, [r7, #23]
 8002894:	e035      	b.n	8002902 <MAX72_init+0x7a>
        // riempi txBuf con 4 volte InitCommands[cmd]
        for (uint8_t dev=0; dev<4; dev++) {
 8002896:	2300      	movs	r3, #0
 8002898:	75bb      	strb	r3, [r7, #22]
 800289a:	e01a      	b.n	80028d2 <MAX72_init+0x4a>
            txBuf[dev*2]   = InitCommands[cmd][0];
 800289c:	7dfa      	ldrb	r2, [r7, #23]
 800289e:	7dbb      	ldrb	r3, [r7, #22]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4929      	ldr	r1, [pc, #164]	@ (8002948 <MAX72_init+0xc0>)
 80028a4:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 80028a8:	3318      	adds	r3, #24
 80028aa:	443b      	add	r3, r7
 80028ac:	f803 2c0c 	strb.w	r2, [r3, #-12]
            txBuf[dev*2+1] = InitCommands[cmd][1];
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	7dba      	ldrb	r2, [r7, #22]
 80028b4:	0052      	lsls	r2, r2, #1
 80028b6:	3201      	adds	r2, #1
 80028b8:	4923      	ldr	r1, [pc, #140]	@ (8002948 <MAX72_init+0xc0>)
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	440b      	add	r3, r1
 80028be:	7859      	ldrb	r1, [r3, #1]
 80028c0:	f102 0318 	add.w	r3, r2, #24
 80028c4:	443b      	add	r3, r7
 80028c6:	460a      	mov	r2, r1
 80028c8:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (uint8_t dev=0; dev<4; dev++) {
 80028cc:	7dbb      	ldrb	r3, [r7, #22]
 80028ce:	3301      	adds	r3, #1
 80028d0:	75bb      	strb	r3, [r7, #22]
 80028d2:	7dbb      	ldrb	r3, [r7, #22]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d9e1      	bls.n	800289c <MAX72_init+0x14>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // CS
 80028d8:	2200      	movs	r2, #0
 80028da:	2110      	movs	r1, #16
 80028dc:	481b      	ldr	r0, [pc, #108]	@ (800294c <MAX72_init+0xc4>)
 80028de:	f001 ffef 	bl	80048c0 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 80028e2:	f107 010c 	add.w	r1, r7, #12
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028ea:	2208      	movs	r2, #8
 80028ec:	4818      	ldr	r0, [pc, #96]	@ (8002950 <MAX72_init+0xc8>)
 80028ee:	f002 fea4 	bl	800563a <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // CS
 80028f2:	2201      	movs	r2, #1
 80028f4:	2110      	movs	r1, #16
 80028f6:	4815      	ldr	r0, [pc, #84]	@ (800294c <MAX72_init+0xc4>)
 80028f8:	f001 ffe2 	bl	80048c0 <HAL_GPIO_WritePin>
    for (uint8_t cmd=0; cmd<5; cmd++) {
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	3301      	adds	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
 8002902:	7dfb      	ldrb	r3, [r7, #23]
 8002904:	2b04      	cmp	r3, #4
 8002906:	d9c6      	bls.n	8002896 <MAX72_init+0xe>
    }

    display->data_count = 0; // Inizializza il numero di dati a 0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    display->current_index = 0; // Inizializza l'indice corrente a 0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    display->data_duration = 5; // Imposta la durata di visualizzazione a 5 secondi
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2205      	movs	r2, #5
 800291c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    display->change_enabled = 1; // Abilita il cambio automatico dei dati
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    display->update_enabled = 1; // Abilita l'aggiornamento automatico dei dati
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    display->last_change_time = HAL_GetTick(); // Inizializza il tempo dell'ultimo cambio a ora corrente
 8002930:	f001 f8e0 	bl	8003af4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	649a      	str	r2, [r3, #72]	@ 0x48
    MAX72_Clear(); // Pulisce il display all'inizio
 800293a:	f000 f847 	bl	80029cc <MAX72_Clear>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	08009d4c 	.word	0x08009d4c
 800294c:	40020400 	.word	0x40020400
 8002950:	200005f8 	.word	0x200005f8

08002954 <MAX72_SendRow>:

void MAX72_SendRow(uint8_t row, uint8_t pattern[DEV_NUM])
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	6039      	str	r1, [r7, #0]
 800295e:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[8];
    // pattern[i] = dato per il modulo i
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 8002960:	2300      	movs	r3, #0
 8002962:	75fb      	strb	r3, [r7, #23]
 8002964:	e014      	b.n	8002990 <MAX72_SendRow+0x3c>
        txBuf[dev*2]   = row;          // registro DIG[row]
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	3318      	adds	r3, #24
 800296c:	443b      	add	r3, r7
 800296e:	79fa      	ldrb	r2, [r7, #7]
 8002970:	f803 2c0c 	strb.w	r2, [r3, #-12]
        txBuf[dev*2+1] = pattern[dev]; // i‑esimo byte di dati
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	441a      	add	r2, r3
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	3301      	adds	r3, #1
 8002980:	7812      	ldrb	r2, [r2, #0]
 8002982:	3318      	adds	r3, #24
 8002984:	443b      	add	r3, r7
 8002986:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 800298a:	7dfb      	ldrb	r3, [r7, #23]
 800298c:	3301      	adds	r3, #1
 800298e:	75fb      	strb	r3, [r7, #23]
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d9e7      	bls.n	8002966 <MAX72_SendRow+0x12>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002996:	2200      	movs	r2, #0
 8002998:	2110      	movs	r1, #16
 800299a:	480a      	ldr	r0, [pc, #40]	@ (80029c4 <MAX72_SendRow+0x70>)
 800299c:	f001 ff90 	bl	80048c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 80029a0:	f107 010c 	add.w	r1, r7, #12
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029a8:	2208      	movs	r2, #8
 80029aa:	4807      	ldr	r0, [pc, #28]	@ (80029c8 <MAX72_SendRow+0x74>)
 80029ac:	f002 fe45 	bl	800563a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80029b0:	2201      	movs	r2, #1
 80029b2:	2110      	movs	r1, #16
 80029b4:	4803      	ldr	r0, [pc, #12]	@ (80029c4 <MAX72_SendRow+0x70>)
 80029b6:	f001 ff83 	bl	80048c0 <HAL_GPIO_WritePin>
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40020400 	.word	0x40020400
 80029c8:	200005f8 	.word	0x200005f8

080029cc <MAX72_Clear>:

void MAX72_Clear(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
	uint8_t emptyPattern[4] = {0, 0, 0, 0};
 80029d2:	2300      	movs	r3, #0
 80029d4:	603b      	str	r3, [r7, #0]
	    for (uint8_t row=1; row<=8; row++) {
 80029d6:	2301      	movs	r3, #1
 80029d8:	71fb      	strb	r3, [r7, #7]
 80029da:	e008      	b.n	80029ee <MAX72_Clear+0x22>
	        MAX72_SendRow(row, emptyPattern);
 80029dc:	463a      	mov	r2, r7
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ffb6 	bl	8002954 <MAX72_SendRow>
	    for (uint8_t row=1; row<=8; row++) {
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	3301      	adds	r3, #1
 80029ec:	71fb      	strb	r3, [r7, #7]
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d9f3      	bls.n	80029dc <MAX72_Clear+0x10>
	    }
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <MAX72_Add_Data>:

void MAX72_Add_Data(display_t *display, display_data_t *data) {
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
	if (display->data_count < MAX_DATA_LENGTH) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a0e:	2b07      	cmp	r3, #7
 8002a10:	d813      	bhi.n	8002a3a <MAX72_Add_Data+0x3c>
		display->data[display->data_count] = *data; // Aggiungi i dati al display
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6839      	ldr	r1, [r7, #0]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	460a      	mov	r2, r1
 8002a22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a26:	e883 0003 	stmia.w	r3, {r0, r1}
		display->data_count++; // Incrementa il conteggio dei dati
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a30:	3301      	adds	r3, #1
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}

	if (display->data_count == 1) {
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d103      	bne.n	8002a4c <MAX72_Add_Data+0x4e>
		MAX72_Change_Data(display,1); // Se è il primo dato, aggiorna subito il display
 8002a44:	2101      	movs	r1, #1
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f8f2 	bl	8002c30 <MAX72_Change_Data>
	}
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <MAX72_Update_Data>:

void MAX72_Update_Data(display_t *display) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	if (display->data_count == 0 || !display->update_enabled) {
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80d5 	beq.w	8002c12 <MAX72_Update_Data+0x1be>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80cf 	beq.w	8002c12 <MAX72_Update_Data+0x1be>
		return; // Non ci sono dati da visualizzare
	}

	display_data_t *current_data = &display->data[display->current_index];
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

	switch (current_data->settings) {
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	791b      	ldrb	r3, [r3, #4]
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	f200 80cc 	bhi.w	8002c24 <MAX72_Update_Data+0x1d0>
 8002a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a94 <MAX72_Update_Data+0x40>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002aa5 	.word	0x08002aa5
 8002a98:	08002bc1 	.word	0x08002bc1
 8002a9c:	08002be7 	.word	0x08002be7
 8002aa0:	08002c01 	.word	0x08002c01
		case PRINT_INT:
			switch(current_data->type) {
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	799b      	ldrb	r3, [r3, #6]
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	f200 80b4 	bhi.w	8002c16 <MAX72_Update_Data+0x1c2>
 8002aae:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab4 <MAX72_Update_Data+0x60>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002add 	.word	0x08002add
 8002ab8:	08002af1 	.word	0x08002af1
 8002abc:	08002b07 	.word	0x08002b07
 8002ac0:	08002b1d 	.word	0x08002b1d
 8002ac4:	08002b33 	.word	0x08002b33
 8002ac8:	08002b49 	.word	0x08002b49
 8002acc:	08002b61 	.word	0x08002b61
 8002ad0:	08002b79 	.word	0x08002b79
 8002ad4:	08002b8d 	.word	0x08002b8d
 8002ad8:	08002ba3 	.word	0x08002ba3
				case DISPLAY_TYPE_INT:
					MAX72_Print_Int(*(int *)current_data->data, current_data->string_settings);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	795b      	ldrb	r3, [r3, #5]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f000 fbad 	bl	8003248 <MAX72_Print_Int>
					break;
 8002aee:	e066      	b.n	8002bbe <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT8:
					MAX72_Print_Int((int)*(uint8_t *)current_data->data, current_data->string_settings);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	795b      	ldrb	r3, [r3, #5]
 8002afc:	4619      	mov	r1, r3
 8002afe:	4610      	mov	r0, r2
 8002b00:	f000 fba2 	bl	8003248 <MAX72_Print_Int>
					break;
 8002b04:	e05b      	b.n	8002bbe <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT16:
					MAX72_Print_Int((int)*(uint16_t *)current_data->data, current_data->string_settings);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	795b      	ldrb	r3, [r3, #5]
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f000 fb97 	bl	8003248 <MAX72_Print_Int>
					break;
 8002b1a:	e050      	b.n	8002bbe <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT32:
					MAX72_Print_Int((int)*(uint32_t *)current_data->data, current_data->string_settings);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	795b      	ldrb	r3, [r3, #5]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	f000 fb8c 	bl	8003248 <MAX72_Print_Int>
					break;
 8002b30:	e045      	b.n	8002bbe <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT64:
					MAX72_Print_Int((int)*(uint64_t *)current_data->data, current_data->string_settings);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	795b      	ldrb	r3, [r3, #5]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f000 fb81 	bl	8003248 <MAX72_Print_Int>
					break;
 8002b46:	e03a      	b.n	8002bbe <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT8:
					MAX72_Print_Int(*(int8_t *)current_data->data, current_data->string_settings);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f993 3000 	ldrsb.w	r3, [r3]
 8002b50:	461a      	mov	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	795b      	ldrb	r3, [r3, #5]
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f000 fb75 	bl	8003248 <MAX72_Print_Int>
					break;
 8002b5e:	e02e      	b.n	8002bbe <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT16:
					MAX72_Print_Int(*(int16_t *)current_data->data, current_data->string_settings);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	795b      	ldrb	r3, [r3, #5]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f000 fb69 	bl	8003248 <MAX72_Print_Int>
					break;
 8002b76:	e022      	b.n	8002bbe <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT32:
					MAX72_Print_Int(*(int32_t *)current_data->data, current_data->string_settings);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	795b      	ldrb	r3, [r3, #5]
 8002b82:	4619      	mov	r1, r3
 8002b84:	4610      	mov	r0, r2
 8002b86:	f000 fb5f 	bl	8003248 <MAX72_Print_Int>
					break;
 8002b8a:	e018      	b.n	8002bbe <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT64:
					MAX72_Print_Int(*(int64_t *)current_data->data, current_data->string_settings);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	795b      	ldrb	r3, [r3, #5]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	f000 fb54 	bl	8003248 <MAX72_Print_Int>
					break;
 8002ba0:	e00d      	b.n	8002bbe <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_FLOAT:
					MAX72_Print_Int((int)*(float *)current_data->data, current_data->string_settings);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	795b      	ldrb	r3, [r3, #5]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	ee17 0a90 	vmov	r0, s15
 8002bb8:	f000 fb46 	bl	8003248 <MAX72_Print_Int>
					break;
 8002bbc:	bf00      	nop
			}
			break;
 8002bbe:	e02a      	b.n	8002c16 <MAX72_Update_Data+0x1c2>
		case PRINT_FLOAT:
			if (current_data->type == DISPLAY_TYPE_FLOAT) {
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	799b      	ldrb	r3, [r3, #6]
 8002bc4:	2b09      	cmp	r3, #9
 8002bc6:	d128      	bne.n	8002c1a <MAX72_Update_Data+0x1c6>
				MAX72_Print_Float(*(float *)current_data->data, current_data->float_decimals, current_data->string_settings);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	edd3 7a00 	vldr	s15, [r3]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	79da      	ldrb	r2, [r3, #7]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	795b      	ldrb	r3, [r3, #5]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4610      	mov	r0, r2
 8002bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8002be0:	f000 fb8e 	bl	8003300 <MAX72_Print_Float>
			}
			break;
 8002be4:	e019      	b.n	8002c1a <MAX72_Update_Data+0x1c6>
		case PRINT_STRING:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	799b      	ldrb	r3, [r3, #6]
 8002bea:	2b0a      	cmp	r3, #10
 8002bec:	d117      	bne.n	8002c1e <MAX72_Update_Data+0x1ca>
				MAX72_Print_String((const char *)current_data->data, current_data->string_settings);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	795b      	ldrb	r3, [r3, #5]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f000 f8a5 	bl	8002d48 <MAX72_Print_String>
			}
			break;
 8002bfe:	e00e      	b.n	8002c1e <MAX72_Update_Data+0x1ca>
		case PRINT_SCROLL:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	799b      	ldrb	r3, [r3, #6]
 8002c04:	2b0a      	cmp	r3, #10
 8002c06:	d10c      	bne.n	8002c22 <MAX72_Update_Data+0x1ce>
				scroll_state.text = (const char *)current_data->data;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a07      	ldr	r2, [pc, #28]	@ (8002c2c <MAX72_Update_Data+0x1d8>)
 8002c0e:	6013      	str	r3, [r2, #0]
			}
			break;
 8002c10:	e007      	b.n	8002c22 <MAX72_Update_Data+0x1ce>
		return; // Non ci sono dati da visualizzare
 8002c12:	bf00      	nop
 8002c14:	e006      	b.n	8002c24 <MAX72_Update_Data+0x1d0>
			break;
 8002c16:	bf00      	nop
 8002c18:	e004      	b.n	8002c24 <MAX72_Update_Data+0x1d0>
			break;
 8002c1a:	bf00      	nop
 8002c1c:	e002      	b.n	8002c24 <MAX72_Update_Data+0x1d0>
			break;
 8002c1e:	bf00      	nop
 8002c20:	e000      	b.n	8002c24 <MAX72_Update_Data+0x1d0>
			break;
 8002c22:	bf00      	nop
	}
}
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200009e4 	.word	0x200009e4

08002c30 <MAX72_Change_Data>:

void MAX72_Change_Data(display_t *display, uint8_t force_change) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	70fb      	strb	r3, [r7, #3]
	if (display->data_count == 0 || (!display->change_enabled && !force_change)) {
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d055      	beq.n	8002cf2 <MAX72_Change_Data+0xc2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <MAX72_Change_Data+0x26>
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d04d      	beq.n	8002cf2 <MAX72_Change_Data+0xc2>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
	}

	uint32_t currentTime = HAL_GetTick();
 8002c56:	f000 ff4d 	bl	8003af4 <HAL_GetTick>
 8002c5a:	60f8      	str	r0, [r7, #12]
	if (!force_change && currentTime - display->last_change_time < (uint32_t)display->data_duration * 1000) {
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <MAX72_Change_Data+0x4e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	1ad2      	subs	r2, r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c70:	4619      	mov	r1, r3
 8002c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d33b      	bcc.n	8002cf6 <MAX72_Change_Data+0xc6>
		return;
	}
	display->current_index = (display->current_index + 1) % display->data_count;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c84:	3301      	adds	r3, #1
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8002c8c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c90:	fb01 f202 	mul.w	r2, r1, r2
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	display->last_change_time = currentTime;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	649a      	str	r2, [r3, #72]	@ 0x48

	if (display->data[display->current_index].settings == PRINT_SCROLL) {
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	791b      	ldrb	r3, [r3, #4]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d113      	bne.n	8002cde <MAX72_Change_Data+0xae>
		if(!scroll_state.enabled || display->data_count > 1){
 8002cb6:	4b12      	ldr	r3, [pc, #72]	@ (8002d00 <MAX72_Change_Data+0xd0>)
 8002cb8:	7b5b      	ldrb	r3, [r3, #13]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <MAX72_Change_Data+0x98>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d910      	bls.n	8002cea <MAX72_Change_Data+0xba>
		MAX72_Scroll_Start_IT((const char *)display->data[display->current_index].data);}
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fc80 	bl	80035dc <MAX72_Scroll_Start_IT>
 8002cdc:	e005      	b.n	8002cea <MAX72_Change_Data+0xba>
	} else if (scroll_state.enabled) {
 8002cde:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <MAX72_Change_Data+0xd0>)
 8002ce0:	7b5b      	ldrb	r3, [r3, #13]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MAX72_Change_Data+0xba>
		MAX72_Scroll_Stop();
 8002ce6:	f000 fcdd 	bl	80036a4 <MAX72_Scroll_Stop>
	}

	MAX72_Update_Data(display); // Aggiorna i dati visualizzati)
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff feb2 	bl	8002a54 <MAX72_Update_Data>
 8002cf0:	e002      	b.n	8002cf8 <MAX72_Change_Data+0xc8>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <MAX72_Change_Data+0xc8>
		return;
 8002cf6:	bf00      	nop
}
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200009e4 	.word	0x200009e4

08002d04 <MAX72_Stop_Changing_Data>:

void MAX72_Stop_Changing_Data(display_t *display, uint8_t stop_update) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	70fb      	strb	r3, [r7, #3]
	display->change_enabled = 0; // Disabilita il cambio automatico dei dati
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	if (stop_update) {
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <MAX72_Stop_Changing_Data+0x20>
		MAX72_Stop_Updating_Data(display); // Disabilita l'aggiornamento automatico dei dati
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f804 	bl	8002d2c <MAX72_Stop_Updating_Data>
	}
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <MAX72_Stop_Updating_Data>:
void MAX72_Resume_Changing_Data(display_t *display) {
	display->change_enabled = 1; // Abilita il cambio automatico dei dati
	MAX72_Resume_Updating_Data(display); // Assicurati che l'aggiornamento sia abilitato
}

void MAX72_Stop_Updating_Data(display_t *display) {
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	display->update_enabled = 0; // Disabilita l'aggiornamento automatico dei dati
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <MAX72_Print_String>:
//        HAL_Delay(500);
//    }
//}

void MAX72_Print_String(const char *str, uint8_t settings)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b094      	sub	sp, #80	@ 0x50
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
    uint8_t len = strlen(str);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7fd faab 	bl	80002b0 <strlen>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    if (settings == MINIDIGITS) {
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	f040 8119 	bne.w	8002f9a <MAX72_Print_String+0x252>
    	char padded[8] = {0};
 8002d68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
    	        // Calcola padding all'inizio (right align)
    	        uint8_t start = (len < 8) ? (8 - len) : 0;
 8002d72:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002d76:	2b07      	cmp	r3, #7
 8002d78:	d805      	bhi.n	8002d86 <MAX72_Print_String+0x3e>
 8002d7a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002d7e:	f1c3 0308 	rsb	r3, r3, #8
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	e000      	b.n	8002d88 <MAX72_Print_String+0x40>
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    	        // Spazi iniziali
    	        for (uint8_t i = 0; i < start; i++)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002d92:	e00b      	b.n	8002dac <MAX72_Print_String+0x64>
    	            padded[i] = ' ';
 8002d94:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002d98:	3350      	adds	r3, #80	@ 0x50
 8002d9a:	443b      	add	r3, r7
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < start; i++)
 8002da2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002da6:	3301      	adds	r3, #1
 8002da8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002dac:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002db0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d3ed      	bcc.n	8002d94 <MAX72_Print_String+0x4c>
    	        // Copia la stringa
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8002db8:	2300      	movs	r3, #0
 8002dba:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002dbe:	e012      	b.n	8002de6 <MAX72_Print_String+0x9e>
    	            padded[start + i] = str[i];
 8002dc0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	441a      	add	r2, r3
 8002dc8:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8002dcc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002dd0:	440b      	add	r3, r1
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	3350      	adds	r3, #80	@ 0x50
 8002dd6:	443b      	add	r3, r7
 8002dd8:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8002ddc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002de0:	3301      	adds	r3, #1
 8002de2:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002de6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002dea:	2b07      	cmp	r3, #7
 8002dec:	d805      	bhi.n	8002dfa <MAX72_Print_String+0xb2>
 8002dee:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8002df2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d3e2      	bcc.n	8002dc0 <MAX72_Print_String+0x78>

        char reversed[8];
        for (uint8_t i = 0; i < 8; i++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002e00:	e012      	b.n	8002e28 <MAX72_Print_String+0xe0>
            reversed[i] = padded[7 - i];
 8002e02:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e06:	f1c3 0207 	rsb	r2, r3, #7
 8002e0a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e0e:	3250      	adds	r2, #80	@ 0x50
 8002e10:	443a      	add	r2, r7
 8002e12:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8002e16:	3350      	adds	r3, #80	@ 0x50
 8002e18:	443b      	add	r3, r7
 8002e1a:	f803 2c28 	strb.w	r2, [r3, #-40]
        for (uint8_t i = 0; i < 8; i++)
 8002e1e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e22:	3301      	adds	r3, #1
 8002e24:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002e28:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e2c:	2b07      	cmp	r3, #7
 8002e2e:	d9e8      	bls.n	8002e02 <MAX72_Print_String+0xba>

        for (uint8_t row = 0; row < 8; row++) {
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8002e36:	e0aa      	b.n	8002f8e <MAX72_Print_String+0x246>
            uint8_t pat[4] = {0};
 8002e38:	2300      	movs	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24

            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8002e42:	e090      	b.n	8002f66 <MAX72_Print_String+0x21e>
                uint8_t c1 = reversed[byte_idx * 2];
 8002e44:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	3350      	adds	r3, #80	@ 0x50
 8002e4c:	443b      	add	r3, r7
 8002e4e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e52:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t c2 = reversed[byte_idx * 2 + 1];
 8002e56:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	3350      	adds	r3, #80	@ 0x50
 8002e60:	443b      	add	r3, r7
 8002e62:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e66:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                uint8_t char1_pattern = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                uint8_t char2_pattern = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                if (c1 >= '0' && c1 <= '9')
 8002e76:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002e7a:	2b2f      	cmp	r3, #47	@ 0x2f
 8002e7c:	d913      	bls.n	8002ea6 <MAX72_Print_String+0x15e>
 8002e7e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002e82:	2b39      	cmp	r3, #57	@ 0x39
 8002e84:	d80f      	bhi.n	8002ea6 <MAX72_Print_String+0x15e>
                    char1_pattern = DIGITS[c1 - '0' + 2][row] & 0x07;
 8002e86:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002e8a:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 8002e8e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002e92:	49cd      	ldr	r1, [pc, #820]	@ (80031c8 <MAX72_Print_String+0x480>)
 8002e94:	00d2      	lsls	r2, r2, #3
 8002e96:	440a      	add	r2, r1
 8002e98:	4413      	add	r3, r2
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8002ea4:	e019      	b.n	8002eda <MAX72_Print_String+0x192>
                else if (c1 == '-')
 8002ea6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002eaa:	2b2d      	cmp	r3, #45	@ 0x2d
 8002eac:	d109      	bne.n	8002ec2 <MAX72_Print_String+0x17a>
                    char1_pattern = DIGITS[1][row] & 0x07;
 8002eae:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002eb2:	4ac5      	ldr	r2, [pc, #788]	@ (80031c8 <MAX72_Print_String+0x480>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	7a1b      	ldrb	r3, [r3, #8]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8002ec0:	e00b      	b.n	8002eda <MAX72_Print_String+0x192>
                else if (c1 == '.')
 8002ec2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002ec6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ec8:	d107      	bne.n	8002eda <MAX72_Print_String+0x192>
					char1_pattern = DIGITS[0][row] & 0x07;
 8002eca:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002ece:	4abe      	ldr	r2, [pc, #760]	@ (80031c8 <MAX72_Print_String+0x480>)
 8002ed0:	5cd3      	ldrb	r3, [r2, r3]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

                if (c2 >= '0' && c2 <= '9')
 8002eda:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002ede:	2b2f      	cmp	r3, #47	@ 0x2f
 8002ee0:	d913      	bls.n	8002f0a <MAX72_Print_String+0x1c2>
 8002ee2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002ee6:	2b39      	cmp	r3, #57	@ 0x39
 8002ee8:	d80f      	bhi.n	8002f0a <MAX72_Print_String+0x1c2>
                    char2_pattern = DIGITS[c2 - '0' + 2][row] & 0x07;
 8002eea:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002eee:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 8002ef2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002ef6:	49b4      	ldr	r1, [pc, #720]	@ (80031c8 <MAX72_Print_String+0x480>)
 8002ef8:	00d2      	lsls	r2, r2, #3
 8002efa:	440a      	add	r2, r1
 8002efc:	4413      	add	r3, r2
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8002f08:	e019      	b.n	8002f3e <MAX72_Print_String+0x1f6>
                else if (c2 == '-')
 8002f0a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002f0e:	2b2d      	cmp	r3, #45	@ 0x2d
 8002f10:	d109      	bne.n	8002f26 <MAX72_Print_String+0x1de>
                    char2_pattern = DIGITS[1][row] & 0x07;
 8002f12:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002f16:	4aac      	ldr	r2, [pc, #688]	@ (80031c8 <MAX72_Print_String+0x480>)
 8002f18:	4413      	add	r3, r2
 8002f1a:	7a1b      	ldrb	r3, [r3, #8]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8002f24:	e00b      	b.n	8002f3e <MAX72_Print_String+0x1f6>
                else if (c2 == '.')
 8002f26:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002f2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f2c:	d107      	bne.n	8002f3e <MAX72_Print_String+0x1f6>
                	char2_pattern = DIGITS[0][row] & 0x07;
 8002f2e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002f32:	4aa5      	ldr	r2, [pc, #660]	@ (80031c8 <MAX72_Print_String+0x480>)
 8002f34:	5cd3      	ldrb	r3, [r2, r3]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                pat[byte_idx] = (char1_pattern << 4) | char2_pattern;
 8002f3e:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	b25a      	sxtb	r2, r3
 8002f46:	f997 3049 	ldrsb.w	r3, [r7, #73]	@ 0x49
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	b25a      	sxtb	r2, r3
 8002f4e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	3350      	adds	r3, #80	@ 0x50
 8002f56:	443b      	add	r3, r7
 8002f58:	f803 2c2c 	strb.w	r2, [r3, #-44]
            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8002f5c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002f60:	3301      	adds	r3, #1
 8002f62:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8002f66:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	f67f af6a 	bls.w	8002e44 <MAX72_Print_String+0xfc>
            }

            MAX72_SendRow(row + 1, pat);
 8002f70:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002f74:	3301      	adds	r3, #1
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fce8 	bl	8002954 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8002f84:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8002f8e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002f92:	2b07      	cmp	r3, #7
 8002f94:	f67f af50 	bls.w	8002e38 <MAX72_Print_String+0xf0>
            for (uint8_t i = 0; i < 4; i++)
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
            MAX72_SendRow(row + 1, pat);
        }
    }
}
 8002f98:	e150      	b.n	800323c <MAX72_Print_String+0x4f4>
    else if (settings == FLOAT) {
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	f040 80d1 	bne.w	8003144 <MAX72_Print_String+0x3fc>
        char reversed[4] = {0};
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	623b      	str	r3, [r7, #32]
        int8_t dot_pos = -1;
 8002fa6:	23ff      	movs	r3, #255	@ 0xff
 8002fa8:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < len; i++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002fb2:	e010      	b.n	8002fd6 <MAX72_Print_String+0x28e>
            if (str[i] == '.') { dot_pos = i; break; }
 8002fb4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4413      	add	r3, r2
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fc0:	d104      	bne.n	8002fcc <MAX72_Print_String+0x284>
 8002fc2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002fc6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8002fca:	e00a      	b.n	8002fe2 <MAX72_Print_String+0x29a>
        for (uint8_t i = 0; i < len; i++)
 8002fcc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002fd6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002fda:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d3e8      	bcc.n	8002fb4 <MAX72_Print_String+0x26c>
        char no_dot_str[5] = {0};
 8002fe2:	f107 0318 	add.w	r3, r7, #24
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	711a      	strb	r2, [r3, #4]
        uint8_t no_dot_len = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002ff8:	e019      	b.n	800302e <MAX72_Print_String+0x2e6>
            if (str[i] != '.') no_dot_str[no_dot_len++] = str[i];
 8002ffa:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b2e      	cmp	r3, #46	@ 0x2e
 8003006:	d00d      	beq.n	8003024 <MAX72_Print_String+0x2dc>
 8003008:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	441a      	add	r2, r3
 8003010:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003014:	1c59      	adds	r1, r3, #1
 8003016:	f887 1046 	strb.w	r1, [r7, #70]	@ 0x46
 800301a:	7812      	ldrb	r2, [r2, #0]
 800301c:	3350      	adds	r3, #80	@ 0x50
 800301e:	443b      	add	r3, r7
 8003020:	f803 2c38 	strb.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 8003024:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003028:	3301      	adds	r3, #1
 800302a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800302e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8003032:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003036:	429a      	cmp	r2, r3
 8003038:	d203      	bcs.n	8003042 <MAX72_Print_String+0x2fa>
 800303a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800303e:	2b03      	cmp	r3, #3
 8003040:	d9db      	bls.n	8002ffa <MAX72_Print_String+0x2b2>
        dot_pos = no_dot_len - dot_pos - 1;
 8003042:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003046:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < 4; i++)
 8003056:	2300      	movs	r3, #0
 8003058:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800305c:	e01c      	b.n	8003098 <MAX72_Print_String+0x350>
            reversed[i] = (i < no_dot_len) ? no_dot_str[no_dot_len - 1 - i] : ' ';
 800305e:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8003062:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003066:	429a      	cmp	r2, r3
 8003068:	d20a      	bcs.n	8003080 <MAX72_Print_String+0x338>
 800306a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800306e:	1e5a      	subs	r2, r3, #1
 8003070:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	3350      	adds	r3, #80	@ 0x50
 8003078:	443b      	add	r3, r7
 800307a:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 800307e:	e000      	b.n	8003082 <MAX72_Print_String+0x33a>
 8003080:	2220      	movs	r2, #32
 8003082:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003086:	3350      	adds	r3, #80	@ 0x50
 8003088:	443b      	add	r3, r7
 800308a:	f803 2c30 	strb.w	r2, [r3, #-48]
        for (uint8_t i = 0; i < 4; i++)
 800308e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003092:	3301      	adds	r3, #1
 8003094:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8003098:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800309c:	2b03      	cmp	r3, #3
 800309e:	d9de      	bls.n	800305e <MAX72_Print_String+0x316>
        for (uint8_t row = 0; row < 8; row++) {
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030a6:	e048      	b.n	800313a <MAX72_Print_String+0x3f2>
            for (uint8_t i = 0; i < 4; i++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80030ae:	e01e      	b.n	80030ee <MAX72_Print_String+0x3a6>
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 80030b0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80030b4:	3350      	adds	r3, #80	@ 0x50
 80030b6:	443b      	add	r3, r7
 80030b8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80030bc:	f1a3 0220 	sub.w	r2, r3, #32
 80030c0:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 80030c4:	4841      	ldr	r0, [pc, #260]	@ (80031cc <MAX72_Print_String+0x484>)
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	4403      	add	r3, r0
 80030ce:	440b      	add	r3, r1
 80030d0:	3301      	adds	r3, #1
 80030d2:	781a      	ldrb	r2, [r3, #0]
 80030d4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80030d8:	00d2      	lsls	r2, r2, #3
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	3350      	adds	r3, #80	@ 0x50
 80030de:	443b      	add	r3, r7
 80030e0:	f803 2c3c 	strb.w	r2, [r3, #-60]
            for (uint8_t i = 0; i < 4; i++)
 80030e4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80030e8:	3301      	adds	r3, #1
 80030ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80030ee:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d9dc      	bls.n	80030b0 <MAX72_Print_String+0x368>
            if (row == 0) pat[dot_pos] |= 0b010;
 80030f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10e      	bne.n	800311c <MAX72_Print_String+0x3d4>
 80030fe:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8003102:	3350      	adds	r3, #80	@ 0x50
 8003104:	443b      	add	r3, r7
 8003106:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 800310a:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 800310e:	f042 0202 	orr.w	r2, r2, #2
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	3350      	adds	r3, #80	@ 0x50
 8003116:	443b      	add	r3, r7
 8003118:	f803 2c3c 	strb.w	r2, [r3, #-60]
            MAX72_SendRow(row + 1, pat);
 800311c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003120:	3301      	adds	r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f107 0214 	add.w	r2, r7, #20
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fc12 	bl	8002954 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8003130:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003134:	3301      	adds	r3, #1
 8003136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800313a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800313e:	2b07      	cmp	r3, #7
 8003140:	d9b2      	bls.n	80030a8 <MAX72_Print_String+0x360>
}
 8003142:	e07b      	b.n	800323c <MAX72_Print_String+0x4f4>
        char reversed[4] = {0};
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 8003148:	2300      	movs	r3, #0
 800314a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800314e:	e014      	b.n	800317a <MAX72_Print_String+0x432>
            reversed[i] = str[len - 1 - i];
 8003150:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003154:	1e5a      	subs	r2, r3, #1
 8003156:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	461a      	mov	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	441a      	add	r2, r3
 8003162:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003166:	7812      	ldrb	r2, [r2, #0]
 8003168:	3350      	adds	r3, #80	@ 0x50
 800316a:	443b      	add	r3, r7
 800316c:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 8003170:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003174:	3301      	adds	r3, #1
 8003176:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800317a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800317e:	2b03      	cmp	r3, #3
 8003180:	d805      	bhi.n	800318e <MAX72_Print_String+0x446>
 8003182:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8003186:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800318a:	429a      	cmp	r2, r3
 800318c:	d3e0      	bcc.n	8003150 <MAX72_Print_String+0x408>
        for (uint8_t i = len; i < 4; i++)
 800318e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003192:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8003196:	e00b      	b.n	80031b0 <MAX72_Print_String+0x468>
            reversed[i] = ' ';
 8003198:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800319c:	3350      	adds	r3, #80	@ 0x50
 800319e:	443b      	add	r3, r7
 80031a0:	2220      	movs	r2, #32
 80031a2:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = len; i < 4; i++)
 80031a6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80031aa:	3301      	adds	r3, #1
 80031ac:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80031b0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d9ef      	bls.n	8003198 <MAX72_Print_String+0x450>
        for (uint8_t row = 0; row < 8; row++) {
 80031b8:	2300      	movs	r3, #0
 80031ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80031be:	e039      	b.n	8003234 <MAX72_Print_String+0x4ec>
            for (uint8_t i = 0; i < 4; i++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80031c6:	e022      	b.n	800320e <MAX72_Print_String+0x4c6>
 80031c8:	20000360 	.word	0x20000360
 80031cc:	20000008 	.word	0x20000008
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 80031d0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80031d4:	3350      	adds	r3, #80	@ 0x50
 80031d6:	443b      	add	r3, r7
 80031d8:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80031dc:	f1a3 0220 	sub.w	r2, r3, #32
 80031e0:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 80031e4:	4817      	ldr	r0, [pc, #92]	@ (8003244 <MAX72_Print_String+0x4fc>)
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	4403      	add	r3, r0
 80031ee:	440b      	add	r3, r1
 80031f0:	3301      	adds	r3, #1
 80031f2:	781a      	ldrb	r2, [r3, #0]
 80031f4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80031f8:	00d2      	lsls	r2, r2, #3
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	3350      	adds	r3, #80	@ 0x50
 80031fe:	443b      	add	r3, r7
 8003200:	f803 2c44 	strb.w	r2, [r3, #-68]
            for (uint8_t i = 0; i < 4; i++)
 8003204:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003208:	3301      	adds	r3, #1
 800320a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800320e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003212:	2b03      	cmp	r3, #3
 8003214:	d9dc      	bls.n	80031d0 <MAX72_Print_String+0x488>
            MAX72_SendRow(row + 1, pat);
 8003216:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800321a:	3301      	adds	r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f107 020c 	add.w	r2, r7, #12
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fb95 	bl	8002954 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 800322a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800322e:	3301      	adds	r3, #1
 8003230:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003234:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003238:	2b07      	cmp	r3, #7
 800323a:	d9c1      	bls.n	80031c0 <MAX72_Print_String+0x478>
}
 800323c:	bf00      	nop
 800323e:	3750      	adds	r7, #80	@ 0x50
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000008 	.word	0x20000008

08003248 <MAX72_Print_Int>:


void MAX72_Print_Int(int num, uint8_t minidigits)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	70fb      	strb	r3, [r7, #3]
    char sign = num < 0 ? '-' : '\0';
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	da01      	bge.n	800325e <MAX72_Print_Int+0x16>
 800325a:	232d      	movs	r3, #45	@ 0x2d
 800325c:	e000      	b.n	8003260 <MAX72_Print_Int+0x18>
 800325e:	2300      	movs	r3, #0
 8003260:	74fb      	strb	r3, [r7, #19]
    unsigned u = (num < 0) ? (unsigned) (-num) : (unsigned) num;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	bfb8      	it	lt
 8003268:	425b      	neglt	r3, r3
 800326a:	617b      	str	r3, [r7, #20]

    char str[9]; // 8 digits + null terminator
    if (minidigits) {
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <MAX72_Print_Int+0x46>
        // segno + 7 cifre (tot 8): taglia alle ultime 7
        u %= sign=='-'?10000000u:100000000u;
 8003272:	7cfb      	ldrb	r3, [r7, #19]
 8003274:	2b2d      	cmp	r3, #45	@ 0x2d
 8003276:	d101      	bne.n	800327c <MAX72_Print_Int+0x34>
 8003278:	4b1d      	ldr	r3, [pc, #116]	@ (80032f0 <MAX72_Print_Int+0xa8>)
 800327a:	e000      	b.n	800327e <MAX72_Print_Int+0x36>
 800327c:	4b1d      	ldr	r3, [pc, #116]	@ (80032f4 <MAX72_Print_Int+0xac>)
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	fbb2 f1f3 	udiv	r1, r2, r3
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	e00e      	b.n	80032ac <MAX72_Print_Int+0x64>
    } else {
        // segno + 3 cifre (tot 4): taglia alle ultime 3
        u %= sign=='-'?1000u:10000u;
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	2b2d      	cmp	r3, #45	@ 0x2d
 8003292:	d102      	bne.n	800329a <MAX72_Print_Int+0x52>
 8003294:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003298:	e001      	b.n	800329e <MAX72_Print_Int+0x56>
 800329a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	617b      	str	r3, [r7, #20]
    }

    if (sign == '-'){
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2b2d      	cmp	r3, #45	@ 0x2d
 80032b0:	d107      	bne.n	80032c2 <MAX72_Print_Int+0x7a>
    	snprintf(str, sizeof(str), "-%u", u);
 80032b2:	f107 0008 	add.w	r0, r7, #8
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	4a0f      	ldr	r2, [pc, #60]	@ (80032f8 <MAX72_Print_Int+0xb0>)
 80032ba:	2109      	movs	r1, #9
 80032bc:	f004 faea 	bl	8007894 <sniprintf>
 80032c0:	e006      	b.n	80032d0 <MAX72_Print_Int+0x88>
    } else {
    	snprintf(str, sizeof(str), "%u", u);
 80032c2:	f107 0008 	add.w	r0, r7, #8
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	4a0c      	ldr	r2, [pc, #48]	@ (80032fc <MAX72_Print_Int+0xb4>)
 80032ca:	2109      	movs	r1, #9
 80032cc:	f004 fae2 	bl	8007894 <sniprintf>
    }


    MAX72_Print_String(str, minidigits ? MINIDIGITS : NO_SETTINGS);
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MAX72_Print_Int+0x92>
 80032d6:	2202      	movs	r2, #2
 80032d8:	e000      	b.n	80032dc <MAX72_Print_Int+0x94>
 80032da:	2200      	movs	r2, #0
 80032dc:	f107 0308 	add.w	r3, r7, #8
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fd30 	bl	8002d48 <MAX72_Print_String>
//    MAX72_Print_String(str);
}
 80032e8:	bf00      	nop
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	00989680 	.word	0x00989680
 80032f4:	05f5e100 	.word	0x05f5e100
 80032f8:	08009cfc 	.word	0x08009cfc
 80032fc:	08009d00 	.word	0x08009d00

08003300 <MAX72_Print_Float>:

void MAX72_Print_Float(float num, uint8_t decimals, uint8_t minidigits) {
 8003300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003304:	b095      	sub	sp, #84	@ 0x54
 8003306:	af04      	add	r7, sp, #16
 8003308:	ed87 0a01 	vstr	s0, [r7, #4]
 800330c:	4603      	mov	r3, r0
 800330e:	460a      	mov	r2, r1
 8003310:	70fb      	strb	r3, [r7, #3]
 8003312:	4613      	mov	r3, r2
 8003314:	70bb      	strb	r3, [r7, #2]
 8003316:	466b      	mov	r3, sp
 8003318:	461e      	mov	r6, r3
    uint8_t max_chars = 8;
 800331a:	2308      	movs	r3, #8
 800331c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char str[max_chars + 1]; // +1 for null terminator
 8003320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003324:	1c59      	adds	r1, r3, #1
 8003326:	1e4b      	subs	r3, r1, #1
 8003328:	623b      	str	r3, [r7, #32]
 800332a:	460a      	mov	r2, r1
 800332c:	2300      	movs	r3, #0
 800332e:	4690      	mov	r8, r2
 8003330:	4699      	mov	r9, r3
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800333e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003346:	460a      	mov	r2, r1
 8003348:	2300      	movs	r3, #0
 800334a:	4614      	mov	r4, r2
 800334c:	461d      	mov	r5, r3
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	00eb      	lsls	r3, r5, #3
 8003358:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800335c:	00e2      	lsls	r2, r4, #3
 800335e:	460b      	mov	r3, r1
 8003360:	3307      	adds	r3, #7
 8003362:	08db      	lsrs	r3, r3, #3
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	ebad 0d03 	sub.w	sp, sp, r3
 800336a:	ab04      	add	r3, sp, #16
 800336c:	3300      	adds	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]

    // Gestione del segno
    char sign = (num < 0) ? '-' : '\0';
 8003370:	edd7 7a01 	vldr	s15, [r7, #4]
 8003374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337c:	d501      	bpl.n	8003382 <MAX72_Print_Float+0x82>
 800337e:	232d      	movs	r3, #45	@ 0x2d
 8003380:	e000      	b.n	8003384 <MAX72_Print_Float+0x84>
 8003382:	2300      	movs	r3, #0
 8003384:	76fb      	strb	r3, [r7, #27]
    float abs_num = (num < 0) ? -num : num;
 8003386:	edd7 7a01 	vldr	s15, [r7, #4]
 800338a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800338e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003392:	d504      	bpl.n	800339e <MAX72_Print_Float+0x9e>
 8003394:	edd7 7a01 	vldr	s15, [r7, #4]
 8003398:	eef1 7a67 	vneg.f32	s15, s15
 800339c:	e001      	b.n	80033a2 <MAX72_Print_Float+0xa2>
 800339e:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a2:	edc7 7a05 	vstr	s15, [r7, #20]

    // Separa parte intera e decimale
    unsigned int_part = (unsigned) abs_num;
 80033a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80033aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ae:	ee17 3a90 	vmov	r3, s15
 80033b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float frac_part = abs_num - int_part;
 80033b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033be:	ed97 7a05 	vldr	s14, [r7, #20]
 80033c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c6:	edc7 7a04 	vstr	s15, [r7, #16]


    // Calcola quanti caratteri servono per la parte intera
    uint8_t int_digits = (int_part == 0) ? 0 : 1;
 80033ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    unsigned temp = int_part;
 80033da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033dc:	637b      	str	r3, [r7, #52]	@ 0x34
    while (temp >= 10) {
 80033de:	e00a      	b.n	80033f6 <MAX72_Print_Float+0xf6>
        temp /= 10;
 80033e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e2:	4a5d      	ldr	r2, [pc, #372]	@ (8003558 <MAX72_Print_Float+0x258>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	08db      	lsrs	r3, r3, #3
 80033ea:	637b      	str	r3, [r7, #52]	@ 0x34
        int_digits++;
 80033ec:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80033f0:	3301      	adds	r3, #1
 80033f2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    while (temp >= 10) {
 80033f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f8:	2b09      	cmp	r3, #9
 80033fa:	d8f1      	bhi.n	80033e0 <MAX72_Print_Float+0xe0>
    }

    // Calcola spazio disponibile per decimali
    uint8_t available_for_decimals = max_chars - (sign != '\0' ? 1 : 0) - int_digits - 1; // -1 per il punto decimale
 80033fc:	7efb      	ldrb	r3, [r7, #27]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bf14      	ite	ne
 8003402:	2301      	movne	r3, #1
 8003404:	2300      	moveq	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	b2da      	uxtb	r2, r3
 8003412:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]

    // Limita i decimali al minimo tra quelli richiesti e quelli disponibili
    uint8_t actual_decimals = (decimals < available_for_decimals) ? decimals : available_for_decimals;
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	4293      	cmp	r3, r2
 8003424:	bf28      	it	cs
 8003426:	4613      	movcs	r3, r2
 8003428:	73bb      	strb	r3, [r7, #14]

    // Se non c'è spazio nemmeno per un decimale, mostra solo la parte intera
    if (available_for_decimals == 0) {
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d11b      	bne.n	8003468 <MAX72_Print_Float+0x168>
        if (int_part == 0) {
 8003430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <MAX72_Print_Float+0x144>
            snprintf(str, sizeof(str), "0");
 8003436:	460b      	mov	r3, r1
 8003438:	4a48      	ldr	r2, [pc, #288]	@ (800355c <MAX72_Print_Float+0x25c>)
 800343a:	4619      	mov	r1, r3
 800343c:	69f8      	ldr	r0, [r7, #28]
 800343e:	f004 fa29 	bl	8007894 <sniprintf>
 8003442:	e079      	b.n	8003538 <MAX72_Print_Float+0x238>
        } else {
            if (sign != '\0') {
 8003444:	7efb      	ldrb	r3, [r7, #27]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <MAX72_Print_Float+0x15c>
                snprintf(str, sizeof(str), "%c%u", sign, int_part);
 800344a:	7efa      	ldrb	r2, [r7, #27]
 800344c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	4a43      	ldr	r2, [pc, #268]	@ (8003560 <MAX72_Print_Float+0x260>)
 8003454:	69f8      	ldr	r0, [r7, #28]
 8003456:	f004 fa1d 	bl	8007894 <sniprintf>
 800345a:	e06d      	b.n	8003538 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u", int_part);
 800345c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800345e:	4a41      	ldr	r2, [pc, #260]	@ (8003564 <MAX72_Print_Float+0x264>)
 8003460:	69f8      	ldr	r0, [r7, #28]
 8003462:	f004 fa17 	bl	8007894 <sniprintf>
 8003466:	e067      	b.n	8003538 <MAX72_Print_Float+0x238>
            }
        }
    } else {
        // Calcola il moltiplicatore per i decimali
        unsigned multiplier = 1;
 8003468:	2301      	movs	r3, #1
 800346a:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 800346c:	2300      	movs	r3, #0
 800346e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003472:	e00a      	b.n	800348a <MAX72_Print_Float+0x18a>
            multiplier *= 10;
 8003474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8003480:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003484:	3301      	adds	r3, #1
 8003486:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800348a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800348e:	7bbb      	ldrb	r3, [r7, #14]
 8003490:	429a      	cmp	r2, r3
 8003492:	d3ef      	bcc.n	8003474 <MAX72_Print_Float+0x174>
        }

        // Arrotonda la parte frazionaria
        unsigned frac_digits = (unsigned) (frac_part * multiplier + 0.5f);
 8003494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800349e:	edd7 7a04 	vldr	s15, [r7, #16]
 80034a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80034aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034b2:	ee17 3a90 	vmov	r3, s15
 80034b6:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Gestisce il caso di overflow nell'arrotondamento
        if (frac_digits >= multiplier) {
 80034b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	429a      	cmp	r2, r3
 80034be:	d304      	bcc.n	80034ca <MAX72_Print_Float+0x1ca>
            int_part++;
 80034c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c2:	3301      	adds	r3, #1
 80034c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            frac_digits = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Costruisce la stringa
        if (int_part == 0) {
 80034ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d118      	bne.n	8003502 <MAX72_Print_Float+0x202>
            // Omette la parte intera se è 0
            if (sign != '\0') {
 80034d0:	7efb      	ldrb	r3, [r7, #27]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00c      	beq.n	80034f0 <MAX72_Print_Float+0x1f0>
                snprintf(str, sizeof(str), "%c.%0*u", sign, actual_decimals, frac_digits);
 80034d6:	4608      	mov	r0, r1
 80034d8:	7ef9      	ldrb	r1, [r7, #27]
 80034da:	7bbb      	ldrb	r3, [r7, #14]
 80034dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034de:	9201      	str	r2, [sp, #4]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	460b      	mov	r3, r1
 80034e4:	4a20      	ldr	r2, [pc, #128]	@ (8003568 <MAX72_Print_Float+0x268>)
 80034e6:	4601      	mov	r1, r0
 80034e8:	69f8      	ldr	r0, [r7, #28]
 80034ea:	f004 f9d3 	bl	8007894 <sniprintf>
 80034ee:	e023      	b.n	8003538 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), ".%0*u", actual_decimals, frac_digits);
 80034f0:	7bba      	ldrb	r2, [r7, #14]
 80034f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	4613      	mov	r3, r2
 80034f8:	4a1c      	ldr	r2, [pc, #112]	@ (800356c <MAX72_Print_Float+0x26c>)
 80034fa:	69f8      	ldr	r0, [r7, #28]
 80034fc:	f004 f9ca 	bl	8007894 <sniprintf>
 8003500:	e01a      	b.n	8003538 <MAX72_Print_Float+0x238>
            }
        } else {
            // Include la parte intera
            if (sign != '\0') {
 8003502:	7efb      	ldrb	r3, [r7, #27]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00e      	beq.n	8003526 <MAX72_Print_Float+0x226>
                snprintf(str, sizeof(str), "%c%u.%0*u", sign, int_part, actual_decimals, frac_digits);
 8003508:	4608      	mov	r0, r1
 800350a:	7ef9      	ldrb	r1, [r7, #27]
 800350c:	7bbb      	ldrb	r3, [r7, #14]
 800350e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003510:	9202      	str	r2, [sp, #8]
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	460b      	mov	r3, r1
 800351a:	4a15      	ldr	r2, [pc, #84]	@ (8003570 <MAX72_Print_Float+0x270>)
 800351c:	4601      	mov	r1, r0
 800351e:	69f8      	ldr	r0, [r7, #28]
 8003520:	f004 f9b8 	bl	8007894 <sniprintf>
 8003524:	e008      	b.n	8003538 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u.%0*u", int_part, actual_decimals, frac_digits);
 8003526:	7bbb      	ldrb	r3, [r7, #14]
 8003528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800352a:	9201      	str	r2, [sp, #4]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003530:	4a10      	ldr	r2, [pc, #64]	@ (8003574 <MAX72_Print_Float+0x274>)
 8003532:	69f8      	ldr	r0, [r7, #28]
 8003534:	f004 f9ae 	bl	8007894 <sniprintf>
            }
        }
    }

    MAX72_Print_String(str, minidigits ? MINIDIGITS : FLOAT);
 8003538:	78bb      	ldrb	r3, [r7, #2]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MAX72_Print_Float+0x242>
 800353e:	2302      	movs	r3, #2
 8003540:	e000      	b.n	8003544 <MAX72_Print_Float+0x244>
 8003542:	2301      	movs	r3, #1
 8003544:	4619      	mov	r1, r3
 8003546:	69f8      	ldr	r0, [r7, #28]
 8003548:	f7ff fbfe 	bl	8002d48 <MAX72_Print_String>
 800354c:	46b5      	mov	sp, r6
//    MAX72_Print_String(str);
}
 800354e:	bf00      	nop
 8003550:	3744      	adds	r7, #68	@ 0x44
 8003552:	46bd      	mov	sp, r7
 8003554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003558:	cccccccd 	.word	0xcccccccd
 800355c:	08009d04 	.word	0x08009d04
 8003560:	08009d08 	.word	0x08009d08
 8003564:	08009d00 	.word	0x08009d00
 8003568:	08009d10 	.word	0x08009d10
 800356c:	08009d18 	.word	0x08009d18
 8003570:	08009d20 	.word	0x08009d20
 8003574:	08009d2c 	.word	0x08009d2c

08003578 <MAX72_SendFrame>:

// Buffer: 8 rows x DEV_NUM devices
static uint8_t frame[8][DEV_NUM];

// Send full frame to display (reversed order for correct cascade)
static void MAX72_SendFrame(void) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
    for (uint8_t row = 1; row <= 8; row++) {
 800357e:	2301      	movs	r3, #1
 8003580:	71fb      	strb	r3, [r7, #7]
 8003582:	e020      	b.n	80035c6 <MAX72_SendFrame+0x4e>
        uint8_t pattern[DEV_NUM];
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 8003584:	2300      	movs	r3, #0
 8003586:	71bb      	strb	r3, [r7, #6]
 8003588:	e011      	b.n	80035ae <MAX72_SendFrame+0x36>
            pattern[d] = frame[row-1][DEV_NUM - 1 - d];
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	1e59      	subs	r1, r3, #1
 800358e:	79bb      	ldrb	r3, [r7, #6]
 8003590:	f1c3 0203 	rsb	r2, r3, #3
 8003594:	79bb      	ldrb	r3, [r7, #6]
 8003596:	4810      	ldr	r0, [pc, #64]	@ (80035d8 <MAX72_SendFrame+0x60>)
 8003598:	0089      	lsls	r1, r1, #2
 800359a:	4401      	add	r1, r0
 800359c:	440a      	add	r2, r1
 800359e:	7812      	ldrb	r2, [r2, #0]
 80035a0:	3308      	adds	r3, #8
 80035a2:	443b      	add	r3, r7
 80035a4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 80035a8:	79bb      	ldrb	r3, [r7, #6]
 80035aa:	3301      	adds	r3, #1
 80035ac:	71bb      	strb	r3, [r7, #6]
 80035ae:	79bb      	ldrb	r3, [r7, #6]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d9ea      	bls.n	800358a <MAX72_SendFrame+0x12>
        }
        MAX72_SendRow(row, pattern);
 80035b4:	463a      	mov	r2, r7
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff f9ca 	bl	8002954 <MAX72_SendRow>
    for (uint8_t row = 1; row <= 8; row++) {
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	3301      	adds	r3, #1
 80035c4:	71fb      	strb	r3, [r7, #7]
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d9db      	bls.n	8003584 <MAX72_SendFrame+0xc>
    }
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	200009c4 	.word	0x200009c4

080035dc <MAX72_Scroll_Start_IT>:
}

scroll_state_t scroll_state = {0};

// Inizializza lo scrolling con un nuovo testo
void MAX72_Scroll_Start_IT(const char *text) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
    // Pulisci il frame
    memset(frame, 0, sizeof(frame));
 80035e4:	2220      	movs	r2, #32
 80035e6:	2100      	movs	r1, #0
 80035e8:	482c      	ldr	r0, [pc, #176]	@ (800369c <MAX72_Scroll_Start_IT+0xc0>)
 80035ea:	f004 fa4b 	bl	8007a84 <memset>
    MAX72_SendFrame();
 80035ee:	f7ff ffc3 	bl	8003578 <MAX72_SendFrame>

    // Inizializza lo stato - CAMBIATO: inizia dal primo carattere per scorrimento inverso
    scroll_state.text = text;
 80035f2:	4a2b      	ldr	r2, [pc, #172]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6013      	str	r3, [r2, #0]
    scroll_state.current_char_idx = 0; // Inizia dal primo carattere
 80035f8:	4b29      	ldr	r3, [pc, #164]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	605a      	str	r2, [r3, #4]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80035fe:	4b28      	ldr	r3, [pc, #160]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a27      	ldr	r2, [pc, #156]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 8003604:	6852      	ldr	r2, [r2, #4]
 8003606:	4413      	add	r3, r2
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b1f      	cmp	r3, #31
 800360c:	d90e      	bls.n	800362c <MAX72_Scroll_Start_IT+0x50>
            scroll_state.text[scroll_state.current_char_idx] > '~') ?
 800360e:	4b24      	ldr	r3, [pc, #144]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a23      	ldr	r2, [pc, #140]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 8003614:	6852      	ldr	r2, [r2, #4]
 8003616:	4413      	add	r3, r2
 8003618:	781b      	ldrb	r3, [r3, #0]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 800361a:	2b7e      	cmp	r3, #126	@ 0x7e
 800361c:	d806      	bhi.n	800362c <MAX72_Scroll_Start_IT+0x50>
            ' ' : scroll_state.text[scroll_state.current_char_idx];
 800361e:	4b20      	ldr	r3, [pc, #128]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1f      	ldr	r2, [pc, #124]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 8003624:	6852      	ldr	r2, [r2, #4]
 8003626:	4413      	add	r3, r2
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	e000      	b.n	800362e <MAX72_Scroll_Start_IT+0x52>
 800362c:	2320      	movs	r3, #32
 800362e:	4a1c      	ldr	r2, [pc, #112]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 8003630:	7213      	strb	r3, [r2, #8]
    scroll_state.current_col = 0;
 8003632:	4b1b      	ldr	r3, [pc, #108]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 8003634:	2200      	movs	r2, #0
 8003636:	725a      	strb	r2, [r3, #9]
    scroll_state.spacing_counter = 0;
 8003638:	4b19      	ldr	r3, [pc, #100]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 800363a:	2200      	movs	r2, #0
 800363c:	729a      	strb	r2, [r3, #10]
    scroll_state.padding_counter = 0;
 800363e:	4b18      	ldr	r3, [pc, #96]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 8003640:	2200      	movs	r2, #0
 8003642:	72da      	strb	r2, [r3, #11]
    scroll_state.state = 0; // Inizia con il primo carattere
 8003644:	4b16      	ldr	r3, [pc, #88]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 8003646:	2200      	movs	r2, #0
 8003648:	731a      	strb	r2, [r3, #12]
    scroll_state.enabled = 1;
 800364a:	4b15      	ldr	r3, [pc, #84]	@ (80036a0 <MAX72_Scroll_Start_IT+0xc4>)
 800364c:	2201      	movs	r2, #1
 800364e:	735a      	strb	r2, [r3, #13]

    uint8_t len = strlen(text);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fc fe2d 	bl	80002b0 <strlen>
 8003656:	4603      	mov	r3, r0
 8003658:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = len * GLYPH_WIDTH + (len - 1) * CHAR_SPACING;
 800365a:	7bbb      	ldrb	r3, [r7, #14]
 800365c:	461a      	mov	r2, r3
 800365e:	0052      	lsls	r2, r2, #1
 8003660:	4413      	add	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	737b      	strb	r3, [r7, #13]
    uint8_t max_chars = ((DEV_NUM * 8 < temp) ? DEV_NUM*8 : temp) - 8; // Padding iniziale di 8 colonne
 800366a:	7b7b      	ldrb	r3, [r7, #13]
 800366c:	2b20      	cmp	r3, #32
 800366e:	bf28      	it	cs
 8003670:	2320      	movcs	r3, #32
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3b08      	subs	r3, #8
 8003676:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < max_chars; i++) {
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
 800367c:	e004      	b.n	8003688 <MAX72_Scroll_Start_IT+0xac>
		MAX72_Scroll_Process(); // Processa il primo carattere per inizializzare il frame
 800367e:	f000 f81d 	bl	80036bc <MAX72_Scroll_Process>
    for (uint8_t i = 0; i < max_chars; i++) {
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	3301      	adds	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	7b3b      	ldrb	r3, [r7, #12]
 800368c:	429a      	cmp	r2, r3
 800368e:	d3f6      	bcc.n	800367e <MAX72_Scroll_Start_IT+0xa2>
	}
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	200009c4 	.word	0x200009c4
 80036a0:	200009e4 	.word	0x200009e4

080036a4 <MAX72_Scroll_Stop>:

// Ferma lo scrolling
void MAX72_Scroll_Stop(void) {
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
    scroll_state.enabled = 0;
 80036a8:	4b03      	ldr	r3, [pc, #12]	@ (80036b8 <MAX72_Scroll_Stop+0x14>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	735a      	strb	r2, [r3, #13]
}
 80036ae:	bf00      	nop
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	200009e4 	.word	0x200009e4

080036bc <MAX72_Scroll_Process>:
void MAX72_Scroll_Resume(void) {
    scroll_state.enabled = 1;
}

// Funzione da chiamare nel main loop - NON bloccante
void MAX72_Scroll_Process(void) {
 80036bc:	b590      	push	{r4, r7, lr}
 80036be:	b08b      	sub	sp, #44	@ 0x2c
 80036c0:	af00      	add	r7, sp, #0
    if (!scroll_state.enabled || !scroll_state.text) return;
 80036c2:	4b86      	ldr	r3, [pc, #536]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80036c4:	7b5b      	ldrb	r3, [r3, #13]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 817b 	beq.w	80039c2 <MAX72_Scroll_Process+0x306>
 80036cc:	4b83      	ldr	r3, [pc, #524]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8176 	beq.w	80039c2 <MAX72_Scroll_Process+0x306>

    switch (scroll_state.state) {
 80036d6:	4b81      	ldr	r3, [pc, #516]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80036d8:	7b1b      	ldrb	r3, [r3, #12]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	f000 80f6 	beq.w	80038cc <MAX72_Scroll_Process+0x210>
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	f300 816b 	bgt.w	80039bc <MAX72_Scroll_Process+0x300>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <MAX72_Scroll_Process+0x34>
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d072      	beq.n	80037d4 <MAX72_Scroll_Process+0x118>
 80036ee:	e165      	b.n	80039bc <MAX72_Scroll_Process+0x300>
        case 0: // Processamento carattere
        {
            uint8_t ch = scroll_state.current_char;
 80036f0:	4b7a      	ldr	r3, [pc, #488]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80036f2:	7a1b      	ldrb	r3, [r3, #8]
 80036f4:	737b      	strb	r3, [r7, #13]
            uint8_t *glyph = LETTERS[ch - ' '].value;
 80036f6:	7b7b      	ldrb	r3, [r7, #13]
 80036f8:	f1a3 0220 	sub.w	r2, r3, #32
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	4a77      	ldr	r2, [pc, #476]	@ (80038e0 <MAX72_Scroll_Process+0x224>)
 8003704:	4413      	add	r3, r2
 8003706:	3301      	adds	r3, #1
 8003708:	60bb      	str	r3, [r7, #8]

            // CAMBIATO: Shift verso destra (da destra verso sinistra)
            for (uint8_t row = 0; row < 8; row++) {
 800370a:	2300      	movs	r3, #0
 800370c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003710:	e047      	b.n	80037a2 <MAX72_Scroll_Process+0xe6>
                uint8_t new_bit = (glyph[row] >> scroll_state.current_col) & 0x01;
 8003712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	4413      	add	r3, r2
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	4b6f      	ldr	r3, [pc, #444]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 8003720:	7a5b      	ldrb	r3, [r3, #9]
 8003722:	fa42 f303 	asr.w	r3, r2, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	71fb      	strb	r3, [r7, #7]
                uint8_t carry = new_bit;
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // CAMBIATO: Shift right invece di left, da device più a destra
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8003734:	2303      	movs	r3, #3
 8003736:	623b      	str	r3, [r7, #32]
 8003738:	e02b      	b.n	8003792 <MAX72_Scroll_Process+0xd6>
                    uint8_t next_carry = frame[row][d] & 0x01;
 800373a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800373e:	4a69      	ldr	r2, [pc, #420]	@ (80038e4 <MAX72_Scroll_Process+0x228>)
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	441a      	add	r2, r3
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	4413      	add	r3, r2
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	71bb      	strb	r3, [r7, #6]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8003750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003754:	4a63      	ldr	r2, [pc, #396]	@ (80038e4 <MAX72_Scroll_Process+0x228>)
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	441a      	add	r2, r3
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	4413      	add	r3, r2
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	b2db      	uxtb	r3, r3
 8003764:	b25a      	sxtb	r2, r3
 8003766:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800376a:	01db      	lsls	r3, r3, #7
 800376c:	b25b      	sxtb	r3, r3
 800376e:	4313      	orrs	r3, r2
 8003770:	b25a      	sxtb	r2, r3
 8003772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003776:	b2d1      	uxtb	r1, r2
 8003778:	4a5a      	ldr	r2, [pc, #360]	@ (80038e4 <MAX72_Scroll_Process+0x228>)
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	441a      	add	r2, r3
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	4413      	add	r3, r2
 8003782:	460a      	mov	r2, r1
 8003784:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8003786:	79bb      	ldrb	r3, [r7, #6]
 8003788:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	3b01      	subs	r3, #1
 8003790:	623b      	str	r3, [r7, #32]
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	2b00      	cmp	r3, #0
 8003796:	dad0      	bge.n	800373a <MAX72_Scroll_Process+0x7e>
            for (uint8_t row = 0; row < 8; row++) {
 8003798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800379c:	3301      	adds	r3, #1
 800379e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80037a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037a6:	2b07      	cmp	r3, #7
 80037a8:	d9b3      	bls.n	8003712 <MAX72_Scroll_Process+0x56>
                }
            }

            scroll_state.current_col++;
 80037aa:	4b4c      	ldr	r3, [pc, #304]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80037ac:	7a5b      	ldrb	r3, [r3, #9]
 80037ae:	3301      	adds	r3, #1
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	4b4a      	ldr	r3, [pc, #296]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80037b4:	725a      	strb	r2, [r3, #9]

            // Finito il carattere corrente?
            if (scroll_state.current_col >= GLYPH_WIDTH) {
 80037b6:	4b49      	ldr	r3, [pc, #292]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80037b8:	7a5b      	ldrb	r3, [r3, #9]
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	f240 80f9 	bls.w	80039b2 <MAX72_Scroll_Process+0x2f6>
                scroll_state.current_col = 0;
 80037c0:	4b46      	ldr	r3, [pc, #280]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 80037c6:	4b45      	ldr	r3, [pc, #276]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	729a      	strb	r2, [r3, #10]
                scroll_state.state = 1; // Passa agli spazi tra caratteri
 80037cc:	4b43      	ldr	r3, [pc, #268]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	731a      	strb	r2, [r3, #12]
            }
            break;
 80037d2:	e0ee      	b.n	80039b2 <MAX72_Scroll_Process+0x2f6>
        }

        case 1: // Spacing tra caratteri
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 80037d4:	2300      	movs	r3, #0
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e032      	b.n	8003840 <MAX72_Scroll_Process+0x184>
                uint8_t carry = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 80037de:	2303      	movs	r3, #3
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	e027      	b.n	8003834 <MAX72_Scroll_Process+0x178>
                    uint8_t next_carry = frame[row][d] & 0x01;
 80037e4:	7ffb      	ldrb	r3, [r7, #31]
 80037e6:	4a3f      	ldr	r2, [pc, #252]	@ (80038e4 <MAX72_Scroll_Process+0x228>)
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	441a      	add	r2, r3
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	4413      	add	r3, r2
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	73bb      	strb	r3, [r7, #14]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 80037f8:	7ffb      	ldrb	r3, [r7, #31]
 80037fa:	4a3a      	ldr	r2, [pc, #232]	@ (80038e4 <MAX72_Scroll_Process+0x228>)
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	441a      	add	r2, r3
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	4413      	add	r3, r2
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	b25a      	sxtb	r2, r3
 800380c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003810:	01db      	lsls	r3, r3, #7
 8003812:	b25b      	sxtb	r3, r3
 8003814:	4313      	orrs	r3, r2
 8003816:	b25a      	sxtb	r2, r3
 8003818:	7ffb      	ldrb	r3, [r7, #31]
 800381a:	b2d1      	uxtb	r1, r2
 800381c:	4a31      	ldr	r2, [pc, #196]	@ (80038e4 <MAX72_Scroll_Process+0x228>)
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	441a      	add	r2, r3
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4413      	add	r3, r2
 8003826:	460a      	mov	r2, r1
 8003828:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 800382a:	7bbb      	ldrb	r3, [r7, #14]
 800382c:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	3b01      	subs	r3, #1
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	dad4      	bge.n	80037e4 <MAX72_Scroll_Process+0x128>
            for (uint8_t row = 0; row < 8; row++) {
 800383a:	7ffb      	ldrb	r3, [r7, #31]
 800383c:	3301      	adds	r3, #1
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	7ffb      	ldrb	r3, [r7, #31]
 8003842:	2b07      	cmp	r3, #7
 8003844:	d9c9      	bls.n	80037da <MAX72_Scroll_Process+0x11e>
                }
            }

            scroll_state.spacing_counter++;
 8003846:	4b25      	ldr	r3, [pc, #148]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 8003848:	7a9b      	ldrb	r3, [r3, #10]
 800384a:	3301      	adds	r3, #1
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4b23      	ldr	r3, [pc, #140]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 8003850:	729a      	strb	r2, [r3, #10]

            // Finito lo spacing?
            if (scroll_state.spacing_counter >= CHAR_SPACING) {
 8003852:	4b22      	ldr	r3, [pc, #136]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 8003854:	7a9b      	ldrb	r3, [r3, #10]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80ad 	beq.w	80039b6 <MAX72_Scroll_Process+0x2fa>
                scroll_state.spacing_counter = 0;
 800385c:	4b1f      	ldr	r3, [pc, #124]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 800385e:	2200      	movs	r2, #0
 8003860:	729a      	strb	r2, [r3, #10]

                // CAMBIATO: Passa al carattere successivo (incrementa invece di decrementare)
                scroll_state.current_char_idx++;
 8003862:	4b1e      	ldr	r3, [pc, #120]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	3301      	adds	r3, #1
 8003868:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 800386a:	6053      	str	r3, [r2, #4]
                if (scroll_state.current_char_idx >= strlen(scroll_state.text)) {
 800386c:	4b1b      	ldr	r3, [pc, #108]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	461c      	mov	r4, r3
 8003872:	4b1a      	ldr	r3, [pc, #104]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fc fd1a 	bl	80002b0 <strlen>
 800387c:	4603      	mov	r3, r0
 800387e:	429c      	cmp	r4, r3
 8003880:	d306      	bcc.n	8003890 <MAX72_Scroll_Process+0x1d4>
                    // Finiti tutti i caratteri, passa al padding finale
                    scroll_state.state = 2;
 8003882:	4b16      	ldr	r3, [pc, #88]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 8003884:	2202      	movs	r2, #2
 8003886:	731a      	strb	r2, [r3, #12]
                    scroll_state.padding_counter = 0;
 8003888:	4b14      	ldr	r3, [pc, #80]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 800388a:	2200      	movs	r2, #0
 800388c:	72da      	strb	r2, [r3, #11]
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
                    scroll_state.state = 0;
                }
            }
            break;
 800388e:	e092      	b.n	80039b6 <MAX72_Scroll_Process+0x2fa>
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003890:	4b12      	ldr	r3, [pc, #72]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a11      	ldr	r2, [pc, #68]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 8003896:	6852      	ldr	r2, [r2, #4]
 8003898:	4413      	add	r3, r2
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b1f      	cmp	r3, #31
 800389e:	d90e      	bls.n	80038be <MAX72_Scroll_Process+0x202>
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
 80038a0:	4b0e      	ldr	r3, [pc, #56]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0d      	ldr	r2, [pc, #52]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80038a6:	6852      	ldr	r2, [r2, #4]
 80038a8:	4413      	add	r3, r2
 80038aa:	781b      	ldrb	r3, [r3, #0]
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80038ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80038ae:	d806      	bhi.n	80038be <MAX72_Scroll_Process+0x202>
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
 80038b0:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a09      	ldr	r2, [pc, #36]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80038b6:	6852      	ldr	r2, [r2, #4]
 80038b8:	4413      	add	r3, r2
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	e000      	b.n	80038c0 <MAX72_Scroll_Process+0x204>
 80038be:	2320      	movs	r3, #32
 80038c0:	4a06      	ldr	r2, [pc, #24]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80038c2:	7213      	strb	r3, [r2, #8]
                    scroll_state.state = 0;
 80038c4:	4b05      	ldr	r3, [pc, #20]	@ (80038dc <MAX72_Scroll_Process+0x220>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	731a      	strb	r2, [r3, #12]
            break;
 80038ca:	e074      	b.n	80039b6 <MAX72_Scroll_Process+0x2fa>
        }

        case 2: // Padding finale
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 80038cc:	2300      	movs	r3, #0
 80038ce:	75fb      	strb	r3, [r7, #23]
 80038d0:	e038      	b.n	8003944 <MAX72_Scroll_Process+0x288>
                uint8_t carry = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 80038d6:	2303      	movs	r3, #3
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	e02d      	b.n	8003938 <MAX72_Scroll_Process+0x27c>
 80038dc:	200009e4 	.word	0x200009e4
 80038e0:	20000008 	.word	0x20000008
 80038e4:	200009c4 	.word	0x200009c4
                    uint8_t next_carry = frame[row][d] & 0x01;
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	4a38      	ldr	r2, [pc, #224]	@ (80039cc <MAX72_Scroll_Process+0x310>)
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	441a      	add	r2, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4413      	add	r3, r2
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	4a33      	ldr	r2, [pc, #204]	@ (80039cc <MAX72_Scroll_Process+0x310>)
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	441a      	add	r2, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	b2db      	uxtb	r3, r3
 800390e:	b25a      	sxtb	r2, r3
 8003910:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003914:	01db      	lsls	r3, r3, #7
 8003916:	b25b      	sxtb	r3, r3
 8003918:	4313      	orrs	r3, r2
 800391a:	b25a      	sxtb	r2, r3
 800391c:	7dfb      	ldrb	r3, [r7, #23]
 800391e:	b2d1      	uxtb	r1, r2
 8003920:	4a2a      	ldr	r2, [pc, #168]	@ (80039cc <MAX72_Scroll_Process+0x310>)
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4413      	add	r3, r2
 800392a:	460a      	mov	r2, r1
 800392c:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	3b01      	subs	r3, #1
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	dad4      	bge.n	80038e8 <MAX72_Scroll_Process+0x22c>
            for (uint8_t row = 0; row < 8; row++) {
 800393e:	7dfb      	ldrb	r3, [r7, #23]
 8003940:	3301      	adds	r3, #1
 8003942:	75fb      	strb	r3, [r7, #23]
 8003944:	7dfb      	ldrb	r3, [r7, #23]
 8003946:	2b07      	cmp	r3, #7
 8003948:	d9c3      	bls.n	80038d2 <MAX72_Scroll_Process+0x216>
                }
            }

            scroll_state.padding_counter++;
 800394a:	4b21      	ldr	r3, [pc, #132]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 800394c:	7adb      	ldrb	r3, [r3, #11]
 800394e:	3301      	adds	r3, #1
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4b1f      	ldr	r3, [pc, #124]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 8003954:	72da      	strb	r2, [r3, #11]

            // Finito il padding? (GLYPH_WIDTH + CHAR_SPACING)
            if (scroll_state.padding_counter >= (GLYPH_WIDTH + CHAR_SPACING)) {
 8003956:	4b1e      	ldr	r3, [pc, #120]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 8003958:	7adb      	ldrb	r3, [r3, #11]
 800395a:	2b05      	cmp	r3, #5
 800395c:	d92d      	bls.n	80039ba <MAX72_Scroll_Process+0x2fe>
                // CAMBIATO: Ricomincia dal primo carattere (indice 0)
                scroll_state.current_char_idx = 0;
 800395e:	4b1c      	ldr	r3, [pc, #112]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 8003960:	2200      	movs	r2, #0
 8003962:	605a      	str	r2, [r3, #4]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003964:	4b1a      	ldr	r3, [pc, #104]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a19      	ldr	r2, [pc, #100]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 800396a:	6852      	ldr	r2, [r2, #4]
 800396c:	4413      	add	r3, r2
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b1f      	cmp	r3, #31
 8003972:	d90e      	bls.n	8003992 <MAX72_Scroll_Process+0x2d6>
						scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8003974:	4b16      	ldr	r3, [pc, #88]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a15      	ldr	r2, [pc, #84]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 800397a:	6852      	ldr	r2, [r2, #4]
 800397c:	4413      	add	r3, r2
 800397e:	781b      	ldrb	r3, [r3, #0]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003980:	2b7e      	cmp	r3, #126	@ 0x7e
 8003982:	d806      	bhi.n	8003992 <MAX72_Scroll_Process+0x2d6>
						' ' : scroll_state.text[scroll_state.current_char_idx];
 8003984:	4b12      	ldr	r3, [pc, #72]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a11      	ldr	r2, [pc, #68]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 800398a:	6852      	ldr	r2, [r2, #4]
 800398c:	4413      	add	r3, r2
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	e000      	b.n	8003994 <MAX72_Scroll_Process+0x2d8>
 8003992:	2320      	movs	r3, #32
 8003994:	4a0e      	ldr	r2, [pc, #56]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 8003996:	7213      	strb	r3, [r2, #8]
                scroll_state.current_col = 0;
 8003998:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 800399a:	2200      	movs	r2, #0
 800399c:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 800399e:	4b0c      	ldr	r3, [pc, #48]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	729a      	strb	r2, [r3, #10]
                scroll_state.padding_counter = 0;
 80039a4:	4b0a      	ldr	r3, [pc, #40]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	72da      	strb	r2, [r3, #11]
                scroll_state.state = 0;
 80039aa:	4b09      	ldr	r3, [pc, #36]	@ (80039d0 <MAX72_Scroll_Process+0x314>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	731a      	strb	r2, [r3, #12]
            }
            break;
 80039b0:	e003      	b.n	80039ba <MAX72_Scroll_Process+0x2fe>
            break;
 80039b2:	bf00      	nop
 80039b4:	e002      	b.n	80039bc <MAX72_Scroll_Process+0x300>
            break;
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <MAX72_Scroll_Process+0x300>
            break;
 80039ba:	bf00      	nop
        }
    }

    // Aggiorna il display
    MAX72_SendFrame();
 80039bc:	f7ff fddc 	bl	8003578 <MAX72_SendFrame>
 80039c0:	e000      	b.n	80039c4 <MAX72_Scroll_Process+0x308>
    if (!scroll_state.enabled || !scroll_state.text) return;
 80039c2:	bf00      	nop
}
 80039c4:	372c      	adds	r7, #44	@ 0x2c
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd90      	pop	{r4, r7, pc}
 80039ca:	bf00      	nop
 80039cc:	200009c4 	.word	0x200009c4
 80039d0:	200009e4 	.word	0x200009e4

080039d4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80039d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80039d8:	f7fe f814 	bl	8001a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039dc:	480c      	ldr	r0, [pc, #48]	@ (8003a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039de:	490d      	ldr	r1, [pc, #52]	@ (8003a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039e4:	e002      	b.n	80039ec <LoopCopyDataInit>

080039e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ea:	3304      	adds	r3, #4

080039ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039f0:	d3f9      	bcc.n	80039e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039f2:	4a0a      	ldr	r2, [pc, #40]	@ (8003a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039f8:	e001      	b.n	80039fe <LoopFillZerobss>

080039fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039fc:	3204      	adds	r2, #4

080039fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a00:	d3fb      	bcc.n	80039fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003a02:	f004 f84d 	bl	8007aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a06:	f7fd fcb1 	bl	800136c <main>
  bx  lr    
 8003a0a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8003a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a14:	20000590 	.word	0x20000590
  ldr r2, =_sidata
 8003a18:	0800a0dc 	.word	0x0800a0dc
  ldr r2, =_sbss
 8003a1c:	20000590 	.word	0x20000590
  ldr r4, =_ebss
 8003a20:	20000b44 	.word	0x20000b44

08003a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a24:	e7fe      	b.n	8003a24 <ADC_IRQHandler>
	...

08003a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a68 <HAL_Init+0x40>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0d      	ldr	r2, [pc, #52]	@ (8003a68 <HAL_Init+0x40>)
 8003a32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a38:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <HAL_Init+0x40>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a68 <HAL_Init+0x40>)
 8003a3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a44:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <HAL_Init+0x40>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a07      	ldr	r2, [pc, #28]	@ (8003a68 <HAL_Init+0x40>)
 8003a4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a50:	2003      	movs	r0, #3
 8003a52:	f000 fd5f 	bl	8004514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a56:	2000      	movs	r0, #0
 8003a58:	f000 f808 	bl	8003a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a5c:	f7fd fe9a 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023c00 	.word	0x40023c00

08003a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a74:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <HAL_InitTick+0x54>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4b12      	ldr	r3, [pc, #72]	@ (8003ac4 <HAL_InitTick+0x58>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fd77 	bl	800457e <HAL_SYSTICK_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e00e      	b.n	8003ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b0f      	cmp	r3, #15
 8003a9e:	d80a      	bhi.n	8003ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003aa8:	f000 fd3f 	bl	800452a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003aac:	4a06      	ldr	r2, [pc, #24]	@ (8003ac8 <HAL_InitTick+0x5c>)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e000      	b.n	8003ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000004 	.word	0x20000004
 8003ac4:	200003c4 	.word	0x200003c4
 8003ac8:	200003c0 	.word	0x200003c0

08003acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ad0:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <HAL_IncTick+0x20>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <HAL_IncTick+0x24>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4413      	add	r3, r2
 8003adc:	4a04      	ldr	r2, [pc, #16]	@ (8003af0 <HAL_IncTick+0x24>)
 8003ade:	6013      	str	r3, [r2, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	200003c4 	.word	0x200003c4
 8003af0:	200009f4 	.word	0x200009f4

08003af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return uwTick;
 8003af8:	4b03      	ldr	r3, [pc, #12]	@ (8003b08 <HAL_GetTick+0x14>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	200009f4 	.word	0x200009f4

08003b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b14:	f7ff ffee 	bl	8003af4 <HAL_GetTick>
 8003b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b24:	d005      	beq.n	8003b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b26:	4b0a      	ldr	r3, [pc, #40]	@ (8003b50 <HAL_Delay+0x44>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b32:	bf00      	nop
 8003b34:	f7ff ffde 	bl	8003af4 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d8f7      	bhi.n	8003b34 <HAL_Delay+0x28>
  {
  }
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200003c4 	.word	0x200003c4

08003b54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e033      	b.n	8003bd2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fa90 	bl	8001098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d118      	bne.n	8003bc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b9a:	f023 0302 	bic.w	r3, r3, #2
 8003b9e:	f043 0202 	orr.w	r2, r3, #2
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fae8 	bl	800417c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	f023 0303 	bic.w	r3, r3, #3
 8003bba:	f043 0201 	orr.w	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bc2:	e001      	b.n	8003bc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ADC_Start+0x1a>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e0b2      	b.n	8003d5c <HAL_ADC_Start+0x180>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d018      	beq.n	8003c3e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c1c:	4b52      	ldr	r3, [pc, #328]	@ (8003d68 <HAL_ADC_Start+0x18c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a52      	ldr	r2, [pc, #328]	@ (8003d6c <HAL_ADC_Start+0x190>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0c9a      	lsrs	r2, r3, #18
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003c30:	e002      	b.n	8003c38 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f9      	bne.n	8003c32 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d17a      	bne.n	8003d42 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c50:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c76:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8a:	d106      	bne.n	8003c9a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c90:	f023 0206 	bic.w	r2, r3, #6
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c98:	e002      	b.n	8003ca0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ca8:	4b31      	ldr	r3, [pc, #196]	@ (8003d70 <HAL_ADC_Start+0x194>)
 8003caa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003cb4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d12a      	bne.n	8003d18 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a2b      	ldr	r2, [pc, #172]	@ (8003d74 <HAL_ADC_Start+0x198>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d015      	beq.n	8003cf8 <HAL_ADC_Start+0x11c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a29      	ldr	r2, [pc, #164]	@ (8003d78 <HAL_ADC_Start+0x19c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d105      	bne.n	8003ce2 <HAL_ADC_Start+0x106>
 8003cd6:	4b26      	ldr	r3, [pc, #152]	@ (8003d70 <HAL_ADC_Start+0x194>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a25      	ldr	r2, [pc, #148]	@ (8003d7c <HAL_ADC_Start+0x1a0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d136      	bne.n	8003d5a <HAL_ADC_Start+0x17e>
 8003cec:	4b20      	ldr	r3, [pc, #128]	@ (8003d70 <HAL_ADC_Start+0x194>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0310 	and.w	r3, r3, #16
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d130      	bne.n	8003d5a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d129      	bne.n	8003d5a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d14:	609a      	str	r2, [r3, #8]
 8003d16:	e020      	b.n	8003d5a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a15      	ldr	r2, [pc, #84]	@ (8003d74 <HAL_ADC_Start+0x198>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d11b      	bne.n	8003d5a <HAL_ADC_Start+0x17e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d114      	bne.n	8003d5a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	e00b      	b.n	8003d5a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	f043 0210 	orr.w	r2, r3, #16
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	20000004 	.word	0x20000004
 8003d6c:	431bde83 	.word	0x431bde83
 8003d70:	40012300 	.word	0x40012300
 8003d74:	40012000 	.word	0x40012000
 8003d78:	40012100 	.word	0x40012100
 8003d7c:	40012200 	.word	0x40012200

08003d80 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_ADC_Stop+0x16>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e021      	b.n	8003dda <HAL_ADC_Stop+0x5a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0201 	bic.w	r2, r2, #1
 8003dac:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	f043 0201 	orr.w	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e02:	d113      	bne.n	8003e2c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e12:	d10b      	bne.n	8003e2c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e063      	b.n	8003ef4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e2c:	f7ff fe62 	bl	8003af4 <HAL_GetTick>
 8003e30:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003e32:	e021      	b.n	8003e78 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e3a:	d01d      	beq.n	8003e78 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <HAL_ADC_PollForConversion+0x6c>
 8003e42:	f7ff fe57 	bl	8003af4 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d212      	bcs.n	8003e78 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d00b      	beq.n	8003e78 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	f043 0204 	orr.w	r2, r3, #4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e03d      	b.n	8003ef4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d1d6      	bne.n	8003e34 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f06f 0212 	mvn.w	r2, #18
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d123      	bne.n	8003ef2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d11f      	bne.n	8003ef2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d006      	beq.n	8003ece <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d111      	bne.n	8003ef2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d105      	bne.n	8003ef2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	f043 0201 	orr.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x1c>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e113      	b.n	800415c <HAL_ADC_ConfigChannel+0x244>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b09      	cmp	r3, #9
 8003f42:	d925      	bls.n	8003f90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68d9      	ldr	r1, [r3, #12]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	4613      	mov	r3, r2
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	4413      	add	r3, r2
 8003f58:	3b1e      	subs	r3, #30
 8003f5a:	2207      	movs	r2, #7
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43da      	mvns	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	400a      	ands	r2, r1
 8003f68:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68d9      	ldr	r1, [r3, #12]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4403      	add	r3, r0
 8003f82:	3b1e      	subs	r3, #30
 8003f84:	409a      	lsls	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	e022      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6919      	ldr	r1, [r3, #16]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	4413      	add	r3, r2
 8003fa4:	2207      	movs	r2, #7
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43da      	mvns	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	400a      	ands	r2, r1
 8003fb2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6919      	ldr	r1, [r3, #16]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4403      	add	r3, r0
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b06      	cmp	r3, #6
 8003fdc:	d824      	bhi.n	8004028 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	3b05      	subs	r3, #5
 8003ff0:	221f      	movs	r2, #31
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43da      	mvns	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	4618      	mov	r0, r3
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	3b05      	subs	r3, #5
 800401a:	fa00 f203 	lsl.w	r2, r0, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	635a      	str	r2, [r3, #52]	@ 0x34
 8004026:	e04c      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	d824      	bhi.n	800407a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	3b23      	subs	r3, #35	@ 0x23
 8004042:	221f      	movs	r2, #31
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43da      	mvns	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	400a      	ands	r2, r1
 8004050:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b29b      	uxth	r3, r3
 800405e:	4618      	mov	r0, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	3b23      	subs	r3, #35	@ 0x23
 800406c:	fa00 f203 	lsl.w	r2, r0, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	631a      	str	r2, [r3, #48]	@ 0x30
 8004078:	e023      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	3b41      	subs	r3, #65	@ 0x41
 800408c:	221f      	movs	r2, #31
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43da      	mvns	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	400a      	ands	r2, r1
 800409a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	4618      	mov	r0, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	3b41      	subs	r3, #65	@ 0x41
 80040b6:	fa00 f203 	lsl.w	r2, r0, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040c2:	4b29      	ldr	r3, [pc, #164]	@ (8004168 <HAL_ADC_ConfigChannel+0x250>)
 80040c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a28      	ldr	r2, [pc, #160]	@ (800416c <HAL_ADC_ConfigChannel+0x254>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d10f      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x1d8>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b12      	cmp	r3, #18
 80040d6:	d10b      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1d      	ldr	r2, [pc, #116]	@ (800416c <HAL_ADC_ConfigChannel+0x254>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d12b      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x23a>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004170 <HAL_ADC_ConfigChannel+0x258>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <HAL_ADC_ConfigChannel+0x1f4>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b11      	cmp	r3, #17
 800410a:	d122      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a11      	ldr	r2, [pc, #68]	@ (8004170 <HAL_ADC_ConfigChannel+0x258>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d111      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800412e:	4b11      	ldr	r3, [pc, #68]	@ (8004174 <HAL_ADC_ConfigChannel+0x25c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a11      	ldr	r2, [pc, #68]	@ (8004178 <HAL_ADC_ConfigChannel+0x260>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	0c9a      	lsrs	r2, r3, #18
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004144:	e002      	b.n	800414c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	3b01      	subs	r3, #1
 800414a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f9      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	40012300 	.word	0x40012300
 800416c:	40012000 	.word	0x40012000
 8004170:	10000012 	.word	0x10000012
 8004174:	20000004 	.word	0x20000004
 8004178:	431bde83 	.word	0x431bde83

0800417c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004184:	4b79      	ldr	r3, [pc, #484]	@ (800436c <ADC_Init+0x1f0>)
 8004186:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	431a      	orrs	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6859      	ldr	r1, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	021a      	lsls	r2, r3, #8
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80041d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6899      	ldr	r1, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420e:	4a58      	ldr	r2, [pc, #352]	@ (8004370 <ADC_Init+0x1f4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d022      	beq.n	800425a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004222:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6899      	ldr	r1, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6899      	ldr	r1, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	e00f      	b.n	800427a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004268:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004278:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0202 	bic.w	r2, r2, #2
 8004288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6899      	ldr	r1, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	7e1b      	ldrb	r3, [r3, #24]
 8004294:	005a      	lsls	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01b      	beq.n	80042e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80042c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6859      	ldr	r1, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	3b01      	subs	r3, #1
 80042d4:	035a      	lsls	r2, r3, #13
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	e007      	b.n	80042f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80042fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	3b01      	subs	r3, #1
 800430c:	051a      	lsls	r2, r3, #20
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004324:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6899      	ldr	r1, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004332:	025a      	lsls	r2, r3, #9
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800434a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6899      	ldr	r1, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	029a      	lsls	r2, r3, #10
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	40012300 	.word	0x40012300
 8004370:	0f000001 	.word	0x0f000001

08004374 <__NVIC_SetPriorityGrouping>:
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004384:	4b0c      	ldr	r3, [pc, #48]	@ (80043b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004390:	4013      	ands	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800439c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043a6:	4a04      	ldr	r2, [pc, #16]	@ (80043b8 <__NVIC_SetPriorityGrouping+0x44>)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	60d3      	str	r3, [r2, #12]
}
 80043ac:	bf00      	nop
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	e000ed00 	.word	0xe000ed00

080043bc <__NVIC_GetPriorityGrouping>:
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043c0:	4b04      	ldr	r3, [pc, #16]	@ (80043d4 <__NVIC_GetPriorityGrouping+0x18>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	0a1b      	lsrs	r3, r3, #8
 80043c6:	f003 0307 	and.w	r3, r3, #7
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	e000ed00 	.word	0xe000ed00

080043d8 <__NVIC_EnableIRQ>:
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	db0b      	blt.n	8004402 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	f003 021f 	and.w	r2, r3, #31
 80043f0:	4907      	ldr	r1, [pc, #28]	@ (8004410 <__NVIC_EnableIRQ+0x38>)
 80043f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	2001      	movs	r0, #1
 80043fa:	fa00 f202 	lsl.w	r2, r0, r2
 80043fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	e000e100 	.word	0xe000e100

08004414 <__NVIC_SetPriority>:
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	6039      	str	r1, [r7, #0]
 800441e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004424:	2b00      	cmp	r3, #0
 8004426:	db0a      	blt.n	800443e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	490c      	ldr	r1, [pc, #48]	@ (8004460 <__NVIC_SetPriority+0x4c>)
 800442e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004432:	0112      	lsls	r2, r2, #4
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	440b      	add	r3, r1
 8004438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800443c:	e00a      	b.n	8004454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	b2da      	uxtb	r2, r3
 8004442:	4908      	ldr	r1, [pc, #32]	@ (8004464 <__NVIC_SetPriority+0x50>)
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	3b04      	subs	r3, #4
 800444c:	0112      	lsls	r2, r2, #4
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	440b      	add	r3, r1
 8004452:	761a      	strb	r2, [r3, #24]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	e000e100 	.word	0xe000e100
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <NVIC_EncodePriority>:
{
 8004468:	b480      	push	{r7}
 800446a:	b089      	sub	sp, #36	@ 0x24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f1c3 0307 	rsb	r3, r3, #7
 8004482:	2b04      	cmp	r3, #4
 8004484:	bf28      	it	cs
 8004486:	2304      	movcs	r3, #4
 8004488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3304      	adds	r3, #4
 800448e:	2b06      	cmp	r3, #6
 8004490:	d902      	bls.n	8004498 <NVIC_EncodePriority+0x30>
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3b03      	subs	r3, #3
 8004496:	e000      	b.n	800449a <NVIC_EncodePriority+0x32>
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800449c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43da      	mvns	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	401a      	ands	r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ba:	43d9      	mvns	r1, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c0:	4313      	orrs	r3, r2
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3724      	adds	r7, #36	@ 0x24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <SysTick_Config>:
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3b01      	subs	r3, #1
 80044dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044e0:	d301      	bcc.n	80044e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80044e2:	2301      	movs	r3, #1
 80044e4:	e00f      	b.n	8004506 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004510 <SysTick_Config+0x40>)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ee:	210f      	movs	r1, #15
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044f4:	f7ff ff8e 	bl	8004414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <SysTick_Config+0x40>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044fe:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <SysTick_Config+0x40>)
 8004500:	2207      	movs	r2, #7
 8004502:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	e000e010 	.word	0xe000e010

08004514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff ff29 	bl	8004374 <__NVIC_SetPriorityGrouping>
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800452a:	b580      	push	{r7, lr}
 800452c:	b086      	sub	sp, #24
 800452e:	af00      	add	r7, sp, #0
 8004530:	4603      	mov	r3, r0
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800453c:	f7ff ff3e 	bl	80043bc <__NVIC_GetPriorityGrouping>
 8004540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	6978      	ldr	r0, [r7, #20]
 8004548:	f7ff ff8e 	bl	8004468 <NVIC_EncodePriority>
 800454c:	4602      	mov	r2, r0
 800454e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004552:	4611      	mov	r1, r2
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff ff5d 	bl	8004414 <__NVIC_SetPriority>
}
 800455a:	bf00      	nop
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	4603      	mov	r3, r0
 800456a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800456c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff ff31 	bl	80043d8 <__NVIC_EnableIRQ>
}
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff ffa2 	bl	80044d0 <SysTick_Config>
 800458c:	4603      	mov	r3, r0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	@ 0x24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	e165      	b.n	8004880 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045b4:	2201      	movs	r2, #1
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4013      	ands	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	f040 8154 	bne.w	800487a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d005      	beq.n	80045ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d130      	bne.n	800464c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	2203      	movs	r2, #3
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43db      	mvns	r3, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4013      	ands	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004620:	2201      	movs	r2, #1
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	f003 0201 	and.w	r2, r3, #1
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	2b03      	cmp	r3, #3
 8004656:	d017      	beq.n	8004688 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	2203      	movs	r2, #3
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4013      	ands	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d123      	bne.n	80046dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	08da      	lsrs	r2, r3, #3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3208      	adds	r2, #8
 800469c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	220f      	movs	r2, #15
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	08da      	lsrs	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3208      	adds	r2, #8
 80046d6:	69b9      	ldr	r1, [r7, #24]
 80046d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	2203      	movs	r2, #3
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0203 	and.w	r2, r3, #3
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80ae 	beq.w	800487a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	4b5d      	ldr	r3, [pc, #372]	@ (8004898 <HAL_GPIO_Init+0x300>)
 8004724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004726:	4a5c      	ldr	r2, [pc, #368]	@ (8004898 <HAL_GPIO_Init+0x300>)
 8004728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800472c:	6453      	str	r3, [r2, #68]	@ 0x44
 800472e:	4b5a      	ldr	r3, [pc, #360]	@ (8004898 <HAL_GPIO_Init+0x300>)
 8004730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800473a:	4a58      	ldr	r2, [pc, #352]	@ (800489c <HAL_GPIO_Init+0x304>)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	3302      	adds	r3, #2
 8004742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	220f      	movs	r2, #15
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4013      	ands	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a4f      	ldr	r2, [pc, #316]	@ (80048a0 <HAL_GPIO_Init+0x308>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d025      	beq.n	80047b2 <HAL_GPIO_Init+0x21a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a4e      	ldr	r2, [pc, #312]	@ (80048a4 <HAL_GPIO_Init+0x30c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d01f      	beq.n	80047ae <HAL_GPIO_Init+0x216>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a4d      	ldr	r2, [pc, #308]	@ (80048a8 <HAL_GPIO_Init+0x310>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d019      	beq.n	80047aa <HAL_GPIO_Init+0x212>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a4c      	ldr	r2, [pc, #304]	@ (80048ac <HAL_GPIO_Init+0x314>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <HAL_GPIO_Init+0x20e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a4b      	ldr	r2, [pc, #300]	@ (80048b0 <HAL_GPIO_Init+0x318>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00d      	beq.n	80047a2 <HAL_GPIO_Init+0x20a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a4a      	ldr	r2, [pc, #296]	@ (80048b4 <HAL_GPIO_Init+0x31c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d007      	beq.n	800479e <HAL_GPIO_Init+0x206>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a49      	ldr	r2, [pc, #292]	@ (80048b8 <HAL_GPIO_Init+0x320>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d101      	bne.n	800479a <HAL_GPIO_Init+0x202>
 8004796:	2306      	movs	r3, #6
 8004798:	e00c      	b.n	80047b4 <HAL_GPIO_Init+0x21c>
 800479a:	2307      	movs	r3, #7
 800479c:	e00a      	b.n	80047b4 <HAL_GPIO_Init+0x21c>
 800479e:	2305      	movs	r3, #5
 80047a0:	e008      	b.n	80047b4 <HAL_GPIO_Init+0x21c>
 80047a2:	2304      	movs	r3, #4
 80047a4:	e006      	b.n	80047b4 <HAL_GPIO_Init+0x21c>
 80047a6:	2303      	movs	r3, #3
 80047a8:	e004      	b.n	80047b4 <HAL_GPIO_Init+0x21c>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e002      	b.n	80047b4 <HAL_GPIO_Init+0x21c>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <HAL_GPIO_Init+0x21c>
 80047b2:	2300      	movs	r3, #0
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	f002 0203 	and.w	r2, r2, #3
 80047ba:	0092      	lsls	r2, r2, #2
 80047bc:	4093      	lsls	r3, r2
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047c4:	4935      	ldr	r1, [pc, #212]	@ (800489c <HAL_GPIO_Init+0x304>)
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	089b      	lsrs	r3, r3, #2
 80047ca:	3302      	adds	r3, #2
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047d2:	4b3a      	ldr	r3, [pc, #232]	@ (80048bc <HAL_GPIO_Init+0x324>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	43db      	mvns	r3, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4013      	ands	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047f6:	4a31      	ldr	r2, [pc, #196]	@ (80048bc <HAL_GPIO_Init+0x324>)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047fc:	4b2f      	ldr	r3, [pc, #188]	@ (80048bc <HAL_GPIO_Init+0x324>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	43db      	mvns	r3, r3
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4013      	ands	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004820:	4a26      	ldr	r2, [pc, #152]	@ (80048bc <HAL_GPIO_Init+0x324>)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004826:	4b25      	ldr	r3, [pc, #148]	@ (80048bc <HAL_GPIO_Init+0x324>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	43db      	mvns	r3, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4013      	ands	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800484a:	4a1c      	ldr	r2, [pc, #112]	@ (80048bc <HAL_GPIO_Init+0x324>)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004850:	4b1a      	ldr	r3, [pc, #104]	@ (80048bc <HAL_GPIO_Init+0x324>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004874:	4a11      	ldr	r2, [pc, #68]	@ (80048bc <HAL_GPIO_Init+0x324>)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3301      	adds	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b0f      	cmp	r3, #15
 8004884:	f67f ae96 	bls.w	80045b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	3724      	adds	r7, #36	@ 0x24
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800
 800489c:	40013800 	.word	0x40013800
 80048a0:	40020000 	.word	0x40020000
 80048a4:	40020400 	.word	0x40020400
 80048a8:	40020800 	.word	0x40020800
 80048ac:	40020c00 	.word	0x40020c00
 80048b0:	40021000 	.word	0x40021000
 80048b4:	40021400 	.word	0x40021400
 80048b8:	40021800 	.word	0x40021800
 80048bc:	40013c00 	.word	0x40013c00

080048c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	807b      	strh	r3, [r7, #2]
 80048cc:	4613      	mov	r3, r2
 80048ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048d0:	787b      	ldrb	r3, [r7, #1]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048d6:	887a      	ldrh	r2, [r7, #2]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048dc:	e003      	b.n	80048e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048de:	887b      	ldrh	r3, [r7, #2]
 80048e0:	041a      	lsls	r2, r3, #16
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	619a      	str	r2, [r3, #24]
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004904:	887a      	ldrh	r2, [r7, #2]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4013      	ands	r3, r2
 800490a:	041a      	lsls	r2, r3, #16
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	43d9      	mvns	r1, r3
 8004910:	887b      	ldrh	r3, [r7, #2]
 8004912:	400b      	ands	r3, r1
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	619a      	str	r2, [r3, #24]
}
 800491a:	bf00      	nop
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004932:	4b08      	ldr	r3, [pc, #32]	@ (8004954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d006      	beq.n	800494c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800493e:	4a05      	ldr	r2, [pc, #20]	@ (8004954 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004944:	88fb      	ldrh	r3, [r7, #6]
 8004946:	4618      	mov	r0, r3
 8004948:	f7fc fe62 	bl	8001610 <HAL_GPIO_EXTI_Callback>
  }
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40013c00 	.word	0x40013c00

08004958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0cc      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800496c:	4b68      	ldr	r3, [pc, #416]	@ (8004b10 <HAL_RCC_ClockConfig+0x1b8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d90c      	bls.n	8004994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497a:	4b65      	ldr	r3, [pc, #404]	@ (8004b10 <HAL_RCC_ClockConfig+0x1b8>)
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b63      	ldr	r3, [pc, #396]	@ (8004b10 <HAL_RCC_ClockConfig+0x1b8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0b8      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d020      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ac:	4b59      	ldr	r3, [pc, #356]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a58      	ldr	r2, [pc, #352]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c4:	4b53      	ldr	r3, [pc, #332]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a52      	ldr	r2, [pc, #328]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d0:	4b50      	ldr	r3, [pc, #320]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	494d      	ldr	r1, [pc, #308]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d044      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f6:	4b47      	ldr	r3, [pc, #284]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d119      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e07f      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d003      	beq.n	8004a16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d107      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a16:	4b3f      	ldr	r3, [pc, #252]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d109      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e06f      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a26:	4b3b      	ldr	r3, [pc, #236]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e067      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a36:	4b37      	ldr	r3, [pc, #220]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f023 0203 	bic.w	r2, r3, #3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4934      	ldr	r1, [pc, #208]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a48:	f7ff f854 	bl	8003af4 <HAL_GetTick>
 8004a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a50:	f7ff f850 	bl	8003af4 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e04f      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	4b2b      	ldr	r3, [pc, #172]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 020c 	and.w	r2, r3, #12
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d1eb      	bne.n	8004a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a78:	4b25      	ldr	r3, [pc, #148]	@ (8004b10 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d20c      	bcs.n	8004aa0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a86:	4b22      	ldr	r3, [pc, #136]	@ (8004b10 <HAL_RCC_ClockConfig+0x1b8>)
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	4b20      	ldr	r3, [pc, #128]	@ (8004b10 <HAL_RCC_ClockConfig+0x1b8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e032      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aac:	4b19      	ldr	r3, [pc, #100]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4916      	ldr	r1, [pc, #88]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aca:	4b12      	ldr	r3, [pc, #72]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	490e      	ldr	r1, [pc, #56]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ade:	f000 f855 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	490a      	ldr	r1, [pc, #40]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c0>)
 8004af0:	5ccb      	ldrb	r3, [r1, r3]
 8004af2:	fa22 f303 	lsr.w	r3, r2, r3
 8004af6:	4a09      	ldr	r2, [pc, #36]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004afa:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe ffb4 	bl	8003a6c <HAL_InitTick>

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40023c00 	.word	0x40023c00
 8004b14:	40023800 	.word	0x40023800
 8004b18:	08009d34 	.word	0x08009d34
 8004b1c:	20000004 	.word	0x20000004
 8004b20:	200003c0 	.word	0x200003c0

08004b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b28:	4b03      	ldr	r3, [pc, #12]	@ (8004b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000004 	.word	0x20000004

08004b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b40:	f7ff fff0 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8004b44:	4602      	mov	r2, r0
 8004b46:	4b05      	ldr	r3, [pc, #20]	@ (8004b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	0a9b      	lsrs	r3, r3, #10
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	4903      	ldr	r1, [pc, #12]	@ (8004b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b52:	5ccb      	ldrb	r3, [r1, r3]
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	08009d44 	.word	0x08009d44

08004b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b68:	f7ff ffdc 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	0b5b      	lsrs	r3, r3, #13
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	4903      	ldr	r1, [pc, #12]	@ (8004b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b7a:	5ccb      	ldrb	r3, [r1, r3]
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40023800 	.word	0x40023800
 8004b88:	08009d44 	.word	0x08009d44

08004b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b90:	b0ae      	sub	sp, #184	@ 0xb8
 8004b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bb2:	4bcb      	ldr	r3, [pc, #812]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b0c      	cmp	r3, #12
 8004bbc:	f200 8206 	bhi.w	8004fcc <HAL_RCC_GetSysClockFreq+0x440>
 8004bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004bfd 	.word	0x08004bfd
 8004bcc:	08004fcd 	.word	0x08004fcd
 8004bd0:	08004fcd 	.word	0x08004fcd
 8004bd4:	08004fcd 	.word	0x08004fcd
 8004bd8:	08004c05 	.word	0x08004c05
 8004bdc:	08004fcd 	.word	0x08004fcd
 8004be0:	08004fcd 	.word	0x08004fcd
 8004be4:	08004fcd 	.word	0x08004fcd
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004fcd 	.word	0x08004fcd
 8004bf0:	08004fcd 	.word	0x08004fcd
 8004bf4:	08004fcd 	.word	0x08004fcd
 8004bf8:	08004dfd 	.word	0x08004dfd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bfc:	4bb9      	ldr	r3, [pc, #740]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c02:	e1e7      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c04:	4bb8      	ldr	r3, [pc, #736]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004c06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c0a:	e1e3      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c0c:	4bb4      	ldr	r3, [pc, #720]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c18:	4bb1      	ldr	r3, [pc, #708]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d071      	beq.n	8004d08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c24:	4bae      	ldr	r3, [pc, #696]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	099b      	lsrs	r3, r3, #6
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c30:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c40:	2300      	movs	r3, #0
 8004c42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	462b      	mov	r3, r5
 8004c4e:	f04f 0000 	mov.w	r0, #0
 8004c52:	f04f 0100 	mov.w	r1, #0
 8004c56:	0159      	lsls	r1, r3, #5
 8004c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c5c:	0150      	lsls	r0, r2, #5
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4621      	mov	r1, r4
 8004c64:	1a51      	subs	r1, r2, r1
 8004c66:	6439      	str	r1, [r7, #64]	@ 0x40
 8004c68:	4629      	mov	r1, r5
 8004c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	018b      	lsls	r3, r1, #6
 8004c80:	4641      	mov	r1, r8
 8004c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c86:	4641      	mov	r1, r8
 8004c88:	018a      	lsls	r2, r1, #6
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	1a51      	subs	r1, r2, r1
 8004c8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c90:	4649      	mov	r1, r9
 8004c92:	eb63 0301 	sbc.w	r3, r3, r1
 8004c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	00cb      	lsls	r3, r1, #3
 8004ca8:	4641      	mov	r1, r8
 8004caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cae:	4641      	mov	r1, r8
 8004cb0:	00ca      	lsls	r2, r1, #3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4622      	mov	r2, r4
 8004cba:	189b      	adds	r3, r3, r2
 8004cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cbe:	462b      	mov	r3, r5
 8004cc0:	460a      	mov	r2, r1
 8004cc2:	eb42 0303 	adc.w	r3, r2, r3
 8004cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	024b      	lsls	r3, r1, #9
 8004cd8:	4621      	mov	r1, r4
 8004cda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cde:	4621      	mov	r1, r4
 8004ce0:	024a      	lsls	r2, r1, #9
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cf4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004cf8:	f7fb ffe6 	bl	8000cc8 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4613      	mov	r3, r2
 8004d02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d06:	e067      	b.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d08:	4b75      	ldr	r3, [pc, #468]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	099b      	lsrs	r3, r3, #6
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d14:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d22:	2300      	movs	r3, #0
 8004d24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004d2a:	4622      	mov	r2, r4
 8004d2c:	462b      	mov	r3, r5
 8004d2e:	f04f 0000 	mov.w	r0, #0
 8004d32:	f04f 0100 	mov.w	r1, #0
 8004d36:	0159      	lsls	r1, r3, #5
 8004d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d3c:	0150      	lsls	r0, r2, #5
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4621      	mov	r1, r4
 8004d44:	1a51      	subs	r1, r2, r1
 8004d46:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d48:	4629      	mov	r1, r5
 8004d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	018b      	lsls	r3, r1, #6
 8004d60:	4641      	mov	r1, r8
 8004d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d66:	4641      	mov	r1, r8
 8004d68:	018a      	lsls	r2, r1, #6
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d70:	4649      	mov	r1, r9
 8004d72:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d8a:	4692      	mov	sl, r2
 8004d8c:	469b      	mov	fp, r3
 8004d8e:	4623      	mov	r3, r4
 8004d90:	eb1a 0303 	adds.w	r3, sl, r3
 8004d94:	623b      	str	r3, [r7, #32]
 8004d96:	462b      	mov	r3, r5
 8004d98:	eb4b 0303 	adc.w	r3, fp, r3
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004daa:	4629      	mov	r1, r5
 8004dac:	028b      	lsls	r3, r1, #10
 8004dae:	4621      	mov	r1, r4
 8004db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004db4:	4621      	mov	r1, r4
 8004db6:	028a      	lsls	r2, r1, #10
 8004db8:	4610      	mov	r0, r2
 8004dba:	4619      	mov	r1, r3
 8004dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dc4:	677a      	str	r2, [r7, #116]	@ 0x74
 8004dc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004dca:	f7fb ff7d 	bl	8000cc8 <__aeabi_uldivmod>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004dd8:	4b41      	ldr	r3, [pc, #260]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	0c1b      	lsrs	r3, r3, #16
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	3301      	adds	r3, #1
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004dfa:	e0eb      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dfc:	4b38      	ldr	r3, [pc, #224]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e08:	4b35      	ldr	r3, [pc, #212]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d06b      	beq.n	8004eec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e14:	4b32      	ldr	r3, [pc, #200]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	099b      	lsrs	r3, r3, #6
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e26:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e28:	2300      	movs	r3, #0
 8004e2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004e30:	4622      	mov	r2, r4
 8004e32:	462b      	mov	r3, r5
 8004e34:	f04f 0000 	mov.w	r0, #0
 8004e38:	f04f 0100 	mov.w	r1, #0
 8004e3c:	0159      	lsls	r1, r3, #5
 8004e3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e42:	0150      	lsls	r0, r2, #5
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4621      	mov	r1, r4
 8004e4a:	1a51      	subs	r1, r2, r1
 8004e4c:	61b9      	str	r1, [r7, #24]
 8004e4e:	4629      	mov	r1, r5
 8004e50:	eb63 0301 	sbc.w	r3, r3, r1
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e62:	4659      	mov	r1, fp
 8004e64:	018b      	lsls	r3, r1, #6
 8004e66:	4651      	mov	r1, sl
 8004e68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e6c:	4651      	mov	r1, sl
 8004e6e:	018a      	lsls	r2, r1, #6
 8004e70:	4651      	mov	r1, sl
 8004e72:	ebb2 0801 	subs.w	r8, r2, r1
 8004e76:	4659      	mov	r1, fp
 8004e78:	eb63 0901 	sbc.w	r9, r3, r1
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e90:	4690      	mov	r8, r2
 8004e92:	4699      	mov	r9, r3
 8004e94:	4623      	mov	r3, r4
 8004e96:	eb18 0303 	adds.w	r3, r8, r3
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	462b      	mov	r3, r5
 8004e9e:	eb49 0303 	adc.w	r3, r9, r3
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	024b      	lsls	r3, r1, #9
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eba:	4621      	mov	r1, r4
 8004ebc:	024a      	lsls	r2, r1, #9
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004eca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004ecc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ed0:	f7fb fefa 	bl	8000cc8 <__aeabi_uldivmod>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4613      	mov	r3, r2
 8004eda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ede:	e065      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x420>
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	00f42400 	.word	0x00f42400
 8004ee8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eec:	4b3d      	ldr	r3, [pc, #244]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	099b      	lsrs	r3, r3, #6
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004efc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004efe:	2300      	movs	r3, #0
 8004f00:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004f06:	4642      	mov	r2, r8
 8004f08:	464b      	mov	r3, r9
 8004f0a:	f04f 0000 	mov.w	r0, #0
 8004f0e:	f04f 0100 	mov.w	r1, #0
 8004f12:	0159      	lsls	r1, r3, #5
 8004f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f18:	0150      	lsls	r0, r2, #5
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4641      	mov	r1, r8
 8004f20:	1a51      	subs	r1, r2, r1
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	4649      	mov	r1, r9
 8004f26:	eb63 0301 	sbc.w	r3, r3, r1
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004f38:	4659      	mov	r1, fp
 8004f3a:	018b      	lsls	r3, r1, #6
 8004f3c:	4651      	mov	r1, sl
 8004f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f42:	4651      	mov	r1, sl
 8004f44:	018a      	lsls	r2, r1, #6
 8004f46:	4651      	mov	r1, sl
 8004f48:	1a54      	subs	r4, r2, r1
 8004f4a:	4659      	mov	r1, fp
 8004f4c:	eb63 0501 	sbc.w	r5, r3, r1
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	00eb      	lsls	r3, r5, #3
 8004f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5e:	00e2      	lsls	r2, r4, #3
 8004f60:	4614      	mov	r4, r2
 8004f62:	461d      	mov	r5, r3
 8004f64:	4643      	mov	r3, r8
 8004f66:	18e3      	adds	r3, r4, r3
 8004f68:	603b      	str	r3, [r7, #0]
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	eb45 0303 	adc.w	r3, r5, r3
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f7e:	4629      	mov	r1, r5
 8004f80:	028b      	lsls	r3, r1, #10
 8004f82:	4621      	mov	r1, r4
 8004f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f88:	4621      	mov	r1, r4
 8004f8a:	028a      	lsls	r2, r1, #10
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f94:	2200      	movs	r2, #0
 8004f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f98:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004f9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f9e:	f7fb fe93 	bl	8000cc8 <__aeabi_uldivmod>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004fac:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	0f1b      	lsrs	r3, r3, #28
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004fca:	e003      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fcc:	4b06      	ldr	r3, [pc, #24]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004fce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004fd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	37b8      	adds	r7, #184	@ 0xb8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	00f42400 	.word	0x00f42400

08004fec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e28d      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 8083 	beq.w	8005112 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800500c:	4b94      	ldr	r3, [pc, #592]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 030c 	and.w	r3, r3, #12
 8005014:	2b04      	cmp	r3, #4
 8005016:	d019      	beq.n	800504c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005018:	4b91      	ldr	r3, [pc, #580]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 030c 	and.w	r3, r3, #12
        || \
 8005020:	2b08      	cmp	r3, #8
 8005022:	d106      	bne.n	8005032 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005024:	4b8e      	ldr	r3, [pc, #568]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800502c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005030:	d00c      	beq.n	800504c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005032:	4b8b      	ldr	r3, [pc, #556]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800503a:	2b0c      	cmp	r3, #12
 800503c:	d112      	bne.n	8005064 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800503e:	4b88      	ldr	r3, [pc, #544]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005046:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800504a:	d10b      	bne.n	8005064 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800504c:	4b84      	ldr	r3, [pc, #528]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d05b      	beq.n	8005110 <HAL_RCC_OscConfig+0x124>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d157      	bne.n	8005110 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e25a      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800506c:	d106      	bne.n	800507c <HAL_RCC_OscConfig+0x90>
 800506e:	4b7c      	ldr	r3, [pc, #496]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a7b      	ldr	r2, [pc, #492]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	e01d      	b.n	80050b8 <HAL_RCC_OscConfig+0xcc>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005084:	d10c      	bne.n	80050a0 <HAL_RCC_OscConfig+0xb4>
 8005086:	4b76      	ldr	r3, [pc, #472]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a75      	ldr	r2, [pc, #468]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 800508c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	4b73      	ldr	r3, [pc, #460]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a72      	ldr	r2, [pc, #456]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e00b      	b.n	80050b8 <HAL_RCC_OscConfig+0xcc>
 80050a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a6e      	ldr	r2, [pc, #440]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 80050a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	4b6c      	ldr	r3, [pc, #432]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a6b      	ldr	r2, [pc, #428]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 80050b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d013      	beq.n	80050e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fe fd18 	bl	8003af4 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c8:	f7fe fd14 	bl	8003af4 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b64      	cmp	r3, #100	@ 0x64
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e21f      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050da:	4b61      	ldr	r3, [pc, #388]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0xdc>
 80050e6:	e014      	b.n	8005112 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fe fd04 	bl	8003af4 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f0:	f7fe fd00 	bl	8003af4 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	@ 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e20b      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005102:	4b57      	ldr	r3, [pc, #348]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0x104>
 800510e:	e000      	b.n	8005112 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d06f      	beq.n	80051fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800511e:	4b50      	ldr	r3, [pc, #320]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	2b00      	cmp	r3, #0
 8005128:	d017      	beq.n	800515a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800512a:	4b4d      	ldr	r3, [pc, #308]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005132:	2b08      	cmp	r3, #8
 8005134:	d105      	bne.n	8005142 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005136:	4b4a      	ldr	r3, [pc, #296]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00b      	beq.n	800515a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005142:	4b47      	ldr	r3, [pc, #284]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800514a:	2b0c      	cmp	r3, #12
 800514c:	d11c      	bne.n	8005188 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800514e:	4b44      	ldr	r3, [pc, #272]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d116      	bne.n	8005188 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515a:	4b41      	ldr	r3, [pc, #260]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <HAL_RCC_OscConfig+0x186>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d001      	beq.n	8005172 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e1d3      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005172:	4b3b      	ldr	r3, [pc, #236]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	4937      	ldr	r1, [pc, #220]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005186:	e03a      	b.n	80051fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d020      	beq.n	80051d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005190:	4b34      	ldr	r3, [pc, #208]	@ (8005264 <HAL_RCC_OscConfig+0x278>)
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005196:	f7fe fcad 	bl	8003af4 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800519e:	f7fe fca9 	bl	8003af4 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e1b4      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051bc:	4b28      	ldr	r3, [pc, #160]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	4925      	ldr	r1, [pc, #148]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	600b      	str	r3, [r1, #0]
 80051d0:	e015      	b.n	80051fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051d2:	4b24      	ldr	r3, [pc, #144]	@ (8005264 <HAL_RCC_OscConfig+0x278>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d8:	f7fe fc8c 	bl	8003af4 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051e0:	f7fe fc88 	bl	8003af4 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e193      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d036      	beq.n	8005278 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d016      	beq.n	8005240 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005212:	4b15      	ldr	r3, [pc, #84]	@ (8005268 <HAL_RCC_OscConfig+0x27c>)
 8005214:	2201      	movs	r2, #1
 8005216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005218:	f7fe fc6c 	bl	8003af4 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005220:	f7fe fc68 	bl	8003af4 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e173      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005232:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0x234>
 800523e:	e01b      	b.n	8005278 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005240:	4b09      	ldr	r3, [pc, #36]	@ (8005268 <HAL_RCC_OscConfig+0x27c>)
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005246:	f7fe fc55 	bl	8003af4 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800524c:	e00e      	b.n	800526c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800524e:	f7fe fc51 	bl	8003af4 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d907      	bls.n	800526c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e15c      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
 8005260:	40023800 	.word	0x40023800
 8005264:	42470000 	.word	0x42470000
 8005268:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800526c:	4b8a      	ldr	r3, [pc, #552]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 800526e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1ea      	bne.n	800524e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 8097 	beq.w	80053b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005286:	2300      	movs	r3, #0
 8005288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800528a:	4b83      	ldr	r3, [pc, #524]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10f      	bne.n	80052b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005296:	2300      	movs	r3, #0
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	4b7f      	ldr	r3, [pc, #508]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529e:	4a7e      	ldr	r2, [pc, #504]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 80052a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80052a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ae:	60bb      	str	r3, [r7, #8]
 80052b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052b2:	2301      	movs	r3, #1
 80052b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b6:	4b79      	ldr	r3, [pc, #484]	@ (800549c <HAL_RCC_OscConfig+0x4b0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d118      	bne.n	80052f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052c2:	4b76      	ldr	r3, [pc, #472]	@ (800549c <HAL_RCC_OscConfig+0x4b0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a75      	ldr	r2, [pc, #468]	@ (800549c <HAL_RCC_OscConfig+0x4b0>)
 80052c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ce:	f7fe fc11 	bl	8003af4 <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d6:	f7fe fc0d 	bl	8003af4 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e118      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e8:	4b6c      	ldr	r3, [pc, #432]	@ (800549c <HAL_RCC_OscConfig+0x4b0>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0f0      	beq.n	80052d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d106      	bne.n	800530a <HAL_RCC_OscConfig+0x31e>
 80052fc:	4b66      	ldr	r3, [pc, #408]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 80052fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005300:	4a65      	ldr	r2, [pc, #404]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 8005302:	f043 0301 	orr.w	r3, r3, #1
 8005306:	6713      	str	r3, [r2, #112]	@ 0x70
 8005308:	e01c      	b.n	8005344 <HAL_RCC_OscConfig+0x358>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	2b05      	cmp	r3, #5
 8005310:	d10c      	bne.n	800532c <HAL_RCC_OscConfig+0x340>
 8005312:	4b61      	ldr	r3, [pc, #388]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005316:	4a60      	ldr	r2, [pc, #384]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 8005318:	f043 0304 	orr.w	r3, r3, #4
 800531c:	6713      	str	r3, [r2, #112]	@ 0x70
 800531e:	4b5e      	ldr	r3, [pc, #376]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 8005320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005322:	4a5d      	ldr	r2, [pc, #372]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	6713      	str	r3, [r2, #112]	@ 0x70
 800532a:	e00b      	b.n	8005344 <HAL_RCC_OscConfig+0x358>
 800532c:	4b5a      	ldr	r3, [pc, #360]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 800532e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005330:	4a59      	ldr	r2, [pc, #356]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 8005332:	f023 0301 	bic.w	r3, r3, #1
 8005336:	6713      	str	r3, [r2, #112]	@ 0x70
 8005338:	4b57      	ldr	r3, [pc, #348]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 800533a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533c:	4a56      	ldr	r2, [pc, #344]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 800533e:	f023 0304 	bic.w	r3, r3, #4
 8005342:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d015      	beq.n	8005378 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534c:	f7fe fbd2 	bl	8003af4 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005352:	e00a      	b.n	800536a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005354:	f7fe fbce 	bl	8003af4 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e0d7      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536a:	4b4b      	ldr	r3, [pc, #300]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 800536c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0ee      	beq.n	8005354 <HAL_RCC_OscConfig+0x368>
 8005376:	e014      	b.n	80053a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005378:	f7fe fbbc 	bl	8003af4 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800537e:	e00a      	b.n	8005396 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005380:	f7fe fbb8 	bl	8003af4 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e0c1      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005396:	4b40      	ldr	r3, [pc, #256]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1ee      	bne.n	8005380 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d105      	bne.n	80053b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 80053aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 80053ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 80ad 	beq.w	8005518 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053be:	4b36      	ldr	r3, [pc, #216]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 030c 	and.w	r3, r3, #12
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d060      	beq.n	800548c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d145      	bne.n	800545e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d2:	4b33      	ldr	r3, [pc, #204]	@ (80054a0 <HAL_RCC_OscConfig+0x4b4>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d8:	f7fe fb8c 	bl	8003af4 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e0:	f7fe fb88 	bl	8003af4 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e093      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f2:	4b29      	ldr	r3, [pc, #164]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f0      	bne.n	80053e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69da      	ldr	r2, [r3, #28]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	019b      	lsls	r3, r3, #6
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005414:	085b      	lsrs	r3, r3, #1
 8005416:	3b01      	subs	r3, #1
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005420:	061b      	lsls	r3, r3, #24
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005428:	071b      	lsls	r3, r3, #28
 800542a:	491b      	ldr	r1, [pc, #108]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 800542c:	4313      	orrs	r3, r2
 800542e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005430:	4b1b      	ldr	r3, [pc, #108]	@ (80054a0 <HAL_RCC_OscConfig+0x4b4>)
 8005432:	2201      	movs	r2, #1
 8005434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005436:	f7fe fb5d 	bl	8003af4 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543e:	f7fe fb59 	bl	8003af4 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e064      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005450:	4b11      	ldr	r3, [pc, #68]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0f0      	beq.n	800543e <HAL_RCC_OscConfig+0x452>
 800545c:	e05c      	b.n	8005518 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545e:	4b10      	ldr	r3, [pc, #64]	@ (80054a0 <HAL_RCC_OscConfig+0x4b4>)
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fe fb46 	bl	8003af4 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800546c:	f7fe fb42 	bl	8003af4 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e04d      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <HAL_RCC_OscConfig+0x4ac>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <HAL_RCC_OscConfig+0x480>
 800548a:	e045      	b.n	8005518 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d107      	bne.n	80054a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e040      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
 8005498:	40023800 	.word	0x40023800
 800549c:	40007000 	.word	0x40007000
 80054a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005524 <HAL_RCC_OscConfig+0x538>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d030      	beq.n	8005514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054bc:	429a      	cmp	r2, r3
 80054be:	d129      	bne.n	8005514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d122      	bne.n	8005514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054d4:	4013      	ands	r3, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054dc:	4293      	cmp	r3, r2
 80054de:	d119      	bne.n	8005514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	3b01      	subs	r3, #1
 80054ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d10f      	bne.n	8005514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005500:	429a      	cmp	r2, r3
 8005502:	d107      	bne.n	8005514 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005510:	429a      	cmp	r2, r3
 8005512:	d001      	beq.n	8005518 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40023800 	.word	0x40023800

08005528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e07b      	b.n	8005632 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553e:	2b00      	cmp	r3, #0
 8005540:	d108      	bne.n	8005554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800554a:	d009      	beq.n	8005560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	61da      	str	r2, [r3, #28]
 8005552:	e005      	b.n	8005560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fc f8a2 	bl	80016c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005596:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e4:	ea42 0103 	orr.w	r1, r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	0c1b      	lsrs	r3, r3, #16
 80055fe:	f003 0104 	and.w	r1, r3, #4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	f003 0210 	and.w	r2, r3, #16
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005620:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b088      	sub	sp, #32
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800564a:	f7fe fa53 	bl	8003af4 <HAL_GetTick>
 800564e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	d001      	beq.n	8005664 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
 8005662:	e12a      	b.n	80058ba <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_SPI_Transmit+0x36>
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e122      	b.n	80058ba <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_SPI_Transmit+0x48>
 800567e:	2302      	movs	r3, #2
 8005680:	e11b      	b.n	80058ba <HAL_SPI_Transmit+0x280>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2203      	movs	r2, #3
 800568e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	88fa      	ldrh	r2, [r7, #6]
 80056a2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d0:	d10f      	bne.n	80056f2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fc:	2b40      	cmp	r3, #64	@ 0x40
 80056fe:	d007      	beq.n	8005710 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800570e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005718:	d152      	bne.n	80057c0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_SPI_Transmit+0xee>
 8005722:	8b7b      	ldrh	r3, [r7, #26]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d145      	bne.n	80057b4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572c:	881a      	ldrh	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005738:	1c9a      	adds	r2, r3, #2
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800574c:	e032      	b.n	80057b4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b02      	cmp	r3, #2
 800575a:	d112      	bne.n	8005782 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005760:	881a      	ldrh	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576c:	1c9a      	adds	r2, r3, #2
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005780:	e018      	b.n	80057b4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005782:	f7fe f9b7 	bl	8003af4 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d803      	bhi.n	800579a <HAL_SPI_Transmit+0x160>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005798:	d102      	bne.n	80057a0 <HAL_SPI_Transmit+0x166>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d109      	bne.n	80057b4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e082      	b.n	80058ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1c7      	bne.n	800574e <HAL_SPI_Transmit+0x114>
 80057be:	e053      	b.n	8005868 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_SPI_Transmit+0x194>
 80057c8:	8b7b      	ldrh	r3, [r7, #26]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d147      	bne.n	800585e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	7812      	ldrb	r2, [r2, #0]
 80057da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057f4:	e033      	b.n	800585e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d113      	bne.n	800582c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	330c      	adds	r3, #12
 800580e:	7812      	ldrb	r2, [r2, #0]
 8005810:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	86da      	strh	r2, [r3, #54]	@ 0x36
 800582a:	e018      	b.n	800585e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800582c:	f7fe f962 	bl	8003af4 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d803      	bhi.n	8005844 <HAL_SPI_Transmit+0x20a>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005842:	d102      	bne.n	800584a <HAL_SPI_Transmit+0x210>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d109      	bne.n	800585e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e02d      	b.n	80058ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1c6      	bne.n	80057f6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f8b1 	bl	80059d4 <SPI_EndRxTxTransaction>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80058b8:	2300      	movs	r3, #0
  }
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3720      	adds	r7, #32
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058d4:	f7fe f90e 	bl	8003af4 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	4413      	add	r3, r2
 80058e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058e4:	f7fe f906 	bl	8003af4 <HAL_GetTick>
 80058e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058ea:	4b39      	ldr	r3, [pc, #228]	@ (80059d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	015b      	lsls	r3, r3, #5
 80058f0:	0d1b      	lsrs	r3, r3, #20
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	fb02 f303 	mul.w	r3, r2, r3
 80058f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058fa:	e055      	b.n	80059a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005902:	d051      	beq.n	80059a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005904:	f7fe f8f6 	bl	8003af4 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	429a      	cmp	r2, r3
 8005912:	d902      	bls.n	800591a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d13d      	bne.n	8005996 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005928:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005932:	d111      	bne.n	8005958 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800593c:	d004      	beq.n	8005948 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005946:	d107      	bne.n	8005958 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005956:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005960:	d10f      	bne.n	8005982 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005980:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e018      	b.n	80059c8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	61fb      	str	r3, [r7, #28]
 80059a0:	e002      	b.n	80059a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4013      	ands	r3, r2
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	bf0c      	ite	eq
 80059b8:	2301      	moveq	r3, #1
 80059ba:	2300      	movne	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d19a      	bne.n	80058fc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20000004 	.word	0x20000004

080059d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2201      	movs	r2, #1
 80059e8:	2102      	movs	r1, #2
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff ff6a 	bl	80058c4 <SPI_WaitFlagStateUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fa:	f043 0220 	orr.w	r2, r3, #32
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e032      	b.n	8005a6c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a06:	4b1b      	ldr	r3, [pc, #108]	@ (8005a74 <SPI_EndRxTxTransaction+0xa0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a1b      	ldr	r2, [pc, #108]	@ (8005a78 <SPI_EndRxTxTransaction+0xa4>)
 8005a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a10:	0d5b      	lsrs	r3, r3, #21
 8005a12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
 8005a1a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a24:	d112      	bne.n	8005a4c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2180      	movs	r1, #128	@ 0x80
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f7ff ff47 	bl	80058c4 <SPI_WaitFlagStateUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d016      	beq.n	8005a6a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a40:	f043 0220 	orr.w	r2, r3, #32
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e00f      	b.n	8005a6c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a62:	2b80      	cmp	r3, #128	@ 0x80
 8005a64:	d0f2      	beq.n	8005a4c <SPI_EndRxTxTransaction+0x78>
 8005a66:	e000      	b.n	8005a6a <SPI_EndRxTxTransaction+0x96>
        break;
 8005a68:	bf00      	nop
  }

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20000004 	.word	0x20000004
 8005a78:	165e9f81 	.word	0x165e9f81

08005a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e041      	b.n	8005b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fc fa3a 	bl	8001f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f000 fcc4 	bl	8006448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d001      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e04e      	b.n	8005bd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a23      	ldr	r2, [pc, #140]	@ (8005be0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d022      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b5e:	d01d      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1f      	ldr	r2, [pc, #124]	@ (8005be4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d018      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005be8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d013      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1c      	ldr	r2, [pc, #112]	@ (8005bec <HAL_TIM_Base_Start_IT+0xd0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00e      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1b      	ldr	r2, [pc, #108]	@ (8005bf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d009      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a19      	ldr	r2, [pc, #100]	@ (8005bf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d004      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0x80>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a18      	ldr	r2, [pc, #96]	@ (8005bf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d111      	bne.n	8005bc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b06      	cmp	r3, #6
 8005bac:	d010      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0201 	orr.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbe:	e007      	b.n	8005bd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	40000c00 	.word	0x40000c00
 8005bf0:	40010400 	.word	0x40010400
 8005bf4:	40014000 	.word	0x40014000
 8005bf8:	40001800 	.word	0x40001800

08005bfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e041      	b.n	8005c92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fc f8c6 	bl	8001db4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	f000 fc04 	bl	8006448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d109      	bne.n	8005cc0 <HAL_TIM_PWM_Start+0x24>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	bf14      	ite	ne
 8005cb8:	2301      	movne	r3, #1
 8005cba:	2300      	moveq	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	e022      	b.n	8005d06 <HAL_TIM_PWM_Start+0x6a>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d109      	bne.n	8005cda <HAL_TIM_PWM_Start+0x3e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	bf14      	ite	ne
 8005cd2:	2301      	movne	r3, #1
 8005cd4:	2300      	moveq	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	e015      	b.n	8005d06 <HAL_TIM_PWM_Start+0x6a>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d109      	bne.n	8005cf4 <HAL_TIM_PWM_Start+0x58>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	bf14      	ite	ne
 8005cec:	2301      	movne	r3, #1
 8005cee:	2300      	moveq	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	e008      	b.n	8005d06 <HAL_TIM_PWM_Start+0x6a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	bf14      	ite	ne
 8005d00:	2301      	movne	r3, #1
 8005d02:	2300      	moveq	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e07c      	b.n	8005e08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <HAL_TIM_PWM_Start+0x82>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d1c:	e013      	b.n	8005d46 <HAL_TIM_PWM_Start+0xaa>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d104      	bne.n	8005d2e <HAL_TIM_PWM_Start+0x92>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d2c:	e00b      	b.n	8005d46 <HAL_TIM_PWM_Start+0xaa>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d104      	bne.n	8005d3e <HAL_TIM_PWM_Start+0xa2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d3c:	e003      	b.n	8005d46 <HAL_TIM_PWM_Start+0xaa>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2202      	movs	r2, #2
 8005d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fdd0 	bl	80068f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a2d      	ldr	r2, [pc, #180]	@ (8005e10 <HAL_TIM_PWM_Start+0x174>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d004      	beq.n	8005d68 <HAL_TIM_PWM_Start+0xcc>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a2c      	ldr	r2, [pc, #176]	@ (8005e14 <HAL_TIM_PWM_Start+0x178>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d101      	bne.n	8005d6c <HAL_TIM_PWM_Start+0xd0>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e000      	b.n	8005d6e <HAL_TIM_PWM_Start+0xd2>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d007      	beq.n	8005d82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a22      	ldr	r2, [pc, #136]	@ (8005e10 <HAL_TIM_PWM_Start+0x174>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d022      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0x136>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d94:	d01d      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0x136>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005e18 <HAL_TIM_PWM_Start+0x17c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d018      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0x136>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e1c <HAL_TIM_PWM_Start+0x180>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d013      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0x136>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1c      	ldr	r2, [pc, #112]	@ (8005e20 <HAL_TIM_PWM_Start+0x184>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00e      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0x136>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a16      	ldr	r2, [pc, #88]	@ (8005e14 <HAL_TIM_PWM_Start+0x178>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d009      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0x136>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a18      	ldr	r2, [pc, #96]	@ (8005e24 <HAL_TIM_PWM_Start+0x188>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d004      	beq.n	8005dd2 <HAL_TIM_PWM_Start+0x136>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a16      	ldr	r2, [pc, #88]	@ (8005e28 <HAL_TIM_PWM_Start+0x18c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d111      	bne.n	8005df6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b06      	cmp	r3, #6
 8005de2:	d010      	beq.n	8005e06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df4:	e007      	b.n	8005e06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f042 0201 	orr.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40010000 	.word	0x40010000
 8005e14:	40010400 	.word	0x40010400
 8005e18:	40000400 	.word	0x40000400
 8005e1c:	40000800 	.word	0x40000800
 8005e20:	40000c00 	.word	0x40000c00
 8005e24:	40014000 	.word	0x40014000
 8005e28:	40001800 	.word	0x40001800

08005e2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e097      	b.n	8005f70 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d106      	bne.n	8005e5a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7fb ffe3 	bl	8001e20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e70:	f023 0307 	bic.w	r3, r3, #7
 8005e74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f000 fae1 	bl	8006448 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eae:	f023 0303 	bic.w	r3, r3, #3
 8005eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005ecc:	f023 030c 	bic.w	r3, r3, #12
 8005ed0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ed8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005edc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	021b      	lsls	r3, r3, #8
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	011a      	lsls	r2, r3, #4
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	031b      	lsls	r3, r3, #12
 8005efc:	4313      	orrs	r3, r2
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f0a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f88:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f90:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f98:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005fa0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d110      	bne.n	8005fca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d102      	bne.n	8005fb4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fae:	7b7b      	ldrb	r3, [r7, #13]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d001      	beq.n	8005fb8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e069      	b.n	800608c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fc8:	e031      	b.n	800602e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d110      	bne.n	8005ff2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d102      	bne.n	8005fdc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fd6:	7b3b      	ldrb	r3, [r7, #12]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d001      	beq.n	8005fe0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e055      	b.n	800608c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ff0:	e01d      	b.n	800602e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d108      	bne.n	800600a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d105      	bne.n	800600a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ffe:	7b7b      	ldrb	r3, [r7, #13]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d102      	bne.n	800600a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006004:	7b3b      	ldrb	r3, [r7, #12]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d001      	beq.n	800600e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e03e      	b.n	800608c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2202      	movs	r2, #2
 8006022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <HAL_TIM_Encoder_Start+0xc4>
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b04      	cmp	r3, #4
 8006038:	d008      	beq.n	800604c <HAL_TIM_Encoder_Start+0xd4>
 800603a:	e00f      	b.n	800605c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2201      	movs	r2, #1
 8006042:	2100      	movs	r1, #0
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fc55 	bl	80068f4 <TIM_CCxChannelCmd>
      break;
 800604a:	e016      	b.n	800607a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2201      	movs	r2, #1
 8006052:	2104      	movs	r1, #4
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fc4d 	bl	80068f4 <TIM_CCxChannelCmd>
      break;
 800605a:	e00e      	b.n	800607a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2201      	movs	r2, #1
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fc45 	bl	80068f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2201      	movs	r2, #1
 8006070:	2104      	movs	r1, #4
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fc3e 	bl	80068f4 <TIM_CCxChannelCmd>
      break;
 8006078:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f042 0201 	orr.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d020      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01b      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0202 	mvn.w	r2, #2
 80060c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f994 	bl	800640c <HAL_TIM_IC_CaptureCallback>
 80060e4:	e005      	b.n	80060f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f986 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f997 	bl	8006420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d020      	beq.n	8006144 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01b      	beq.n	8006144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0204 	mvn.w	r2, #4
 8006114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2202      	movs	r2, #2
 800611a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f96e 	bl	800640c <HAL_TIM_IC_CaptureCallback>
 8006130:	e005      	b.n	800613e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f960 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f971 	bl	8006420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d020      	beq.n	8006190 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01b      	beq.n	8006190 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0208 	mvn.w	r2, #8
 8006160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2204      	movs	r2, #4
 8006166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f948 	bl	800640c <HAL_TIM_IC_CaptureCallback>
 800617c:	e005      	b.n	800618a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f93a 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f94b 	bl	8006420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b00      	cmp	r3, #0
 8006198:	d020      	beq.n	80061dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01b      	beq.n	80061dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0210 	mvn.w	r2, #16
 80061ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2208      	movs	r2, #8
 80061b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f922 	bl	800640c <HAL_TIM_IC_CaptureCallback>
 80061c8:	e005      	b.n	80061d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f914 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f925 	bl	8006420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00c      	beq.n	8006200 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0201 	mvn.w	r2, #1
 80061f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fb f9d8 	bl	80015b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00c      	beq.n	8006224 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800621c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fc14 	bl	8006a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00c      	beq.n	8006248 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d007      	beq.n	8006248 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f8f6 	bl	8006434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00c      	beq.n	800626c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0220 	mvn.w	r2, #32
 8006264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fbe6 	bl	8006a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800626c:	bf00      	nop
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800628e:	2302      	movs	r3, #2
 8006290:	e0ae      	b.n	80063f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b0c      	cmp	r3, #12
 800629e:	f200 809f 	bhi.w	80063e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062a2:	a201      	add	r2, pc, #4	@ (adr r2, 80062a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062dd 	.word	0x080062dd
 80062ac:	080063e1 	.word	0x080063e1
 80062b0:	080063e1 	.word	0x080063e1
 80062b4:	080063e1 	.word	0x080063e1
 80062b8:	0800631d 	.word	0x0800631d
 80062bc:	080063e1 	.word	0x080063e1
 80062c0:	080063e1 	.word	0x080063e1
 80062c4:	080063e1 	.word	0x080063e1
 80062c8:	0800635f 	.word	0x0800635f
 80062cc:	080063e1 	.word	0x080063e1
 80062d0:	080063e1 	.word	0x080063e1
 80062d4:	080063e1 	.word	0x080063e1
 80062d8:	0800639f 	.word	0x0800639f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 f956 	bl	8006594 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0208 	orr.w	r2, r2, #8
 80062f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0204 	bic.w	r2, r2, #4
 8006306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6999      	ldr	r1, [r3, #24]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	691a      	ldr	r2, [r3, #16]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	619a      	str	r2, [r3, #24]
      break;
 800631a:	e064      	b.n	80063e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 f9a6 	bl	8006674 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699a      	ldr	r2, [r3, #24]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6999      	ldr	r1, [r3, #24]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	021a      	lsls	r2, r3, #8
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	619a      	str	r2, [r3, #24]
      break;
 800635c:	e043      	b.n	80063e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	4618      	mov	r0, r3
 8006366:	f000 f9fb 	bl	8006760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0208 	orr.w	r2, r2, #8
 8006378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69da      	ldr	r2, [r3, #28]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0204 	bic.w	r2, r2, #4
 8006388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69d9      	ldr	r1, [r3, #28]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	61da      	str	r2, [r3, #28]
      break;
 800639c:	e023      	b.n	80063e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fa4f 	bl	8006848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69d9      	ldr	r1, [r3, #28]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	021a      	lsls	r2, r3, #8
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	61da      	str	r2, [r3, #28]
      break;
 80063de:	e002      	b.n	80063e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	75fb      	strb	r3, [r7, #23]
      break;
 80063e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a43      	ldr	r2, [pc, #268]	@ (8006568 <TIM_Base_SetConfig+0x120>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d013      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006466:	d00f      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a40      	ldr	r2, [pc, #256]	@ (800656c <TIM_Base_SetConfig+0x124>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00b      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a3f      	ldr	r2, [pc, #252]	@ (8006570 <TIM_Base_SetConfig+0x128>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d007      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a3e      	ldr	r2, [pc, #248]	@ (8006574 <TIM_Base_SetConfig+0x12c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a3d      	ldr	r2, [pc, #244]	@ (8006578 <TIM_Base_SetConfig+0x130>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d108      	bne.n	800649a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800648e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a32      	ldr	r2, [pc, #200]	@ (8006568 <TIM_Base_SetConfig+0x120>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d02b      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a8:	d027      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a2f      	ldr	r2, [pc, #188]	@ (800656c <TIM_Base_SetConfig+0x124>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d023      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a2e      	ldr	r2, [pc, #184]	@ (8006570 <TIM_Base_SetConfig+0x128>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d01f      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006574 <TIM_Base_SetConfig+0x12c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d01b      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006578 <TIM_Base_SetConfig+0x130>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d017      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a2b      	ldr	r2, [pc, #172]	@ (800657c <TIM_Base_SetConfig+0x134>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d013      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006580 <TIM_Base_SetConfig+0x138>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00f      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a29      	ldr	r2, [pc, #164]	@ (8006584 <TIM_Base_SetConfig+0x13c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00b      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a28      	ldr	r2, [pc, #160]	@ (8006588 <TIM_Base_SetConfig+0x140>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a27      	ldr	r2, [pc, #156]	@ (800658c <TIM_Base_SetConfig+0x144>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d003      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a26      	ldr	r2, [pc, #152]	@ (8006590 <TIM_Base_SetConfig+0x148>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d108      	bne.n	800650c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a0e      	ldr	r2, [pc, #56]	@ (8006568 <TIM_Base_SetConfig+0x120>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d003      	beq.n	800653a <TIM_Base_SetConfig+0xf2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a10      	ldr	r2, [pc, #64]	@ (8006578 <TIM_Base_SetConfig+0x130>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d103      	bne.n	8006542 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f043 0204 	orr.w	r2, r3, #4
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	601a      	str	r2, [r3, #0]
}
 800655a:	bf00      	nop
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	40010000 	.word	0x40010000
 800656c:	40000400 	.word	0x40000400
 8006570:	40000800 	.word	0x40000800
 8006574:	40000c00 	.word	0x40000c00
 8006578:	40010400 	.word	0x40010400
 800657c:	40014000 	.word	0x40014000
 8006580:	40014400 	.word	0x40014400
 8006584:	40014800 	.word	0x40014800
 8006588:	40001800 	.word	0x40001800
 800658c:	40001c00 	.word	0x40001c00
 8006590:	40002000 	.word	0x40002000

08006594 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	f023 0201 	bic.w	r2, r3, #1
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0303 	bic.w	r3, r3, #3
 80065ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f023 0302 	bic.w	r3, r3, #2
 80065dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a20      	ldr	r2, [pc, #128]	@ (800666c <TIM_OC1_SetConfig+0xd8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d003      	beq.n	80065f8 <TIM_OC1_SetConfig+0x64>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006670 <TIM_OC1_SetConfig+0xdc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d10c      	bne.n	8006612 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f023 0308 	bic.w	r3, r3, #8
 80065fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f023 0304 	bic.w	r3, r3, #4
 8006610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a15      	ldr	r2, [pc, #84]	@ (800666c <TIM_OC1_SetConfig+0xd8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d003      	beq.n	8006622 <TIM_OC1_SetConfig+0x8e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a14      	ldr	r2, [pc, #80]	@ (8006670 <TIM_OC1_SetConfig+0xdc>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d111      	bne.n	8006646 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4313      	orrs	r3, r2
 8006644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	621a      	str	r2, [r3, #32]
}
 8006660:	bf00      	nop
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	40010000 	.word	0x40010000
 8006670:	40010400 	.word	0x40010400

08006674 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	f023 0210 	bic.w	r2, r3, #16
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	021b      	lsls	r3, r3, #8
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f023 0320 	bic.w	r3, r3, #32
 80066be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a22      	ldr	r2, [pc, #136]	@ (8006758 <TIM_OC2_SetConfig+0xe4>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d003      	beq.n	80066dc <TIM_OC2_SetConfig+0x68>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a21      	ldr	r2, [pc, #132]	@ (800675c <TIM_OC2_SetConfig+0xe8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d10d      	bne.n	80066f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a17      	ldr	r2, [pc, #92]	@ (8006758 <TIM_OC2_SetConfig+0xe4>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d003      	beq.n	8006708 <TIM_OC2_SetConfig+0x94>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a16      	ldr	r2, [pc, #88]	@ (800675c <TIM_OC2_SetConfig+0xe8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d113      	bne.n	8006730 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800670e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006716:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	621a      	str	r2, [r3, #32]
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40010000 	.word	0x40010000
 800675c:	40010400 	.word	0x40010400

08006760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0303 	bic.w	r3, r3, #3
 8006796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a21      	ldr	r2, [pc, #132]	@ (8006840 <TIM_OC3_SetConfig+0xe0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d003      	beq.n	80067c6 <TIM_OC3_SetConfig+0x66>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a20      	ldr	r2, [pc, #128]	@ (8006844 <TIM_OC3_SetConfig+0xe4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d10d      	bne.n	80067e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	021b      	lsls	r3, r3, #8
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a16      	ldr	r2, [pc, #88]	@ (8006840 <TIM_OC3_SetConfig+0xe0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_OC3_SetConfig+0x92>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a15      	ldr	r2, [pc, #84]	@ (8006844 <TIM_OC3_SetConfig+0xe4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d113      	bne.n	800681a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	621a      	str	r2, [r3, #32]
}
 8006834:	bf00      	nop
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	40010000 	.word	0x40010000
 8006844:	40010400 	.word	0x40010400

08006848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800687e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	031b      	lsls	r3, r3, #12
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	4313      	orrs	r3, r2
 800689e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a12      	ldr	r2, [pc, #72]	@ (80068ec <TIM_OC4_SetConfig+0xa4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_OC4_SetConfig+0x68>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a11      	ldr	r2, [pc, #68]	@ (80068f0 <TIM_OC4_SetConfig+0xa8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d109      	bne.n	80068c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	019b      	lsls	r3, r3, #6
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40010000 	.word	0x40010000
 80068f0:	40010400 	.word	0x40010400

080068f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	2201      	movs	r2, #1
 8006908:	fa02 f303 	lsl.w	r3, r2, r3
 800690c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1a      	ldr	r2, [r3, #32]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	43db      	mvns	r3, r3
 8006916:	401a      	ands	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a1a      	ldr	r2, [r3, #32]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f003 031f 	and.w	r3, r3, #31
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	fa01 f303 	lsl.w	r3, r1, r3
 800692c:	431a      	orrs	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	621a      	str	r2, [r3, #32]
}
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
	...

08006940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006954:	2302      	movs	r3, #2
 8006956:	e05a      	b.n	8006a0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a21      	ldr	r2, [pc, #132]	@ (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d022      	beq.n	80069e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a4:	d01d      	beq.n	80069e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d018      	beq.n	80069e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1a      	ldr	r2, [pc, #104]	@ (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00e      	beq.n	80069e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a18      	ldr	r2, [pc, #96]	@ (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d009      	beq.n	80069e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a17      	ldr	r2, [pc, #92]	@ (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a15      	ldr	r2, [pc, #84]	@ (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d10c      	bne.n	80069fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	40010000 	.word	0x40010000
 8006a20:	40000400 	.word	0x40000400
 8006a24:	40000800 	.word	0x40000800
 8006a28:	40000c00 	.word	0x40000c00
 8006a2c:	40010400 	.word	0x40010400
 8006a30:	40014000 	.word	0x40014000
 8006a34:	40001800 	.word	0x40001800

08006a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e042      	b.n	8006af8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fb fb16 	bl	80020b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2224      	movs	r2, #36	@ 0x24
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f82b 	bl	8006b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	691a      	ldr	r2, [r3, #16]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	695a      	ldr	r2, [r3, #20]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b04:	b0c0      	sub	sp, #256	@ 0x100
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b1c:	68d9      	ldr	r1, [r3, #12]
 8006b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	ea40 0301 	orr.w	r3, r0, r1
 8006b28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	431a      	orrs	r2, r3
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b58:	f021 010c 	bic.w	r1, r1, #12
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b66:	430b      	orrs	r3, r1
 8006b68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7a:	6999      	ldr	r1, [r3, #24]
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	ea40 0301 	orr.w	r3, r0, r1
 8006b86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	4b8f      	ldr	r3, [pc, #572]	@ (8006dcc <UART_SetConfig+0x2cc>)
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d005      	beq.n	8006ba0 <UART_SetConfig+0xa0>
 8006b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b8d      	ldr	r3, [pc, #564]	@ (8006dd0 <UART_SetConfig+0x2d0>)
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d104      	bne.n	8006baa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ba0:	f7fd ffe0 	bl	8004b64 <HAL_RCC_GetPCLK2Freq>
 8006ba4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006ba8:	e003      	b.n	8006bb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006baa:	f7fd ffc7 	bl	8004b3c <HAL_RCC_GetPCLK1Freq>
 8006bae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bbc:	f040 810c 	bne.w	8006dd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006bce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	462b      	mov	r3, r5
 8006bd6:	1891      	adds	r1, r2, r2
 8006bd8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006bda:	415b      	adcs	r3, r3
 8006bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006be2:	4621      	mov	r1, r4
 8006be4:	eb12 0801 	adds.w	r8, r2, r1
 8006be8:	4629      	mov	r1, r5
 8006bea:	eb43 0901 	adc.w	r9, r3, r1
 8006bee:	f04f 0200 	mov.w	r2, #0
 8006bf2:	f04f 0300 	mov.w	r3, #0
 8006bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c02:	4690      	mov	r8, r2
 8006c04:	4699      	mov	r9, r3
 8006c06:	4623      	mov	r3, r4
 8006c08:	eb18 0303 	adds.w	r3, r8, r3
 8006c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c10:	462b      	mov	r3, r5
 8006c12:	eb49 0303 	adc.w	r3, r9, r3
 8006c16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c2e:	460b      	mov	r3, r1
 8006c30:	18db      	adds	r3, r3, r3
 8006c32:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c34:	4613      	mov	r3, r2
 8006c36:	eb42 0303 	adc.w	r3, r2, r3
 8006c3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c44:	f7fa f840 	bl	8000cc8 <__aeabi_uldivmod>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4b61      	ldr	r3, [pc, #388]	@ (8006dd4 <UART_SetConfig+0x2d4>)
 8006c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c52:	095b      	lsrs	r3, r3, #5
 8006c54:	011c      	lsls	r4, r3, #4
 8006c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c68:	4642      	mov	r2, r8
 8006c6a:	464b      	mov	r3, r9
 8006c6c:	1891      	adds	r1, r2, r2
 8006c6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c70:	415b      	adcs	r3, r3
 8006c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c78:	4641      	mov	r1, r8
 8006c7a:	eb12 0a01 	adds.w	sl, r2, r1
 8006c7e:	4649      	mov	r1, r9
 8006c80:	eb43 0b01 	adc.w	fp, r3, r1
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c98:	4692      	mov	sl, r2
 8006c9a:	469b      	mov	fp, r3
 8006c9c:	4643      	mov	r3, r8
 8006c9e:	eb1a 0303 	adds.w	r3, sl, r3
 8006ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ca6:	464b      	mov	r3, r9
 8006ca8:	eb4b 0303 	adc.w	r3, fp, r3
 8006cac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006cc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	18db      	adds	r3, r3, r3
 8006cc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cca:	4613      	mov	r3, r2
 8006ccc:	eb42 0303 	adc.w	r3, r2, r3
 8006cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006cd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006cda:	f7f9 fff5 	bl	8000cc8 <__aeabi_uldivmod>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8006dd4 <UART_SetConfig+0x2d4>)
 8006ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8006cea:	095b      	lsrs	r3, r3, #5
 8006cec:	2264      	movs	r2, #100	@ 0x64
 8006cee:	fb02 f303 	mul.w	r3, r2, r3
 8006cf2:	1acb      	subs	r3, r1, r3
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006cfa:	4b36      	ldr	r3, [pc, #216]	@ (8006dd4 <UART_SetConfig+0x2d4>)
 8006cfc:	fba3 2302 	umull	r2, r3, r3, r2
 8006d00:	095b      	lsrs	r3, r3, #5
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d08:	441c      	add	r4, r3
 8006d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d1c:	4642      	mov	r2, r8
 8006d1e:	464b      	mov	r3, r9
 8006d20:	1891      	adds	r1, r2, r2
 8006d22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d24:	415b      	adcs	r3, r3
 8006d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d2c:	4641      	mov	r1, r8
 8006d2e:	1851      	adds	r1, r2, r1
 8006d30:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d32:	4649      	mov	r1, r9
 8006d34:	414b      	adcs	r3, r1
 8006d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d38:	f04f 0200 	mov.w	r2, #0
 8006d3c:	f04f 0300 	mov.w	r3, #0
 8006d40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d44:	4659      	mov	r1, fp
 8006d46:	00cb      	lsls	r3, r1, #3
 8006d48:	4651      	mov	r1, sl
 8006d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d4e:	4651      	mov	r1, sl
 8006d50:	00ca      	lsls	r2, r1, #3
 8006d52:	4610      	mov	r0, r2
 8006d54:	4619      	mov	r1, r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	4642      	mov	r2, r8
 8006d5a:	189b      	adds	r3, r3, r2
 8006d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d60:	464b      	mov	r3, r9
 8006d62:	460a      	mov	r2, r1
 8006d64:	eb42 0303 	adc.w	r3, r2, r3
 8006d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d80:	460b      	mov	r3, r1
 8006d82:	18db      	adds	r3, r3, r3
 8006d84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d86:	4613      	mov	r3, r2
 8006d88:	eb42 0303 	adc.w	r3, r2, r3
 8006d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d96:	f7f9 ff97 	bl	8000cc8 <__aeabi_uldivmod>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd4 <UART_SetConfig+0x2d4>)
 8006da0:	fba3 1302 	umull	r1, r3, r3, r2
 8006da4:	095b      	lsrs	r3, r3, #5
 8006da6:	2164      	movs	r1, #100	@ 0x64
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	3332      	adds	r3, #50	@ 0x32
 8006db2:	4a08      	ldr	r2, [pc, #32]	@ (8006dd4 <UART_SetConfig+0x2d4>)
 8006db4:	fba2 2303 	umull	r2, r3, r2, r3
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	f003 0207 	and.w	r2, r3, #7
 8006dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4422      	add	r2, r4
 8006dc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dc8:	e106      	b.n	8006fd8 <UART_SetConfig+0x4d8>
 8006dca:	bf00      	nop
 8006dcc:	40011000 	.word	0x40011000
 8006dd0:	40011400 	.word	0x40011400
 8006dd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006de2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006de6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006dea:	4642      	mov	r2, r8
 8006dec:	464b      	mov	r3, r9
 8006dee:	1891      	adds	r1, r2, r2
 8006df0:	6239      	str	r1, [r7, #32]
 8006df2:	415b      	adcs	r3, r3
 8006df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dfa:	4641      	mov	r1, r8
 8006dfc:	1854      	adds	r4, r2, r1
 8006dfe:	4649      	mov	r1, r9
 8006e00:	eb43 0501 	adc.w	r5, r3, r1
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	00eb      	lsls	r3, r5, #3
 8006e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e12:	00e2      	lsls	r2, r4, #3
 8006e14:	4614      	mov	r4, r2
 8006e16:	461d      	mov	r5, r3
 8006e18:	4643      	mov	r3, r8
 8006e1a:	18e3      	adds	r3, r4, r3
 8006e1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e20:	464b      	mov	r3, r9
 8006e22:	eb45 0303 	adc.w	r3, r5, r3
 8006e26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e3a:	f04f 0200 	mov.w	r2, #0
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e46:	4629      	mov	r1, r5
 8006e48:	008b      	lsls	r3, r1, #2
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e50:	4621      	mov	r1, r4
 8006e52:	008a      	lsls	r2, r1, #2
 8006e54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e58:	f7f9 ff36 	bl	8000cc8 <__aeabi_uldivmod>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4b60      	ldr	r3, [pc, #384]	@ (8006fe4 <UART_SetConfig+0x4e4>)
 8006e62:	fba3 2302 	umull	r2, r3, r3, r2
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	011c      	lsls	r4, r3, #4
 8006e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e7c:	4642      	mov	r2, r8
 8006e7e:	464b      	mov	r3, r9
 8006e80:	1891      	adds	r1, r2, r2
 8006e82:	61b9      	str	r1, [r7, #24]
 8006e84:	415b      	adcs	r3, r3
 8006e86:	61fb      	str	r3, [r7, #28]
 8006e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e8c:	4641      	mov	r1, r8
 8006e8e:	1851      	adds	r1, r2, r1
 8006e90:	6139      	str	r1, [r7, #16]
 8006e92:	4649      	mov	r1, r9
 8006e94:	414b      	adcs	r3, r1
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ea4:	4659      	mov	r1, fp
 8006ea6:	00cb      	lsls	r3, r1, #3
 8006ea8:	4651      	mov	r1, sl
 8006eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eae:	4651      	mov	r1, sl
 8006eb0:	00ca      	lsls	r2, r1, #3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	4642      	mov	r2, r8
 8006eba:	189b      	adds	r3, r3, r2
 8006ebc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ec0:	464b      	mov	r3, r9
 8006ec2:	460a      	mov	r2, r1
 8006ec4:	eb42 0303 	adc.w	r3, r2, r3
 8006ec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ed6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	008b      	lsls	r3, r1, #2
 8006ee8:	4641      	mov	r1, r8
 8006eea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006eee:	4641      	mov	r1, r8
 8006ef0:	008a      	lsls	r2, r1, #2
 8006ef2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ef6:	f7f9 fee7 	bl	8000cc8 <__aeabi_uldivmod>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4611      	mov	r1, r2
 8006f00:	4b38      	ldr	r3, [pc, #224]	@ (8006fe4 <UART_SetConfig+0x4e4>)
 8006f02:	fba3 2301 	umull	r2, r3, r3, r1
 8006f06:	095b      	lsrs	r3, r3, #5
 8006f08:	2264      	movs	r2, #100	@ 0x64
 8006f0a:	fb02 f303 	mul.w	r3, r2, r3
 8006f0e:	1acb      	subs	r3, r1, r3
 8006f10:	011b      	lsls	r3, r3, #4
 8006f12:	3332      	adds	r3, #50	@ 0x32
 8006f14:	4a33      	ldr	r2, [pc, #204]	@ (8006fe4 <UART_SetConfig+0x4e4>)
 8006f16:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f20:	441c      	add	r4, r3
 8006f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f26:	2200      	movs	r2, #0
 8006f28:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f30:	4642      	mov	r2, r8
 8006f32:	464b      	mov	r3, r9
 8006f34:	1891      	adds	r1, r2, r2
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	415b      	adcs	r3, r3
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f40:	4641      	mov	r1, r8
 8006f42:	1851      	adds	r1, r2, r1
 8006f44:	6039      	str	r1, [r7, #0]
 8006f46:	4649      	mov	r1, r9
 8006f48:	414b      	adcs	r3, r1
 8006f4a:	607b      	str	r3, [r7, #4]
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f58:	4659      	mov	r1, fp
 8006f5a:	00cb      	lsls	r3, r1, #3
 8006f5c:	4651      	mov	r1, sl
 8006f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f62:	4651      	mov	r1, sl
 8006f64:	00ca      	lsls	r2, r1, #3
 8006f66:	4610      	mov	r0, r2
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	189b      	adds	r3, r3, r2
 8006f70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f72:	464b      	mov	r3, r9
 8006f74:	460a      	mov	r2, r1
 8006f76:	eb42 0303 	adc.w	r3, r2, r3
 8006f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f86:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f94:	4649      	mov	r1, r9
 8006f96:	008b      	lsls	r3, r1, #2
 8006f98:	4641      	mov	r1, r8
 8006f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	008a      	lsls	r2, r1, #2
 8006fa2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006fa6:	f7f9 fe8f 	bl	8000cc8 <__aeabi_uldivmod>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <UART_SetConfig+0x4e4>)
 8006fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	2164      	movs	r1, #100	@ 0x64
 8006fb8:	fb01 f303 	mul.w	r3, r1, r3
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	3332      	adds	r3, #50	@ 0x32
 8006fc2:	4a08      	ldr	r2, [pc, #32]	@ (8006fe4 <UART_SetConfig+0x4e4>)
 8006fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	f003 020f 	and.w	r2, r3, #15
 8006fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4422      	add	r2, r4
 8006fd6:	609a      	str	r2, [r3, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fe4:	51eb851f 	.word	0x51eb851f

08006fe8 <__cvt>:
 8006fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fec:	ec57 6b10 	vmov	r6, r7, d0
 8006ff0:	2f00      	cmp	r7, #0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	463b      	mov	r3, r7
 8006ff8:	bfbb      	ittet	lt
 8006ffa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006ffe:	461f      	movlt	r7, r3
 8007000:	2300      	movge	r3, #0
 8007002:	232d      	movlt	r3, #45	@ 0x2d
 8007004:	700b      	strb	r3, [r1, #0]
 8007006:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007008:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800700c:	4691      	mov	r9, r2
 800700e:	f023 0820 	bic.w	r8, r3, #32
 8007012:	bfbc      	itt	lt
 8007014:	4632      	movlt	r2, r6
 8007016:	4616      	movlt	r6, r2
 8007018:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800701c:	d005      	beq.n	800702a <__cvt+0x42>
 800701e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007022:	d100      	bne.n	8007026 <__cvt+0x3e>
 8007024:	3401      	adds	r4, #1
 8007026:	2102      	movs	r1, #2
 8007028:	e000      	b.n	800702c <__cvt+0x44>
 800702a:	2103      	movs	r1, #3
 800702c:	ab03      	add	r3, sp, #12
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	ab02      	add	r3, sp, #8
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	ec47 6b10 	vmov	d0, r6, r7
 8007038:	4653      	mov	r3, sl
 800703a:	4622      	mov	r2, r4
 800703c:	f000 fdf4 	bl	8007c28 <_dtoa_r>
 8007040:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007044:	4605      	mov	r5, r0
 8007046:	d119      	bne.n	800707c <__cvt+0x94>
 8007048:	f019 0f01 	tst.w	r9, #1
 800704c:	d00e      	beq.n	800706c <__cvt+0x84>
 800704e:	eb00 0904 	add.w	r9, r0, r4
 8007052:	2200      	movs	r2, #0
 8007054:	2300      	movs	r3, #0
 8007056:	4630      	mov	r0, r6
 8007058:	4639      	mov	r1, r7
 800705a:	f7f9 fd55 	bl	8000b08 <__aeabi_dcmpeq>
 800705e:	b108      	cbz	r0, 8007064 <__cvt+0x7c>
 8007060:	f8cd 900c 	str.w	r9, [sp, #12]
 8007064:	2230      	movs	r2, #48	@ 0x30
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	454b      	cmp	r3, r9
 800706a:	d31e      	bcc.n	80070aa <__cvt+0xc2>
 800706c:	9b03      	ldr	r3, [sp, #12]
 800706e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007070:	1b5b      	subs	r3, r3, r5
 8007072:	4628      	mov	r0, r5
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	b004      	add	sp, #16
 8007078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007080:	eb00 0904 	add.w	r9, r0, r4
 8007084:	d1e5      	bne.n	8007052 <__cvt+0x6a>
 8007086:	7803      	ldrb	r3, [r0, #0]
 8007088:	2b30      	cmp	r3, #48	@ 0x30
 800708a:	d10a      	bne.n	80070a2 <__cvt+0xba>
 800708c:	2200      	movs	r2, #0
 800708e:	2300      	movs	r3, #0
 8007090:	4630      	mov	r0, r6
 8007092:	4639      	mov	r1, r7
 8007094:	f7f9 fd38 	bl	8000b08 <__aeabi_dcmpeq>
 8007098:	b918      	cbnz	r0, 80070a2 <__cvt+0xba>
 800709a:	f1c4 0401 	rsb	r4, r4, #1
 800709e:	f8ca 4000 	str.w	r4, [sl]
 80070a2:	f8da 3000 	ldr.w	r3, [sl]
 80070a6:	4499      	add	r9, r3
 80070a8:	e7d3      	b.n	8007052 <__cvt+0x6a>
 80070aa:	1c59      	adds	r1, r3, #1
 80070ac:	9103      	str	r1, [sp, #12]
 80070ae:	701a      	strb	r2, [r3, #0]
 80070b0:	e7d9      	b.n	8007066 <__cvt+0x7e>

080070b2 <__exponent>:
 80070b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070b4:	2900      	cmp	r1, #0
 80070b6:	bfba      	itte	lt
 80070b8:	4249      	neglt	r1, r1
 80070ba:	232d      	movlt	r3, #45	@ 0x2d
 80070bc:	232b      	movge	r3, #43	@ 0x2b
 80070be:	2909      	cmp	r1, #9
 80070c0:	7002      	strb	r2, [r0, #0]
 80070c2:	7043      	strb	r3, [r0, #1]
 80070c4:	dd29      	ble.n	800711a <__exponent+0x68>
 80070c6:	f10d 0307 	add.w	r3, sp, #7
 80070ca:	461d      	mov	r5, r3
 80070cc:	270a      	movs	r7, #10
 80070ce:	461a      	mov	r2, r3
 80070d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80070d4:	fb07 1416 	mls	r4, r7, r6, r1
 80070d8:	3430      	adds	r4, #48	@ 0x30
 80070da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80070de:	460c      	mov	r4, r1
 80070e0:	2c63      	cmp	r4, #99	@ 0x63
 80070e2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80070e6:	4631      	mov	r1, r6
 80070e8:	dcf1      	bgt.n	80070ce <__exponent+0x1c>
 80070ea:	3130      	adds	r1, #48	@ 0x30
 80070ec:	1e94      	subs	r4, r2, #2
 80070ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80070f2:	1c41      	adds	r1, r0, #1
 80070f4:	4623      	mov	r3, r4
 80070f6:	42ab      	cmp	r3, r5
 80070f8:	d30a      	bcc.n	8007110 <__exponent+0x5e>
 80070fa:	f10d 0309 	add.w	r3, sp, #9
 80070fe:	1a9b      	subs	r3, r3, r2
 8007100:	42ac      	cmp	r4, r5
 8007102:	bf88      	it	hi
 8007104:	2300      	movhi	r3, #0
 8007106:	3302      	adds	r3, #2
 8007108:	4403      	add	r3, r0
 800710a:	1a18      	subs	r0, r3, r0
 800710c:	b003      	add	sp, #12
 800710e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007110:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007114:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007118:	e7ed      	b.n	80070f6 <__exponent+0x44>
 800711a:	2330      	movs	r3, #48	@ 0x30
 800711c:	3130      	adds	r1, #48	@ 0x30
 800711e:	7083      	strb	r3, [r0, #2]
 8007120:	70c1      	strb	r1, [r0, #3]
 8007122:	1d03      	adds	r3, r0, #4
 8007124:	e7f1      	b.n	800710a <__exponent+0x58>
	...

08007128 <_printf_float>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	b08d      	sub	sp, #52	@ 0x34
 800712e:	460c      	mov	r4, r1
 8007130:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007134:	4616      	mov	r6, r2
 8007136:	461f      	mov	r7, r3
 8007138:	4605      	mov	r5, r0
 800713a:	f000 fcd9 	bl	8007af0 <_localeconv_r>
 800713e:	6803      	ldr	r3, [r0, #0]
 8007140:	9304      	str	r3, [sp, #16]
 8007142:	4618      	mov	r0, r3
 8007144:	f7f9 f8b4 	bl	80002b0 <strlen>
 8007148:	2300      	movs	r3, #0
 800714a:	930a      	str	r3, [sp, #40]	@ 0x28
 800714c:	f8d8 3000 	ldr.w	r3, [r8]
 8007150:	9005      	str	r0, [sp, #20]
 8007152:	3307      	adds	r3, #7
 8007154:	f023 0307 	bic.w	r3, r3, #7
 8007158:	f103 0208 	add.w	r2, r3, #8
 800715c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007160:	f8d4 b000 	ldr.w	fp, [r4]
 8007164:	f8c8 2000 	str.w	r2, [r8]
 8007168:	e9d3 8900 	ldrd	r8, r9, [r3]
 800716c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007170:	9307      	str	r3, [sp, #28]
 8007172:	f8cd 8018 	str.w	r8, [sp, #24]
 8007176:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800717a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800717e:	4b9c      	ldr	r3, [pc, #624]	@ (80073f0 <_printf_float+0x2c8>)
 8007180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007184:	f7f9 fcf2 	bl	8000b6c <__aeabi_dcmpun>
 8007188:	bb70      	cbnz	r0, 80071e8 <_printf_float+0xc0>
 800718a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800718e:	4b98      	ldr	r3, [pc, #608]	@ (80073f0 <_printf_float+0x2c8>)
 8007190:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007194:	f7f9 fccc 	bl	8000b30 <__aeabi_dcmple>
 8007198:	bb30      	cbnz	r0, 80071e8 <_printf_float+0xc0>
 800719a:	2200      	movs	r2, #0
 800719c:	2300      	movs	r3, #0
 800719e:	4640      	mov	r0, r8
 80071a0:	4649      	mov	r1, r9
 80071a2:	f7f9 fcbb 	bl	8000b1c <__aeabi_dcmplt>
 80071a6:	b110      	cbz	r0, 80071ae <_printf_float+0x86>
 80071a8:	232d      	movs	r3, #45	@ 0x2d
 80071aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071ae:	4a91      	ldr	r2, [pc, #580]	@ (80073f4 <_printf_float+0x2cc>)
 80071b0:	4b91      	ldr	r3, [pc, #580]	@ (80073f8 <_printf_float+0x2d0>)
 80071b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80071b6:	bf8c      	ite	hi
 80071b8:	4690      	movhi	r8, r2
 80071ba:	4698      	movls	r8, r3
 80071bc:	2303      	movs	r3, #3
 80071be:	6123      	str	r3, [r4, #16]
 80071c0:	f02b 0304 	bic.w	r3, fp, #4
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	f04f 0900 	mov.w	r9, #0
 80071ca:	9700      	str	r7, [sp, #0]
 80071cc:	4633      	mov	r3, r6
 80071ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80071d0:	4621      	mov	r1, r4
 80071d2:	4628      	mov	r0, r5
 80071d4:	f000 f9d2 	bl	800757c <_printf_common>
 80071d8:	3001      	adds	r0, #1
 80071da:	f040 808d 	bne.w	80072f8 <_printf_float+0x1d0>
 80071de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071e2:	b00d      	add	sp, #52	@ 0x34
 80071e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e8:	4642      	mov	r2, r8
 80071ea:	464b      	mov	r3, r9
 80071ec:	4640      	mov	r0, r8
 80071ee:	4649      	mov	r1, r9
 80071f0:	f7f9 fcbc 	bl	8000b6c <__aeabi_dcmpun>
 80071f4:	b140      	cbz	r0, 8007208 <_printf_float+0xe0>
 80071f6:	464b      	mov	r3, r9
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bfbc      	itt	lt
 80071fc:	232d      	movlt	r3, #45	@ 0x2d
 80071fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007202:	4a7e      	ldr	r2, [pc, #504]	@ (80073fc <_printf_float+0x2d4>)
 8007204:	4b7e      	ldr	r3, [pc, #504]	@ (8007400 <_printf_float+0x2d8>)
 8007206:	e7d4      	b.n	80071b2 <_printf_float+0x8a>
 8007208:	6863      	ldr	r3, [r4, #4]
 800720a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800720e:	9206      	str	r2, [sp, #24]
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	d13b      	bne.n	800728c <_printf_float+0x164>
 8007214:	2306      	movs	r3, #6
 8007216:	6063      	str	r3, [r4, #4]
 8007218:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800721c:	2300      	movs	r3, #0
 800721e:	6022      	str	r2, [r4, #0]
 8007220:	9303      	str	r3, [sp, #12]
 8007222:	ab0a      	add	r3, sp, #40	@ 0x28
 8007224:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007228:	ab09      	add	r3, sp, #36	@ 0x24
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	6861      	ldr	r1, [r4, #4]
 800722e:	ec49 8b10 	vmov	d0, r8, r9
 8007232:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007236:	4628      	mov	r0, r5
 8007238:	f7ff fed6 	bl	8006fe8 <__cvt>
 800723c:	9b06      	ldr	r3, [sp, #24]
 800723e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007240:	2b47      	cmp	r3, #71	@ 0x47
 8007242:	4680      	mov	r8, r0
 8007244:	d129      	bne.n	800729a <_printf_float+0x172>
 8007246:	1cc8      	adds	r0, r1, #3
 8007248:	db02      	blt.n	8007250 <_printf_float+0x128>
 800724a:	6863      	ldr	r3, [r4, #4]
 800724c:	4299      	cmp	r1, r3
 800724e:	dd41      	ble.n	80072d4 <_printf_float+0x1ac>
 8007250:	f1aa 0a02 	sub.w	sl, sl, #2
 8007254:	fa5f fa8a 	uxtb.w	sl, sl
 8007258:	3901      	subs	r1, #1
 800725a:	4652      	mov	r2, sl
 800725c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007260:	9109      	str	r1, [sp, #36]	@ 0x24
 8007262:	f7ff ff26 	bl	80070b2 <__exponent>
 8007266:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007268:	1813      	adds	r3, r2, r0
 800726a:	2a01      	cmp	r2, #1
 800726c:	4681      	mov	r9, r0
 800726e:	6123      	str	r3, [r4, #16]
 8007270:	dc02      	bgt.n	8007278 <_printf_float+0x150>
 8007272:	6822      	ldr	r2, [r4, #0]
 8007274:	07d2      	lsls	r2, r2, #31
 8007276:	d501      	bpl.n	800727c <_printf_float+0x154>
 8007278:	3301      	adds	r3, #1
 800727a:	6123      	str	r3, [r4, #16]
 800727c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0a2      	beq.n	80071ca <_printf_float+0xa2>
 8007284:	232d      	movs	r3, #45	@ 0x2d
 8007286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800728a:	e79e      	b.n	80071ca <_printf_float+0xa2>
 800728c:	9a06      	ldr	r2, [sp, #24]
 800728e:	2a47      	cmp	r2, #71	@ 0x47
 8007290:	d1c2      	bne.n	8007218 <_printf_float+0xf0>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1c0      	bne.n	8007218 <_printf_float+0xf0>
 8007296:	2301      	movs	r3, #1
 8007298:	e7bd      	b.n	8007216 <_printf_float+0xee>
 800729a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800729e:	d9db      	bls.n	8007258 <_printf_float+0x130>
 80072a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80072a4:	d118      	bne.n	80072d8 <_printf_float+0x1b0>
 80072a6:	2900      	cmp	r1, #0
 80072a8:	6863      	ldr	r3, [r4, #4]
 80072aa:	dd0b      	ble.n	80072c4 <_printf_float+0x19c>
 80072ac:	6121      	str	r1, [r4, #16]
 80072ae:	b913      	cbnz	r3, 80072b6 <_printf_float+0x18e>
 80072b0:	6822      	ldr	r2, [r4, #0]
 80072b2:	07d0      	lsls	r0, r2, #31
 80072b4:	d502      	bpl.n	80072bc <_printf_float+0x194>
 80072b6:	3301      	adds	r3, #1
 80072b8:	440b      	add	r3, r1
 80072ba:	6123      	str	r3, [r4, #16]
 80072bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80072be:	f04f 0900 	mov.w	r9, #0
 80072c2:	e7db      	b.n	800727c <_printf_float+0x154>
 80072c4:	b913      	cbnz	r3, 80072cc <_printf_float+0x1a4>
 80072c6:	6822      	ldr	r2, [r4, #0]
 80072c8:	07d2      	lsls	r2, r2, #31
 80072ca:	d501      	bpl.n	80072d0 <_printf_float+0x1a8>
 80072cc:	3302      	adds	r3, #2
 80072ce:	e7f4      	b.n	80072ba <_printf_float+0x192>
 80072d0:	2301      	movs	r3, #1
 80072d2:	e7f2      	b.n	80072ba <_printf_float+0x192>
 80072d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80072d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072da:	4299      	cmp	r1, r3
 80072dc:	db05      	blt.n	80072ea <_printf_float+0x1c2>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	6121      	str	r1, [r4, #16]
 80072e2:	07d8      	lsls	r0, r3, #31
 80072e4:	d5ea      	bpl.n	80072bc <_printf_float+0x194>
 80072e6:	1c4b      	adds	r3, r1, #1
 80072e8:	e7e7      	b.n	80072ba <_printf_float+0x192>
 80072ea:	2900      	cmp	r1, #0
 80072ec:	bfd4      	ite	le
 80072ee:	f1c1 0202 	rsble	r2, r1, #2
 80072f2:	2201      	movgt	r2, #1
 80072f4:	4413      	add	r3, r2
 80072f6:	e7e0      	b.n	80072ba <_printf_float+0x192>
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	055a      	lsls	r2, r3, #21
 80072fc:	d407      	bmi.n	800730e <_printf_float+0x1e6>
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	4642      	mov	r2, r8
 8007302:	4631      	mov	r1, r6
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	d12b      	bne.n	8007364 <_printf_float+0x23c>
 800730c:	e767      	b.n	80071de <_printf_float+0xb6>
 800730e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007312:	f240 80dd 	bls.w	80074d0 <_printf_float+0x3a8>
 8007316:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800731a:	2200      	movs	r2, #0
 800731c:	2300      	movs	r3, #0
 800731e:	f7f9 fbf3 	bl	8000b08 <__aeabi_dcmpeq>
 8007322:	2800      	cmp	r0, #0
 8007324:	d033      	beq.n	800738e <_printf_float+0x266>
 8007326:	4a37      	ldr	r2, [pc, #220]	@ (8007404 <_printf_float+0x2dc>)
 8007328:	2301      	movs	r3, #1
 800732a:	4631      	mov	r1, r6
 800732c:	4628      	mov	r0, r5
 800732e:	47b8      	blx	r7
 8007330:	3001      	adds	r0, #1
 8007332:	f43f af54 	beq.w	80071de <_printf_float+0xb6>
 8007336:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800733a:	4543      	cmp	r3, r8
 800733c:	db02      	blt.n	8007344 <_printf_float+0x21c>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	07d8      	lsls	r0, r3, #31
 8007342:	d50f      	bpl.n	8007364 <_printf_float+0x23c>
 8007344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007348:	4631      	mov	r1, r6
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	f43f af45 	beq.w	80071de <_printf_float+0xb6>
 8007354:	f04f 0900 	mov.w	r9, #0
 8007358:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800735c:	f104 0a1a 	add.w	sl, r4, #26
 8007360:	45c8      	cmp	r8, r9
 8007362:	dc09      	bgt.n	8007378 <_printf_float+0x250>
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	079b      	lsls	r3, r3, #30
 8007368:	f100 8103 	bmi.w	8007572 <_printf_float+0x44a>
 800736c:	68e0      	ldr	r0, [r4, #12]
 800736e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007370:	4298      	cmp	r0, r3
 8007372:	bfb8      	it	lt
 8007374:	4618      	movlt	r0, r3
 8007376:	e734      	b.n	80071e2 <_printf_float+0xba>
 8007378:	2301      	movs	r3, #1
 800737a:	4652      	mov	r2, sl
 800737c:	4631      	mov	r1, r6
 800737e:	4628      	mov	r0, r5
 8007380:	47b8      	blx	r7
 8007382:	3001      	adds	r0, #1
 8007384:	f43f af2b 	beq.w	80071de <_printf_float+0xb6>
 8007388:	f109 0901 	add.w	r9, r9, #1
 800738c:	e7e8      	b.n	8007360 <_printf_float+0x238>
 800738e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	dc39      	bgt.n	8007408 <_printf_float+0x2e0>
 8007394:	4a1b      	ldr	r2, [pc, #108]	@ (8007404 <_printf_float+0x2dc>)
 8007396:	2301      	movs	r3, #1
 8007398:	4631      	mov	r1, r6
 800739a:	4628      	mov	r0, r5
 800739c:	47b8      	blx	r7
 800739e:	3001      	adds	r0, #1
 80073a0:	f43f af1d 	beq.w	80071de <_printf_float+0xb6>
 80073a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80073a8:	ea59 0303 	orrs.w	r3, r9, r3
 80073ac:	d102      	bne.n	80073b4 <_printf_float+0x28c>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	07d9      	lsls	r1, r3, #31
 80073b2:	d5d7      	bpl.n	8007364 <_printf_float+0x23c>
 80073b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	f43f af0d 	beq.w	80071de <_printf_float+0xb6>
 80073c4:	f04f 0a00 	mov.w	sl, #0
 80073c8:	f104 0b1a 	add.w	fp, r4, #26
 80073cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ce:	425b      	negs	r3, r3
 80073d0:	4553      	cmp	r3, sl
 80073d2:	dc01      	bgt.n	80073d8 <_printf_float+0x2b0>
 80073d4:	464b      	mov	r3, r9
 80073d6:	e793      	b.n	8007300 <_printf_float+0x1d8>
 80073d8:	2301      	movs	r3, #1
 80073da:	465a      	mov	r2, fp
 80073dc:	4631      	mov	r1, r6
 80073de:	4628      	mov	r0, r5
 80073e0:	47b8      	blx	r7
 80073e2:	3001      	adds	r0, #1
 80073e4:	f43f aefb 	beq.w	80071de <_printf_float+0xb6>
 80073e8:	f10a 0a01 	add.w	sl, sl, #1
 80073ec:	e7ee      	b.n	80073cc <_printf_float+0x2a4>
 80073ee:	bf00      	nop
 80073f0:	7fefffff 	.word	0x7fefffff
 80073f4:	08009d5a 	.word	0x08009d5a
 80073f8:	08009d56 	.word	0x08009d56
 80073fc:	08009d62 	.word	0x08009d62
 8007400:	08009d5e 	.word	0x08009d5e
 8007404:	08009d66 	.word	0x08009d66
 8007408:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800740a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800740e:	4553      	cmp	r3, sl
 8007410:	bfa8      	it	ge
 8007412:	4653      	movge	r3, sl
 8007414:	2b00      	cmp	r3, #0
 8007416:	4699      	mov	r9, r3
 8007418:	dc36      	bgt.n	8007488 <_printf_float+0x360>
 800741a:	f04f 0b00 	mov.w	fp, #0
 800741e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007422:	f104 021a 	add.w	r2, r4, #26
 8007426:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007428:	9306      	str	r3, [sp, #24]
 800742a:	eba3 0309 	sub.w	r3, r3, r9
 800742e:	455b      	cmp	r3, fp
 8007430:	dc31      	bgt.n	8007496 <_printf_float+0x36e>
 8007432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007434:	459a      	cmp	sl, r3
 8007436:	dc3a      	bgt.n	80074ae <_printf_float+0x386>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	07da      	lsls	r2, r3, #31
 800743c:	d437      	bmi.n	80074ae <_printf_float+0x386>
 800743e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007440:	ebaa 0903 	sub.w	r9, sl, r3
 8007444:	9b06      	ldr	r3, [sp, #24]
 8007446:	ebaa 0303 	sub.w	r3, sl, r3
 800744a:	4599      	cmp	r9, r3
 800744c:	bfa8      	it	ge
 800744e:	4699      	movge	r9, r3
 8007450:	f1b9 0f00 	cmp.w	r9, #0
 8007454:	dc33      	bgt.n	80074be <_printf_float+0x396>
 8007456:	f04f 0800 	mov.w	r8, #0
 800745a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800745e:	f104 0b1a 	add.w	fp, r4, #26
 8007462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007464:	ebaa 0303 	sub.w	r3, sl, r3
 8007468:	eba3 0309 	sub.w	r3, r3, r9
 800746c:	4543      	cmp	r3, r8
 800746e:	f77f af79 	ble.w	8007364 <_printf_float+0x23c>
 8007472:	2301      	movs	r3, #1
 8007474:	465a      	mov	r2, fp
 8007476:	4631      	mov	r1, r6
 8007478:	4628      	mov	r0, r5
 800747a:	47b8      	blx	r7
 800747c:	3001      	adds	r0, #1
 800747e:	f43f aeae 	beq.w	80071de <_printf_float+0xb6>
 8007482:	f108 0801 	add.w	r8, r8, #1
 8007486:	e7ec      	b.n	8007462 <_printf_float+0x33a>
 8007488:	4642      	mov	r2, r8
 800748a:	4631      	mov	r1, r6
 800748c:	4628      	mov	r0, r5
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	d1c2      	bne.n	800741a <_printf_float+0x2f2>
 8007494:	e6a3      	b.n	80071de <_printf_float+0xb6>
 8007496:	2301      	movs	r3, #1
 8007498:	4631      	mov	r1, r6
 800749a:	4628      	mov	r0, r5
 800749c:	9206      	str	r2, [sp, #24]
 800749e:	47b8      	blx	r7
 80074a0:	3001      	adds	r0, #1
 80074a2:	f43f ae9c 	beq.w	80071de <_printf_float+0xb6>
 80074a6:	9a06      	ldr	r2, [sp, #24]
 80074a8:	f10b 0b01 	add.w	fp, fp, #1
 80074ac:	e7bb      	b.n	8007426 <_printf_float+0x2fe>
 80074ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074b2:	4631      	mov	r1, r6
 80074b4:	4628      	mov	r0, r5
 80074b6:	47b8      	blx	r7
 80074b8:	3001      	adds	r0, #1
 80074ba:	d1c0      	bne.n	800743e <_printf_float+0x316>
 80074bc:	e68f      	b.n	80071de <_printf_float+0xb6>
 80074be:	9a06      	ldr	r2, [sp, #24]
 80074c0:	464b      	mov	r3, r9
 80074c2:	4442      	add	r2, r8
 80074c4:	4631      	mov	r1, r6
 80074c6:	4628      	mov	r0, r5
 80074c8:	47b8      	blx	r7
 80074ca:	3001      	adds	r0, #1
 80074cc:	d1c3      	bne.n	8007456 <_printf_float+0x32e>
 80074ce:	e686      	b.n	80071de <_printf_float+0xb6>
 80074d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80074d4:	f1ba 0f01 	cmp.w	sl, #1
 80074d8:	dc01      	bgt.n	80074de <_printf_float+0x3b6>
 80074da:	07db      	lsls	r3, r3, #31
 80074dc:	d536      	bpl.n	800754c <_printf_float+0x424>
 80074de:	2301      	movs	r3, #1
 80074e0:	4642      	mov	r2, r8
 80074e2:	4631      	mov	r1, r6
 80074e4:	4628      	mov	r0, r5
 80074e6:	47b8      	blx	r7
 80074e8:	3001      	adds	r0, #1
 80074ea:	f43f ae78 	beq.w	80071de <_printf_float+0xb6>
 80074ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074f2:	4631      	mov	r1, r6
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b8      	blx	r7
 80074f8:	3001      	adds	r0, #1
 80074fa:	f43f ae70 	beq.w	80071de <_printf_float+0xb6>
 80074fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007502:	2200      	movs	r2, #0
 8007504:	2300      	movs	r3, #0
 8007506:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800750a:	f7f9 fafd 	bl	8000b08 <__aeabi_dcmpeq>
 800750e:	b9c0      	cbnz	r0, 8007542 <_printf_float+0x41a>
 8007510:	4653      	mov	r3, sl
 8007512:	f108 0201 	add.w	r2, r8, #1
 8007516:	4631      	mov	r1, r6
 8007518:	4628      	mov	r0, r5
 800751a:	47b8      	blx	r7
 800751c:	3001      	adds	r0, #1
 800751e:	d10c      	bne.n	800753a <_printf_float+0x412>
 8007520:	e65d      	b.n	80071de <_printf_float+0xb6>
 8007522:	2301      	movs	r3, #1
 8007524:	465a      	mov	r2, fp
 8007526:	4631      	mov	r1, r6
 8007528:	4628      	mov	r0, r5
 800752a:	47b8      	blx	r7
 800752c:	3001      	adds	r0, #1
 800752e:	f43f ae56 	beq.w	80071de <_printf_float+0xb6>
 8007532:	f108 0801 	add.w	r8, r8, #1
 8007536:	45d0      	cmp	r8, sl
 8007538:	dbf3      	blt.n	8007522 <_printf_float+0x3fa>
 800753a:	464b      	mov	r3, r9
 800753c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007540:	e6df      	b.n	8007302 <_printf_float+0x1da>
 8007542:	f04f 0800 	mov.w	r8, #0
 8007546:	f104 0b1a 	add.w	fp, r4, #26
 800754a:	e7f4      	b.n	8007536 <_printf_float+0x40e>
 800754c:	2301      	movs	r3, #1
 800754e:	4642      	mov	r2, r8
 8007550:	e7e1      	b.n	8007516 <_printf_float+0x3ee>
 8007552:	2301      	movs	r3, #1
 8007554:	464a      	mov	r2, r9
 8007556:	4631      	mov	r1, r6
 8007558:	4628      	mov	r0, r5
 800755a:	47b8      	blx	r7
 800755c:	3001      	adds	r0, #1
 800755e:	f43f ae3e 	beq.w	80071de <_printf_float+0xb6>
 8007562:	f108 0801 	add.w	r8, r8, #1
 8007566:	68e3      	ldr	r3, [r4, #12]
 8007568:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800756a:	1a5b      	subs	r3, r3, r1
 800756c:	4543      	cmp	r3, r8
 800756e:	dcf0      	bgt.n	8007552 <_printf_float+0x42a>
 8007570:	e6fc      	b.n	800736c <_printf_float+0x244>
 8007572:	f04f 0800 	mov.w	r8, #0
 8007576:	f104 0919 	add.w	r9, r4, #25
 800757a:	e7f4      	b.n	8007566 <_printf_float+0x43e>

0800757c <_printf_common>:
 800757c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007580:	4616      	mov	r6, r2
 8007582:	4698      	mov	r8, r3
 8007584:	688a      	ldr	r2, [r1, #8]
 8007586:	690b      	ldr	r3, [r1, #16]
 8007588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800758c:	4293      	cmp	r3, r2
 800758e:	bfb8      	it	lt
 8007590:	4613      	movlt	r3, r2
 8007592:	6033      	str	r3, [r6, #0]
 8007594:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007598:	4607      	mov	r7, r0
 800759a:	460c      	mov	r4, r1
 800759c:	b10a      	cbz	r2, 80075a2 <_printf_common+0x26>
 800759e:	3301      	adds	r3, #1
 80075a0:	6033      	str	r3, [r6, #0]
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	0699      	lsls	r1, r3, #26
 80075a6:	bf42      	ittt	mi
 80075a8:	6833      	ldrmi	r3, [r6, #0]
 80075aa:	3302      	addmi	r3, #2
 80075ac:	6033      	strmi	r3, [r6, #0]
 80075ae:	6825      	ldr	r5, [r4, #0]
 80075b0:	f015 0506 	ands.w	r5, r5, #6
 80075b4:	d106      	bne.n	80075c4 <_printf_common+0x48>
 80075b6:	f104 0a19 	add.w	sl, r4, #25
 80075ba:	68e3      	ldr	r3, [r4, #12]
 80075bc:	6832      	ldr	r2, [r6, #0]
 80075be:	1a9b      	subs	r3, r3, r2
 80075c0:	42ab      	cmp	r3, r5
 80075c2:	dc26      	bgt.n	8007612 <_printf_common+0x96>
 80075c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	3b00      	subs	r3, #0
 80075cc:	bf18      	it	ne
 80075ce:	2301      	movne	r3, #1
 80075d0:	0692      	lsls	r2, r2, #26
 80075d2:	d42b      	bmi.n	800762c <_printf_common+0xb0>
 80075d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075d8:	4641      	mov	r1, r8
 80075da:	4638      	mov	r0, r7
 80075dc:	47c8      	blx	r9
 80075de:	3001      	adds	r0, #1
 80075e0:	d01e      	beq.n	8007620 <_printf_common+0xa4>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	6922      	ldr	r2, [r4, #16]
 80075e6:	f003 0306 	and.w	r3, r3, #6
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	bf02      	ittt	eq
 80075ee:	68e5      	ldreq	r5, [r4, #12]
 80075f0:	6833      	ldreq	r3, [r6, #0]
 80075f2:	1aed      	subeq	r5, r5, r3
 80075f4:	68a3      	ldr	r3, [r4, #8]
 80075f6:	bf0c      	ite	eq
 80075f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075fc:	2500      	movne	r5, #0
 80075fe:	4293      	cmp	r3, r2
 8007600:	bfc4      	itt	gt
 8007602:	1a9b      	subgt	r3, r3, r2
 8007604:	18ed      	addgt	r5, r5, r3
 8007606:	2600      	movs	r6, #0
 8007608:	341a      	adds	r4, #26
 800760a:	42b5      	cmp	r5, r6
 800760c:	d11a      	bne.n	8007644 <_printf_common+0xc8>
 800760e:	2000      	movs	r0, #0
 8007610:	e008      	b.n	8007624 <_printf_common+0xa8>
 8007612:	2301      	movs	r3, #1
 8007614:	4652      	mov	r2, sl
 8007616:	4641      	mov	r1, r8
 8007618:	4638      	mov	r0, r7
 800761a:	47c8      	blx	r9
 800761c:	3001      	adds	r0, #1
 800761e:	d103      	bne.n	8007628 <_printf_common+0xac>
 8007620:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007628:	3501      	adds	r5, #1
 800762a:	e7c6      	b.n	80075ba <_printf_common+0x3e>
 800762c:	18e1      	adds	r1, r4, r3
 800762e:	1c5a      	adds	r2, r3, #1
 8007630:	2030      	movs	r0, #48	@ 0x30
 8007632:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007636:	4422      	add	r2, r4
 8007638:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800763c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007640:	3302      	adds	r3, #2
 8007642:	e7c7      	b.n	80075d4 <_printf_common+0x58>
 8007644:	2301      	movs	r3, #1
 8007646:	4622      	mov	r2, r4
 8007648:	4641      	mov	r1, r8
 800764a:	4638      	mov	r0, r7
 800764c:	47c8      	blx	r9
 800764e:	3001      	adds	r0, #1
 8007650:	d0e6      	beq.n	8007620 <_printf_common+0xa4>
 8007652:	3601      	adds	r6, #1
 8007654:	e7d9      	b.n	800760a <_printf_common+0x8e>
	...

08007658 <_printf_i>:
 8007658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800765c:	7e0f      	ldrb	r7, [r1, #24]
 800765e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007660:	2f78      	cmp	r7, #120	@ 0x78
 8007662:	4691      	mov	r9, r2
 8007664:	4680      	mov	r8, r0
 8007666:	460c      	mov	r4, r1
 8007668:	469a      	mov	sl, r3
 800766a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800766e:	d807      	bhi.n	8007680 <_printf_i+0x28>
 8007670:	2f62      	cmp	r7, #98	@ 0x62
 8007672:	d80a      	bhi.n	800768a <_printf_i+0x32>
 8007674:	2f00      	cmp	r7, #0
 8007676:	f000 80d1 	beq.w	800781c <_printf_i+0x1c4>
 800767a:	2f58      	cmp	r7, #88	@ 0x58
 800767c:	f000 80b8 	beq.w	80077f0 <_printf_i+0x198>
 8007680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007684:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007688:	e03a      	b.n	8007700 <_printf_i+0xa8>
 800768a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800768e:	2b15      	cmp	r3, #21
 8007690:	d8f6      	bhi.n	8007680 <_printf_i+0x28>
 8007692:	a101      	add	r1, pc, #4	@ (adr r1, 8007698 <_printf_i+0x40>)
 8007694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007698:	080076f1 	.word	0x080076f1
 800769c:	08007705 	.word	0x08007705
 80076a0:	08007681 	.word	0x08007681
 80076a4:	08007681 	.word	0x08007681
 80076a8:	08007681 	.word	0x08007681
 80076ac:	08007681 	.word	0x08007681
 80076b0:	08007705 	.word	0x08007705
 80076b4:	08007681 	.word	0x08007681
 80076b8:	08007681 	.word	0x08007681
 80076bc:	08007681 	.word	0x08007681
 80076c0:	08007681 	.word	0x08007681
 80076c4:	08007803 	.word	0x08007803
 80076c8:	0800772f 	.word	0x0800772f
 80076cc:	080077bd 	.word	0x080077bd
 80076d0:	08007681 	.word	0x08007681
 80076d4:	08007681 	.word	0x08007681
 80076d8:	08007825 	.word	0x08007825
 80076dc:	08007681 	.word	0x08007681
 80076e0:	0800772f 	.word	0x0800772f
 80076e4:	08007681 	.word	0x08007681
 80076e8:	08007681 	.word	0x08007681
 80076ec:	080077c5 	.word	0x080077c5
 80076f0:	6833      	ldr	r3, [r6, #0]
 80076f2:	1d1a      	adds	r2, r3, #4
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6032      	str	r2, [r6, #0]
 80076f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007700:	2301      	movs	r3, #1
 8007702:	e09c      	b.n	800783e <_printf_i+0x1e6>
 8007704:	6833      	ldr	r3, [r6, #0]
 8007706:	6820      	ldr	r0, [r4, #0]
 8007708:	1d19      	adds	r1, r3, #4
 800770a:	6031      	str	r1, [r6, #0]
 800770c:	0606      	lsls	r6, r0, #24
 800770e:	d501      	bpl.n	8007714 <_printf_i+0xbc>
 8007710:	681d      	ldr	r5, [r3, #0]
 8007712:	e003      	b.n	800771c <_printf_i+0xc4>
 8007714:	0645      	lsls	r5, r0, #25
 8007716:	d5fb      	bpl.n	8007710 <_printf_i+0xb8>
 8007718:	f9b3 5000 	ldrsh.w	r5, [r3]
 800771c:	2d00      	cmp	r5, #0
 800771e:	da03      	bge.n	8007728 <_printf_i+0xd0>
 8007720:	232d      	movs	r3, #45	@ 0x2d
 8007722:	426d      	negs	r5, r5
 8007724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007728:	4858      	ldr	r0, [pc, #352]	@ (800788c <_printf_i+0x234>)
 800772a:	230a      	movs	r3, #10
 800772c:	e011      	b.n	8007752 <_printf_i+0xfa>
 800772e:	6821      	ldr	r1, [r4, #0]
 8007730:	6833      	ldr	r3, [r6, #0]
 8007732:	0608      	lsls	r0, r1, #24
 8007734:	f853 5b04 	ldr.w	r5, [r3], #4
 8007738:	d402      	bmi.n	8007740 <_printf_i+0xe8>
 800773a:	0649      	lsls	r1, r1, #25
 800773c:	bf48      	it	mi
 800773e:	b2ad      	uxthmi	r5, r5
 8007740:	2f6f      	cmp	r7, #111	@ 0x6f
 8007742:	4852      	ldr	r0, [pc, #328]	@ (800788c <_printf_i+0x234>)
 8007744:	6033      	str	r3, [r6, #0]
 8007746:	bf14      	ite	ne
 8007748:	230a      	movne	r3, #10
 800774a:	2308      	moveq	r3, #8
 800774c:	2100      	movs	r1, #0
 800774e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007752:	6866      	ldr	r6, [r4, #4]
 8007754:	60a6      	str	r6, [r4, #8]
 8007756:	2e00      	cmp	r6, #0
 8007758:	db05      	blt.n	8007766 <_printf_i+0x10e>
 800775a:	6821      	ldr	r1, [r4, #0]
 800775c:	432e      	orrs	r6, r5
 800775e:	f021 0104 	bic.w	r1, r1, #4
 8007762:	6021      	str	r1, [r4, #0]
 8007764:	d04b      	beq.n	80077fe <_printf_i+0x1a6>
 8007766:	4616      	mov	r6, r2
 8007768:	fbb5 f1f3 	udiv	r1, r5, r3
 800776c:	fb03 5711 	mls	r7, r3, r1, r5
 8007770:	5dc7      	ldrb	r7, [r0, r7]
 8007772:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007776:	462f      	mov	r7, r5
 8007778:	42bb      	cmp	r3, r7
 800777a:	460d      	mov	r5, r1
 800777c:	d9f4      	bls.n	8007768 <_printf_i+0x110>
 800777e:	2b08      	cmp	r3, #8
 8007780:	d10b      	bne.n	800779a <_printf_i+0x142>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	07df      	lsls	r7, r3, #31
 8007786:	d508      	bpl.n	800779a <_printf_i+0x142>
 8007788:	6923      	ldr	r3, [r4, #16]
 800778a:	6861      	ldr	r1, [r4, #4]
 800778c:	4299      	cmp	r1, r3
 800778e:	bfde      	ittt	le
 8007790:	2330      	movle	r3, #48	@ 0x30
 8007792:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007796:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800779a:	1b92      	subs	r2, r2, r6
 800779c:	6122      	str	r2, [r4, #16]
 800779e:	f8cd a000 	str.w	sl, [sp]
 80077a2:	464b      	mov	r3, r9
 80077a4:	aa03      	add	r2, sp, #12
 80077a6:	4621      	mov	r1, r4
 80077a8:	4640      	mov	r0, r8
 80077aa:	f7ff fee7 	bl	800757c <_printf_common>
 80077ae:	3001      	adds	r0, #1
 80077b0:	d14a      	bne.n	8007848 <_printf_i+0x1f0>
 80077b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077b6:	b004      	add	sp, #16
 80077b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	f043 0320 	orr.w	r3, r3, #32
 80077c2:	6023      	str	r3, [r4, #0]
 80077c4:	4832      	ldr	r0, [pc, #200]	@ (8007890 <_printf_i+0x238>)
 80077c6:	2778      	movs	r7, #120	@ 0x78
 80077c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	6831      	ldr	r1, [r6, #0]
 80077d0:	061f      	lsls	r7, r3, #24
 80077d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80077d6:	d402      	bmi.n	80077de <_printf_i+0x186>
 80077d8:	065f      	lsls	r7, r3, #25
 80077da:	bf48      	it	mi
 80077dc:	b2ad      	uxthmi	r5, r5
 80077de:	6031      	str	r1, [r6, #0]
 80077e0:	07d9      	lsls	r1, r3, #31
 80077e2:	bf44      	itt	mi
 80077e4:	f043 0320 	orrmi.w	r3, r3, #32
 80077e8:	6023      	strmi	r3, [r4, #0]
 80077ea:	b11d      	cbz	r5, 80077f4 <_printf_i+0x19c>
 80077ec:	2310      	movs	r3, #16
 80077ee:	e7ad      	b.n	800774c <_printf_i+0xf4>
 80077f0:	4826      	ldr	r0, [pc, #152]	@ (800788c <_printf_i+0x234>)
 80077f2:	e7e9      	b.n	80077c8 <_printf_i+0x170>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	f023 0320 	bic.w	r3, r3, #32
 80077fa:	6023      	str	r3, [r4, #0]
 80077fc:	e7f6      	b.n	80077ec <_printf_i+0x194>
 80077fe:	4616      	mov	r6, r2
 8007800:	e7bd      	b.n	800777e <_printf_i+0x126>
 8007802:	6833      	ldr	r3, [r6, #0]
 8007804:	6825      	ldr	r5, [r4, #0]
 8007806:	6961      	ldr	r1, [r4, #20]
 8007808:	1d18      	adds	r0, r3, #4
 800780a:	6030      	str	r0, [r6, #0]
 800780c:	062e      	lsls	r6, r5, #24
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	d501      	bpl.n	8007816 <_printf_i+0x1be>
 8007812:	6019      	str	r1, [r3, #0]
 8007814:	e002      	b.n	800781c <_printf_i+0x1c4>
 8007816:	0668      	lsls	r0, r5, #25
 8007818:	d5fb      	bpl.n	8007812 <_printf_i+0x1ba>
 800781a:	8019      	strh	r1, [r3, #0]
 800781c:	2300      	movs	r3, #0
 800781e:	6123      	str	r3, [r4, #16]
 8007820:	4616      	mov	r6, r2
 8007822:	e7bc      	b.n	800779e <_printf_i+0x146>
 8007824:	6833      	ldr	r3, [r6, #0]
 8007826:	1d1a      	adds	r2, r3, #4
 8007828:	6032      	str	r2, [r6, #0]
 800782a:	681e      	ldr	r6, [r3, #0]
 800782c:	6862      	ldr	r2, [r4, #4]
 800782e:	2100      	movs	r1, #0
 8007830:	4630      	mov	r0, r6
 8007832:	f7f8 fced 	bl	8000210 <memchr>
 8007836:	b108      	cbz	r0, 800783c <_printf_i+0x1e4>
 8007838:	1b80      	subs	r0, r0, r6
 800783a:	6060      	str	r0, [r4, #4]
 800783c:	6863      	ldr	r3, [r4, #4]
 800783e:	6123      	str	r3, [r4, #16]
 8007840:	2300      	movs	r3, #0
 8007842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007846:	e7aa      	b.n	800779e <_printf_i+0x146>
 8007848:	6923      	ldr	r3, [r4, #16]
 800784a:	4632      	mov	r2, r6
 800784c:	4649      	mov	r1, r9
 800784e:	4640      	mov	r0, r8
 8007850:	47d0      	blx	sl
 8007852:	3001      	adds	r0, #1
 8007854:	d0ad      	beq.n	80077b2 <_printf_i+0x15a>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	079b      	lsls	r3, r3, #30
 800785a:	d413      	bmi.n	8007884 <_printf_i+0x22c>
 800785c:	68e0      	ldr	r0, [r4, #12]
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	4298      	cmp	r0, r3
 8007862:	bfb8      	it	lt
 8007864:	4618      	movlt	r0, r3
 8007866:	e7a6      	b.n	80077b6 <_printf_i+0x15e>
 8007868:	2301      	movs	r3, #1
 800786a:	4632      	mov	r2, r6
 800786c:	4649      	mov	r1, r9
 800786e:	4640      	mov	r0, r8
 8007870:	47d0      	blx	sl
 8007872:	3001      	adds	r0, #1
 8007874:	d09d      	beq.n	80077b2 <_printf_i+0x15a>
 8007876:	3501      	adds	r5, #1
 8007878:	68e3      	ldr	r3, [r4, #12]
 800787a:	9903      	ldr	r1, [sp, #12]
 800787c:	1a5b      	subs	r3, r3, r1
 800787e:	42ab      	cmp	r3, r5
 8007880:	dcf2      	bgt.n	8007868 <_printf_i+0x210>
 8007882:	e7eb      	b.n	800785c <_printf_i+0x204>
 8007884:	2500      	movs	r5, #0
 8007886:	f104 0619 	add.w	r6, r4, #25
 800788a:	e7f5      	b.n	8007878 <_printf_i+0x220>
 800788c:	08009d68 	.word	0x08009d68
 8007890:	08009d79 	.word	0x08009d79

08007894 <sniprintf>:
 8007894:	b40c      	push	{r2, r3}
 8007896:	b530      	push	{r4, r5, lr}
 8007898:	4b18      	ldr	r3, [pc, #96]	@ (80078fc <sniprintf+0x68>)
 800789a:	1e0c      	subs	r4, r1, #0
 800789c:	681d      	ldr	r5, [r3, #0]
 800789e:	b09d      	sub	sp, #116	@ 0x74
 80078a0:	da08      	bge.n	80078b4 <sniprintf+0x20>
 80078a2:	238b      	movs	r3, #139	@ 0x8b
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078aa:	b01d      	add	sp, #116	@ 0x74
 80078ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078b0:	b002      	add	sp, #8
 80078b2:	4770      	bx	lr
 80078b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80078b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80078bc:	f04f 0300 	mov.w	r3, #0
 80078c0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80078c2:	bf14      	ite	ne
 80078c4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80078c8:	4623      	moveq	r3, r4
 80078ca:	9304      	str	r3, [sp, #16]
 80078cc:	9307      	str	r3, [sp, #28]
 80078ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80078d2:	9002      	str	r0, [sp, #8]
 80078d4:	9006      	str	r0, [sp, #24]
 80078d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80078dc:	ab21      	add	r3, sp, #132	@ 0x84
 80078de:	a902      	add	r1, sp, #8
 80078e0:	4628      	mov	r0, r5
 80078e2:	9301      	str	r3, [sp, #4]
 80078e4:	f000 ffcc 	bl	8008880 <_svfiprintf_r>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	bfbc      	itt	lt
 80078ec:	238b      	movlt	r3, #139	@ 0x8b
 80078ee:	602b      	strlt	r3, [r5, #0]
 80078f0:	2c00      	cmp	r4, #0
 80078f2:	d0da      	beq.n	80078aa <sniprintf+0x16>
 80078f4:	9b02      	ldr	r3, [sp, #8]
 80078f6:	2200      	movs	r2, #0
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	e7d6      	b.n	80078aa <sniprintf+0x16>
 80078fc:	200003d4 	.word	0x200003d4

08007900 <std>:
 8007900:	2300      	movs	r3, #0
 8007902:	b510      	push	{r4, lr}
 8007904:	4604      	mov	r4, r0
 8007906:	e9c0 3300 	strd	r3, r3, [r0]
 800790a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800790e:	6083      	str	r3, [r0, #8]
 8007910:	8181      	strh	r1, [r0, #12]
 8007912:	6643      	str	r3, [r0, #100]	@ 0x64
 8007914:	81c2      	strh	r2, [r0, #14]
 8007916:	6183      	str	r3, [r0, #24]
 8007918:	4619      	mov	r1, r3
 800791a:	2208      	movs	r2, #8
 800791c:	305c      	adds	r0, #92	@ 0x5c
 800791e:	f000 f8b1 	bl	8007a84 <memset>
 8007922:	4b0d      	ldr	r3, [pc, #52]	@ (8007958 <std+0x58>)
 8007924:	6263      	str	r3, [r4, #36]	@ 0x24
 8007926:	4b0d      	ldr	r3, [pc, #52]	@ (800795c <std+0x5c>)
 8007928:	62a3      	str	r3, [r4, #40]	@ 0x28
 800792a:	4b0d      	ldr	r3, [pc, #52]	@ (8007960 <std+0x60>)
 800792c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800792e:	4b0d      	ldr	r3, [pc, #52]	@ (8007964 <std+0x64>)
 8007930:	6323      	str	r3, [r4, #48]	@ 0x30
 8007932:	4b0d      	ldr	r3, [pc, #52]	@ (8007968 <std+0x68>)
 8007934:	6224      	str	r4, [r4, #32]
 8007936:	429c      	cmp	r4, r3
 8007938:	d006      	beq.n	8007948 <std+0x48>
 800793a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800793e:	4294      	cmp	r4, r2
 8007940:	d002      	beq.n	8007948 <std+0x48>
 8007942:	33d0      	adds	r3, #208	@ 0xd0
 8007944:	429c      	cmp	r4, r3
 8007946:	d105      	bne.n	8007954 <std+0x54>
 8007948:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800794c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007950:	f000 b8ca 	b.w	8007ae8 <__retarget_lock_init_recursive>
 8007954:	bd10      	pop	{r4, pc}
 8007956:	bf00      	nop
 8007958:	08009431 	.word	0x08009431
 800795c:	08009453 	.word	0x08009453
 8007960:	0800948b 	.word	0x0800948b
 8007964:	080094af 	.word	0x080094af
 8007968:	200009f8 	.word	0x200009f8

0800796c <stdio_exit_handler>:
 800796c:	4a02      	ldr	r2, [pc, #8]	@ (8007978 <stdio_exit_handler+0xc>)
 800796e:	4903      	ldr	r1, [pc, #12]	@ (800797c <stdio_exit_handler+0x10>)
 8007970:	4803      	ldr	r0, [pc, #12]	@ (8007980 <stdio_exit_handler+0x14>)
 8007972:	f000 b869 	b.w	8007a48 <_fwalk_sglue>
 8007976:	bf00      	nop
 8007978:	200003c8 	.word	0x200003c8
 800797c:	08008cd5 	.word	0x08008cd5
 8007980:	200003d8 	.word	0x200003d8

08007984 <cleanup_stdio>:
 8007984:	6841      	ldr	r1, [r0, #4]
 8007986:	4b0c      	ldr	r3, [pc, #48]	@ (80079b8 <cleanup_stdio+0x34>)
 8007988:	4299      	cmp	r1, r3
 800798a:	b510      	push	{r4, lr}
 800798c:	4604      	mov	r4, r0
 800798e:	d001      	beq.n	8007994 <cleanup_stdio+0x10>
 8007990:	f001 f9a0 	bl	8008cd4 <_fflush_r>
 8007994:	68a1      	ldr	r1, [r4, #8]
 8007996:	4b09      	ldr	r3, [pc, #36]	@ (80079bc <cleanup_stdio+0x38>)
 8007998:	4299      	cmp	r1, r3
 800799a:	d002      	beq.n	80079a2 <cleanup_stdio+0x1e>
 800799c:	4620      	mov	r0, r4
 800799e:	f001 f999 	bl	8008cd4 <_fflush_r>
 80079a2:	68e1      	ldr	r1, [r4, #12]
 80079a4:	4b06      	ldr	r3, [pc, #24]	@ (80079c0 <cleanup_stdio+0x3c>)
 80079a6:	4299      	cmp	r1, r3
 80079a8:	d004      	beq.n	80079b4 <cleanup_stdio+0x30>
 80079aa:	4620      	mov	r0, r4
 80079ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079b0:	f001 b990 	b.w	8008cd4 <_fflush_r>
 80079b4:	bd10      	pop	{r4, pc}
 80079b6:	bf00      	nop
 80079b8:	200009f8 	.word	0x200009f8
 80079bc:	20000a60 	.word	0x20000a60
 80079c0:	20000ac8 	.word	0x20000ac8

080079c4 <global_stdio_init.part.0>:
 80079c4:	b510      	push	{r4, lr}
 80079c6:	4b0b      	ldr	r3, [pc, #44]	@ (80079f4 <global_stdio_init.part.0+0x30>)
 80079c8:	4c0b      	ldr	r4, [pc, #44]	@ (80079f8 <global_stdio_init.part.0+0x34>)
 80079ca:	4a0c      	ldr	r2, [pc, #48]	@ (80079fc <global_stdio_init.part.0+0x38>)
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	4620      	mov	r0, r4
 80079d0:	2200      	movs	r2, #0
 80079d2:	2104      	movs	r1, #4
 80079d4:	f7ff ff94 	bl	8007900 <std>
 80079d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079dc:	2201      	movs	r2, #1
 80079de:	2109      	movs	r1, #9
 80079e0:	f7ff ff8e 	bl	8007900 <std>
 80079e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079e8:	2202      	movs	r2, #2
 80079ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ee:	2112      	movs	r1, #18
 80079f0:	f7ff bf86 	b.w	8007900 <std>
 80079f4:	20000b30 	.word	0x20000b30
 80079f8:	200009f8 	.word	0x200009f8
 80079fc:	0800796d 	.word	0x0800796d

08007a00 <__sfp_lock_acquire>:
 8007a00:	4801      	ldr	r0, [pc, #4]	@ (8007a08 <__sfp_lock_acquire+0x8>)
 8007a02:	f000 b872 	b.w	8007aea <__retarget_lock_acquire_recursive>
 8007a06:	bf00      	nop
 8007a08:	20000b35 	.word	0x20000b35

08007a0c <__sfp_lock_release>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	@ (8007a14 <__sfp_lock_release+0x8>)
 8007a0e:	f000 b86d 	b.w	8007aec <__retarget_lock_release_recursive>
 8007a12:	bf00      	nop
 8007a14:	20000b35 	.word	0x20000b35

08007a18 <__sinit>:
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	f7ff fff0 	bl	8007a00 <__sfp_lock_acquire>
 8007a20:	6a23      	ldr	r3, [r4, #32]
 8007a22:	b11b      	cbz	r3, 8007a2c <__sinit+0x14>
 8007a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a28:	f7ff bff0 	b.w	8007a0c <__sfp_lock_release>
 8007a2c:	4b04      	ldr	r3, [pc, #16]	@ (8007a40 <__sinit+0x28>)
 8007a2e:	6223      	str	r3, [r4, #32]
 8007a30:	4b04      	ldr	r3, [pc, #16]	@ (8007a44 <__sinit+0x2c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1f5      	bne.n	8007a24 <__sinit+0xc>
 8007a38:	f7ff ffc4 	bl	80079c4 <global_stdio_init.part.0>
 8007a3c:	e7f2      	b.n	8007a24 <__sinit+0xc>
 8007a3e:	bf00      	nop
 8007a40:	08007985 	.word	0x08007985
 8007a44:	20000b30 	.word	0x20000b30

08007a48 <_fwalk_sglue>:
 8007a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	4688      	mov	r8, r1
 8007a50:	4614      	mov	r4, r2
 8007a52:	2600      	movs	r6, #0
 8007a54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a58:	f1b9 0901 	subs.w	r9, r9, #1
 8007a5c:	d505      	bpl.n	8007a6a <_fwalk_sglue+0x22>
 8007a5e:	6824      	ldr	r4, [r4, #0]
 8007a60:	2c00      	cmp	r4, #0
 8007a62:	d1f7      	bne.n	8007a54 <_fwalk_sglue+0xc>
 8007a64:	4630      	mov	r0, r6
 8007a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6a:	89ab      	ldrh	r3, [r5, #12]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d907      	bls.n	8007a80 <_fwalk_sglue+0x38>
 8007a70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a74:	3301      	adds	r3, #1
 8007a76:	d003      	beq.n	8007a80 <_fwalk_sglue+0x38>
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	47c0      	blx	r8
 8007a7e:	4306      	orrs	r6, r0
 8007a80:	3568      	adds	r5, #104	@ 0x68
 8007a82:	e7e9      	b.n	8007a58 <_fwalk_sglue+0x10>

08007a84 <memset>:
 8007a84:	4402      	add	r2, r0
 8007a86:	4603      	mov	r3, r0
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d100      	bne.n	8007a8e <memset+0xa>
 8007a8c:	4770      	bx	lr
 8007a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a92:	e7f9      	b.n	8007a88 <memset+0x4>

08007a94 <__errno>:
 8007a94:	4b01      	ldr	r3, [pc, #4]	@ (8007a9c <__errno+0x8>)
 8007a96:	6818      	ldr	r0, [r3, #0]
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	200003d4 	.word	0x200003d4

08007aa0 <__libc_init_array>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8007ad8 <__libc_init_array+0x38>)
 8007aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8007adc <__libc_init_array+0x3c>)
 8007aa6:	1b64      	subs	r4, r4, r5
 8007aa8:	10a4      	asrs	r4, r4, #2
 8007aaa:	2600      	movs	r6, #0
 8007aac:	42a6      	cmp	r6, r4
 8007aae:	d109      	bne.n	8007ac4 <__libc_init_array+0x24>
 8007ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8007ae0 <__libc_init_array+0x40>)
 8007ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8007ae4 <__libc_init_array+0x44>)
 8007ab4:	f002 f8f8 	bl	8009ca8 <_init>
 8007ab8:	1b64      	subs	r4, r4, r5
 8007aba:	10a4      	asrs	r4, r4, #2
 8007abc:	2600      	movs	r6, #0
 8007abe:	42a6      	cmp	r6, r4
 8007ac0:	d105      	bne.n	8007ace <__libc_init_array+0x2e>
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac8:	4798      	blx	r3
 8007aca:	3601      	adds	r6, #1
 8007acc:	e7ee      	b.n	8007aac <__libc_init_array+0xc>
 8007ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad2:	4798      	blx	r3
 8007ad4:	3601      	adds	r6, #1
 8007ad6:	e7f2      	b.n	8007abe <__libc_init_array+0x1e>
 8007ad8:	0800a0d4 	.word	0x0800a0d4
 8007adc:	0800a0d4 	.word	0x0800a0d4
 8007ae0:	0800a0d4 	.word	0x0800a0d4
 8007ae4:	0800a0d8 	.word	0x0800a0d8

08007ae8 <__retarget_lock_init_recursive>:
 8007ae8:	4770      	bx	lr

08007aea <__retarget_lock_acquire_recursive>:
 8007aea:	4770      	bx	lr

08007aec <__retarget_lock_release_recursive>:
 8007aec:	4770      	bx	lr
	...

08007af0 <_localeconv_r>:
 8007af0:	4800      	ldr	r0, [pc, #0]	@ (8007af4 <_localeconv_r+0x4>)
 8007af2:	4770      	bx	lr
 8007af4:	20000514 	.word	0x20000514

08007af8 <memcpy>:
 8007af8:	440a      	add	r2, r1
 8007afa:	4291      	cmp	r1, r2
 8007afc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b00:	d100      	bne.n	8007b04 <memcpy+0xc>
 8007b02:	4770      	bx	lr
 8007b04:	b510      	push	{r4, lr}
 8007b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b0e:	4291      	cmp	r1, r2
 8007b10:	d1f9      	bne.n	8007b06 <memcpy+0xe>
 8007b12:	bd10      	pop	{r4, pc}

08007b14 <quorem>:
 8007b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b18:	6903      	ldr	r3, [r0, #16]
 8007b1a:	690c      	ldr	r4, [r1, #16]
 8007b1c:	42a3      	cmp	r3, r4
 8007b1e:	4607      	mov	r7, r0
 8007b20:	db7e      	blt.n	8007c20 <quorem+0x10c>
 8007b22:	3c01      	subs	r4, #1
 8007b24:	f101 0814 	add.w	r8, r1, #20
 8007b28:	00a3      	lsls	r3, r4, #2
 8007b2a:	f100 0514 	add.w	r5, r0, #20
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	429a      	cmp	r2, r3
 8007b42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b46:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b4a:	d32e      	bcc.n	8007baa <quorem+0x96>
 8007b4c:	f04f 0a00 	mov.w	sl, #0
 8007b50:	46c4      	mov	ip, r8
 8007b52:	46ae      	mov	lr, r5
 8007b54:	46d3      	mov	fp, sl
 8007b56:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b5a:	b298      	uxth	r0, r3
 8007b5c:	fb06 a000 	mla	r0, r6, r0, sl
 8007b60:	0c02      	lsrs	r2, r0, #16
 8007b62:	0c1b      	lsrs	r3, r3, #16
 8007b64:	fb06 2303 	mla	r3, r6, r3, r2
 8007b68:	f8de 2000 	ldr.w	r2, [lr]
 8007b6c:	b280      	uxth	r0, r0
 8007b6e:	b292      	uxth	r2, r2
 8007b70:	1a12      	subs	r2, r2, r0
 8007b72:	445a      	add	r2, fp
 8007b74:	f8de 0000 	ldr.w	r0, [lr]
 8007b78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b82:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b86:	b292      	uxth	r2, r2
 8007b88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b8c:	45e1      	cmp	r9, ip
 8007b8e:	f84e 2b04 	str.w	r2, [lr], #4
 8007b92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b96:	d2de      	bcs.n	8007b56 <quorem+0x42>
 8007b98:	9b00      	ldr	r3, [sp, #0]
 8007b9a:	58eb      	ldr	r3, [r5, r3]
 8007b9c:	b92b      	cbnz	r3, 8007baa <quorem+0x96>
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	3b04      	subs	r3, #4
 8007ba2:	429d      	cmp	r5, r3
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	d32f      	bcc.n	8007c08 <quorem+0xf4>
 8007ba8:	613c      	str	r4, [r7, #16]
 8007baa:	4638      	mov	r0, r7
 8007bac:	f001 fb38 	bl	8009220 <__mcmp>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	db25      	blt.n	8007c00 <quorem+0xec>
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bbc:	f8d1 c000 	ldr.w	ip, [r1]
 8007bc0:	fa1f fe82 	uxth.w	lr, r2
 8007bc4:	fa1f f38c 	uxth.w	r3, ip
 8007bc8:	eba3 030e 	sub.w	r3, r3, lr
 8007bcc:	4403      	add	r3, r0
 8007bce:	0c12      	lsrs	r2, r2, #16
 8007bd0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007bd4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bde:	45c1      	cmp	r9, r8
 8007be0:	f841 3b04 	str.w	r3, [r1], #4
 8007be4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007be8:	d2e6      	bcs.n	8007bb8 <quorem+0xa4>
 8007bea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bf2:	b922      	cbnz	r2, 8007bfe <quorem+0xea>
 8007bf4:	3b04      	subs	r3, #4
 8007bf6:	429d      	cmp	r5, r3
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	d30b      	bcc.n	8007c14 <quorem+0x100>
 8007bfc:	613c      	str	r4, [r7, #16]
 8007bfe:	3601      	adds	r6, #1
 8007c00:	4630      	mov	r0, r6
 8007c02:	b003      	add	sp, #12
 8007c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	3b04      	subs	r3, #4
 8007c0c:	2a00      	cmp	r2, #0
 8007c0e:	d1cb      	bne.n	8007ba8 <quorem+0x94>
 8007c10:	3c01      	subs	r4, #1
 8007c12:	e7c6      	b.n	8007ba2 <quorem+0x8e>
 8007c14:	6812      	ldr	r2, [r2, #0]
 8007c16:	3b04      	subs	r3, #4
 8007c18:	2a00      	cmp	r2, #0
 8007c1a:	d1ef      	bne.n	8007bfc <quorem+0xe8>
 8007c1c:	3c01      	subs	r4, #1
 8007c1e:	e7ea      	b.n	8007bf6 <quorem+0xe2>
 8007c20:	2000      	movs	r0, #0
 8007c22:	e7ee      	b.n	8007c02 <quorem+0xee>
 8007c24:	0000      	movs	r0, r0
	...

08007c28 <_dtoa_r>:
 8007c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2c:	69c7      	ldr	r7, [r0, #28]
 8007c2e:	b097      	sub	sp, #92	@ 0x5c
 8007c30:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007c34:	ec55 4b10 	vmov	r4, r5, d0
 8007c38:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007c3a:	9107      	str	r1, [sp, #28]
 8007c3c:	4681      	mov	r9, r0
 8007c3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c40:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c42:	b97f      	cbnz	r7, 8007c64 <_dtoa_r+0x3c>
 8007c44:	2010      	movs	r0, #16
 8007c46:	f000 ff17 	bl	8008a78 <malloc>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007c50:	b920      	cbnz	r0, 8007c5c <_dtoa_r+0x34>
 8007c52:	4ba9      	ldr	r3, [pc, #676]	@ (8007ef8 <_dtoa_r+0x2d0>)
 8007c54:	21ef      	movs	r1, #239	@ 0xef
 8007c56:	48a9      	ldr	r0, [pc, #676]	@ (8007efc <_dtoa_r+0x2d4>)
 8007c58:	f001 fccc 	bl	80095f4 <__assert_func>
 8007c5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007c60:	6007      	str	r7, [r0, #0]
 8007c62:	60c7      	str	r7, [r0, #12]
 8007c64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c68:	6819      	ldr	r1, [r3, #0]
 8007c6a:	b159      	cbz	r1, 8007c84 <_dtoa_r+0x5c>
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	604a      	str	r2, [r1, #4]
 8007c70:	2301      	movs	r3, #1
 8007c72:	4093      	lsls	r3, r2
 8007c74:	608b      	str	r3, [r1, #8]
 8007c76:	4648      	mov	r0, r9
 8007c78:	f001 f8a0 	bl	8008dbc <_Bfree>
 8007c7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	1e2b      	subs	r3, r5, #0
 8007c86:	bfb9      	ittee	lt
 8007c88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c8c:	9305      	strlt	r3, [sp, #20]
 8007c8e:	2300      	movge	r3, #0
 8007c90:	6033      	strge	r3, [r6, #0]
 8007c92:	9f05      	ldr	r7, [sp, #20]
 8007c94:	4b9a      	ldr	r3, [pc, #616]	@ (8007f00 <_dtoa_r+0x2d8>)
 8007c96:	bfbc      	itt	lt
 8007c98:	2201      	movlt	r2, #1
 8007c9a:	6032      	strlt	r2, [r6, #0]
 8007c9c:	43bb      	bics	r3, r7
 8007c9e:	d112      	bne.n	8007cc6 <_dtoa_r+0x9e>
 8007ca0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ca2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007cac:	4323      	orrs	r3, r4
 8007cae:	f000 855a 	beq.w	8008766 <_dtoa_r+0xb3e>
 8007cb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cb4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007f14 <_dtoa_r+0x2ec>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 855c 	beq.w	8008776 <_dtoa_r+0xb4e>
 8007cbe:	f10a 0303 	add.w	r3, sl, #3
 8007cc2:	f000 bd56 	b.w	8008772 <_dtoa_r+0xb4a>
 8007cc6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	ec51 0b17 	vmov	r0, r1, d7
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007cd6:	f7f8 ff17 	bl	8000b08 <__aeabi_dcmpeq>
 8007cda:	4680      	mov	r8, r0
 8007cdc:	b158      	cbz	r0, 8007cf6 <_dtoa_r+0xce>
 8007cde:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	6013      	str	r3, [r2, #0]
 8007ce4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ce6:	b113      	cbz	r3, 8007cee <_dtoa_r+0xc6>
 8007ce8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007cea:	4b86      	ldr	r3, [pc, #536]	@ (8007f04 <_dtoa_r+0x2dc>)
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007f18 <_dtoa_r+0x2f0>
 8007cf2:	f000 bd40 	b.w	8008776 <_dtoa_r+0xb4e>
 8007cf6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007cfa:	aa14      	add	r2, sp, #80	@ 0x50
 8007cfc:	a915      	add	r1, sp, #84	@ 0x54
 8007cfe:	4648      	mov	r0, r9
 8007d00:	f001 fb3e 	bl	8009380 <__d2b>
 8007d04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d08:	9002      	str	r0, [sp, #8]
 8007d0a:	2e00      	cmp	r6, #0
 8007d0c:	d078      	beq.n	8007e00 <_dtoa_r+0x1d8>
 8007d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d10:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d28:	4619      	mov	r1, r3
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	4b76      	ldr	r3, [pc, #472]	@ (8007f08 <_dtoa_r+0x2e0>)
 8007d2e:	f7f8 facb 	bl	80002c8 <__aeabi_dsub>
 8007d32:	a36b      	add	r3, pc, #428	@ (adr r3, 8007ee0 <_dtoa_r+0x2b8>)
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	f7f8 fc7e 	bl	8000638 <__aeabi_dmul>
 8007d3c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007ee8 <_dtoa_r+0x2c0>)
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	f7f8 fac3 	bl	80002cc <__adddf3>
 8007d46:	4604      	mov	r4, r0
 8007d48:	4630      	mov	r0, r6
 8007d4a:	460d      	mov	r5, r1
 8007d4c:	f7f8 fc0a 	bl	8000564 <__aeabi_i2d>
 8007d50:	a367      	add	r3, pc, #412	@ (adr r3, 8007ef0 <_dtoa_r+0x2c8>)
 8007d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d56:	f7f8 fc6f 	bl	8000638 <__aeabi_dmul>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4620      	mov	r0, r4
 8007d60:	4629      	mov	r1, r5
 8007d62:	f7f8 fab3 	bl	80002cc <__adddf3>
 8007d66:	4604      	mov	r4, r0
 8007d68:	460d      	mov	r5, r1
 8007d6a:	f7f8 ff15 	bl	8000b98 <__aeabi_d2iz>
 8007d6e:	2200      	movs	r2, #0
 8007d70:	4607      	mov	r7, r0
 8007d72:	2300      	movs	r3, #0
 8007d74:	4620      	mov	r0, r4
 8007d76:	4629      	mov	r1, r5
 8007d78:	f7f8 fed0 	bl	8000b1c <__aeabi_dcmplt>
 8007d7c:	b140      	cbz	r0, 8007d90 <_dtoa_r+0x168>
 8007d7e:	4638      	mov	r0, r7
 8007d80:	f7f8 fbf0 	bl	8000564 <__aeabi_i2d>
 8007d84:	4622      	mov	r2, r4
 8007d86:	462b      	mov	r3, r5
 8007d88:	f7f8 febe 	bl	8000b08 <__aeabi_dcmpeq>
 8007d8c:	b900      	cbnz	r0, 8007d90 <_dtoa_r+0x168>
 8007d8e:	3f01      	subs	r7, #1
 8007d90:	2f16      	cmp	r7, #22
 8007d92:	d852      	bhi.n	8007e3a <_dtoa_r+0x212>
 8007d94:	4b5d      	ldr	r3, [pc, #372]	@ (8007f0c <_dtoa_r+0x2e4>)
 8007d96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007da2:	f7f8 febb 	bl	8000b1c <__aeabi_dcmplt>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d049      	beq.n	8007e3e <_dtoa_r+0x216>
 8007daa:	3f01      	subs	r7, #1
 8007dac:	2300      	movs	r3, #0
 8007dae:	9310      	str	r3, [sp, #64]	@ 0x40
 8007db0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007db2:	1b9b      	subs	r3, r3, r6
 8007db4:	1e5a      	subs	r2, r3, #1
 8007db6:	bf45      	ittet	mi
 8007db8:	f1c3 0301 	rsbmi	r3, r3, #1
 8007dbc:	9300      	strmi	r3, [sp, #0]
 8007dbe:	2300      	movpl	r3, #0
 8007dc0:	2300      	movmi	r3, #0
 8007dc2:	9206      	str	r2, [sp, #24]
 8007dc4:	bf54      	ite	pl
 8007dc6:	9300      	strpl	r3, [sp, #0]
 8007dc8:	9306      	strmi	r3, [sp, #24]
 8007dca:	2f00      	cmp	r7, #0
 8007dcc:	db39      	blt.n	8007e42 <_dtoa_r+0x21a>
 8007dce:	9b06      	ldr	r3, [sp, #24]
 8007dd0:	970d      	str	r7, [sp, #52]	@ 0x34
 8007dd2:	443b      	add	r3, r7
 8007dd4:	9306      	str	r3, [sp, #24]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9308      	str	r3, [sp, #32]
 8007dda:	9b07      	ldr	r3, [sp, #28]
 8007ddc:	2b09      	cmp	r3, #9
 8007dde:	d863      	bhi.n	8007ea8 <_dtoa_r+0x280>
 8007de0:	2b05      	cmp	r3, #5
 8007de2:	bfc4      	itt	gt
 8007de4:	3b04      	subgt	r3, #4
 8007de6:	9307      	strgt	r3, [sp, #28]
 8007de8:	9b07      	ldr	r3, [sp, #28]
 8007dea:	f1a3 0302 	sub.w	r3, r3, #2
 8007dee:	bfcc      	ite	gt
 8007df0:	2400      	movgt	r4, #0
 8007df2:	2401      	movle	r4, #1
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d863      	bhi.n	8007ec0 <_dtoa_r+0x298>
 8007df8:	e8df f003 	tbb	[pc, r3]
 8007dfc:	2b375452 	.word	0x2b375452
 8007e00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007e04:	441e      	add	r6, r3
 8007e06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	bfc1      	itttt	gt
 8007e0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e12:	409f      	lslgt	r7, r3
 8007e14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e18:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e1c:	bfd6      	itet	le
 8007e1e:	f1c3 0320 	rsble	r3, r3, #32
 8007e22:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e26:	fa04 f003 	lslle.w	r0, r4, r3
 8007e2a:	f7f8 fb8b 	bl	8000544 <__aeabi_ui2d>
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e34:	3e01      	subs	r6, #1
 8007e36:	9212      	str	r2, [sp, #72]	@ 0x48
 8007e38:	e776      	b.n	8007d28 <_dtoa_r+0x100>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e7b7      	b.n	8007dae <_dtoa_r+0x186>
 8007e3e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007e40:	e7b6      	b.n	8007db0 <_dtoa_r+0x188>
 8007e42:	9b00      	ldr	r3, [sp, #0]
 8007e44:	1bdb      	subs	r3, r3, r7
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	427b      	negs	r3, r7
 8007e4a:	9308      	str	r3, [sp, #32]
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e50:	e7c3      	b.n	8007dda <_dtoa_r+0x1b2>
 8007e52:	2301      	movs	r3, #1
 8007e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e58:	eb07 0b03 	add.w	fp, r7, r3
 8007e5c:	f10b 0301 	add.w	r3, fp, #1
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	9303      	str	r3, [sp, #12]
 8007e64:	bfb8      	it	lt
 8007e66:	2301      	movlt	r3, #1
 8007e68:	e006      	b.n	8007e78 <_dtoa_r+0x250>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	dd28      	ble.n	8007ec6 <_dtoa_r+0x29e>
 8007e74:	469b      	mov	fp, r3
 8007e76:	9303      	str	r3, [sp, #12]
 8007e78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	2204      	movs	r2, #4
 8007e80:	f102 0514 	add.w	r5, r2, #20
 8007e84:	429d      	cmp	r5, r3
 8007e86:	d926      	bls.n	8007ed6 <_dtoa_r+0x2ae>
 8007e88:	6041      	str	r1, [r0, #4]
 8007e8a:	4648      	mov	r0, r9
 8007e8c:	f000 ff56 	bl	8008d3c <_Balloc>
 8007e90:	4682      	mov	sl, r0
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d142      	bne.n	8007f1c <_dtoa_r+0x2f4>
 8007e96:	4b1e      	ldr	r3, [pc, #120]	@ (8007f10 <_dtoa_r+0x2e8>)
 8007e98:	4602      	mov	r2, r0
 8007e9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e9e:	e6da      	b.n	8007c56 <_dtoa_r+0x2e>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	e7e3      	b.n	8007e6c <_dtoa_r+0x244>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e7d5      	b.n	8007e54 <_dtoa_r+0x22c>
 8007ea8:	2401      	movs	r4, #1
 8007eaa:	2300      	movs	r3, #0
 8007eac:	9307      	str	r3, [sp, #28]
 8007eae:	9409      	str	r4, [sp, #36]	@ 0x24
 8007eb0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8cd b00c 	str.w	fp, [sp, #12]
 8007eba:	2312      	movs	r3, #18
 8007ebc:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ebe:	e7db      	b.n	8007e78 <_dtoa_r+0x250>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ec4:	e7f4      	b.n	8007eb0 <_dtoa_r+0x288>
 8007ec6:	f04f 0b01 	mov.w	fp, #1
 8007eca:	f8cd b00c 	str.w	fp, [sp, #12]
 8007ece:	465b      	mov	r3, fp
 8007ed0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007ed4:	e7d0      	b.n	8007e78 <_dtoa_r+0x250>
 8007ed6:	3101      	adds	r1, #1
 8007ed8:	0052      	lsls	r2, r2, #1
 8007eda:	e7d1      	b.n	8007e80 <_dtoa_r+0x258>
 8007edc:	f3af 8000 	nop.w
 8007ee0:	636f4361 	.word	0x636f4361
 8007ee4:	3fd287a7 	.word	0x3fd287a7
 8007ee8:	8b60c8b3 	.word	0x8b60c8b3
 8007eec:	3fc68a28 	.word	0x3fc68a28
 8007ef0:	509f79fb 	.word	0x509f79fb
 8007ef4:	3fd34413 	.word	0x3fd34413
 8007ef8:	08009d97 	.word	0x08009d97
 8007efc:	08009dae 	.word	0x08009dae
 8007f00:	7ff00000 	.word	0x7ff00000
 8007f04:	08009d67 	.word	0x08009d67
 8007f08:	3ff80000 	.word	0x3ff80000
 8007f0c:	08009f00 	.word	0x08009f00
 8007f10:	08009e06 	.word	0x08009e06
 8007f14:	08009d93 	.word	0x08009d93
 8007f18:	08009d66 	.word	0x08009d66
 8007f1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f20:	6018      	str	r0, [r3, #0]
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	2b0e      	cmp	r3, #14
 8007f26:	f200 80a1 	bhi.w	800806c <_dtoa_r+0x444>
 8007f2a:	2c00      	cmp	r4, #0
 8007f2c:	f000 809e 	beq.w	800806c <_dtoa_r+0x444>
 8007f30:	2f00      	cmp	r7, #0
 8007f32:	dd33      	ble.n	8007f9c <_dtoa_r+0x374>
 8007f34:	4b9c      	ldr	r3, [pc, #624]	@ (80081a8 <_dtoa_r+0x580>)
 8007f36:	f007 020f 	and.w	r2, r7, #15
 8007f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f3e:	ed93 7b00 	vldr	d7, [r3]
 8007f42:	05f8      	lsls	r0, r7, #23
 8007f44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007f48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f4c:	d516      	bpl.n	8007f7c <_dtoa_r+0x354>
 8007f4e:	4b97      	ldr	r3, [pc, #604]	@ (80081ac <_dtoa_r+0x584>)
 8007f50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f58:	f7f8 fc98 	bl	800088c <__aeabi_ddiv>
 8007f5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f60:	f004 040f 	and.w	r4, r4, #15
 8007f64:	2603      	movs	r6, #3
 8007f66:	4d91      	ldr	r5, [pc, #580]	@ (80081ac <_dtoa_r+0x584>)
 8007f68:	b954      	cbnz	r4, 8007f80 <_dtoa_r+0x358>
 8007f6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f72:	f7f8 fc8b 	bl	800088c <__aeabi_ddiv>
 8007f76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f7a:	e028      	b.n	8007fce <_dtoa_r+0x3a6>
 8007f7c:	2602      	movs	r6, #2
 8007f7e:	e7f2      	b.n	8007f66 <_dtoa_r+0x33e>
 8007f80:	07e1      	lsls	r1, r4, #31
 8007f82:	d508      	bpl.n	8007f96 <_dtoa_r+0x36e>
 8007f84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f8c:	f7f8 fb54 	bl	8000638 <__aeabi_dmul>
 8007f90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f94:	3601      	adds	r6, #1
 8007f96:	1064      	asrs	r4, r4, #1
 8007f98:	3508      	adds	r5, #8
 8007f9a:	e7e5      	b.n	8007f68 <_dtoa_r+0x340>
 8007f9c:	f000 80af 	beq.w	80080fe <_dtoa_r+0x4d6>
 8007fa0:	427c      	negs	r4, r7
 8007fa2:	4b81      	ldr	r3, [pc, #516]	@ (80081a8 <_dtoa_r+0x580>)
 8007fa4:	4d81      	ldr	r5, [pc, #516]	@ (80081ac <_dtoa_r+0x584>)
 8007fa6:	f004 020f 	and.w	r2, r4, #15
 8007faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007fb6:	f7f8 fb3f 	bl	8000638 <__aeabi_dmul>
 8007fba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fbe:	1124      	asrs	r4, r4, #4
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	2602      	movs	r6, #2
 8007fc4:	2c00      	cmp	r4, #0
 8007fc6:	f040 808f 	bne.w	80080e8 <_dtoa_r+0x4c0>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1d3      	bne.n	8007f76 <_dtoa_r+0x34e>
 8007fce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007fd0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 8094 	beq.w	8008102 <_dtoa_r+0x4da>
 8007fda:	4b75      	ldr	r3, [pc, #468]	@ (80081b0 <_dtoa_r+0x588>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	4620      	mov	r0, r4
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	f7f8 fd9b 	bl	8000b1c <__aeabi_dcmplt>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	f000 808b 	beq.w	8008102 <_dtoa_r+0x4da>
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 8087 	beq.w	8008102 <_dtoa_r+0x4da>
 8007ff4:	f1bb 0f00 	cmp.w	fp, #0
 8007ff8:	dd34      	ble.n	8008064 <_dtoa_r+0x43c>
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	4b6d      	ldr	r3, [pc, #436]	@ (80081b4 <_dtoa_r+0x58c>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	4629      	mov	r1, r5
 8008002:	f7f8 fb19 	bl	8000638 <__aeabi_dmul>
 8008006:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800800a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800800e:	3601      	adds	r6, #1
 8008010:	465c      	mov	r4, fp
 8008012:	4630      	mov	r0, r6
 8008014:	f7f8 faa6 	bl	8000564 <__aeabi_i2d>
 8008018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800801c:	f7f8 fb0c 	bl	8000638 <__aeabi_dmul>
 8008020:	4b65      	ldr	r3, [pc, #404]	@ (80081b8 <_dtoa_r+0x590>)
 8008022:	2200      	movs	r2, #0
 8008024:	f7f8 f952 	bl	80002cc <__adddf3>
 8008028:	4605      	mov	r5, r0
 800802a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800802e:	2c00      	cmp	r4, #0
 8008030:	d16a      	bne.n	8008108 <_dtoa_r+0x4e0>
 8008032:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008036:	4b61      	ldr	r3, [pc, #388]	@ (80081bc <_dtoa_r+0x594>)
 8008038:	2200      	movs	r2, #0
 800803a:	f7f8 f945 	bl	80002c8 <__aeabi_dsub>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008046:	462a      	mov	r2, r5
 8008048:	4633      	mov	r3, r6
 800804a:	f7f8 fd85 	bl	8000b58 <__aeabi_dcmpgt>
 800804e:	2800      	cmp	r0, #0
 8008050:	f040 8298 	bne.w	8008584 <_dtoa_r+0x95c>
 8008054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008058:	462a      	mov	r2, r5
 800805a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800805e:	f7f8 fd5d 	bl	8000b1c <__aeabi_dcmplt>
 8008062:	bb38      	cbnz	r0, 80080b4 <_dtoa_r+0x48c>
 8008064:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008068:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800806c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800806e:	2b00      	cmp	r3, #0
 8008070:	f2c0 8157 	blt.w	8008322 <_dtoa_r+0x6fa>
 8008074:	2f0e      	cmp	r7, #14
 8008076:	f300 8154 	bgt.w	8008322 <_dtoa_r+0x6fa>
 800807a:	4b4b      	ldr	r3, [pc, #300]	@ (80081a8 <_dtoa_r+0x580>)
 800807c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008080:	ed93 7b00 	vldr	d7, [r3]
 8008084:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008086:	2b00      	cmp	r3, #0
 8008088:	ed8d 7b00 	vstr	d7, [sp]
 800808c:	f280 80e5 	bge.w	800825a <_dtoa_r+0x632>
 8008090:	9b03      	ldr	r3, [sp, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	f300 80e1 	bgt.w	800825a <_dtoa_r+0x632>
 8008098:	d10c      	bne.n	80080b4 <_dtoa_r+0x48c>
 800809a:	4b48      	ldr	r3, [pc, #288]	@ (80081bc <_dtoa_r+0x594>)
 800809c:	2200      	movs	r2, #0
 800809e:	ec51 0b17 	vmov	r0, r1, d7
 80080a2:	f7f8 fac9 	bl	8000638 <__aeabi_dmul>
 80080a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080aa:	f7f8 fd4b 	bl	8000b44 <__aeabi_dcmpge>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f000 8266 	beq.w	8008580 <_dtoa_r+0x958>
 80080b4:	2400      	movs	r4, #0
 80080b6:	4625      	mov	r5, r4
 80080b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080ba:	4656      	mov	r6, sl
 80080bc:	ea6f 0803 	mvn.w	r8, r3
 80080c0:	2700      	movs	r7, #0
 80080c2:	4621      	mov	r1, r4
 80080c4:	4648      	mov	r0, r9
 80080c6:	f000 fe79 	bl	8008dbc <_Bfree>
 80080ca:	2d00      	cmp	r5, #0
 80080cc:	f000 80bd 	beq.w	800824a <_dtoa_r+0x622>
 80080d0:	b12f      	cbz	r7, 80080de <_dtoa_r+0x4b6>
 80080d2:	42af      	cmp	r7, r5
 80080d4:	d003      	beq.n	80080de <_dtoa_r+0x4b6>
 80080d6:	4639      	mov	r1, r7
 80080d8:	4648      	mov	r0, r9
 80080da:	f000 fe6f 	bl	8008dbc <_Bfree>
 80080de:	4629      	mov	r1, r5
 80080e0:	4648      	mov	r0, r9
 80080e2:	f000 fe6b 	bl	8008dbc <_Bfree>
 80080e6:	e0b0      	b.n	800824a <_dtoa_r+0x622>
 80080e8:	07e2      	lsls	r2, r4, #31
 80080ea:	d505      	bpl.n	80080f8 <_dtoa_r+0x4d0>
 80080ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080f0:	f7f8 faa2 	bl	8000638 <__aeabi_dmul>
 80080f4:	3601      	adds	r6, #1
 80080f6:	2301      	movs	r3, #1
 80080f8:	1064      	asrs	r4, r4, #1
 80080fa:	3508      	adds	r5, #8
 80080fc:	e762      	b.n	8007fc4 <_dtoa_r+0x39c>
 80080fe:	2602      	movs	r6, #2
 8008100:	e765      	b.n	8007fce <_dtoa_r+0x3a6>
 8008102:	9c03      	ldr	r4, [sp, #12]
 8008104:	46b8      	mov	r8, r7
 8008106:	e784      	b.n	8008012 <_dtoa_r+0x3ea>
 8008108:	4b27      	ldr	r3, [pc, #156]	@ (80081a8 <_dtoa_r+0x580>)
 800810a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800810c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008110:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008114:	4454      	add	r4, sl
 8008116:	2900      	cmp	r1, #0
 8008118:	d054      	beq.n	80081c4 <_dtoa_r+0x59c>
 800811a:	4929      	ldr	r1, [pc, #164]	@ (80081c0 <_dtoa_r+0x598>)
 800811c:	2000      	movs	r0, #0
 800811e:	f7f8 fbb5 	bl	800088c <__aeabi_ddiv>
 8008122:	4633      	mov	r3, r6
 8008124:	462a      	mov	r2, r5
 8008126:	f7f8 f8cf 	bl	80002c8 <__aeabi_dsub>
 800812a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800812e:	4656      	mov	r6, sl
 8008130:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008134:	f7f8 fd30 	bl	8000b98 <__aeabi_d2iz>
 8008138:	4605      	mov	r5, r0
 800813a:	f7f8 fa13 	bl	8000564 <__aeabi_i2d>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008146:	f7f8 f8bf 	bl	80002c8 <__aeabi_dsub>
 800814a:	3530      	adds	r5, #48	@ 0x30
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008154:	f806 5b01 	strb.w	r5, [r6], #1
 8008158:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800815c:	f7f8 fcde 	bl	8000b1c <__aeabi_dcmplt>
 8008160:	2800      	cmp	r0, #0
 8008162:	d172      	bne.n	800824a <_dtoa_r+0x622>
 8008164:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008168:	4911      	ldr	r1, [pc, #68]	@ (80081b0 <_dtoa_r+0x588>)
 800816a:	2000      	movs	r0, #0
 800816c:	f7f8 f8ac 	bl	80002c8 <__aeabi_dsub>
 8008170:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008174:	f7f8 fcd2 	bl	8000b1c <__aeabi_dcmplt>
 8008178:	2800      	cmp	r0, #0
 800817a:	f040 80b4 	bne.w	80082e6 <_dtoa_r+0x6be>
 800817e:	42a6      	cmp	r6, r4
 8008180:	f43f af70 	beq.w	8008064 <_dtoa_r+0x43c>
 8008184:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008188:	4b0a      	ldr	r3, [pc, #40]	@ (80081b4 <_dtoa_r+0x58c>)
 800818a:	2200      	movs	r2, #0
 800818c:	f7f8 fa54 	bl	8000638 <__aeabi_dmul>
 8008190:	4b08      	ldr	r3, [pc, #32]	@ (80081b4 <_dtoa_r+0x58c>)
 8008192:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008196:	2200      	movs	r2, #0
 8008198:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800819c:	f7f8 fa4c 	bl	8000638 <__aeabi_dmul>
 80081a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081a4:	e7c4      	b.n	8008130 <_dtoa_r+0x508>
 80081a6:	bf00      	nop
 80081a8:	08009f00 	.word	0x08009f00
 80081ac:	08009ed8 	.word	0x08009ed8
 80081b0:	3ff00000 	.word	0x3ff00000
 80081b4:	40240000 	.word	0x40240000
 80081b8:	401c0000 	.word	0x401c0000
 80081bc:	40140000 	.word	0x40140000
 80081c0:	3fe00000 	.word	0x3fe00000
 80081c4:	4631      	mov	r1, r6
 80081c6:	4628      	mov	r0, r5
 80081c8:	f7f8 fa36 	bl	8000638 <__aeabi_dmul>
 80081cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80081d2:	4656      	mov	r6, sl
 80081d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081d8:	f7f8 fcde 	bl	8000b98 <__aeabi_d2iz>
 80081dc:	4605      	mov	r5, r0
 80081de:	f7f8 f9c1 	bl	8000564 <__aeabi_i2d>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081ea:	f7f8 f86d 	bl	80002c8 <__aeabi_dsub>
 80081ee:	3530      	adds	r5, #48	@ 0x30
 80081f0:	f806 5b01 	strb.w	r5, [r6], #1
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	42a6      	cmp	r6, r4
 80081fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081fe:	f04f 0200 	mov.w	r2, #0
 8008202:	d124      	bne.n	800824e <_dtoa_r+0x626>
 8008204:	4baf      	ldr	r3, [pc, #700]	@ (80084c4 <_dtoa_r+0x89c>)
 8008206:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800820a:	f7f8 f85f 	bl	80002cc <__adddf3>
 800820e:	4602      	mov	r2, r0
 8008210:	460b      	mov	r3, r1
 8008212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008216:	f7f8 fc9f 	bl	8000b58 <__aeabi_dcmpgt>
 800821a:	2800      	cmp	r0, #0
 800821c:	d163      	bne.n	80082e6 <_dtoa_r+0x6be>
 800821e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008222:	49a8      	ldr	r1, [pc, #672]	@ (80084c4 <_dtoa_r+0x89c>)
 8008224:	2000      	movs	r0, #0
 8008226:	f7f8 f84f 	bl	80002c8 <__aeabi_dsub>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008232:	f7f8 fc73 	bl	8000b1c <__aeabi_dcmplt>
 8008236:	2800      	cmp	r0, #0
 8008238:	f43f af14 	beq.w	8008064 <_dtoa_r+0x43c>
 800823c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800823e:	1e73      	subs	r3, r6, #1
 8008240:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008242:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008246:	2b30      	cmp	r3, #48	@ 0x30
 8008248:	d0f8      	beq.n	800823c <_dtoa_r+0x614>
 800824a:	4647      	mov	r7, r8
 800824c:	e03b      	b.n	80082c6 <_dtoa_r+0x69e>
 800824e:	4b9e      	ldr	r3, [pc, #632]	@ (80084c8 <_dtoa_r+0x8a0>)
 8008250:	f7f8 f9f2 	bl	8000638 <__aeabi_dmul>
 8008254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008258:	e7bc      	b.n	80081d4 <_dtoa_r+0x5ac>
 800825a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800825e:	4656      	mov	r6, sl
 8008260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008264:	4620      	mov	r0, r4
 8008266:	4629      	mov	r1, r5
 8008268:	f7f8 fb10 	bl	800088c <__aeabi_ddiv>
 800826c:	f7f8 fc94 	bl	8000b98 <__aeabi_d2iz>
 8008270:	4680      	mov	r8, r0
 8008272:	f7f8 f977 	bl	8000564 <__aeabi_i2d>
 8008276:	e9dd 2300 	ldrd	r2, r3, [sp]
 800827a:	f7f8 f9dd 	bl	8000638 <__aeabi_dmul>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4620      	mov	r0, r4
 8008284:	4629      	mov	r1, r5
 8008286:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800828a:	f7f8 f81d 	bl	80002c8 <__aeabi_dsub>
 800828e:	f806 4b01 	strb.w	r4, [r6], #1
 8008292:	9d03      	ldr	r5, [sp, #12]
 8008294:	eba6 040a 	sub.w	r4, r6, sl
 8008298:	42a5      	cmp	r5, r4
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	d133      	bne.n	8008308 <_dtoa_r+0x6e0>
 80082a0:	f7f8 f814 	bl	80002cc <__adddf3>
 80082a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082a8:	4604      	mov	r4, r0
 80082aa:	460d      	mov	r5, r1
 80082ac:	f7f8 fc54 	bl	8000b58 <__aeabi_dcmpgt>
 80082b0:	b9c0      	cbnz	r0, 80082e4 <_dtoa_r+0x6bc>
 80082b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082b6:	4620      	mov	r0, r4
 80082b8:	4629      	mov	r1, r5
 80082ba:	f7f8 fc25 	bl	8000b08 <__aeabi_dcmpeq>
 80082be:	b110      	cbz	r0, 80082c6 <_dtoa_r+0x69e>
 80082c0:	f018 0f01 	tst.w	r8, #1
 80082c4:	d10e      	bne.n	80082e4 <_dtoa_r+0x6bc>
 80082c6:	9902      	ldr	r1, [sp, #8]
 80082c8:	4648      	mov	r0, r9
 80082ca:	f000 fd77 	bl	8008dbc <_Bfree>
 80082ce:	2300      	movs	r3, #0
 80082d0:	7033      	strb	r3, [r6, #0]
 80082d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082d4:	3701      	adds	r7, #1
 80082d6:	601f      	str	r7, [r3, #0]
 80082d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 824b 	beq.w	8008776 <_dtoa_r+0xb4e>
 80082e0:	601e      	str	r6, [r3, #0]
 80082e2:	e248      	b.n	8008776 <_dtoa_r+0xb4e>
 80082e4:	46b8      	mov	r8, r7
 80082e6:	4633      	mov	r3, r6
 80082e8:	461e      	mov	r6, r3
 80082ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082ee:	2a39      	cmp	r2, #57	@ 0x39
 80082f0:	d106      	bne.n	8008300 <_dtoa_r+0x6d8>
 80082f2:	459a      	cmp	sl, r3
 80082f4:	d1f8      	bne.n	80082e8 <_dtoa_r+0x6c0>
 80082f6:	2230      	movs	r2, #48	@ 0x30
 80082f8:	f108 0801 	add.w	r8, r8, #1
 80082fc:	f88a 2000 	strb.w	r2, [sl]
 8008300:	781a      	ldrb	r2, [r3, #0]
 8008302:	3201      	adds	r2, #1
 8008304:	701a      	strb	r2, [r3, #0]
 8008306:	e7a0      	b.n	800824a <_dtoa_r+0x622>
 8008308:	4b6f      	ldr	r3, [pc, #444]	@ (80084c8 <_dtoa_r+0x8a0>)
 800830a:	2200      	movs	r2, #0
 800830c:	f7f8 f994 	bl	8000638 <__aeabi_dmul>
 8008310:	2200      	movs	r2, #0
 8008312:	2300      	movs	r3, #0
 8008314:	4604      	mov	r4, r0
 8008316:	460d      	mov	r5, r1
 8008318:	f7f8 fbf6 	bl	8000b08 <__aeabi_dcmpeq>
 800831c:	2800      	cmp	r0, #0
 800831e:	d09f      	beq.n	8008260 <_dtoa_r+0x638>
 8008320:	e7d1      	b.n	80082c6 <_dtoa_r+0x69e>
 8008322:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008324:	2a00      	cmp	r2, #0
 8008326:	f000 80ea 	beq.w	80084fe <_dtoa_r+0x8d6>
 800832a:	9a07      	ldr	r2, [sp, #28]
 800832c:	2a01      	cmp	r2, #1
 800832e:	f300 80cd 	bgt.w	80084cc <_dtoa_r+0x8a4>
 8008332:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008334:	2a00      	cmp	r2, #0
 8008336:	f000 80c1 	beq.w	80084bc <_dtoa_r+0x894>
 800833a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800833e:	9c08      	ldr	r4, [sp, #32]
 8008340:	9e00      	ldr	r6, [sp, #0]
 8008342:	9a00      	ldr	r2, [sp, #0]
 8008344:	441a      	add	r2, r3
 8008346:	9200      	str	r2, [sp, #0]
 8008348:	9a06      	ldr	r2, [sp, #24]
 800834a:	2101      	movs	r1, #1
 800834c:	441a      	add	r2, r3
 800834e:	4648      	mov	r0, r9
 8008350:	9206      	str	r2, [sp, #24]
 8008352:	f000 fde7 	bl	8008f24 <__i2b>
 8008356:	4605      	mov	r5, r0
 8008358:	b166      	cbz	r6, 8008374 <_dtoa_r+0x74c>
 800835a:	9b06      	ldr	r3, [sp, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	dd09      	ble.n	8008374 <_dtoa_r+0x74c>
 8008360:	42b3      	cmp	r3, r6
 8008362:	9a00      	ldr	r2, [sp, #0]
 8008364:	bfa8      	it	ge
 8008366:	4633      	movge	r3, r6
 8008368:	1ad2      	subs	r2, r2, r3
 800836a:	9200      	str	r2, [sp, #0]
 800836c:	9a06      	ldr	r2, [sp, #24]
 800836e:	1af6      	subs	r6, r6, r3
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	9306      	str	r3, [sp, #24]
 8008374:	9b08      	ldr	r3, [sp, #32]
 8008376:	b30b      	cbz	r3, 80083bc <_dtoa_r+0x794>
 8008378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 80c6 	beq.w	800850c <_dtoa_r+0x8e4>
 8008380:	2c00      	cmp	r4, #0
 8008382:	f000 80c0 	beq.w	8008506 <_dtoa_r+0x8de>
 8008386:	4629      	mov	r1, r5
 8008388:	4622      	mov	r2, r4
 800838a:	4648      	mov	r0, r9
 800838c:	f000 fe82 	bl	8009094 <__pow5mult>
 8008390:	9a02      	ldr	r2, [sp, #8]
 8008392:	4601      	mov	r1, r0
 8008394:	4605      	mov	r5, r0
 8008396:	4648      	mov	r0, r9
 8008398:	f000 fdda 	bl	8008f50 <__multiply>
 800839c:	9902      	ldr	r1, [sp, #8]
 800839e:	4680      	mov	r8, r0
 80083a0:	4648      	mov	r0, r9
 80083a2:	f000 fd0b 	bl	8008dbc <_Bfree>
 80083a6:	9b08      	ldr	r3, [sp, #32]
 80083a8:	1b1b      	subs	r3, r3, r4
 80083aa:	9308      	str	r3, [sp, #32]
 80083ac:	f000 80b1 	beq.w	8008512 <_dtoa_r+0x8ea>
 80083b0:	9a08      	ldr	r2, [sp, #32]
 80083b2:	4641      	mov	r1, r8
 80083b4:	4648      	mov	r0, r9
 80083b6:	f000 fe6d 	bl	8009094 <__pow5mult>
 80083ba:	9002      	str	r0, [sp, #8]
 80083bc:	2101      	movs	r1, #1
 80083be:	4648      	mov	r0, r9
 80083c0:	f000 fdb0 	bl	8008f24 <__i2b>
 80083c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083c6:	4604      	mov	r4, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 81d8 	beq.w	800877e <_dtoa_r+0xb56>
 80083ce:	461a      	mov	r2, r3
 80083d0:	4601      	mov	r1, r0
 80083d2:	4648      	mov	r0, r9
 80083d4:	f000 fe5e 	bl	8009094 <__pow5mult>
 80083d8:	9b07      	ldr	r3, [sp, #28]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	4604      	mov	r4, r0
 80083de:	f300 809f 	bgt.w	8008520 <_dtoa_r+0x8f8>
 80083e2:	9b04      	ldr	r3, [sp, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f040 8097 	bne.w	8008518 <_dtoa_r+0x8f0>
 80083ea:	9b05      	ldr	r3, [sp, #20]
 80083ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f040 8093 	bne.w	800851c <_dtoa_r+0x8f4>
 80083f6:	9b05      	ldr	r3, [sp, #20]
 80083f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80083fc:	0d1b      	lsrs	r3, r3, #20
 80083fe:	051b      	lsls	r3, r3, #20
 8008400:	b133      	cbz	r3, 8008410 <_dtoa_r+0x7e8>
 8008402:	9b00      	ldr	r3, [sp, #0]
 8008404:	3301      	adds	r3, #1
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	9b06      	ldr	r3, [sp, #24]
 800840a:	3301      	adds	r3, #1
 800840c:	9306      	str	r3, [sp, #24]
 800840e:	2301      	movs	r3, #1
 8008410:	9308      	str	r3, [sp, #32]
 8008412:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 81b8 	beq.w	800878a <_dtoa_r+0xb62>
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008420:	6918      	ldr	r0, [r3, #16]
 8008422:	f000 fd33 	bl	8008e8c <__hi0bits>
 8008426:	f1c0 0020 	rsb	r0, r0, #32
 800842a:	9b06      	ldr	r3, [sp, #24]
 800842c:	4418      	add	r0, r3
 800842e:	f010 001f 	ands.w	r0, r0, #31
 8008432:	f000 8082 	beq.w	800853a <_dtoa_r+0x912>
 8008436:	f1c0 0320 	rsb	r3, r0, #32
 800843a:	2b04      	cmp	r3, #4
 800843c:	dd73      	ble.n	8008526 <_dtoa_r+0x8fe>
 800843e:	9b00      	ldr	r3, [sp, #0]
 8008440:	f1c0 001c 	rsb	r0, r0, #28
 8008444:	4403      	add	r3, r0
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	9b06      	ldr	r3, [sp, #24]
 800844a:	4403      	add	r3, r0
 800844c:	4406      	add	r6, r0
 800844e:	9306      	str	r3, [sp, #24]
 8008450:	9b00      	ldr	r3, [sp, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	dd05      	ble.n	8008462 <_dtoa_r+0x83a>
 8008456:	9902      	ldr	r1, [sp, #8]
 8008458:	461a      	mov	r2, r3
 800845a:	4648      	mov	r0, r9
 800845c:	f000 fe74 	bl	8009148 <__lshift>
 8008460:	9002      	str	r0, [sp, #8]
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	dd05      	ble.n	8008474 <_dtoa_r+0x84c>
 8008468:	4621      	mov	r1, r4
 800846a:	461a      	mov	r2, r3
 800846c:	4648      	mov	r0, r9
 800846e:	f000 fe6b 	bl	8009148 <__lshift>
 8008472:	4604      	mov	r4, r0
 8008474:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d061      	beq.n	800853e <_dtoa_r+0x916>
 800847a:	9802      	ldr	r0, [sp, #8]
 800847c:	4621      	mov	r1, r4
 800847e:	f000 fecf 	bl	8009220 <__mcmp>
 8008482:	2800      	cmp	r0, #0
 8008484:	da5b      	bge.n	800853e <_dtoa_r+0x916>
 8008486:	2300      	movs	r3, #0
 8008488:	9902      	ldr	r1, [sp, #8]
 800848a:	220a      	movs	r2, #10
 800848c:	4648      	mov	r0, r9
 800848e:	f000 fcb7 	bl	8008e00 <__multadd>
 8008492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008494:	9002      	str	r0, [sp, #8]
 8008496:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 8177 	beq.w	800878e <_dtoa_r+0xb66>
 80084a0:	4629      	mov	r1, r5
 80084a2:	2300      	movs	r3, #0
 80084a4:	220a      	movs	r2, #10
 80084a6:	4648      	mov	r0, r9
 80084a8:	f000 fcaa 	bl	8008e00 <__multadd>
 80084ac:	f1bb 0f00 	cmp.w	fp, #0
 80084b0:	4605      	mov	r5, r0
 80084b2:	dc6f      	bgt.n	8008594 <_dtoa_r+0x96c>
 80084b4:	9b07      	ldr	r3, [sp, #28]
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	dc49      	bgt.n	800854e <_dtoa_r+0x926>
 80084ba:	e06b      	b.n	8008594 <_dtoa_r+0x96c>
 80084bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80084c2:	e73c      	b.n	800833e <_dtoa_r+0x716>
 80084c4:	3fe00000 	.word	0x3fe00000
 80084c8:	40240000 	.word	0x40240000
 80084cc:	9b03      	ldr	r3, [sp, #12]
 80084ce:	1e5c      	subs	r4, r3, #1
 80084d0:	9b08      	ldr	r3, [sp, #32]
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	db09      	blt.n	80084ea <_dtoa_r+0x8c2>
 80084d6:	1b1c      	subs	r4, r3, r4
 80084d8:	9b03      	ldr	r3, [sp, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f6bf af30 	bge.w	8008340 <_dtoa_r+0x718>
 80084e0:	9b00      	ldr	r3, [sp, #0]
 80084e2:	9a03      	ldr	r2, [sp, #12]
 80084e4:	1a9e      	subs	r6, r3, r2
 80084e6:	2300      	movs	r3, #0
 80084e8:	e72b      	b.n	8008342 <_dtoa_r+0x71a>
 80084ea:	9b08      	ldr	r3, [sp, #32]
 80084ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084ee:	9408      	str	r4, [sp, #32]
 80084f0:	1ae3      	subs	r3, r4, r3
 80084f2:	441a      	add	r2, r3
 80084f4:	9e00      	ldr	r6, [sp, #0]
 80084f6:	9b03      	ldr	r3, [sp, #12]
 80084f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80084fa:	2400      	movs	r4, #0
 80084fc:	e721      	b.n	8008342 <_dtoa_r+0x71a>
 80084fe:	9c08      	ldr	r4, [sp, #32]
 8008500:	9e00      	ldr	r6, [sp, #0]
 8008502:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008504:	e728      	b.n	8008358 <_dtoa_r+0x730>
 8008506:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800850a:	e751      	b.n	80083b0 <_dtoa_r+0x788>
 800850c:	9a08      	ldr	r2, [sp, #32]
 800850e:	9902      	ldr	r1, [sp, #8]
 8008510:	e750      	b.n	80083b4 <_dtoa_r+0x78c>
 8008512:	f8cd 8008 	str.w	r8, [sp, #8]
 8008516:	e751      	b.n	80083bc <_dtoa_r+0x794>
 8008518:	2300      	movs	r3, #0
 800851a:	e779      	b.n	8008410 <_dtoa_r+0x7e8>
 800851c:	9b04      	ldr	r3, [sp, #16]
 800851e:	e777      	b.n	8008410 <_dtoa_r+0x7e8>
 8008520:	2300      	movs	r3, #0
 8008522:	9308      	str	r3, [sp, #32]
 8008524:	e779      	b.n	800841a <_dtoa_r+0x7f2>
 8008526:	d093      	beq.n	8008450 <_dtoa_r+0x828>
 8008528:	9a00      	ldr	r2, [sp, #0]
 800852a:	331c      	adds	r3, #28
 800852c:	441a      	add	r2, r3
 800852e:	9200      	str	r2, [sp, #0]
 8008530:	9a06      	ldr	r2, [sp, #24]
 8008532:	441a      	add	r2, r3
 8008534:	441e      	add	r6, r3
 8008536:	9206      	str	r2, [sp, #24]
 8008538:	e78a      	b.n	8008450 <_dtoa_r+0x828>
 800853a:	4603      	mov	r3, r0
 800853c:	e7f4      	b.n	8008528 <_dtoa_r+0x900>
 800853e:	9b03      	ldr	r3, [sp, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	46b8      	mov	r8, r7
 8008544:	dc20      	bgt.n	8008588 <_dtoa_r+0x960>
 8008546:	469b      	mov	fp, r3
 8008548:	9b07      	ldr	r3, [sp, #28]
 800854a:	2b02      	cmp	r3, #2
 800854c:	dd1e      	ble.n	800858c <_dtoa_r+0x964>
 800854e:	f1bb 0f00 	cmp.w	fp, #0
 8008552:	f47f adb1 	bne.w	80080b8 <_dtoa_r+0x490>
 8008556:	4621      	mov	r1, r4
 8008558:	465b      	mov	r3, fp
 800855a:	2205      	movs	r2, #5
 800855c:	4648      	mov	r0, r9
 800855e:	f000 fc4f 	bl	8008e00 <__multadd>
 8008562:	4601      	mov	r1, r0
 8008564:	4604      	mov	r4, r0
 8008566:	9802      	ldr	r0, [sp, #8]
 8008568:	f000 fe5a 	bl	8009220 <__mcmp>
 800856c:	2800      	cmp	r0, #0
 800856e:	f77f ada3 	ble.w	80080b8 <_dtoa_r+0x490>
 8008572:	4656      	mov	r6, sl
 8008574:	2331      	movs	r3, #49	@ 0x31
 8008576:	f806 3b01 	strb.w	r3, [r6], #1
 800857a:	f108 0801 	add.w	r8, r8, #1
 800857e:	e59f      	b.n	80080c0 <_dtoa_r+0x498>
 8008580:	9c03      	ldr	r4, [sp, #12]
 8008582:	46b8      	mov	r8, r7
 8008584:	4625      	mov	r5, r4
 8008586:	e7f4      	b.n	8008572 <_dtoa_r+0x94a>
 8008588:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800858c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 8101 	beq.w	8008796 <_dtoa_r+0xb6e>
 8008594:	2e00      	cmp	r6, #0
 8008596:	dd05      	ble.n	80085a4 <_dtoa_r+0x97c>
 8008598:	4629      	mov	r1, r5
 800859a:	4632      	mov	r2, r6
 800859c:	4648      	mov	r0, r9
 800859e:	f000 fdd3 	bl	8009148 <__lshift>
 80085a2:	4605      	mov	r5, r0
 80085a4:	9b08      	ldr	r3, [sp, #32]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d05c      	beq.n	8008664 <_dtoa_r+0xa3c>
 80085aa:	6869      	ldr	r1, [r5, #4]
 80085ac:	4648      	mov	r0, r9
 80085ae:	f000 fbc5 	bl	8008d3c <_Balloc>
 80085b2:	4606      	mov	r6, r0
 80085b4:	b928      	cbnz	r0, 80085c2 <_dtoa_r+0x99a>
 80085b6:	4b82      	ldr	r3, [pc, #520]	@ (80087c0 <_dtoa_r+0xb98>)
 80085b8:	4602      	mov	r2, r0
 80085ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80085be:	f7ff bb4a 	b.w	8007c56 <_dtoa_r+0x2e>
 80085c2:	692a      	ldr	r2, [r5, #16]
 80085c4:	3202      	adds	r2, #2
 80085c6:	0092      	lsls	r2, r2, #2
 80085c8:	f105 010c 	add.w	r1, r5, #12
 80085cc:	300c      	adds	r0, #12
 80085ce:	f7ff fa93 	bl	8007af8 <memcpy>
 80085d2:	2201      	movs	r2, #1
 80085d4:	4631      	mov	r1, r6
 80085d6:	4648      	mov	r0, r9
 80085d8:	f000 fdb6 	bl	8009148 <__lshift>
 80085dc:	f10a 0301 	add.w	r3, sl, #1
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	eb0a 030b 	add.w	r3, sl, fp
 80085e6:	9308      	str	r3, [sp, #32]
 80085e8:	9b04      	ldr	r3, [sp, #16]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	462f      	mov	r7, r5
 80085f0:	9306      	str	r3, [sp, #24]
 80085f2:	4605      	mov	r5, r0
 80085f4:	9b00      	ldr	r3, [sp, #0]
 80085f6:	9802      	ldr	r0, [sp, #8]
 80085f8:	4621      	mov	r1, r4
 80085fa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80085fe:	f7ff fa89 	bl	8007b14 <quorem>
 8008602:	4603      	mov	r3, r0
 8008604:	3330      	adds	r3, #48	@ 0x30
 8008606:	9003      	str	r0, [sp, #12]
 8008608:	4639      	mov	r1, r7
 800860a:	9802      	ldr	r0, [sp, #8]
 800860c:	9309      	str	r3, [sp, #36]	@ 0x24
 800860e:	f000 fe07 	bl	8009220 <__mcmp>
 8008612:	462a      	mov	r2, r5
 8008614:	9004      	str	r0, [sp, #16]
 8008616:	4621      	mov	r1, r4
 8008618:	4648      	mov	r0, r9
 800861a:	f000 fe1d 	bl	8009258 <__mdiff>
 800861e:	68c2      	ldr	r2, [r0, #12]
 8008620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008622:	4606      	mov	r6, r0
 8008624:	bb02      	cbnz	r2, 8008668 <_dtoa_r+0xa40>
 8008626:	4601      	mov	r1, r0
 8008628:	9802      	ldr	r0, [sp, #8]
 800862a:	f000 fdf9 	bl	8009220 <__mcmp>
 800862e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008630:	4602      	mov	r2, r0
 8008632:	4631      	mov	r1, r6
 8008634:	4648      	mov	r0, r9
 8008636:	920c      	str	r2, [sp, #48]	@ 0x30
 8008638:	9309      	str	r3, [sp, #36]	@ 0x24
 800863a:	f000 fbbf 	bl	8008dbc <_Bfree>
 800863e:	9b07      	ldr	r3, [sp, #28]
 8008640:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008642:	9e00      	ldr	r6, [sp, #0]
 8008644:	ea42 0103 	orr.w	r1, r2, r3
 8008648:	9b06      	ldr	r3, [sp, #24]
 800864a:	4319      	orrs	r1, r3
 800864c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800864e:	d10d      	bne.n	800866c <_dtoa_r+0xa44>
 8008650:	2b39      	cmp	r3, #57	@ 0x39
 8008652:	d027      	beq.n	80086a4 <_dtoa_r+0xa7c>
 8008654:	9a04      	ldr	r2, [sp, #16]
 8008656:	2a00      	cmp	r2, #0
 8008658:	dd01      	ble.n	800865e <_dtoa_r+0xa36>
 800865a:	9b03      	ldr	r3, [sp, #12]
 800865c:	3331      	adds	r3, #49	@ 0x31
 800865e:	f88b 3000 	strb.w	r3, [fp]
 8008662:	e52e      	b.n	80080c2 <_dtoa_r+0x49a>
 8008664:	4628      	mov	r0, r5
 8008666:	e7b9      	b.n	80085dc <_dtoa_r+0x9b4>
 8008668:	2201      	movs	r2, #1
 800866a:	e7e2      	b.n	8008632 <_dtoa_r+0xa0a>
 800866c:	9904      	ldr	r1, [sp, #16]
 800866e:	2900      	cmp	r1, #0
 8008670:	db04      	blt.n	800867c <_dtoa_r+0xa54>
 8008672:	9807      	ldr	r0, [sp, #28]
 8008674:	4301      	orrs	r1, r0
 8008676:	9806      	ldr	r0, [sp, #24]
 8008678:	4301      	orrs	r1, r0
 800867a:	d120      	bne.n	80086be <_dtoa_r+0xa96>
 800867c:	2a00      	cmp	r2, #0
 800867e:	ddee      	ble.n	800865e <_dtoa_r+0xa36>
 8008680:	9902      	ldr	r1, [sp, #8]
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	2201      	movs	r2, #1
 8008686:	4648      	mov	r0, r9
 8008688:	f000 fd5e 	bl	8009148 <__lshift>
 800868c:	4621      	mov	r1, r4
 800868e:	9002      	str	r0, [sp, #8]
 8008690:	f000 fdc6 	bl	8009220 <__mcmp>
 8008694:	2800      	cmp	r0, #0
 8008696:	9b00      	ldr	r3, [sp, #0]
 8008698:	dc02      	bgt.n	80086a0 <_dtoa_r+0xa78>
 800869a:	d1e0      	bne.n	800865e <_dtoa_r+0xa36>
 800869c:	07da      	lsls	r2, r3, #31
 800869e:	d5de      	bpl.n	800865e <_dtoa_r+0xa36>
 80086a0:	2b39      	cmp	r3, #57	@ 0x39
 80086a2:	d1da      	bne.n	800865a <_dtoa_r+0xa32>
 80086a4:	2339      	movs	r3, #57	@ 0x39
 80086a6:	f88b 3000 	strb.w	r3, [fp]
 80086aa:	4633      	mov	r3, r6
 80086ac:	461e      	mov	r6, r3
 80086ae:	3b01      	subs	r3, #1
 80086b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80086b4:	2a39      	cmp	r2, #57	@ 0x39
 80086b6:	d04e      	beq.n	8008756 <_dtoa_r+0xb2e>
 80086b8:	3201      	adds	r2, #1
 80086ba:	701a      	strb	r2, [r3, #0]
 80086bc:	e501      	b.n	80080c2 <_dtoa_r+0x49a>
 80086be:	2a00      	cmp	r2, #0
 80086c0:	dd03      	ble.n	80086ca <_dtoa_r+0xaa2>
 80086c2:	2b39      	cmp	r3, #57	@ 0x39
 80086c4:	d0ee      	beq.n	80086a4 <_dtoa_r+0xa7c>
 80086c6:	3301      	adds	r3, #1
 80086c8:	e7c9      	b.n	800865e <_dtoa_r+0xa36>
 80086ca:	9a00      	ldr	r2, [sp, #0]
 80086cc:	9908      	ldr	r1, [sp, #32]
 80086ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086d2:	428a      	cmp	r2, r1
 80086d4:	d028      	beq.n	8008728 <_dtoa_r+0xb00>
 80086d6:	9902      	ldr	r1, [sp, #8]
 80086d8:	2300      	movs	r3, #0
 80086da:	220a      	movs	r2, #10
 80086dc:	4648      	mov	r0, r9
 80086de:	f000 fb8f 	bl	8008e00 <__multadd>
 80086e2:	42af      	cmp	r7, r5
 80086e4:	9002      	str	r0, [sp, #8]
 80086e6:	f04f 0300 	mov.w	r3, #0
 80086ea:	f04f 020a 	mov.w	r2, #10
 80086ee:	4639      	mov	r1, r7
 80086f0:	4648      	mov	r0, r9
 80086f2:	d107      	bne.n	8008704 <_dtoa_r+0xadc>
 80086f4:	f000 fb84 	bl	8008e00 <__multadd>
 80086f8:	4607      	mov	r7, r0
 80086fa:	4605      	mov	r5, r0
 80086fc:	9b00      	ldr	r3, [sp, #0]
 80086fe:	3301      	adds	r3, #1
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	e777      	b.n	80085f4 <_dtoa_r+0x9cc>
 8008704:	f000 fb7c 	bl	8008e00 <__multadd>
 8008708:	4629      	mov	r1, r5
 800870a:	4607      	mov	r7, r0
 800870c:	2300      	movs	r3, #0
 800870e:	220a      	movs	r2, #10
 8008710:	4648      	mov	r0, r9
 8008712:	f000 fb75 	bl	8008e00 <__multadd>
 8008716:	4605      	mov	r5, r0
 8008718:	e7f0      	b.n	80086fc <_dtoa_r+0xad4>
 800871a:	f1bb 0f00 	cmp.w	fp, #0
 800871e:	bfcc      	ite	gt
 8008720:	465e      	movgt	r6, fp
 8008722:	2601      	movle	r6, #1
 8008724:	4456      	add	r6, sl
 8008726:	2700      	movs	r7, #0
 8008728:	9902      	ldr	r1, [sp, #8]
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	2201      	movs	r2, #1
 800872e:	4648      	mov	r0, r9
 8008730:	f000 fd0a 	bl	8009148 <__lshift>
 8008734:	4621      	mov	r1, r4
 8008736:	9002      	str	r0, [sp, #8]
 8008738:	f000 fd72 	bl	8009220 <__mcmp>
 800873c:	2800      	cmp	r0, #0
 800873e:	dcb4      	bgt.n	80086aa <_dtoa_r+0xa82>
 8008740:	d102      	bne.n	8008748 <_dtoa_r+0xb20>
 8008742:	9b00      	ldr	r3, [sp, #0]
 8008744:	07db      	lsls	r3, r3, #31
 8008746:	d4b0      	bmi.n	80086aa <_dtoa_r+0xa82>
 8008748:	4633      	mov	r3, r6
 800874a:	461e      	mov	r6, r3
 800874c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008750:	2a30      	cmp	r2, #48	@ 0x30
 8008752:	d0fa      	beq.n	800874a <_dtoa_r+0xb22>
 8008754:	e4b5      	b.n	80080c2 <_dtoa_r+0x49a>
 8008756:	459a      	cmp	sl, r3
 8008758:	d1a8      	bne.n	80086ac <_dtoa_r+0xa84>
 800875a:	2331      	movs	r3, #49	@ 0x31
 800875c:	f108 0801 	add.w	r8, r8, #1
 8008760:	f88a 3000 	strb.w	r3, [sl]
 8008764:	e4ad      	b.n	80080c2 <_dtoa_r+0x49a>
 8008766:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008768:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80087c4 <_dtoa_r+0xb9c>
 800876c:	b11b      	cbz	r3, 8008776 <_dtoa_r+0xb4e>
 800876e:	f10a 0308 	add.w	r3, sl, #8
 8008772:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	4650      	mov	r0, sl
 8008778:	b017      	add	sp, #92	@ 0x5c
 800877a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800877e:	9b07      	ldr	r3, [sp, #28]
 8008780:	2b01      	cmp	r3, #1
 8008782:	f77f ae2e 	ble.w	80083e2 <_dtoa_r+0x7ba>
 8008786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008788:	9308      	str	r3, [sp, #32]
 800878a:	2001      	movs	r0, #1
 800878c:	e64d      	b.n	800842a <_dtoa_r+0x802>
 800878e:	f1bb 0f00 	cmp.w	fp, #0
 8008792:	f77f aed9 	ble.w	8008548 <_dtoa_r+0x920>
 8008796:	4656      	mov	r6, sl
 8008798:	9802      	ldr	r0, [sp, #8]
 800879a:	4621      	mov	r1, r4
 800879c:	f7ff f9ba 	bl	8007b14 <quorem>
 80087a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80087a4:	f806 3b01 	strb.w	r3, [r6], #1
 80087a8:	eba6 020a 	sub.w	r2, r6, sl
 80087ac:	4593      	cmp	fp, r2
 80087ae:	ddb4      	ble.n	800871a <_dtoa_r+0xaf2>
 80087b0:	9902      	ldr	r1, [sp, #8]
 80087b2:	2300      	movs	r3, #0
 80087b4:	220a      	movs	r2, #10
 80087b6:	4648      	mov	r0, r9
 80087b8:	f000 fb22 	bl	8008e00 <__multadd>
 80087bc:	9002      	str	r0, [sp, #8]
 80087be:	e7eb      	b.n	8008798 <_dtoa_r+0xb70>
 80087c0:	08009e06 	.word	0x08009e06
 80087c4:	08009d8a 	.word	0x08009d8a

080087c8 <__ssputs_r>:
 80087c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	688e      	ldr	r6, [r1, #8]
 80087ce:	461f      	mov	r7, r3
 80087d0:	42be      	cmp	r6, r7
 80087d2:	680b      	ldr	r3, [r1, #0]
 80087d4:	4682      	mov	sl, r0
 80087d6:	460c      	mov	r4, r1
 80087d8:	4690      	mov	r8, r2
 80087da:	d82d      	bhi.n	8008838 <__ssputs_r+0x70>
 80087dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087e4:	d026      	beq.n	8008834 <__ssputs_r+0x6c>
 80087e6:	6965      	ldr	r5, [r4, #20]
 80087e8:	6909      	ldr	r1, [r1, #16]
 80087ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087ee:	eba3 0901 	sub.w	r9, r3, r1
 80087f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087f6:	1c7b      	adds	r3, r7, #1
 80087f8:	444b      	add	r3, r9
 80087fa:	106d      	asrs	r5, r5, #1
 80087fc:	429d      	cmp	r5, r3
 80087fe:	bf38      	it	cc
 8008800:	461d      	movcc	r5, r3
 8008802:	0553      	lsls	r3, r2, #21
 8008804:	d527      	bpl.n	8008856 <__ssputs_r+0x8e>
 8008806:	4629      	mov	r1, r5
 8008808:	f000 f960 	bl	8008acc <_malloc_r>
 800880c:	4606      	mov	r6, r0
 800880e:	b360      	cbz	r0, 800886a <__ssputs_r+0xa2>
 8008810:	6921      	ldr	r1, [r4, #16]
 8008812:	464a      	mov	r2, r9
 8008814:	f7ff f970 	bl	8007af8 <memcpy>
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800881e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008822:	81a3      	strh	r3, [r4, #12]
 8008824:	6126      	str	r6, [r4, #16]
 8008826:	6165      	str	r5, [r4, #20]
 8008828:	444e      	add	r6, r9
 800882a:	eba5 0509 	sub.w	r5, r5, r9
 800882e:	6026      	str	r6, [r4, #0]
 8008830:	60a5      	str	r5, [r4, #8]
 8008832:	463e      	mov	r6, r7
 8008834:	42be      	cmp	r6, r7
 8008836:	d900      	bls.n	800883a <__ssputs_r+0x72>
 8008838:	463e      	mov	r6, r7
 800883a:	6820      	ldr	r0, [r4, #0]
 800883c:	4632      	mov	r2, r6
 800883e:	4641      	mov	r1, r8
 8008840:	f000 fe67 	bl	8009512 <memmove>
 8008844:	68a3      	ldr	r3, [r4, #8]
 8008846:	1b9b      	subs	r3, r3, r6
 8008848:	60a3      	str	r3, [r4, #8]
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	4433      	add	r3, r6
 800884e:	6023      	str	r3, [r4, #0]
 8008850:	2000      	movs	r0, #0
 8008852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008856:	462a      	mov	r2, r5
 8008858:	f000 fe2d 	bl	80094b6 <_realloc_r>
 800885c:	4606      	mov	r6, r0
 800885e:	2800      	cmp	r0, #0
 8008860:	d1e0      	bne.n	8008824 <__ssputs_r+0x5c>
 8008862:	6921      	ldr	r1, [r4, #16]
 8008864:	4650      	mov	r0, sl
 8008866:	f000 fef7 	bl	8009658 <_free_r>
 800886a:	230c      	movs	r3, #12
 800886c:	f8ca 3000 	str.w	r3, [sl]
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008876:	81a3      	strh	r3, [r4, #12]
 8008878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800887c:	e7e9      	b.n	8008852 <__ssputs_r+0x8a>
	...

08008880 <_svfiprintf_r>:
 8008880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	4698      	mov	r8, r3
 8008886:	898b      	ldrh	r3, [r1, #12]
 8008888:	061b      	lsls	r3, r3, #24
 800888a:	b09d      	sub	sp, #116	@ 0x74
 800888c:	4607      	mov	r7, r0
 800888e:	460d      	mov	r5, r1
 8008890:	4614      	mov	r4, r2
 8008892:	d510      	bpl.n	80088b6 <_svfiprintf_r+0x36>
 8008894:	690b      	ldr	r3, [r1, #16]
 8008896:	b973      	cbnz	r3, 80088b6 <_svfiprintf_r+0x36>
 8008898:	2140      	movs	r1, #64	@ 0x40
 800889a:	f000 f917 	bl	8008acc <_malloc_r>
 800889e:	6028      	str	r0, [r5, #0]
 80088a0:	6128      	str	r0, [r5, #16]
 80088a2:	b930      	cbnz	r0, 80088b2 <_svfiprintf_r+0x32>
 80088a4:	230c      	movs	r3, #12
 80088a6:	603b      	str	r3, [r7, #0]
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088ac:	b01d      	add	sp, #116	@ 0x74
 80088ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b2:	2340      	movs	r3, #64	@ 0x40
 80088b4:	616b      	str	r3, [r5, #20]
 80088b6:	2300      	movs	r3, #0
 80088b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80088ba:	2320      	movs	r3, #32
 80088bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80088c4:	2330      	movs	r3, #48	@ 0x30
 80088c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a64 <_svfiprintf_r+0x1e4>
 80088ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088ce:	f04f 0901 	mov.w	r9, #1
 80088d2:	4623      	mov	r3, r4
 80088d4:	469a      	mov	sl, r3
 80088d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088da:	b10a      	cbz	r2, 80088e0 <_svfiprintf_r+0x60>
 80088dc:	2a25      	cmp	r2, #37	@ 0x25
 80088de:	d1f9      	bne.n	80088d4 <_svfiprintf_r+0x54>
 80088e0:	ebba 0b04 	subs.w	fp, sl, r4
 80088e4:	d00b      	beq.n	80088fe <_svfiprintf_r+0x7e>
 80088e6:	465b      	mov	r3, fp
 80088e8:	4622      	mov	r2, r4
 80088ea:	4629      	mov	r1, r5
 80088ec:	4638      	mov	r0, r7
 80088ee:	f7ff ff6b 	bl	80087c8 <__ssputs_r>
 80088f2:	3001      	adds	r0, #1
 80088f4:	f000 80a7 	beq.w	8008a46 <_svfiprintf_r+0x1c6>
 80088f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088fa:	445a      	add	r2, fp
 80088fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80088fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 809f 	beq.w	8008a46 <_svfiprintf_r+0x1c6>
 8008908:	2300      	movs	r3, #0
 800890a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800890e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008912:	f10a 0a01 	add.w	sl, sl, #1
 8008916:	9304      	str	r3, [sp, #16]
 8008918:	9307      	str	r3, [sp, #28]
 800891a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800891e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008920:	4654      	mov	r4, sl
 8008922:	2205      	movs	r2, #5
 8008924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008928:	484e      	ldr	r0, [pc, #312]	@ (8008a64 <_svfiprintf_r+0x1e4>)
 800892a:	f7f7 fc71 	bl	8000210 <memchr>
 800892e:	9a04      	ldr	r2, [sp, #16]
 8008930:	b9d8      	cbnz	r0, 800896a <_svfiprintf_r+0xea>
 8008932:	06d0      	lsls	r0, r2, #27
 8008934:	bf44      	itt	mi
 8008936:	2320      	movmi	r3, #32
 8008938:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800893c:	0711      	lsls	r1, r2, #28
 800893e:	bf44      	itt	mi
 8008940:	232b      	movmi	r3, #43	@ 0x2b
 8008942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008946:	f89a 3000 	ldrb.w	r3, [sl]
 800894a:	2b2a      	cmp	r3, #42	@ 0x2a
 800894c:	d015      	beq.n	800897a <_svfiprintf_r+0xfa>
 800894e:	9a07      	ldr	r2, [sp, #28]
 8008950:	4654      	mov	r4, sl
 8008952:	2000      	movs	r0, #0
 8008954:	f04f 0c0a 	mov.w	ip, #10
 8008958:	4621      	mov	r1, r4
 800895a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800895e:	3b30      	subs	r3, #48	@ 0x30
 8008960:	2b09      	cmp	r3, #9
 8008962:	d94b      	bls.n	80089fc <_svfiprintf_r+0x17c>
 8008964:	b1b0      	cbz	r0, 8008994 <_svfiprintf_r+0x114>
 8008966:	9207      	str	r2, [sp, #28]
 8008968:	e014      	b.n	8008994 <_svfiprintf_r+0x114>
 800896a:	eba0 0308 	sub.w	r3, r0, r8
 800896e:	fa09 f303 	lsl.w	r3, r9, r3
 8008972:	4313      	orrs	r3, r2
 8008974:	9304      	str	r3, [sp, #16]
 8008976:	46a2      	mov	sl, r4
 8008978:	e7d2      	b.n	8008920 <_svfiprintf_r+0xa0>
 800897a:	9b03      	ldr	r3, [sp, #12]
 800897c:	1d19      	adds	r1, r3, #4
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	9103      	str	r1, [sp, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	bfbb      	ittet	lt
 8008986:	425b      	neglt	r3, r3
 8008988:	f042 0202 	orrlt.w	r2, r2, #2
 800898c:	9307      	strge	r3, [sp, #28]
 800898e:	9307      	strlt	r3, [sp, #28]
 8008990:	bfb8      	it	lt
 8008992:	9204      	strlt	r2, [sp, #16]
 8008994:	7823      	ldrb	r3, [r4, #0]
 8008996:	2b2e      	cmp	r3, #46	@ 0x2e
 8008998:	d10a      	bne.n	80089b0 <_svfiprintf_r+0x130>
 800899a:	7863      	ldrb	r3, [r4, #1]
 800899c:	2b2a      	cmp	r3, #42	@ 0x2a
 800899e:	d132      	bne.n	8008a06 <_svfiprintf_r+0x186>
 80089a0:	9b03      	ldr	r3, [sp, #12]
 80089a2:	1d1a      	adds	r2, r3, #4
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	9203      	str	r2, [sp, #12]
 80089a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089ac:	3402      	adds	r4, #2
 80089ae:	9305      	str	r3, [sp, #20]
 80089b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a74 <_svfiprintf_r+0x1f4>
 80089b4:	7821      	ldrb	r1, [r4, #0]
 80089b6:	2203      	movs	r2, #3
 80089b8:	4650      	mov	r0, sl
 80089ba:	f7f7 fc29 	bl	8000210 <memchr>
 80089be:	b138      	cbz	r0, 80089d0 <_svfiprintf_r+0x150>
 80089c0:	9b04      	ldr	r3, [sp, #16]
 80089c2:	eba0 000a 	sub.w	r0, r0, sl
 80089c6:	2240      	movs	r2, #64	@ 0x40
 80089c8:	4082      	lsls	r2, r0
 80089ca:	4313      	orrs	r3, r2
 80089cc:	3401      	adds	r4, #1
 80089ce:	9304      	str	r3, [sp, #16]
 80089d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d4:	4824      	ldr	r0, [pc, #144]	@ (8008a68 <_svfiprintf_r+0x1e8>)
 80089d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089da:	2206      	movs	r2, #6
 80089dc:	f7f7 fc18 	bl	8000210 <memchr>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d036      	beq.n	8008a52 <_svfiprintf_r+0x1d2>
 80089e4:	4b21      	ldr	r3, [pc, #132]	@ (8008a6c <_svfiprintf_r+0x1ec>)
 80089e6:	bb1b      	cbnz	r3, 8008a30 <_svfiprintf_r+0x1b0>
 80089e8:	9b03      	ldr	r3, [sp, #12]
 80089ea:	3307      	adds	r3, #7
 80089ec:	f023 0307 	bic.w	r3, r3, #7
 80089f0:	3308      	adds	r3, #8
 80089f2:	9303      	str	r3, [sp, #12]
 80089f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f6:	4433      	add	r3, r6
 80089f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80089fa:	e76a      	b.n	80088d2 <_svfiprintf_r+0x52>
 80089fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a00:	460c      	mov	r4, r1
 8008a02:	2001      	movs	r0, #1
 8008a04:	e7a8      	b.n	8008958 <_svfiprintf_r+0xd8>
 8008a06:	2300      	movs	r3, #0
 8008a08:	3401      	adds	r4, #1
 8008a0a:	9305      	str	r3, [sp, #20]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	f04f 0c0a 	mov.w	ip, #10
 8008a12:	4620      	mov	r0, r4
 8008a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a18:	3a30      	subs	r2, #48	@ 0x30
 8008a1a:	2a09      	cmp	r2, #9
 8008a1c:	d903      	bls.n	8008a26 <_svfiprintf_r+0x1a6>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0c6      	beq.n	80089b0 <_svfiprintf_r+0x130>
 8008a22:	9105      	str	r1, [sp, #20]
 8008a24:	e7c4      	b.n	80089b0 <_svfiprintf_r+0x130>
 8008a26:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e7f0      	b.n	8008a12 <_svfiprintf_r+0x192>
 8008a30:	ab03      	add	r3, sp, #12
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	462a      	mov	r2, r5
 8008a36:	4b0e      	ldr	r3, [pc, #56]	@ (8008a70 <_svfiprintf_r+0x1f0>)
 8008a38:	a904      	add	r1, sp, #16
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	f7fe fb74 	bl	8007128 <_printf_float>
 8008a40:	1c42      	adds	r2, r0, #1
 8008a42:	4606      	mov	r6, r0
 8008a44:	d1d6      	bne.n	80089f4 <_svfiprintf_r+0x174>
 8008a46:	89ab      	ldrh	r3, [r5, #12]
 8008a48:	065b      	lsls	r3, r3, #25
 8008a4a:	f53f af2d 	bmi.w	80088a8 <_svfiprintf_r+0x28>
 8008a4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a50:	e72c      	b.n	80088ac <_svfiprintf_r+0x2c>
 8008a52:	ab03      	add	r3, sp, #12
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	462a      	mov	r2, r5
 8008a58:	4b05      	ldr	r3, [pc, #20]	@ (8008a70 <_svfiprintf_r+0x1f0>)
 8008a5a:	a904      	add	r1, sp, #16
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	f7fe fdfb 	bl	8007658 <_printf_i>
 8008a62:	e7ed      	b.n	8008a40 <_svfiprintf_r+0x1c0>
 8008a64:	08009e17 	.word	0x08009e17
 8008a68:	08009e21 	.word	0x08009e21
 8008a6c:	08007129 	.word	0x08007129
 8008a70:	080087c9 	.word	0x080087c9
 8008a74:	08009e1d 	.word	0x08009e1d

08008a78 <malloc>:
 8008a78:	4b02      	ldr	r3, [pc, #8]	@ (8008a84 <malloc+0xc>)
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	f000 b825 	b.w	8008acc <_malloc_r>
 8008a82:	bf00      	nop
 8008a84:	200003d4 	.word	0x200003d4

08008a88 <sbrk_aligned>:
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	4e0f      	ldr	r6, [pc, #60]	@ (8008ac8 <sbrk_aligned+0x40>)
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	6831      	ldr	r1, [r6, #0]
 8008a90:	4605      	mov	r5, r0
 8008a92:	b911      	cbnz	r1, 8008a9a <sbrk_aligned+0x12>
 8008a94:	f000 fd7c 	bl	8009590 <_sbrk_r>
 8008a98:	6030      	str	r0, [r6, #0]
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	f000 fd77 	bl	8009590 <_sbrk_r>
 8008aa2:	1c43      	adds	r3, r0, #1
 8008aa4:	d103      	bne.n	8008aae <sbrk_aligned+0x26>
 8008aa6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008aaa:	4620      	mov	r0, r4
 8008aac:	bd70      	pop	{r4, r5, r6, pc}
 8008aae:	1cc4      	adds	r4, r0, #3
 8008ab0:	f024 0403 	bic.w	r4, r4, #3
 8008ab4:	42a0      	cmp	r0, r4
 8008ab6:	d0f8      	beq.n	8008aaa <sbrk_aligned+0x22>
 8008ab8:	1a21      	subs	r1, r4, r0
 8008aba:	4628      	mov	r0, r5
 8008abc:	f000 fd68 	bl	8009590 <_sbrk_r>
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d1f2      	bne.n	8008aaa <sbrk_aligned+0x22>
 8008ac4:	e7ef      	b.n	8008aa6 <sbrk_aligned+0x1e>
 8008ac6:	bf00      	nop
 8008ac8:	20000b38 	.word	0x20000b38

08008acc <_malloc_r>:
 8008acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad0:	1ccd      	adds	r5, r1, #3
 8008ad2:	f025 0503 	bic.w	r5, r5, #3
 8008ad6:	3508      	adds	r5, #8
 8008ad8:	2d0c      	cmp	r5, #12
 8008ada:	bf38      	it	cc
 8008adc:	250c      	movcc	r5, #12
 8008ade:	2d00      	cmp	r5, #0
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	db01      	blt.n	8008ae8 <_malloc_r+0x1c>
 8008ae4:	42a9      	cmp	r1, r5
 8008ae6:	d904      	bls.n	8008af2 <_malloc_r+0x26>
 8008ae8:	230c      	movs	r3, #12
 8008aea:	6033      	str	r3, [r6, #0]
 8008aec:	2000      	movs	r0, #0
 8008aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008af2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bc8 <_malloc_r+0xfc>
 8008af6:	f000 f915 	bl	8008d24 <__malloc_lock>
 8008afa:	f8d8 3000 	ldr.w	r3, [r8]
 8008afe:	461c      	mov	r4, r3
 8008b00:	bb44      	cbnz	r4, 8008b54 <_malloc_r+0x88>
 8008b02:	4629      	mov	r1, r5
 8008b04:	4630      	mov	r0, r6
 8008b06:	f7ff ffbf 	bl	8008a88 <sbrk_aligned>
 8008b0a:	1c43      	adds	r3, r0, #1
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	d158      	bne.n	8008bc2 <_malloc_r+0xf6>
 8008b10:	f8d8 4000 	ldr.w	r4, [r8]
 8008b14:	4627      	mov	r7, r4
 8008b16:	2f00      	cmp	r7, #0
 8008b18:	d143      	bne.n	8008ba2 <_malloc_r+0xd6>
 8008b1a:	2c00      	cmp	r4, #0
 8008b1c:	d04b      	beq.n	8008bb6 <_malloc_r+0xea>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	4639      	mov	r1, r7
 8008b22:	4630      	mov	r0, r6
 8008b24:	eb04 0903 	add.w	r9, r4, r3
 8008b28:	f000 fd32 	bl	8009590 <_sbrk_r>
 8008b2c:	4581      	cmp	r9, r0
 8008b2e:	d142      	bne.n	8008bb6 <_malloc_r+0xea>
 8008b30:	6821      	ldr	r1, [r4, #0]
 8008b32:	1a6d      	subs	r5, r5, r1
 8008b34:	4629      	mov	r1, r5
 8008b36:	4630      	mov	r0, r6
 8008b38:	f7ff ffa6 	bl	8008a88 <sbrk_aligned>
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	d03a      	beq.n	8008bb6 <_malloc_r+0xea>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	442b      	add	r3, r5
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	f8d8 3000 	ldr.w	r3, [r8]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	bb62      	cbnz	r2, 8008ba8 <_malloc_r+0xdc>
 8008b4e:	f8c8 7000 	str.w	r7, [r8]
 8008b52:	e00f      	b.n	8008b74 <_malloc_r+0xa8>
 8008b54:	6822      	ldr	r2, [r4, #0]
 8008b56:	1b52      	subs	r2, r2, r5
 8008b58:	d420      	bmi.n	8008b9c <_malloc_r+0xd0>
 8008b5a:	2a0b      	cmp	r2, #11
 8008b5c:	d917      	bls.n	8008b8e <_malloc_r+0xc2>
 8008b5e:	1961      	adds	r1, r4, r5
 8008b60:	42a3      	cmp	r3, r4
 8008b62:	6025      	str	r5, [r4, #0]
 8008b64:	bf18      	it	ne
 8008b66:	6059      	strne	r1, [r3, #4]
 8008b68:	6863      	ldr	r3, [r4, #4]
 8008b6a:	bf08      	it	eq
 8008b6c:	f8c8 1000 	streq.w	r1, [r8]
 8008b70:	5162      	str	r2, [r4, r5]
 8008b72:	604b      	str	r3, [r1, #4]
 8008b74:	4630      	mov	r0, r6
 8008b76:	f000 f8db 	bl	8008d30 <__malloc_unlock>
 8008b7a:	f104 000b 	add.w	r0, r4, #11
 8008b7e:	1d23      	adds	r3, r4, #4
 8008b80:	f020 0007 	bic.w	r0, r0, #7
 8008b84:	1ac2      	subs	r2, r0, r3
 8008b86:	bf1c      	itt	ne
 8008b88:	1a1b      	subne	r3, r3, r0
 8008b8a:	50a3      	strne	r3, [r4, r2]
 8008b8c:	e7af      	b.n	8008aee <_malloc_r+0x22>
 8008b8e:	6862      	ldr	r2, [r4, #4]
 8008b90:	42a3      	cmp	r3, r4
 8008b92:	bf0c      	ite	eq
 8008b94:	f8c8 2000 	streq.w	r2, [r8]
 8008b98:	605a      	strne	r2, [r3, #4]
 8008b9a:	e7eb      	b.n	8008b74 <_malloc_r+0xa8>
 8008b9c:	4623      	mov	r3, r4
 8008b9e:	6864      	ldr	r4, [r4, #4]
 8008ba0:	e7ae      	b.n	8008b00 <_malloc_r+0x34>
 8008ba2:	463c      	mov	r4, r7
 8008ba4:	687f      	ldr	r7, [r7, #4]
 8008ba6:	e7b6      	b.n	8008b16 <_malloc_r+0x4a>
 8008ba8:	461a      	mov	r2, r3
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	42a3      	cmp	r3, r4
 8008bae:	d1fb      	bne.n	8008ba8 <_malloc_r+0xdc>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	6053      	str	r3, [r2, #4]
 8008bb4:	e7de      	b.n	8008b74 <_malloc_r+0xa8>
 8008bb6:	230c      	movs	r3, #12
 8008bb8:	6033      	str	r3, [r6, #0]
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f000 f8b8 	bl	8008d30 <__malloc_unlock>
 8008bc0:	e794      	b.n	8008aec <_malloc_r+0x20>
 8008bc2:	6005      	str	r5, [r0, #0]
 8008bc4:	e7d6      	b.n	8008b74 <_malloc_r+0xa8>
 8008bc6:	bf00      	nop
 8008bc8:	20000b3c 	.word	0x20000b3c

08008bcc <__sflush_r>:
 8008bcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd4:	0716      	lsls	r6, r2, #28
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	460c      	mov	r4, r1
 8008bda:	d454      	bmi.n	8008c86 <__sflush_r+0xba>
 8008bdc:	684b      	ldr	r3, [r1, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dc02      	bgt.n	8008be8 <__sflush_r+0x1c>
 8008be2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dd48      	ble.n	8008c7a <__sflush_r+0xae>
 8008be8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bea:	2e00      	cmp	r6, #0
 8008bec:	d045      	beq.n	8008c7a <__sflush_r+0xae>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008bf4:	682f      	ldr	r7, [r5, #0]
 8008bf6:	6a21      	ldr	r1, [r4, #32]
 8008bf8:	602b      	str	r3, [r5, #0]
 8008bfa:	d030      	beq.n	8008c5e <__sflush_r+0x92>
 8008bfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	0759      	lsls	r1, r3, #29
 8008c02:	d505      	bpl.n	8008c10 <__sflush_r+0x44>
 8008c04:	6863      	ldr	r3, [r4, #4]
 8008c06:	1ad2      	subs	r2, r2, r3
 8008c08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c0a:	b10b      	cbz	r3, 8008c10 <__sflush_r+0x44>
 8008c0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	2300      	movs	r3, #0
 8008c12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c14:	6a21      	ldr	r1, [r4, #32]
 8008c16:	4628      	mov	r0, r5
 8008c18:	47b0      	blx	r6
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	d106      	bne.n	8008c2e <__sflush_r+0x62>
 8008c20:	6829      	ldr	r1, [r5, #0]
 8008c22:	291d      	cmp	r1, #29
 8008c24:	d82b      	bhi.n	8008c7e <__sflush_r+0xb2>
 8008c26:	4a2a      	ldr	r2, [pc, #168]	@ (8008cd0 <__sflush_r+0x104>)
 8008c28:	40ca      	lsrs	r2, r1
 8008c2a:	07d6      	lsls	r6, r2, #31
 8008c2c:	d527      	bpl.n	8008c7e <__sflush_r+0xb2>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	6062      	str	r2, [r4, #4]
 8008c32:	04d9      	lsls	r1, r3, #19
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	6022      	str	r2, [r4, #0]
 8008c38:	d504      	bpl.n	8008c44 <__sflush_r+0x78>
 8008c3a:	1c42      	adds	r2, r0, #1
 8008c3c:	d101      	bne.n	8008c42 <__sflush_r+0x76>
 8008c3e:	682b      	ldr	r3, [r5, #0]
 8008c40:	b903      	cbnz	r3, 8008c44 <__sflush_r+0x78>
 8008c42:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c46:	602f      	str	r7, [r5, #0]
 8008c48:	b1b9      	cbz	r1, 8008c7a <__sflush_r+0xae>
 8008c4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c4e:	4299      	cmp	r1, r3
 8008c50:	d002      	beq.n	8008c58 <__sflush_r+0x8c>
 8008c52:	4628      	mov	r0, r5
 8008c54:	f000 fd00 	bl	8009658 <_free_r>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c5c:	e00d      	b.n	8008c7a <__sflush_r+0xae>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b0      	blx	r6
 8008c64:	4602      	mov	r2, r0
 8008c66:	1c50      	adds	r0, r2, #1
 8008c68:	d1c9      	bne.n	8008bfe <__sflush_r+0x32>
 8008c6a:	682b      	ldr	r3, [r5, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d0c6      	beq.n	8008bfe <__sflush_r+0x32>
 8008c70:	2b1d      	cmp	r3, #29
 8008c72:	d001      	beq.n	8008c78 <__sflush_r+0xac>
 8008c74:	2b16      	cmp	r3, #22
 8008c76:	d11e      	bne.n	8008cb6 <__sflush_r+0xea>
 8008c78:	602f      	str	r7, [r5, #0]
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e022      	b.n	8008cc4 <__sflush_r+0xf8>
 8008c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c82:	b21b      	sxth	r3, r3
 8008c84:	e01b      	b.n	8008cbe <__sflush_r+0xf2>
 8008c86:	690f      	ldr	r7, [r1, #16]
 8008c88:	2f00      	cmp	r7, #0
 8008c8a:	d0f6      	beq.n	8008c7a <__sflush_r+0xae>
 8008c8c:	0793      	lsls	r3, r2, #30
 8008c8e:	680e      	ldr	r6, [r1, #0]
 8008c90:	bf08      	it	eq
 8008c92:	694b      	ldreq	r3, [r1, #20]
 8008c94:	600f      	str	r7, [r1, #0]
 8008c96:	bf18      	it	ne
 8008c98:	2300      	movne	r3, #0
 8008c9a:	eba6 0807 	sub.w	r8, r6, r7
 8008c9e:	608b      	str	r3, [r1, #8]
 8008ca0:	f1b8 0f00 	cmp.w	r8, #0
 8008ca4:	dde9      	ble.n	8008c7a <__sflush_r+0xae>
 8008ca6:	6a21      	ldr	r1, [r4, #32]
 8008ca8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008caa:	4643      	mov	r3, r8
 8008cac:	463a      	mov	r2, r7
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b0      	blx	r6
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	dc08      	bgt.n	8008cc8 <__sflush_r+0xfc>
 8008cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc8:	4407      	add	r7, r0
 8008cca:	eba8 0800 	sub.w	r8, r8, r0
 8008cce:	e7e7      	b.n	8008ca0 <__sflush_r+0xd4>
 8008cd0:	20400001 	.word	0x20400001

08008cd4 <_fflush_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	690b      	ldr	r3, [r1, #16]
 8008cd8:	4605      	mov	r5, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	b913      	cbnz	r3, 8008ce4 <_fflush_r+0x10>
 8008cde:	2500      	movs	r5, #0
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	bd38      	pop	{r3, r4, r5, pc}
 8008ce4:	b118      	cbz	r0, 8008cee <_fflush_r+0x1a>
 8008ce6:	6a03      	ldr	r3, [r0, #32]
 8008ce8:	b90b      	cbnz	r3, 8008cee <_fflush_r+0x1a>
 8008cea:	f7fe fe95 	bl	8007a18 <__sinit>
 8008cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0f3      	beq.n	8008cde <_fflush_r+0xa>
 8008cf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008cf8:	07d0      	lsls	r0, r2, #31
 8008cfa:	d404      	bmi.n	8008d06 <_fflush_r+0x32>
 8008cfc:	0599      	lsls	r1, r3, #22
 8008cfe:	d402      	bmi.n	8008d06 <_fflush_r+0x32>
 8008d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d02:	f7fe fef2 	bl	8007aea <__retarget_lock_acquire_recursive>
 8008d06:	4628      	mov	r0, r5
 8008d08:	4621      	mov	r1, r4
 8008d0a:	f7ff ff5f 	bl	8008bcc <__sflush_r>
 8008d0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d10:	07da      	lsls	r2, r3, #31
 8008d12:	4605      	mov	r5, r0
 8008d14:	d4e4      	bmi.n	8008ce0 <_fflush_r+0xc>
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	059b      	lsls	r3, r3, #22
 8008d1a:	d4e1      	bmi.n	8008ce0 <_fflush_r+0xc>
 8008d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d1e:	f7fe fee5 	bl	8007aec <__retarget_lock_release_recursive>
 8008d22:	e7dd      	b.n	8008ce0 <_fflush_r+0xc>

08008d24 <__malloc_lock>:
 8008d24:	4801      	ldr	r0, [pc, #4]	@ (8008d2c <__malloc_lock+0x8>)
 8008d26:	f7fe bee0 	b.w	8007aea <__retarget_lock_acquire_recursive>
 8008d2a:	bf00      	nop
 8008d2c:	20000b34 	.word	0x20000b34

08008d30 <__malloc_unlock>:
 8008d30:	4801      	ldr	r0, [pc, #4]	@ (8008d38 <__malloc_unlock+0x8>)
 8008d32:	f7fe bedb 	b.w	8007aec <__retarget_lock_release_recursive>
 8008d36:	bf00      	nop
 8008d38:	20000b34 	.word	0x20000b34

08008d3c <_Balloc>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	69c6      	ldr	r6, [r0, #28]
 8008d40:	4604      	mov	r4, r0
 8008d42:	460d      	mov	r5, r1
 8008d44:	b976      	cbnz	r6, 8008d64 <_Balloc+0x28>
 8008d46:	2010      	movs	r0, #16
 8008d48:	f7ff fe96 	bl	8008a78 <malloc>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	61e0      	str	r0, [r4, #28]
 8008d50:	b920      	cbnz	r0, 8008d5c <_Balloc+0x20>
 8008d52:	4b18      	ldr	r3, [pc, #96]	@ (8008db4 <_Balloc+0x78>)
 8008d54:	4818      	ldr	r0, [pc, #96]	@ (8008db8 <_Balloc+0x7c>)
 8008d56:	216b      	movs	r1, #107	@ 0x6b
 8008d58:	f000 fc4c 	bl	80095f4 <__assert_func>
 8008d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d60:	6006      	str	r6, [r0, #0]
 8008d62:	60c6      	str	r6, [r0, #12]
 8008d64:	69e6      	ldr	r6, [r4, #28]
 8008d66:	68f3      	ldr	r3, [r6, #12]
 8008d68:	b183      	cbz	r3, 8008d8c <_Balloc+0x50>
 8008d6a:	69e3      	ldr	r3, [r4, #28]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d72:	b9b8      	cbnz	r0, 8008da4 <_Balloc+0x68>
 8008d74:	2101      	movs	r1, #1
 8008d76:	fa01 f605 	lsl.w	r6, r1, r5
 8008d7a:	1d72      	adds	r2, r6, #5
 8008d7c:	0092      	lsls	r2, r2, #2
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f000 fc56 	bl	8009630 <_calloc_r>
 8008d84:	b160      	cbz	r0, 8008da0 <_Balloc+0x64>
 8008d86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d8a:	e00e      	b.n	8008daa <_Balloc+0x6e>
 8008d8c:	2221      	movs	r2, #33	@ 0x21
 8008d8e:	2104      	movs	r1, #4
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 fc4d 	bl	8009630 <_calloc_r>
 8008d96:	69e3      	ldr	r3, [r4, #28]
 8008d98:	60f0      	str	r0, [r6, #12]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e4      	bne.n	8008d6a <_Balloc+0x2e>
 8008da0:	2000      	movs	r0, #0
 8008da2:	bd70      	pop	{r4, r5, r6, pc}
 8008da4:	6802      	ldr	r2, [r0, #0]
 8008da6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008daa:	2300      	movs	r3, #0
 8008dac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008db0:	e7f7      	b.n	8008da2 <_Balloc+0x66>
 8008db2:	bf00      	nop
 8008db4:	08009d97 	.word	0x08009d97
 8008db8:	08009e28 	.word	0x08009e28

08008dbc <_Bfree>:
 8008dbc:	b570      	push	{r4, r5, r6, lr}
 8008dbe:	69c6      	ldr	r6, [r0, #28]
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	b976      	cbnz	r6, 8008de4 <_Bfree+0x28>
 8008dc6:	2010      	movs	r0, #16
 8008dc8:	f7ff fe56 	bl	8008a78 <malloc>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	61e8      	str	r0, [r5, #28]
 8008dd0:	b920      	cbnz	r0, 8008ddc <_Bfree+0x20>
 8008dd2:	4b09      	ldr	r3, [pc, #36]	@ (8008df8 <_Bfree+0x3c>)
 8008dd4:	4809      	ldr	r0, [pc, #36]	@ (8008dfc <_Bfree+0x40>)
 8008dd6:	218f      	movs	r1, #143	@ 0x8f
 8008dd8:	f000 fc0c 	bl	80095f4 <__assert_func>
 8008ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008de0:	6006      	str	r6, [r0, #0]
 8008de2:	60c6      	str	r6, [r0, #12]
 8008de4:	b13c      	cbz	r4, 8008df6 <_Bfree+0x3a>
 8008de6:	69eb      	ldr	r3, [r5, #28]
 8008de8:	6862      	ldr	r2, [r4, #4]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008df0:	6021      	str	r1, [r4, #0]
 8008df2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008df6:	bd70      	pop	{r4, r5, r6, pc}
 8008df8:	08009d97 	.word	0x08009d97
 8008dfc:	08009e28 	.word	0x08009e28

08008e00 <__multadd>:
 8008e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e04:	690d      	ldr	r5, [r1, #16]
 8008e06:	4607      	mov	r7, r0
 8008e08:	460c      	mov	r4, r1
 8008e0a:	461e      	mov	r6, r3
 8008e0c:	f101 0c14 	add.w	ip, r1, #20
 8008e10:	2000      	movs	r0, #0
 8008e12:	f8dc 3000 	ldr.w	r3, [ip]
 8008e16:	b299      	uxth	r1, r3
 8008e18:	fb02 6101 	mla	r1, r2, r1, r6
 8008e1c:	0c1e      	lsrs	r6, r3, #16
 8008e1e:	0c0b      	lsrs	r3, r1, #16
 8008e20:	fb02 3306 	mla	r3, r2, r6, r3
 8008e24:	b289      	uxth	r1, r1
 8008e26:	3001      	adds	r0, #1
 8008e28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e2c:	4285      	cmp	r5, r0
 8008e2e:	f84c 1b04 	str.w	r1, [ip], #4
 8008e32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e36:	dcec      	bgt.n	8008e12 <__multadd+0x12>
 8008e38:	b30e      	cbz	r6, 8008e7e <__multadd+0x7e>
 8008e3a:	68a3      	ldr	r3, [r4, #8]
 8008e3c:	42ab      	cmp	r3, r5
 8008e3e:	dc19      	bgt.n	8008e74 <__multadd+0x74>
 8008e40:	6861      	ldr	r1, [r4, #4]
 8008e42:	4638      	mov	r0, r7
 8008e44:	3101      	adds	r1, #1
 8008e46:	f7ff ff79 	bl	8008d3c <_Balloc>
 8008e4a:	4680      	mov	r8, r0
 8008e4c:	b928      	cbnz	r0, 8008e5a <__multadd+0x5a>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	4b0c      	ldr	r3, [pc, #48]	@ (8008e84 <__multadd+0x84>)
 8008e52:	480d      	ldr	r0, [pc, #52]	@ (8008e88 <__multadd+0x88>)
 8008e54:	21ba      	movs	r1, #186	@ 0xba
 8008e56:	f000 fbcd 	bl	80095f4 <__assert_func>
 8008e5a:	6922      	ldr	r2, [r4, #16]
 8008e5c:	3202      	adds	r2, #2
 8008e5e:	f104 010c 	add.w	r1, r4, #12
 8008e62:	0092      	lsls	r2, r2, #2
 8008e64:	300c      	adds	r0, #12
 8008e66:	f7fe fe47 	bl	8007af8 <memcpy>
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	f7ff ffa5 	bl	8008dbc <_Bfree>
 8008e72:	4644      	mov	r4, r8
 8008e74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e78:	3501      	adds	r5, #1
 8008e7a:	615e      	str	r6, [r3, #20]
 8008e7c:	6125      	str	r5, [r4, #16]
 8008e7e:	4620      	mov	r0, r4
 8008e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e84:	08009e06 	.word	0x08009e06
 8008e88:	08009e28 	.word	0x08009e28

08008e8c <__hi0bits>:
 8008e8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e90:	4603      	mov	r3, r0
 8008e92:	bf36      	itet	cc
 8008e94:	0403      	lslcc	r3, r0, #16
 8008e96:	2000      	movcs	r0, #0
 8008e98:	2010      	movcc	r0, #16
 8008e9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e9e:	bf3c      	itt	cc
 8008ea0:	021b      	lslcc	r3, r3, #8
 8008ea2:	3008      	addcc	r0, #8
 8008ea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ea8:	bf3c      	itt	cc
 8008eaa:	011b      	lslcc	r3, r3, #4
 8008eac:	3004      	addcc	r0, #4
 8008eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eb2:	bf3c      	itt	cc
 8008eb4:	009b      	lslcc	r3, r3, #2
 8008eb6:	3002      	addcc	r0, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	db05      	blt.n	8008ec8 <__hi0bits+0x3c>
 8008ebc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ec0:	f100 0001 	add.w	r0, r0, #1
 8008ec4:	bf08      	it	eq
 8008ec6:	2020      	moveq	r0, #32
 8008ec8:	4770      	bx	lr

08008eca <__lo0bits>:
 8008eca:	6803      	ldr	r3, [r0, #0]
 8008ecc:	4602      	mov	r2, r0
 8008ece:	f013 0007 	ands.w	r0, r3, #7
 8008ed2:	d00b      	beq.n	8008eec <__lo0bits+0x22>
 8008ed4:	07d9      	lsls	r1, r3, #31
 8008ed6:	d421      	bmi.n	8008f1c <__lo0bits+0x52>
 8008ed8:	0798      	lsls	r0, r3, #30
 8008eda:	bf49      	itett	mi
 8008edc:	085b      	lsrmi	r3, r3, #1
 8008ede:	089b      	lsrpl	r3, r3, #2
 8008ee0:	2001      	movmi	r0, #1
 8008ee2:	6013      	strmi	r3, [r2, #0]
 8008ee4:	bf5c      	itt	pl
 8008ee6:	6013      	strpl	r3, [r2, #0]
 8008ee8:	2002      	movpl	r0, #2
 8008eea:	4770      	bx	lr
 8008eec:	b299      	uxth	r1, r3
 8008eee:	b909      	cbnz	r1, 8008ef4 <__lo0bits+0x2a>
 8008ef0:	0c1b      	lsrs	r3, r3, #16
 8008ef2:	2010      	movs	r0, #16
 8008ef4:	b2d9      	uxtb	r1, r3
 8008ef6:	b909      	cbnz	r1, 8008efc <__lo0bits+0x32>
 8008ef8:	3008      	adds	r0, #8
 8008efa:	0a1b      	lsrs	r3, r3, #8
 8008efc:	0719      	lsls	r1, r3, #28
 8008efe:	bf04      	itt	eq
 8008f00:	091b      	lsreq	r3, r3, #4
 8008f02:	3004      	addeq	r0, #4
 8008f04:	0799      	lsls	r1, r3, #30
 8008f06:	bf04      	itt	eq
 8008f08:	089b      	lsreq	r3, r3, #2
 8008f0a:	3002      	addeq	r0, #2
 8008f0c:	07d9      	lsls	r1, r3, #31
 8008f0e:	d403      	bmi.n	8008f18 <__lo0bits+0x4e>
 8008f10:	085b      	lsrs	r3, r3, #1
 8008f12:	f100 0001 	add.w	r0, r0, #1
 8008f16:	d003      	beq.n	8008f20 <__lo0bits+0x56>
 8008f18:	6013      	str	r3, [r2, #0]
 8008f1a:	4770      	bx	lr
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	4770      	bx	lr
 8008f20:	2020      	movs	r0, #32
 8008f22:	4770      	bx	lr

08008f24 <__i2b>:
 8008f24:	b510      	push	{r4, lr}
 8008f26:	460c      	mov	r4, r1
 8008f28:	2101      	movs	r1, #1
 8008f2a:	f7ff ff07 	bl	8008d3c <_Balloc>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	b928      	cbnz	r0, 8008f3e <__i2b+0x1a>
 8008f32:	4b05      	ldr	r3, [pc, #20]	@ (8008f48 <__i2b+0x24>)
 8008f34:	4805      	ldr	r0, [pc, #20]	@ (8008f4c <__i2b+0x28>)
 8008f36:	f240 1145 	movw	r1, #325	@ 0x145
 8008f3a:	f000 fb5b 	bl	80095f4 <__assert_func>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	6144      	str	r4, [r0, #20]
 8008f42:	6103      	str	r3, [r0, #16]
 8008f44:	bd10      	pop	{r4, pc}
 8008f46:	bf00      	nop
 8008f48:	08009e06 	.word	0x08009e06
 8008f4c:	08009e28 	.word	0x08009e28

08008f50 <__multiply>:
 8008f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	4617      	mov	r7, r2
 8008f56:	690a      	ldr	r2, [r1, #16]
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	bfa8      	it	ge
 8008f5e:	463b      	movge	r3, r7
 8008f60:	4689      	mov	r9, r1
 8008f62:	bfa4      	itt	ge
 8008f64:	460f      	movge	r7, r1
 8008f66:	4699      	movge	r9, r3
 8008f68:	693d      	ldr	r5, [r7, #16]
 8008f6a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	6879      	ldr	r1, [r7, #4]
 8008f72:	eb05 060a 	add.w	r6, r5, sl
 8008f76:	42b3      	cmp	r3, r6
 8008f78:	b085      	sub	sp, #20
 8008f7a:	bfb8      	it	lt
 8008f7c:	3101      	addlt	r1, #1
 8008f7e:	f7ff fedd 	bl	8008d3c <_Balloc>
 8008f82:	b930      	cbnz	r0, 8008f92 <__multiply+0x42>
 8008f84:	4602      	mov	r2, r0
 8008f86:	4b41      	ldr	r3, [pc, #260]	@ (800908c <__multiply+0x13c>)
 8008f88:	4841      	ldr	r0, [pc, #260]	@ (8009090 <__multiply+0x140>)
 8008f8a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f8e:	f000 fb31 	bl	80095f4 <__assert_func>
 8008f92:	f100 0414 	add.w	r4, r0, #20
 8008f96:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008f9a:	4623      	mov	r3, r4
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	4573      	cmp	r3, lr
 8008fa0:	d320      	bcc.n	8008fe4 <__multiply+0x94>
 8008fa2:	f107 0814 	add.w	r8, r7, #20
 8008fa6:	f109 0114 	add.w	r1, r9, #20
 8008faa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008fae:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008fb2:	9302      	str	r3, [sp, #8]
 8008fb4:	1beb      	subs	r3, r5, r7
 8008fb6:	3b15      	subs	r3, #21
 8008fb8:	f023 0303 	bic.w	r3, r3, #3
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	3715      	adds	r7, #21
 8008fc0:	42bd      	cmp	r5, r7
 8008fc2:	bf38      	it	cc
 8008fc4:	2304      	movcc	r3, #4
 8008fc6:	9301      	str	r3, [sp, #4]
 8008fc8:	9b02      	ldr	r3, [sp, #8]
 8008fca:	9103      	str	r1, [sp, #12]
 8008fcc:	428b      	cmp	r3, r1
 8008fce:	d80c      	bhi.n	8008fea <__multiply+0x9a>
 8008fd0:	2e00      	cmp	r6, #0
 8008fd2:	dd03      	ble.n	8008fdc <__multiply+0x8c>
 8008fd4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d055      	beq.n	8009088 <__multiply+0x138>
 8008fdc:	6106      	str	r6, [r0, #16]
 8008fde:	b005      	add	sp, #20
 8008fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe4:	f843 2b04 	str.w	r2, [r3], #4
 8008fe8:	e7d9      	b.n	8008f9e <__multiply+0x4e>
 8008fea:	f8b1 a000 	ldrh.w	sl, [r1]
 8008fee:	f1ba 0f00 	cmp.w	sl, #0
 8008ff2:	d01f      	beq.n	8009034 <__multiply+0xe4>
 8008ff4:	46c4      	mov	ip, r8
 8008ff6:	46a1      	mov	r9, r4
 8008ff8:	2700      	movs	r7, #0
 8008ffa:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ffe:	f8d9 3000 	ldr.w	r3, [r9]
 8009002:	fa1f fb82 	uxth.w	fp, r2
 8009006:	b29b      	uxth	r3, r3
 8009008:	fb0a 330b 	mla	r3, sl, fp, r3
 800900c:	443b      	add	r3, r7
 800900e:	f8d9 7000 	ldr.w	r7, [r9]
 8009012:	0c12      	lsrs	r2, r2, #16
 8009014:	0c3f      	lsrs	r7, r7, #16
 8009016:	fb0a 7202 	mla	r2, sl, r2, r7
 800901a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800901e:	b29b      	uxth	r3, r3
 8009020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009024:	4565      	cmp	r5, ip
 8009026:	f849 3b04 	str.w	r3, [r9], #4
 800902a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800902e:	d8e4      	bhi.n	8008ffa <__multiply+0xaa>
 8009030:	9b01      	ldr	r3, [sp, #4]
 8009032:	50e7      	str	r7, [r4, r3]
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800903a:	3104      	adds	r1, #4
 800903c:	f1b9 0f00 	cmp.w	r9, #0
 8009040:	d020      	beq.n	8009084 <__multiply+0x134>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	4647      	mov	r7, r8
 8009046:	46a4      	mov	ip, r4
 8009048:	f04f 0a00 	mov.w	sl, #0
 800904c:	f8b7 b000 	ldrh.w	fp, [r7]
 8009050:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009054:	fb09 220b 	mla	r2, r9, fp, r2
 8009058:	4452      	add	r2, sl
 800905a:	b29b      	uxth	r3, r3
 800905c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009060:	f84c 3b04 	str.w	r3, [ip], #4
 8009064:	f857 3b04 	ldr.w	r3, [r7], #4
 8009068:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800906c:	f8bc 3000 	ldrh.w	r3, [ip]
 8009070:	fb09 330a 	mla	r3, r9, sl, r3
 8009074:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009078:	42bd      	cmp	r5, r7
 800907a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800907e:	d8e5      	bhi.n	800904c <__multiply+0xfc>
 8009080:	9a01      	ldr	r2, [sp, #4]
 8009082:	50a3      	str	r3, [r4, r2]
 8009084:	3404      	adds	r4, #4
 8009086:	e79f      	b.n	8008fc8 <__multiply+0x78>
 8009088:	3e01      	subs	r6, #1
 800908a:	e7a1      	b.n	8008fd0 <__multiply+0x80>
 800908c:	08009e06 	.word	0x08009e06
 8009090:	08009e28 	.word	0x08009e28

08009094 <__pow5mult>:
 8009094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009098:	4615      	mov	r5, r2
 800909a:	f012 0203 	ands.w	r2, r2, #3
 800909e:	4607      	mov	r7, r0
 80090a0:	460e      	mov	r6, r1
 80090a2:	d007      	beq.n	80090b4 <__pow5mult+0x20>
 80090a4:	4c25      	ldr	r4, [pc, #148]	@ (800913c <__pow5mult+0xa8>)
 80090a6:	3a01      	subs	r2, #1
 80090a8:	2300      	movs	r3, #0
 80090aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090ae:	f7ff fea7 	bl	8008e00 <__multadd>
 80090b2:	4606      	mov	r6, r0
 80090b4:	10ad      	asrs	r5, r5, #2
 80090b6:	d03d      	beq.n	8009134 <__pow5mult+0xa0>
 80090b8:	69fc      	ldr	r4, [r7, #28]
 80090ba:	b97c      	cbnz	r4, 80090dc <__pow5mult+0x48>
 80090bc:	2010      	movs	r0, #16
 80090be:	f7ff fcdb 	bl	8008a78 <malloc>
 80090c2:	4602      	mov	r2, r0
 80090c4:	61f8      	str	r0, [r7, #28]
 80090c6:	b928      	cbnz	r0, 80090d4 <__pow5mult+0x40>
 80090c8:	4b1d      	ldr	r3, [pc, #116]	@ (8009140 <__pow5mult+0xac>)
 80090ca:	481e      	ldr	r0, [pc, #120]	@ (8009144 <__pow5mult+0xb0>)
 80090cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80090d0:	f000 fa90 	bl	80095f4 <__assert_func>
 80090d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090d8:	6004      	str	r4, [r0, #0]
 80090da:	60c4      	str	r4, [r0, #12]
 80090dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80090e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090e4:	b94c      	cbnz	r4, 80090fa <__pow5mult+0x66>
 80090e6:	f240 2171 	movw	r1, #625	@ 0x271
 80090ea:	4638      	mov	r0, r7
 80090ec:	f7ff ff1a 	bl	8008f24 <__i2b>
 80090f0:	2300      	movs	r3, #0
 80090f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80090f6:	4604      	mov	r4, r0
 80090f8:	6003      	str	r3, [r0, #0]
 80090fa:	f04f 0900 	mov.w	r9, #0
 80090fe:	07eb      	lsls	r3, r5, #31
 8009100:	d50a      	bpl.n	8009118 <__pow5mult+0x84>
 8009102:	4631      	mov	r1, r6
 8009104:	4622      	mov	r2, r4
 8009106:	4638      	mov	r0, r7
 8009108:	f7ff ff22 	bl	8008f50 <__multiply>
 800910c:	4631      	mov	r1, r6
 800910e:	4680      	mov	r8, r0
 8009110:	4638      	mov	r0, r7
 8009112:	f7ff fe53 	bl	8008dbc <_Bfree>
 8009116:	4646      	mov	r6, r8
 8009118:	106d      	asrs	r5, r5, #1
 800911a:	d00b      	beq.n	8009134 <__pow5mult+0xa0>
 800911c:	6820      	ldr	r0, [r4, #0]
 800911e:	b938      	cbnz	r0, 8009130 <__pow5mult+0x9c>
 8009120:	4622      	mov	r2, r4
 8009122:	4621      	mov	r1, r4
 8009124:	4638      	mov	r0, r7
 8009126:	f7ff ff13 	bl	8008f50 <__multiply>
 800912a:	6020      	str	r0, [r4, #0]
 800912c:	f8c0 9000 	str.w	r9, [r0]
 8009130:	4604      	mov	r4, r0
 8009132:	e7e4      	b.n	80090fe <__pow5mult+0x6a>
 8009134:	4630      	mov	r0, r6
 8009136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800913a:	bf00      	nop
 800913c:	08009ec8 	.word	0x08009ec8
 8009140:	08009d97 	.word	0x08009d97
 8009144:	08009e28 	.word	0x08009e28

08009148 <__lshift>:
 8009148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800914c:	460c      	mov	r4, r1
 800914e:	6849      	ldr	r1, [r1, #4]
 8009150:	6923      	ldr	r3, [r4, #16]
 8009152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009156:	68a3      	ldr	r3, [r4, #8]
 8009158:	4607      	mov	r7, r0
 800915a:	4691      	mov	r9, r2
 800915c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009160:	f108 0601 	add.w	r6, r8, #1
 8009164:	42b3      	cmp	r3, r6
 8009166:	db0b      	blt.n	8009180 <__lshift+0x38>
 8009168:	4638      	mov	r0, r7
 800916a:	f7ff fde7 	bl	8008d3c <_Balloc>
 800916e:	4605      	mov	r5, r0
 8009170:	b948      	cbnz	r0, 8009186 <__lshift+0x3e>
 8009172:	4602      	mov	r2, r0
 8009174:	4b28      	ldr	r3, [pc, #160]	@ (8009218 <__lshift+0xd0>)
 8009176:	4829      	ldr	r0, [pc, #164]	@ (800921c <__lshift+0xd4>)
 8009178:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800917c:	f000 fa3a 	bl	80095f4 <__assert_func>
 8009180:	3101      	adds	r1, #1
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	e7ee      	b.n	8009164 <__lshift+0x1c>
 8009186:	2300      	movs	r3, #0
 8009188:	f100 0114 	add.w	r1, r0, #20
 800918c:	f100 0210 	add.w	r2, r0, #16
 8009190:	4618      	mov	r0, r3
 8009192:	4553      	cmp	r3, sl
 8009194:	db33      	blt.n	80091fe <__lshift+0xb6>
 8009196:	6920      	ldr	r0, [r4, #16]
 8009198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800919c:	f104 0314 	add.w	r3, r4, #20
 80091a0:	f019 091f 	ands.w	r9, r9, #31
 80091a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091ac:	d02b      	beq.n	8009206 <__lshift+0xbe>
 80091ae:	f1c9 0e20 	rsb	lr, r9, #32
 80091b2:	468a      	mov	sl, r1
 80091b4:	2200      	movs	r2, #0
 80091b6:	6818      	ldr	r0, [r3, #0]
 80091b8:	fa00 f009 	lsl.w	r0, r0, r9
 80091bc:	4310      	orrs	r0, r2
 80091be:	f84a 0b04 	str.w	r0, [sl], #4
 80091c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c6:	459c      	cmp	ip, r3
 80091c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80091cc:	d8f3      	bhi.n	80091b6 <__lshift+0x6e>
 80091ce:	ebac 0304 	sub.w	r3, ip, r4
 80091d2:	3b15      	subs	r3, #21
 80091d4:	f023 0303 	bic.w	r3, r3, #3
 80091d8:	3304      	adds	r3, #4
 80091da:	f104 0015 	add.w	r0, r4, #21
 80091de:	4560      	cmp	r0, ip
 80091e0:	bf88      	it	hi
 80091e2:	2304      	movhi	r3, #4
 80091e4:	50ca      	str	r2, [r1, r3]
 80091e6:	b10a      	cbz	r2, 80091ec <__lshift+0xa4>
 80091e8:	f108 0602 	add.w	r6, r8, #2
 80091ec:	3e01      	subs	r6, #1
 80091ee:	4638      	mov	r0, r7
 80091f0:	612e      	str	r6, [r5, #16]
 80091f2:	4621      	mov	r1, r4
 80091f4:	f7ff fde2 	bl	8008dbc <_Bfree>
 80091f8:	4628      	mov	r0, r5
 80091fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009202:	3301      	adds	r3, #1
 8009204:	e7c5      	b.n	8009192 <__lshift+0x4a>
 8009206:	3904      	subs	r1, #4
 8009208:	f853 2b04 	ldr.w	r2, [r3], #4
 800920c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009210:	459c      	cmp	ip, r3
 8009212:	d8f9      	bhi.n	8009208 <__lshift+0xc0>
 8009214:	e7ea      	b.n	80091ec <__lshift+0xa4>
 8009216:	bf00      	nop
 8009218:	08009e06 	.word	0x08009e06
 800921c:	08009e28 	.word	0x08009e28

08009220 <__mcmp>:
 8009220:	690a      	ldr	r2, [r1, #16]
 8009222:	4603      	mov	r3, r0
 8009224:	6900      	ldr	r0, [r0, #16]
 8009226:	1a80      	subs	r0, r0, r2
 8009228:	b530      	push	{r4, r5, lr}
 800922a:	d10e      	bne.n	800924a <__mcmp+0x2a>
 800922c:	3314      	adds	r3, #20
 800922e:	3114      	adds	r1, #20
 8009230:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009234:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009238:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800923c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009240:	4295      	cmp	r5, r2
 8009242:	d003      	beq.n	800924c <__mcmp+0x2c>
 8009244:	d205      	bcs.n	8009252 <__mcmp+0x32>
 8009246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800924a:	bd30      	pop	{r4, r5, pc}
 800924c:	42a3      	cmp	r3, r4
 800924e:	d3f3      	bcc.n	8009238 <__mcmp+0x18>
 8009250:	e7fb      	b.n	800924a <__mcmp+0x2a>
 8009252:	2001      	movs	r0, #1
 8009254:	e7f9      	b.n	800924a <__mcmp+0x2a>
	...

08009258 <__mdiff>:
 8009258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	4689      	mov	r9, r1
 800925e:	4606      	mov	r6, r0
 8009260:	4611      	mov	r1, r2
 8009262:	4648      	mov	r0, r9
 8009264:	4614      	mov	r4, r2
 8009266:	f7ff ffdb 	bl	8009220 <__mcmp>
 800926a:	1e05      	subs	r5, r0, #0
 800926c:	d112      	bne.n	8009294 <__mdiff+0x3c>
 800926e:	4629      	mov	r1, r5
 8009270:	4630      	mov	r0, r6
 8009272:	f7ff fd63 	bl	8008d3c <_Balloc>
 8009276:	4602      	mov	r2, r0
 8009278:	b928      	cbnz	r0, 8009286 <__mdiff+0x2e>
 800927a:	4b3f      	ldr	r3, [pc, #252]	@ (8009378 <__mdiff+0x120>)
 800927c:	f240 2137 	movw	r1, #567	@ 0x237
 8009280:	483e      	ldr	r0, [pc, #248]	@ (800937c <__mdiff+0x124>)
 8009282:	f000 f9b7 	bl	80095f4 <__assert_func>
 8009286:	2301      	movs	r3, #1
 8009288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800928c:	4610      	mov	r0, r2
 800928e:	b003      	add	sp, #12
 8009290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009294:	bfbc      	itt	lt
 8009296:	464b      	movlt	r3, r9
 8009298:	46a1      	movlt	r9, r4
 800929a:	4630      	mov	r0, r6
 800929c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80092a0:	bfba      	itte	lt
 80092a2:	461c      	movlt	r4, r3
 80092a4:	2501      	movlt	r5, #1
 80092a6:	2500      	movge	r5, #0
 80092a8:	f7ff fd48 	bl	8008d3c <_Balloc>
 80092ac:	4602      	mov	r2, r0
 80092ae:	b918      	cbnz	r0, 80092b8 <__mdiff+0x60>
 80092b0:	4b31      	ldr	r3, [pc, #196]	@ (8009378 <__mdiff+0x120>)
 80092b2:	f240 2145 	movw	r1, #581	@ 0x245
 80092b6:	e7e3      	b.n	8009280 <__mdiff+0x28>
 80092b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80092bc:	6926      	ldr	r6, [r4, #16]
 80092be:	60c5      	str	r5, [r0, #12]
 80092c0:	f109 0310 	add.w	r3, r9, #16
 80092c4:	f109 0514 	add.w	r5, r9, #20
 80092c8:	f104 0e14 	add.w	lr, r4, #20
 80092cc:	f100 0b14 	add.w	fp, r0, #20
 80092d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80092d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	46d9      	mov	r9, fp
 80092dc:	f04f 0c00 	mov.w	ip, #0
 80092e0:	9b01      	ldr	r3, [sp, #4]
 80092e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80092e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80092ea:	9301      	str	r3, [sp, #4]
 80092ec:	fa1f f38a 	uxth.w	r3, sl
 80092f0:	4619      	mov	r1, r3
 80092f2:	b283      	uxth	r3, r0
 80092f4:	1acb      	subs	r3, r1, r3
 80092f6:	0c00      	lsrs	r0, r0, #16
 80092f8:	4463      	add	r3, ip
 80092fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80092fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009302:	b29b      	uxth	r3, r3
 8009304:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009308:	4576      	cmp	r6, lr
 800930a:	f849 3b04 	str.w	r3, [r9], #4
 800930e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009312:	d8e5      	bhi.n	80092e0 <__mdiff+0x88>
 8009314:	1b33      	subs	r3, r6, r4
 8009316:	3b15      	subs	r3, #21
 8009318:	f023 0303 	bic.w	r3, r3, #3
 800931c:	3415      	adds	r4, #21
 800931e:	3304      	adds	r3, #4
 8009320:	42a6      	cmp	r6, r4
 8009322:	bf38      	it	cc
 8009324:	2304      	movcc	r3, #4
 8009326:	441d      	add	r5, r3
 8009328:	445b      	add	r3, fp
 800932a:	461e      	mov	r6, r3
 800932c:	462c      	mov	r4, r5
 800932e:	4544      	cmp	r4, r8
 8009330:	d30e      	bcc.n	8009350 <__mdiff+0xf8>
 8009332:	f108 0103 	add.w	r1, r8, #3
 8009336:	1b49      	subs	r1, r1, r5
 8009338:	f021 0103 	bic.w	r1, r1, #3
 800933c:	3d03      	subs	r5, #3
 800933e:	45a8      	cmp	r8, r5
 8009340:	bf38      	it	cc
 8009342:	2100      	movcc	r1, #0
 8009344:	440b      	add	r3, r1
 8009346:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800934a:	b191      	cbz	r1, 8009372 <__mdiff+0x11a>
 800934c:	6117      	str	r7, [r2, #16]
 800934e:	e79d      	b.n	800928c <__mdiff+0x34>
 8009350:	f854 1b04 	ldr.w	r1, [r4], #4
 8009354:	46e6      	mov	lr, ip
 8009356:	0c08      	lsrs	r0, r1, #16
 8009358:	fa1c fc81 	uxtah	ip, ip, r1
 800935c:	4471      	add	r1, lr
 800935e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009362:	b289      	uxth	r1, r1
 8009364:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009368:	f846 1b04 	str.w	r1, [r6], #4
 800936c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009370:	e7dd      	b.n	800932e <__mdiff+0xd6>
 8009372:	3f01      	subs	r7, #1
 8009374:	e7e7      	b.n	8009346 <__mdiff+0xee>
 8009376:	bf00      	nop
 8009378:	08009e06 	.word	0x08009e06
 800937c:	08009e28 	.word	0x08009e28

08009380 <__d2b>:
 8009380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009384:	460f      	mov	r7, r1
 8009386:	2101      	movs	r1, #1
 8009388:	ec59 8b10 	vmov	r8, r9, d0
 800938c:	4616      	mov	r6, r2
 800938e:	f7ff fcd5 	bl	8008d3c <_Balloc>
 8009392:	4604      	mov	r4, r0
 8009394:	b930      	cbnz	r0, 80093a4 <__d2b+0x24>
 8009396:	4602      	mov	r2, r0
 8009398:	4b23      	ldr	r3, [pc, #140]	@ (8009428 <__d2b+0xa8>)
 800939a:	4824      	ldr	r0, [pc, #144]	@ (800942c <__d2b+0xac>)
 800939c:	f240 310f 	movw	r1, #783	@ 0x30f
 80093a0:	f000 f928 	bl	80095f4 <__assert_func>
 80093a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093ac:	b10d      	cbz	r5, 80093b2 <__d2b+0x32>
 80093ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	f1b8 0300 	subs.w	r3, r8, #0
 80093b8:	d023      	beq.n	8009402 <__d2b+0x82>
 80093ba:	4668      	mov	r0, sp
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	f7ff fd84 	bl	8008eca <__lo0bits>
 80093c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093c6:	b1d0      	cbz	r0, 80093fe <__d2b+0x7e>
 80093c8:	f1c0 0320 	rsb	r3, r0, #32
 80093cc:	fa02 f303 	lsl.w	r3, r2, r3
 80093d0:	430b      	orrs	r3, r1
 80093d2:	40c2      	lsrs	r2, r0
 80093d4:	6163      	str	r3, [r4, #20]
 80093d6:	9201      	str	r2, [sp, #4]
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	61a3      	str	r3, [r4, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	bf0c      	ite	eq
 80093e0:	2201      	moveq	r2, #1
 80093e2:	2202      	movne	r2, #2
 80093e4:	6122      	str	r2, [r4, #16]
 80093e6:	b1a5      	cbz	r5, 8009412 <__d2b+0x92>
 80093e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093ec:	4405      	add	r5, r0
 80093ee:	603d      	str	r5, [r7, #0]
 80093f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093f4:	6030      	str	r0, [r6, #0]
 80093f6:	4620      	mov	r0, r4
 80093f8:	b003      	add	sp, #12
 80093fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093fe:	6161      	str	r1, [r4, #20]
 8009400:	e7ea      	b.n	80093d8 <__d2b+0x58>
 8009402:	a801      	add	r0, sp, #4
 8009404:	f7ff fd61 	bl	8008eca <__lo0bits>
 8009408:	9b01      	ldr	r3, [sp, #4]
 800940a:	6163      	str	r3, [r4, #20]
 800940c:	3020      	adds	r0, #32
 800940e:	2201      	movs	r2, #1
 8009410:	e7e8      	b.n	80093e4 <__d2b+0x64>
 8009412:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009416:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800941a:	6038      	str	r0, [r7, #0]
 800941c:	6918      	ldr	r0, [r3, #16]
 800941e:	f7ff fd35 	bl	8008e8c <__hi0bits>
 8009422:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009426:	e7e5      	b.n	80093f4 <__d2b+0x74>
 8009428:	08009e06 	.word	0x08009e06
 800942c:	08009e28 	.word	0x08009e28

08009430 <__sread>:
 8009430:	b510      	push	{r4, lr}
 8009432:	460c      	mov	r4, r1
 8009434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009438:	f000 f898 	bl	800956c <_read_r>
 800943c:	2800      	cmp	r0, #0
 800943e:	bfab      	itete	ge
 8009440:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009442:	89a3      	ldrhlt	r3, [r4, #12]
 8009444:	181b      	addge	r3, r3, r0
 8009446:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800944a:	bfac      	ite	ge
 800944c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800944e:	81a3      	strhlt	r3, [r4, #12]
 8009450:	bd10      	pop	{r4, pc}

08009452 <__swrite>:
 8009452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009456:	461f      	mov	r7, r3
 8009458:	898b      	ldrh	r3, [r1, #12]
 800945a:	05db      	lsls	r3, r3, #23
 800945c:	4605      	mov	r5, r0
 800945e:	460c      	mov	r4, r1
 8009460:	4616      	mov	r6, r2
 8009462:	d505      	bpl.n	8009470 <__swrite+0x1e>
 8009464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009468:	2302      	movs	r3, #2
 800946a:	2200      	movs	r2, #0
 800946c:	f000 f86c 	bl	8009548 <_lseek_r>
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009476:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800947a:	81a3      	strh	r3, [r4, #12]
 800947c:	4632      	mov	r2, r6
 800947e:	463b      	mov	r3, r7
 8009480:	4628      	mov	r0, r5
 8009482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009486:	f000 b893 	b.w	80095b0 <_write_r>

0800948a <__sseek>:
 800948a:	b510      	push	{r4, lr}
 800948c:	460c      	mov	r4, r1
 800948e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009492:	f000 f859 	bl	8009548 <_lseek_r>
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	bf15      	itete	ne
 800949c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800949e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80094a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094a6:	81a3      	strheq	r3, [r4, #12]
 80094a8:	bf18      	it	ne
 80094aa:	81a3      	strhne	r3, [r4, #12]
 80094ac:	bd10      	pop	{r4, pc}

080094ae <__sclose>:
 80094ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b2:	f000 b88f 	b.w	80095d4 <_close_r>

080094b6 <_realloc_r>:
 80094b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ba:	4607      	mov	r7, r0
 80094bc:	4614      	mov	r4, r2
 80094be:	460d      	mov	r5, r1
 80094c0:	b921      	cbnz	r1, 80094cc <_realloc_r+0x16>
 80094c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094c6:	4611      	mov	r1, r2
 80094c8:	f7ff bb00 	b.w	8008acc <_malloc_r>
 80094cc:	b92a      	cbnz	r2, 80094da <_realloc_r+0x24>
 80094ce:	f000 f8c3 	bl	8009658 <_free_r>
 80094d2:	4625      	mov	r5, r4
 80094d4:	4628      	mov	r0, r5
 80094d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094da:	f000 f919 	bl	8009710 <_malloc_usable_size_r>
 80094de:	4284      	cmp	r4, r0
 80094e0:	4606      	mov	r6, r0
 80094e2:	d802      	bhi.n	80094ea <_realloc_r+0x34>
 80094e4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094e8:	d8f4      	bhi.n	80094d4 <_realloc_r+0x1e>
 80094ea:	4621      	mov	r1, r4
 80094ec:	4638      	mov	r0, r7
 80094ee:	f7ff faed 	bl	8008acc <_malloc_r>
 80094f2:	4680      	mov	r8, r0
 80094f4:	b908      	cbnz	r0, 80094fa <_realloc_r+0x44>
 80094f6:	4645      	mov	r5, r8
 80094f8:	e7ec      	b.n	80094d4 <_realloc_r+0x1e>
 80094fa:	42b4      	cmp	r4, r6
 80094fc:	4622      	mov	r2, r4
 80094fe:	4629      	mov	r1, r5
 8009500:	bf28      	it	cs
 8009502:	4632      	movcs	r2, r6
 8009504:	f7fe faf8 	bl	8007af8 <memcpy>
 8009508:	4629      	mov	r1, r5
 800950a:	4638      	mov	r0, r7
 800950c:	f000 f8a4 	bl	8009658 <_free_r>
 8009510:	e7f1      	b.n	80094f6 <_realloc_r+0x40>

08009512 <memmove>:
 8009512:	4288      	cmp	r0, r1
 8009514:	b510      	push	{r4, lr}
 8009516:	eb01 0402 	add.w	r4, r1, r2
 800951a:	d902      	bls.n	8009522 <memmove+0x10>
 800951c:	4284      	cmp	r4, r0
 800951e:	4623      	mov	r3, r4
 8009520:	d807      	bhi.n	8009532 <memmove+0x20>
 8009522:	1e43      	subs	r3, r0, #1
 8009524:	42a1      	cmp	r1, r4
 8009526:	d008      	beq.n	800953a <memmove+0x28>
 8009528:	f811 2b01 	ldrb.w	r2, [r1], #1
 800952c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009530:	e7f8      	b.n	8009524 <memmove+0x12>
 8009532:	4402      	add	r2, r0
 8009534:	4601      	mov	r1, r0
 8009536:	428a      	cmp	r2, r1
 8009538:	d100      	bne.n	800953c <memmove+0x2a>
 800953a:	bd10      	pop	{r4, pc}
 800953c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009540:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009544:	e7f7      	b.n	8009536 <memmove+0x24>
	...

08009548 <_lseek_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4d07      	ldr	r5, [pc, #28]	@ (8009568 <_lseek_r+0x20>)
 800954c:	4604      	mov	r4, r0
 800954e:	4608      	mov	r0, r1
 8009550:	4611      	mov	r1, r2
 8009552:	2200      	movs	r2, #0
 8009554:	602a      	str	r2, [r5, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	f7f8 fa11 	bl	800197e <_lseek>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d102      	bne.n	8009566 <_lseek_r+0x1e>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b103      	cbz	r3, 8009566 <_lseek_r+0x1e>
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	bd38      	pop	{r3, r4, r5, pc}
 8009568:	20000b40 	.word	0x20000b40

0800956c <_read_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4d07      	ldr	r5, [pc, #28]	@ (800958c <_read_r+0x20>)
 8009570:	4604      	mov	r4, r0
 8009572:	4608      	mov	r0, r1
 8009574:	4611      	mov	r1, r2
 8009576:	2200      	movs	r2, #0
 8009578:	602a      	str	r2, [r5, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	f7f8 f99f 	bl	80018be <_read>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_read_r+0x1e>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	b103      	cbz	r3, 800958a <_read_r+0x1e>
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	20000b40 	.word	0x20000b40

08009590 <_sbrk_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d06      	ldr	r5, [pc, #24]	@ (80095ac <_sbrk_r+0x1c>)
 8009594:	2300      	movs	r3, #0
 8009596:	4604      	mov	r4, r0
 8009598:	4608      	mov	r0, r1
 800959a:	602b      	str	r3, [r5, #0]
 800959c:	f7f8 f9fc 	bl	8001998 <_sbrk>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_sbrk_r+0x1a>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_sbrk_r+0x1a>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	20000b40 	.word	0x20000b40

080095b0 <_write_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4d07      	ldr	r5, [pc, #28]	@ (80095d0 <_write_r+0x20>)
 80095b4:	4604      	mov	r4, r0
 80095b6:	4608      	mov	r0, r1
 80095b8:	4611      	mov	r1, r2
 80095ba:	2200      	movs	r2, #0
 80095bc:	602a      	str	r2, [r5, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	f7f8 f99a 	bl	80018f8 <_write>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d102      	bne.n	80095ce <_write_r+0x1e>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	b103      	cbz	r3, 80095ce <_write_r+0x1e>
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	bd38      	pop	{r3, r4, r5, pc}
 80095d0:	20000b40 	.word	0x20000b40

080095d4 <_close_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	4d06      	ldr	r5, [pc, #24]	@ (80095f0 <_close_r+0x1c>)
 80095d8:	2300      	movs	r3, #0
 80095da:	4604      	mov	r4, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	602b      	str	r3, [r5, #0]
 80095e0:	f7f8 f9a6 	bl	8001930 <_close>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_close_r+0x1a>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_close_r+0x1a>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	20000b40 	.word	0x20000b40

080095f4 <__assert_func>:
 80095f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095f6:	4614      	mov	r4, r2
 80095f8:	461a      	mov	r2, r3
 80095fa:	4b09      	ldr	r3, [pc, #36]	@ (8009620 <__assert_func+0x2c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4605      	mov	r5, r0
 8009600:	68d8      	ldr	r0, [r3, #12]
 8009602:	b14c      	cbz	r4, 8009618 <__assert_func+0x24>
 8009604:	4b07      	ldr	r3, [pc, #28]	@ (8009624 <__assert_func+0x30>)
 8009606:	9100      	str	r1, [sp, #0]
 8009608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800960c:	4906      	ldr	r1, [pc, #24]	@ (8009628 <__assert_func+0x34>)
 800960e:	462b      	mov	r3, r5
 8009610:	f000 f886 	bl	8009720 <fiprintf>
 8009614:	f000 f8a3 	bl	800975e <abort>
 8009618:	4b04      	ldr	r3, [pc, #16]	@ (800962c <__assert_func+0x38>)
 800961a:	461c      	mov	r4, r3
 800961c:	e7f3      	b.n	8009606 <__assert_func+0x12>
 800961e:	bf00      	nop
 8009620:	200003d4 	.word	0x200003d4
 8009624:	08009e8b 	.word	0x08009e8b
 8009628:	08009e98 	.word	0x08009e98
 800962c:	08009ec6 	.word	0x08009ec6

08009630 <_calloc_r>:
 8009630:	b570      	push	{r4, r5, r6, lr}
 8009632:	fba1 5402 	umull	r5, r4, r1, r2
 8009636:	b934      	cbnz	r4, 8009646 <_calloc_r+0x16>
 8009638:	4629      	mov	r1, r5
 800963a:	f7ff fa47 	bl	8008acc <_malloc_r>
 800963e:	4606      	mov	r6, r0
 8009640:	b928      	cbnz	r0, 800964e <_calloc_r+0x1e>
 8009642:	4630      	mov	r0, r6
 8009644:	bd70      	pop	{r4, r5, r6, pc}
 8009646:	220c      	movs	r2, #12
 8009648:	6002      	str	r2, [r0, #0]
 800964a:	2600      	movs	r6, #0
 800964c:	e7f9      	b.n	8009642 <_calloc_r+0x12>
 800964e:	462a      	mov	r2, r5
 8009650:	4621      	mov	r1, r4
 8009652:	f7fe fa17 	bl	8007a84 <memset>
 8009656:	e7f4      	b.n	8009642 <_calloc_r+0x12>

08009658 <_free_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	4605      	mov	r5, r0
 800965c:	2900      	cmp	r1, #0
 800965e:	d041      	beq.n	80096e4 <_free_r+0x8c>
 8009660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009664:	1f0c      	subs	r4, r1, #4
 8009666:	2b00      	cmp	r3, #0
 8009668:	bfb8      	it	lt
 800966a:	18e4      	addlt	r4, r4, r3
 800966c:	f7ff fb5a 	bl	8008d24 <__malloc_lock>
 8009670:	4a1d      	ldr	r2, [pc, #116]	@ (80096e8 <_free_r+0x90>)
 8009672:	6813      	ldr	r3, [r2, #0]
 8009674:	b933      	cbnz	r3, 8009684 <_free_r+0x2c>
 8009676:	6063      	str	r3, [r4, #4]
 8009678:	6014      	str	r4, [r2, #0]
 800967a:	4628      	mov	r0, r5
 800967c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009680:	f7ff bb56 	b.w	8008d30 <__malloc_unlock>
 8009684:	42a3      	cmp	r3, r4
 8009686:	d908      	bls.n	800969a <_free_r+0x42>
 8009688:	6820      	ldr	r0, [r4, #0]
 800968a:	1821      	adds	r1, r4, r0
 800968c:	428b      	cmp	r3, r1
 800968e:	bf01      	itttt	eq
 8009690:	6819      	ldreq	r1, [r3, #0]
 8009692:	685b      	ldreq	r3, [r3, #4]
 8009694:	1809      	addeq	r1, r1, r0
 8009696:	6021      	streq	r1, [r4, #0]
 8009698:	e7ed      	b.n	8009676 <_free_r+0x1e>
 800969a:	461a      	mov	r2, r3
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	b10b      	cbz	r3, 80096a4 <_free_r+0x4c>
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d9fa      	bls.n	800969a <_free_r+0x42>
 80096a4:	6811      	ldr	r1, [r2, #0]
 80096a6:	1850      	adds	r0, r2, r1
 80096a8:	42a0      	cmp	r0, r4
 80096aa:	d10b      	bne.n	80096c4 <_free_r+0x6c>
 80096ac:	6820      	ldr	r0, [r4, #0]
 80096ae:	4401      	add	r1, r0
 80096b0:	1850      	adds	r0, r2, r1
 80096b2:	4283      	cmp	r3, r0
 80096b4:	6011      	str	r1, [r2, #0]
 80096b6:	d1e0      	bne.n	800967a <_free_r+0x22>
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	6053      	str	r3, [r2, #4]
 80096be:	4408      	add	r0, r1
 80096c0:	6010      	str	r0, [r2, #0]
 80096c2:	e7da      	b.n	800967a <_free_r+0x22>
 80096c4:	d902      	bls.n	80096cc <_free_r+0x74>
 80096c6:	230c      	movs	r3, #12
 80096c8:	602b      	str	r3, [r5, #0]
 80096ca:	e7d6      	b.n	800967a <_free_r+0x22>
 80096cc:	6820      	ldr	r0, [r4, #0]
 80096ce:	1821      	adds	r1, r4, r0
 80096d0:	428b      	cmp	r3, r1
 80096d2:	bf04      	itt	eq
 80096d4:	6819      	ldreq	r1, [r3, #0]
 80096d6:	685b      	ldreq	r3, [r3, #4]
 80096d8:	6063      	str	r3, [r4, #4]
 80096da:	bf04      	itt	eq
 80096dc:	1809      	addeq	r1, r1, r0
 80096de:	6021      	streq	r1, [r4, #0]
 80096e0:	6054      	str	r4, [r2, #4]
 80096e2:	e7ca      	b.n	800967a <_free_r+0x22>
 80096e4:	bd38      	pop	{r3, r4, r5, pc}
 80096e6:	bf00      	nop
 80096e8:	20000b3c 	.word	0x20000b3c

080096ec <__ascii_mbtowc>:
 80096ec:	b082      	sub	sp, #8
 80096ee:	b901      	cbnz	r1, 80096f2 <__ascii_mbtowc+0x6>
 80096f0:	a901      	add	r1, sp, #4
 80096f2:	b142      	cbz	r2, 8009706 <__ascii_mbtowc+0x1a>
 80096f4:	b14b      	cbz	r3, 800970a <__ascii_mbtowc+0x1e>
 80096f6:	7813      	ldrb	r3, [r2, #0]
 80096f8:	600b      	str	r3, [r1, #0]
 80096fa:	7812      	ldrb	r2, [r2, #0]
 80096fc:	1e10      	subs	r0, r2, #0
 80096fe:	bf18      	it	ne
 8009700:	2001      	movne	r0, #1
 8009702:	b002      	add	sp, #8
 8009704:	4770      	bx	lr
 8009706:	4610      	mov	r0, r2
 8009708:	e7fb      	b.n	8009702 <__ascii_mbtowc+0x16>
 800970a:	f06f 0001 	mvn.w	r0, #1
 800970e:	e7f8      	b.n	8009702 <__ascii_mbtowc+0x16>

08009710 <_malloc_usable_size_r>:
 8009710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009714:	1f18      	subs	r0, r3, #4
 8009716:	2b00      	cmp	r3, #0
 8009718:	bfbc      	itt	lt
 800971a:	580b      	ldrlt	r3, [r1, r0]
 800971c:	18c0      	addlt	r0, r0, r3
 800971e:	4770      	bx	lr

08009720 <fiprintf>:
 8009720:	b40e      	push	{r1, r2, r3}
 8009722:	b503      	push	{r0, r1, lr}
 8009724:	4601      	mov	r1, r0
 8009726:	ab03      	add	r3, sp, #12
 8009728:	4805      	ldr	r0, [pc, #20]	@ (8009740 <fiprintf+0x20>)
 800972a:	f853 2b04 	ldr.w	r2, [r3], #4
 800972e:	6800      	ldr	r0, [r0, #0]
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	f000 f845 	bl	80097c0 <_vfiprintf_r>
 8009736:	b002      	add	sp, #8
 8009738:	f85d eb04 	ldr.w	lr, [sp], #4
 800973c:	b003      	add	sp, #12
 800973e:	4770      	bx	lr
 8009740:	200003d4 	.word	0x200003d4

08009744 <__ascii_wctomb>:
 8009744:	4603      	mov	r3, r0
 8009746:	4608      	mov	r0, r1
 8009748:	b141      	cbz	r1, 800975c <__ascii_wctomb+0x18>
 800974a:	2aff      	cmp	r2, #255	@ 0xff
 800974c:	d904      	bls.n	8009758 <__ascii_wctomb+0x14>
 800974e:	228a      	movs	r2, #138	@ 0x8a
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009756:	4770      	bx	lr
 8009758:	700a      	strb	r2, [r1, #0]
 800975a:	2001      	movs	r0, #1
 800975c:	4770      	bx	lr

0800975e <abort>:
 800975e:	b508      	push	{r3, lr}
 8009760:	2006      	movs	r0, #6
 8009762:	f000 fa63 	bl	8009c2c <raise>
 8009766:	2001      	movs	r0, #1
 8009768:	f7f8 f89e 	bl	80018a8 <_exit>

0800976c <__sfputc_r>:
 800976c:	6893      	ldr	r3, [r2, #8]
 800976e:	3b01      	subs	r3, #1
 8009770:	2b00      	cmp	r3, #0
 8009772:	b410      	push	{r4}
 8009774:	6093      	str	r3, [r2, #8]
 8009776:	da08      	bge.n	800978a <__sfputc_r+0x1e>
 8009778:	6994      	ldr	r4, [r2, #24]
 800977a:	42a3      	cmp	r3, r4
 800977c:	db01      	blt.n	8009782 <__sfputc_r+0x16>
 800977e:	290a      	cmp	r1, #10
 8009780:	d103      	bne.n	800978a <__sfputc_r+0x1e>
 8009782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009786:	f000 b933 	b.w	80099f0 <__swbuf_r>
 800978a:	6813      	ldr	r3, [r2, #0]
 800978c:	1c58      	adds	r0, r3, #1
 800978e:	6010      	str	r0, [r2, #0]
 8009790:	7019      	strb	r1, [r3, #0]
 8009792:	4608      	mov	r0, r1
 8009794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009798:	4770      	bx	lr

0800979a <__sfputs_r>:
 800979a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979c:	4606      	mov	r6, r0
 800979e:	460f      	mov	r7, r1
 80097a0:	4614      	mov	r4, r2
 80097a2:	18d5      	adds	r5, r2, r3
 80097a4:	42ac      	cmp	r4, r5
 80097a6:	d101      	bne.n	80097ac <__sfputs_r+0x12>
 80097a8:	2000      	movs	r0, #0
 80097aa:	e007      	b.n	80097bc <__sfputs_r+0x22>
 80097ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b0:	463a      	mov	r2, r7
 80097b2:	4630      	mov	r0, r6
 80097b4:	f7ff ffda 	bl	800976c <__sfputc_r>
 80097b8:	1c43      	adds	r3, r0, #1
 80097ba:	d1f3      	bne.n	80097a4 <__sfputs_r+0xa>
 80097bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097c0 <_vfiprintf_r>:
 80097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	460d      	mov	r5, r1
 80097c6:	b09d      	sub	sp, #116	@ 0x74
 80097c8:	4614      	mov	r4, r2
 80097ca:	4698      	mov	r8, r3
 80097cc:	4606      	mov	r6, r0
 80097ce:	b118      	cbz	r0, 80097d8 <_vfiprintf_r+0x18>
 80097d0:	6a03      	ldr	r3, [r0, #32]
 80097d2:	b90b      	cbnz	r3, 80097d8 <_vfiprintf_r+0x18>
 80097d4:	f7fe f920 	bl	8007a18 <__sinit>
 80097d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097da:	07d9      	lsls	r1, r3, #31
 80097dc:	d405      	bmi.n	80097ea <_vfiprintf_r+0x2a>
 80097de:	89ab      	ldrh	r3, [r5, #12]
 80097e0:	059a      	lsls	r2, r3, #22
 80097e2:	d402      	bmi.n	80097ea <_vfiprintf_r+0x2a>
 80097e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097e6:	f7fe f980 	bl	8007aea <__retarget_lock_acquire_recursive>
 80097ea:	89ab      	ldrh	r3, [r5, #12]
 80097ec:	071b      	lsls	r3, r3, #28
 80097ee:	d501      	bpl.n	80097f4 <_vfiprintf_r+0x34>
 80097f0:	692b      	ldr	r3, [r5, #16]
 80097f2:	b99b      	cbnz	r3, 800981c <_vfiprintf_r+0x5c>
 80097f4:	4629      	mov	r1, r5
 80097f6:	4630      	mov	r0, r6
 80097f8:	f000 f938 	bl	8009a6c <__swsetup_r>
 80097fc:	b170      	cbz	r0, 800981c <_vfiprintf_r+0x5c>
 80097fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009800:	07dc      	lsls	r4, r3, #31
 8009802:	d504      	bpl.n	800980e <_vfiprintf_r+0x4e>
 8009804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009808:	b01d      	add	sp, #116	@ 0x74
 800980a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980e:	89ab      	ldrh	r3, [r5, #12]
 8009810:	0598      	lsls	r0, r3, #22
 8009812:	d4f7      	bmi.n	8009804 <_vfiprintf_r+0x44>
 8009814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009816:	f7fe f969 	bl	8007aec <__retarget_lock_release_recursive>
 800981a:	e7f3      	b.n	8009804 <_vfiprintf_r+0x44>
 800981c:	2300      	movs	r3, #0
 800981e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009820:	2320      	movs	r3, #32
 8009822:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009826:	f8cd 800c 	str.w	r8, [sp, #12]
 800982a:	2330      	movs	r3, #48	@ 0x30
 800982c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80099dc <_vfiprintf_r+0x21c>
 8009830:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009834:	f04f 0901 	mov.w	r9, #1
 8009838:	4623      	mov	r3, r4
 800983a:	469a      	mov	sl, r3
 800983c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009840:	b10a      	cbz	r2, 8009846 <_vfiprintf_r+0x86>
 8009842:	2a25      	cmp	r2, #37	@ 0x25
 8009844:	d1f9      	bne.n	800983a <_vfiprintf_r+0x7a>
 8009846:	ebba 0b04 	subs.w	fp, sl, r4
 800984a:	d00b      	beq.n	8009864 <_vfiprintf_r+0xa4>
 800984c:	465b      	mov	r3, fp
 800984e:	4622      	mov	r2, r4
 8009850:	4629      	mov	r1, r5
 8009852:	4630      	mov	r0, r6
 8009854:	f7ff ffa1 	bl	800979a <__sfputs_r>
 8009858:	3001      	adds	r0, #1
 800985a:	f000 80a7 	beq.w	80099ac <_vfiprintf_r+0x1ec>
 800985e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009860:	445a      	add	r2, fp
 8009862:	9209      	str	r2, [sp, #36]	@ 0x24
 8009864:	f89a 3000 	ldrb.w	r3, [sl]
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 809f 	beq.w	80099ac <_vfiprintf_r+0x1ec>
 800986e:	2300      	movs	r3, #0
 8009870:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009878:	f10a 0a01 	add.w	sl, sl, #1
 800987c:	9304      	str	r3, [sp, #16]
 800987e:	9307      	str	r3, [sp, #28]
 8009880:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009884:	931a      	str	r3, [sp, #104]	@ 0x68
 8009886:	4654      	mov	r4, sl
 8009888:	2205      	movs	r2, #5
 800988a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800988e:	4853      	ldr	r0, [pc, #332]	@ (80099dc <_vfiprintf_r+0x21c>)
 8009890:	f7f6 fcbe 	bl	8000210 <memchr>
 8009894:	9a04      	ldr	r2, [sp, #16]
 8009896:	b9d8      	cbnz	r0, 80098d0 <_vfiprintf_r+0x110>
 8009898:	06d1      	lsls	r1, r2, #27
 800989a:	bf44      	itt	mi
 800989c:	2320      	movmi	r3, #32
 800989e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098a2:	0713      	lsls	r3, r2, #28
 80098a4:	bf44      	itt	mi
 80098a6:	232b      	movmi	r3, #43	@ 0x2b
 80098a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098ac:	f89a 3000 	ldrb.w	r3, [sl]
 80098b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80098b2:	d015      	beq.n	80098e0 <_vfiprintf_r+0x120>
 80098b4:	9a07      	ldr	r2, [sp, #28]
 80098b6:	4654      	mov	r4, sl
 80098b8:	2000      	movs	r0, #0
 80098ba:	f04f 0c0a 	mov.w	ip, #10
 80098be:	4621      	mov	r1, r4
 80098c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098c4:	3b30      	subs	r3, #48	@ 0x30
 80098c6:	2b09      	cmp	r3, #9
 80098c8:	d94b      	bls.n	8009962 <_vfiprintf_r+0x1a2>
 80098ca:	b1b0      	cbz	r0, 80098fa <_vfiprintf_r+0x13a>
 80098cc:	9207      	str	r2, [sp, #28]
 80098ce:	e014      	b.n	80098fa <_vfiprintf_r+0x13a>
 80098d0:	eba0 0308 	sub.w	r3, r0, r8
 80098d4:	fa09 f303 	lsl.w	r3, r9, r3
 80098d8:	4313      	orrs	r3, r2
 80098da:	9304      	str	r3, [sp, #16]
 80098dc:	46a2      	mov	sl, r4
 80098de:	e7d2      	b.n	8009886 <_vfiprintf_r+0xc6>
 80098e0:	9b03      	ldr	r3, [sp, #12]
 80098e2:	1d19      	adds	r1, r3, #4
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	9103      	str	r1, [sp, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bfbb      	ittet	lt
 80098ec:	425b      	neglt	r3, r3
 80098ee:	f042 0202 	orrlt.w	r2, r2, #2
 80098f2:	9307      	strge	r3, [sp, #28]
 80098f4:	9307      	strlt	r3, [sp, #28]
 80098f6:	bfb8      	it	lt
 80098f8:	9204      	strlt	r2, [sp, #16]
 80098fa:	7823      	ldrb	r3, [r4, #0]
 80098fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80098fe:	d10a      	bne.n	8009916 <_vfiprintf_r+0x156>
 8009900:	7863      	ldrb	r3, [r4, #1]
 8009902:	2b2a      	cmp	r3, #42	@ 0x2a
 8009904:	d132      	bne.n	800996c <_vfiprintf_r+0x1ac>
 8009906:	9b03      	ldr	r3, [sp, #12]
 8009908:	1d1a      	adds	r2, r3, #4
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	9203      	str	r2, [sp, #12]
 800990e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009912:	3402      	adds	r4, #2
 8009914:	9305      	str	r3, [sp, #20]
 8009916:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80099ec <_vfiprintf_r+0x22c>
 800991a:	7821      	ldrb	r1, [r4, #0]
 800991c:	2203      	movs	r2, #3
 800991e:	4650      	mov	r0, sl
 8009920:	f7f6 fc76 	bl	8000210 <memchr>
 8009924:	b138      	cbz	r0, 8009936 <_vfiprintf_r+0x176>
 8009926:	9b04      	ldr	r3, [sp, #16]
 8009928:	eba0 000a 	sub.w	r0, r0, sl
 800992c:	2240      	movs	r2, #64	@ 0x40
 800992e:	4082      	lsls	r2, r0
 8009930:	4313      	orrs	r3, r2
 8009932:	3401      	adds	r4, #1
 8009934:	9304      	str	r3, [sp, #16]
 8009936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800993a:	4829      	ldr	r0, [pc, #164]	@ (80099e0 <_vfiprintf_r+0x220>)
 800993c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009940:	2206      	movs	r2, #6
 8009942:	f7f6 fc65 	bl	8000210 <memchr>
 8009946:	2800      	cmp	r0, #0
 8009948:	d03f      	beq.n	80099ca <_vfiprintf_r+0x20a>
 800994a:	4b26      	ldr	r3, [pc, #152]	@ (80099e4 <_vfiprintf_r+0x224>)
 800994c:	bb1b      	cbnz	r3, 8009996 <_vfiprintf_r+0x1d6>
 800994e:	9b03      	ldr	r3, [sp, #12]
 8009950:	3307      	adds	r3, #7
 8009952:	f023 0307 	bic.w	r3, r3, #7
 8009956:	3308      	adds	r3, #8
 8009958:	9303      	str	r3, [sp, #12]
 800995a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800995c:	443b      	add	r3, r7
 800995e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009960:	e76a      	b.n	8009838 <_vfiprintf_r+0x78>
 8009962:	fb0c 3202 	mla	r2, ip, r2, r3
 8009966:	460c      	mov	r4, r1
 8009968:	2001      	movs	r0, #1
 800996a:	e7a8      	b.n	80098be <_vfiprintf_r+0xfe>
 800996c:	2300      	movs	r3, #0
 800996e:	3401      	adds	r4, #1
 8009970:	9305      	str	r3, [sp, #20]
 8009972:	4619      	mov	r1, r3
 8009974:	f04f 0c0a 	mov.w	ip, #10
 8009978:	4620      	mov	r0, r4
 800997a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800997e:	3a30      	subs	r2, #48	@ 0x30
 8009980:	2a09      	cmp	r2, #9
 8009982:	d903      	bls.n	800998c <_vfiprintf_r+0x1cc>
 8009984:	2b00      	cmp	r3, #0
 8009986:	d0c6      	beq.n	8009916 <_vfiprintf_r+0x156>
 8009988:	9105      	str	r1, [sp, #20]
 800998a:	e7c4      	b.n	8009916 <_vfiprintf_r+0x156>
 800998c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009990:	4604      	mov	r4, r0
 8009992:	2301      	movs	r3, #1
 8009994:	e7f0      	b.n	8009978 <_vfiprintf_r+0x1b8>
 8009996:	ab03      	add	r3, sp, #12
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	462a      	mov	r2, r5
 800999c:	4b12      	ldr	r3, [pc, #72]	@ (80099e8 <_vfiprintf_r+0x228>)
 800999e:	a904      	add	r1, sp, #16
 80099a0:	4630      	mov	r0, r6
 80099a2:	f7fd fbc1 	bl	8007128 <_printf_float>
 80099a6:	4607      	mov	r7, r0
 80099a8:	1c78      	adds	r0, r7, #1
 80099aa:	d1d6      	bne.n	800995a <_vfiprintf_r+0x19a>
 80099ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099ae:	07d9      	lsls	r1, r3, #31
 80099b0:	d405      	bmi.n	80099be <_vfiprintf_r+0x1fe>
 80099b2:	89ab      	ldrh	r3, [r5, #12]
 80099b4:	059a      	lsls	r2, r3, #22
 80099b6:	d402      	bmi.n	80099be <_vfiprintf_r+0x1fe>
 80099b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099ba:	f7fe f897 	bl	8007aec <__retarget_lock_release_recursive>
 80099be:	89ab      	ldrh	r3, [r5, #12]
 80099c0:	065b      	lsls	r3, r3, #25
 80099c2:	f53f af1f 	bmi.w	8009804 <_vfiprintf_r+0x44>
 80099c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099c8:	e71e      	b.n	8009808 <_vfiprintf_r+0x48>
 80099ca:	ab03      	add	r3, sp, #12
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	462a      	mov	r2, r5
 80099d0:	4b05      	ldr	r3, [pc, #20]	@ (80099e8 <_vfiprintf_r+0x228>)
 80099d2:	a904      	add	r1, sp, #16
 80099d4:	4630      	mov	r0, r6
 80099d6:	f7fd fe3f 	bl	8007658 <_printf_i>
 80099da:	e7e4      	b.n	80099a6 <_vfiprintf_r+0x1e6>
 80099dc:	08009e17 	.word	0x08009e17
 80099e0:	08009e21 	.word	0x08009e21
 80099e4:	08007129 	.word	0x08007129
 80099e8:	0800979b 	.word	0x0800979b
 80099ec:	08009e1d 	.word	0x08009e1d

080099f0 <__swbuf_r>:
 80099f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f2:	460e      	mov	r6, r1
 80099f4:	4614      	mov	r4, r2
 80099f6:	4605      	mov	r5, r0
 80099f8:	b118      	cbz	r0, 8009a02 <__swbuf_r+0x12>
 80099fa:	6a03      	ldr	r3, [r0, #32]
 80099fc:	b90b      	cbnz	r3, 8009a02 <__swbuf_r+0x12>
 80099fe:	f7fe f80b 	bl	8007a18 <__sinit>
 8009a02:	69a3      	ldr	r3, [r4, #24]
 8009a04:	60a3      	str	r3, [r4, #8]
 8009a06:	89a3      	ldrh	r3, [r4, #12]
 8009a08:	071a      	lsls	r2, r3, #28
 8009a0a:	d501      	bpl.n	8009a10 <__swbuf_r+0x20>
 8009a0c:	6923      	ldr	r3, [r4, #16]
 8009a0e:	b943      	cbnz	r3, 8009a22 <__swbuf_r+0x32>
 8009a10:	4621      	mov	r1, r4
 8009a12:	4628      	mov	r0, r5
 8009a14:	f000 f82a 	bl	8009a6c <__swsetup_r>
 8009a18:	b118      	cbz	r0, 8009a22 <__swbuf_r+0x32>
 8009a1a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009a1e:	4638      	mov	r0, r7
 8009a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	6922      	ldr	r2, [r4, #16]
 8009a26:	1a98      	subs	r0, r3, r2
 8009a28:	6963      	ldr	r3, [r4, #20]
 8009a2a:	b2f6      	uxtb	r6, r6
 8009a2c:	4283      	cmp	r3, r0
 8009a2e:	4637      	mov	r7, r6
 8009a30:	dc05      	bgt.n	8009a3e <__swbuf_r+0x4e>
 8009a32:	4621      	mov	r1, r4
 8009a34:	4628      	mov	r0, r5
 8009a36:	f7ff f94d 	bl	8008cd4 <_fflush_r>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d1ed      	bne.n	8009a1a <__swbuf_r+0x2a>
 8009a3e:	68a3      	ldr	r3, [r4, #8]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	60a3      	str	r3, [r4, #8]
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	6022      	str	r2, [r4, #0]
 8009a4a:	701e      	strb	r6, [r3, #0]
 8009a4c:	6962      	ldr	r2, [r4, #20]
 8009a4e:	1c43      	adds	r3, r0, #1
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d004      	beq.n	8009a5e <__swbuf_r+0x6e>
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	07db      	lsls	r3, r3, #31
 8009a58:	d5e1      	bpl.n	8009a1e <__swbuf_r+0x2e>
 8009a5a:	2e0a      	cmp	r6, #10
 8009a5c:	d1df      	bne.n	8009a1e <__swbuf_r+0x2e>
 8009a5e:	4621      	mov	r1, r4
 8009a60:	4628      	mov	r0, r5
 8009a62:	f7ff f937 	bl	8008cd4 <_fflush_r>
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d0d9      	beq.n	8009a1e <__swbuf_r+0x2e>
 8009a6a:	e7d6      	b.n	8009a1a <__swbuf_r+0x2a>

08009a6c <__swsetup_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4b29      	ldr	r3, [pc, #164]	@ (8009b14 <__swsetup_r+0xa8>)
 8009a70:	4605      	mov	r5, r0
 8009a72:	6818      	ldr	r0, [r3, #0]
 8009a74:	460c      	mov	r4, r1
 8009a76:	b118      	cbz	r0, 8009a80 <__swsetup_r+0x14>
 8009a78:	6a03      	ldr	r3, [r0, #32]
 8009a7a:	b90b      	cbnz	r3, 8009a80 <__swsetup_r+0x14>
 8009a7c:	f7fd ffcc 	bl	8007a18 <__sinit>
 8009a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a84:	0719      	lsls	r1, r3, #28
 8009a86:	d422      	bmi.n	8009ace <__swsetup_r+0x62>
 8009a88:	06da      	lsls	r2, r3, #27
 8009a8a:	d407      	bmi.n	8009a9c <__swsetup_r+0x30>
 8009a8c:	2209      	movs	r2, #9
 8009a8e:	602a      	str	r2, [r5, #0]
 8009a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a94:	81a3      	strh	r3, [r4, #12]
 8009a96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a9a:	e033      	b.n	8009b04 <__swsetup_r+0x98>
 8009a9c:	0758      	lsls	r0, r3, #29
 8009a9e:	d512      	bpl.n	8009ac6 <__swsetup_r+0x5a>
 8009aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009aa2:	b141      	cbz	r1, 8009ab6 <__swsetup_r+0x4a>
 8009aa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009aa8:	4299      	cmp	r1, r3
 8009aaa:	d002      	beq.n	8009ab2 <__swsetup_r+0x46>
 8009aac:	4628      	mov	r0, r5
 8009aae:	f7ff fdd3 	bl	8009658 <_free_r>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ab6:	89a3      	ldrh	r3, [r4, #12]
 8009ab8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009abc:	81a3      	strh	r3, [r4, #12]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	6063      	str	r3, [r4, #4]
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	f043 0308 	orr.w	r3, r3, #8
 8009acc:	81a3      	strh	r3, [r4, #12]
 8009ace:	6923      	ldr	r3, [r4, #16]
 8009ad0:	b94b      	cbnz	r3, 8009ae6 <__swsetup_r+0x7a>
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009adc:	d003      	beq.n	8009ae6 <__swsetup_r+0x7a>
 8009ade:	4621      	mov	r1, r4
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	f000 f83f 	bl	8009b64 <__smakebuf_r>
 8009ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aea:	f013 0201 	ands.w	r2, r3, #1
 8009aee:	d00a      	beq.n	8009b06 <__swsetup_r+0x9a>
 8009af0:	2200      	movs	r2, #0
 8009af2:	60a2      	str	r2, [r4, #8]
 8009af4:	6962      	ldr	r2, [r4, #20]
 8009af6:	4252      	negs	r2, r2
 8009af8:	61a2      	str	r2, [r4, #24]
 8009afa:	6922      	ldr	r2, [r4, #16]
 8009afc:	b942      	cbnz	r2, 8009b10 <__swsetup_r+0xa4>
 8009afe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b02:	d1c5      	bne.n	8009a90 <__swsetup_r+0x24>
 8009b04:	bd38      	pop	{r3, r4, r5, pc}
 8009b06:	0799      	lsls	r1, r3, #30
 8009b08:	bf58      	it	pl
 8009b0a:	6962      	ldrpl	r2, [r4, #20]
 8009b0c:	60a2      	str	r2, [r4, #8]
 8009b0e:	e7f4      	b.n	8009afa <__swsetup_r+0x8e>
 8009b10:	2000      	movs	r0, #0
 8009b12:	e7f7      	b.n	8009b04 <__swsetup_r+0x98>
 8009b14:	200003d4 	.word	0x200003d4

08009b18 <__swhatbuf_r>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b20:	2900      	cmp	r1, #0
 8009b22:	b096      	sub	sp, #88	@ 0x58
 8009b24:	4615      	mov	r5, r2
 8009b26:	461e      	mov	r6, r3
 8009b28:	da0d      	bge.n	8009b46 <__swhatbuf_r+0x2e>
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b30:	f04f 0100 	mov.w	r1, #0
 8009b34:	bf14      	ite	ne
 8009b36:	2340      	movne	r3, #64	@ 0x40
 8009b38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	6031      	str	r1, [r6, #0]
 8009b40:	602b      	str	r3, [r5, #0]
 8009b42:	b016      	add	sp, #88	@ 0x58
 8009b44:	bd70      	pop	{r4, r5, r6, pc}
 8009b46:	466a      	mov	r2, sp
 8009b48:	f000 f89c 	bl	8009c84 <_fstat_r>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	dbec      	blt.n	8009b2a <__swhatbuf_r+0x12>
 8009b50:	9901      	ldr	r1, [sp, #4]
 8009b52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b5a:	4259      	negs	r1, r3
 8009b5c:	4159      	adcs	r1, r3
 8009b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b62:	e7eb      	b.n	8009b3c <__swhatbuf_r+0x24>

08009b64 <__smakebuf_r>:
 8009b64:	898b      	ldrh	r3, [r1, #12]
 8009b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b68:	079d      	lsls	r5, r3, #30
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	d507      	bpl.n	8009b80 <__smakebuf_r+0x1c>
 8009b70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	6123      	str	r3, [r4, #16]
 8009b78:	2301      	movs	r3, #1
 8009b7a:	6163      	str	r3, [r4, #20]
 8009b7c:	b003      	add	sp, #12
 8009b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b80:	ab01      	add	r3, sp, #4
 8009b82:	466a      	mov	r2, sp
 8009b84:	f7ff ffc8 	bl	8009b18 <__swhatbuf_r>
 8009b88:	9f00      	ldr	r7, [sp, #0]
 8009b8a:	4605      	mov	r5, r0
 8009b8c:	4639      	mov	r1, r7
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f7fe ff9c 	bl	8008acc <_malloc_r>
 8009b94:	b948      	cbnz	r0, 8009baa <__smakebuf_r+0x46>
 8009b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b9a:	059a      	lsls	r2, r3, #22
 8009b9c:	d4ee      	bmi.n	8009b7c <__smakebuf_r+0x18>
 8009b9e:	f023 0303 	bic.w	r3, r3, #3
 8009ba2:	f043 0302 	orr.w	r3, r3, #2
 8009ba6:	81a3      	strh	r3, [r4, #12]
 8009ba8:	e7e2      	b.n	8009b70 <__smakebuf_r+0xc>
 8009baa:	89a3      	ldrh	r3, [r4, #12]
 8009bac:	6020      	str	r0, [r4, #0]
 8009bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bb2:	81a3      	strh	r3, [r4, #12]
 8009bb4:	9b01      	ldr	r3, [sp, #4]
 8009bb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bba:	b15b      	cbz	r3, 8009bd4 <__smakebuf_r+0x70>
 8009bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f000 f83b 	bl	8009c3c <_isatty_r>
 8009bc6:	b128      	cbz	r0, 8009bd4 <__smakebuf_r+0x70>
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	f023 0303 	bic.w	r3, r3, #3
 8009bce:	f043 0301 	orr.w	r3, r3, #1
 8009bd2:	81a3      	strh	r3, [r4, #12]
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	431d      	orrs	r5, r3
 8009bd8:	81a5      	strh	r5, [r4, #12]
 8009bda:	e7cf      	b.n	8009b7c <__smakebuf_r+0x18>

08009bdc <_raise_r>:
 8009bdc:	291f      	cmp	r1, #31
 8009bde:	b538      	push	{r3, r4, r5, lr}
 8009be0:	4605      	mov	r5, r0
 8009be2:	460c      	mov	r4, r1
 8009be4:	d904      	bls.n	8009bf0 <_raise_r+0x14>
 8009be6:	2316      	movs	r3, #22
 8009be8:	6003      	str	r3, [r0, #0]
 8009bea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
 8009bf0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009bf2:	b112      	cbz	r2, 8009bfa <_raise_r+0x1e>
 8009bf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bf8:	b94b      	cbnz	r3, 8009c0e <_raise_r+0x32>
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f000 f840 	bl	8009c80 <_getpid_r>
 8009c00:	4622      	mov	r2, r4
 8009c02:	4601      	mov	r1, r0
 8009c04:	4628      	mov	r0, r5
 8009c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c0a:	f000 b827 	b.w	8009c5c <_kill_r>
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d00a      	beq.n	8009c28 <_raise_r+0x4c>
 8009c12:	1c59      	adds	r1, r3, #1
 8009c14:	d103      	bne.n	8009c1e <_raise_r+0x42>
 8009c16:	2316      	movs	r3, #22
 8009c18:	6003      	str	r3, [r0, #0]
 8009c1a:	2001      	movs	r0, #1
 8009c1c:	e7e7      	b.n	8009bee <_raise_r+0x12>
 8009c1e:	2100      	movs	r1, #0
 8009c20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c24:	4620      	mov	r0, r4
 8009c26:	4798      	blx	r3
 8009c28:	2000      	movs	r0, #0
 8009c2a:	e7e0      	b.n	8009bee <_raise_r+0x12>

08009c2c <raise>:
 8009c2c:	4b02      	ldr	r3, [pc, #8]	@ (8009c38 <raise+0xc>)
 8009c2e:	4601      	mov	r1, r0
 8009c30:	6818      	ldr	r0, [r3, #0]
 8009c32:	f7ff bfd3 	b.w	8009bdc <_raise_r>
 8009c36:	bf00      	nop
 8009c38:	200003d4 	.word	0x200003d4

08009c3c <_isatty_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d06      	ldr	r5, [pc, #24]	@ (8009c58 <_isatty_r+0x1c>)
 8009c40:	2300      	movs	r3, #0
 8009c42:	4604      	mov	r4, r0
 8009c44:	4608      	mov	r0, r1
 8009c46:	602b      	str	r3, [r5, #0]
 8009c48:	f7f7 fe8e 	bl	8001968 <_isatty>
 8009c4c:	1c43      	adds	r3, r0, #1
 8009c4e:	d102      	bne.n	8009c56 <_isatty_r+0x1a>
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	b103      	cbz	r3, 8009c56 <_isatty_r+0x1a>
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	bd38      	pop	{r3, r4, r5, pc}
 8009c58:	20000b40 	.word	0x20000b40

08009c5c <_kill_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	4d07      	ldr	r5, [pc, #28]	@ (8009c7c <_kill_r+0x20>)
 8009c60:	2300      	movs	r3, #0
 8009c62:	4604      	mov	r4, r0
 8009c64:	4608      	mov	r0, r1
 8009c66:	4611      	mov	r1, r2
 8009c68:	602b      	str	r3, [r5, #0]
 8009c6a:	f7f7 fe0d 	bl	8001888 <_kill>
 8009c6e:	1c43      	adds	r3, r0, #1
 8009c70:	d102      	bne.n	8009c78 <_kill_r+0x1c>
 8009c72:	682b      	ldr	r3, [r5, #0]
 8009c74:	b103      	cbz	r3, 8009c78 <_kill_r+0x1c>
 8009c76:	6023      	str	r3, [r4, #0]
 8009c78:	bd38      	pop	{r3, r4, r5, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000b40 	.word	0x20000b40

08009c80 <_getpid_r>:
 8009c80:	f7f7 bdfa 	b.w	8001878 <_getpid>

08009c84 <_fstat_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	4d07      	ldr	r5, [pc, #28]	@ (8009ca4 <_fstat_r+0x20>)
 8009c88:	2300      	movs	r3, #0
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	4608      	mov	r0, r1
 8009c8e:	4611      	mov	r1, r2
 8009c90:	602b      	str	r3, [r5, #0]
 8009c92:	f7f7 fe59 	bl	8001948 <_fstat>
 8009c96:	1c43      	adds	r3, r0, #1
 8009c98:	d102      	bne.n	8009ca0 <_fstat_r+0x1c>
 8009c9a:	682b      	ldr	r3, [r5, #0]
 8009c9c:	b103      	cbz	r3, 8009ca0 <_fstat_r+0x1c>
 8009c9e:	6023      	str	r3, [r4, #0]
 8009ca0:	bd38      	pop	{r3, r4, r5, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20000b40 	.word	0x20000b40

08009ca8 <_init>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	bf00      	nop
 8009cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cae:	bc08      	pop	{r3}
 8009cb0:	469e      	mov	lr, r3
 8009cb2:	4770      	bx	lr

08009cb4 <_fini>:
 8009cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb6:	bf00      	nop
 8009cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cba:	bc08      	pop	{r3}
 8009cbc:	469e      	mov	lr, r3
 8009cbe:	4770      	bx	lr
