
self-balancing-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08011278  08011278  00012278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117f8  080117f8  00013594  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080117f8  080117f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011800  08011800  00013594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011800  08011800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011804  08011804  00012804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000594  20000000  08011808  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000940  20000594  08011d9c  00013594  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ed4  08011d9c  00013ed4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013594  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de7e  00000000  00000000  000135c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a86  00000000  00000000  00031442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00035ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122d  00000000  00000000  00037620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291f7  00000000  00000000  0003884d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023918  00000000  00000000  00061a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6e38  00000000  00000000  0008535c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c194  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000769c  00000000  00000000  0016c1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00173874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000594 	.word	0x20000594
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011260 	.word	0x08011260

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000598 	.word	0x20000598
 800020c:	08011260 	.word	0x08011260

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <MX_ADC1_Init+0x9c>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_ADC1_Init+0x98>)
 800109a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800109e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c2:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <MX_ADC1_Init+0xa0>)
 80010c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010dc:	2201      	movs	r2, #1
 80010de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_ADC1_Init+0x98>)
 80010e2:	f004 fb9d 	bl	8005820 <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010ec:	f000 fc39 	bl	8001962 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010f0:	2309      	movs	r3, #9
 80010f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_ADC1_Init+0x98>)
 8001102:	f004 fd6f 	bl	8005be4 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800110c:	f000 fc29 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200005b0 	.word	0x200005b0
 800111c:	40012000 	.word	0x40012000
 8001120:	0f000001 	.word	0x0f000001

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <HAL_ADC_MspInit+0x7c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d127      	bne.n	8001196 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a15      	ldr	r2, [pc, #84]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_ADC_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 800117e:	2302      	movs	r3, #2
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <HAL_ADC_MspInit+0x84>)
 8001192:	f005 fc75 	bl	8006a80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40012000 	.word	0x40012000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <MX_DMA_Init+0x68>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a16      	ldr	r2, [pc, #88]	@ (8001214 <MX_DMA_Init+0x68>)
 80011bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <MX_DMA_Init+0x68>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_DMA_Init+0x68>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <MX_DMA_Init+0x68>)
 80011d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <MX_DMA_Init+0x68>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	200b      	movs	r0, #11
 80011f0:	f005 f801 	bl	80061f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011f4:	200b      	movs	r0, #11
 80011f6:	f005 f81a 	bl	800622e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2039      	movs	r0, #57	@ 0x39
 8001200:	f004 fff9 	bl	80061f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001204:	2039      	movs	r0, #57	@ 0x39
 8001206:	f005 f812 	bl	800622e <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b73      	ldr	r3, [pc, #460]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a72      	ldr	r2, [pc, #456]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b70      	ldr	r3, [pc, #448]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b6c      	ldr	r3, [pc, #432]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a6b      	ldr	r2, [pc, #428]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b69      	ldr	r3, [pc, #420]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b65      	ldr	r3, [pc, #404]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a64      	ldr	r2, [pc, #400]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b62      	ldr	r3, [pc, #392]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b5e      	ldr	r3, [pc, #376]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a5d      	ldr	r2, [pc, #372]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b5b      	ldr	r3, [pc, #364]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4b57      	ldr	r3, [pc, #348]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a56      	ldr	r2, [pc, #344]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b54      	ldr	r3, [pc, #336]	@ (8001400 <MX_GPIO_Init+0x1e8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2130      	movs	r1, #48	@ 0x30
 80012be:	4851      	ldr	r0, [pc, #324]	@ (8001404 <MX_GPIO_Init+0x1ec>)
 80012c0:	f005 fd8a 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_DIR_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2111      	movs	r1, #17
 80012c8:	484f      	ldr	r0, [pc, #316]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 80012ca:	f005 fd85 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BTN2_GPIO_Port, LED_BTN2_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012d4:	484d      	ldr	r0, [pc, #308]	@ (800140c <MX_GPIO_Init+0x1f4>)
 80012d6:	f005 fd7f 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4846      	ldr	r0, [pc, #280]	@ (800140c <MX_GPIO_Init+0x1f4>)
 80012f2:	f005 fbc5 	bl	8006a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC8 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80012f6:	f641 531d 	movw	r3, #7453	@ 0x1d1d
 80012fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	2303      	movs	r3, #3
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4840      	ldr	r0, [pc, #256]	@ (800140c <MX_GPIO_Init+0x1f4>)
 800130c:	f005 fbb8 	bl	8006a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_DIR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|LD2_Pin;
 8001310:	2330      	movs	r3, #48	@ 0x30
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4837      	ldr	r0, [pc, #220]	@ (8001404 <MX_GPIO_Init+0x1ec>)
 8001328:	f005 fbaa 	bl	8006a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 800132c:	2320      	movs	r3, #32
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001330:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4832      	ldr	r0, [pc, #200]	@ (800140c <MX_GPIO_Init+0x1f4>)
 8001342:	f005 fb9d 	bl	8006a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	482a      	ldr	r0, [pc, #168]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 800135e:	f005 fb8f 	bl	8006a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001362:	f24f 0324 	movw	r3, #61476	@ 0xf024
 8001366:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001368:	2303      	movs	r3, #3
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4824      	ldr	r0, [pc, #144]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 8001378:	f005 fb82 	bl	8006a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BTN2_Pin */
  GPIO_InitStruct.Pin = LED_BTN2_Pin;
 800137c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BTN2_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	481d      	ldr	r0, [pc, #116]	@ (800140c <MX_GPIO_Init+0x1f4>)
 8001396:	f005 fb73 	bl	8006a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800139a:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 800139e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a0:	2303      	movs	r3, #3
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4815      	ldr	r0, [pc, #84]	@ (8001404 <MX_GPIO_Init+0x1ec>)
 80013b0:	f005 fb66 	bl	8006a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013b4:	2304      	movs	r3, #4
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	2303      	movs	r3, #3
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4812      	ldr	r0, [pc, #72]	@ (8001410 <MX_GPIO_Init+0x1f8>)
 80013c8:	f005 fb5a 	bl	8006a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 80013cc:	2310      	movs	r3, #16
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4809      	ldr	r0, [pc, #36]	@ (8001408 <MX_GPIO_Init+0x1f0>)
 80013e4:	f005 fb4c 	bl	8006a80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2017      	movs	r0, #23
 80013ee:	f004 ff02 	bl	80061f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013f2:	2017      	movs	r0, #23
 80013f4:	f004 ff1b 	bl	800622e <HAL_NVIC_EnableIRQ>

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	@ 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00

08001414 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_I2C1_Init+0x50>)
 800141a:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <MX_I2C1_Init+0x54>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <MX_I2C1_Init+0x58>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001432:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001436:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_I2C1_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_I2C1_Init+0x50>)
 8001452:	f005 fd0d 	bl	8006e70 <HAL_I2C_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800145c:	f000 fa81 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200005f8 	.word	0x200005f8
 8001468:	40005400 	.word	0x40005400
 800146c:	000186a0 	.word	0x000186a0

08001470 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a30      	ldr	r2, [pc, #192]	@ (8001550 <HAL_I2C_MspInit+0xe0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d15a      	bne.n	8001548 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b2f      	ldr	r3, [pc, #188]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a2e      	ldr	r2, [pc, #184]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 80014ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b4:	2312      	movs	r3, #18
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c0:	2304      	movs	r3, #4
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4823      	ldr	r0, [pc, #140]	@ (8001558 <HAL_I2C_MspInit+0xe8>)
 80014cc:	f005 fad8 	bl	8006a80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014de:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <HAL_I2C_MspInit+0xe4>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_I2C_MspInit+0xec>)
 80014ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001560 <HAL_I2C_MspInit+0xf0>)
 80014f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <HAL_I2C_MspInit+0xec>)
 80014f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014f8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <HAL_I2C_MspInit+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001500:	4b16      	ldr	r3, [pc, #88]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001508:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800150c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <HAL_I2C_MspInit+0xec>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001520:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <HAL_I2C_MspInit+0xec>)
 800152e:	f004 fe99 	bl	8006264 <HAL_DMA_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001538:	f000 fa13 	bl	8001962 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a07      	ldr	r2, [pc, #28]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001540:	639a      	str	r2, [r3, #56]	@ 0x38
 8001542:	4a06      	ldr	r2, [pc, #24]	@ (800155c <HAL_I2C_MspInit+0xec>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40005400 	.word	0x40005400
 8001554:	40023800 	.word	0x40023800
 8001558:	40020400 	.word	0x40020400
 800155c:	2000064c 	.word	0x2000064c
 8001560:	40026010 	.word	0x40026010

08001564 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800156c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001570:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800157c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001580:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001584:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00b      	beq.n	80015a4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800158c:	e000      	b.n	8001590 <ITM_SendChar+0x2c>
    {
      __NOP();
 800158e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001590:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f9      	beq.n	800158e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800159a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ba:	f004 f89b 	bl	80056f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015be:	f000 f88d 	bl	80016dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c2:	f7ff fe29 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 80015c6:	f7ff fdf1 	bl	80011ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015ca:	f001 f88f 	bl	80026ec <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80015ce:	f000 fd1d 	bl	800200c <MX_TIM4_Init>
  MX_TIM6_Init();
 80015d2:	f000 fdef 	bl	80021b4 <MX_TIM6_Init>
  MX_SPI2_Init();
 80015d6:	f000 f9cb 	bl	8001970 <MX_SPI2_Init>
  MX_TIM2_Init();
 80015da:	f000 fc45 	bl	8001e68 <MX_TIM2_Init>
  MX_TIM7_Init();
 80015de:	f000 fe1f 	bl	8002220 <MX_TIM7_Init>
  MX_TIM3_Init();
 80015e2:	f000 fc99 	bl	8001f18 <MX_TIM3_Init>
  MX_TIM5_Init();
 80015e6:	f000 fd8b 	bl	8002100 <MX_TIM5_Init>
  MX_ADC1_Init();
 80015ea:	f7ff fd49 	bl	8001080 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015ee:	f7ff ff11 	bl	8001414 <MX_I2C1_Init>
  MX_TIM10_Init();
 80015f2:	f000 fe9d 	bl	8002330 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 80015f6:	f001 f8a3 	bl	8002740 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80015fa:	f000 fbe5 	bl	8001dc8 <MX_TIM1_Init>
  MX_TIM8_Init();
 80015fe:	f000 fe45 	bl	800228c <MX_TIM8_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(50);
 8001602:	2032      	movs	r0, #50	@ 0x32
 8001604:	f004 f8e8 	bl	80057d8 <HAL_Delay>
  Robot_init(&robot);
 8001608:	4829      	ldr	r0, [pc, #164]	@ (80016b0 <main+0xfc>)
 800160a:	f002 f88f 	bl	800372c <Robot_init>
//  MAX72_Add_Data(&display, &data);

//  display_data_t data2 = {&encoder_r.speed, PRINT_FLOAT, MINIDIGITS, DISPLAY_TYPE_FLOAT, 3};
//  MAX72_Add_Data(&display, &data2);

  display_data_t data3 = {&imu.angle, PRINT_FLOAT, FLOAT, DISPLAY_TYPE_FLOAT, 2};
 800160e:	4a29      	ldr	r2, [pc, #164]	@ (80016b4 <main+0x100>)
 8001610:	463b      	mov	r3, r7
 8001612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001616:	e883 0003 	stmia.w	r3, {r0, r1}
  MAX72_Add_Data(&display, &data3);
 800161a:	463b      	mov	r3, r7
 800161c:	4619      	mov	r1, r3
 800161e:	4826      	ldr	r0, [pc, #152]	@ (80016b8 <main+0x104>)
 8001620:	f002 fdbd 	bl	800419e <MAX72_Add_Data>

//  display_data_t data4 = {&power_module.voltage, PRINT_FLOAT, NO_SETTINGS, DISPLAY_TYPE_FLOAT, 2};
//  MAX72_Add_Data(&display, &data4);

  HAL_UART_Receive_DMA(&huart6, (uint8_t*)js_buffer, 14);
 8001624:	220e      	movs	r2, #14
 8001626:	4925      	ldr	r1, [pc, #148]	@ (80016bc <main+0x108>)
 8001628:	4825      	ldr	r0, [pc, #148]	@ (80016c0 <main+0x10c>)
 800162a:	f009 fc6b 	bl	800af04 <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (IMU_Rx_Cplt) {
 800162e:	4b25      	ldr	r3, [pc, #148]	@ (80016c4 <main+0x110>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <main+0x8e>
		  IMU_Rx_Cplt = 0; // Reset flag
 8001636:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <main+0x110>)
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
		  IMU_Compute_Data(&imu); // Process received data
 800163c:	4822      	ldr	r0, [pc, #136]	@ (80016c8 <main+0x114>)
 800163e:	f001 fdb7 	bl	80031b0 <IMU_Compute_Data>
	  }

	  if (js_msg_ready) {
 8001642:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <main+0x118>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <main+0x9c>
		  js_msg_ready = 0; // Reset flag
 800164a:	4b20      	ldr	r3, [pc, #128]	@ (80016cc <main+0x118>)
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
//		  }
//		  Robot_read_serial_msg(&robot, js_buffer);
	  }

	  static uint8_t last_cnt = 255;
	  if (last_cnt != tim6_update_cnt) { // Update every 100ms
 8001650:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <main+0x11c>)
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <main+0x120>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d0e8      	beq.n	800162e <main+0x7a>
	      last_cnt = tim6_update_cnt;
 800165c:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <main+0x120>)
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <main+0x11c>)
 8001662:	701a      	strb	r2, [r3, #0]

	      //TODO Activate
//	      PowerModule_update_data(&power_module);

	      MAX72_Update_Data(&display);
 8001664:	4814      	ldr	r0, [pc, #80]	@ (80016b8 <main+0x104>)
 8001666:	f002 fdc5 	bl	80041f4 <MAX72_Update_Data>
	      if (tim6_update_cnt % 5 == 0) { // Update every 500ms
 800166a:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <main+0x120>)
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <main+0x124>)
 8001670:	fba3 1302 	umull	r1, r3, r3, r2
 8001674:	0899      	lsrs	r1, r3, #2
 8001676:	460b      	mov	r3, r1
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d111      	bne.n	80016a8 <main+0xf4>

	    	  // Send IMU data via UART for debugging
//	    	  transmit_IMU_data();
//			  show_calibration_messages();

	    	  if (tim6_update_cnt % 10 == 0) { // Every 1 second
 8001684:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <main+0x120>)
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <main+0x124>)
 800168a:	fba3 1302 	umull	r1, r3, r3, r2
 800168e:	08d9      	lsrs	r1, r3, #3
 8001690:	460b      	mov	r3, r1
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <main+0xf4>
	    		  MAX72_Change_Data(&display,0);
 80016a0:	2100      	movs	r1, #0
 80016a2:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <main+0x104>)
 80016a4:	f002 fea6 	bl	80043f4 <MAX72_Change_Data>
	    	  }
	      }

	      MAX72_Scroll_Process(); // Process scrolling text
 80016a8:	f003 fbca 	bl	8004e40 <MAX72_Scroll_Process>
  {
 80016ac:	e7bf      	b.n	800162e <main+0x7a>
 80016ae:	bf00      	nop
 80016b0:	200006c0 	.word	0x200006c0
 80016b4:	08011300 	.word	0x08011300
 80016b8:	20000d08 	.word	0x20000d08
 80016bc:	200006b0 	.word	0x200006b0
 80016c0:	20000a0c 	.word	0x20000a0c
 80016c4:	200006ad 	.word	0x200006ad
 80016c8:	20000bc8 	.word	0x20000bc8
 80016cc:	200006bf 	.word	0x200006bf
 80016d0:	20000000 	.word	0x20000000
 80016d4:	200006ac 	.word	0x200006ac
 80016d8:	cccccccd 	.word	0xcccccccd

080016dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b094      	sub	sp, #80	@ 0x50
 80016e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	2234      	movs	r2, #52	@ 0x34
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f00c fb24 	bl	800dd38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	4b2a      	ldr	r3, [pc, #168]	@ (80017b0 <SystemClock_Config+0xd4>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	4a29      	ldr	r2, [pc, #164]	@ (80017b0 <SystemClock_Config+0xd4>)
 800170a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800170e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001710:	4b27      	ldr	r3, [pc, #156]	@ (80017b0 <SystemClock_Config+0xd4>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800171c:	2300      	movs	r3, #0
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <SystemClock_Config+0xd8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001728:	4a22      	ldr	r2, [pc, #136]	@ (80017b4 <SystemClock_Config+0xd8>)
 800172a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <SystemClock_Config+0xd8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001740:	2301      	movs	r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001744:	2310      	movs	r3, #16
 8001746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001748:	2302      	movs	r3, #2
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800174c:	2300      	movs	r3, #0
 800174e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001750:	2310      	movs	r3, #16
 8001752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001754:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001758:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800175a:	2304      	movs	r3, #4
 800175c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800175e:	2302      	movs	r3, #2
 8001760:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001762:	2302      	movs	r3, #2
 8001764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4618      	mov	r0, r3
 800176c:	f007 f9c2 	bl	8008af4 <HAL_RCC_OscConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001776:	f000 f8f4 	bl	8001962 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	230f      	movs	r3, #15
 800177c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177e:	2302      	movs	r3, #2
 8001780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001786:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	2102      	movs	r1, #2
 8001796:	4618      	mov	r0, r3
 8001798:	f006 fe62 	bl	8008460 <HAL_RCC_ClockConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80017a2:	f000 f8de 	bl	8001962 <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	3750      	adds	r7, #80	@ 0x50
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a18      	ldr	r2, [pc, #96]	@ (8001828 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10d      	bne.n	80017e6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		tim6_update_cnt++;
 80017ca:	4b18      	ldr	r3, [pc, #96]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017d4:	701a      	strb	r2, [r3, #0]
		if (tim6_update_cnt == 250){
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2bfa      	cmp	r3, #250	@ 0xfa
 80017dc:	d11f      	bne.n	800181e <HAL_TIM_PeriodElapsedCallback+0x66>
			tim6_update_cnt = 0;
 80017de:	4b13      	ldr	r3, [pc, #76]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		speed_control(&stepper_l);
	} else if (htim->Instance == TIM10){
		// Read from IMU
		IMU_ReadData(&imu);
	}
}
 80017e4:	e01b      	b.n	800181e <HAL_TIM_PeriodElapsedCallback+0x66>
	} else if (htim->Instance == TIM7) {
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a11      	ldr	r2, [pc, #68]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d10e      	bne.n	800180e <HAL_TIM_PeriodElapsedCallback+0x56>
    if (pid.active){
 80017f0:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80017f2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_TIM_PeriodElapsedCallback+0x48>
      PID_Update(&pid);
 80017fa:	480e      	ldr	r0, [pc, #56]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80017fc:	f002 f894 	bl	8003928 <PID_Update>
		speed_control(&stepper_r);
 8001800:	480d      	ldr	r0, [pc, #52]	@ (8001838 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001802:	f002 fa99 	bl	8003d38 <speed_control>
		speed_control(&stepper_l);
 8001806:	480d      	ldr	r0, [pc, #52]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001808:	f002 fa96 	bl	8003d38 <speed_control>
}
 800180c:	e007      	b.n	800181e <HAL_TIM_PeriodElapsedCallback+0x66>
	} else if (htim->Instance == TIM10){
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a0b      	ldr	r2, [pc, #44]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d102      	bne.n	800181e <HAL_TIM_PeriodElapsedCallback+0x66>
		IMU_ReadData(&imu);
 8001818:	480a      	ldr	r0, [pc, #40]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800181a:	f001 fcb2 	bl	8003182 <IMU_ReadData>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40001000 	.word	0x40001000
 800182c:	200006ac 	.word	0x200006ac
 8001830:	40001400 	.word	0x40001400
 8001834:	20000cb8 	.word	0x20000cb8
 8001838:	20000b20 	.word	0x20000b20
 800183c:	20000ba4 	.word	0x20000ba4
 8001840:	40014400 	.word	0x40014400
 8001844:	20000bc8 	.word	0x20000bc8

08001848 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a18      	ldr	r2, [pc, #96]	@ (80018b8 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d112      	bne.n	8001880 <HAL_TIM_OC_DelayElapsedCallback+0x38>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7f1b      	ldrb	r3, [r3, #28]
 800185e:	2b04      	cmp	r3, #4
 8001860:	d10e      	bne.n	8001880 <HAL_TIM_OC_DelayElapsedCallback+0x38>
    {
    	Encoder_event(&encoder_l);
 8001862:	4816      	ldr	r0, [pc, #88]	@ (80018bc <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001864:	f001 fb74 	bl	8002f50 <Encoder_event>
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, !htim->Instance->CCR3);  // per ogni tick
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	b2da      	uxtb	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	63da      	str	r2, [r3, #60]	@ 0x3c
    } else if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
	{
    	Encoder_event(&encoder_r);
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, !htim->Instance->CCR3);  // per ogni tick
	}
}
 800187e:	e016      	b.n	80018ae <HAL_TIM_OC_DelayElapsedCallback+0x66>
    } else if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0e      	ldr	r2, [pc, #56]	@ (80018c0 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d111      	bne.n	80018ae <HAL_TIM_OC_DelayElapsedCallback+0x66>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7f1b      	ldrb	r3, [r3, #28]
 800188e:	2b04      	cmp	r3, #4
 8001890:	d10d      	bne.n	80018ae <HAL_TIM_OC_DelayElapsedCallback+0x66>
    	Encoder_event(&encoder_r);
 8001892:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8001894:	f001 fb5c 	bl	8002f50 <Encoder_event>
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, !htim->Instance->CCR3);  // per ogni tick
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf0c      	ite	eq
 80018a2:	2301      	moveq	r3, #1
 80018a4:	2300      	movne	r3, #0
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40000400 	.word	0x40000400
 80018bc:	20000b44 	.word	0x20000b44
 80018c0:	40000800 	.word	0x40000800
 80018c4:	20000ac0 	.word	0x20000ac0

080018c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_5) {
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	2b20      	cmp	r3, #32
 80018d6:	d101      	bne.n	80018dc <HAL_GPIO_EXTI_Callback+0x14>
    on_click();
 80018d8:	f001 f814 	bl	8002904 <on_click>
  }
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	if (hi2c == imu.hi2c) {
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_I2C_MemRxCpltCallback+0x24>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d102      	bne.n	80018fc <HAL_I2C_MemRxCpltCallback+0x18>
		// Data received from IMU, process it
		IMU_Rx_Cplt = 1; // Set flag to indicate data is ready
 80018f6:	4b05      	ldr	r3, [pc, #20]	@ (800190c <HAL_I2C_MemRxCpltCallback+0x28>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
	}
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	20000bc8 	.word	0x20000bc8
 800190c:	200006ad 	.word	0x200006ad

08001910 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a07      	ldr	r2, [pc, #28]	@ (800193c <HAL_UART_RxCpltCallback+0x2c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d105      	bne.n	800192e <HAL_UART_RxCpltCallback+0x1e>

			js_buffer[14] = '\0';     // chiudi stringa
 8001922:	4b07      	ldr	r3, [pc, #28]	@ (8001940 <HAL_UART_RxCpltCallback+0x30>)
 8001924:	2200      	movs	r2, #0
 8001926:	739a      	strb	r2, [r3, #14]
			js_msg_ready = 1;         // segnala che il messaggio è pronto
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_UART_RxCpltCallback+0x34>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
	}
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40011400 	.word	0x40011400
 8001940:	200006b0 	.word	0x200006b0
 8001944:	200006bf 	.word	0x200006bf

08001948 <__io_putchar>:

 int __io_putchar(int ch){
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 	ITM_SendChar(ch);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fe06 	bl	8001564 <ITM_SendChar>
 	return ch;
 8001958:	687b      	ldr	r3, [r7, #4]
 }
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001966:	b672      	cpsid	i
}
 8001968:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800196a:	bf00      	nop
 800196c:	e7fd      	b.n	800196a <Error_Handler+0x8>
	...

08001970 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001974:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <MX_SPI2_Init+0x68>)
 8001976:	4a19      	ldr	r2, [pc, #100]	@ (80019dc <MX_SPI2_Init+0x6c>)
 8001978:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800197a:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <MX_SPI2_Init+0x68>)
 800197c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001980:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <MX_SPI2_Init+0x68>)
 8001984:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001988:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800198a:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <MX_SPI2_Init+0x68>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <MX_SPI2_Init+0x68>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <MX_SPI2_Init+0x68>)
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800199c:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <MX_SPI2_Init+0x68>)
 800199e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019a2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <MX_SPI2_Init+0x68>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <MX_SPI2_Init+0x68>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <MX_SPI2_Init+0x68>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <MX_SPI2_Init+0x68>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <MX_SPI2_Init+0x68>)
 80019be:	220a      	movs	r2, #10
 80019c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <MX_SPI2_Init+0x68>)
 80019c4:	f007 fb34 	bl	8009030 <HAL_SPI_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80019ce:	f7ff ffc8 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200006e0 	.word	0x200006e0
 80019dc:	40003800 	.word	0x40003800

080019e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	@ 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a28      	ldr	r2, [pc, #160]	@ (8001aa0 <HAL_SPI_MspInit+0xc0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d14a      	bne.n	8001a98 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <HAL_SPI_MspInit+0xc4>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	4a26      	ldr	r2, [pc, #152]	@ (8001aa4 <HAL_SPI_MspInit+0xc4>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a12:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_SPI_MspInit+0xc4>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <HAL_SPI_MspInit+0xc4>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa4 <HAL_SPI_MspInit+0xc4>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <HAL_SPI_MspInit+0xc4>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <HAL_SPI_MspInit+0xc4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a18      	ldr	r2, [pc, #96]	@ (8001aa4 <HAL_SPI_MspInit+0xc4>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <HAL_SPI_MspInit+0xc4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a56:	2302      	movs	r3, #2
 8001a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001a66:	2307      	movs	r3, #7
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480d      	ldr	r0, [pc, #52]	@ (8001aa8 <HAL_SPI_MspInit+0xc8>)
 8001a72:	f005 f805 	bl	8006a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 8001a76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a88:	2305      	movs	r3, #5
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	@ (8001aac <HAL_SPI_MspInit+0xcc>)
 8001a94:	f004 fff4 	bl	8006a80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	@ 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40003800 	.word	0x40003800
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020400 	.word	0x40020400

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	4a0f      	ldr	r2, [pc, #60]	@ (8001afc <HAL_MspInit+0x4c>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <HAL_MspInit+0x4c>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	4a08      	ldr	r2, [pc, #32]	@ (8001afc <HAL_MspInit+0x4c>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_MspInit+0x4c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aee:	2007      	movs	r0, #7
 8001af0:	f004 fb76 	bl	80061e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <NMI_Handler+0x4>

08001b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <HardFault_Handler+0x4>

08001b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <MemManage_Handler+0x4>

08001b18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b56:	f003 fe1f 	bl	8005798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b64:	4802      	ldr	r0, [pc, #8]	@ (8001b70 <DMA1_Stream0_IRQHandler+0x10>)
 8001b66:	f004 fd15 	bl	8006594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000064c 	.word	0x2000064c

08001b74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001b78:	2020      	movs	r0, #32
 8001b7a:	f005 f961 	bl	8006e40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b88:	4803      	ldr	r0, [pc, #12]	@ (8001b98 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001b8a:	f008 f9ff 	bl	8009f8c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001b8e:	4803      	ldr	r0, [pc, #12]	@ (8001b9c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001b90:	f008 f9fc 	bl	8009f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000073c 	.word	0x2000073c
 8001b9c:	2000097c 	.word	0x2000097c

08001ba0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <TIM3_IRQHandler+0x10>)
 8001ba6:	f008 f9f1 	bl	8009f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200007cc 	.word	0x200007cc

08001bb4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bb8:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <TIM4_IRQHandler+0x10>)
 8001bba:	f008 f9e7 	bl	8009f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000814 	.word	0x20000814

08001bc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bcc:	4802      	ldr	r0, [pc, #8]	@ (8001bd8 <TIM6_DAC_IRQHandler+0x10>)
 8001bce:	f008 f9dd 	bl	8009f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200008a4 	.word	0x200008a4

08001bdc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <TIM7_IRQHandler+0x10>)
 8001be2:	f008 f9d3 	bl	8009f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200008ec 	.word	0x200008ec

08001bf0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001bf4:	4802      	ldr	r0, [pc, #8]	@ (8001c00 <DMA2_Stream1_IRQHandler+0x10>)
 8001bf6:	f004 fccd 	bl	8006594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000a54 	.word	0x20000a54

08001c04 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <USART6_IRQHandler+0x10>)
 8001c0a:	f009 f9a1 	bl	800af50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000a0c 	.word	0x20000a0c

08001c18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return 1;
 8001c1c:	2301      	movs	r3, #1
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_kill>:

int _kill(int pid, int sig)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c32:	f00c f8d1 	bl	800ddd8 <__errno>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2216      	movs	r2, #22
 8001c3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_exit>:

void _exit (int status)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ffe7 	bl	8001c28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c5a:	bf00      	nop
 8001c5c:	e7fd      	b.n	8001c5a <_exit+0x12>

08001c5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e00a      	b.n	8001c86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c70:	f3af 8000 	nop.w
 8001c74:	4601      	mov	r1, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	60ba      	str	r2, [r7, #8]
 8001c7c:	b2ca      	uxtb	r2, r1
 8001c7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dbf0      	blt.n	8001c70 <_read+0x12>
  }

  return len;
 8001c8e:	687b      	ldr	r3, [r7, #4]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e009      	b.n	8001cbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	60ba      	str	r2, [r7, #8]
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fe48 	bl	8001948 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dbf1      	blt.n	8001caa <_write+0x12>
  }
  return len;
 8001cc6:	687b      	ldr	r3, [r7, #4]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_close>:

int _close(int file)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf8:	605a      	str	r2, [r3, #4]
  return 0;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_isatty>:

int _isatty(int file)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	@ (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f00c f836 	bl	800ddd8 <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20020000 	.word	0x20020000
 8001d98:	00000400 	.word	0x00000400
 8001d9c:	20000738 	.word	0x20000738
 8001da0:	20000ed8 	.word	0x20000ed8

08001da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <SystemInit+0x20>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dae:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <SystemInit+0x20>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ddc:	463b      	mov	r3, r7
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001de4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <MX_TIM1_Init+0x98>)
 8001de6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e64 <MX_TIM1_Init+0x9c>)
 8001de8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001dea:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <MX_TIM1_Init+0x98>)
 8001dec:	2253      	movs	r2, #83	@ 0x53
 8001dee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <MX_TIM1_Init+0x98>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <MX_TIM1_Init+0x98>)
 8001df8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b18      	ldr	r3, [pc, #96]	@ (8001e60 <MX_TIM1_Init+0x98>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e04:	4b16      	ldr	r3, [pc, #88]	@ (8001e60 <MX_TIM1_Init+0x98>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <MX_TIM1_Init+0x98>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e10:	4813      	ldr	r0, [pc, #76]	@ (8001e60 <MX_TIM1_Init+0x98>)
 8001e12:	f007 fbb7 	bl	8009584 <HAL_TIM_Base_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e1c:	f7ff fda1 	bl	8001962 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480c      	ldr	r0, [pc, #48]	@ (8001e60 <MX_TIM1_Init+0x98>)
 8001e2e:	f008 fabb 	bl	800a3a8 <HAL_TIM_ConfigClockSource>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e38:	f7ff fd93 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e44:	463b      	mov	r3, r7
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_TIM1_Init+0x98>)
 8001e4a:	f008 ff7b 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e54:	f7ff fd85 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2000073c 	.word	0x2000073c
 8001e64:	40010000 	.word	0x40010000

08001e68 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	@ 0x28
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6e:	f107 0320 	add.w	r3, r7, #32
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]
 8001e86:	615a      	str	r2, [r3, #20]
 8001e88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e8a:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <MX_TIM2_Init+0xac>)
 8001e8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e92:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <MX_TIM2_Init+0xac>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <MX_TIM2_Init+0xac>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <MX_TIM2_Init+0xac>)
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <MX_TIM2_Init+0xac>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <MX_TIM2_Init+0xac>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001eb2:	4818      	ldr	r0, [pc, #96]	@ (8001f14 <MX_TIM2_Init+0xac>)
 8001eb4:	f007 fdf4 	bl	8009aa0 <HAL_TIM_PWM_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001ebe:	f7ff fd50 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eca:	f107 0320 	add.w	r3, r7, #32
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4810      	ldr	r0, [pc, #64]	@ (8001f14 <MX_TIM2_Init+0xac>)
 8001ed2:	f008 ff37 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001edc:	f7ff fd41 	bl	8001962 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee0:	2360      	movs	r3, #96	@ 0x60
 8001ee2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4807      	ldr	r0, [pc, #28]	@ (8001f14 <MX_TIM2_Init+0xac>)
 8001ef8:	f008 f994 	bl	800a224 <HAL_TIM_PWM_ConfigChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f02:	f7ff fd2e 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f06:	4803      	ldr	r0, [pc, #12]	@ (8001f14 <MX_TIM2_Init+0xac>)
 8001f08:	f000 fb92 	bl	8002630 <HAL_TIM_MspPostInit>

}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	@ 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000784 	.word	0x20000784

08001f18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b092      	sub	sp, #72	@ 0x48
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f22:	2224      	movs	r2, #36	@ 0x24
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f00b ff06 	bl	800dd38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f36:	463b      	mov	r3, r7
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
 8001f44:	615a      	str	r2, [r3, #20]
 8001f46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f48:	4b2e      	ldr	r3, [pc, #184]	@ (8002004 <MX_TIM3_Init+0xec>)
 8001f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002008 <MX_TIM3_Init+0xf0>)
 8001f4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <MX_TIM3_Init+0xec>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f54:	4b2b      	ldr	r3, [pc, #172]	@ (8002004 <MX_TIM3_Init+0xec>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002004 <MX_TIM3_Init+0xec>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f60:	4b28      	ldr	r3, [pc, #160]	@ (8002004 <MX_TIM3_Init+0xec>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f66:	4b27      	ldr	r3, [pc, #156]	@ (8002004 <MX_TIM3_Init+0xec>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001f6c:	4825      	ldr	r0, [pc, #148]	@ (8002004 <MX_TIM3_Init+0xec>)
 8001f6e:	f007 fc31 	bl	80097d4 <HAL_TIM_OC_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001f78:	f7ff fcf3 	bl	8001962 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f84:	2301      	movs	r3, #1
 8001f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f90:	2300      	movs	r3, #0
 8001f92:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f94:	2301      	movs	r3, #1
 8001f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4817      	ldr	r0, [pc, #92]	@ (8002004 <MX_TIM3_Init+0xec>)
 8001fa8:	f007 fe92 	bl	8009cd0 <HAL_TIM_Encoder_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001fb2:	f7ff fcd6 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480f      	ldr	r0, [pc, #60]	@ (8002004 <MX_TIM3_Init+0xec>)
 8001fc6:	f008 febd 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8001fd0:	f7ff fcc7 	bl	8001962 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001fd4:	2310      	movs	r3, #16
 8001fd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4806      	ldr	r0, [pc, #24]	@ (8002004 <MX_TIM3_Init+0xec>)
 8001fec:	f008 f8be 	bl	800a16c <HAL_TIM_OC_ConfigChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8001ff6:	f7ff fcb4 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	3748      	adds	r7, #72	@ 0x48
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200007cc 	.word	0x200007cc
 8002008:	40000400 	.word	0x40000400

0800200c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b092      	sub	sp, #72	@ 0x48
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002016:	2224      	movs	r2, #36	@ 0x24
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f00b fe8c 	bl	800dd38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800202a:	463b      	mov	r3, r7
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
 8002038:	615a      	str	r2, [r3, #20]
 800203a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800203c:	4b2e      	ldr	r3, [pc, #184]	@ (80020f8 <MX_TIM4_Init+0xec>)
 800203e:	4a2f      	ldr	r2, [pc, #188]	@ (80020fc <MX_TIM4_Init+0xf0>)
 8002040:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002042:	4b2d      	ldr	r3, [pc, #180]	@ (80020f8 <MX_TIM4_Init+0xec>)
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002048:	4b2b      	ldr	r3, [pc, #172]	@ (80020f8 <MX_TIM4_Init+0xec>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 800204e:	4b2a      	ldr	r3, [pc, #168]	@ (80020f8 <MX_TIM4_Init+0xec>)
 8002050:	2201      	movs	r2, #1
 8002052:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002054:	4b28      	ldr	r3, [pc, #160]	@ (80020f8 <MX_TIM4_Init+0xec>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205a:	4b27      	ldr	r3, [pc, #156]	@ (80020f8 <MX_TIM4_Init+0xec>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002060:	4825      	ldr	r0, [pc, #148]	@ (80020f8 <MX_TIM4_Init+0xec>)
 8002062:	f007 fbb7 	bl	80097d4 <HAL_TIM_OC_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800206c:	f7ff fc79 	bl	8001962 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002070:	2303      	movs	r3, #3
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002074:	2300      	movs	r3, #0
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002078:	2301      	movs	r3, #1
 800207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800207c:	2300      	movs	r3, #0
 800207e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002084:	2300      	movs	r3, #0
 8002086:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002088:	2301      	movs	r3, #1
 800208a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800208c:	2300      	movs	r3, #0
 800208e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	4817      	ldr	r0, [pc, #92]	@ (80020f8 <MX_TIM4_Init+0xec>)
 800209c:	f007 fe18 	bl	8009cd0 <HAL_TIM_Encoder_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80020a6:	f7ff fc5c 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	4619      	mov	r1, r3
 80020b8:	480f      	ldr	r0, [pc, #60]	@ (80020f8 <MX_TIM4_Init+0xec>)
 80020ba:	f008 fe43 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM4_Init+0xbc>
  {
    Error_Handler();
 80020c4:	f7ff fc4d 	bl	8001962 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80020c8:	2310      	movs	r3, #16
 80020ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	2208      	movs	r2, #8
 80020dc:	4619      	mov	r1, r3
 80020de:	4806      	ldr	r0, [pc, #24]	@ (80020f8 <MX_TIM4_Init+0xec>)
 80020e0:	f008 f844 	bl	800a16c <HAL_TIM_OC_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 80020ea:	f7ff fc3a 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	3748      	adds	r7, #72	@ 0x48
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000814 	.word	0x20000814
 80020fc:	40000800 	.word	0x40000800

08002100 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	@ 0x28
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002106:	f107 0320 	add.w	r3, r7, #32
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]
 800211e:	615a      	str	r2, [r3, #20]
 8002120:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002122:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <MX_TIM5_Init+0xac>)
 8002124:	4a22      	ldr	r2, [pc, #136]	@ (80021b0 <MX_TIM5_Init+0xb0>)
 8002126:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002128:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <MX_TIM5_Init+0xac>)
 800212a:	2200      	movs	r2, #0
 800212c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212e:	4b1f      	ldr	r3, [pc, #124]	@ (80021ac <MX_TIM5_Init+0xac>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002134:	4b1d      	ldr	r3, [pc, #116]	@ (80021ac <MX_TIM5_Init+0xac>)
 8002136:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800213a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <MX_TIM5_Init+0xac>)
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002142:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <MX_TIM5_Init+0xac>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002148:	4818      	ldr	r0, [pc, #96]	@ (80021ac <MX_TIM5_Init+0xac>)
 800214a:	f007 fca9 	bl	8009aa0 <HAL_TIM_PWM_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002154:	f7ff fc05 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002160:	f107 0320 	add.w	r3, r7, #32
 8002164:	4619      	mov	r1, r3
 8002166:	4811      	ldr	r0, [pc, #68]	@ (80021ac <MX_TIM5_Init+0xac>)
 8002168:	f008 fdec 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002172:	f7ff fbf6 	bl	8001962 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002176:	2360      	movs	r3, #96	@ 0x60
 8002178:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	2200      	movs	r2, #0
 800218a:	4619      	mov	r1, r3
 800218c:	4807      	ldr	r0, [pc, #28]	@ (80021ac <MX_TIM5_Init+0xac>)
 800218e:	f008 f849 	bl	800a224 <HAL_TIM_PWM_ConfigChannel>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002198:	f7ff fbe3 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800219c:	4803      	ldr	r0, [pc, #12]	@ (80021ac <MX_TIM5_Init+0xac>)
 800219e:	f000 fa47 	bl	8002630 <HAL_TIM_MspPostInit>

}
 80021a2:	bf00      	nop
 80021a4:	3728      	adds	r7, #40	@ 0x28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2000085c 	.word	0x2000085c
 80021b0:	40000c00 	.word	0x40000c00

080021b4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ba:	463b      	mov	r3, r7
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80021c2:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <MX_TIM6_Init+0x64>)
 80021c4:	4a15      	ldr	r2, [pc, #84]	@ (800221c <MX_TIM6_Init+0x68>)
 80021c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <MX_TIM6_Init+0x64>)
 80021ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <MX_TIM6_Init+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <MX_TIM6_Init+0x64>)
 80021d8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80021dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <MX_TIM6_Init+0x64>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021e4:	480c      	ldr	r0, [pc, #48]	@ (8002218 <MX_TIM6_Init+0x64>)
 80021e6:	f007 f9cd 	bl	8009584 <HAL_TIM_Base_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80021f0:	f7ff fbb7 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f4:	2300      	movs	r3, #0
 80021f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021fc:	463b      	mov	r3, r7
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	@ (8002218 <MX_TIM6_Init+0x64>)
 8002202:	f008 fd9f 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800220c:	f7ff fba9 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200008a4 	.word	0x200008a4
 800221c:	40001000 	.word	0x40001000

08002220 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002226:	463b      	mov	r3, r7
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800222e:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <MX_TIM7_Init+0x64>)
 8002230:	4a15      	ldr	r2, [pc, #84]	@ (8002288 <MX_TIM7_Init+0x68>)
 8002232:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 99;
 8002234:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <MX_TIM7_Init+0x64>)
 8002236:	2263      	movs	r2, #99	@ 0x63
 8002238:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <MX_TIM7_Init+0x64>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8002240:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <MX_TIM7_Init+0x64>)
 8002242:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002246:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002248:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <MX_TIM7_Init+0x64>)
 800224a:	2200      	movs	r2, #0
 800224c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800224e:	480d      	ldr	r0, [pc, #52]	@ (8002284 <MX_TIM7_Init+0x64>)
 8002250:	f007 f998 	bl	8009584 <HAL_TIM_Base_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800225a:	f7ff fb82 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002266:	463b      	mov	r3, r7
 8002268:	4619      	mov	r1, r3
 800226a:	4806      	ldr	r0, [pc, #24]	@ (8002284 <MX_TIM7_Init+0x64>)
 800226c:	f008 fd6a 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002276:	f7ff fb74 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200008ec 	.word	0x200008ec
 8002288:	40001400 	.word	0x40001400

0800228c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002328 <MX_TIM8_Init+0x9c>)
 80022ac:	4a1f      	ldr	r2, [pc, #124]	@ (800232c <MX_TIM8_Init+0xa0>)
 80022ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80022b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <MX_TIM8_Init+0x9c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002328 <MX_TIM8_Init+0x9c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80022bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002328 <MX_TIM8_Init+0x9c>)
 80022be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c4:	4b18      	ldr	r3, [pc, #96]	@ (8002328 <MX_TIM8_Init+0x9c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022ca:	4b17      	ldr	r3, [pc, #92]	@ (8002328 <MX_TIM8_Init+0x9c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d0:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <MX_TIM8_Init+0x9c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80022d6:	4814      	ldr	r0, [pc, #80]	@ (8002328 <MX_TIM8_Init+0x9c>)
 80022d8:	f007 f954 	bl	8009584 <HAL_TIM_Base_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80022e2:	f7ff fb3e 	bl	8001962 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80022e6:	2307      	movs	r3, #7
 80022e8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80022ee:	f107 030c 	add.w	r3, r7, #12
 80022f2:	4619      	mov	r1, r3
 80022f4:	480c      	ldr	r0, [pc, #48]	@ (8002328 <MX_TIM8_Init+0x9c>)
 80022f6:	f008 f91e 	bl	800a536 <HAL_TIM_SlaveConfigSynchro>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002300:	f7ff fb2f 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	4619      	mov	r1, r3
 8002310:	4805      	ldr	r0, [pc, #20]	@ (8002328 <MX_TIM8_Init+0x9c>)
 8002312:	f008 fd17 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800231c:	f7ff fb21 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	3720      	adds	r7, #32
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000934 	.word	0x20000934
 800232c:	40010400 	.word	0x40010400

08002330 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002334:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <MX_TIM10_Init+0x40>)
 8002336:	4a0f      	ldr	r2, [pc, #60]	@ (8002374 <MX_TIM10_Init+0x44>)
 8002338:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 19;
 800233a:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <MX_TIM10_Init+0x40>)
 800233c:	2213      	movs	r2, #19
 800233e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002340:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <MX_TIM10_Init+0x40>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 8002346:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <MX_TIM10_Init+0x40>)
 8002348:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800234c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234e:	4b08      	ldr	r3, [pc, #32]	@ (8002370 <MX_TIM10_Init+0x40>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <MX_TIM10_Init+0x40>)
 8002356:	2200      	movs	r2, #0
 8002358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	@ (8002370 <MX_TIM10_Init+0x40>)
 800235c:	f007 f912 	bl	8009584 <HAL_TIM_Base_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002366:	f7ff fafc 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000097c 	.word	0x2000097c
 8002374:	40014400 	.word	0x40014400

08002378 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a42      	ldr	r2, [pc, #264]	@ (8002490 <HAL_TIM_Base_MspInit+0x118>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d116      	bne.n	80023b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	4b41      	ldr	r3, [pc, #260]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	4a40      	ldr	r2, [pc, #256]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6453      	str	r3, [r2, #68]	@ 0x44
 800239a:	4b3e      	ldr	r3, [pc, #248]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2019      	movs	r0, #25
 80023ac:	f003 ff23 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023b0:	2019      	movs	r0, #25
 80023b2:	f003 ff3c 	bl	800622e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80023b6:	e066      	b.n	8002486 <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM6)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a36      	ldr	r2, [pc, #216]	@ (8002498 <HAL_TIM_Base_MspInit+0x120>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d116      	bne.n	80023f0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	4b33      	ldr	r3, [pc, #204]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	4a32      	ldr	r2, [pc, #200]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 80023cc:	f043 0310 	orr.w	r3, r3, #16
 80023d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d2:	4b30      	ldr	r3, [pc, #192]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2100      	movs	r1, #0
 80023e2:	2036      	movs	r0, #54	@ 0x36
 80023e4:	f003 ff07 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023e8:	2036      	movs	r0, #54	@ 0x36
 80023ea:	f003 ff20 	bl	800622e <HAL_NVIC_EnableIRQ>
}
 80023ee:	e04a      	b.n	8002486 <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM7)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a29      	ldr	r2, [pc, #164]	@ (800249c <HAL_TIM_Base_MspInit+0x124>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d116      	bne.n	8002428 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	4b25      	ldr	r3, [pc, #148]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	4a24      	ldr	r2, [pc, #144]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 8002404:	f043 0320 	orr.w	r3, r3, #32
 8002408:	6413      	str	r3, [r2, #64]	@ 0x40
 800240a:	4b22      	ldr	r3, [pc, #136]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	2037      	movs	r0, #55	@ 0x37
 800241c:	f003 feeb 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002420:	2037      	movs	r0, #55	@ 0x37
 8002422:	f003 ff04 	bl	800622e <HAL_NVIC_EnableIRQ>
}
 8002426:	e02e      	b.n	8002486 <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM8)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1c      	ldr	r2, [pc, #112]	@ (80024a0 <HAL_TIM_Base_MspInit+0x128>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d10e      	bne.n	8002450 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	4b17      	ldr	r3, [pc, #92]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	4a16      	ldr	r2, [pc, #88]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6453      	str	r3, [r2, #68]	@ 0x44
 8002442:	4b14      	ldr	r3, [pc, #80]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
}
 800244e:	e01a      	b.n	8002486 <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM10)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a13      	ldr	r2, [pc, #76]	@ (80024a4 <HAL_TIM_Base_MspInit+0x12c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d115      	bne.n	8002486 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	4b0d      	ldr	r3, [pc, #52]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	4a0c      	ldr	r2, [pc, #48]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 8002464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002468:	6453      	str	r3, [r2, #68]	@ 0x44
 800246a:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <HAL_TIM_Base_MspInit+0x11c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2100      	movs	r1, #0
 800247a:	2019      	movs	r0, #25
 800247c:	f003 febb 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002480:	2019      	movs	r0, #25
 8002482:	f003 fed4 	bl	800622e <HAL_NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40010000 	.word	0x40010000
 8002494:	40023800 	.word	0x40023800
 8002498:	40001000 	.word	0x40001000
 800249c:	40001400 	.word	0x40001400
 80024a0:	40010400 	.word	0x40010400
 80024a4:	40014400 	.word	0x40014400

080024a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b8:	d10e      	bne.n	80024d8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b13      	ldr	r3, [pc, #76]	@ (800250c <HAL_TIM_PWM_MspInit+0x64>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	4a12      	ldr	r2, [pc, #72]	@ (800250c <HAL_TIM_PWM_MspInit+0x64>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ca:	4b10      	ldr	r3, [pc, #64]	@ (800250c <HAL_TIM_PWM_MspInit+0x64>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80024d6:	e012      	b.n	80024fe <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002510 <HAL_TIM_PWM_MspInit+0x68>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d10d      	bne.n	80024fe <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <HAL_TIM_PWM_MspInit+0x64>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	4a08      	ldr	r2, [pc, #32]	@ (800250c <HAL_TIM_PWM_MspInit+0x64>)
 80024ec:	f043 0308 	orr.w	r3, r3, #8
 80024f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_TIM_PWM_MspInit+0x64>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	40000c00 	.word	0x40000c00

08002514 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	@ 0x30
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(tim_ocHandle->Instance==TIM3)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a3a      	ldr	r2, [pc, #232]	@ (800261c <HAL_TIM_OC_MspInit+0x108>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d134      	bne.n	80025a0 <HAL_TIM_OC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	4b39      	ldr	r3, [pc, #228]	@ (8002620 <HAL_TIM_OC_MspInit+0x10c>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	4a38      	ldr	r2, [pc, #224]	@ (8002620 <HAL_TIM_OC_MspInit+0x10c>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	6413      	str	r3, [r2, #64]	@ 0x40
 8002546:	4b36      	ldr	r3, [pc, #216]	@ (8002620 <HAL_TIM_OC_MspInit+0x10c>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	4b32      	ldr	r3, [pc, #200]	@ (8002620 <HAL_TIM_OC_MspInit+0x10c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	4a31      	ldr	r2, [pc, #196]	@ (8002620 <HAL_TIM_OC_MspInit+0x10c>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	@ 0x30
 8002562:	4b2f      	ldr	r3, [pc, #188]	@ (8002620 <HAL_TIM_OC_MspInit+0x10c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 800256e:	23c0      	movs	r3, #192	@ 0xc0
 8002570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800257e:	2302      	movs	r3, #2
 8002580:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002582:	f107 031c 	add.w	r3, r7, #28
 8002586:	4619      	mov	r1, r3
 8002588:	4826      	ldr	r0, [pc, #152]	@ (8002624 <HAL_TIM_OC_MspInit+0x110>)
 800258a:	f004 fa79 	bl	8006a80 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	201d      	movs	r0, #29
 8002594:	f003 fe2f 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002598:	201d      	movs	r0, #29
 800259a:	f003 fe48 	bl	800622e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800259e:	e038      	b.n	8002612 <HAL_TIM_OC_MspInit+0xfe>
  else if(tim_ocHandle->Instance==TIM4)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a20      	ldr	r2, [pc, #128]	@ (8002628 <HAL_TIM_OC_MspInit+0x114>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d133      	bne.n	8002612 <HAL_TIM_OC_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002620 <HAL_TIM_OC_MspInit+0x10c>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002620 <HAL_TIM_OC_MspInit+0x10c>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ba:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_TIM_OC_MspInit+0x10c>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <HAL_TIM_OC_MspInit+0x10c>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	4a14      	ldr	r2, [pc, #80]	@ (8002620 <HAL_TIM_OC_MspInit+0x10c>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d6:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <HAL_TIM_OC_MspInit+0x10c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin|ENC2_CH2_Pin;
 80025e2:	23c0      	movs	r3, #192	@ 0xc0
 80025e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025f2:	2302      	movs	r3, #2
 80025f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f6:	f107 031c 	add.w	r3, r7, #28
 80025fa:	4619      	mov	r1, r3
 80025fc:	480b      	ldr	r0, [pc, #44]	@ (800262c <HAL_TIM_OC_MspInit+0x118>)
 80025fe:	f004 fa3f 	bl	8006a80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	201e      	movs	r0, #30
 8002608:	f003 fdf5 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800260c:	201e      	movs	r0, #30
 800260e:	f003 fe0e 	bl	800622e <HAL_NVIC_EnableIRQ>
}
 8002612:	bf00      	nop
 8002614:	3730      	adds	r7, #48	@ 0x30
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40000400 	.word	0x40000400
 8002620:	40023800 	.word	0x40023800
 8002624:	40020000 	.word	0x40020000
 8002628:	40000800 	.word	0x40000800
 800262c:	40020400 	.word	0x40020400

08002630 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	@ 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002650:	d11e      	bne.n	8002690 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	4b22      	ldr	r3, [pc, #136]	@ (80026e0 <HAL_TIM_MspPostInit+0xb0>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	4a21      	ldr	r2, [pc, #132]	@ (80026e0 <HAL_TIM_MspPostInit+0xb0>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	@ 0x30
 8002662:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <HAL_TIM_MspPostInit+0xb0>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M2_PUL_Pin;
 800266e:	2302      	movs	r3, #2
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800267e:	2301      	movs	r3, #1
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_PUL_GPIO_Port, &GPIO_InitStruct);
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	4619      	mov	r1, r3
 8002688:	4816      	ldr	r0, [pc, #88]	@ (80026e4 <HAL_TIM_MspPostInit+0xb4>)
 800268a:	f004 f9f9 	bl	8006a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800268e:	e022      	b.n	80026d6 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a14      	ldr	r2, [pc, #80]	@ (80026e8 <HAL_TIM_MspPostInit+0xb8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d11d      	bne.n	80026d6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <HAL_TIM_MspPostInit+0xb0>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4a0f      	ldr	r2, [pc, #60]	@ (80026e0 <HAL_TIM_MspPostInit+0xb0>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026aa:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <HAL_TIM_MspPostInit+0xb0>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PUL_Pin;
 80026b6:	2301      	movs	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80026c6:	2302      	movs	r3, #2
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_PUL_GPIO_Port, &GPIO_InitStruct);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4619      	mov	r1, r3
 80026d0:	4804      	ldr	r0, [pc, #16]	@ (80026e4 <HAL_TIM_MspPostInit+0xb4>)
 80026d2:	f004 f9d5 	bl	8006a80 <HAL_GPIO_Init>
}
 80026d6:	bf00      	nop
 80026d8:	3728      	adds	r7, #40	@ 0x28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020000 	.word	0x40020000
 80026e8:	40000c00 	.word	0x40000c00

080026ec <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026f0:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 80026f2:	4a12      	ldr	r2, [pc, #72]	@ (800273c <MX_USART2_UART_Init+0x50>)
 80026f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026f6:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 80026f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800270a:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002710:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 8002712:	220c      	movs	r2, #12
 8002714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002716:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800271c:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002722:	4805      	ldr	r0, [pc, #20]	@ (8002738 <MX_USART2_UART_Init+0x4c>)
 8002724:	f008 fb9e 	bl	800ae64 <HAL_UART_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800272e:	f7ff f918 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200009c4 	.word	0x200009c4
 800273c:	40004400 	.word	0x40004400

08002740 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <MX_USART6_UART_Init+0x4c>)
 8002746:	4a12      	ldr	r2, [pc, #72]	@ (8002790 <MX_USART6_UART_Init+0x50>)
 8002748:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 800274a:	4b10      	ldr	r3, [pc, #64]	@ (800278c <MX_USART6_UART_Init+0x4c>)
 800274c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002750:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002752:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <MX_USART6_UART_Init+0x4c>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002758:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <MX_USART6_UART_Init+0x4c>)
 800275a:	2200      	movs	r2, #0
 800275c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800275e:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <MX_USART6_UART_Init+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8002764:	4b09      	ldr	r3, [pc, #36]	@ (800278c <MX_USART6_UART_Init+0x4c>)
 8002766:	2204      	movs	r2, #4
 8002768:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800276a:	4b08      	ldr	r3, [pc, #32]	@ (800278c <MX_USART6_UART_Init+0x4c>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002770:	4b06      	ldr	r3, [pc, #24]	@ (800278c <MX_USART6_UART_Init+0x4c>)
 8002772:	2200      	movs	r2, #0
 8002774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002776:	4805      	ldr	r0, [pc, #20]	@ (800278c <MX_USART6_UART_Init+0x4c>)
 8002778:	f008 fb74 	bl	800ae64 <HAL_UART_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002782:	f7ff f8ee 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000a0c 	.word	0x20000a0c
 8002790:	40011400 	.word	0x40011400

08002794 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08c      	sub	sp, #48	@ 0x30
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 031c 	add.w	r3, r7, #28
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a4d      	ldr	r2, [pc, #308]	@ (80028e8 <HAL_UART_MspInit+0x154>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d12c      	bne.n	8002810 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	4b4c      	ldr	r3, [pc, #304]	@ (80028ec <HAL_UART_MspInit+0x158>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	4a4b      	ldr	r2, [pc, #300]	@ (80028ec <HAL_UART_MspInit+0x158>)
 80027c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c6:	4b49      	ldr	r3, [pc, #292]	@ (80028ec <HAL_UART_MspInit+0x158>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	4b45      	ldr	r3, [pc, #276]	@ (80028ec <HAL_UART_MspInit+0x158>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	4a44      	ldr	r2, [pc, #272]	@ (80028ec <HAL_UART_MspInit+0x158>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e2:	4b42      	ldr	r3, [pc, #264]	@ (80028ec <HAL_UART_MspInit+0x158>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027ee:	230c      	movs	r3, #12
 80027f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027fe:	2307      	movs	r3, #7
 8002800:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002802:	f107 031c 	add.w	r3, r7, #28
 8002806:	4619      	mov	r1, r3
 8002808:	4839      	ldr	r0, [pc, #228]	@ (80028f0 <HAL_UART_MspInit+0x15c>)
 800280a:	f004 f939 	bl	8006a80 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800280e:	e067      	b.n	80028e0 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART6)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a37      	ldr	r2, [pc, #220]	@ (80028f4 <HAL_UART_MspInit+0x160>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d162      	bne.n	80028e0 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	4b33      	ldr	r3, [pc, #204]	@ (80028ec <HAL_UART_MspInit+0x158>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002822:	4a32      	ldr	r2, [pc, #200]	@ (80028ec <HAL_UART_MspInit+0x158>)
 8002824:	f043 0320 	orr.w	r3, r3, #32
 8002828:	6453      	str	r3, [r2, #68]	@ 0x44
 800282a:	4b30      	ldr	r3, [pc, #192]	@ (80028ec <HAL_UART_MspInit+0x158>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b2c      	ldr	r3, [pc, #176]	@ (80028ec <HAL_UART_MspInit+0x158>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4a2b      	ldr	r2, [pc, #172]	@ (80028ec <HAL_UART_MspInit+0x158>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	6313      	str	r3, [r2, #48]	@ 0x30
 8002846:	4b29      	ldr	r3, [pc, #164]	@ (80028ec <HAL_UART_MspInit+0x158>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002852:	23c0      	movs	r3, #192	@ 0xc0
 8002854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285e:	2303      	movs	r3, #3
 8002860:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002862:	2308      	movs	r3, #8
 8002864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002866:	f107 031c 	add.w	r3, r7, #28
 800286a:	4619      	mov	r1, r3
 800286c:	4822      	ldr	r0, [pc, #136]	@ (80028f8 <HAL_UART_MspInit+0x164>)
 800286e:	f004 f907 	bl	8006a80 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002872:	4b22      	ldr	r3, [pc, #136]	@ (80028fc <HAL_UART_MspInit+0x168>)
 8002874:	4a22      	ldr	r2, [pc, #136]	@ (8002900 <HAL_UART_MspInit+0x16c>)
 8002876:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002878:	4b20      	ldr	r3, [pc, #128]	@ (80028fc <HAL_UART_MspInit+0x168>)
 800287a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800287e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002880:	4b1e      	ldr	r3, [pc, #120]	@ (80028fc <HAL_UART_MspInit+0x168>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002886:	4b1d      	ldr	r3, [pc, #116]	@ (80028fc <HAL_UART_MspInit+0x168>)
 8002888:	2200      	movs	r2, #0
 800288a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800288c:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <HAL_UART_MspInit+0x168>)
 800288e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002892:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002894:	4b19      	ldr	r3, [pc, #100]	@ (80028fc <HAL_UART_MspInit+0x168>)
 8002896:	2200      	movs	r2, #0
 8002898:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800289a:	4b18      	ldr	r3, [pc, #96]	@ (80028fc <HAL_UART_MspInit+0x168>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80028a0:	4b16      	ldr	r3, [pc, #88]	@ (80028fc <HAL_UART_MspInit+0x168>)
 80028a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028a6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028a8:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <HAL_UART_MspInit+0x168>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ae:	4b13      	ldr	r3, [pc, #76]	@ (80028fc <HAL_UART_MspInit+0x168>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80028b4:	4811      	ldr	r0, [pc, #68]	@ (80028fc <HAL_UART_MspInit+0x168>)
 80028b6:	f003 fcd5 	bl	8006264 <HAL_DMA_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80028c0:	f7ff f84f 	bl	8001962 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a0d      	ldr	r2, [pc, #52]	@ (80028fc <HAL_UART_MspInit+0x168>)
 80028c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028ca:	4a0c      	ldr	r2, [pc, #48]	@ (80028fc <HAL_UART_MspInit+0x168>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	2100      	movs	r1, #0
 80028d4:	2047      	movs	r0, #71	@ 0x47
 80028d6:	f003 fc8e 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80028da:	2047      	movs	r0, #71	@ 0x47
 80028dc:	f003 fca7 	bl	800622e <HAL_NVIC_EnableIRQ>
}
 80028e0:	bf00      	nop
 80028e2:	3730      	adds	r7, #48	@ 0x30
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40004400 	.word	0x40004400
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40011400 	.word	0x40011400
 80028f8:	40020800 	.word	0x40020800
 80028fc:	20000a54 	.word	0x20000a54
 8002900:	40026428 	.word	0x40026428

08002904 <on_click>:
#define DEBOUNCE_DELAY 100 // ms

static uint32_t last_debounce_time = 0;
// static uint8_t active = 0;

void on_click(){
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY){
 8002908:	f002 ff5a 	bl	80057c0 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <on_click+0x64>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b64      	cmp	r3, #100	@ 0x64
 8002916:	d925      	bls.n	8002964 <on_click+0x60>
		last_debounce_time = HAL_GetTick();
 8002918:	f002 ff52 	bl	80057c0 <HAL_GetTick>
 800291c:	4603      	mov	r3, r0
 800291e:	4a12      	ldr	r2, [pc, #72]	@ (8002968 <on_click+0x64>)
 8002920:	6013      	str	r3, [r2, #0]
		// active ^= 1;

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8002922:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002926:	4811      	ldr	r0, [pc, #68]	@ (800296c <on_click+0x68>)
 8002928:	f004 fa6f 	bl	8006e0a <HAL_GPIO_TogglePin>
		// } else{
		// 	set_speed(&stepper_l, 0);
		// 	set_speed(&stepper_r, 0);
		// }

		pid.active ^= 1;
 800292c:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <on_click+0x6c>)
 800292e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002932:	f083 0301 	eor.w	r3, r3, #1
 8002936:	b2da      	uxtb	r2, r3
 8002938:	4b0d      	ldr	r3, [pc, #52]	@ (8002970 <on_click+0x6c>)
 800293a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		if (pid.active) {
 800293e:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <on_click+0x6c>)
 8002940:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <on_click+0x4c>
			PID_Reset(&pid);
 8002948:	4809      	ldr	r0, [pc, #36]	@ (8002970 <on_click+0x6c>)
 800294a:	f001 f9cb 	bl	8003ce4 <PID_Reset>
		} else {
			set_speed(&stepper_l, 0);
			set_speed(&stepper_r, 0);
		}
	}
}
 800294e:	e009      	b.n	8002964 <on_click+0x60>
			set_speed(&stepper_l, 0);
 8002950:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002974 <on_click+0x70>
 8002954:	4808      	ldr	r0, [pc, #32]	@ (8002978 <on_click+0x74>)
 8002956:	f001 fae3 	bl	8003f20 <set_speed>
			set_speed(&stepper_r, 0);
 800295a:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002974 <on_click+0x70>
 800295e:	4807      	ldr	r0, [pc, #28]	@ (800297c <on_click+0x78>)
 8002960:	f001 fade 	bl	8003f20 <set_speed>
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000ab4 	.word	0x20000ab4
 800296c:	40020800 	.word	0x40020800
 8002970:	20000cb8 	.word	0x20000cb8
 8002974:	00000000 	.word	0x00000000
 8002978:	20000ba4 	.word	0x20000ba4
 800297c:	20000b20 	.word	0x20000b20

08002980 <get_virtual_timer_32bit>:
#include <math.h>

float SAMPLING_PERIOD;
uint32_t HCLK;

static uint32_t get_virtual_timer_32bit(void){
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
    uint16_t high, low;

    high = __HAL_TIM_GET_COUNTER(&htim8);
 8002986:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <get_virtual_timer_32bit+0x2c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	80fb      	strh	r3, [r7, #6]
    low  = __HAL_TIM_GET_COUNTER(&htim1);
 800298e:	4b08      	ldr	r3, [pc, #32]	@ (80029b0 <get_virtual_timer_32bit+0x30>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	80bb      	strh	r3, [r7, #4]

    return ((uint32_t)high << 16) | low;
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	041a      	lsls	r2, r3, #16
 800299a:	88bb      	ldrh	r3, [r7, #4]
 800299c:	4313      	orrs	r3, r2
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000934 	.word	0x20000934
 80029b0:	2000073c 	.word	0x2000073c

080029b4 <build_vandermonde_desc>:
// aggiunto per powf float SAMPLING_PERIOD;
// seconds uint32_t HCLK;
// Vandermonde matrix in descending order of powers

static void build_vandermonde_desc(float32_t *t, float32_t *A)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < N_SAMPLES; i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	e02a      	b.n	8002a1a <build_vandermonde_desc+0x66>
	{
		for (int j = POLY_ORDER; j >= 0; j--)
 80029c4:	2302      	movs	r3, #2
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	e021      	b.n	8002a0e <build_vandermonde_desc+0x5a>
		{
			A[i * (POLY_ORDER + 1) + (POLY_ORDER - j)] = powf(t[i], j);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	ee07 3a10 	vmov	s14, r3
 80029dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	441a      	add	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	3302      	adds	r3, #2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	18d4      	adds	r4, r2, r3
 80029f4:	eef0 0a47 	vmov.f32	s1, s14
 80029f8:	eeb0 0a67 	vmov.f32	s0, s15
 80029fc:	f00d fef4 	bl	80107e8 <powf>
 8002a00:	eef0 7a40 	vmov.f32	s15, s0
 8002a04:	edc4 7a00 	vstr	s15, [r4]
		for (int j = POLY_ORDER; j >= 0; j--)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	dada      	bge.n	80029ca <build_vandermonde_desc+0x16>
	for (uint32_t i = 0; i < N_SAMPLES; i++)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3301      	adds	r3, #1
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d9d1      	bls.n	80029c4 <build_vandermonde_desc+0x10>
		}
	}
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd90      	pop	{r4, r7, pc}
	...

08002a2c <compute_polynomial>:
static void compute_polynomial(encoder_t *encoder)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b0ea      	sub	sp, #424	@ 0x1a8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8002a36:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002a3a:	6018      	str	r0, [r3, #0]
	float32_t ATA_inv_d[N_COEFF * N_COEFF];
	float32_t ATA_inv_AT_d[N_COEFF * N_SAMPLES];
	float32_t B_d[N_SAMPLES];
	float32_t P_d[N_COEFF]; // usa l'elemento più vecchio nel buffer come riferimento 

	uint8_t start_idx = encoder->vec_index; // 
 8002a3c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8002a40:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002a4a:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4
	encoder->t_ref = encoder->timestamps[start_idx]; // Reference time for normalization 
 8002a4e:	f897 21a4 	ldrb.w	r2, [r7, #420]	@ 0x1a4
 8002a52:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8002a56:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3206      	adds	r2, #6
 8002a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8002a68:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	659a      	str	r2, [r3, #88]	@ 0x58

	// riempi T e B per TUTTI i N_SAMPLES campioni (coerente con A: N_SAMPLES x N_COEFF) 
	for (uint8_t i = 0; i < N_SAMPLES; i++) { 
 8002a70:	2300      	movs	r3, #0
 8002a72:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
 8002a76:	e04c      	b.n	8002b12 <compute_polynomial+0xe6>
		uint8_t idx = (start_idx + i) % N_SAMPLES; 
 8002a78:	f897 21a4 	ldrb.w	r2, [r7, #420]	@ 0x1a4
 8002a7c:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8002a80:	441a      	add	r2, r3
 8002a82:	4b85      	ldr	r3, [pc, #532]	@ (8002c98 <compute_polynomial+0x26c>)
 8002a84:	fb83 3102 	smull	r3, r1, r3, r2
 8002a88:	17d3      	asrs	r3, r2, #31
 8002a8a:	1ac9      	subs	r1, r1, r3
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	440b      	add	r3, r1
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	1ad1      	subs	r1, r2, r3
 8002a96:	460b      	mov	r3, r1
 8002a98:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
		t_normalized[i] = (encoder->timestamps[idx] - encoder->t_ref)/1000000.0f; // s
 8002a9c:	f897 21a2 	ldrb.w	r2, [r7, #418]	@ 0x1a2
 8002aa0:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8002aa4:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3206      	adds	r2, #6
 8002aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab0:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
 8002ab4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ac6:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8002aca:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8002c9c <compute_polynomial+0x270>
 8002ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8002ad8:	443b      	add	r3, r7
 8002ada:	3b20      	subs	r3, #32
 8002adc:	edc3 7a00 	vstr	s15, [r3]
		B_d[i] = encoder->positions[idx]; 
 8002ae0:	f897 21a2 	ldrb.w	r2, [r7, #418]	@ 0x1a2
 8002ae4:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8002ae8:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8002aec:	f5a1 71d2 	sub.w	r1, r1, #420	@ 0x1a4
 8002af0:	6809      	ldr	r1, [r1, #0]
 8002af2:	320c      	adds	r2, #12
 8002af4:	0092      	lsls	r2, r2, #2
 8002af6:	440a      	add	r2, r1
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8002afe:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < N_SAMPLES; i++) { 
 8002b08:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
 8002b12:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	d9ae      	bls.n	8002a78 <compute_polynomial+0x4c>
	} 
	arm_matrix_instance_f32 A, AT, ATA, ATA_inv, ATA_inv_AT, P, B; 
	build_vandermonde_desc(t_normalized, A_d); 
 8002b1a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b1e:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff45 	bl	80029b4 <build_vandermonde_desc>
	arm_mat_init_f32(&A, N_SAMPLES, N_COEFF, A_d); 
 8002b2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b2e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002b32:	2203      	movs	r2, #3
 8002b34:	2106      	movs	r1, #6
 8002b36:	f002 fb40 	bl	80051ba <arm_mat_init_f32>
	arm_mat_init_f32(&ATA, N_COEFF, N_COEFF, ATA_d); 
 8002b3a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b3e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002b42:	2203      	movs	r2, #3
 8002b44:	2103      	movs	r1, #3
 8002b46:	f002 fb38 	bl	80051ba <arm_mat_init_f32>
	arm_mat_init_f32(&ATA_inv, N_COEFF, N_COEFF, ATA_inv_d); 
 8002b4a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002b4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002b52:	2203      	movs	r2, #3
 8002b54:	2103      	movs	r1, #3
 8002b56:	f002 fb30 	bl	80051ba <arm_mat_init_f32>
	arm_mat_init_f32(&ATA_inv_AT, N_COEFF, N_SAMPLES, ATA_inv_AT_d); 
 8002b5a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002b5e:	f107 001c 	add.w	r0, r7, #28
 8002b62:	2206      	movs	r2, #6
 8002b64:	2103      	movs	r1, #3
 8002b66:	f002 fb28 	bl	80051ba <arm_mat_init_f32>
	arm_mat_init_f32(&P, N_COEFF, 1, P_d); 
 8002b6a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b6e:	f107 0014 	add.w	r0, r7, #20
 8002b72:	2201      	movs	r2, #1
 8002b74:	2103      	movs	r1, #3
 8002b76:	f002 fb20 	bl	80051ba <arm_mat_init_f32>
	arm_mat_init_f32(&AT, N_COEFF, N_SAMPLES, AT_d); 
 8002b7a:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002b7e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002b82:	2206      	movs	r2, #6
 8002b84:	2103      	movs	r1, #3
 8002b86:	f002 fb18 	bl	80051ba <arm_mat_init_f32>
	arm_mat_init_f32(&B, N_SAMPLES, 1, B_d); 
 8002b8a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002b8e:	f107 000c 	add.w	r0, r7, #12
 8002b92:	2201      	movs	r2, #1
 8002b94:	2106      	movs	r1, #6
 8002b96:	f002 fb10 	bl	80051ba <arm_mat_init_f32>
	arm_mat_trans_f32(&A, &AT); // AT = A^T 
 8002b9a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002b9e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f002 fd63 	bl	8005670 <arm_mat_trans_f32>
	arm_mat_mult_f32(&AT, &A, &ATA); // ATA = AT * A 
 8002baa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002bae:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8002bb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 fce0 	bl	800557c <arm_mat_mult_f32>
	arm_status status = arm_mat_inverse_f32(&ATA, &ATA_inv); 
 8002bbc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002bc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 fb0f 	bl	80051ea <arm_mat_inverse_f32>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
	if(status == ARM_MATH_SUCCESS){ 
 8002bd2:	f997 31a3 	ldrsb.w	r3, [r7, #419]	@ 0x1a3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d134      	bne.n	8002c44 <compute_polynomial+0x218>
		arm_mat_mult_f32(&ATA_inv, &AT, &ATA_inv_AT); // ATA_inv_AT = ATA^-1 * AT 
 8002bda:	f107 021c 	add.w	r2, r7, #28
 8002bde:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 fcc8 	bl	800557c <arm_mat_mult_f32>
		arm_mat_mult_f32(&ATA_inv_AT, &B, &P); // P = ATA_inv_AT * B 
 8002bec:	f107 0214 	add.w	r2, r7, #20
 8002bf0:	f107 010c 	add.w	r1, r7, #12
 8002bf4:	f107 031c 	add.w	r3, r7, #28
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f002 fcbf 	bl	800557c <arm_mat_mult_f32>
		for(uint8_t i=0;i<N_COEFF;i++){ 
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f887 31a6 	strb.w	r3, [r7, #422]	@ 0x1a6
 8002c04:	e019      	b.n	8002c3a <compute_polynomial+0x20e>
			encoder->polynomial[i] = P_d[i]; 
 8002c06:	f897 21a6 	ldrb.w	r2, [r7, #422]	@ 0x1a6
 8002c0a:	f897 31a6 	ldrb.w	r3, [r7, #422]	@ 0x1a6
 8002c0e:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8002c12:	f5a1 71b2 	sub.w	r1, r1, #356	@ 0x164
 8002c16:	0092      	lsls	r2, r2, #2
 8002c18:	440a      	add	r2, r1
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8002c20:	f5a1 71d2 	sub.w	r1, r1, #420	@ 0x1a4
 8002c24:	6809      	ldr	r1, [r1, #0]
 8002c26:	3312      	adds	r3, #18
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	601a      	str	r2, [r3, #0]
		for(uint8_t i=0;i<N_COEFF;i++){ 
 8002c30:	f897 31a6 	ldrb.w	r3, [r7, #422]	@ 0x1a6
 8002c34:	3301      	adds	r3, #1
 8002c36:	f887 31a6 	strb.w	r3, [r7, #422]	@ 0x1a6
 8002c3a:	f897 31a6 	ldrb.w	r3, [r7, #422]	@ 0x1a6
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d9e1      	bls.n	8002c06 <compute_polynomial+0x1da>
		for(uint8_t i=0;i<N_COEFF;i++){ 
			encoder->polynomial[i] = 0.0f; // Reset to zero on error 
		} 
		encoder->t_ref = get_virtual_timer_32bit(); // Reset reference time on error
	} 
} 
 8002c42:	e024      	b.n	8002c8e <compute_polynomial+0x262>
		for(uint8_t i=0;i<N_COEFF;i++){ 
 8002c44:	2300      	movs	r3, #0
 8002c46:	f887 31a5 	strb.w	r3, [r7, #421]	@ 0x1a5
 8002c4a:	e012      	b.n	8002c72 <compute_polynomial+0x246>
			encoder->polynomial[i] = 0.0f; // Reset to zero on error 
 8002c4c:	f897 31a5 	ldrb.w	r3, [r7, #421]	@ 0x1a5
 8002c50:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
 8002c54:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	3312      	adds	r3, #18
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	3304      	adds	r3, #4
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
		for(uint8_t i=0;i<N_COEFF;i++){ 
 8002c68:	f897 31a5 	ldrb.w	r3, [r7, #421]	@ 0x1a5
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f887 31a5 	strb.w	r3, [r7, #421]	@ 0x1a5
 8002c72:	f897 31a5 	ldrb.w	r3, [r7, #421]	@ 0x1a5
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d9e8      	bls.n	8002c4c <compute_polynomial+0x220>
		encoder->t_ref = get_virtual_timer_32bit(); // Reset reference time on error
 8002c7a:	f7ff fe81 	bl	8002980 <get_virtual_timer_32bit>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	461a      	mov	r2, r3
 8002c82:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8002c86:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	659a      	str	r2, [r3, #88]	@ 0x58
} 
 8002c8e:	bf00      	nop
 8002c90:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	2aaaaaab 	.word	0x2aaaaaab
 8002c9c:	49742400 	.word	0x49742400

08002ca0 <compute_displacement>:

static void compute_displacement(encoder_t *encoder){ 
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	ed2d 8b02 	vpush	{d8}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	// encoder->old_displacement = encoder->displacement; // Save old displacement for speed calculation 
	encoder->displacement = 0.0f; 
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	605a      	str	r2, [r3, #4]
	float current_time = (get_virtual_timer_32bit() - encoder->t_ref)/1000000.0f; // Time since reference
 8002cb4:	f7ff fe64 	bl	8002980 <get_virtual_timer_32bit>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	ee07 3a90 	vmov	s15, r3
 8002cc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cc8:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8002d38 <compute_displacement+0x98>
 8002ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cd0:	edc7 7a02 	vstr	s15, [r7, #8]
	for(int i = 0; i < N_COEFF; i++){ 
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	e023      	b.n	8002d22 <compute_displacement+0x82>
		encoder->displacement += encoder->polynomial[i] * powf(current_time, POLY_ORDER - i); 
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3312      	adds	r3, #18
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	ed93 8a00 	vldr	s16, [r3]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f1c3 0302 	rsb	r3, r3, #2
 8002cf0:	ee07 3a90 	vmov	s15, r3
 8002cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf8:	eef0 0a67 	vmov.f32	s1, s15
 8002cfc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002d00:	f00d fd72 	bl	80107e8 <powf>
 8002d04:	eef0 7a40 	vmov.f32	s15, s0
 8002d08:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	edc3 7a01 	vstr	s15, [r3, #4]
	for(int i = 0; i < N_COEFF; i++){ 
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	ddd8      	ble.n	8002cda <compute_displacement+0x3a>
	} 
} 
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	ecbd 8b02 	vpop	{d8}
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	49742400 	.word	0x49742400

08002d3c <compute_speed>:

static void compute_speed(encoder_t *encoder){ 
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	ed2d 8b02 	vpush	{d8}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
//	encoder->speed = (encoder->position*RCF - encoder->old_displacement) / SAMPLING_PERIOD; // Speed in radians per second
//	encoder->old_displacement = encoder->position * RCF; //
	float old_speed = encoder->speed;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
	 encoder->speed = 0.0f; //
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
	 float current_time = (get_virtual_timer_32bit() - encoder->t_ref)/1000000.0f; // Time since reference
 8002d56:	f7ff fe13 	bl	8002980 <get_virtual_timer_32bit>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d6a:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002e0c <compute_speed+0xd0>
 8002d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d72:	edc7 7a03 	vstr	s15, [r7, #12]
	 for(uint8_t i = 0; i < POLY_ORDER; i++){
 8002d76:	2300      	movs	r3, #0
 8002d78:	75fb      	strb	r3, [r7, #23]
 8002d7a:	e02c      	b.n	8002dd6 <compute_speed+0x9a>
	 	encoder->speed += (POLY_ORDER - i) *encoder->polynomial[i] * powf(current_time, POLY_ORDER - i - 1);
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	f1c3 0302 	rsb	r3, r3, #2
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	3312      	adds	r3, #18
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	3304      	adds	r3, #4
 8002d96:	edd3 7a00 	vldr	s15, [r3]
 8002d9a:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
 8002da0:	f1c3 0301 	rsb	r3, r3, #1
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dac:	eef0 0a67 	vmov.f32	s1, s15
 8002db0:	ed97 0a03 	vldr	s0, [r7, #12]
 8002db4:	f00d fd18 	bl	80107e8 <powf>
 8002db8:	eef0 7a40 	vmov.f32	s15, s0
 8002dbc:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	edc3 7a02 	vstr	s15, [r3, #8]
	 for(uint8_t i = 0; i < POLY_ORDER; i++){
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d9cf      	bls.n	8002d7c <compute_speed+0x40>
	 }
	 // Low-pass filter
	 encoder->speed = 0.05f * encoder->speed + 0.95f * old_speed;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	edd3 7a02 	vldr	s15, [r3, #8]
 8002de2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002e10 <compute_speed+0xd4>
 8002de6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dea:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dee:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002e14 <compute_speed+0xd8>
 8002df2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	edc3 7a02 	vstr	s15, [r3, #8]
} 
 8002e00:	bf00      	nop
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	ecbd 8b02 	vpop	{d8}
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	49742400 	.word	0x49742400
 8002e10:	3d4ccccd 	.word	0x3d4ccccd
 8002e14:	3f733333 	.word	0x3f733333

08002e18 <Encoder_init>:

void Encoder_init(encoder_t *encoder, TIM_HandleTypeDef *em_tim, TIM_HandleTypeDef *s_tim, int8_t direction_invert){ 
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	70fb      	strb	r3, [r7, #3]
	 - encoder: Pointer to the encoder structure 
	 - em_tim: Pointer to the encoder mode timer handle 
	 - s_tim: Pointer to the sampling timer handle 
	 - direction_invert: Direction inversion flag 
	*/ 
	encoder->tim = em_tim->Instance; 
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	60da      	str	r2, [r3, #12]
	encoder->tim->CCR3 = 1; 
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	63da      	str	r2, [r3, #60]	@ 0x3c
	encoder->direction_invert = (direction_invert == 0) ? 1 : (direction_invert > 0 ? 1 : -1); 
 8002e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <Encoder_init+0x38>
 8002e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	dd01      	ble.n	8002e4a <Encoder_init+0x32>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e003      	b.n	8002e52 <Encoder_init+0x3a>
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e4e:	e000      	b.n	8002e52 <Encoder_init+0x3a>
 8002e50:	2301      	movs	r3, #1
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	7413      	strb	r3, [r2, #16]
	encoder->speed = 0; 
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
	uint32_t current_time = get_virtual_timer_32bit();
 8002e5e:	f7ff fd8f 	bl	8002980 <get_virtual_timer_32bit>
 8002e62:	6138      	str	r0, [r7, #16]
	for (uint8_t i = 0; i < N_SAMPLES; i++) { 
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]
 8002e68:	e012      	b.n	8002e90 <Encoder_init+0x78>
		encoder->timestamps[i] = current_time + i; 
 8002e6a:	7df9      	ldrb	r1, [r7, #23]
 8002e6c:	7dfa      	ldrb	r2, [r7, #23]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4419      	add	r1, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3206      	adds	r2, #6
 8002e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		encoder->positions[i] = 0; 
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	330c      	adds	r3, #12
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < N_SAMPLES; i++) { 
 8002e8a:	7dfb      	ldrb	r3, [r7, #23]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	75fb      	strb	r3, [r7, #23]
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d9e9      	bls.n	8002e6a <Encoder_init+0x52>
	} 
	for (uint8_t i = 0; i < N_COEFF; i++) { 
 8002e96:	2300      	movs	r3, #0
 8002e98:	75bb      	strb	r3, [r7, #22]
 8002e9a:	e00b      	b.n	8002eb4 <Encoder_init+0x9c>
		encoder->polynomial[i] = 0.0f; 
 8002e9c:	7dbb      	ldrb	r3, [r7, #22]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	3312      	adds	r3, #18
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < N_COEFF; i++) { 
 8002eae:	7dbb      	ldrb	r3, [r7, #22]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	75bb      	strb	r3, [r7, #22]
 8002eb4:	7dbb      	ldrb	r3, [r7, #22]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d9f0      	bls.n	8002e9c <Encoder_init+0x84>
	} 
	encoder->position = 0; 
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	615a      	str	r2, [r3, #20]
	encoder->vec_index = 0; 
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	encoder->old_displacement=0.0f; 
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	65da      	str	r2, [r3, #92]	@ 0x5c
	HCLK = HAL_RCC_GetHCLKFreq(); 
 8002ed2:	f005 fbab 	bl	800862c <HAL_RCC_GetHCLKFreq>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4a11      	ldr	r2, [pc, #68]	@ (8002f20 <Encoder_init+0x108>)
 8002eda:	6013      	str	r3, [r2, #0]
	SAMPLING_PERIOD =(float)(1+s_tim->Instance->ARR)*(1+s_tim->Instance->PSC)/HCLK; 
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	ee07 3a90 	vmov	s15, r3
 8002ee8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	ee07 3a90 	vmov	s15, r3
 8002ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002f00:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <Encoder_init+0x108>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	ee07 3a90 	vmov	s15, r3
 8002f08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f10:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <Encoder_init+0x10c>)
 8002f12:	edc3 7a00 	vstr	s15, [r3]
} 
 8002f16:	bf00      	nop
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000abc 	.word	0x20000abc
 8002f24:	20000ab8 	.word	0x20000ab8

08002f28 <Encoder_read>:

void Encoder_read(encoder_t *encoder){ 
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	compute_polynomial(encoder); 
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff fd7b 	bl	8002a2c <compute_polynomial>
	compute_displacement(encoder); 
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff feb2 	bl	8002ca0 <compute_displacement>
	compute_speed(encoder); 
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff fefd 	bl	8002d3c <compute_speed>
} 
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	0000      	movs	r0, r0
 8002f4c:	0000      	movs	r0, r0
	...

08002f50 <Encoder_event>:

void Encoder_event(encoder_t *encoder){ 
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	encoder->direction = (encoder->tim->CR1 & TIM_CR1_DIR_Msk) >> TIM_CR1_DIR_Pos; 
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	091b      	lsrs	r3, r3, #4
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	701a      	strb	r2, [r3, #0]
	encoder->position += (encoder->direction ? -1 : 1) * encoder->direction_invert; 
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <Encoder_event+0x30>
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f7e:	e000      	b.n	8002f82 <Encoder_event+0x32>
 8002f80:	2301      	movs	r3, #1
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	f992 2010 	ldrsb.w	r2, [r2, #16]
 8002f88:	fb02 f303 	mul.w	r3, r2, r3
 8002f8c:	ee07 3a90 	vmov	s15, r3
 8002f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	edc3 7a05 	vstr	s15, [r3, #20]
	uint32_t current_time = get_virtual_timer_32bit(); // Store current time
 8002f9e:	f7ff fcef 	bl	8002980 <get_virtual_timer_32bit>
 8002fa2:	60f8      	str	r0, [r7, #12]
	// calcolo robusto dell'indice precedente nel buffer circolare 
	uint8_t prev = (encoder->vec_index + N_SAMPLES - 1) % N_SAMPLES; 
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002faa:	1d5a      	adds	r2, r3, #5
 8002fac:	4b36      	ldr	r3, [pc, #216]	@ (8003088 <Encoder_event+0x138>)
 8002fae:	fb83 3102 	smull	r3, r1, r3, r2
 8002fb2:	17d3      	asrs	r3, r2, #31
 8002fb4:	1ac9      	subs	r1, r1, r3
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	440b      	add	r3, r1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	1ad1      	subs	r1, r2, r3
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	72fb      	strb	r3, [r7, #11]
	if(encoder->timestamps[prev] == current_time){ 
 8002fc4:	7afa      	ldrb	r2, [r7, #11]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3206      	adds	r2, #6
 8002fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d118      	bne.n	8003006 <Encoder_event+0xb6>
		encoder->positions[prev] = encoder->position * RCF; // Convert to radians 
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fae5 	bl	80005a8 <__aeabi_f2d>
 8002fde:	a328      	add	r3, pc, #160	@ (adr r3, 8003080 <Encoder_event+0x130>)
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f7fd fb38 	bl	8000658 <__aeabi_dmul>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	7afc      	ldrb	r4, [r7, #11]
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f7fd fe29 	bl	8000c48 <__aeabi_d2f>
 8002ff6:	4601      	mov	r1, r0
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	f104 030c 	add.w	r3, r4, #12
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	6019      	str	r1, [r3, #0]
	} else { 
		encoder->timestamps[encoder->vec_index] = current_time; 
		encoder->positions[encoder->vec_index] = encoder->position * RCF; // Convert to radians 
		encoder->vec_index = (encoder->vec_index + 1) % N_SAMPLES; 
	} 
}
 8003004:	e035      	b.n	8003072 <Encoder_event+0x122>
		encoder->timestamps[encoder->vec_index] = current_time; 
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800300c:	461a      	mov	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3206      	adds	r2, #6
 8003012:	68f9      	ldr	r1, [r7, #12]
 8003014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		encoder->positions[encoder->vec_index] = encoder->position * RCF; // Convert to radians 
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fac3 	bl	80005a8 <__aeabi_f2d>
 8003022:	a317      	add	r3, pc, #92	@ (adr r3, 8003080 <Encoder_event+0x130>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f7fd fb16 	bl	8000658 <__aeabi_dmul>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800303a:	461c      	mov	r4, r3
 800303c:	f7fd fe04 	bl	8000c48 <__aeabi_d2f>
 8003040:	4601      	mov	r1, r0
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	f104 030c 	add.w	r3, r4, #12
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	6019      	str	r1, [r3, #0]
		encoder->vec_index = (encoder->vec_index + 1) % N_SAMPLES; 
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	4b0c      	ldr	r3, [pc, #48]	@ (8003088 <Encoder_event+0x138>)
 8003058:	fb83 3102 	smull	r3, r1, r3, r2
 800305c:	17d3      	asrs	r3, r2, #31
 800305e:	1ac9      	subs	r1, r1, r3
 8003060:	460b      	mov	r3, r1
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	440b      	add	r3, r1
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	1ad1      	subs	r1, r2, r3
 800306a:	b2ca      	uxtb	r2, r1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	bd90      	pop	{r4, r7, pc}
 800307a:	bf00      	nop
 800307c:	f3af 8000 	nop.w
 8003080:	7bb1a72c 	.word	0x7bb1a72c
 8003084:	3f4921fa 	.word	0x3f4921fa
 8003088:	2aaaaaab 	.word	0x2aaaaaab

0800308c <IMU_Init>:
		imu->az_bias = imu->az_bias - 16384.0f; // Adjust az bias to remove the offset
		imu->az= (imu->az - imu->az_bias) / 16384.0f * 9.81f; // Remove the bias from the az value
	}
}

uint8_t IMU_Init(imu_t *imu, I2C_HandleTypeDef *hi2c, uint16_t address) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	@ 0x28
 8003090:	af04      	add	r7, sp, #16
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) {
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d101      	bne.n	80030ac <IMU_Init+0x20>
		// I2C bus is busy, stop the I2C communication
		return 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e066      	b.n	800317a <IMU_Init+0xee>
	}

	imu->hi2c = hi2c;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	601a      	str	r2, [r3, #0]
	imu->address = address;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	88fa      	ldrh	r2, [r7, #6]
 80030b6:	809a      	strh	r2, [r3, #4]

	imu->ax = 0.0f;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	615a      	str	r2, [r3, #20]
	imu->ay = 0.0f;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	619a      	str	r2, [r3, #24]
	imu->az = 0.0f;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	61da      	str	r2, [r3, #28]
	imu->vx = 0.0f;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	621a      	str	r2, [r3, #32]

	imu->wx = 0.0f;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	625a      	str	r2, [r3, #36]	@ 0x24
	imu->wy = 0.0f;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	629a      	str	r2, [r3, #40]	@ 0x28
	imu->wz = 0.0f;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	imu->alpha_y = 0.0f; // Initialize alpha_y to 0
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30

	imu->angle = 0.0f;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	635a      	str	r2, [r3, #52]	@ 0x34
	imu->last_computation_time = 0;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	639a      	str	r2, [r3, #56]	@ 0x38

	imu->az_bias = 0.0f; // Initialize az bias to 0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	63da      	str	r2, [r3, #60]	@ 0x3c
	imu->calibration_mode = 1; // Calibration mode enabled by default
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	uint8_t check;
	HAL_I2C_Mem_Read(hi2c, address, WHO_AM_I_ADDR, I2C_MEMADD_SIZE_8BIT, &check, 1, 1000);
 8003116:	88f9      	ldrh	r1, [r7, #6]
 8003118:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800311c:	9302      	str	r3, [sp, #8]
 800311e:	2301      	movs	r3, #1
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	f107 0317 	add.w	r3, r7, #23
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2301      	movs	r3, #1
 800312a:	2275      	movs	r2, #117	@ 0x75
 800312c:	68b8      	ldr	r0, [r7, #8]
 800312e:	f004 f8dd 	bl	80072ec <HAL_I2C_Mem_Read>
	if (check == 0x68) {
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	2b68      	cmp	r3, #104	@ 0x68
 8003136:	d11f      	bne.n	8003178 <IMU_Init+0xec>
		uint8_t data = 0x00;
 8003138:	2300      	movs	r3, #0
 800313a:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, SLEEP_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 800313c:	88f9      	ldrh	r1, [r7, #6]
 800313e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003142:	9302      	str	r3, [sp, #8]
 8003144:	2301      	movs	r3, #1
 8003146:	9301      	str	r3, [sp, #4]
 8003148:	f107 0316 	add.w	r3, r7, #22
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2301      	movs	r3, #1
 8003150:	226b      	movs	r2, #107	@ 0x6b
 8003152:	68b8      	ldr	r0, [r7, #8]
 8003154:	f003 ffd0 	bl	80070f8 <HAL_I2C_Mem_Write>

		data = 0x00;
 8003158:	2300      	movs	r3, #0
 800315a:	75bb      	strb	r3, [r7, #22]
		HAL_I2C_Mem_Write(hi2c, address, CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 800315c:	88f9      	ldrh	r1, [r7, #6]
 800315e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003162:	9302      	str	r3, [sp, #8]
 8003164:	2301      	movs	r3, #1
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	f107 0316 	add.w	r3, r7, #22
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2301      	movs	r3, #1
 8003170:	221a      	movs	r2, #26
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	f003 ffc0 	bl	80070f8 <HAL_I2C_Mem_Write>
	}
	return 1;
 8003178:	2301      	movs	r3, #1
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <IMU_ReadData>:

void IMU_ReadData(imu_t *imu){
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af02      	add	r7, sp, #8
 8003188:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(imu->hi2c, imu->address, IMU_BASE_ACCEL_ADDR, I2C_MEMADD_SIZE_8BIT, (uint8_t *)imu->pData, IMU_BUFFER_SIZE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8899      	ldrh	r1, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3306      	adds	r3, #6
 8003196:	220e      	movs	r2, #14
 8003198:	9201      	str	r2, [sp, #4]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2301      	movs	r3, #1
 800319e:	223b      	movs	r2, #59	@ 0x3b
 80031a0:	f004 fad6 	bl	8007750 <HAL_I2C_Mem_Read_DMA>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	0000      	movs	r0, r0
	...

080031b0 <IMU_Compute_Data>:

void IMU_Compute_Data(imu_t *imu) {
 80031b0:	b5b0      	push	{r4, r5, r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	uint32_t delta_time = HAL_GetTick() - imu->last_computation_time; // Calculate time since last angle update
 80031b8:	f002 fb02 	bl	80057c0 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	60fb      	str	r3, [r7, #12]

	imu->ax = (1-IMU_EMA_ALPHA) * imu->ax + IMU_EMA_ALPHA * (((int16_t)(imu->pData[0] << 8) | imu->pData[1]) - 280.591f) / 16384.0f * 9.81f;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80031cc:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8003508 <IMU_Compute_Data+0x358>
 80031d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	799b      	ldrb	r3, [r3, #6]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	b21b      	sxth	r3, r3
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	b21b      	sxth	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	79db      	ldrb	r3, [r3, #7]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	4313      	orrs	r3, r2
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f2:	eddf 6ac6 	vldr	s13, [pc, #792]	@ 800350c <IMU_Compute_Data+0x35c>
 80031f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031fa:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8003510 <IMU_Compute_Data+0x360>
 80031fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003202:	ed9f 6ac4 	vldr	s12, [pc, #784]	@ 8003514 <IMU_Compute_Data+0x364>
 8003206:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800320a:	eddf 6ac3 	vldr	s13, [pc, #780]	@ 8003518 <IMU_Compute_Data+0x368>
 800320e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->ay = (1-IMU_EMA_ALPHA) * imu->ay + IMU_EMA_ALPHA * ((int16_t)(imu->pData[2] << 8) | imu->pData[3]) / 16384.0f * 9.81f;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003222:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8003508 <IMU_Compute_Data+0x358>
 8003226:	ee27 7a87 	vmul.f32	s14, s15, s14
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7a1b      	ldrb	r3, [r3, #8]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	b21b      	sxth	r3, r3
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	b21b      	sxth	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7a5b      	ldrb	r3, [r3, #9]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	4313      	orrs	r3, r2
 8003240:	ee07 3a90 	vmov	s15, r3
 8003244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003248:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8003510 <IMU_Compute_Data+0x360>
 800324c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003250:	ed9f 6ab0 	vldr	s12, [pc, #704]	@ 8003514 <IMU_Compute_Data+0x364>
 8003254:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003258:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8003518 <IMU_Compute_Data+0x368>
 800325c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->az = (1-IMU_EMA_ALPHA) * imu->az + IMU_EMA_ALPHA * (((int16_t)(imu->pData[4] << 8) | imu->pData[5]) - 1117.735f) / 16384.0f * 9.81f;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003270:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8003508 <IMU_Compute_Data+0x358>
 8003274:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	7a9b      	ldrb	r3, [r3, #10]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	b21b      	sxth	r3, r3
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	b21b      	sxth	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7adb      	ldrb	r3, [r3, #11]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003296:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800351c <IMU_Compute_Data+0x36c>
 800329a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800329e:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8003510 <IMU_Compute_Data+0x360>
 80032a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80032a6:	ed9f 6a9b 	vldr	s12, [pc, #620]	@ 8003514 <IMU_Compute_Data+0x364>
 80032aa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032ae:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 8003518 <IMU_Compute_Data+0x368>
 80032b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	edc3 7a07 	vstr	s15, [r3, #28]
//		IMU_Calibrate(imu); // Call calibration function if in calibration mode
//	} else {
//		// Convert raw data to float values (/16834.0f for accelerometer -> in g, /131.0f for gyroscope)
//		imu->az = (1-IMU_EMA_ALPHA) * imu->az + IMU_EMA_ALPHA * (((int16_t)(imu->pData[4] << 8) | imu->pData[5]) - imu->az_bias)/ 16384.0f * 9.81f;
//	}
	float old_wy = imu->wy;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	60bb      	str	r3, [r7, #8]
	imu->wx = (1-IMU_EMA_ALPHA) * imu->wx + IMU_EMA_ALPHA * ((int16_t)(imu->pData[8] << 8) | imu->pData[9]) / 131.0f;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80032cc:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8003508 <IMU_Compute_Data+0x358>
 80032d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7b9b      	ldrb	r3, [r3, #14]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	b21b      	sxth	r3, r3
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	b21b      	sxth	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	7bdb      	ldrb	r3, [r3, #15]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	4313      	orrs	r3, r2
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f2:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8003510 <IMU_Compute_Data+0x360>
 80032f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80032fa:	ed9f 6a89 	vldr	s12, [pc, #548]	@ 8003520 <IMU_Compute_Data+0x370>
 80032fe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	imu->wy = (1-IMU_EMA_ALPHA) * imu->wy + IMU_EMA_ALPHA * (((int16_t)(imu->pData[10] << 8) | imu->pData[11]) - 393.589f) / 131.0f;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003312:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8003508 <IMU_Compute_Data+0x358>
 8003316:	ee27 7a87 	vmul.f32	s14, s15, s14
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	7c1b      	ldrb	r3, [r3, #16]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	b21b      	sxth	r3, r3
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	b21b      	sxth	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7c5b      	ldrb	r3, [r3, #17]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	4313      	orrs	r3, r2
 8003330:	ee07 3a90 	vmov	s15, r3
 8003334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003338:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8003524 <IMU_Compute_Data+0x374>
 800333c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003340:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8003510 <IMU_Compute_Data+0x360>
 8003344:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003348:	ed9f 6a75 	vldr	s12, [pc, #468]	@ 8003520 <IMU_Compute_Data+0x370>
 800334c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	imu->wz = (1-IMU_EMA_ALPHA) * imu->wz + IMU_EMA_ALPHA * ((int16_t)(imu->pData[12] << 8) | imu->pData[13]) / 131.0f;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003360:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8003508 <IMU_Compute_Data+0x358>
 8003364:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	7c9b      	ldrb	r3, [r3, #18]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	b21b      	sxth	r3, r3
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	b21b      	sxth	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	7cdb      	ldrb	r3, [r3, #19]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4313      	orrs	r3, r2
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003386:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8003510 <IMU_Compute_Data+0x360>
 800338a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800338e:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 8003520 <IMU_Compute_Data+0x370>
 8003392:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	imu->last_computation_time = HAL_GetTick(); // Update last computation time
 80033a0:	f002 fa0e 	bl	80057c0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	639a      	str	r2, [r3, #56]	@ 0x38

	imu->vx = imu->vx + imu->ax * (float)delta_time / 1000.0f; // Update velocity based on accelerometer data
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	ed93 7a08 	vldr	s14, [r3, #32]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	edd3 6a05 	vldr	s13, [r3, #20]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	ee07 3a90 	vmov	s15, r3
 80033bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033c4:	ed9f 6a58 	vldr	s12, [pc, #352]	@ 8003528 <IMU_Compute_Data+0x378>
 80033c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->alpha_y = (imu->wy - old_wy) / ((float)delta_time / 1000.0f); // Calculate angular acceleration around y-axis
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80033dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ee:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8003528 <IMU_Compute_Data+0x378>
 80033f2:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80033f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	if(imu->calibration_mode) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d02a      	beq.n	8003460 <IMU_Compute_Data+0x2b0>
		imu->angle = -atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Use accelerometer data to compute angle in calibration mode
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	ed93 7a07 	vldr	s14, [r3, #28]
 8003416:	eef0 0a47 	vmov.f32	s1, s14
 800341a:	eeb0 0a67 	vmov.f32	s0, s15
 800341e:	f00d f9e1 	bl	80107e4 <atan2f>
 8003422:	eef0 7a40 	vmov.f32	s15, s0
 8003426:	eef1 7a67 	vneg.f32	s15, s15
 800342a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800352c <IMU_Compute_Data+0x37c>
 800342e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003432:	ee17 0a90 	vmov	r0, s15
 8003436:	f7fd f8b7 	bl	80005a8 <__aeabi_f2d>
 800343a:	a331      	add	r3, pc, #196	@ (adr r3, 8003500 <IMU_Compute_Data+0x350>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	f7fd fa34 	bl	80008ac <__aeabi_ddiv>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4610      	mov	r0, r2
 800344a:	4619      	mov	r1, r3
 800344c:	f7fd fbfc 	bl	8000c48 <__aeabi_d2f>
 8003450:	4602      	mov	r2, r0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	635a      	str	r2, [r3, #52]	@ 0x34
		imu->calibration_mode = 0; // Reset calibration mode after computing angle
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}else {
		imu->angle = .996f * (imu->angle + imu->wy * (float)delta_time/1000.0f) - .004f * atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Complementary filter to combine gyroscope and accelerometer data
	}
}
 800345e:	e04a      	b.n	80034f6 <IMU_Compute_Data+0x346>
		imu->angle = .996f * (imu->angle + imu->wy * (float)delta_time/1000.0f) - .004f * atan2f(imu->ax, imu->az) * 180.0f / M_PI; // Complementary filter to combine gyroscope and accelerometer data
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003476:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800347a:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8003528 <IMU_Compute_Data+0x378>
 800347e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003486:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003530 <IMU_Compute_Data+0x380>
 800348a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800348e:	ee17 0a90 	vmov	r0, s15
 8003492:	f7fd f889 	bl	80005a8 <__aeabi_f2d>
 8003496:	4604      	mov	r4, r0
 8003498:	460d      	mov	r5, r1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	edd3 7a05 	vldr	s15, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	ed93 7a07 	vldr	s14, [r3, #28]
 80034a6:	eef0 0a47 	vmov.f32	s1, s14
 80034aa:	eeb0 0a67 	vmov.f32	s0, s15
 80034ae:	f00d f999 	bl	80107e4 <atan2f>
 80034b2:	eef0 7a40 	vmov.f32	s15, s0
 80034b6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8003534 <IMU_Compute_Data+0x384>
 80034ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034be:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800352c <IMU_Compute_Data+0x37c>
 80034c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034c6:	ee17 0a90 	vmov	r0, s15
 80034ca:	f7fd f86d 	bl	80005a8 <__aeabi_f2d>
 80034ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8003500 <IMU_Compute_Data+0x350>)
 80034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d4:	f7fd f9ea 	bl	80008ac <__aeabi_ddiv>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4620      	mov	r0, r4
 80034de:	4629      	mov	r1, r5
 80034e0:	f7fc ff02 	bl	80002e8 <__aeabi_dsub>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4610      	mov	r0, r2
 80034ea:	4619      	mov	r1, r3
 80034ec:	f7fd fbac 	bl	8000c48 <__aeabi_d2f>
 80034f0:	4602      	mov	r2, r0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bdb0      	pop	{r4, r5, r7, pc}
 80034fe:	bf00      	nop
 8003500:	54442d18 	.word	0x54442d18
 8003504:	400921fb 	.word	0x400921fb
 8003508:	3f589d8a 	.word	0x3f589d8a
 800350c:	438c4ba6 	.word	0x438c4ba6
 8003510:	3e1d89d9 	.word	0x3e1d89d9
 8003514:	46800000 	.word	0x46800000
 8003518:	411cf5c3 	.word	0x411cf5c3
 800351c:	448bb785 	.word	0x448bb785
 8003520:	43030000 	.word	0x43030000
 8003524:	43c4cb64 	.word	0x43c4cb64
 8003528:	447a0000 	.word	0x447a0000
 800352c:	43340000 	.word	0x43340000
 8003530:	3f7ef9db 	.word	0x3f7ef9db
 8003534:	3b83126f 	.word	0x3b83126f

08003538 <PowerModule_init>:
#include "headers/power_module.h"
#include "headers/display.h"
#include "gpio.h"

void PowerModule_init(power_module_t *power_module, ADC_HandleTypeDef *hadc){
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
	power_module->warning_limit = WARNING_LIMIT; // Imposta il limite di avviso
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a34      	ldr	r2, [pc, #208]	@ (8003618 <PowerModule_init+0xe0>)
 8003546:	605a      	str	r2, [r3, #4]
	power_module->stop_limit = STOP_LIMIT; // Imposta il limite di stop
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a34      	ldr	r2, [pc, #208]	@ (800361c <PowerModule_init+0xe4>)
 800354c:	609a      	str	r2, [r3, #8]
	power_module->warning_issued = 0; // Inizializza il flag di avviso
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	731a      	strb	r2, [r3, #12]
	power_module->stop_issued = 0; // Inizializza il flag di stop
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	735a      	strb	r2, [r3, #13]
	power_module->hadc = *hadc; // Initialize ADC handle
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	3364      	adds	r3, #100	@ 0x64
 8003560:	4611      	mov	r1, r2
 8003562:	2248      	movs	r2, #72	@ 0x48
 8003564:	4618      	mov	r0, r3
 8003566:	f00a fc79 	bl	800de5c <memcpy>

	HAL_ADC_Start(&power_module->hadc);  // Avvia manualmente
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3364      	adds	r3, #100	@ 0x64
 800356e:	4618      	mov	r0, r3
 8003570:	f002 f99a 	bl	80058a8 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&power_module->hadc, 10) == HAL_OK) {  // Timeout corto
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3364      	adds	r3, #100	@ 0x64
 8003578:	210a      	movs	r1, #10
 800357a:	4618      	mov	r0, r3
 800357c:	f002 fa99 	bl	8005ab2 <HAL_ADC_PollForConversion>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11f      	bne.n	80035c6 <PowerModule_init+0x8e>
		power_module->voltage = HAL_ADC_GetValue(&power_module->hadc) / SLOPE - OFFSET;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3364      	adds	r3, #100	@ 0x64
 800358a:	4618      	mov	r0, r3
 800358c:	f002 fb1c 	bl	8005bc8 <HAL_ADC_GetValue>
 8003590:	4603      	mov	r3, r0
 8003592:	4618      	mov	r0, r3
 8003594:	f7fc ffe6 	bl	8000564 <__aeabi_ui2d>
 8003598:	a31b      	add	r3, pc, #108	@ (adr r3, 8003608 <PowerModule_init+0xd0>)
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f7fd f985 	bl	80008ac <__aeabi_ddiv>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	a319      	add	r3, pc, #100	@ (adr r3, 8003610 <PowerModule_init+0xd8>)
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	f7fc fe9a 	bl	80002e8 <__aeabi_dsub>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7fd fb44 	bl	8000c48 <__aeabi_d2f>
 80035c0:	4602      	mov	r2, r0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Stop(&power_module->hadc);  // Ferma l’ADC dopo la conversione
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3364      	adds	r3, #100	@ 0x64
 80035ca:	4618      	mov	r0, r3
 80035cc:	f002 fa3e 	bl	8005a4c <HAL_ADC_Stop>

	// Inizializza l'accumulatore
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e00a      	b.n	80035ec <PowerModule_init+0xb4>
		power_module->accumulator[i] = power_module->voltage; // Inizializza con il primo valore letto
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3304      	adds	r3, #4
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3301      	adds	r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b13      	cmp	r3, #19
 80035f0:	ddf1      	ble.n	80035d6 <PowerModule_init+0x9e>
	}
	power_module->accumulator_idx = 0; // Inizializza l'indice dell'accumulatore
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	f3af 8000 	nop.w
 8003608:	e147ae14 	.word	0xe147ae14
 800360c:	405c847a 	.word	0x405c847a
 8003610:	c540196f 	.word	0xc540196f
 8003614:	3fb12c42 	.word	0x3fb12c42
 8003618:	41b00000 	.word	0x41b00000
 800361c:	41a00000 	.word	0x41a00000

08003620 <I2C1_BusRecovery>:
#define I2C_SDA_GPIO_Port   GPIOB
#define I2C_SDA_Pin         GPIO_PIN_9

// quando HAL_I2C_Master_Receive_DMA() fallisce per colpa del bus bloccato (es. I2C_FLAG_BUSY sempre attivo),
// l’unico rimedio affidabile è resettare completamente il periferico I²C
static void I2C1_BusRecovery(void) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8003626:	463b      	mov	r3, r7
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]

    // 1) Disabilita I2C
    __HAL_I2C_DISABLE(&hi2c1);
 8003634:	4b3a      	ldr	r3, [pc, #232]	@ (8003720 <I2C1_BusRecovery+0x100>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4b39      	ldr	r3, [pc, #228]	@ (8003720 <I2C1_BusRecovery+0x100>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
    __HAL_RCC_I2C1_FORCE_RESET();
 8003644:	4b37      	ldr	r3, [pc, #220]	@ (8003724 <I2C1_BusRecovery+0x104>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4a36      	ldr	r2, [pc, #216]	@ (8003724 <I2C1_BusRecovery+0x104>)
 800364a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800364e:	6213      	str	r3, [r2, #32]
    __HAL_RCC_I2C1_RELEASE_RESET();
 8003650:	4b34      	ldr	r3, [pc, #208]	@ (8003724 <I2C1_BusRecovery+0x104>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4a33      	ldr	r2, [pc, #204]	@ (8003724 <I2C1_BusRecovery+0x104>)
 8003656:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800365a:	6213      	str	r3, [r2, #32]

    // 2) Configura SCL e SDA come GPIO open-drain con pull-up interne
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 800365c:	2311      	movs	r3, #17
 800365e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003660:	2301      	movs	r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003664:	2302      	movs	r3, #2
 8003666:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin   = I2C_SCL_Pin | I2C_SDA_Pin;
 8003668:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800366c:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800366e:	463b      	mov	r3, r7
 8003670:	4619      	mov	r1, r3
 8003672:	482d      	ldr	r0, [pc, #180]	@ (8003728 <I2C1_BusRecovery+0x108>)
 8003674:	f003 fa04 	bl	8006a80 <HAL_GPIO_Init>

    // 3) Se SDA rimane bassa, genera fino a 9 clock manuali su SCL
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++) {
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e014      	b.n	80036a8 <I2C1_BusRecovery+0x88>
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_RESET);
 800367e:	2200      	movs	r2, #0
 8003680:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003684:	4828      	ldr	r0, [pc, #160]	@ (8003728 <I2C1_BusRecovery+0x108>)
 8003686:	f003 fba7 	bl	8006dd8 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800368a:	2001      	movs	r0, #1
 800368c:	f002 f8a4 	bl	80057d8 <HAL_Delay>
        HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8003690:	2201      	movs	r2, #1
 8003692:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003696:	4824      	ldr	r0, [pc, #144]	@ (8003728 <I2C1_BusRecovery+0x108>)
 8003698:	f003 fb9e 	bl	8006dd8 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800369c:	2001      	movs	r0, #1
 800369e:	f002 f89b 	bl	80057d8 <HAL_Delay>
    for (int i = 0; i < 9 && HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin) == GPIO_PIN_RESET; i++) {
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	3301      	adds	r3, #1
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	dc07      	bgt.n	80036be <I2C1_BusRecovery+0x9e>
 80036ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80036b2:	481d      	ldr	r0, [pc, #116]	@ (8003728 <I2C1_BusRecovery+0x108>)
 80036b4:	f003 fb78 	bl	8006da8 <HAL_GPIO_ReadPin>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0df      	beq.n	800367e <I2C1_BusRecovery+0x5e>
    }

    // 4) Genera un STOP: SDA da bassa → alta mentre SCL alto
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_RESET);
 80036be:	2200      	movs	r2, #0
 80036c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80036c4:	4818      	ldr	r0, [pc, #96]	@ (8003728 <I2C1_BusRecovery+0x108>)
 80036c6:	f003 fb87 	bl	8006dd8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80036ca:	2001      	movs	r0, #1
 80036cc:	f002 f884 	bl	80057d8 <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 80036d0:	2201      	movs	r2, #1
 80036d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036d6:	4814      	ldr	r0, [pc, #80]	@ (8003728 <I2C1_BusRecovery+0x108>)
 80036d8:	f003 fb7e 	bl	8006dd8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80036dc:	2001      	movs	r0, #1
 80036de:	f002 f87b 	bl	80057d8 <HAL_Delay>
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET);
 80036e2:	2201      	movs	r2, #1
 80036e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80036e8:	480f      	ldr	r0, [pc, #60]	@ (8003728 <I2C1_BusRecovery+0x108>)
 80036ea:	f003 fb75 	bl	8006dd8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80036ee:	2001      	movs	r0, #1
 80036f0:	f002 f872 	bl	80057d8 <HAL_Delay>

    // 5) Ripristina AF I2C su SCL e SDA
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036f4:	2312      	movs	r3, #18
 80036f6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;        // pull-up interne già attive
 80036f8:	2300      	movs	r3, #0
 80036fa:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed= GPIO_SPEED_FREQ_HIGH;
 80036fc:	2302      	movs	r3, #2
 80036fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pin  = I2C_SCL_Pin | I2C_SDA_Pin;
 8003700:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003704:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003706:	2304      	movs	r3, #4
 8003708:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370a:	463b      	mov	r3, r7
 800370c:	4619      	mov	r1, r3
 800370e:	4806      	ldr	r0, [pc, #24]	@ (8003728 <I2C1_BusRecovery+0x108>)
 8003710:	f003 f9b6 	bl	8006a80 <HAL_GPIO_Init>

    // 6) Ri-inizializza l’I2C
    MX_I2C1_Init();
 8003714:	f7fd fe7e 	bl	8001414 <MX_I2C1_Init>
}
 8003718:	bf00      	nop
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200005f8 	.word	0x200005f8
 8003724:	40023800 	.word	0x40023800
 8003728:	40020400 	.word	0x40020400

0800372c <Robot_init>:


void Robot_init(robot_t *robot) {
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af02      	add	r7, sp, #8
 8003732:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(&htim6);						// Display timer (0.1MHz)
 8003734:	483f      	ldr	r0, [pc, #252]	@ (8003834 <Robot_init+0x108>)
 8003736:	f005 ffdd 	bl	80096f4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);						// Timeline
 800373a:	483f      	ldr	r0, [pc, #252]	@ (8003838 <Robot_init+0x10c>)
 800373c:	f005 ffda 	bl	80096f4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);						// Stepper timer
 8003740:	483e      	ldr	r0, [pc, #248]	@ (800383c <Robot_init+0x110>)
 8003742:	f005 ffd7 	bl	80096f4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);		// Encoder right
 8003746:	213c      	movs	r1, #60	@ 0x3c
 8003748:	483d      	ldr	r0, [pc, #244]	@ (8003840 <Robot_init+0x114>)
 800374a:	f006 fb71 	bl	8009e30 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
 800374e:	2108      	movs	r1, #8
 8003750:	483b      	ldr	r0, [pc, #236]	@ (8003840 <Robot_init+0x114>)
 8003752:	f006 f88f 	bl	8009874 <HAL_TIM_OC_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);		// Encoder left
 8003756:	213c      	movs	r1, #60	@ 0x3c
 8003758:	483a      	ldr	r0, [pc, #232]	@ (8003844 <Robot_init+0x118>)
 800375a:	f006 fb69 	bl	8009e30 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_3);
 800375e:	2108      	movs	r1, #8
 8003760:	4838      	ldr	r0, [pc, #224]	@ (8003844 <Robot_init+0x118>)
 8003762:	f006 f887 	bl	8009874 <HAL_TIM_OC_Start_IT>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);			// Stepper left
 8003766:	2104      	movs	r1, #4
 8003768:	4837      	ldr	r0, [pc, #220]	@ (8003848 <Robot_init+0x11c>)
 800376a:	f006 f9e9 	bl	8009b40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);			// Stepper right
 800376e:	2100      	movs	r1, #0
 8003770:	4836      	ldr	r0, [pc, #216]	@ (800384c <Robot_init+0x120>)
 8003772:	f006 f9e5 	bl	8009b40 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(&htim8);						// Virtual timer overflow timer
 8003776:	4836      	ldr	r0, [pc, #216]	@ (8003850 <Robot_init+0x124>)
 8003778:	f005 ff54 	bl	8009624 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim1);						// Microsecond timer
 800377c:	4835      	ldr	r0, [pc, #212]	@ (8003854 <Robot_init+0x128>)
 800377e:	f005 ff51 	bl	8009624 <HAL_TIM_Base_Start>

	MAX72_init(&display);
 8003782:	4835      	ldr	r0, [pc, #212]	@ (8003858 <Robot_init+0x12c>)
 8003784:	f000 fc50 	bl	8004028 <MAX72_init>

	while(!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR)){
 8003788:	e005      	b.n	8003796 <Robot_init+0x6a>
		MAX72_Print_String("I2C", NO_SETTINGS);
 800378a:	2100      	movs	r1, #0
 800378c:	4833      	ldr	r0, [pc, #204]	@ (800385c <Robot_init+0x130>)
 800378e:	f000 fe9b 	bl	80044c8 <MAX72_Print_String>
		I2C1_BusRecovery(); // Attempt to recover I2C bus if IMU init fails
 8003792:	f7ff ff45 	bl	8003620 <I2C1_BusRecovery>
	while(!IMU_Init(&imu, &hi2c1, MPU_6050_ADDR)){
 8003796:	22d0      	movs	r2, #208	@ 0xd0
 8003798:	4931      	ldr	r1, [pc, #196]	@ (8003860 <Robot_init+0x134>)
 800379a:	4832      	ldr	r0, [pc, #200]	@ (8003864 <Robot_init+0x138>)
 800379c:	f7ff fc76 	bl	800308c <IMU_Init>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f1      	beq.n	800378a <Robot_init+0x5e>
	}
	MAX72_Clear();
 80037a6:	f000 fce1 	bl	800416c <MAX72_Clear>
    robot->imu = &imu;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003864 <Robot_init+0x138>)
 80037ae:	601a      	str	r2, [r3, #0]

	Encoder_init(&encoder_l, &htim3, &htim7, -1);
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037b4:	4a20      	ldr	r2, [pc, #128]	@ (8003838 <Robot_init+0x10c>)
 80037b6:	4922      	ldr	r1, [pc, #136]	@ (8003840 <Robot_init+0x114>)
 80037b8:	482b      	ldr	r0, [pc, #172]	@ (8003868 <Robot_init+0x13c>)
 80037ba:	f7ff fb2d 	bl	8002e18 <Encoder_init>
    robot->encoder_l = &encoder_l;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a29      	ldr	r2, [pc, #164]	@ (8003868 <Robot_init+0x13c>)
 80037c2:	605a      	str	r2, [r3, #4]
	Stepper_init(&stepper_l, &htim5, TIM_CHANNEL_1, &encoder_l, GPIOA, GPIO_PIN_4);
 80037c4:	2310      	movs	r3, #16
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	4b28      	ldr	r3, [pc, #160]	@ (800386c <Robot_init+0x140>)
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	4b26      	ldr	r3, [pc, #152]	@ (8003868 <Robot_init+0x13c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	491e      	ldr	r1, [pc, #120]	@ (800384c <Robot_init+0x120>)
 80037d2:	4827      	ldr	r0, [pc, #156]	@ (8003870 <Robot_init+0x144>)
 80037d4:	f000 fbb4 	bl	8003f40 <Stepper_init>
    robot->stepper_l = &stepper_l;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a25      	ldr	r2, [pc, #148]	@ (8003870 <Robot_init+0x144>)
 80037dc:	60da      	str	r2, [r3, #12]
	Encoder_init(&encoder_r, &htim4, &htim7, 1);
 80037de:	2301      	movs	r3, #1
 80037e0:	4a15      	ldr	r2, [pc, #84]	@ (8003838 <Robot_init+0x10c>)
 80037e2:	4918      	ldr	r1, [pc, #96]	@ (8003844 <Robot_init+0x118>)
 80037e4:	4823      	ldr	r0, [pc, #140]	@ (8003874 <Robot_init+0x148>)
 80037e6:	f7ff fb17 	bl	8002e18 <Encoder_init>
    robot->encoder_r = &encoder_r;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a21      	ldr	r2, [pc, #132]	@ (8003874 <Robot_init+0x148>)
 80037ee:	609a      	str	r2, [r3, #8]
	Stepper_init(&stepper_r, &htim2, TIM_CHANNEL_2, &encoder_r, GPIOB, GPIO_PIN_0);
 80037f0:	2301      	movs	r3, #1
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	4b20      	ldr	r3, [pc, #128]	@ (8003878 <Robot_init+0x14c>)
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003874 <Robot_init+0x148>)
 80037fa:	2204      	movs	r2, #4
 80037fc:	4912      	ldr	r1, [pc, #72]	@ (8003848 <Robot_init+0x11c>)
 80037fe:	481f      	ldr	r0, [pc, #124]	@ (800387c <Robot_init+0x150>)
 8003800:	f000 fb9e 	bl	8003f40 <Stepper_init>
    robot->stepper_r = &stepper_r;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a1d      	ldr	r2, [pc, #116]	@ (800387c <Robot_init+0x150>)
 8003808:	611a      	str	r2, [r3, #16]

	PowerModule_init(&power_module, &hadc1);
 800380a:	491d      	ldr	r1, [pc, #116]	@ (8003880 <Robot_init+0x154>)
 800380c:	481d      	ldr	r0, [pc, #116]	@ (8003884 <Robot_init+0x158>)
 800380e:	f7ff fe93 	bl	8003538 <PowerModule_init>
	robot->power_module = &power_module;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1b      	ldr	r2, [pc, #108]	@ (8003884 <Robot_init+0x158>)
 8003816:	615a      	str	r2, [r3, #20]

    PID_Init(&pid);
 8003818:	481b      	ldr	r0, [pc, #108]	@ (8003888 <Robot_init+0x15c>)
 800381a:	f000 f837 	bl	800388c <PID_Init>
    robot->pid = &pid;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a19      	ldr	r2, [pc, #100]	@ (8003888 <Robot_init+0x15c>)
 8003822:	619a      	str	r2, [r3, #24]

    robot->base_angle_config = 0;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	771a      	strb	r2, [r3, #28]
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	200008a4 	.word	0x200008a4
 8003838:	200008ec 	.word	0x200008ec
 800383c:	2000097c 	.word	0x2000097c
 8003840:	200007cc 	.word	0x200007cc
 8003844:	20000814 	.word	0x20000814
 8003848:	20000784 	.word	0x20000784
 800384c:	2000085c 	.word	0x2000085c
 8003850:	20000934 	.word	0x20000934
 8003854:	2000073c 	.word	0x2000073c
 8003858:	20000d08 	.word	0x20000d08
 800385c:	08011308 	.word	0x08011308
 8003860:	200005f8 	.word	0x200005f8
 8003864:	20000bc8 	.word	0x20000bc8
 8003868:	20000b44 	.word	0x20000b44
 800386c:	40020000 	.word	0x40020000
 8003870:	20000ba4 	.word	0x20000ba4
 8003874:	20000ac0 	.word	0x20000ac0
 8003878:	40020400 	.word	0x40020400
 800387c:	20000b20 	.word	0x20000b20
 8003880:	200005b0 	.word	0x200005b0
 8003884:	20000c0c 	.word	0x20000c0c
 8003888:	20000cb8 	.word	0x20000cb8

0800388c <PID_Init>:
        robot->pid->js_angle_offset_sp = js_y * max_angle_offset; // Map joystick Y to speed setpoint
    }
}


void PID_Init(pid_t *pid){
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	pid->Kp = -1.7f;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a1e      	ldr	r2, [pc, #120]	@ (8003910 <PID_Init+0x84>)
 8003898:	601a      	str	r2, [r3, #0]
	pid->Ki = -40.0f;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a1d      	ldr	r2, [pc, #116]	@ (8003914 <PID_Init+0x88>)
 800389e:	605a      	str	r2, [r3, #4]
	pid->Kd = -0.003f;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003918 <PID_Init+0x8c>)
 80038a4:	609a      	str	r2, [r3, #8]

	pid->base_angle_sp = -0.2f;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a1c      	ldr	r2, [pc, #112]	@ (800391c <PID_Init+0x90>)
 80038aa:	60da      	str	r2, [r3, #12]

	pid->js_angle_offset_sp = 0.0f;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	619a      	str	r2, [r3, #24]
	pid->js_angle_offset = 0.0f;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	61da      	str	r2, [r3, #28]

	pid->js_multiplier = 1.0f;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80038c2:	621a      	str	r2, [r3, #32]
	pid->js_multiplier_sp = 1.0f;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80038ca:	625a      	str	r2, [r3, #36]	@ 0x24

    pid->Kp_speed = 1.4f;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a14      	ldr	r2, [pc, #80]	@ (8003920 <PID_Init+0x94>)
 80038d0:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->Ki_speed = 0.0f;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    pid->Kd_speed = 0.0015f;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a11      	ldr	r2, [pc, #68]	@ (8003924 <PID_Init+0x98>)
 80038de:	631a      	str	r2, [r3, #48]	@ 0x30

    pid->speed_sp = 0.0f; // Do not change, change via joystick
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	635a      	str	r2, [r3, #52]	@ 0x34

    pid->max_angle_offset = 2.0f;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038ee:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->angle_sp = 0.0f; // Do not change, it is only for CubeMonitor
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	645a      	str	r2, [r3, #68]	@ 0x44

    pid->active = 0;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    PID_Reset(pid);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f9ef 	bl	8003ce4 <PID_Reset>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	bfd9999a 	.word	0xbfd9999a
 8003914:	c2200000 	.word	0xc2200000
 8003918:	bb449ba6 	.word	0xbb449ba6
 800391c:	be4ccccd 	.word	0xbe4ccccd
 8003920:	3fb33333 	.word	0x3fb33333
 8003924:	3ac49ba6 	.word	0x3ac49ba6

08003928 <PID_Update>:

void PID_Update(pid_t *pid) {
 8003928:	b5b0      	push	{r4, r5, r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
    float speed_err = pid->speed_sp - (encoder_r.speed + encoder_l.speed)/2.0f;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003936:	4bc9      	ldr	r3, [pc, #804]	@ (8003c5c <PID_Update+0x334>)
 8003938:	edd3 6a02 	vldr	s13, [r3, #8]
 800393c:	4bc8      	ldr	r3, [pc, #800]	@ (8003c60 <PID_Update+0x338>)
 800393e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003942:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003946:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800394a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800394e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003952:	edc7 7a06 	vstr	s15, [r7, #24]

    pid->integral_speed_err += speed_err * SAMPLING_PERIOD;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800395c:	4bc1      	ldr	r3, [pc, #772]	@ (8003c64 <PID_Update+0x33c>)
 800395e:	edd3 6a00 	vldr	s13, [r3]
 8003962:	edd7 7a06 	vldr	s15, [r7, #24]
 8003966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800396a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    float derivative_speed_err = (speed_err - pid->last_speed_err)/SAMPLING_PERIOD;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800397a:	ed97 7a06 	vldr	s14, [r7, #24]
 800397e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003982:	4bb8      	ldr	r3, [pc, #736]	@ (8003c64 <PID_Update+0x33c>)
 8003984:	ed93 7a00 	vldr	s14, [r3]
 8003988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800398c:	edc7 7a05 	vstr	s15, [r7, #20]

    float angle_offset = pid->Kp_speed * speed_err + pid->Ki_speed * pid->integral_speed_err + pid->Kd_speed * derivative_speed_err;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003996:	edd7 7a06 	vldr	s15, [r7, #24]
 800399a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80039aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80039b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80039bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c4:	edc7 7a07 	vstr	s15, [r7, #28]

    if (angle_offset > pid->max_angle_offset) angle_offset = pid->max_angle_offset;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80039ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80039d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039da:	dd03      	ble.n	80039e4 <PID_Update+0xbc>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	e012      	b.n	8003a0a <PID_Update+0xe2>
    else if (angle_offset < -pid->max_angle_offset) angle_offset = -pid->max_angle_offset;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80039ea:	eef1 7a67 	vneg.f32	s15, s15
 80039ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80039f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fa:	d506      	bpl.n	8003a0a <PID_Update+0xe2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003a02:	eef1 7a67 	vneg.f32	s15, s15
 8003a06:	edc7 7a07 	vstr	s15, [r7, #28]

    pid->js_angle_offset = alpha * pid->js_angle_offset_sp + (1.0f - alpha) * pid->js_angle_offset;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	ed93 7a06 	vldr	s14, [r3, #24]
 8003a10:	4b95      	ldr	r3, [pc, #596]	@ (8003c68 <PID_Update+0x340>)
 8003a12:	edd3 7a00 	vldr	s15, [r3]
 8003a16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a1a:	4b93      	ldr	r3, [pc, #588]	@ (8003c68 <PID_Update+0x340>)
 8003a1c:	edd3 7a00 	vldr	s15, [r3]
 8003a20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	edd3 7a07 	vldr	s15, [r3, #28]
 8003a2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->angle_sp = pid->base_angle_sp + angle_offset + pid->js_angle_offset;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a42:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

	float error = pid->angle_sp - imu.angle;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8003a60:	4b82      	ldr	r3, [pc, #520]	@ (8003c6c <PID_Update+0x344>)
 8003a62:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a6a:	edc7 7a04 	vstr	s15, [r7, #16]

	pid->integral_error += error * SAMPLING_PERIOD;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	ed93 7a04 	vldr	s14, [r3, #16]
 8003a74:	4b7b      	ldr	r3, [pc, #492]	@ (8003c64 <PID_Update+0x33c>)
 8003a76:	edd3 6a00 	vldr	s13, [r3]
 8003a7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	edc3 7a04 	vstr	s15, [r3, #16]
	float derivative_error = (error - pid->last_error)/SAMPLING_PERIOD;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a92:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a96:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003a9a:	4b72      	ldr	r3, [pc, #456]	@ (8003c64 <PID_Update+0x33c>)
 8003a9c:	ed93 7a00 	vldr	s14, [r3]
 8003aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aa4:	edc7 7a03 	vstr	s15, [r7, #12]

	float speed_setpoint = pid->Kp * error + 
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	ed93 7a00 	vldr	s14, [r3]
 8003aae:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
                            pid->Ki * pid->integral_error +
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	edd3 6a01 	vldr	s13, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_setpoint = pid->Kp * error + 
 8003ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
                            pid->Kd * derivative_error;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	edd3 6a02 	vldr	s13, [r3, #8]
 8003ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float speed_setpoint = pid->Kp * error + 
 8003ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003adc:	edc7 7a02 	vstr	s15, [r7, #8]

	pid->js_multiplier = alpha * pid->js_multiplier_sp + (1.0f - alpha) * pid->js_multiplier;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003ae6:	4b60      	ldr	r3, [pc, #384]	@ (8003c68 <PID_Update+0x340>)
 8003ae8:	edd3 7a00 	vldr	s15, [r3]
 8003aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003af0:	4b5d      	ldr	r3, [pc, #372]	@ (8003c68 <PID_Update+0x340>)
 8003af2:	edd3 7a00 	vldr	s15, [r3]
 8003af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003afa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	edc3 7a08 	vstr	s15, [r3, #32]

    if (fabs(error) > 30.0f) {
 8003b12:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b16:	eef0 7ae7 	vabs.f32	s15, s15
 8003b1a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8003b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b26:	dd0d      	ble.n	8003b44 <PID_Update+0x21c>
        set_speed(&stepper_l, 0.0f);
 8003b28:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8003c70 <PID_Update+0x348>
 8003b2c:	4851      	ldr	r0, [pc, #324]	@ (8003c74 <PID_Update+0x34c>)
 8003b2e:	f000 f9f7 	bl	8003f20 <set_speed>
        set_speed(&stepper_r, 0.0f);
 8003b32:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8003c70 <PID_Update+0x348>
 8003b36:	4850      	ldr	r0, [pc, #320]	@ (8003c78 <PID_Update+0x350>)
 8003b38:	f000 f9f2 	bl	8003f20 <set_speed>
        PID_Reset(pid);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f8d1 	bl	8003ce4 <PID_Reset>
 8003b42:	e0bf      	b.n	8003cc4 <PID_Update+0x39c>
    }else {
		if(pid->js_multiplier > 0.9f || pid->js_multiplier < -0.9f){
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b4a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003c7c <PID_Update+0x354>
 8003b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b56:	dc09      	bgt.n	8003b6c <PID_Update+0x244>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b5e:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003c80 <PID_Update+0x358>
 8003b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6a:	d50a      	bpl.n	8003b82 <PID_Update+0x25a>
			set_speed(&stepper_l, speed_setpoint);
 8003b6c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003b70:	4840      	ldr	r0, [pc, #256]	@ (8003c74 <PID_Update+0x34c>)
 8003b72:	f000 f9d5 	bl	8003f20 <set_speed>
			set_speed(&stepper_r, speed_setpoint);
 8003b76:	ed97 0a02 	vldr	s0, [r7, #8]
 8003b7a:	483f      	ldr	r0, [pc, #252]	@ (8003c78 <PID_Update+0x350>)
 8003b7c:	f000 f9d0 	bl	8003f20 <set_speed>
 8003b80:	e0a0      	b.n	8003cc4 <PID_Update+0x39c>
		} else if (pid->js_multiplier > 0.0f) {
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b90:	dd3f      	ble.n	8003c12 <PID_Update+0x2ea>
			set_speed(&stepper_l, speed_setpoint);
 8003b92:	ed97 0a02 	vldr	s0, [r7, #8]
 8003b96:	4837      	ldr	r0, [pc, #220]	@ (8003c74 <PID_Update+0x34c>)
 8003b98:	f000 f9c2 	bl	8003f20 <set_speed>
			set_speed(&stepper_r, speed_setpoint * (pid->js_multiplier/2 + (fabs(pid->js_angle_offset) < 0.3f ? 0 : 0.5)));
 8003b9c:	68b8      	ldr	r0, [r7, #8]
 8003b9e:	f7fc fd03 	bl	80005a8 <__aeabi_f2d>
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	460d      	mov	r5, r1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	edd3 7a08 	vldr	s15, [r3, #32]
 8003bac:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003bb0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003bb4:	ee16 0a90 	vmov	r0, s13
 8003bb8:	f7fc fcf6 	bl	80005a8 <__aeabi_f2d>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	edd1 7a07 	vldr	s15, [r1, #28]
 8003bc6:	eef0 7ae7 	vabs.f32	s15, s15
 8003bca:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003c84 <PID_Update+0x35c>
 8003bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd6:	d504      	bpl.n	8003be2 <PID_Update+0x2ba>
 8003bd8:	f04f 0000 	mov.w	r0, #0
 8003bdc:	f04f 0100 	mov.w	r1, #0
 8003be0:	e002      	b.n	8003be8 <PID_Update+0x2c0>
 8003be2:	f04f 0000 	mov.w	r0, #0
 8003be6:	4928      	ldr	r1, [pc, #160]	@ (8003c88 <PID_Update+0x360>)
 8003be8:	f7fc fb80 	bl	80002ec <__adddf3>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	f7fc fd30 	bl	8000658 <__aeabi_dmul>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4619      	mov	r1, r3
 8003c00:	f7fd f822 	bl	8000c48 <__aeabi_d2f>
 8003c04:	4603      	mov	r3, r0
 8003c06:	ee00 3a10 	vmov	s0, r3
 8003c0a:	481b      	ldr	r0, [pc, #108]	@ (8003c78 <PID_Update+0x350>)
 8003c0c:	f000 f988 	bl	8003f20 <set_speed>
 8003c10:	e058      	b.n	8003cc4 <PID_Update+0x39c>
		} else {
			set_speed(&stepper_l, speed_setpoint * (-pid->js_multiplier/2 + (fabs(pid->js_angle_offset) < 0.3f ? 0 : 0.5)));
 8003c12:	68b8      	ldr	r0, [r7, #8]
 8003c14:	f7fc fcc8 	bl	80005a8 <__aeabi_f2d>
 8003c18:	4604      	mov	r4, r0
 8003c1a:	460d      	mov	r5, r1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c22:	eef1 7a67 	vneg.f32	s15, s15
 8003c26:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003c2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c2e:	ee16 0a90 	vmov	r0, s13
 8003c32:	f7fc fcb9 	bl	80005a8 <__aeabi_f2d>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	edd1 7a07 	vldr	s15, [r1, #28]
 8003c40:	eef0 7ae7 	vabs.f32	s15, s15
 8003c44:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003c84 <PID_Update+0x35c>
 8003c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	d51c      	bpl.n	8003c8c <PID_Update+0x364>
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	e01a      	b.n	8003c92 <PID_Update+0x36a>
 8003c5c:	20000ac0 	.word	0x20000ac0
 8003c60:	20000b44 	.word	0x20000b44
 8003c64:	20000ab8 	.word	0x20000ab8
 8003c68:	20000008 	.word	0x20000008
 8003c6c:	20000bc8 	.word	0x20000bc8
 8003c70:	00000000 	.word	0x00000000
 8003c74:	20000ba4 	.word	0x20000ba4
 8003c78:	20000b20 	.word	0x20000b20
 8003c7c:	3f666666 	.word	0x3f666666
 8003c80:	bf666666 	.word	0xbf666666
 8003c84:	3e99999a 	.word	0x3e99999a
 8003c88:	3fe00000 	.word	0x3fe00000
 8003c8c:	f04f 0000 	mov.w	r0, #0
 8003c90:	4911      	ldr	r1, [pc, #68]	@ (8003cd8 <PID_Update+0x3b0>)
 8003c92:	f7fc fb2b 	bl	80002ec <__adddf3>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	f7fc fcdb 	bl	8000658 <__aeabi_dmul>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f7fc ffcd 	bl	8000c48 <__aeabi_d2f>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	ee00 3a10 	vmov	s0, r3
 8003cb4:	4809      	ldr	r0, [pc, #36]	@ (8003cdc <PID_Update+0x3b4>)
 8003cb6:	f000 f933 	bl	8003f20 <set_speed>
			set_speed(&stepper_r, speed_setpoint);
 8003cba:	ed97 0a02 	vldr	s0, [r7, #8]
 8003cbe:	4808      	ldr	r0, [pc, #32]	@ (8003ce0 <PID_Update+0x3b8>)
 8003cc0:	f000 f92e 	bl	8003f20 <set_speed>
		}
    }

    pid->last_speed_err = speed_err;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid->last_error = error;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	615a      	str	r2, [r3, #20]
}
 8003cd0:	bf00      	nop
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd8:	3fe00000 	.word	0x3fe00000
 8003cdc:	20000ba4 	.word	0x20000ba4
 8003ce0:	20000b20 	.word	0x20000b20

08003ce4 <PID_Reset>:

void PID_Reset(pid_t *pid) {
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
    pid->integral_error = 0.0f;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	611a      	str	r2, [r3, #16]
    pid->integral_speed_err = 0.0f;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	639a      	str	r2, [r3, #56]	@ 0x38
    pid->last_error = 0.0f;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	615a      	str	r2, [r3, #20]
    pid->last_speed_err = 0.0f;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    pid->js_angle_offset_sp = 0.0f;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	619a      	str	r2, [r3, #24]
    pid->js_angle_offset = 0.0f;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	61da      	str	r2, [r3, #28]
    pid->js_multiplier_sp = 1.0f;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003d22:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->js_multiplier = 1.0f;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003d2a:	621a      	str	r2, [r3, #32]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <speed_control>:
#define AEP 30 // Actual Error Proportional gain
#define LEP 205 // Last Error Proportional gain

float freq = 0.0f; // Frequency in Hz

void speed_control(stepper_t *stepper){
 8003d38:	b5b0      	push	{r4, r5, r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	Encoder_read(stepper->encoder);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff f8ef 	bl	8002f28 <Encoder_read>

	float e = stepper->setpoint_speed - stepper->encoder->speed;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d5c:	edc7 7a03 	vstr	s15, [r7, #12]

	// stepper->frequency += e / ANGLE_STEP; // Integral only controller

	stepper->frequency += e * AEP + stepper->last_error * LEP; // PI controller
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d66:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d6a:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8003d6e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	edd3 7a00 	vldr	s15, [r3]
 8003d78:	ed9f 6a64 	vldr	s12, [pc, #400]	@ 8003f0c <speed_control+0x1d4>
 8003d7c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	edc3 7a03 	vstr	s15, [r3, #12]
	stepper->last_error = e;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	601a      	str	r2, [r3, #0]

	uint8_t sign = stepper->frequency > 0;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da2:	bfcc      	ite	gt
 8003da4:	2301      	movgt	r3, #1
 8003da6:	2300      	movle	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	72fb      	strb	r3, [r7, #11]

	freq = stepper->frequency; // Store frequency for debugging
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a57      	ldr	r2, [pc, #348]	@ (8003f10 <speed_control+0x1d8>)
 8003db2:	6013      	str	r3, [r2, #0]
//	stepper->frequency = 255;

	if (fabs(stepper->frequency) > MAX_CTRL_FREQUENCY) {
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003dba:	eef0 7ae7 	vabs.f32	s15, s15
 8003dbe:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003f14 <speed_control+0x1dc>
 8003dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dca:	dd3c      	ble.n	8003e46 <speed_control+0x10e>
		stepper->frequency = MAX_CTRL_FREQUENCY * (sign?1:-1); // Limit frequency to 9000 Hz
 8003dcc:	7afb      	ldrb	r3, [r7, #11]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <speed_control+0xa0>
 8003dd2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003dd6:	e001      	b.n	8003ddc <speed_control+0xa4>
 8003dd8:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8003ddc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003f14 <speed_control+0x1dc>
 8003de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	edc3 7a03 	vstr	s15, [r3, #12]
		stepper->last_error = (sign && stepper->last_error>0) || (!sign && stepper->last_error<0) ? 0 : stepper->last_error; // Reset last error if the direction has changed
 8003dea:	7afb      	ldrb	r3, [r7, #11]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00f      	beq.n	8003e10 <speed_control+0xd8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	edd3 7a00 	vldr	s15, [r3]
 8003df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfe:	bfcc      	ite	gt
 8003e00:	2301      	movgt	r3, #1
 8003e02:	2300      	movle	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f083 0301 	eor.w	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <speed_control+0x104>
 8003e10:	7afb      	ldrb	r3, [r7, #11]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <speed_control+0xfe>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	edd3 7a00 	vldr	s15, [r3]
 8003e1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e24:	bf4c      	ite	mi
 8003e26:	2301      	movmi	r3, #1
 8003e28:	2300      	movpl	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f083 0301 	eor.w	r3, r3, #1
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <speed_control+0x104>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	e001      	b.n	8003e40 <speed_control+0x108>
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	e00f      	b.n	8003e66 <speed_control+0x12e>
	} else if (fabs(stepper->frequency) < 20) {
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e4c:	eef0 7ae7 	vabs.f32	s15, s15
 8003e50:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5c:	d503      	bpl.n	8003e66 <speed_control+0x12e>
		stepper->frequency = 0; // Stop the motor if frequency is too low
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	60da      	str	r2, [r3, #12]
	}

	HAL_GPIO_WritePin(stepper->DIR_PORT, stepper->DIR_PIN, (stepper->encoder->direction_invert > 0 ? sign : !sign));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69d8      	ldr	r0, [r3, #28]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8c19      	ldrh	r1, [r3, #32]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	dc06      	bgt.n	8003e88 <speed_control+0x150>
 8003e7a:	7afb      	ldrb	r3, [r7, #11]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e000      	b.n	8003e8a <speed_control+0x152>
 8003e88:	7afb      	ldrb	r3, [r7, #11]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f002 ffa4 	bl	8006dd8 <HAL_GPIO_WritePin>

	stepper->tim->ARR = fabs(1/stepper->frequency)*HCLK-1; // period = (1+ARR)*(1+PSC)/HCLK;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e9e:	eef0 7ae7 	vabs.f32	s15, s15
 8003ea2:	ee17 0a90 	vmov	r0, s15
 8003ea6:	f7fc fb7f 	bl	80005a8 <__aeabi_f2d>
 8003eaa:	4604      	mov	r4, r0
 8003eac:	460d      	mov	r5, r1
 8003eae:	4b1a      	ldr	r3, [pc, #104]	@ (8003f18 <speed_control+0x1e0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fc fb56 	bl	8000564 <__aeabi_ui2d>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f7fc fbca 	bl	8000658 <__aeabi_dmul>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4610      	mov	r0, r2
 8003eca:	4619      	mov	r1, r3
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <speed_control+0x1e4>)
 8003ed2:	f7fc fa09 	bl	80002e8 <__aeabi_dsub>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695c      	ldr	r4, [r3, #20]
 8003ee2:	f7fc fe91 	bl	8000c08 <__aeabi_d2uiz>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	62e3      	str	r3, [r4, #44]	@ 0x2c
	*stepper->CCR = (stepper->tim->ARR+1)/2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	0852      	lsrs	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
	stepper->tim->EGR = TIM_EGR_UG;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	2201      	movs	r2, #1
 8003f00:	615a      	str	r2, [r3, #20]
}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bdb0      	pop	{r4, r5, r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	434d0000 	.word	0x434d0000
 8003f10:	20000d04 	.word	0x20000d04
 8003f14:	460ca000 	.word	0x460ca000
 8003f18:	20000abc 	.word	0x20000abc
 8003f1c:	3ff00000 	.word	0x3ff00000

08003f20 <set_speed>:

void set_speed(stepper_t *stepper, float speed){
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	ed87 0a00 	vstr	s0, [r7]
	stepper->setpoint_speed = speed;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	609a      	str	r2, [r3, #8]
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <Stepper_init>:

void Stepper_init(stepper_t *stepper, TIM_HandleTypeDef *htim, uint32_t tim_channel,
		encoder_t *encoder, GPIO_TypeDef *DIR_PORT, uint16_t DIR_PIN){
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
	stepper->angle_step = ANGLE_STEP;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4a34      	ldr	r2, [pc, #208]	@ (8004024 <Stepper_init+0xe4>)
 8003f52:	605a      	str	r2, [r3, #4]
	stepper->tim = htim->Instance;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	615a      	str	r2, [r3, #20]
	stepper->DIR_PORT = DIR_PORT;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	61da      	str	r2, [r3, #28]
	stepper->DIR_PIN = DIR_PIN;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8bba      	ldrh	r2, [r7, #28]
 8003f66:	841a      	strh	r2, [r3, #32]
	switch (tim_channel){
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d838      	bhi.n	8003fe0 <Stepper_init+0xa0>
 8003f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f74 <Stepper_init+0x34>)
 8003f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f74:	08003fa9 	.word	0x08003fa9
 8003f78:	08003fe1 	.word	0x08003fe1
 8003f7c:	08003fe1 	.word	0x08003fe1
 8003f80:	08003fe1 	.word	0x08003fe1
 8003f84:	08003fb7 	.word	0x08003fb7
 8003f88:	08003fe1 	.word	0x08003fe1
 8003f8c:	08003fe1 	.word	0x08003fe1
 8003f90:	08003fe1 	.word	0x08003fe1
 8003f94:	08003fc5 	.word	0x08003fc5
 8003f98:	08003fe1 	.word	0x08003fe1
 8003f9c:	08003fe1 	.word	0x08003fe1
 8003fa0:	08003fe1 	.word	0x08003fe1
 8003fa4:	08003fd3 	.word	0x08003fd3
	case TIM_CHANNEL_1:
		stepper->CCR = &stepper->tim->CCR1;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	619a      	str	r2, [r3, #24]
		break;
 8003fb4:	e018      	b.n	8003fe8 <Stepper_init+0xa8>
	case TIM_CHANNEL_2:
		stepper->CCR = &stepper->tim->CCR2;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	619a      	str	r2, [r3, #24]
		break;
 8003fc2:	e011      	b.n	8003fe8 <Stepper_init+0xa8>
	case TIM_CHANNEL_3:
		stepper->CCR = &stepper->tim->CCR3;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	619a      	str	r2, [r3, #24]
		break;
 8003fd0:	e00a      	b.n	8003fe8 <Stepper_init+0xa8>
	case TIM_CHANNEL_4:
		stepper->CCR = &stepper->tim->CCR4;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	619a      	str	r2, [r3, #24]
		break;
 8003fde:	e003      	b.n	8003fe8 <Stepper_init+0xa8>
	default:
		stepper->CCR = NULL;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	619a      	str	r2, [r3, #24]
		break;
 8003fe6:	bf00      	nop
	}

	if (stepper->CCR != NULL)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <Stepper_init+0xb8>
		*stepper->CCR = 0; // Disattiva il PWM (duty cycle 0)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

	stepper->encoder = encoder;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	611a      	str	r2, [r3, #16]
	stepper->setpoint_speed = 0;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
	stepper->frequency = 0;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	60da      	str	r2, [r3, #12]
	stepper->last_error = 0;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	3a80adff 	.word	0x3a80adff

08004028 <MAX72_init>:
    {0x0C, 0x01}, // Shutdown Register: normal operation
    {0x0F, 0x00}  // Display Test: off
};

void MAX72_init(display_t *display)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[8];
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8004030:	2300      	movs	r3, #0
 8004032:	75fb      	strb	r3, [r7, #23]
 8004034:	e035      	b.n	80040a2 <MAX72_init+0x7a>
        // riempi txBuf con 4 volte InitCommands[cmd]
        for (uint8_t dev=0; dev<4; dev++) {
 8004036:	2300      	movs	r3, #0
 8004038:	75bb      	strb	r3, [r7, #22]
 800403a:	e01a      	b.n	8004072 <MAX72_init+0x4a>
            txBuf[dev*2]   = InitCommands[cmd][0];
 800403c:	7dfa      	ldrb	r2, [r7, #23]
 800403e:	7dbb      	ldrb	r3, [r7, #22]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4929      	ldr	r1, [pc, #164]	@ (80040e8 <MAX72_init+0xc0>)
 8004044:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8004048:	3318      	adds	r3, #24
 800404a:	443b      	add	r3, r7
 800404c:	f803 2c0c 	strb.w	r2, [r3, #-12]
            txBuf[dev*2+1] = InitCommands[cmd][1];
 8004050:	7dfb      	ldrb	r3, [r7, #23]
 8004052:	7dba      	ldrb	r2, [r7, #22]
 8004054:	0052      	lsls	r2, r2, #1
 8004056:	3201      	adds	r2, #1
 8004058:	4923      	ldr	r1, [pc, #140]	@ (80040e8 <MAX72_init+0xc0>)
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	440b      	add	r3, r1
 800405e:	7859      	ldrb	r1, [r3, #1]
 8004060:	f102 0318 	add.w	r3, r2, #24
 8004064:	443b      	add	r3, r7
 8004066:	460a      	mov	r2, r1
 8004068:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (uint8_t dev=0; dev<4; dev++) {
 800406c:	7dbb      	ldrb	r3, [r7, #22]
 800406e:	3301      	adds	r3, #1
 8004070:	75bb      	strb	r3, [r7, #22]
 8004072:	7dbb      	ldrb	r3, [r7, #22]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d9e1      	bls.n	800403c <MAX72_init+0x14>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // CS
 8004078:	2200      	movs	r2, #0
 800407a:	2110      	movs	r1, #16
 800407c:	481b      	ldr	r0, [pc, #108]	@ (80040ec <MAX72_init+0xc4>)
 800407e:	f002 feab 	bl	8006dd8 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8004082:	f107 010c 	add.w	r1, r7, #12
 8004086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800408a:	2208      	movs	r2, #8
 800408c:	4818      	ldr	r0, [pc, #96]	@ (80040f0 <MAX72_init+0xc8>)
 800408e:	f005 f858 	bl	8009142 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // CS
 8004092:	2201      	movs	r2, #1
 8004094:	2110      	movs	r1, #16
 8004096:	4815      	ldr	r0, [pc, #84]	@ (80040ec <MAX72_init+0xc4>)
 8004098:	f002 fe9e 	bl	8006dd8 <HAL_GPIO_WritePin>
    for (uint8_t cmd=0; cmd<5; cmd++) {
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	3301      	adds	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d9c6      	bls.n	8004036 <MAX72_init+0xe>
    }

    display->data_count = 0; // Inizializza il numero di dati a 0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    display->current_index = 0; // Inizializza l'indice corrente a 0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    display->data_duration = 5; // Imposta la durata di visualizzazione a 5 secondi
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2205      	movs	r2, #5
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    display->change_enabled = 1; // Abilita il cambio automatico dei dati
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    display->update_enabled = 1; // Abilita l'aggiornamento automatico dei dati
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    display->last_change_time = HAL_GetTick(); // Inizializza il tempo dell'ultimo cambio a ora corrente
 80040d0:	f001 fb76 	bl	80057c0 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	649a      	str	r2, [r3, #72]	@ 0x48
    MAX72_Clear(); // Pulisce il display all'inizio
 80040da:	f000 f847 	bl	800416c <MAX72_Clear>
}
 80040de:	bf00      	nop
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	08011368 	.word	0x08011368
 80040ec:	40020400 	.word	0x40020400
 80040f0:	200006e0 	.word	0x200006e0

080040f4 <MAX72_SendRow>:

void MAX72_SendRow(uint8_t row, uint8_t pattern[DEV_NUM])
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	6039      	str	r1, [r7, #0]
 80040fe:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[8];
    // pattern[i] = dato per il modulo i
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 8004100:	2300      	movs	r3, #0
 8004102:	75fb      	strb	r3, [r7, #23]
 8004104:	e014      	b.n	8004130 <MAX72_SendRow+0x3c>
        txBuf[dev*2]   = row;          // registro DIG[row]
 8004106:	7dfb      	ldrb	r3, [r7, #23]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	3318      	adds	r3, #24
 800410c:	443b      	add	r3, r7
 800410e:	79fa      	ldrb	r2, [r7, #7]
 8004110:	f803 2c0c 	strb.w	r2, [r3, #-12]
        txBuf[dev*2+1] = pattern[dev]; // i‑esimo byte di dati
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	441a      	add	r2, r3
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	3301      	adds	r3, #1
 8004120:	7812      	ldrb	r2, [r2, #0]
 8004122:	3318      	adds	r3, #24
 8004124:	443b      	add	r3, r7
 8004126:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 800412a:	7dfb      	ldrb	r3, [r7, #23]
 800412c:	3301      	adds	r3, #1
 800412e:	75fb      	strb	r3, [r7, #23]
 8004130:	7dfb      	ldrb	r3, [r7, #23]
 8004132:	2b03      	cmp	r3, #3
 8004134:	d9e7      	bls.n	8004106 <MAX72_SendRow+0x12>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8004136:	2200      	movs	r2, #0
 8004138:	2110      	movs	r1, #16
 800413a:	480a      	ldr	r0, [pc, #40]	@ (8004164 <MAX72_SendRow+0x70>)
 800413c:	f002 fe4c 	bl	8006dd8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8004140:	f107 010c 	add.w	r1, r7, #12
 8004144:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004148:	2208      	movs	r2, #8
 800414a:	4807      	ldr	r0, [pc, #28]	@ (8004168 <MAX72_SendRow+0x74>)
 800414c:	f004 fff9 	bl	8009142 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004150:	2201      	movs	r2, #1
 8004152:	2110      	movs	r1, #16
 8004154:	4803      	ldr	r0, [pc, #12]	@ (8004164 <MAX72_SendRow+0x70>)
 8004156:	f002 fe3f 	bl	8006dd8 <HAL_GPIO_WritePin>
}
 800415a:	bf00      	nop
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40020400 	.word	0x40020400
 8004168:	200006e0 	.word	0x200006e0

0800416c <MAX72_Clear>:

void MAX72_Clear(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
	uint8_t emptyPattern[4] = {0, 0, 0, 0};
 8004172:	2300      	movs	r3, #0
 8004174:	603b      	str	r3, [r7, #0]
	    for (uint8_t row=1; row<=8; row++) {
 8004176:	2301      	movs	r3, #1
 8004178:	71fb      	strb	r3, [r7, #7]
 800417a:	e008      	b.n	800418e <MAX72_Clear+0x22>
	        MAX72_SendRow(row, emptyPattern);
 800417c:	463a      	mov	r2, r7
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	4611      	mov	r1, r2
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff ffb6 	bl	80040f4 <MAX72_SendRow>
	    for (uint8_t row=1; row<=8; row++) {
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	3301      	adds	r3, #1
 800418c:	71fb      	strb	r3, [r7, #7]
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d9f3      	bls.n	800417c <MAX72_Clear+0x10>
	    }
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <MAX72_Add_Data>:

void MAX72_Add_Data(display_t *display, display_data_t *data) {
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
	if (display->data_count < MAX_DATA_LENGTH) {
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041ae:	2b07      	cmp	r3, #7
 80041b0:	d813      	bhi.n	80041da <MAX72_Add_Data+0x3c>
		display->data[display->data_count] = *data; // Aggiungi i dati al display
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6839      	ldr	r1, [r7, #0]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	460a      	mov	r2, r1
 80041c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041c6:	e883 0003 	stmia.w	r3, {r0, r1}
		display->data_count++; // Incrementa il conteggio dei dati
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041d0:	3301      	adds	r3, #1
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}

	if (display->data_count == 1) {
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d103      	bne.n	80041ec <MAX72_Add_Data+0x4e>
		MAX72_Change_Data(display,1); // Se è il primo dato, aggiorna subito il display
 80041e4:	2101      	movs	r1, #1
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f904 	bl	80043f4 <MAX72_Change_Data>
	}
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <MAX72_Update_Data>:
			break; // Esci dal ciclo dopo aver rimosso il dato
		}
	}
}

void MAX72_Update_Data(display_t *display) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	if (display->data_count == 0 || !display->update_enabled) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80e8 	beq.w	80043d8 <MAX72_Update_Data+0x1e4>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80e2 	beq.w	80043d8 <MAX72_Update_Data+0x1e4>
		return; // Non ci sono dati da visualizzare
	}

	display_data_t *current_data = &display->data[display->current_index];
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	4413      	add	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

	switch (current_data->settings) {
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	791b      	ldrb	r3, [r3, #4]
 8004226:	2b03      	cmp	r3, #3
 8004228:	f200 80df 	bhi.w	80043ea <MAX72_Update_Data+0x1f6>
 800422c:	a201      	add	r2, pc, #4	@ (adr r2, 8004234 <MAX72_Update_Data+0x40>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	08004245 	.word	0x08004245
 8004238:	08004361 	.word	0x08004361
 800423c:	08004391 	.word	0x08004391
 8004240:	080043ab 	.word	0x080043ab
		case PRINT_INT:
			switch(current_data->type) {
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	799b      	ldrb	r3, [r3, #6]
 8004248:	2b09      	cmp	r3, #9
 800424a:	f200 80c7 	bhi.w	80043dc <MAX72_Update_Data+0x1e8>
 800424e:	a201      	add	r2, pc, #4	@ (adr r2, 8004254 <MAX72_Update_Data+0x60>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	0800427d 	.word	0x0800427d
 8004258:	08004291 	.word	0x08004291
 800425c:	080042a7 	.word	0x080042a7
 8004260:	080042bd 	.word	0x080042bd
 8004264:	080042d3 	.word	0x080042d3
 8004268:	080042e9 	.word	0x080042e9
 800426c:	08004301 	.word	0x08004301
 8004270:	08004319 	.word	0x08004319
 8004274:	0800432d 	.word	0x0800432d
 8004278:	08004343 	.word	0x08004343
				case DISPLAY_TYPE_INT:
					MAX72_Print_Int(*(int *)current_data->data, current_data->string_settings);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	795b      	ldrb	r3, [r3, #5]
 8004286:	4619      	mov	r1, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f000 fb9d 	bl	80049c8 <MAX72_Print_Int>
					break;
 800428e:	e066      	b.n	800435e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT8:
					MAX72_Print_Int((int)*(uint8_t *)current_data->data, current_data->string_settings);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	795b      	ldrb	r3, [r3, #5]
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f000 fb92 	bl	80049c8 <MAX72_Print_Int>
					break;
 80042a4:	e05b      	b.n	800435e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT16:
					MAX72_Print_Int((int)*(uint16_t *)current_data->data, current_data->string_settings);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	795b      	ldrb	r3, [r3, #5]
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f000 fb87 	bl	80049c8 <MAX72_Print_Int>
					break;
 80042ba:	e050      	b.n	800435e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT32:
					MAX72_Print_Int((int)*(uint32_t *)current_data->data, current_data->string_settings);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	795b      	ldrb	r3, [r3, #5]
 80042c8:	4619      	mov	r1, r3
 80042ca:	4610      	mov	r0, r2
 80042cc:	f000 fb7c 	bl	80049c8 <MAX72_Print_Int>
					break;
 80042d0:	e045      	b.n	800435e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT64:
					MAX72_Print_Int((int)*(uint64_t *)current_data->data, current_data->string_settings);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	795b      	ldrb	r3, [r3, #5]
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f000 fb71 	bl	80049c8 <MAX72_Print_Int>
					break;
 80042e6:	e03a      	b.n	800435e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT8:
					MAX72_Print_Int(*(int8_t *)current_data->data, current_data->string_settings);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f993 3000 	ldrsb.w	r3, [r3]
 80042f0:	461a      	mov	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	795b      	ldrb	r3, [r3, #5]
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f000 fb65 	bl	80049c8 <MAX72_Print_Int>
					break;
 80042fe:	e02e      	b.n	800435e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT16:
					MAX72_Print_Int(*(int16_t *)current_data->data, current_data->string_settings);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004308:	461a      	mov	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	795b      	ldrb	r3, [r3, #5]
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f000 fb59 	bl	80049c8 <MAX72_Print_Int>
					break;
 8004316:	e022      	b.n	800435e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT32:
					MAX72_Print_Int(*(int32_t *)current_data->data, current_data->string_settings);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	795b      	ldrb	r3, [r3, #5]
 8004322:	4619      	mov	r1, r3
 8004324:	4610      	mov	r0, r2
 8004326:	f000 fb4f 	bl	80049c8 <MAX72_Print_Int>
					break;
 800432a:	e018      	b.n	800435e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT64:
					MAX72_Print_Int(*(int64_t *)current_data->data, current_data->string_settings);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	795b      	ldrb	r3, [r3, #5]
 8004338:	4619      	mov	r1, r3
 800433a:	4610      	mov	r0, r2
 800433c:	f000 fb44 	bl	80049c8 <MAX72_Print_Int>
					break;
 8004340:	e00d      	b.n	800435e <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_FLOAT:
					MAX72_Print_Int((int)*(float *)current_data->data, current_data->string_settings);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	edd3 7a00 	vldr	s15, [r3]
 800434a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	795b      	ldrb	r3, [r3, #5]
 8004352:	4619      	mov	r1, r3
 8004354:	ee17 0a90 	vmov	r0, s15
 8004358:	f000 fb36 	bl	80049c8 <MAX72_Print_Int>
					break;
 800435c:	bf00      	nop
			}
			break;
 800435e:	e03d      	b.n	80043dc <MAX72_Update_Data+0x1e8>
		case PRINT_FLOAT:
			if (current_data->type == DISPLAY_TYPE_FLOAT) {
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	799b      	ldrb	r3, [r3, #6]
 8004364:	2b09      	cmp	r3, #9
 8004366:	d13b      	bne.n	80043e0 <MAX72_Update_Data+0x1ec>
				MAX72_Print_Float(*(float *)current_data->data, current_data->float_decimals, current_data->string_settings == 2);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	edd3 7a00 	vldr	s15, [r3]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	79da      	ldrb	r2, [r3, #7]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	795b      	ldrb	r3, [r3, #5]
 8004378:	2b02      	cmp	r3, #2
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	eeb0 0a67 	vmov.f32	s0, s15
 800438a:	f000 fb79 	bl	8004a80 <MAX72_Print_Float>
			}
			break;
 800438e:	e027      	b.n	80043e0 <MAX72_Update_Data+0x1ec>
		case PRINT_STRING:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	799b      	ldrb	r3, [r3, #6]
 8004394:	2b0a      	cmp	r3, #10
 8004396:	d125      	bne.n	80043e4 <MAX72_Update_Data+0x1f0>
				MAX72_Print_String((const char *)current_data->data, current_data->string_settings);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	795b      	ldrb	r3, [r3, #5]
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f000 f890 	bl	80044c8 <MAX72_Print_String>
			}
			break;
 80043a8:	e01c      	b.n	80043e4 <MAX72_Update_Data+0x1f0>
		case PRINT_SCROLL:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	799b      	ldrb	r3, [r3, #6]
 80043ae:	2b0a      	cmp	r3, #10
 80043b0:	d11a      	bne.n	80043e8 <MAX72_Update_Data+0x1f4>
				// update scroll_state.updated if text has changed
				if (strcmp(scroll_state.text, (const char *)current_data->data) != 0) {
 80043b2:	4b0f      	ldr	r3, [pc, #60]	@ (80043f0 <MAX72_Update_Data+0x1fc>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f7fb ff27 	bl	8000210 <strcmp>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00f      	beq.n	80043e8 <MAX72_Update_Data+0x1f4>
					scroll_state.updated = 1; // Indica che il testo è stato aggiornato
 80043c8:	4b09      	ldr	r3, [pc, #36]	@ (80043f0 <MAX72_Update_Data+0x1fc>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	739a      	strb	r2, [r3, #14]

					scroll_state.text = (const char *)current_data->data;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a07      	ldr	r2, [pc, #28]	@ (80043f0 <MAX72_Update_Data+0x1fc>)
 80043d4:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 80043d6:	e007      	b.n	80043e8 <MAX72_Update_Data+0x1f4>
		return; // Non ci sono dati da visualizzare
 80043d8:	bf00      	nop
 80043da:	e006      	b.n	80043ea <MAX72_Update_Data+0x1f6>
			break;
 80043dc:	bf00      	nop
 80043de:	e004      	b.n	80043ea <MAX72_Update_Data+0x1f6>
			break;
 80043e0:	bf00      	nop
 80043e2:	e002      	b.n	80043ea <MAX72_Update_Data+0x1f6>
			break;
 80043e4:	bf00      	nop
 80043e6:	e000      	b.n	80043ea <MAX72_Update_Data+0x1f6>
			break;
 80043e8:	bf00      	nop
	}
}
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20000d74 	.word	0x20000d74

080043f4 <MAX72_Change_Data>:

void MAX72_Change_Data(display_t *display, uint8_t force_change) {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	70fb      	strb	r3, [r7, #3]
	if (display->data_count == 0 || (!display->change_enabled && !force_change)) {
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d055      	beq.n	80044b6 <MAX72_Change_Data+0xc2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <MAX72_Change_Data+0x26>
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d04d      	beq.n	80044b6 <MAX72_Change_Data+0xc2>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
	}

	uint32_t currentTime = HAL_GetTick();
 800441a:	f001 f9d1 	bl	80057c0 <HAL_GetTick>
 800441e:	60f8      	str	r0, [r7, #12]
	if (!force_change && currentTime - display->last_change_time < (uint32_t)display->data_duration * 1000) {
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10d      	bne.n	8004442 <MAX72_Change_Data+0x4e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	1ad2      	subs	r2, r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004434:	4619      	mov	r1, r3
 8004436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	429a      	cmp	r2, r3
 8004440:	d33b      	bcc.n	80044ba <MAX72_Change_Data+0xc6>
		return;
	}
	display->current_index = (display->current_index + 1) % display->data_count;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004448:	3301      	adds	r3, #1
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8004450:	fb93 f1f2 	sdiv	r1, r3, r2
 8004454:	fb01 f202 	mul.w	r2, r1, r2
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	b2da      	uxtb	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	display->last_change_time = currentTime;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	649a      	str	r2, [r3, #72]	@ 0x48

	if (display->data[display->current_index].settings == PRINT_SCROLL) {
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4413      	add	r3, r2
 8004474:	791b      	ldrb	r3, [r3, #4]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d113      	bne.n	80044a2 <MAX72_Change_Data+0xae>
		if(!scroll_state.enabled || display->data_count > 1){
 800447a:	4b12      	ldr	r3, [pc, #72]	@ (80044c4 <MAX72_Change_Data+0xd0>)
 800447c:	7b5b      	ldrb	r3, [r3, #13]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <MAX72_Change_Data+0x98>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004488:	2b01      	cmp	r3, #1
 800448a:	d910      	bls.n	80044ae <MAX72_Change_Data+0xba>
		MAX72_Scroll_Start_IT((const char *)display->data[display->current_index].data);}
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004492:	461a      	mov	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fc5e 	bl	8004d5c <MAX72_Scroll_Start_IT>
 80044a0:	e005      	b.n	80044ae <MAX72_Change_Data+0xba>
	} else if (scroll_state.enabled) {
 80044a2:	4b08      	ldr	r3, [pc, #32]	@ (80044c4 <MAX72_Change_Data+0xd0>)
 80044a4:	7b5b      	ldrb	r3, [r3, #13]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <MAX72_Change_Data+0xba>
		MAX72_Scroll_Stop();
 80044aa:	f000 fcbd 	bl	8004e28 <MAX72_Scroll_Stop>
	}

	MAX72_Update_Data(display); // Aggiorna i dati visualizzati)
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fea0 	bl	80041f4 <MAX72_Update_Data>
 80044b4:	e002      	b.n	80044bc <MAX72_Change_Data+0xc8>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
 80044b6:	bf00      	nop
 80044b8:	e000      	b.n	80044bc <MAX72_Change_Data+0xc8>
		return;
 80044ba:	bf00      	nop
}
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000d74 	.word	0x20000d74

080044c8 <MAX72_Print_String>:
//        HAL_Delay(500);
//    }
//}

void MAX72_Print_String(const char *str, uint8_t settings)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b094      	sub	sp, #80	@ 0x50
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
    uint8_t len = strlen(str);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7fb fefb 	bl	80002d0 <strlen>
 80044da:	4603      	mov	r3, r0
 80044dc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    if (settings == MINIDIGITS) {
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	f040 8119 	bne.w	800471a <MAX72_Print_String+0x252>
    	char padded[8] = {0};
 80044e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	605a      	str	r2, [r3, #4]
    	        // Calcola padding all'inizio (right align)
    	        uint8_t start = (len < 8) ? (8 - len) : 0;
 80044f2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80044f6:	2b07      	cmp	r3, #7
 80044f8:	d805      	bhi.n	8004506 <MAX72_Print_String+0x3e>
 80044fa:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80044fe:	f1c3 0308 	rsb	r3, r3, #8
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e000      	b.n	8004508 <MAX72_Print_String+0x40>
 8004506:	2300      	movs	r3, #0
 8004508:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    	        // Spazi iniziali
    	        for (uint8_t i = 0; i < start; i++)
 800450c:	2300      	movs	r3, #0
 800450e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8004512:	e00b      	b.n	800452c <MAX72_Print_String+0x64>
    	            padded[i] = ' ';
 8004514:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004518:	3350      	adds	r3, #80	@ 0x50
 800451a:	443b      	add	r3, r7
 800451c:	2220      	movs	r2, #32
 800451e:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < start; i++)
 8004522:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004526:	3301      	adds	r3, #1
 8004528:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800452c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004530:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004534:	429a      	cmp	r2, r3
 8004536:	d3ed      	bcc.n	8004514 <MAX72_Print_String+0x4c>
    	        // Copia la stringa
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8004538:	2300      	movs	r3, #0
 800453a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800453e:	e012      	b.n	8004566 <MAX72_Print_String+0x9e>
    	            padded[start + i] = str[i];
 8004540:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	441a      	add	r2, r3
 8004548:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 800454c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8004550:	440b      	add	r3, r1
 8004552:	7812      	ldrb	r2, [r2, #0]
 8004554:	3350      	adds	r3, #80	@ 0x50
 8004556:	443b      	add	r3, r7
 8004558:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 800455c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8004560:	3301      	adds	r3, #1
 8004562:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8004566:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800456a:	2b07      	cmp	r3, #7
 800456c:	d805      	bhi.n	800457a <MAX72_Print_String+0xb2>
 800456e:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8004572:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004576:	429a      	cmp	r2, r3
 8004578:	d3e2      	bcc.n	8004540 <MAX72_Print_String+0x78>

        char reversed[8];
        for (uint8_t i = 0; i < 8; i++)
 800457a:	2300      	movs	r3, #0
 800457c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8004580:	e012      	b.n	80045a8 <MAX72_Print_String+0xe0>
            reversed[i] = padded[7 - i];
 8004582:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004586:	f1c3 0207 	rsb	r2, r3, #7
 800458a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800458e:	3250      	adds	r2, #80	@ 0x50
 8004590:	443a      	add	r2, r7
 8004592:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8004596:	3350      	adds	r3, #80	@ 0x50
 8004598:	443b      	add	r3, r7
 800459a:	f803 2c28 	strb.w	r2, [r3, #-40]
        for (uint8_t i = 0; i < 8; i++)
 800459e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80045a2:	3301      	adds	r3, #1
 80045a4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80045a8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80045ac:	2b07      	cmp	r3, #7
 80045ae:	d9e8      	bls.n	8004582 <MAX72_Print_String+0xba>

        for (uint8_t row = 0; row < 8; row++) {
 80045b0:	2300      	movs	r3, #0
 80045b2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80045b6:	e0aa      	b.n	800470e <MAX72_Print_String+0x246>
            uint8_t pat[4] = {0};
 80045b8:	2300      	movs	r3, #0
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24

            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 80045bc:	2300      	movs	r3, #0
 80045be:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80045c2:	e090      	b.n	80046e6 <MAX72_Print_String+0x21e>
                uint8_t c1 = reversed[byte_idx * 2];
 80045c4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	3350      	adds	r3, #80	@ 0x50
 80045cc:	443b      	add	r3, r7
 80045ce:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045d2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t c2 = reversed[byte_idx * 2 + 1];
 80045d6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	3301      	adds	r3, #1
 80045de:	3350      	adds	r3, #80	@ 0x50
 80045e0:	443b      	add	r3, r7
 80045e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045e6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                uint8_t char1_pattern = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                uint8_t char2_pattern = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                if (c1 >= '0' && c1 <= '9')
 80045f6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80045fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80045fc:	d913      	bls.n	8004626 <MAX72_Print_String+0x15e>
 80045fe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004602:	2b39      	cmp	r3, #57	@ 0x39
 8004604:	d80f      	bhi.n	8004626 <MAX72_Print_String+0x15e>
                    char1_pattern = DIGITS[c1 - '0' + 2][row] & 0x07;
 8004606:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800460a:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 800460e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004612:	49cd      	ldr	r1, [pc, #820]	@ (8004948 <MAX72_Print_String+0x480>)
 8004614:	00d2      	lsls	r2, r2, #3
 8004616:	440a      	add	r2, r1
 8004618:	4413      	add	r3, r2
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8004624:	e019      	b.n	800465a <MAX72_Print_String+0x192>
                else if (c1 == '-')
 8004626:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800462a:	2b2d      	cmp	r3, #45	@ 0x2d
 800462c:	d109      	bne.n	8004642 <MAX72_Print_String+0x17a>
                    char1_pattern = DIGITS[1][row] & 0x07;
 800462e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004632:	4ac5      	ldr	r2, [pc, #788]	@ (8004948 <MAX72_Print_String+0x480>)
 8004634:	4413      	add	r3, r2
 8004636:	7a1b      	ldrb	r3, [r3, #8]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8004640:	e00b      	b.n	800465a <MAX72_Print_String+0x192>
                else if (c1 == '.')
 8004642:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004646:	2b2e      	cmp	r3, #46	@ 0x2e
 8004648:	d107      	bne.n	800465a <MAX72_Print_String+0x192>
					char1_pattern = DIGITS[0][row] & 0x07;
 800464a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800464e:	4abe      	ldr	r2, [pc, #760]	@ (8004948 <MAX72_Print_String+0x480>)
 8004650:	5cd3      	ldrb	r3, [r2, r3]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

                if (c2 >= '0' && c2 <= '9')
 800465a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800465e:	2b2f      	cmp	r3, #47	@ 0x2f
 8004660:	d913      	bls.n	800468a <MAX72_Print_String+0x1c2>
 8004662:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004666:	2b39      	cmp	r3, #57	@ 0x39
 8004668:	d80f      	bhi.n	800468a <MAX72_Print_String+0x1c2>
                    char2_pattern = DIGITS[c2 - '0' + 2][row] & 0x07;
 800466a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800466e:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 8004672:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004676:	49b4      	ldr	r1, [pc, #720]	@ (8004948 <MAX72_Print_String+0x480>)
 8004678:	00d2      	lsls	r2, r2, #3
 800467a:	440a      	add	r2, r1
 800467c:	4413      	add	r3, r2
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8004688:	e019      	b.n	80046be <MAX72_Print_String+0x1f6>
                else if (c2 == '-')
 800468a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800468e:	2b2d      	cmp	r3, #45	@ 0x2d
 8004690:	d109      	bne.n	80046a6 <MAX72_Print_String+0x1de>
                    char2_pattern = DIGITS[1][row] & 0x07;
 8004692:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004696:	4aac      	ldr	r2, [pc, #688]	@ (8004948 <MAX72_Print_String+0x480>)
 8004698:	4413      	add	r3, r2
 800469a:	7a1b      	ldrb	r3, [r3, #8]
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 80046a4:	e00b      	b.n	80046be <MAX72_Print_String+0x1f6>
                else if (c2 == '.')
 80046a6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80046aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80046ac:	d107      	bne.n	80046be <MAX72_Print_String+0x1f6>
                	char2_pattern = DIGITS[0][row] & 0x07;
 80046ae:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80046b2:	4aa5      	ldr	r2, [pc, #660]	@ (8004948 <MAX72_Print_String+0x480>)
 80046b4:	5cd3      	ldrb	r3, [r2, r3]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                pat[byte_idx] = (char1_pattern << 4) | char2_pattern;
 80046be:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	b25a      	sxtb	r2, r3
 80046c6:	f997 3049 	ldrsb.w	r3, [r7, #73]	@ 0x49
 80046ca:	4313      	orrs	r3, r2
 80046cc:	b25a      	sxtb	r2, r3
 80046ce:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	3350      	adds	r3, #80	@ 0x50
 80046d6:	443b      	add	r3, r7
 80046d8:	f803 2c2c 	strb.w	r2, [r3, #-44]
            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 80046dc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80046e0:	3301      	adds	r3, #1
 80046e2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80046e6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	f67f af6a 	bls.w	80045c4 <MAX72_Print_String+0xfc>
            }

            MAX72_SendRow(row + 1, pat);
 80046f0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80046f4:	3301      	adds	r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fcf8 	bl	80040f4 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8004704:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004708:	3301      	adds	r3, #1
 800470a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 800470e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004712:	2b07      	cmp	r3, #7
 8004714:	f67f af50 	bls.w	80045b8 <MAX72_Print_String+0xf0>
            for (uint8_t i = 0; i < 4; i++)
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
            MAX72_SendRow(row + 1, pat);
        }
    }
}
 8004718:	e150      	b.n	80049bc <MAX72_Print_String+0x4f4>
    else if (settings == FLOAT) {
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	2b01      	cmp	r3, #1
 800471e:	f040 80d1 	bne.w	80048c4 <MAX72_Print_String+0x3fc>
        char reversed[4] = {0};
 8004722:	2300      	movs	r3, #0
 8004724:	623b      	str	r3, [r7, #32]
        int8_t dot_pos = -1;
 8004726:	23ff      	movs	r3, #255	@ 0xff
 8004728:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < len; i++)
 800472c:	2300      	movs	r3, #0
 800472e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004732:	e010      	b.n	8004756 <MAX72_Print_String+0x28e>
            if (str[i] == '.') { dot_pos = i; break; }
 8004734:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	4413      	add	r3, r2
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004740:	d104      	bne.n	800474c <MAX72_Print_String+0x284>
 8004742:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004746:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 800474a:	e00a      	b.n	8004762 <MAX72_Print_String+0x29a>
        for (uint8_t i = 0; i < len; i++)
 800474c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004750:	3301      	adds	r3, #1
 8004752:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004756:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800475a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800475e:	429a      	cmp	r2, r3
 8004760:	d3e8      	bcc.n	8004734 <MAX72_Print_String+0x26c>
        char no_dot_str[5] = {0};
 8004762:	f107 0318 	add.w	r3, r7, #24
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	711a      	strb	r2, [r3, #4]
        uint8_t no_dot_len = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 8004772:	2300      	movs	r3, #0
 8004774:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8004778:	e019      	b.n	80047ae <MAX72_Print_String+0x2e6>
            if (str[i] != '.') no_dot_str[no_dot_len++] = str[i];
 800477a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b2e      	cmp	r3, #46	@ 0x2e
 8004786:	d00d      	beq.n	80047a4 <MAX72_Print_String+0x2dc>
 8004788:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	441a      	add	r2, r3
 8004790:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004794:	1c59      	adds	r1, r3, #1
 8004796:	f887 1046 	strb.w	r1, [r7, #70]	@ 0x46
 800479a:	7812      	ldrb	r2, [r2, #0]
 800479c:	3350      	adds	r3, #80	@ 0x50
 800479e:	443b      	add	r3, r7
 80047a0:	f803 2c38 	strb.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 80047a4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80047a8:	3301      	adds	r3, #1
 80047aa:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80047ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80047b2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d203      	bcs.n	80047c2 <MAX72_Print_String+0x2fa>
 80047ba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d9db      	bls.n	800477a <MAX72_Print_String+0x2b2>
        dot_pos = no_dot_len - dot_pos - 1;
 80047c2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80047c6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < 4; i++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80047dc:	e01c      	b.n	8004818 <MAX72_Print_String+0x350>
            reversed[i] = (i < no_dot_len) ? no_dot_str[no_dot_len - 1 - i] : ' ';
 80047de:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80047e2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d20a      	bcs.n	8004800 <MAX72_Print_String+0x338>
 80047ea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80047ee:	1e5a      	subs	r2, r3, #1
 80047f0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	3350      	adds	r3, #80	@ 0x50
 80047f8:	443b      	add	r3, r7
 80047fa:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80047fe:	e000      	b.n	8004802 <MAX72_Print_String+0x33a>
 8004800:	2220      	movs	r2, #32
 8004802:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8004806:	3350      	adds	r3, #80	@ 0x50
 8004808:	443b      	add	r3, r7
 800480a:	f803 2c30 	strb.w	r2, [r3, #-48]
        for (uint8_t i = 0; i < 4; i++)
 800480e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8004812:	3301      	adds	r3, #1
 8004814:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8004818:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800481c:	2b03      	cmp	r3, #3
 800481e:	d9de      	bls.n	80047de <MAX72_Print_String+0x316>
        for (uint8_t row = 0; row < 8; row++) {
 8004820:	2300      	movs	r3, #0
 8004822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004826:	e048      	b.n	80048ba <MAX72_Print_String+0x3f2>
            for (uint8_t i = 0; i < 4; i++)
 8004828:	2300      	movs	r3, #0
 800482a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800482e:	e01e      	b.n	800486e <MAX72_Print_String+0x3a6>
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 8004830:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004834:	3350      	adds	r3, #80	@ 0x50
 8004836:	443b      	add	r3, r7
 8004838:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800483c:	f1a3 0220 	sub.w	r2, r3, #32
 8004840:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 8004844:	4841      	ldr	r0, [pc, #260]	@ (800494c <MAX72_Print_String+0x484>)
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	4403      	add	r3, r0
 800484e:	440b      	add	r3, r1
 8004850:	3301      	adds	r3, #1
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004858:	00d2      	lsls	r2, r2, #3
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	3350      	adds	r3, #80	@ 0x50
 800485e:	443b      	add	r3, r7
 8004860:	f803 2c3c 	strb.w	r2, [r3, #-60]
            for (uint8_t i = 0; i < 4; i++)
 8004864:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004868:	3301      	adds	r3, #1
 800486a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800486e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8004872:	2b03      	cmp	r3, #3
 8004874:	d9dc      	bls.n	8004830 <MAX72_Print_String+0x368>
            if (row == 0) pat[dot_pos] |= 0b010;
 8004876:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10e      	bne.n	800489c <MAX72_Print_String+0x3d4>
 800487e:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8004882:	3350      	adds	r3, #80	@ 0x50
 8004884:	443b      	add	r3, r7
 8004886:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 800488a:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 800488e:	f042 0202 	orr.w	r2, r2, #2
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	3350      	adds	r3, #80	@ 0x50
 8004896:	443b      	add	r3, r7
 8004898:	f803 2c3c 	strb.w	r2, [r3, #-60]
            MAX72_SendRow(row + 1, pat);
 800489c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80048a0:	3301      	adds	r3, #1
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	f107 0214 	add.w	r2, r7, #20
 80048a8:	4611      	mov	r1, r2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fc22 	bl	80040f4 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 80048b0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80048b4:	3301      	adds	r3, #1
 80048b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80048be:	2b07      	cmp	r3, #7
 80048c0:	d9b2      	bls.n	8004828 <MAX72_Print_String+0x360>
}
 80048c2:	e07b      	b.n	80049bc <MAX72_Print_String+0x4f4>
        char reversed[4] = {0};
 80048c4:	2300      	movs	r3, #0
 80048c6:	613b      	str	r3, [r7, #16]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 80048c8:	2300      	movs	r3, #0
 80048ca:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80048ce:	e014      	b.n	80048fa <MAX72_Print_String+0x432>
            reversed[i] = str[len - 1 - i];
 80048d0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80048d4:	1e5a      	subs	r2, r3, #1
 80048d6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	441a      	add	r2, r3
 80048e2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80048e6:	7812      	ldrb	r2, [r2, #0]
 80048e8:	3350      	adds	r3, #80	@ 0x50
 80048ea:	443b      	add	r3, r7
 80048ec:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 80048f0:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80048f4:	3301      	adds	r3, #1
 80048f6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80048fa:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d805      	bhi.n	800490e <MAX72_Print_String+0x446>
 8004902:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8004906:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800490a:	429a      	cmp	r2, r3
 800490c:	d3e0      	bcc.n	80048d0 <MAX72_Print_String+0x408>
        for (uint8_t i = len; i < 4; i++)
 800490e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004912:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8004916:	e00b      	b.n	8004930 <MAX72_Print_String+0x468>
            reversed[i] = ' ';
 8004918:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800491c:	3350      	adds	r3, #80	@ 0x50
 800491e:	443b      	add	r3, r7
 8004920:	2220      	movs	r2, #32
 8004922:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = len; i < 4; i++)
 8004926:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800492a:	3301      	adds	r3, #1
 800492c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 8004930:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004934:	2b03      	cmp	r3, #3
 8004936:	d9ef      	bls.n	8004918 <MAX72_Print_String+0x450>
        for (uint8_t row = 0; row < 8; row++) {
 8004938:	2300      	movs	r3, #0
 800493a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800493e:	e039      	b.n	80049b4 <MAX72_Print_String+0x4ec>
            for (uint8_t i = 0; i < 4; i++)
 8004940:	2300      	movs	r3, #0
 8004942:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8004946:	e022      	b.n	800498e <MAX72_Print_String+0x4c6>
 8004948:	20000364 	.word	0x20000364
 800494c:	2000000c 	.word	0x2000000c
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 8004950:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004954:	3350      	adds	r3, #80	@ 0x50
 8004956:	443b      	add	r3, r7
 8004958:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800495c:	f1a3 0220 	sub.w	r2, r3, #32
 8004960:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8004964:	4817      	ldr	r0, [pc, #92]	@ (80049c4 <MAX72_Print_String+0x4fc>)
 8004966:	4613      	mov	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4413      	add	r3, r2
 800496c:	4403      	add	r3, r0
 800496e:	440b      	add	r3, r1
 8004970:	3301      	adds	r3, #1
 8004972:	781a      	ldrb	r2, [r3, #0]
 8004974:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004978:	00d2      	lsls	r2, r2, #3
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	3350      	adds	r3, #80	@ 0x50
 800497e:	443b      	add	r3, r7
 8004980:	f803 2c44 	strb.w	r2, [r3, #-68]
            for (uint8_t i = 0; i < 4; i++)
 8004984:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004988:	3301      	adds	r3, #1
 800498a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800498e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004992:	2b03      	cmp	r3, #3
 8004994:	d9dc      	bls.n	8004950 <MAX72_Print_String+0x488>
            MAX72_SendRow(row + 1, pat);
 8004996:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800499a:	3301      	adds	r3, #1
 800499c:	b2db      	uxtb	r3, r3
 800499e:	f107 020c 	add.w	r2, r7, #12
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fba5 	bl	80040f4 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 80049aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80049ae:	3301      	adds	r3, #1
 80049b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80049b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80049b8:	2b07      	cmp	r3, #7
 80049ba:	d9c1      	bls.n	8004940 <MAX72_Print_String+0x478>
}
 80049bc:	bf00      	nop
 80049be:	3750      	adds	r7, #80	@ 0x50
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	2000000c 	.word	0x2000000c

080049c8 <MAX72_Print_Int>:


void MAX72_Print_Int(int num, uint8_t minidigits)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
    char sign = num < 0 ? '-' : '\0';
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da01      	bge.n	80049de <MAX72_Print_Int+0x16>
 80049da:	232d      	movs	r3, #45	@ 0x2d
 80049dc:	e000      	b.n	80049e0 <MAX72_Print_Int+0x18>
 80049de:	2300      	movs	r3, #0
 80049e0:	74fb      	strb	r3, [r7, #19]
    unsigned u = (num < 0) ? (unsigned) (-num) : (unsigned) num;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bfb8      	it	lt
 80049e8:	425b      	neglt	r3, r3
 80049ea:	617b      	str	r3, [r7, #20]

    char str[9]; // 8 digits + null terminator
    if (minidigits) {
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <MAX72_Print_Int+0x46>
        // segno + 7 cifre (tot 8): taglia alle ultime 7
        u %= sign=='-'?10000000u:100000000u;
 80049f2:	7cfb      	ldrb	r3, [r7, #19]
 80049f4:	2b2d      	cmp	r3, #45	@ 0x2d
 80049f6:	d101      	bne.n	80049fc <MAX72_Print_Int+0x34>
 80049f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a70 <MAX72_Print_Int+0xa8>)
 80049fa:	e000      	b.n	80049fe <MAX72_Print_Int+0x36>
 80049fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a74 <MAX72_Print_Int+0xac>)
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	e00e      	b.n	8004a2c <MAX72_Print_Int+0x64>
    } else {
        // segno + 3 cifre (tot 4): taglia alle ultime 3
        u %= sign=='-'?1000u:10000u;
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	2b2d      	cmp	r3, #45	@ 0x2d
 8004a12:	d102      	bne.n	8004a1a <MAX72_Print_Int+0x52>
 8004a14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a18:	e001      	b.n	8004a1e <MAX72_Print_Int+0x56>
 8004a1a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	617b      	str	r3, [r7, #20]
    }

    if (sign == '-'){
 8004a2c:	7cfb      	ldrb	r3, [r7, #19]
 8004a2e:	2b2d      	cmp	r3, #45	@ 0x2d
 8004a30:	d107      	bne.n	8004a42 <MAX72_Print_Int+0x7a>
    	snprintf(str, sizeof(str), "-%u", u);
 8004a32:	f107 0008 	add.w	r0, r7, #8
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	4a0f      	ldr	r2, [pc, #60]	@ (8004a78 <MAX72_Print_Int+0xb0>)
 8004a3a:	2109      	movs	r1, #9
 8004a3c:	f008 f99a 	bl	800cd74 <sniprintf>
 8004a40:	e006      	b.n	8004a50 <MAX72_Print_Int+0x88>
    } else {
    	snprintf(str, sizeof(str), "%u", u);
 8004a42:	f107 0008 	add.w	r0, r7, #8
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	4a0c      	ldr	r2, [pc, #48]	@ (8004a7c <MAX72_Print_Int+0xb4>)
 8004a4a:	2109      	movs	r1, #9
 8004a4c:	f008 f992 	bl	800cd74 <sniprintf>
    }


    MAX72_Print_String(str, minidigits ? MINIDIGITS : NO_SETTINGS);
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <MAX72_Print_Int+0x92>
 8004a56:	2202      	movs	r2, #2
 8004a58:	e000      	b.n	8004a5c <MAX72_Print_Int+0x94>
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f107 0308 	add.w	r3, r7, #8
 8004a60:	4611      	mov	r1, r2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fd30 	bl	80044c8 <MAX72_Print_String>
//    MAX72_Print_String(str);
}
 8004a68:	bf00      	nop
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	00989680 	.word	0x00989680
 8004a74:	05f5e100 	.word	0x05f5e100
 8004a78:	08011318 	.word	0x08011318
 8004a7c:	0801131c 	.word	0x0801131c

08004a80 <MAX72_Print_Float>:

void MAX72_Print_Float(float num, uint8_t decimals, uint8_t minidigits) {
 8004a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a84:	b095      	sub	sp, #84	@ 0x54
 8004a86:	af04      	add	r7, sp, #16
 8004a88:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	460a      	mov	r2, r1
 8004a90:	70fb      	strb	r3, [r7, #3]
 8004a92:	4613      	mov	r3, r2
 8004a94:	70bb      	strb	r3, [r7, #2]
 8004a96:	466b      	mov	r3, sp
 8004a98:	461e      	mov	r6, r3
    uint8_t max_chars = 8;
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char str[max_chars + 1]; // +1 for null terminator
 8004aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004aa4:	1c59      	adds	r1, r3, #1
 8004aa6:	1e4b      	subs	r3, r1, #1
 8004aa8:	623b      	str	r3, [r7, #32]
 8004aaa:	460a      	mov	r2, r1
 8004aac:	2300      	movs	r3, #0
 8004aae:	4690      	mov	r8, r2
 8004ab0:	4699      	mov	r9, r3
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ac6:	460a      	mov	r2, r1
 8004ac8:	2300      	movs	r3, #0
 8004aca:	4614      	mov	r4, r2
 8004acc:	461d      	mov	r5, r3
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	00eb      	lsls	r3, r5, #3
 8004ad8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004adc:	00e2      	lsls	r2, r4, #3
 8004ade:	460b      	mov	r3, r1
 8004ae0:	3307      	adds	r3, #7
 8004ae2:	08db      	lsrs	r3, r3, #3
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	ebad 0d03 	sub.w	sp, sp, r3
 8004aea:	ab04      	add	r3, sp, #16
 8004aec:	3300      	adds	r3, #0
 8004aee:	61fb      	str	r3, [r7, #28]

    // Gestione del segno
    char sign = (num < 0) ? '-' : '\0';
 8004af0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004af4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afc:	d501      	bpl.n	8004b02 <MAX72_Print_Float+0x82>
 8004afe:	232d      	movs	r3, #45	@ 0x2d
 8004b00:	e000      	b.n	8004b04 <MAX72_Print_Float+0x84>
 8004b02:	2300      	movs	r3, #0
 8004b04:	76fb      	strb	r3, [r7, #27]
    float abs_num = (num < 0) ? -num : num;
 8004b06:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b12:	d504      	bpl.n	8004b1e <MAX72_Print_Float+0x9e>
 8004b14:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b18:	eef1 7a67 	vneg.f32	s15, s15
 8004b1c:	e001      	b.n	8004b22 <MAX72_Print_Float+0xa2>
 8004b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b22:	edc7 7a05 	vstr	s15, [r7, #20]

    // Separa parte intera e decimale
    unsigned int_part = (unsigned) abs_num;
 8004b26:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2e:	ee17 3a90 	vmov	r3, s15
 8004b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float frac_part = abs_num - int_part;
 8004b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b46:	edc7 7a04 	vstr	s15, [r7, #16]


    // Calcola quanti caratteri servono per la parte intera
    uint8_t int_digits = (int_part == 0) ? 0 : 1;
 8004b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bf14      	ite	ne
 8004b50:	2301      	movne	r3, #1
 8004b52:	2300      	moveq	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    unsigned temp = int_part;
 8004b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b5c:	637b      	str	r3, [r7, #52]	@ 0x34
    while (temp >= 10) {
 8004b5e:	e00a      	b.n	8004b76 <MAX72_Print_Float+0xf6>
        temp /= 10;
 8004b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b62:	4a5d      	ldr	r2, [pc, #372]	@ (8004cd8 <MAX72_Print_Float+0x258>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	08db      	lsrs	r3, r3, #3
 8004b6a:	637b      	str	r3, [r7, #52]	@ 0x34
        int_digits++;
 8004b6c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004b70:	3301      	adds	r3, #1
 8004b72:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    while (temp >= 10) {
 8004b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b78:	2b09      	cmp	r3, #9
 8004b7a:	d8f1      	bhi.n	8004b60 <MAX72_Print_Float+0xe0>
    }

    // Calcola spazio disponibile per decimali
    uint8_t available_for_decimals = max_chars - (sign != '\0' ? 1 : 0) - int_digits - 1; // -1 per il punto decimale
 8004b7c:	7efb      	ldrb	r3, [r7, #27]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bf14      	ite	ne
 8004b82:	2301      	movne	r3, #1
 8004b84:	2300      	moveq	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	73fb      	strb	r3, [r7, #15]

    // Limita i decimali al minimo tra quelli richiesti e quelli disponibili
    uint8_t actual_decimals = (decimals < available_for_decimals) ? decimals : available_for_decimals;
 8004b9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	bf28      	it	cs
 8004ba6:	4613      	movcs	r3, r2
 8004ba8:	73bb      	strb	r3, [r7, #14]

    // Se non c'è spazio nemmeno per un decimale, mostra solo la parte intera
    if (available_for_decimals == 0) {
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d11b      	bne.n	8004be8 <MAX72_Print_Float+0x168>
        if (int_part == 0) {
 8004bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <MAX72_Print_Float+0x144>
            snprintf(str, sizeof(str), "0");
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4a48      	ldr	r2, [pc, #288]	@ (8004cdc <MAX72_Print_Float+0x25c>)
 8004bba:	4619      	mov	r1, r3
 8004bbc:	69f8      	ldr	r0, [r7, #28]
 8004bbe:	f008 f8d9 	bl	800cd74 <sniprintf>
 8004bc2:	e079      	b.n	8004cb8 <MAX72_Print_Float+0x238>
        } else {
            if (sign != '\0') {
 8004bc4:	7efb      	ldrb	r3, [r7, #27]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <MAX72_Print_Float+0x15c>
                snprintf(str, sizeof(str), "%c%u", sign, int_part);
 8004bca:	7efa      	ldrb	r2, [r7, #27]
 8004bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	4a43      	ldr	r2, [pc, #268]	@ (8004ce0 <MAX72_Print_Float+0x260>)
 8004bd4:	69f8      	ldr	r0, [r7, #28]
 8004bd6:	f008 f8cd 	bl	800cd74 <sniprintf>
 8004bda:	e06d      	b.n	8004cb8 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u", int_part);
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bde:	4a41      	ldr	r2, [pc, #260]	@ (8004ce4 <MAX72_Print_Float+0x264>)
 8004be0:	69f8      	ldr	r0, [r7, #28]
 8004be2:	f008 f8c7 	bl	800cd74 <sniprintf>
 8004be6:	e067      	b.n	8004cb8 <MAX72_Print_Float+0x238>
            }
        }
    } else {
        // Calcola il moltiplicatore per i decimali
        unsigned multiplier = 1;
 8004be8:	2301      	movs	r3, #1
 8004bea:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004bf2:	e00a      	b.n	8004c0a <MAX72_Print_Float+0x18a>
            multiplier *= 10;
 8004bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8004c00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c04:	3301      	adds	r3, #1
 8004c06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004c0a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004c0e:	7bbb      	ldrb	r3, [r7, #14]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d3ef      	bcc.n	8004bf4 <MAX72_Print_Float+0x174>
        }

        // Arrotonda la parte frazionaria
        unsigned frac_digits = (unsigned) (frac_part * multiplier + 0.5f);
 8004c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004c2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c32:	ee17 3a90 	vmov	r3, s15
 8004c36:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Gestisce il caso di overflow nell'arrotondamento
        if (frac_digits >= multiplier) {
 8004c38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d304      	bcc.n	8004c4a <MAX72_Print_Float+0x1ca>
            int_part++;
 8004c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c42:	3301      	adds	r3, #1
 8004c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
            frac_digits = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Costruisce la stringa
        if (int_part == 0) {
 8004c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d118      	bne.n	8004c82 <MAX72_Print_Float+0x202>
            // Omette la parte intera se è 0
            if (sign != '\0') {
 8004c50:	7efb      	ldrb	r3, [r7, #27]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00c      	beq.n	8004c70 <MAX72_Print_Float+0x1f0>
                snprintf(str, sizeof(str), "%c.%0*u", sign, actual_decimals, frac_digits);
 8004c56:	4608      	mov	r0, r1
 8004c58:	7ef9      	ldrb	r1, [r7, #27]
 8004c5a:	7bbb      	ldrb	r3, [r7, #14]
 8004c5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c5e:	9201      	str	r2, [sp, #4]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	460b      	mov	r3, r1
 8004c64:	4a20      	ldr	r2, [pc, #128]	@ (8004ce8 <MAX72_Print_Float+0x268>)
 8004c66:	4601      	mov	r1, r0
 8004c68:	69f8      	ldr	r0, [r7, #28]
 8004c6a:	f008 f883 	bl	800cd74 <sniprintf>
 8004c6e:	e023      	b.n	8004cb8 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), ".%0*u", actual_decimals, frac_digits);
 8004c70:	7bba      	ldrb	r2, [r7, #14]
 8004c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	4613      	mov	r3, r2
 8004c78:	4a1c      	ldr	r2, [pc, #112]	@ (8004cec <MAX72_Print_Float+0x26c>)
 8004c7a:	69f8      	ldr	r0, [r7, #28]
 8004c7c:	f008 f87a 	bl	800cd74 <sniprintf>
 8004c80:	e01a      	b.n	8004cb8 <MAX72_Print_Float+0x238>
            }
        } else {
            // Include la parte intera
            if (sign != '\0') {
 8004c82:	7efb      	ldrb	r3, [r7, #27]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00e      	beq.n	8004ca6 <MAX72_Print_Float+0x226>
                snprintf(str, sizeof(str), "%c%u.%0*u", sign, int_part, actual_decimals, frac_digits);
 8004c88:	4608      	mov	r0, r1
 8004c8a:	7ef9      	ldrb	r1, [r7, #27]
 8004c8c:	7bbb      	ldrb	r3, [r7, #14]
 8004c8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c90:	9202      	str	r2, [sp, #8]
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4a15      	ldr	r2, [pc, #84]	@ (8004cf0 <MAX72_Print_Float+0x270>)
 8004c9c:	4601      	mov	r1, r0
 8004c9e:	69f8      	ldr	r0, [r7, #28]
 8004ca0:	f008 f868 	bl	800cd74 <sniprintf>
 8004ca4:	e008      	b.n	8004cb8 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u.%0*u", int_part, actual_decimals, frac_digits);
 8004ca6:	7bbb      	ldrb	r3, [r7, #14]
 8004ca8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004caa:	9201      	str	r2, [sp, #4]
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cb0:	4a10      	ldr	r2, [pc, #64]	@ (8004cf4 <MAX72_Print_Float+0x274>)
 8004cb2:	69f8      	ldr	r0, [r7, #28]
 8004cb4:	f008 f85e 	bl	800cd74 <sniprintf>
            }
        }
    }

    MAX72_Print_String(str, minidigits ? MINIDIGITS : FLOAT);
 8004cb8:	78bb      	ldrb	r3, [r7, #2]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <MAX72_Print_Float+0x242>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e000      	b.n	8004cc4 <MAX72_Print_Float+0x244>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	69f8      	ldr	r0, [r7, #28]
 8004cc8:	f7ff fbfe 	bl	80044c8 <MAX72_Print_String>
 8004ccc:	46b5      	mov	sp, r6
//    MAX72_Print_String(str);
}
 8004cce:	bf00      	nop
 8004cd0:	3744      	adds	r7, #68	@ 0x44
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cd8:	cccccccd 	.word	0xcccccccd
 8004cdc:	08011320 	.word	0x08011320
 8004ce0:	08011324 	.word	0x08011324
 8004ce4:	0801131c 	.word	0x0801131c
 8004ce8:	0801132c 	.word	0x0801132c
 8004cec:	08011334 	.word	0x08011334
 8004cf0:	0801133c 	.word	0x0801133c
 8004cf4:	08011348 	.word	0x08011348

08004cf8 <MAX72_SendFrame>:

// Buffer: 8 rows x DEV_NUM devices
static uint8_t frame[8][DEV_NUM];

// Send full frame to display (reversed order for correct cascade)
static void MAX72_SendFrame(void) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
    for (uint8_t row = 1; row <= 8; row++) {
 8004cfe:	2301      	movs	r3, #1
 8004d00:	71fb      	strb	r3, [r7, #7]
 8004d02:	e020      	b.n	8004d46 <MAX72_SendFrame+0x4e>
        uint8_t pattern[DEV_NUM];
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 8004d04:	2300      	movs	r3, #0
 8004d06:	71bb      	strb	r3, [r7, #6]
 8004d08:	e011      	b.n	8004d2e <MAX72_SendFrame+0x36>
            pattern[d] = frame[row-1][DEV_NUM - 1 - d];
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	1e59      	subs	r1, r3, #1
 8004d0e:	79bb      	ldrb	r3, [r7, #6]
 8004d10:	f1c3 0203 	rsb	r2, r3, #3
 8004d14:	79bb      	ldrb	r3, [r7, #6]
 8004d16:	4810      	ldr	r0, [pc, #64]	@ (8004d58 <MAX72_SendFrame+0x60>)
 8004d18:	0089      	lsls	r1, r1, #2
 8004d1a:	4401      	add	r1, r0
 8004d1c:	440a      	add	r2, r1
 8004d1e:	7812      	ldrb	r2, [r2, #0]
 8004d20:	3308      	adds	r3, #8
 8004d22:	443b      	add	r3, r7
 8004d24:	f803 2c08 	strb.w	r2, [r3, #-8]
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 8004d28:	79bb      	ldrb	r3, [r7, #6]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	71bb      	strb	r3, [r7, #6]
 8004d2e:	79bb      	ldrb	r3, [r7, #6]
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d9ea      	bls.n	8004d0a <MAX72_SendFrame+0x12>
        }
        MAX72_SendRow(row, pattern);
 8004d34:	463a      	mov	r2, r7
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	4611      	mov	r1, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff f9da 	bl	80040f4 <MAX72_SendRow>
    for (uint8_t row = 1; row <= 8; row++) {
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	3301      	adds	r3, #1
 8004d44:	71fb      	strb	r3, [r7, #7]
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d9db      	bls.n	8004d04 <MAX72_SendFrame+0xc>
    }
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000d54 	.word	0x20000d54

08004d5c <MAX72_Scroll_Start_IT>:
}

scroll_state_t scroll_state = {0};

// Inizializza lo scrolling con un nuovo testo
void MAX72_Scroll_Start_IT(const char *text) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
    // Pulisci il frame
    memset(frame, 0, sizeof(frame));
 8004d64:	2220      	movs	r2, #32
 8004d66:	2100      	movs	r1, #0
 8004d68:	482d      	ldr	r0, [pc, #180]	@ (8004e20 <MAX72_Scroll_Start_IT+0xc4>)
 8004d6a:	f008 ffe5 	bl	800dd38 <memset>
    MAX72_SendFrame();
 8004d6e:	f7ff ffc3 	bl	8004cf8 <MAX72_SendFrame>

    // Inizializza lo stato - CAMBIATO: inizia dal primo carattere per scorrimento inverso
    scroll_state.text = text;
 8004d72:	4a2c      	ldr	r2, [pc, #176]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6013      	str	r3, [r2, #0]
    scroll_state.current_char_idx = 0; // Inizia dal primo carattere
 8004d78:	4b2a      	ldr	r3, [pc, #168]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	605a      	str	r2, [r3, #4]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004d7e:	4b29      	ldr	r3, [pc, #164]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a28      	ldr	r2, [pc, #160]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004d84:	6852      	ldr	r2, [r2, #4]
 8004d86:	4413      	add	r3, r2
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b1f      	cmp	r3, #31
 8004d8c:	d90e      	bls.n	8004dac <MAX72_Scroll_Start_IT+0x50>
            scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8004d8e:	4b25      	ldr	r3, [pc, #148]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a24      	ldr	r2, [pc, #144]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004d94:	6852      	ldr	r2, [r2, #4]
 8004d96:	4413      	add	r3, r2
 8004d98:	781b      	ldrb	r3, [r3, #0]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004d9a:	2b7e      	cmp	r3, #126	@ 0x7e
 8004d9c:	d806      	bhi.n	8004dac <MAX72_Scroll_Start_IT+0x50>
            ' ' : scroll_state.text[scroll_state.current_char_idx];
 8004d9e:	4b21      	ldr	r3, [pc, #132]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a20      	ldr	r2, [pc, #128]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004da4:	6852      	ldr	r2, [r2, #4]
 8004da6:	4413      	add	r3, r2
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	e000      	b.n	8004dae <MAX72_Scroll_Start_IT+0x52>
 8004dac:	2320      	movs	r3, #32
 8004dae:	4a1d      	ldr	r2, [pc, #116]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004db0:	7213      	strb	r3, [r2, #8]
    scroll_state.current_col = 0;
 8004db2:	4b1c      	ldr	r3, [pc, #112]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	725a      	strb	r2, [r3, #9]
    scroll_state.spacing_counter = 0;
 8004db8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	729a      	strb	r2, [r3, #10]
    scroll_state.padding_counter = 0;
 8004dbe:	4b19      	ldr	r3, [pc, #100]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	72da      	strb	r2, [r3, #11]
    scroll_state.state = 0; // Inizia con il primo carattere
 8004dc4:	4b17      	ldr	r3, [pc, #92]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	731a      	strb	r2, [r3, #12]
    scroll_state.enabled = 1;
 8004dca:	4b16      	ldr	r3, [pc, #88]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	735a      	strb	r2, [r3, #13]
    scroll_state.updated = 0; // Indica che lo scrolling è stato aggiornato
 8004dd0:	4b14      	ldr	r3, [pc, #80]	@ (8004e24 <MAX72_Scroll_Start_IT+0xc8>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	739a      	strb	r2, [r3, #14]

    uint8_t len = strlen(text);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fb fa7a 	bl	80002d0 <strlen>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = len * GLYPH_WIDTH + (len - 1) * CHAR_SPACING;
 8004de0:	7bbb      	ldrb	r3, [r7, #14]
 8004de2:	461a      	mov	r2, r3
 8004de4:	0052      	lsls	r2, r2, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	737b      	strb	r3, [r7, #13]
    uint8_t max_chars = ((DEV_NUM * 8 < temp) ? DEV_NUM*8 : temp) - 8; // Padding iniziale di 8 colonne
 8004df0:	7b7b      	ldrb	r3, [r7, #13]
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	bf28      	it	cs
 8004df6:	2320      	movcs	r3, #32
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	3b08      	subs	r3, #8
 8004dfc:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < max_chars; i++) {
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]
 8004e02:	e004      	b.n	8004e0e <MAX72_Scroll_Start_IT+0xb2>
		MAX72_Scroll_Process(); // Processa il primo carattere per inizializzare il frame
 8004e04:	f000 f81c 	bl	8004e40 <MAX72_Scroll_Process>
    for (uint8_t i = 0; i < max_chars; i++) {
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
 8004e0e:	7bfa      	ldrb	r2, [r7, #15]
 8004e10:	7b3b      	ldrb	r3, [r7, #12]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d3f6      	bcc.n	8004e04 <MAX72_Scroll_Start_IT+0xa8>
	}
}
 8004e16:	bf00      	nop
 8004e18:	bf00      	nop
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20000d54 	.word	0x20000d54
 8004e24:	20000d74 	.word	0x20000d74

08004e28 <MAX72_Scroll_Stop>:

// Ferma lo scrolling
void MAX72_Scroll_Stop(void) {
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
    scroll_state.enabled = 0;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	@ (8004e3c <MAX72_Scroll_Stop+0x14>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	735a      	strb	r2, [r3, #13]
}
 8004e32:	bf00      	nop
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	20000d74 	.word	0x20000d74

08004e40 <MAX72_Scroll_Process>:
void MAX72_Scroll_Resume(void) {
    scroll_state.enabled = 1;
}

// Funzione da chiamare nel main loop - NON bloccante
void MAX72_Scroll_Process(void) {
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b08b      	sub	sp, #44	@ 0x2c
 8004e44:	af00      	add	r7, sp, #0
    if (!scroll_state.enabled || !scroll_state.text) return;
 8004e46:	4b8a      	ldr	r3, [pc, #552]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004e48:	7b5b      	ldrb	r3, [r3, #13]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8183 	beq.w	8005156 <MAX72_Scroll_Process+0x316>
 8004e50:	4b87      	ldr	r3, [pc, #540]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 817e 	beq.w	8005156 <MAX72_Scroll_Process+0x316>

    if (scroll_state.updated) {
 8004e5a:	4b85      	ldr	r3, [pc, #532]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004e5c:	7b9b      	ldrb	r3, [r3, #14]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <MAX72_Scroll_Process+0x28>
		// Se il testo è stato aggiornato, ricalcola il frame

    	// TODO RICALCOLO DEL FRAME AGGIORNATO, fino al carattere corrente

		scroll_state.updated = 0; // Reset flag
 8004e62:	4b83      	ldr	r3, [pc, #524]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	739a      	strb	r2, [r3, #14]
	}

    switch (scroll_state.state) {
 8004e68:	4b81      	ldr	r3, [pc, #516]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004e6a:	7b1b      	ldrb	r3, [r3, #12]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	f000 80f6 	beq.w	800505e <MAX72_Scroll_Process+0x21e>
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	f300 816c 	bgt.w	8005150 <MAX72_Scroll_Process+0x310>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <MAX72_Scroll_Process+0x42>
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d072      	beq.n	8004f66 <MAX72_Scroll_Process+0x126>
 8004e80:	e166      	b.n	8005150 <MAX72_Scroll_Process+0x310>
        case 0: // Processamento carattere
        {
            uint8_t ch = scroll_state.current_char;
 8004e82:	4b7b      	ldr	r3, [pc, #492]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004e84:	7a1b      	ldrb	r3, [r3, #8]
 8004e86:	737b      	strb	r3, [r7, #13]
            uint8_t *glyph = LETTERS[ch - ' '].value;
 8004e88:	7b7b      	ldrb	r3, [r7, #13]
 8004e8a:	f1a3 0220 	sub.w	r2, r3, #32
 8004e8e:	4613      	mov	r3, r2
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	4413      	add	r3, r2
 8004e94:	4a77      	ldr	r2, [pc, #476]	@ (8005074 <MAX72_Scroll_Process+0x234>)
 8004e96:	4413      	add	r3, r2
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60bb      	str	r3, [r7, #8]

            // CAMBIATO: Shift verso destra (da destra verso sinistra)
            for (uint8_t row = 0; row < 8; row++) {
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004ea2:	e047      	b.n	8004f34 <MAX72_Scroll_Process+0xf4>
                uint8_t new_bit = (glyph[row] >> scroll_state.current_col) & 0x01;
 8004ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	4413      	add	r3, r2
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	4b6f      	ldr	r3, [pc, #444]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004eb2:	7a5b      	ldrb	r3, [r3, #9]
 8004eb4:	fa42 f303 	asr.w	r3, r2, r3
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	71fb      	strb	r3, [r7, #7]
                uint8_t carry = new_bit;
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // CAMBIATO: Shift right invece di left, da device più a destra
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	623b      	str	r3, [r7, #32]
 8004eca:	e02b      	b.n	8004f24 <MAX72_Scroll_Process+0xe4>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8004ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ed0:	4a69      	ldr	r2, [pc, #420]	@ (8005078 <MAX72_Scroll_Process+0x238>)
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	441a      	add	r2, r3
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	4413      	add	r3, r2
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	71bb      	strb	r3, [r7, #6]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8004ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ee6:	4a64      	ldr	r2, [pc, #400]	@ (8005078 <MAX72_Scroll_Process+0x238>)
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	4413      	add	r3, r2
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	085b      	lsrs	r3, r3, #1
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	b25a      	sxtb	r2, r3
 8004ef8:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8004efc:	01db      	lsls	r3, r3, #7
 8004efe:	b25b      	sxtb	r3, r3
 8004f00:	4313      	orrs	r3, r2
 8004f02:	b25a      	sxtb	r2, r3
 8004f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f08:	b2d1      	uxtb	r1, r2
 8004f0a:	4a5b      	ldr	r2, [pc, #364]	@ (8005078 <MAX72_Scroll_Process+0x238>)
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	441a      	add	r2, r3
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	4413      	add	r3, r2
 8004f14:	460a      	mov	r2, r1
 8004f16:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8004f18:	79bb      	ldrb	r3, [r7, #6]
 8004f1a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	623b      	str	r3, [r7, #32]
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	dad0      	bge.n	8004ecc <MAX72_Scroll_Process+0x8c>
            for (uint8_t row = 0; row < 8; row++) {
 8004f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f2e:	3301      	adds	r3, #1
 8004f30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f38:	2b07      	cmp	r3, #7
 8004f3a:	d9b3      	bls.n	8004ea4 <MAX72_Scroll_Process+0x64>
                }
            }

            scroll_state.current_col++;
 8004f3c:	4b4c      	ldr	r3, [pc, #304]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004f3e:	7a5b      	ldrb	r3, [r3, #9]
 8004f40:	3301      	adds	r3, #1
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	4b4a      	ldr	r3, [pc, #296]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004f46:	725a      	strb	r2, [r3, #9]

            // Finito il carattere corrente?
            if (scroll_state.current_col >= GLYPH_WIDTH) {
 8004f48:	4b49      	ldr	r3, [pc, #292]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004f4a:	7a5b      	ldrb	r3, [r3, #9]
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	f240 80fa 	bls.w	8005146 <MAX72_Scroll_Process+0x306>
                scroll_state.current_col = 0;
 8004f52:	4b47      	ldr	r3, [pc, #284]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 8004f58:	4b45      	ldr	r3, [pc, #276]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	729a      	strb	r2, [r3, #10]
                scroll_state.state = 1; // Passa agli spazi tra caratteri
 8004f5e:	4b44      	ldr	r3, [pc, #272]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	731a      	strb	r2, [r3, #12]
            }
            break;
 8004f64:	e0ef      	b.n	8005146 <MAX72_Scroll_Process+0x306>
        }

        case 1: // Spacing tra caratteri
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 8004f66:	2300      	movs	r3, #0
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e032      	b.n	8004fd2 <MAX72_Scroll_Process+0x192>
                uint8_t carry = 0;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004f70:	2303      	movs	r3, #3
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	e027      	b.n	8004fc6 <MAX72_Scroll_Process+0x186>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8004f76:	7ffb      	ldrb	r3, [r7, #31]
 8004f78:	4a3f      	ldr	r2, [pc, #252]	@ (8005078 <MAX72_Scroll_Process+0x238>)
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	441a      	add	r2, r3
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	4413      	add	r3, r2
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	73bb      	strb	r3, [r7, #14]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8004f8a:	7ffb      	ldrb	r3, [r7, #31]
 8004f8c:	4a3a      	ldr	r2, [pc, #232]	@ (8005078 <MAX72_Scroll_Process+0x238>)
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	441a      	add	r2, r3
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	4413      	add	r3, r2
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	085b      	lsrs	r3, r3, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	b25a      	sxtb	r2, r3
 8004f9e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004fa2:	01db      	lsls	r3, r3, #7
 8004fa4:	b25b      	sxtb	r3, r3
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	b25a      	sxtb	r2, r3
 8004faa:	7ffb      	ldrb	r3, [r7, #31]
 8004fac:	b2d1      	uxtb	r1, r2
 8004fae:	4a32      	ldr	r2, [pc, #200]	@ (8005078 <MAX72_Scroll_Process+0x238>)
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	441a      	add	r2, r3
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	460a      	mov	r2, r1
 8004fba:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	dad4      	bge.n	8004f76 <MAX72_Scroll_Process+0x136>
            for (uint8_t row = 0; row < 8; row++) {
 8004fcc:	7ffb      	ldrb	r3, [r7, #31]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	7ffb      	ldrb	r3, [r7, #31]
 8004fd4:	2b07      	cmp	r3, #7
 8004fd6:	d9c9      	bls.n	8004f6c <MAX72_Scroll_Process+0x12c>
                }
            }

            scroll_state.spacing_counter++;
 8004fd8:	4b25      	ldr	r3, [pc, #148]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004fda:	7a9b      	ldrb	r3, [r3, #10]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	4b23      	ldr	r3, [pc, #140]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004fe2:	729a      	strb	r2, [r3, #10]

            // Finito lo spacing?
            if (scroll_state.spacing_counter >= CHAR_SPACING) {
 8004fe4:	4b22      	ldr	r3, [pc, #136]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004fe6:	7a9b      	ldrb	r3, [r3, #10]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80ae 	beq.w	800514a <MAX72_Scroll_Process+0x30a>
                scroll_state.spacing_counter = 0;
 8004fee:	4b20      	ldr	r3, [pc, #128]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	729a      	strb	r2, [r3, #10]

                // CAMBIATO: Passa al carattere successivo (incrementa invece di decrementare)
                scroll_state.current_char_idx++;
 8004ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8004ffc:	6053      	str	r3, [r2, #4]
                if (scroll_state.current_char_idx >= strlen(scroll_state.text)) {
 8004ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	461c      	mov	r4, r3
 8005004:	4b1a      	ldr	r3, [pc, #104]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f7fb f961 	bl	80002d0 <strlen>
 800500e:	4603      	mov	r3, r0
 8005010:	429c      	cmp	r4, r3
 8005012:	d306      	bcc.n	8005022 <MAX72_Scroll_Process+0x1e2>
                    // Finiti tutti i caratteri, passa al padding finale
                    scroll_state.state = 2;
 8005014:	4b16      	ldr	r3, [pc, #88]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8005016:	2202      	movs	r2, #2
 8005018:	731a      	strb	r2, [r3, #12]
                    scroll_state.padding_counter = 0;
 800501a:	4b15      	ldr	r3, [pc, #84]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 800501c:	2200      	movs	r2, #0
 800501e:	72da      	strb	r2, [r3, #11]
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
                    scroll_state.state = 0;
                }
            }
            break;
 8005020:	e093      	b.n	800514a <MAX72_Scroll_Process+0x30a>
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8005022:	4b13      	ldr	r3, [pc, #76]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a12      	ldr	r2, [pc, #72]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8005028:	6852      	ldr	r2, [r2, #4]
 800502a:	4413      	add	r3, r2
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b1f      	cmp	r3, #31
 8005030:	d90e      	bls.n	8005050 <MAX72_Scroll_Process+0x210>
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8005032:	4b0f      	ldr	r3, [pc, #60]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a0e      	ldr	r2, [pc, #56]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8005038:	6852      	ldr	r2, [r2, #4]
 800503a:	4413      	add	r3, r2
 800503c:	781b      	ldrb	r3, [r3, #0]
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 800503e:	2b7e      	cmp	r3, #126	@ 0x7e
 8005040:	d806      	bhi.n	8005050 <MAX72_Scroll_Process+0x210>
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
 8005042:	4b0b      	ldr	r3, [pc, #44]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a0a      	ldr	r2, [pc, #40]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8005048:	6852      	ldr	r2, [r2, #4]
 800504a:	4413      	add	r3, r2
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	e000      	b.n	8005052 <MAX72_Scroll_Process+0x212>
 8005050:	2320      	movs	r3, #32
 8005052:	4a07      	ldr	r2, [pc, #28]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8005054:	7213      	strb	r3, [r2, #8]
                    scroll_state.state = 0;
 8005056:	4b06      	ldr	r3, [pc, #24]	@ (8005070 <MAX72_Scroll_Process+0x230>)
 8005058:	2200      	movs	r2, #0
 800505a:	731a      	strb	r2, [r3, #12]
            break;
 800505c:	e075      	b.n	800514a <MAX72_Scroll_Process+0x30a>
        }

        case 2: // Padding finale
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 800505e:	2300      	movs	r3, #0
 8005060:	75fb      	strb	r3, [r7, #23]
 8005062:	e039      	b.n	80050d8 <MAX72_Scroll_Process+0x298>
                uint8_t carry = 0;
 8005064:	2300      	movs	r3, #0
 8005066:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8005068:	2303      	movs	r3, #3
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	e02e      	b.n	80050cc <MAX72_Scroll_Process+0x28c>
 800506e:	bf00      	nop
 8005070:	20000d74 	.word	0x20000d74
 8005074:	2000000c 	.word	0x2000000c
 8005078:	20000d54 	.word	0x20000d54
                    uint8_t next_carry = frame[row][d] & 0x01;
 800507c:	7dfb      	ldrb	r3, [r7, #23]
 800507e:	4a38      	ldr	r2, [pc, #224]	@ (8005160 <MAX72_Scroll_Process+0x320>)
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	441a      	add	r2, r3
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4413      	add	r3, r2
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8005090:	7dfb      	ldrb	r3, [r7, #23]
 8005092:	4a33      	ldr	r2, [pc, #204]	@ (8005160 <MAX72_Scroll_Process+0x320>)
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4413      	add	r3, r2
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	085b      	lsrs	r3, r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	b25a      	sxtb	r2, r3
 80050a4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80050a8:	01db      	lsls	r3, r3, #7
 80050aa:	b25b      	sxtb	r3, r3
 80050ac:	4313      	orrs	r3, r2
 80050ae:	b25a      	sxtb	r2, r3
 80050b0:	7dfb      	ldrb	r3, [r7, #23]
 80050b2:	b2d1      	uxtb	r1, r2
 80050b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005160 <MAX72_Scroll_Process+0x320>)
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	441a      	add	r2, r3
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	460a      	mov	r2, r1
 80050c0:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	dad4      	bge.n	800507c <MAX72_Scroll_Process+0x23c>
            for (uint8_t row = 0; row < 8; row++) {
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
 80050d4:	3301      	adds	r3, #1
 80050d6:	75fb      	strb	r3, [r7, #23]
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
 80050da:	2b07      	cmp	r3, #7
 80050dc:	d9c2      	bls.n	8005064 <MAX72_Scroll_Process+0x224>
                }
            }

            scroll_state.padding_counter++;
 80050de:	4b21      	ldr	r3, [pc, #132]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 80050e0:	7adb      	ldrb	r3, [r3, #11]
 80050e2:	3301      	adds	r3, #1
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 80050e8:	72da      	strb	r2, [r3, #11]

            // Finito il padding? (GLYPH_WIDTH + CHAR_SPACING)
            if (scroll_state.padding_counter >= (GLYPH_WIDTH + CHAR_SPACING)) {
 80050ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 80050ec:	7adb      	ldrb	r3, [r3, #11]
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	d92d      	bls.n	800514e <MAX72_Scroll_Process+0x30e>
                // CAMBIATO: Ricomincia dal primo carattere (indice 0)
                scroll_state.current_char_idx = 0;
 80050f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	605a      	str	r2, [r3, #4]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80050f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a19      	ldr	r2, [pc, #100]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 80050fe:	6852      	ldr	r2, [r2, #4]
 8005100:	4413      	add	r3, r2
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b1f      	cmp	r3, #31
 8005106:	d90e      	bls.n	8005126 <MAX72_Scroll_Process+0x2e6>
						scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8005108:	4b16      	ldr	r3, [pc, #88]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a15      	ldr	r2, [pc, #84]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 800510e:	6852      	ldr	r2, [r2, #4]
 8005110:	4413      	add	r3, r2
 8005112:	781b      	ldrb	r3, [r3, #0]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8005114:	2b7e      	cmp	r3, #126	@ 0x7e
 8005116:	d806      	bhi.n	8005126 <MAX72_Scroll_Process+0x2e6>
						' ' : scroll_state.text[scroll_state.current_char_idx];
 8005118:	4b12      	ldr	r3, [pc, #72]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a11      	ldr	r2, [pc, #68]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 800511e:	6852      	ldr	r2, [r2, #4]
 8005120:	4413      	add	r3, r2
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	e000      	b.n	8005128 <MAX72_Scroll_Process+0x2e8>
 8005126:	2320      	movs	r3, #32
 8005128:	4a0e      	ldr	r2, [pc, #56]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 800512a:	7213      	strb	r3, [r2, #8]
                scroll_state.current_col = 0;
 800512c:	4b0d      	ldr	r3, [pc, #52]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 800512e:	2200      	movs	r2, #0
 8005130:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 8005132:	4b0c      	ldr	r3, [pc, #48]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 8005134:	2200      	movs	r2, #0
 8005136:	729a      	strb	r2, [r3, #10]
                scroll_state.padding_counter = 0;
 8005138:	4b0a      	ldr	r3, [pc, #40]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 800513a:	2200      	movs	r2, #0
 800513c:	72da      	strb	r2, [r3, #11]
                scroll_state.state = 0;
 800513e:	4b09      	ldr	r3, [pc, #36]	@ (8005164 <MAX72_Scroll_Process+0x324>)
 8005140:	2200      	movs	r2, #0
 8005142:	731a      	strb	r2, [r3, #12]
            }
            break;
 8005144:	e003      	b.n	800514e <MAX72_Scroll_Process+0x30e>
            break;
 8005146:	bf00      	nop
 8005148:	e002      	b.n	8005150 <MAX72_Scroll_Process+0x310>
            break;
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <MAX72_Scroll_Process+0x310>
            break;
 800514e:	bf00      	nop
        }
    }

    // Aggiorna il display
    MAX72_SendFrame();
 8005150:	f7ff fdd2 	bl	8004cf8 <MAX72_SendFrame>
 8005154:	e000      	b.n	8005158 <MAX72_Scroll_Process+0x318>
    if (!scroll_state.enabled || !scroll_state.text) return;
 8005156:	bf00      	nop
}
 8005158:	372c      	adds	r7, #44	@ 0x2c
 800515a:	46bd      	mov	sp, r7
 800515c:	bd90      	pop	{r4, r7, pc}
 800515e:	bf00      	nop
 8005160:	20000d54 	.word	0x20000d54
 8005164:	20000d74 	.word	0x20000d74

08005168 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8005168:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80051a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800516c:	f7fc fe1a 	bl	8001da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005170:	480c      	ldr	r0, [pc, #48]	@ (80051a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005172:	490d      	ldr	r1, [pc, #52]	@ (80051a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005174:	4a0d      	ldr	r2, [pc, #52]	@ (80051ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005178:	e002      	b.n	8005180 <LoopCopyDataInit>

0800517a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800517a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800517c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800517e:	3304      	adds	r3, #4

08005180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005184:	d3f9      	bcc.n	800517a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005186:	4a0a      	ldr	r2, [pc, #40]	@ (80051b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005188:	4c0a      	ldr	r4, [pc, #40]	@ (80051b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800518a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800518c:	e001      	b.n	8005192 <LoopFillZerobss>

0800518e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800518e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005190:	3204      	adds	r2, #4

08005192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005194:	d3fb      	bcc.n	800518e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005196:	f008 fe25 	bl	800dde4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800519a:	f7fc fa0b 	bl	80015b4 <main>
  bx  lr    
 800519e:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80051a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80051a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051a8:	20000594 	.word	0x20000594
  ldr r2, =_sidata
 80051ac:	08011808 	.word	0x08011808
  ldr r2, =_sbss
 80051b0:	20000594 	.word	0x20000594
  ldr r4, =_ebss
 80051b4:	20000ed4 	.word	0x20000ed4

080051b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051b8:	e7fe      	b.n	80051b8 <ADC_IRQHandler>

080051ba <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	607b      	str	r3, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	817b      	strh	r3, [r7, #10]
 80051c8:	4613      	mov	r3, r2
 80051ca:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	897a      	ldrh	r2, [r7, #10]
 80051d0:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	893a      	ldrh	r2, [r7, #8]
 80051d6:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	605a      	str	r2, [r3, #4]
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <arm_mat_inverse_f32>:
}
#else
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b09b      	sub	sp, #108	@ 0x6c
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	623b      	str	r3, [r7, #32]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	885b      	ldrh	r3, [r3, #2]
 800520a:	61fb      	str	r3, [r7, #28]

#if defined (ARM_MATH_DSP)

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k,l;      /* loop counters */
 8005212:	2300      	movs	r3, #0
 8005214:	63fb      	str	r3, [r7, #60]	@ 0x3c
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800521e:	e029      	b.n	8005274 <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8005220:	6a3a      	ldr	r2, [r7, #32]
 8005222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 8005228:	e008      	b.n	800523c <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 800522a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800522c:	1d1a      	adds	r2, r3, #4
 800522e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
        j--;
 8005236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005238:	3b01      	subs	r3, #1
 800523a:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 800523c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f3      	bne.n	800522a <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 8005242:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005244:	1d1a      	adds	r2, r3, #4
 8005246:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005248:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800524c:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800524e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005250:	3b01      	subs	r3, #1
 8005252:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 8005254:	e008      	b.n	8005268 <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 8005256:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005258:	1d1a      	adds	r2, r3, #4
 800525a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
        j--;
 8005262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005264:	3b01      	subs	r3, #1
 8005266:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 8005268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f3      	bne.n	8005256 <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement loop counter */
      rowCnt--;
 800526e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005270:	3b01      	subs	r3, #1
 8005272:	643b      	str	r3, [r7, #64]	@ 0x40
    while (rowCnt > 0U)
 8005274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1d2      	bne.n	8005220 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Index modifier to navigate through the columns */
    l = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (loopCnt > 0U)
 8005282:	e13b      	b.n	80054fc <arm_mat_inverse_f32+0x312>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 8005284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	fb02 f303 	mul.w	r3, r2, r3
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005290:	4413      	add	r3, r2
 8005292:	663b      	str	r3, [r7, #96]	@ 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 8005294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	fb02 f303 	mul.w	r3, r2, r3
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a0:	4413      	add	r3, r2
 80052a2:	65bb      	str	r3, [r7, #88]	@ 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 80052a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	64bb      	str	r3, [r7, #72]	@ 0x48

    

      /* Check if the pivot element is zero */
      if (*pInT1 == 0.0f)
 80052aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052ac:	edd3 7a00 	vldr	s15, [r3]
 80052b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80052b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b8:	d156      	bne.n	8005368 <arm_mat_inverse_f32+0x17e>
      {
        /* Loop over the number rows present below */

        for (i = 1U; i < numRows - l; i++)
 80052ba:	2301      	movs	r3, #1
 80052bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052be:	e04d      	b.n	800535c <arm_mat_inverse_f32+0x172>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * i);
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052c4:	fb02 f303 	mul.w	r3, r2, r3
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80052cc:	4413      	add	r3, r2
 80052ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
          pOutT2 = pOutT1 + (numCols * i);
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052d4:	fb02 f303 	mul.w	r3, r2, r3
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052dc:	4413      	add	r3, r2
 80052de:	657b      	str	r3, [r7, #84]	@ 0x54

          /* Check if there is a non zero pivot element to
           * replace in the rows below */
          if (*pInT2 != 0.0f)
 80052e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052e2:	edd3 7a00 	vldr	s15, [r3]
 80052e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80052ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ee:	d032      	beq.n	8005356 <arm_mat_inverse_f32+0x16c>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	63bb      	str	r3, [r7, #56]	@ 0x38

            while (j > 0U)
 80052f8:	e010      	b.n	800531c <arm_mat_inverse_f32+0x132>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 80052fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	61bb      	str	r3, [r7, #24]
              *pInT2++ = *pInT1;
 8005300:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005302:	1d1a      	adds	r2, r3, #4
 8005304:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005306:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 800530c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800530e:	1d1a      	adds	r2, r3, #4
 8005310:	663a      	str	r2, [r7, #96]	@ 0x60
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8005316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005318:	3b01      	subs	r3, #1
 800531a:	63bb      	str	r3, [r7, #56]	@ 0x38
            while (j > 0U)
 800531c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1eb      	bne.n	80052fa <arm_mat_inverse_f32+0x110>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	63bb      	str	r3, [r7, #56]	@ 0x38

            while (j > 0U)
 8005326:	e010      	b.n	800534a <arm_mat_inverse_f32+0x160>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 8005328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	61bb      	str	r3, [r7, #24]
              *pOutT2++ = *pOutT1;
 800532e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005330:	1d1a      	adds	r2, r3, #4
 8005332:	657a      	str	r2, [r7, #84]	@ 0x54
 8005334:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 800533a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800533c:	1d1a      	adds	r2, r3, #4
 800533e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	601a      	str	r2, [r3, #0]

              /* Decrement loop counter */
              j--;
 8005344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005346:	3b01      	subs	r3, #1
 8005348:	63bb      	str	r3, [r7, #56]	@ 0x38
            while (j > 0U)
 800534a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1eb      	bne.n	8005328 <arm_mat_inverse_f32+0x13e>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8005350:	2301      	movs	r3, #1
 8005352:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Break after exchange is done */
            break;
 8005354:	e008      	b.n	8005368 <arm_mat_inverse_f32+0x17e>
        for (i = 1U; i < numRows - l; i++)
 8005356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005358:	3301      	adds	r3, #1
 800535a:	647b      	str	r3, [r7, #68]	@ 0x44
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005364:	429a      	cmp	r2, r3
 8005366:	d3ab      	bcc.n	80052c0 <arm_mat_inverse_f32+0xd6>
          /* Decrement loop counter */
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 8005368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536a:	2b01      	cmp	r3, #1
 800536c:	d009      	beq.n	8005382 <arm_mat_inverse_f32+0x198>
 800536e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005372:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800537a:	d102      	bne.n	8005382 <arm_mat_inverse_f32+0x198>
      {
        return ARM_MATH_SINGULAR;
 800537c:	f06f 0304 	mvn.w	r3, #4
 8005380:	e0f6      	b.n	8005570 <arm_mat_inverse_f32+0x386>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 8005382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	fb02 f303 	mul.w	r3, r2, r3
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800538e:	4413      	add	r3, r2
 8005390:	617b      	str	r3, [r7, #20]
      pPivotRowDst = pOut + (l * numCols);
 8005392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800539e:	4413      	add	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	663b      	str	r3, [r7, #96]	@ 0x60
      pInT2 = pPivotRowDst;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	65fb      	str	r3, [r7, #92]	@ 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	64bb      	str	r3, [r7, #72]	@ 0x48

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	63bb      	str	r3, [r7, #56]	@ 0x38

      while (j > 0U)
 80053b8:	e010      	b.n	80053dc <arm_mat_inverse_f32+0x1f2>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 80053ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]
        *pInT1++ = in1 / in;
 80053c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053c2:	1d1a      	adds	r2, r3, #4
 80053c4:	663a      	str	r2, [r7, #96]	@ 0x60
 80053c6:	edd7 6a03 	vldr	s13, [r7, #12]
 80053ca:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80053ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d2:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 80053d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d8:	3b01      	subs	r3, #1
 80053da:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 80053dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1eb      	bne.n	80053ba <arm_mat_inverse_f32+0x1d0>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	63bb      	str	r3, [r7, #56]	@ 0x38

      while (j > 0U)
 80053e6:	e010      	b.n	800540a <arm_mat_inverse_f32+0x220>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 80053e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60fb      	str	r3, [r7, #12]
        *pInT2++ = in1 / in;
 80053ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053f0:	1d1a      	adds	r2, r3, #4
 80053f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80053f4:	edd7 6a03 	vldr	s13, [r7, #12]
 80053f8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80053fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005400:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8005404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005406:	3b01      	subs	r3, #1
 8005408:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 800540a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1eb      	bne.n	80053e8 <arm_mat_inverse_f32+0x1fe>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8005410:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005412:	663b      	str	r3, [r7, #96]	@ 0x60
      pInT2 = pOut;
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	65fb      	str	r3, [r7, #92]	@ 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	633b      	str	r3, [r7, #48]	@ 0x30

      while (k > 0U)
 8005420:	e060      	b.n	80054e4 <arm_mat_inverse_f32+0x2fa>
      {
        /* Check for the pivot element */
        if (i == l)
 8005422:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005426:	429a      	cmp	r2, r3
 8005428:	d10c      	bne.n	8005444 <arm_mat_inverse_f32+0x25a>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005434:	4413      	add	r3, r2
 8005436:	663b      	str	r3, [r7, #96]	@ 0x60

          pInT2 += numCols;
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800543e:	4413      	add	r3, r2
 8005440:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005442:	e044      	b.n	80054ce <arm_mat_inverse_f32+0x2e4>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8005444:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	64bb      	str	r3, [r7, #72]	@ 0x48

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	653b      	str	r3, [r7, #80]	@ 0x50
          pPRT_pDst = pPivotRowDst;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	64fb      	str	r3, [r7, #76]	@ 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	63bb      	str	r3, [r7, #56]	@ 0x38

          while (j > 0U)
 800545a:	e017      	b.n	800548c <arm_mat_inverse_f32+0x2a2>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 800545c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60fb      	str	r3, [r7, #12]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8005462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005464:	1d1a      	adds	r2, r3, #4
 8005466:	653a      	str	r2, [r7, #80]	@ 0x50
 8005468:	ed93 7a00 	vldr	s14, [r3]
 800546c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005474:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005476:	1d1a      	adds	r2, r3, #4
 8005478:	663a      	str	r2, [r7, #96]	@ 0x60
 800547a:	ed97 7a03 	vldr	s14, [r7, #12]
 800547e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005482:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8005486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005488:	3b01      	subs	r3, #1
 800548a:	63bb      	str	r3, [r7, #56]	@ 0x38
          while (j > 0U)
 800548c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e4      	bne.n	800545c <arm_mat_inverse_f32+0x272>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	63bb      	str	r3, [r7, #56]	@ 0x38

          while (j > 0U)
 8005496:	e017      	b.n	80054c8 <arm_mat_inverse_f32+0x2de>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8005498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60fb      	str	r3, [r7, #12]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 800549e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054a0:	1d1a      	adds	r2, r3, #4
 80054a2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80054a4:	ed93 7a00 	vldr	s14, [r3]
 80054a8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80054ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80054b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80054ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054be:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement loop counter */
            j--;
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c4:	3b01      	subs	r3, #1
 80054c6:	63bb      	str	r3, [r7, #56]	@ 0x38
          while (j > 0U)
 80054c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e4      	bne.n	8005498 <arm_mat_inverse_f32+0x2ae>
          }

        }

        /* Increment temporary input pointer */
        pInT1 = pInT1 + l;
 80054ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054d4:	4413      	add	r3, r2
 80054d6:	663b      	str	r3, [r7, #96]	@ 0x60

        /* Decrement loop counter */
        k--;
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	3b01      	subs	r3, #1
 80054dc:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment pivot index */
        i++;
 80054de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e0:	3301      	adds	r3, #1
 80054e2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (k > 0U)
 80054e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d19b      	bne.n	8005422 <arm_mat_inverse_f32+0x238>
      }

      /* Increment the input pointer */
      pIn++;
 80054ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054ec:	3304      	adds	r3, #4
 80054ee:	667b      	str	r3, [r7, #100]	@ 0x64

      /* Decrement the loop counter */
      loopCnt--;
 80054f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f2:	3b01      	subs	r3, #1
 80054f4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Increment the index modifier */
      l++;
 80054f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f8:	3301      	adds	r3, #1
 80054fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (loopCnt > 0U)
 80054fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f47f aec0 	bne.w	8005284 <arm_mat_inverse_f32+0x9a>
    }

#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005504:	2300      	movs	r3, #0
 8005506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if ((flag != 1U) && (in == 0.0f))
 800550a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d02d      	beq.n	800556c <arm_mat_inverse_f32+0x382>
 8005510:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005514:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551c:	d126      	bne.n	800556c <arm_mat_inverse_f32+0x382>
    {
      pIn = pSrc->pData;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8005524:	2300      	movs	r3, #0
 8005526:	647b      	str	r3, [r7, #68]	@ 0x44
 8005528:	e00d      	b.n	8005546 <arm_mat_inverse_f32+0x35c>
      {
        if (pIn[i] != 0.0f)
 800552a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005530:	4413      	add	r3, r2
 8005532:	edd3 7a00 	vldr	s15, [r3]
 8005536:	eef5 7a40 	vcmp.f32	s15, #0.0
 800553a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553e:	d10a      	bne.n	8005556 <arm_mat_inverse_f32+0x36c>
      for (i = 0; i < numRows * numCols; i++)
 8005540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005542:	3301      	adds	r3, #1
 8005544:	647b      	str	r3, [r7, #68]	@ 0x44
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	fb02 f303 	mul.w	r3, r2, r3
 800554e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005550:	429a      	cmp	r2, r3
 8005552:	d3ea      	bcc.n	800552a <arm_mat_inverse_f32+0x340>
 8005554:	e000      	b.n	8005558 <arm_mat_inverse_f32+0x36e>
            break;
 8005556:	bf00      	nop
      }

      if (i == numRows * numCols)
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	fb02 f303 	mul.w	r3, r2, r3
 8005560:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005562:	429a      	cmp	r2, r3
 8005564:	d102      	bne.n	800556c <arm_mat_inverse_f32+0x382>
        status = ARM_MATH_SINGULAR;
 8005566:	23fb      	movs	r3, #251	@ 0xfb
 8005568:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }
  }

  /* Return to application */
  return (status);
 800556c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
}
 8005570:	4618      	mov	r0, r3
 8005572:	376c      	adds	r7, #108	@ 0x6c
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800557c:	b480      	push	{r7}
 800557e:	b093      	sub	sp, #76	@ 0x4c
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	885b      	ldrh	r3, [r3, #2]
 80055b0:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	885b      	ldrh	r3, [r3, #2]
 80055b6:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80055b8:	2300      	movs	r3, #0
 80055ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055bc:	8b7b      	ldrh	r3, [r7, #26]
 80055be:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 80055c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	4413      	add	r3, r2
 80055c8:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 80055ca:	8b3b      	ldrh	r3, [r7, #24]
 80055cc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 80055da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055dc:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 80055de:	8afb      	ldrh	r3, [r7, #22]
 80055e0:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 80055e2:	e017      	b.n	8005614 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 80055e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055e6:	1d1a      	adds	r2, r3, #4
 80055e8:	647a      	str	r2, [r7, #68]	@ 0x44
 80055ea:	ed93 7a00 	vldr	s14, [r3]
 80055ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055f0:	edd3 7a00 	vldr	s15, [r3]
 80055f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80055fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005600:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8005604:	8b3b      	ldrh	r3, [r7, #24]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800560a:	4413      	add	r3, r2
 800560c:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	3b01      	subs	r3, #1
 8005612:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8005614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e4      	bne.n	80055e4 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800561a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561c:	1d1a      	adds	r2, r3, #4
 800561e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005620:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005622:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8005624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005626:	3b01      	subs	r3, #1
 8005628:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800562a:	8b3a      	ldrh	r2, [r7, #24]
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	6a3a      	ldr	r2, [r7, #32]
 8005634:	4413      	add	r3, r2
 8005636:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ca      	bne.n	80055d4 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800563e:	8b3b      	ldrh	r3, [r7, #24]
 8005640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005642:	4413      	add	r3, r2
 8005644:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8005646:	8afb      	ldrh	r3, [r7, #22]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800564c:	4413      	add	r3, r2
 800564e:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	3b01      	subs	r3, #1
 8005654:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1b1      	bne.n	80055c0 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800565c:	2300      	movs	r3, #0
 800565e:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8005660:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8005664:	4618      	mov	r0, r3
 8005666:	374c      	adds	r7, #76	@ 0x4c
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8005670:	b480      	push	{r7}
 8005672:	b08b      	sub	sp, #44	@ 0x2c
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	885b      	ldrh	r3, [r3, #2]
 8005690:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8005692:	89fb      	ldrh	r3, [r7, #14]
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4413      	add	r3, r2
 80056a2:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 80056a4:	89bb      	ldrh	r3, [r7, #12]
 80056a6:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 80056a8:	e00d      	b.n	80056c6 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	1d1a      	adds	r2, r3, #4
 80056ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 80056b6:	89fb      	ldrh	r3, [r7, #14]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	6a3a      	ldr	r2, [r7, #32]
 80056bc:	4413      	add	r3, r2
 80056be:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1ee      	bne.n	80056aa <arm_mat_trans_f32+0x3a>
      }

      i++;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	3301      	adds	r3, #1
 80056d0:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1dd      	bne.n	800569a <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80056de:	2300      	movs	r3, #0
 80056e0:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 80056e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	372c      	adds	r7, #44	@ 0x2c
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80056f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005734 <HAL_Init+0x40>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005734 <HAL_Init+0x40>)
 80056fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005702:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005704:	4b0b      	ldr	r3, [pc, #44]	@ (8005734 <HAL_Init+0x40>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a0a      	ldr	r2, [pc, #40]	@ (8005734 <HAL_Init+0x40>)
 800570a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800570e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005710:	4b08      	ldr	r3, [pc, #32]	@ (8005734 <HAL_Init+0x40>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a07      	ldr	r2, [pc, #28]	@ (8005734 <HAL_Init+0x40>)
 8005716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800571a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800571c:	2003      	movs	r0, #3
 800571e:	f000 fd5f 	bl	80061e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005722:	2000      	movs	r0, #0
 8005724:	f000 f808 	bl	8005738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005728:	f7fc f9c2 	bl	8001ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40023c00 	.word	0x40023c00

08005738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005740:	4b12      	ldr	r3, [pc, #72]	@ (800578c <HAL_InitTick+0x54>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	4b12      	ldr	r3, [pc, #72]	@ (8005790 <HAL_InitTick+0x58>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	4619      	mov	r1, r3
 800574a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800574e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005752:	fbb2 f3f3 	udiv	r3, r2, r3
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fd77 	bl	800624a <HAL_SYSTICK_Config>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e00e      	b.n	8005784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b0f      	cmp	r3, #15
 800576a:	d80a      	bhi.n	8005782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800576c:	2200      	movs	r2, #0
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005774:	f000 fd3f 	bl	80061f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005778:	4a06      	ldr	r2, [pc, #24]	@ (8005794 <HAL_InitTick+0x5c>)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	e000      	b.n	8005784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
}
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000004 	.word	0x20000004
 8005790:	200003c8 	.word	0x200003c8
 8005794:	200003c4 	.word	0x200003c4

08005798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800579c:	4b06      	ldr	r3, [pc, #24]	@ (80057b8 <HAL_IncTick+0x20>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	4b06      	ldr	r3, [pc, #24]	@ (80057bc <HAL_IncTick+0x24>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4413      	add	r3, r2
 80057a8:	4a04      	ldr	r2, [pc, #16]	@ (80057bc <HAL_IncTick+0x24>)
 80057aa:	6013      	str	r3, [r2, #0]
}
 80057ac:	bf00      	nop
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	200003c8 	.word	0x200003c8
 80057bc:	20000d84 	.word	0x20000d84

080057c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  return uwTick;
 80057c4:	4b03      	ldr	r3, [pc, #12]	@ (80057d4 <HAL_GetTick+0x14>)
 80057c6:	681b      	ldr	r3, [r3, #0]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	20000d84 	.word	0x20000d84

080057d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057e0:	f7ff ffee 	bl	80057c0 <HAL_GetTick>
 80057e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057f0:	d005      	beq.n	80057fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057f2:	4b0a      	ldr	r3, [pc, #40]	@ (800581c <HAL_Delay+0x44>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80057fe:	bf00      	nop
 8005800:	f7ff ffde 	bl	80057c0 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	429a      	cmp	r2, r3
 800580e:	d8f7      	bhi.n	8005800 <HAL_Delay+0x28>
  {
  }
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	200003c8 	.word	0x200003c8

08005820 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e033      	b.n	800589e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fb fc70 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005856:	f003 0310 	and.w	r3, r3, #16
 800585a:	2b00      	cmp	r3, #0
 800585c:	d118      	bne.n	8005890 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005866:	f023 0302 	bic.w	r3, r3, #2
 800586a:	f043 0202 	orr.w	r2, r3, #2
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fae8 	bl	8005e48 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	f043 0201 	orr.w	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	641a      	str	r2, [r3, #64]	@ 0x40
 800588e:	e001      	b.n	8005894 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800589c:	7bfb      	ldrb	r3, [r7, #15]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_ADC_Start+0x1a>
 80058be:	2302      	movs	r3, #2
 80058c0:	e0b2      	b.n	8005a28 <HAL_ADC_Start+0x180>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d018      	beq.n	800590a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80058e8:	4b52      	ldr	r3, [pc, #328]	@ (8005a34 <HAL_ADC_Start+0x18c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a52      	ldr	r2, [pc, #328]	@ (8005a38 <HAL_ADC_Start+0x190>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	0c9a      	lsrs	r2, r3, #18
 80058f4:	4613      	mov	r3, r2
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	4413      	add	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80058fc:	e002      	b.n	8005904 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	3b01      	subs	r3, #1
 8005902:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f9      	bne.n	80058fe <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b01      	cmp	r3, #1
 8005916:	d17a      	bne.n	8005a0e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005936:	2b00      	cmp	r3, #0
 8005938:	d007      	beq.n	800594a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005942:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005956:	d106      	bne.n	8005966 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595c:	f023 0206 	bic.w	r2, r3, #6
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	645a      	str	r2, [r3, #68]	@ 0x44
 8005964:	e002      	b.n	800596c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005974:	4b31      	ldr	r3, [pc, #196]	@ (8005a3c <HAL_ADC_Start+0x194>)
 8005976:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005980:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	2b00      	cmp	r3, #0
 800598c:	d12a      	bne.n	80059e4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a2b      	ldr	r2, [pc, #172]	@ (8005a40 <HAL_ADC_Start+0x198>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d015      	beq.n	80059c4 <HAL_ADC_Start+0x11c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a29      	ldr	r2, [pc, #164]	@ (8005a44 <HAL_ADC_Start+0x19c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d105      	bne.n	80059ae <HAL_ADC_Start+0x106>
 80059a2:	4b26      	ldr	r3, [pc, #152]	@ (8005a3c <HAL_ADC_Start+0x194>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f003 031f 	and.w	r3, r3, #31
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a25      	ldr	r2, [pc, #148]	@ (8005a48 <HAL_ADC_Start+0x1a0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d136      	bne.n	8005a26 <HAL_ADC_Start+0x17e>
 80059b8:	4b20      	ldr	r3, [pc, #128]	@ (8005a3c <HAL_ADC_Start+0x194>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d130      	bne.n	8005a26 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d129      	bne.n	8005a26 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80059e0:	609a      	str	r2, [r3, #8]
 80059e2:	e020      	b.n	8005a26 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a15      	ldr	r2, [pc, #84]	@ (8005a40 <HAL_ADC_Start+0x198>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d11b      	bne.n	8005a26 <HAL_ADC_Start+0x17e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d114      	bne.n	8005a26 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005a0a:	609a      	str	r2, [r3, #8]
 8005a0c:	e00b      	b.n	8005a26 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a12:	f043 0210 	orr.w	r2, r3, #16
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1e:	f043 0201 	orr.w	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	20000004 	.word	0x20000004
 8005a38:	431bde83 	.word	0x431bde83
 8005a3c:	40012300 	.word	0x40012300
 8005a40:	40012000 	.word	0x40012000
 8005a44:	40012100 	.word	0x40012100
 8005a48:	40012200 	.word	0x40012200

08005a4c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_ADC_Stop+0x16>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e021      	b.n	8005aa6 <HAL_ADC_Stop+0x5a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0201 	bic.w	r2, r2, #1
 8005a78:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d109      	bne.n	8005a9c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a90:	f023 0301 	bic.w	r3, r3, #1
 8005a94:	f043 0201 	orr.w	r2, r3, #1
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ace:	d113      	bne.n	8005af8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ade:	d10b      	bne.n	8005af8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae4:	f043 0220 	orr.w	r2, r3, #32
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e063      	b.n	8005bc0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005af8:	f7ff fe62 	bl	80057c0 <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005afe:	e021      	b.n	8005b44 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b06:	d01d      	beq.n	8005b44 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <HAL_ADC_PollForConversion+0x6c>
 8005b0e:	f7ff fe57 	bl	80057c0 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d212      	bcs.n	8005b44 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d00b      	beq.n	8005b44 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b30:	f043 0204 	orr.w	r2, r3, #4
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e03d      	b.n	8005bc0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d1d6      	bne.n	8005b00 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f06f 0212 	mvn.w	r2, #18
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d123      	bne.n	8005bbe <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d11f      	bne.n	8005bbe <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d006      	beq.n	8005b9a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d111      	bne.n	8005bbe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d105      	bne.n	8005bbe <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb6:	f043 0201 	orr.w	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_ADC_ConfigChannel+0x1c>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e113      	b.n	8005e28 <HAL_ADC_ConfigChannel+0x244>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b09      	cmp	r3, #9
 8005c0e:	d925      	bls.n	8005c5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68d9      	ldr	r1, [r3, #12]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	4613      	mov	r3, r2
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4413      	add	r3, r2
 8005c24:	3b1e      	subs	r3, #30
 8005c26:	2207      	movs	r2, #7
 8005c28:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2c:	43da      	mvns	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	400a      	ands	r2, r1
 8005c34:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68d9      	ldr	r1, [r3, #12]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	4618      	mov	r0, r3
 8005c48:	4603      	mov	r3, r0
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4403      	add	r3, r0
 8005c4e:	3b1e      	subs	r3, #30
 8005c50:	409a      	lsls	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	60da      	str	r2, [r3, #12]
 8005c5a:	e022      	b.n	8005ca2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6919      	ldr	r1, [r3, #16]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	4413      	add	r3, r2
 8005c70:	2207      	movs	r2, #7
 8005c72:	fa02 f303 	lsl.w	r3, r2, r3
 8005c76:	43da      	mvns	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	400a      	ands	r2, r1
 8005c7e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6919      	ldr	r1, [r3, #16]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	4618      	mov	r0, r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	4403      	add	r3, r0
 8005c98:	409a      	lsls	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b06      	cmp	r3, #6
 8005ca8:	d824      	bhi.n	8005cf4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	3b05      	subs	r3, #5
 8005cbc:	221f      	movs	r2, #31
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	43da      	mvns	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	400a      	ands	r2, r1
 8005cca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	4618      	mov	r0, r3
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3b05      	subs	r3, #5
 8005ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005cf2:	e04c      	b.n	8005d8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b0c      	cmp	r3, #12
 8005cfa:	d824      	bhi.n	8005d46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	4613      	mov	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3b23      	subs	r3, #35	@ 0x23
 8005d0e:	221f      	movs	r2, #31
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	43da      	mvns	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	400a      	ands	r2, r1
 8005d1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	3b23      	subs	r3, #35	@ 0x23
 8005d38:	fa00 f203 	lsl.w	r2, r0, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d44:	e023      	b.n	8005d8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	3b41      	subs	r3, #65	@ 0x41
 8005d58:	221f      	movs	r2, #31
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	43da      	mvns	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	400a      	ands	r2, r1
 8005d66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	4618      	mov	r0, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	3b41      	subs	r3, #65	@ 0x41
 8005d82:	fa00 f203 	lsl.w	r2, r0, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d8e:	4b29      	ldr	r3, [pc, #164]	@ (8005e34 <HAL_ADC_ConfigChannel+0x250>)
 8005d90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a28      	ldr	r2, [pc, #160]	@ (8005e38 <HAL_ADC_ConfigChannel+0x254>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d10f      	bne.n	8005dbc <HAL_ADC_ConfigChannel+0x1d8>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b12      	cmp	r3, #18
 8005da2:	d10b      	bne.n	8005dbc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e38 <HAL_ADC_ConfigChannel+0x254>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d12b      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x23a>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1c      	ldr	r2, [pc, #112]	@ (8005e3c <HAL_ADC_ConfigChannel+0x258>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d003      	beq.n	8005dd8 <HAL_ADC_ConfigChannel+0x1f4>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b11      	cmp	r3, #17
 8005dd6:	d122      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a11      	ldr	r2, [pc, #68]	@ (8005e3c <HAL_ADC_ConfigChannel+0x258>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d111      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005dfa:	4b11      	ldr	r3, [pc, #68]	@ (8005e40 <HAL_ADC_ConfigChannel+0x25c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a11      	ldr	r2, [pc, #68]	@ (8005e44 <HAL_ADC_ConfigChannel+0x260>)
 8005e00:	fba2 2303 	umull	r2, r3, r2, r3
 8005e04:	0c9a      	lsrs	r2, r3, #18
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005e10:	e002      	b.n	8005e18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1f9      	bne.n	8005e12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	40012300 	.word	0x40012300
 8005e38:	40012000 	.word	0x40012000
 8005e3c:	10000012 	.word	0x10000012
 8005e40:	20000004 	.word	0x20000004
 8005e44:	431bde83 	.word	0x431bde83

08005e48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e50:	4b79      	ldr	r3, [pc, #484]	@ (8006038 <ADC_Init+0x1f0>)
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6859      	ldr	r1, [r3, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	021a      	lsls	r2, r3, #8
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005ea0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6859      	ldr	r1, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ec2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6899      	ldr	r1, [r3, #8]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eda:	4a58      	ldr	r2, [pc, #352]	@ (800603c <ADC_Init+0x1f4>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d022      	beq.n	8005f26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005eee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6899      	ldr	r1, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005f10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6899      	ldr	r1, [r3, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	609a      	str	r2, [r3, #8]
 8005f24:	e00f      	b.n	8005f46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005f34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005f44:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0202 	bic.w	r2, r2, #2
 8005f54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6899      	ldr	r1, [r3, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	7e1b      	ldrb	r3, [r3, #24]
 8005f60:	005a      	lsls	r2, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01b      	beq.n	8005fac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f82:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005f92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6859      	ldr	r1, [r3, #4]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	035a      	lsls	r2, r3, #13
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
 8005faa:	e007      	b.n	8005fbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005fca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	051a      	lsls	r2, r3, #20
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005ff0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6899      	ldr	r1, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ffe:	025a      	lsls	r2, r3, #9
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006016:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6899      	ldr	r1, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	029a      	lsls	r2, r3, #10
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	609a      	str	r2, [r3, #8]
}
 800602c:	bf00      	nop
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	40012300 	.word	0x40012300
 800603c:	0f000001 	.word	0x0f000001

08006040 <__NVIC_SetPriorityGrouping>:
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006050:	4b0c      	ldr	r3, [pc, #48]	@ (8006084 <__NVIC_SetPriorityGrouping+0x44>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800605c:	4013      	ands	r3, r2
 800605e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800606c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006072:	4a04      	ldr	r2, [pc, #16]	@ (8006084 <__NVIC_SetPriorityGrouping+0x44>)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	60d3      	str	r3, [r2, #12]
}
 8006078:	bf00      	nop
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	e000ed00 	.word	0xe000ed00

08006088 <__NVIC_GetPriorityGrouping>:
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800608c:	4b04      	ldr	r3, [pc, #16]	@ (80060a0 <__NVIC_GetPriorityGrouping+0x18>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	0a1b      	lsrs	r3, r3, #8
 8006092:	f003 0307 	and.w	r3, r3, #7
}
 8006096:	4618      	mov	r0, r3
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	e000ed00 	.word	0xe000ed00

080060a4 <__NVIC_EnableIRQ>:
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	db0b      	blt.n	80060ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060b6:	79fb      	ldrb	r3, [r7, #7]
 80060b8:	f003 021f 	and.w	r2, r3, #31
 80060bc:	4907      	ldr	r1, [pc, #28]	@ (80060dc <__NVIC_EnableIRQ+0x38>)
 80060be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	2001      	movs	r0, #1
 80060c6:	fa00 f202 	lsl.w	r2, r0, r2
 80060ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	e000e100 	.word	0xe000e100

080060e0 <__NVIC_SetPriority>:
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	4603      	mov	r3, r0
 80060e8:	6039      	str	r1, [r7, #0]
 80060ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	db0a      	blt.n	800610a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	490c      	ldr	r1, [pc, #48]	@ (800612c <__NVIC_SetPriority+0x4c>)
 80060fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fe:	0112      	lsls	r2, r2, #4
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	440b      	add	r3, r1
 8006104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006108:	e00a      	b.n	8006120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	b2da      	uxtb	r2, r3
 800610e:	4908      	ldr	r1, [pc, #32]	@ (8006130 <__NVIC_SetPriority+0x50>)
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	3b04      	subs	r3, #4
 8006118:	0112      	lsls	r2, r2, #4
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	440b      	add	r3, r1
 800611e:	761a      	strb	r2, [r3, #24]
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	e000e100 	.word	0xe000e100
 8006130:	e000ed00 	.word	0xe000ed00

08006134 <NVIC_EncodePriority>:
{
 8006134:	b480      	push	{r7}
 8006136:	b089      	sub	sp, #36	@ 0x24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f1c3 0307 	rsb	r3, r3, #7
 800614e:	2b04      	cmp	r3, #4
 8006150:	bf28      	it	cs
 8006152:	2304      	movcs	r3, #4
 8006154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	3304      	adds	r3, #4
 800615a:	2b06      	cmp	r3, #6
 800615c:	d902      	bls.n	8006164 <NVIC_EncodePriority+0x30>
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	3b03      	subs	r3, #3
 8006162:	e000      	b.n	8006166 <NVIC_EncodePriority+0x32>
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006168:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	43da      	mvns	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	401a      	ands	r2, r3
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800617c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	fa01 f303 	lsl.w	r3, r1, r3
 8006186:	43d9      	mvns	r1, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800618c:	4313      	orrs	r3, r2
}
 800618e:	4618      	mov	r0, r3
 8006190:	3724      	adds	r7, #36	@ 0x24
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
	...

0800619c <SysTick_Config>:
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061ac:	d301      	bcc.n	80061b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80061ae:	2301      	movs	r3, #1
 80061b0:	e00f      	b.n	80061d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061b2:	4a0a      	ldr	r2, [pc, #40]	@ (80061dc <SysTick_Config+0x40>)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061ba:	210f      	movs	r1, #15
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061c0:	f7ff ff8e 	bl	80060e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061c4:	4b05      	ldr	r3, [pc, #20]	@ (80061dc <SysTick_Config+0x40>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061ca:	4b04      	ldr	r3, [pc, #16]	@ (80061dc <SysTick_Config+0x40>)
 80061cc:	2207      	movs	r2, #7
 80061ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	e000e010 	.word	0xe000e010

080061e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff ff29 	bl	8006040 <__NVIC_SetPriorityGrouping>
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b086      	sub	sp, #24
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	4603      	mov	r3, r0
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	607a      	str	r2, [r7, #4]
 8006202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006204:	2300      	movs	r3, #0
 8006206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006208:	f7ff ff3e 	bl	8006088 <__NVIC_GetPriorityGrouping>
 800620c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	6978      	ldr	r0, [r7, #20]
 8006214:	f7ff ff8e 	bl	8006134 <NVIC_EncodePriority>
 8006218:	4602      	mov	r2, r0
 800621a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800621e:	4611      	mov	r1, r2
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff ff5d 	bl	80060e0 <__NVIC_SetPriority>
}
 8006226:	bf00      	nop
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	4603      	mov	r3, r0
 8006236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff ff31 	bl	80060a4 <__NVIC_EnableIRQ>
}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff ffa2 	bl	800619c <SysTick_Config>
 8006258:	4603      	mov	r3, r0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006270:	f7ff faa6 	bl	80057c0 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e099      	b.n	80063b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062a0:	e00f      	b.n	80062c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062a2:	f7ff fa8d 	bl	80057c0 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b05      	cmp	r3, #5
 80062ae:	d908      	bls.n	80062c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2203      	movs	r2, #3
 80062ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e078      	b.n	80063b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e8      	bne.n	80062a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4b38      	ldr	r3, [pc, #224]	@ (80063bc <HAL_DMA_Init+0x158>)
 80062dc:	4013      	ands	r3, r2
 80062de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006318:	2b04      	cmp	r3, #4
 800631a:	d107      	bne.n	800632c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006324:	4313      	orrs	r3, r2
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0307 	bic.w	r3, r3, #7
 8006342:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006352:	2b04      	cmp	r3, #4
 8006354:	d117      	bne.n	8006386 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00e      	beq.n	8006386 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fb0d 	bl	8006988 <DMA_CheckFifoParam>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d008      	beq.n	8006386 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2240      	movs	r2, #64	@ 0x40
 8006378:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006382:	2301      	movs	r3, #1
 8006384:	e016      	b.n	80063b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fac4 	bl	800691c <DMA_CalcBaseAndBitshift>
 8006394:	4603      	mov	r3, r0
 8006396:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800639c:	223f      	movs	r2, #63	@ 0x3f
 800639e:	409a      	lsls	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	f010803f 	.word	0xf010803f

080063c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_DMA_Start_IT+0x26>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e040      	b.n	8006468 <HAL_DMA_Start_IT+0xa8>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d12f      	bne.n	800645a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2202      	movs	r2, #2
 80063fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fa56 	bl	80068c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006418:	223f      	movs	r2, #63	@ 0x3f
 800641a:	409a      	lsls	r2, r3
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0216 	orr.w	r2, r2, #22
 800642e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	d007      	beq.n	8006448 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0208 	orr.w	r2, r2, #8
 8006446:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	e005      	b.n	8006466 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006462:	2302      	movs	r3, #2
 8006464:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006466:	7dfb      	ldrb	r3, [r7, #23]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800647e:	f7ff f99f 	bl	80057c0 <HAL_GetTick>
 8006482:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d008      	beq.n	80064a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2280      	movs	r2, #128	@ 0x80
 8006494:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e052      	b.n	8006548 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0216 	bic.w	r2, r2, #22
 80064b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695a      	ldr	r2, [r3, #20]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d103      	bne.n	80064d2 <HAL_DMA_Abort+0x62>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d007      	beq.n	80064e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0208 	bic.w	r2, r2, #8
 80064e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064f2:	e013      	b.n	800651c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064f4:	f7ff f964 	bl	80057c0 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b05      	cmp	r3, #5
 8006500:	d90c      	bls.n	800651c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2203      	movs	r2, #3
 800650c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e015      	b.n	8006548 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1e4      	bne.n	80064f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800652e:	223f      	movs	r2, #63	@ 0x3f
 8006530:	409a      	lsls	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d004      	beq.n	800656e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2280      	movs	r2, #128	@ 0x80
 8006568:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e00c      	b.n	8006588 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2205      	movs	r2, #5
 8006572:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0201 	bic.w	r2, r2, #1
 8006584:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80065a0:	4b8e      	ldr	r3, [pc, #568]	@ (80067dc <HAL_DMA_IRQHandler+0x248>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a8e      	ldr	r2, [pc, #568]	@ (80067e0 <HAL_DMA_IRQHandler+0x24c>)
 80065a6:	fba2 2303 	umull	r2, r3, r2, r3
 80065aa:	0a9b      	lsrs	r3, r3, #10
 80065ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065be:	2208      	movs	r2, #8
 80065c0:	409a      	lsls	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4013      	ands	r3, r2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d01a      	beq.n	8006600 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d013      	beq.n	8006600 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0204 	bic.w	r2, r2, #4
 80065e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ec:	2208      	movs	r2, #8
 80065ee:	409a      	lsls	r2, r3
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065f8:	f043 0201 	orr.w	r2, r3, #1
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006604:	2201      	movs	r2, #1
 8006606:	409a      	lsls	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4013      	ands	r3, r2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d012      	beq.n	8006636 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00b      	beq.n	8006636 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006622:	2201      	movs	r2, #1
 8006624:	409a      	lsls	r2, r3
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662e:	f043 0202 	orr.w	r2, r3, #2
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800663a:	2204      	movs	r2, #4
 800663c:	409a      	lsls	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4013      	ands	r3, r2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d012      	beq.n	800666c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00b      	beq.n	800666c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006658:	2204      	movs	r2, #4
 800665a:	409a      	lsls	r2, r3
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006664:	f043 0204 	orr.w	r2, r3, #4
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006670:	2210      	movs	r2, #16
 8006672:	409a      	lsls	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4013      	ands	r3, r2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d043      	beq.n	8006704 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d03c      	beq.n	8006704 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668e:	2210      	movs	r2, #16
 8006690:	409a      	lsls	r2, r3
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d018      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d108      	bne.n	80066c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d024      	beq.n	8006704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
 80066c2:	e01f      	b.n	8006704 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01b      	beq.n	8006704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	4798      	blx	r3
 80066d4:	e016      	b.n	8006704 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d107      	bne.n	80066f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0208 	bic.w	r2, r2, #8
 80066f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006708:	2220      	movs	r2, #32
 800670a:	409a      	lsls	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 808f 	beq.w	8006834 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8087 	beq.w	8006834 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672a:	2220      	movs	r2, #32
 800672c:	409a      	lsls	r2, r3
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b05      	cmp	r3, #5
 800673c:	d136      	bne.n	80067ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0216 	bic.w	r2, r2, #22
 800674c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695a      	ldr	r2, [r3, #20]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800675c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <HAL_DMA_IRQHandler+0x1da>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0208 	bic.w	r2, r2, #8
 800677c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006782:	223f      	movs	r2, #63	@ 0x3f
 8006784:	409a      	lsls	r2, r3
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d07e      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
        }
        return;
 80067aa:	e079      	b.n	80068a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d01d      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10d      	bne.n	80067e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d031      	beq.n	8006834 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
 80067d8:	e02c      	b.n	8006834 <HAL_DMA_IRQHandler+0x2a0>
 80067da:	bf00      	nop
 80067dc:	20000004 	.word	0x20000004
 80067e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d023      	beq.n	8006834 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	4798      	blx	r3
 80067f4:	e01e      	b.n	8006834 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10f      	bne.n	8006824 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0210 	bic.w	r2, r2, #16
 8006812:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006838:	2b00      	cmp	r3, #0
 800683a:	d032      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d022      	beq.n	800688e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2205      	movs	r2, #5
 800684c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0201 	bic.w	r2, r2, #1
 800685e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	3301      	adds	r3, #1
 8006864:	60bb      	str	r3, [r7, #8]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	429a      	cmp	r2, r3
 800686a:	d307      	bcc.n	800687c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f2      	bne.n	8006860 <HAL_DMA_IRQHandler+0x2cc>
 800687a:	e000      	b.n	800687e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800687c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
 800689e:	e000      	b.n	80068a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80068a0:	bf00      	nop
    }
  }
}
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80068dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b40      	cmp	r3, #64	@ 0x40
 80068ec:	d108      	bne.n	8006900 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80068fe:	e007      	b.n	8006910 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	60da      	str	r2, [r3, #12]
}
 8006910:	bf00      	nop
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	3b10      	subs	r3, #16
 800692c:	4a14      	ldr	r2, [pc, #80]	@ (8006980 <DMA_CalcBaseAndBitshift+0x64>)
 800692e:	fba2 2303 	umull	r2, r3, r2, r3
 8006932:	091b      	lsrs	r3, r3, #4
 8006934:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006936:	4a13      	ldr	r2, [pc, #76]	@ (8006984 <DMA_CalcBaseAndBitshift+0x68>)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b03      	cmp	r3, #3
 8006948:	d909      	bls.n	800695e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006952:	f023 0303 	bic.w	r3, r3, #3
 8006956:	1d1a      	adds	r2, r3, #4
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	659a      	str	r2, [r3, #88]	@ 0x58
 800695c:	e007      	b.n	800696e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006966:	f023 0303 	bic.w	r3, r3, #3
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	aaaaaaab 	.word	0xaaaaaaab
 8006984:	08011374 	.word	0x08011374

08006988 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006998:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d11f      	bne.n	80069e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d856      	bhi.n	8006a56 <DMA_CheckFifoParam+0xce>
 80069a8:	a201      	add	r2, pc, #4	@ (adr r2, 80069b0 <DMA_CheckFifoParam+0x28>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	080069c1 	.word	0x080069c1
 80069b4:	080069d3 	.word	0x080069d3
 80069b8:	080069c1 	.word	0x080069c1
 80069bc:	08006a57 	.word	0x08006a57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d046      	beq.n	8006a5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069d0:	e043      	b.n	8006a5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80069da:	d140      	bne.n	8006a5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069e0:	e03d      	b.n	8006a5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ea:	d121      	bne.n	8006a30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d837      	bhi.n	8006a62 <DMA_CheckFifoParam+0xda>
 80069f2:	a201      	add	r2, pc, #4	@ (adr r2, 80069f8 <DMA_CheckFifoParam+0x70>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a09 	.word	0x08006a09
 80069fc:	08006a0f 	.word	0x08006a0f
 8006a00:	08006a09 	.word	0x08006a09
 8006a04:	08006a21 	.word	0x08006a21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a0c:	e030      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d025      	beq.n	8006a66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a1e:	e022      	b.n	8006a66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a28:	d11f      	bne.n	8006a6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006a2e:	e01c      	b.n	8006a6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d903      	bls.n	8006a3e <DMA_CheckFifoParam+0xb6>
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d003      	beq.n	8006a44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a3c:	e018      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	73fb      	strb	r3, [r7, #15]
      break;
 8006a42:	e015      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00e      	beq.n	8006a6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
      break;
 8006a54:	e00b      	b.n	8006a6e <DMA_CheckFifoParam+0xe6>
      break;
 8006a56:	bf00      	nop
 8006a58:	e00a      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e008      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
      break;
 8006a5e:	bf00      	nop
 8006a60:	e006      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
      break;
 8006a62:	bf00      	nop
 8006a64:	e004      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
      break;
 8006a66:	bf00      	nop
 8006a68:	e002      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
      break;   
 8006a6a:	bf00      	nop
 8006a6c:	e000      	b.n	8006a70 <DMA_CheckFifoParam+0xe8>
      break;
 8006a6e:	bf00      	nop
    }
  } 
  
  return status; 
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop

08006a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b089      	sub	sp, #36	@ 0x24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	e165      	b.n	8006d68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4013      	ands	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	f040 8154 	bne.w	8006d62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d005      	beq.n	8006ad2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d130      	bne.n	8006b34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	2203      	movs	r2, #3
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	43db      	mvns	r3, r3
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b08:	2201      	movs	r2, #1
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b10:	43db      	mvns	r3, r3
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	4013      	ands	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	091b      	lsrs	r3, r3, #4
 8006b1e:	f003 0201 	and.w	r2, r3, #1
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	fa02 f303 	lsl.w	r3, r2, r3
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f003 0303 	and.w	r3, r3, #3
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d017      	beq.n	8006b70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	43db      	mvns	r3, r3
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	4013      	ands	r3, r2
 8006b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d123      	bne.n	8006bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	08da      	lsrs	r2, r3, #3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3208      	adds	r2, #8
 8006b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	220f      	movs	r2, #15
 8006b94:	fa02 f303 	lsl.w	r3, r2, r3
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	08da      	lsrs	r2, r3, #3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	3208      	adds	r2, #8
 8006bbe:	69b9      	ldr	r1, [r7, #24]
 8006bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	2203      	movs	r2, #3
 8006bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd4:	43db      	mvns	r3, r3
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f003 0203 	and.w	r2, r3, #3
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 80ae 	beq.w	8006d62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8006d80 <HAL_GPIO_Init+0x300>)
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c0e:	4a5c      	ldr	r2, [pc, #368]	@ (8006d80 <HAL_GPIO_Init+0x300>)
 8006c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c16:	4b5a      	ldr	r3, [pc, #360]	@ (8006d80 <HAL_GPIO_Init+0x300>)
 8006c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c22:	4a58      	ldr	r2, [pc, #352]	@ (8006d84 <HAL_GPIO_Init+0x304>)
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	089b      	lsrs	r3, r3, #2
 8006c28:	3302      	adds	r3, #2
 8006c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	220f      	movs	r2, #15
 8006c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3e:	43db      	mvns	r3, r3
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	4013      	ands	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a4f      	ldr	r2, [pc, #316]	@ (8006d88 <HAL_GPIO_Init+0x308>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d025      	beq.n	8006c9a <HAL_GPIO_Init+0x21a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a4e      	ldr	r2, [pc, #312]	@ (8006d8c <HAL_GPIO_Init+0x30c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d01f      	beq.n	8006c96 <HAL_GPIO_Init+0x216>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a4d      	ldr	r2, [pc, #308]	@ (8006d90 <HAL_GPIO_Init+0x310>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d019      	beq.n	8006c92 <HAL_GPIO_Init+0x212>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a4c      	ldr	r2, [pc, #304]	@ (8006d94 <HAL_GPIO_Init+0x314>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d013      	beq.n	8006c8e <HAL_GPIO_Init+0x20e>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a4b      	ldr	r2, [pc, #300]	@ (8006d98 <HAL_GPIO_Init+0x318>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00d      	beq.n	8006c8a <HAL_GPIO_Init+0x20a>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a4a      	ldr	r2, [pc, #296]	@ (8006d9c <HAL_GPIO_Init+0x31c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d007      	beq.n	8006c86 <HAL_GPIO_Init+0x206>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a49      	ldr	r2, [pc, #292]	@ (8006da0 <HAL_GPIO_Init+0x320>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d101      	bne.n	8006c82 <HAL_GPIO_Init+0x202>
 8006c7e:	2306      	movs	r3, #6
 8006c80:	e00c      	b.n	8006c9c <HAL_GPIO_Init+0x21c>
 8006c82:	2307      	movs	r3, #7
 8006c84:	e00a      	b.n	8006c9c <HAL_GPIO_Init+0x21c>
 8006c86:	2305      	movs	r3, #5
 8006c88:	e008      	b.n	8006c9c <HAL_GPIO_Init+0x21c>
 8006c8a:	2304      	movs	r3, #4
 8006c8c:	e006      	b.n	8006c9c <HAL_GPIO_Init+0x21c>
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e004      	b.n	8006c9c <HAL_GPIO_Init+0x21c>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e002      	b.n	8006c9c <HAL_GPIO_Init+0x21c>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e000      	b.n	8006c9c <HAL_GPIO_Init+0x21c>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	f002 0203 	and.w	r2, r2, #3
 8006ca2:	0092      	lsls	r2, r2, #2
 8006ca4:	4093      	lsls	r3, r2
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cac:	4935      	ldr	r1, [pc, #212]	@ (8006d84 <HAL_GPIO_Init+0x304>)
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	089b      	lsrs	r3, r3, #2
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cba:	4b3a      	ldr	r3, [pc, #232]	@ (8006da4 <HAL_GPIO_Init+0x324>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cde:	4a31      	ldr	r2, [pc, #196]	@ (8006da4 <HAL_GPIO_Init+0x324>)
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8006da4 <HAL_GPIO_Init+0x324>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	43db      	mvns	r3, r3
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d08:	4a26      	ldr	r2, [pc, #152]	@ (8006da4 <HAL_GPIO_Init+0x324>)
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d0e:	4b25      	ldr	r3, [pc, #148]	@ (8006da4 <HAL_GPIO_Init+0x324>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	43db      	mvns	r3, r3
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d32:	4a1c      	ldr	r2, [pc, #112]	@ (8006da4 <HAL_GPIO_Init+0x324>)
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d38:	4b1a      	ldr	r3, [pc, #104]	@ (8006da4 <HAL_GPIO_Init+0x324>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	43db      	mvns	r3, r3
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	4013      	ands	r3, r2
 8006d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d5c:	4a11      	ldr	r2, [pc, #68]	@ (8006da4 <HAL_GPIO_Init+0x324>)
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	3301      	adds	r3, #1
 8006d66:	61fb      	str	r3, [r7, #28]
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	2b0f      	cmp	r3, #15
 8006d6c:	f67f ae96 	bls.w	8006a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	3724      	adds	r7, #36	@ 0x24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40023800 	.word	0x40023800
 8006d84:	40013800 	.word	0x40013800
 8006d88:	40020000 	.word	0x40020000
 8006d8c:	40020400 	.word	0x40020400
 8006d90:	40020800 	.word	0x40020800
 8006d94:	40020c00 	.word	0x40020c00
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	40021400 	.word	0x40021400
 8006da0:	40021800 	.word	0x40021800
 8006da4:	40013c00 	.word	0x40013c00

08006da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	887b      	ldrh	r3, [r7, #2]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
 8006dc4:	e001      	b.n	8006dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	807b      	strh	r3, [r7, #2]
 8006de4:	4613      	mov	r3, r2
 8006de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006de8:	787b      	ldrb	r3, [r7, #1]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dee:	887a      	ldrh	r2, [r7, #2]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006df4:	e003      	b.n	8006dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006df6:	887b      	ldrh	r3, [r7, #2]
 8006df8:	041a      	lsls	r2, r3, #16
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	619a      	str	r2, [r3, #24]
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	460b      	mov	r3, r1
 8006e14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e1c:	887a      	ldrh	r2, [r7, #2]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4013      	ands	r3, r2
 8006e22:	041a      	lsls	r2, r3, #16
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	43d9      	mvns	r1, r3
 8006e28:	887b      	ldrh	r3, [r7, #2]
 8006e2a:	400b      	ands	r3, r1
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	619a      	str	r2, [r3, #24]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
	...

08006e40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006e4a:	4b08      	ldr	r3, [pc, #32]	@ (8006e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e4c:	695a      	ldr	r2, [r3, #20]
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d006      	beq.n	8006e64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e56:	4a05      	ldr	r2, [pc, #20]	@ (8006e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fa fd32 	bl	80018c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006e64:	bf00      	nop
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40013c00 	.word	0x40013c00

08006e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e12b      	b.n	80070da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fa faea 	bl	8001470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2224      	movs	r2, #36	@ 0x24
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0201 	bic.w	r2, r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ec2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ed2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006ed4:	f001 fbb6 	bl	8008644 <HAL_RCC_GetPCLK1Freq>
 8006ed8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	4a81      	ldr	r2, [pc, #516]	@ (80070e4 <HAL_I2C_Init+0x274>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d807      	bhi.n	8006ef4 <HAL_I2C_Init+0x84>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4a80      	ldr	r2, [pc, #512]	@ (80070e8 <HAL_I2C_Init+0x278>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	bf94      	ite	ls
 8006eec:	2301      	movls	r3, #1
 8006eee:	2300      	movhi	r3, #0
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	e006      	b.n	8006f02 <HAL_I2C_Init+0x92>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4a7d      	ldr	r2, [pc, #500]	@ (80070ec <HAL_I2C_Init+0x27c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	bf94      	ite	ls
 8006efc:	2301      	movls	r3, #1
 8006efe:	2300      	movhi	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e0e7      	b.n	80070da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4a78      	ldr	r2, [pc, #480]	@ (80070f0 <HAL_I2C_Init+0x280>)
 8006f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f12:	0c9b      	lsrs	r3, r3, #18
 8006f14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	4a6a      	ldr	r2, [pc, #424]	@ (80070e4 <HAL_I2C_Init+0x274>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d802      	bhi.n	8006f44 <HAL_I2C_Init+0xd4>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	3301      	adds	r3, #1
 8006f42:	e009      	b.n	8006f58 <HAL_I2C_Init+0xe8>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006f4a:	fb02 f303 	mul.w	r3, r2, r3
 8006f4e:	4a69      	ldr	r2, [pc, #420]	@ (80070f4 <HAL_I2C_Init+0x284>)
 8006f50:	fba2 2303 	umull	r2, r3, r2, r3
 8006f54:	099b      	lsrs	r3, r3, #6
 8006f56:	3301      	adds	r3, #1
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6812      	ldr	r2, [r2, #0]
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006f6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	495c      	ldr	r1, [pc, #368]	@ (80070e4 <HAL_I2C_Init+0x274>)
 8006f74:	428b      	cmp	r3, r1
 8006f76:	d819      	bhi.n	8006fac <HAL_I2C_Init+0x13c>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	1e59      	subs	r1, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f86:	1c59      	adds	r1, r3, #1
 8006f88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006f8c:	400b      	ands	r3, r1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <HAL_I2C_Init+0x138>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1e59      	subs	r1, r3, #1
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fa6:	e051      	b.n	800704c <HAL_I2C_Init+0x1dc>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	e04f      	b.n	800704c <HAL_I2C_Init+0x1dc>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d111      	bne.n	8006fd8 <HAL_I2C_Init+0x168>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	1e58      	subs	r0, r3, #1
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6859      	ldr	r1, [r3, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	440b      	add	r3, r1
 8006fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	bf0c      	ite	eq
 8006fd0:	2301      	moveq	r3, #1
 8006fd2:	2300      	movne	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	e012      	b.n	8006ffe <HAL_I2C_Init+0x18e>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	1e58      	subs	r0, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6859      	ldr	r1, [r3, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	0099      	lsls	r1, r3, #2
 8006fe8:	440b      	add	r3, r1
 8006fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fee:	3301      	adds	r3, #1
 8006ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	bf0c      	ite	eq
 8006ff8:	2301      	moveq	r3, #1
 8006ffa:	2300      	movne	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <HAL_I2C_Init+0x196>
 8007002:	2301      	movs	r3, #1
 8007004:	e022      	b.n	800704c <HAL_I2C_Init+0x1dc>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10e      	bne.n	800702c <HAL_I2C_Init+0x1bc>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1e58      	subs	r0, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6859      	ldr	r1, [r3, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	440b      	add	r3, r1
 800701c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007020:	3301      	adds	r3, #1
 8007022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800702a:	e00f      	b.n	800704c <HAL_I2C_Init+0x1dc>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	1e58      	subs	r0, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6859      	ldr	r1, [r3, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	0099      	lsls	r1, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007042:	3301      	adds	r3, #1
 8007044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007048:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	6809      	ldr	r1, [r1, #0]
 8007050:	4313      	orrs	r3, r2
 8007052:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69da      	ldr	r2, [r3, #28]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	431a      	orrs	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800707a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6911      	ldr	r1, [r2, #16]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	68d2      	ldr	r2, [r2, #12]
 8007086:	4311      	orrs	r1, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	430b      	orrs	r3, r1
 800708e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	695a      	ldr	r2, [r3, #20]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0201 	orr.w	r2, r2, #1
 80070ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	000186a0 	.word	0x000186a0
 80070e8:	001e847f 	.word	0x001e847f
 80070ec:	003d08ff 	.word	0x003d08ff
 80070f0:	431bde83 	.word	0x431bde83
 80070f4:	10624dd3 	.word	0x10624dd3

080070f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	4608      	mov	r0, r1
 8007102:	4611      	mov	r1, r2
 8007104:	461a      	mov	r2, r3
 8007106:	4603      	mov	r3, r0
 8007108:	817b      	strh	r3, [r7, #10]
 800710a:	460b      	mov	r3, r1
 800710c:	813b      	strh	r3, [r7, #8]
 800710e:	4613      	mov	r3, r2
 8007110:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007112:	f7fe fb55 	bl	80057c0 <HAL_GetTick>
 8007116:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b20      	cmp	r3, #32
 8007122:	f040 80d9 	bne.w	80072d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	2319      	movs	r3, #25
 800712c:	2201      	movs	r2, #1
 800712e:	496d      	ldr	r1, [pc, #436]	@ (80072e4 <HAL_I2C_Mem_Write+0x1ec>)
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 ff5f 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800713c:	2302      	movs	r3, #2
 800713e:	e0cc      	b.n	80072da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007146:	2b01      	cmp	r3, #1
 8007148:	d101      	bne.n	800714e <HAL_I2C_Mem_Write+0x56>
 800714a:	2302      	movs	r3, #2
 800714c:	e0c5      	b.n	80072da <HAL_I2C_Mem_Write+0x1e2>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b01      	cmp	r3, #1
 8007162:	d007      	beq.n	8007174 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f042 0201 	orr.w	r2, r2, #1
 8007172:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007182:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2221      	movs	r2, #33	@ 0x21
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2240      	movs	r2, #64	@ 0x40
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a3a      	ldr	r2, [r7, #32]
 800719e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80071a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4a4d      	ldr	r2, [pc, #308]	@ (80072e8 <HAL_I2C_Mem_Write+0x1f0>)
 80071b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071b6:	88f8      	ldrh	r0, [r7, #6]
 80071b8:	893a      	ldrh	r2, [r7, #8]
 80071ba:	8979      	ldrh	r1, [r7, #10]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	4603      	mov	r3, r0
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 fc7a 	bl	8007ac0 <I2C_RequestMemoryWrite>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d052      	beq.n	8007278 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e081      	b.n	80072da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f001 f824 	bl	8008228 <I2C_WaitOnTXEFlagUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00d      	beq.n	8007202 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d107      	bne.n	80071fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e06b      	b.n	80072da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007206:	781a      	ldrb	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800721c:	3b01      	subs	r3, #1
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b04      	cmp	r3, #4
 800723e:	d11b      	bne.n	8007278 <HAL_I2C_Mem_Write+0x180>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007244:	2b00      	cmp	r3, #0
 8007246:	d017      	beq.n	8007278 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724c:	781a      	ldrb	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007262:	3b01      	subs	r3, #1
 8007264:	b29a      	uxth	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800726e:	b29b      	uxth	r3, r3
 8007270:	3b01      	subs	r3, #1
 8007272:	b29a      	uxth	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1aa      	bne.n	80071d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f001 f817 	bl	80082b8 <I2C_WaitOnBTFFlagUntilTimeout>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00d      	beq.n	80072ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007294:	2b04      	cmp	r3, #4
 8007296:	d107      	bne.n	80072a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e016      	b.n	80072da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2220      	movs	r2, #32
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	e000      	b.n	80072da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80072d8:	2302      	movs	r3, #2
  }
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	00100002 	.word	0x00100002
 80072e8:	ffff0000 	.word	0xffff0000

080072ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08c      	sub	sp, #48	@ 0x30
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	4608      	mov	r0, r1
 80072f6:	4611      	mov	r1, r2
 80072f8:	461a      	mov	r2, r3
 80072fa:	4603      	mov	r3, r0
 80072fc:	817b      	strh	r3, [r7, #10]
 80072fe:	460b      	mov	r3, r1
 8007300:	813b      	strh	r3, [r7, #8]
 8007302:	4613      	mov	r3, r2
 8007304:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007306:	f7fe fa5b 	bl	80057c0 <HAL_GetTick>
 800730a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b20      	cmp	r3, #32
 8007316:	f040 8214 	bne.w	8007742 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	2319      	movs	r3, #25
 8007320:	2201      	movs	r2, #1
 8007322:	497b      	ldr	r1, [pc, #492]	@ (8007510 <HAL_I2C_Mem_Read+0x224>)
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 fe65 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007330:	2302      	movs	r3, #2
 8007332:	e207      	b.n	8007744 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800733a:	2b01      	cmp	r3, #1
 800733c:	d101      	bne.n	8007342 <HAL_I2C_Mem_Read+0x56>
 800733e:	2302      	movs	r3, #2
 8007340:	e200      	b.n	8007744 <HAL_I2C_Mem_Read+0x458>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b01      	cmp	r3, #1
 8007356:	d007      	beq.n	8007368 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0201 	orr.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007376:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2222      	movs	r2, #34	@ 0x22
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2240      	movs	r2, #64	@ 0x40
 8007384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007392:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007398:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4a5b      	ldr	r2, [pc, #364]	@ (8007514 <HAL_I2C_Mem_Read+0x228>)
 80073a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073aa:	88f8      	ldrh	r0, [r7, #6]
 80073ac:	893a      	ldrh	r2, [r7, #8]
 80073ae:	8979      	ldrh	r1, [r7, #10]
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	9301      	str	r3, [sp, #4]
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	4603      	mov	r3, r0
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 fc16 	bl	8007bec <I2C_RequestMemoryRead>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e1bc      	b.n	8007744 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d113      	bne.n	80073fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073d2:	2300      	movs	r3, #0
 80073d4:	623b      	str	r3, [r7, #32]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	623b      	str	r3, [r7, #32]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	623b      	str	r3, [r7, #32]
 80073e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	e190      	b.n	800771c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d11b      	bne.n	800743a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007410:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007412:	2300      	movs	r3, #0
 8007414:	61fb      	str	r3, [r7, #28]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	61fb      	str	r3, [r7, #28]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	61fb      	str	r3, [r7, #28]
 8007426:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	e170      	b.n	800771c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800743e:	2b02      	cmp	r3, #2
 8007440:	d11b      	bne.n	800747a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007450:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007460:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007462:	2300      	movs	r3, #0
 8007464:	61bb      	str	r3, [r7, #24]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	61bb      	str	r3, [r7, #24]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	61bb      	str	r3, [r7, #24]
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	e150      	b.n	800771c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	617b      	str	r3, [r7, #20]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007490:	e144      	b.n	800771c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007496:	2b03      	cmp	r3, #3
 8007498:	f200 80f1 	bhi.w	800767e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d123      	bne.n	80074ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 ff4d 	bl	8008348 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e145      	b.n	8007744 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	691a      	ldr	r2, [r3, #16]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c2:	b2d2      	uxtb	r2, r2
 80074c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80074ea:	e117      	b.n	800771c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d14e      	bne.n	8007592 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fa:	2200      	movs	r2, #0
 80074fc:	4906      	ldr	r1, [pc, #24]	@ (8007518 <HAL_I2C_Mem_Read+0x22c>)
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 fd78 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d008      	beq.n	800751c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e11a      	b.n	8007744 <HAL_I2C_Mem_Read+0x458>
 800750e:	bf00      	nop
 8007510:	00100002 	.word	0x00100002
 8007514:	ffff0000 	.word	0xffff0000
 8007518:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800752a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	691a      	ldr	r2, [r3, #16]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007536:	b2d2      	uxtb	r2, r2
 8007538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007554:	b29b      	uxth	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	691a      	ldr	r2, [r3, #16]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007568:	b2d2      	uxtb	r2, r2
 800756a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007586:	b29b      	uxth	r3, r3
 8007588:	3b01      	subs	r3, #1
 800758a:	b29a      	uxth	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007590:	e0c4      	b.n	800771c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007598:	2200      	movs	r2, #0
 800759a:	496c      	ldr	r1, [pc, #432]	@ (800774c <HAL_I2C_Mem_Read+0x460>)
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fd29 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e0cb      	b.n	8007744 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c6:	b2d2      	uxtb	r2, r2
 80075c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f4:	2200      	movs	r2, #0
 80075f6:	4955      	ldr	r1, [pc, #340]	@ (800774c <HAL_I2C_Mem_Read+0x460>)
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fcfb 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e09d      	b.n	8007744 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691a      	ldr	r2, [r3, #16]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007634:	3b01      	subs	r3, #1
 8007636:	b29a      	uxth	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007666:	3b01      	subs	r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007672:	b29b      	uxth	r3, r3
 8007674:	3b01      	subs	r3, #1
 8007676:	b29a      	uxth	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800767c:	e04e      	b.n	800771c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800767e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007680:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 fe60 	bl	8008348 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e058      	b.n	8007744 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ae:	3b01      	subs	r3, #1
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	f003 0304 	and.w	r3, r3, #4
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d124      	bne.n	800771c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d107      	bne.n	80076ea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076e8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	691a      	ldr	r2, [r3, #16]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f4:	b2d2      	uxtb	r2, r2
 80076f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007706:	3b01      	subs	r3, #1
 8007708:	b29a      	uxth	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b01      	subs	r3, #1
 8007716:	b29a      	uxth	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007720:	2b00      	cmp	r3, #0
 8007722:	f47f aeb6 	bne.w	8007492 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2220      	movs	r2, #32
 800772a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	e000      	b.n	8007744 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007742:	2302      	movs	r3, #2
  }
}
 8007744:	4618      	mov	r0, r3
 8007746:	3728      	adds	r7, #40	@ 0x28
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	00010004 	.word	0x00010004

08007750 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08c      	sub	sp, #48	@ 0x30
 8007754:	af02      	add	r7, sp, #8
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	4608      	mov	r0, r1
 800775a:	4611      	mov	r1, r2
 800775c:	461a      	mov	r2, r3
 800775e:	4603      	mov	r3, r0
 8007760:	817b      	strh	r3, [r7, #10]
 8007762:	460b      	mov	r3, r1
 8007764:	813b      	strh	r3, [r7, #8]
 8007766:	4613      	mov	r3, r2
 8007768:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800776a:	f7fe f829 	bl	80057c0 <HAL_GetTick>
 800776e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b20      	cmp	r3, #32
 800777e:	f040 8172 	bne.w	8007a66 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007782:	4b93      	ldr	r3, [pc, #588]	@ (80079d0 <HAL_I2C_Mem_Read_DMA+0x280>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	08db      	lsrs	r3, r3, #3
 8007788:	4a92      	ldr	r2, [pc, #584]	@ (80079d4 <HAL_I2C_Mem_Read_DMA+0x284>)
 800778a:	fba2 2303 	umull	r2, r3, r2, r3
 800778e:	0a1a      	lsrs	r2, r3, #8
 8007790:	4613      	mov	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	009a      	lsls	r2, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	3b01      	subs	r3, #1
 80077a0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d112      	bne.n	80077ce <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c2:	f043 0220 	orr.w	r2, r3, #32
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80077ca:	2302      	movs	r3, #2
 80077cc:	e14c      	b.n	8007a68 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d0df      	beq.n	800779c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d101      	bne.n	80077ea <HAL_I2C_Mem_Read_DMA+0x9a>
 80077e6:	2302      	movs	r3, #2
 80077e8:	e13e      	b.n	8007a68 <HAL_I2C_Mem_Read_DMA+0x318>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d007      	beq.n	8007810 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f042 0201 	orr.w	r2, r2, #1
 800780e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800781e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2222      	movs	r2, #34	@ 0x22
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2240      	movs	r2, #64	@ 0x40
 800782c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800783a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007840:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007846:	b29a      	uxth	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4a62      	ldr	r2, [pc, #392]	@ (80079d8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8007850:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8007852:	897a      	ldrh	r2, [r7, #10]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8007858:	893a      	ldrh	r2, [r7, #8]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800785e:	88fa      	ldrh	r2, [r7, #6]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 80cc 	beq.w	8007a0c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007878:	2b00      	cmp	r3, #0
 800787a:	d02d      	beq.n	80078d8 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007880:	4a56      	ldr	r2, [pc, #344]	@ (80079dc <HAL_I2C_Mem_Read_DMA+0x28c>)
 8007882:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	4a55      	ldr	r2, [pc, #340]	@ (80079e0 <HAL_I2C_Mem_Read_DMA+0x290>)
 800788a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007890:	2200      	movs	r2, #0
 8007892:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007898:	2200      	movs	r2, #0
 800789a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a0:	2200      	movs	r2, #0
 80078a2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a8:	2200      	movs	r2, #0
 80078aa:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3310      	adds	r3, #16
 80078b6:	4619      	mov	r1, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078bc:	461a      	mov	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078c2:	f7fe fd7d 	bl	80063c0 <HAL_DMA_Start_IT>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80078cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f040 8087 	bne.w	80079e4 <HAL_I2C_Mem_Read_DMA+0x294>
 80078d6:	e013      	b.n	8007900 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2220      	movs	r2, #32
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0b3      	b.n	8007a68 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007900:	88f8      	ldrh	r0, [r7, #6]
 8007902:	893a      	ldrh	r2, [r7, #8]
 8007904:	8979      	ldrh	r1, [r7, #10]
 8007906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	2323      	movs	r3, #35	@ 0x23
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	4603      	mov	r3, r0
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f96b 	bl	8007bec <I2C_RequestMemoryRead>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d023      	beq.n	8007964 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007920:	4618      	mov	r0, r3
 8007922:	f7fe fe15 	bl	8006550 <HAL_DMA_Abort_IT>
 8007926:	4603      	mov	r3, r0
 8007928:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007930:	2200      	movs	r2, #0
 8007932:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007942:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0201 	bic.w	r2, r2, #1
 800795e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e081      	b.n	8007a68 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007968:	2b01      	cmp	r3, #1
 800796a:	d108      	bne.n	800797e <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	e007      	b.n	800798e <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800798c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800798e:	2300      	movs	r3, #0
 8007990:	61bb      	str	r3, [r7, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	61bb      	str	r3, [r7, #24]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	61bb      	str	r3, [r7, #24]
 80079a2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079ba:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079ca:	605a      	str	r2, [r3, #4]
 80079cc:	e049      	b.n	8007a62 <HAL_I2C_Mem_Read_DMA+0x312>
 80079ce:	bf00      	nop
 80079d0:	20000004 	.word	0x20000004
 80079d4:	14f8b589 	.word	0x14f8b589
 80079d8:	ffff0000 	.word	0xffff0000
 80079dc:	08007dbd 	.word	0x08007dbd
 80079e0:	08007f7b 	.word	0x08007f7b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2220      	movs	r2, #32
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f8:	f043 0210 	orr.w	r2, r3, #16
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e02d      	b.n	8007a68 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007a0c:	88f8      	ldrh	r0, [r7, #6]
 8007a0e:	893a      	ldrh	r2, [r7, #8]
 8007a10:	8979      	ldrh	r1, [r7, #10]
 8007a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	2323      	movs	r3, #35	@ 0x23
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f8e5 	bl	8007bec <I2C_RequestMemoryRead>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e01d      	b.n	8007a68 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	617b      	str	r3, [r7, #20]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a50:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	e000      	b.n	8007a68 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8007a66:	2302      	movs	r3, #2
  }
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3728      	adds	r7, #40	@ 0x28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	4608      	mov	r0, r1
 8007aca:	4611      	mov	r1, r2
 8007acc:	461a      	mov	r2, r3
 8007ace:	4603      	mov	r3, r0
 8007ad0:	817b      	strh	r3, [r7, #10]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	813b      	strh	r3, [r7, #8]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ae8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 fa7c 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00d      	beq.n	8007b1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b10:	d103      	bne.n	8007b1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e05f      	b.n	8007bde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b1e:	897b      	ldrh	r3, [r7, #10]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	461a      	mov	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007b2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	6a3a      	ldr	r2, [r7, #32]
 8007b32:	492d      	ldr	r1, [pc, #180]	@ (8007be8 <I2C_RequestMemoryWrite+0x128>)
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 fad7 	bl	80080e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e04c      	b.n	8007bde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b44:	2300      	movs	r3, #0
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	617b      	str	r3, [r7, #20]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b5c:	6a39      	ldr	r1, [r7, #32]
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 fb62 	bl	8008228 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00d      	beq.n	8007b86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d107      	bne.n	8007b82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e02b      	b.n	8007bde <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b86:	88fb      	ldrh	r3, [r7, #6]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d105      	bne.n	8007b98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b8c:	893b      	ldrh	r3, [r7, #8]
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	611a      	str	r2, [r3, #16]
 8007b96:	e021      	b.n	8007bdc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007b98:	893b      	ldrh	r3, [r7, #8]
 8007b9a:	0a1b      	lsrs	r3, r3, #8
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba8:	6a39      	ldr	r1, [r7, #32]
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 fb3c 	bl	8008228 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00d      	beq.n	8007bd2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	d107      	bne.n	8007bce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e005      	b.n	8007bde <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bd2:	893b      	ldrh	r3, [r7, #8]
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	00010002 	.word	0x00010002

08007bec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af02      	add	r7, sp, #8
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	817b      	strh	r3, [r7, #10]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	813b      	strh	r3, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 f9de 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00d      	beq.n	8007c5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c4c:	d103      	bne.n	8007c56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e0aa      	b.n	8007db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c5a:	897b      	ldrh	r3, [r7, #10]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007c68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6c:	6a3a      	ldr	r2, [r7, #32]
 8007c6e:	4952      	ldr	r1, [pc, #328]	@ (8007db8 <I2C_RequestMemoryRead+0x1cc>)
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 fa39 	bl	80080e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e097      	b.n	8007db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c80:	2300      	movs	r3, #0
 8007c82:	617b      	str	r3, [r7, #20]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	617b      	str	r3, [r7, #20]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	617b      	str	r3, [r7, #20]
 8007c94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c98:	6a39      	ldr	r1, [r7, #32]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 fac4 	bl	8008228 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00d      	beq.n	8007cc2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d107      	bne.n	8007cbe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e076      	b.n	8007db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cc2:	88fb      	ldrh	r3, [r7, #6]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d105      	bne.n	8007cd4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007cc8:	893b      	ldrh	r3, [r7, #8]
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	611a      	str	r2, [r3, #16]
 8007cd2:	e021      	b.n	8007d18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007cd4:	893b      	ldrh	r3, [r7, #8]
 8007cd6:	0a1b      	lsrs	r3, r3, #8
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ce4:	6a39      	ldr	r1, [r7, #32]
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 fa9e 	bl	8008228 <I2C_WaitOnTXEFlagUntilTimeout>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00d      	beq.n	8007d0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d107      	bne.n	8007d0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e050      	b.n	8007db0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d0e:	893b      	ldrh	r3, [r7, #8]
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d1a:	6a39      	ldr	r1, [r7, #32]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 fa83 	bl	8008228 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00d      	beq.n	8007d44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d107      	bne.n	8007d40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e035      	b.n	8007db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 f947 	bl	8007ff4 <I2C_WaitOnFlagUntilTimeout>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00d      	beq.n	8007d88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d7a:	d103      	bne.n	8007d84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e013      	b.n	8007db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007d88:	897b      	ldrh	r3, [r7, #10]
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	f043 0301 	orr.w	r3, r3, #1
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9a:	6a3a      	ldr	r2, [r7, #32]
 8007d9c:	4906      	ldr	r1, [pc, #24]	@ (8007db8 <I2C_RequestMemoryRead+0x1cc>)
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 f9a2 	bl	80080e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e000      	b.n	8007db0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	00010002 	.word	0x00010002

08007dbc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dd0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dd8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007dee:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007e10:	7cfb      	ldrb	r3, [r7, #19]
 8007e12:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8007e16:	2b21      	cmp	r3, #33	@ 0x21
 8007e18:	d007      	beq.n	8007e2a <I2C_DMAXferCplt+0x6e>
 8007e1a:	7cfb      	ldrb	r3, [r7, #19]
 8007e1c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007e20:	2b22      	cmp	r3, #34	@ 0x22
 8007e22:	d131      	bne.n	8007e88 <I2C_DMAXferCplt+0xcc>
 8007e24:	7cbb      	ldrb	r3, [r7, #18]
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	d12e      	bne.n	8007e88 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e38:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007e40:	7cfb      	ldrb	r3, [r7, #19]
 8007e42:	2b29      	cmp	r3, #41	@ 0x29
 8007e44:	d10a      	bne.n	8007e5c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2221      	movs	r2, #33	@ 0x21
 8007e4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2228      	movs	r2, #40	@ 0x28
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e54:	6978      	ldr	r0, [r7, #20]
 8007e56:	f7ff fe15 	bl	8007a84 <HAL_I2C_SlaveTxCpltCallback>
 8007e5a:	e00c      	b.n	8007e76 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007e5c:	7cfb      	ldrb	r3, [r7, #19]
 8007e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e60:	d109      	bne.n	8007e76 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2222      	movs	r2, #34	@ 0x22
 8007e66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2228      	movs	r2, #40	@ 0x28
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e70:	6978      	ldr	r0, [r7, #20]
 8007e72:	f7ff fe11 	bl	8007a98 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007e84:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007e86:	e074      	b.n	8007f72 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d06e      	beq.n	8007f72 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d107      	bne.n	8007eae <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007eac:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007ebc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ec4:	d009      	beq.n	8007eda <I2C_DMAXferCplt+0x11e>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b08      	cmp	r3, #8
 8007eca:	d006      	beq.n	8007eda <I2C_DMAXferCplt+0x11e>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007ed2:	d002      	beq.n	8007eda <I2C_DMAXferCplt+0x11e>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d107      	bne.n	8007eea <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ee8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ef8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f08:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007f18:	6978      	ldr	r0, [r7, #20]
 8007f1a:	f7ff fdc7 	bl	8007aac <HAL_I2C_ErrorCallback>
}
 8007f1e:	e028      	b.n	8007f72 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b40      	cmp	r3, #64	@ 0x40
 8007f32:	d10a      	bne.n	8007f4a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007f42:	6978      	ldr	r0, [r7, #20]
 8007f44:	f7f9 fcce 	bl	80018e4 <HAL_I2C_MemRxCpltCallback>
}
 8007f48:	e013      	b.n	8007f72 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d002      	beq.n	8007f5e <I2C_DMAXferCplt+0x1a2>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b20      	cmp	r3, #32
 8007f5c:	d103      	bne.n	8007f66 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2200      	movs	r2, #0
 8007f62:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f64:	e002      	b.n	8007f6c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2212      	movs	r2, #18
 8007f6a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007f6c:	6978      	ldr	r0, [r7, #20]
 8007f6e:	f7ff fd7f 	bl	8007a70 <HAL_I2C_MasterRxCpltCallback>
}
 8007f72:	bf00      	nop
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f94:	2200      	movs	r2, #0
 8007f96:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7fe fc7d 	bl	80068a8 <HAL_DMA_GetError>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d01b      	beq.n	8007fec <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fc2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fde:	f043 0210 	orr.w	r2, r3, #16
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f7ff fd60 	bl	8007aac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007fec:	bf00      	nop
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	4613      	mov	r3, r2
 8008002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008004:	e048      	b.n	8008098 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800800c:	d044      	beq.n	8008098 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800800e:	f7fd fbd7 	bl	80057c0 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d302      	bcc.n	8008024 <I2C_WaitOnFlagUntilTimeout+0x30>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d139      	bne.n	8008098 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	0c1b      	lsrs	r3, r3, #16
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b01      	cmp	r3, #1
 800802c:	d10d      	bne.n	800804a <I2C_WaitOnFlagUntilTimeout+0x56>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	695b      	ldr	r3, [r3, #20]
 8008034:	43da      	mvns	r2, r3
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	4013      	ands	r3, r2
 800803a:	b29b      	uxth	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	bf0c      	ite	eq
 8008040:	2301      	moveq	r3, #1
 8008042:	2300      	movne	r3, #0
 8008044:	b2db      	uxtb	r3, r3
 8008046:	461a      	mov	r2, r3
 8008048:	e00c      	b.n	8008064 <I2C_WaitOnFlagUntilTimeout+0x70>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	43da      	mvns	r2, r3
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4013      	ands	r3, r2
 8008056:	b29b      	uxth	r3, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	bf0c      	ite	eq
 800805c:	2301      	moveq	r3, #1
 800805e:	2300      	movne	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	429a      	cmp	r2, r3
 8008068:	d116      	bne.n	8008098 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2220      	movs	r2, #32
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008084:	f043 0220 	orr.w	r2, r3, #32
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e023      	b.n	80080e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	0c1b      	lsrs	r3, r3, #16
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d10d      	bne.n	80080be <I2C_WaitOnFlagUntilTimeout+0xca>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	43da      	mvns	r2, r3
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4013      	ands	r3, r2
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	461a      	mov	r2, r3
 80080bc:	e00c      	b.n	80080d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	43da      	mvns	r2, r3
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	4013      	ands	r3, r2
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	bf0c      	ite	eq
 80080d0:	2301      	moveq	r3, #1
 80080d2:	2300      	movne	r3, #0
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	461a      	mov	r2, r3
 80080d8:	79fb      	ldrb	r3, [r7, #7]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d093      	beq.n	8008006 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
 80080f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080f6:	e071      	b.n	80081dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008106:	d123      	bne.n	8008150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008116:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008120:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2220      	movs	r2, #32
 800812c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813c:	f043 0204 	orr.w	r2, r3, #4
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e067      	b.n	8008220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008156:	d041      	beq.n	80081dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008158:	f7fd fb32 	bl	80057c0 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	429a      	cmp	r2, r3
 8008166:	d302      	bcc.n	800816e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d136      	bne.n	80081dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	0c1b      	lsrs	r3, r3, #16
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b01      	cmp	r3, #1
 8008176:	d10c      	bne.n	8008192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	43da      	mvns	r2, r3
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4013      	ands	r3, r2
 8008184:	b29b      	uxth	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	bf14      	ite	ne
 800818a:	2301      	movne	r3, #1
 800818c:	2300      	moveq	r3, #0
 800818e:	b2db      	uxtb	r3, r3
 8008190:	e00b      	b.n	80081aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	43da      	mvns	r2, r3
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	4013      	ands	r3, r2
 800819e:	b29b      	uxth	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	bf14      	ite	ne
 80081a4:	2301      	movne	r3, #1
 80081a6:	2300      	moveq	r3, #0
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d016      	beq.n	80081dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c8:	f043 0220 	orr.w	r2, r3, #32
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e021      	b.n	8008220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	0c1b      	lsrs	r3, r3, #16
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d10c      	bne.n	8008200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	43da      	mvns	r2, r3
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	4013      	ands	r3, r2
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bf14      	ite	ne
 80081f8:	2301      	movne	r3, #1
 80081fa:	2300      	moveq	r3, #0
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	e00b      	b.n	8008218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	43da      	mvns	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4013      	ands	r3, r2
 800820c:	b29b      	uxth	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	bf14      	ite	ne
 8008212:	2301      	movne	r3, #1
 8008214:	2300      	moveq	r3, #0
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b00      	cmp	r3, #0
 800821a:	f47f af6d 	bne.w	80080f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008234:	e034      	b.n	80082a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 f8e3 	bl	8008402 <I2C_IsAcknowledgeFailed>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e034      	b.n	80082b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800824c:	d028      	beq.n	80082a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800824e:	f7fd fab7 	bl	80057c0 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	429a      	cmp	r2, r3
 800825c:	d302      	bcc.n	8008264 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d11d      	bne.n	80082a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800826e:	2b80      	cmp	r3, #128	@ 0x80
 8008270:	d016      	beq.n	80082a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2220      	movs	r2, #32
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828c:	f043 0220 	orr.w	r2, r3, #32
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e007      	b.n	80082b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082aa:	2b80      	cmp	r3, #128	@ 0x80
 80082ac:	d1c3      	bne.n	8008236 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80082c4:	e034      	b.n	8008330 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 f89b 	bl	8008402 <I2C_IsAcknowledgeFailed>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e034      	b.n	8008340 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082dc:	d028      	beq.n	8008330 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082de:	f7fd fa6f 	bl	80057c0 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d302      	bcc.n	80082f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d11d      	bne.n	8008330 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	f003 0304 	and.w	r3, r3, #4
 80082fe:	2b04      	cmp	r3, #4
 8008300:	d016      	beq.n	8008330 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2220      	movs	r2, #32
 800830c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831c:	f043 0220 	orr.w	r2, r3, #32
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e007      	b.n	8008340 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	f003 0304 	and.w	r3, r3, #4
 800833a:	2b04      	cmp	r3, #4
 800833c:	d1c3      	bne.n	80082c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008354:	e049      	b.n	80083ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	2b10      	cmp	r3, #16
 8008362:	d119      	bne.n	8008398 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f06f 0210 	mvn.w	r2, #16
 800836c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2220      	movs	r2, #32
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e030      	b.n	80083fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008398:	f7fd fa12 	bl	80057c0 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d302      	bcc.n	80083ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d11d      	bne.n	80083ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b8:	2b40      	cmp	r3, #64	@ 0x40
 80083ba:	d016      	beq.n	80083ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d6:	f043 0220 	orr.w	r2, r3, #32
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e007      	b.n	80083fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f4:	2b40      	cmp	r3, #64	@ 0x40
 80083f6:	d1ae      	bne.n	8008356 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008418:	d11b      	bne.n	8008452 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008422:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2220      	movs	r2, #32
 800842e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800843e:	f043 0204 	orr.w	r2, r3, #4
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e0cc      	b.n	800860e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008474:	4b68      	ldr	r3, [pc, #416]	@ (8008618 <HAL_RCC_ClockConfig+0x1b8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d90c      	bls.n	800849c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008482:	4b65      	ldr	r3, [pc, #404]	@ (8008618 <HAL_RCC_ClockConfig+0x1b8>)
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	b2d2      	uxtb	r2, r2
 8008488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800848a:	4b63      	ldr	r3, [pc, #396]	@ (8008618 <HAL_RCC_ClockConfig+0x1b8>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 030f 	and.w	r3, r3, #15
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d001      	beq.n	800849c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e0b8      	b.n	800860e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d020      	beq.n	80084ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d005      	beq.n	80084c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084b4:	4b59      	ldr	r3, [pc, #356]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	4a58      	ldr	r2, [pc, #352]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 80084ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80084be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0308 	and.w	r3, r3, #8
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d005      	beq.n	80084d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084cc:	4b53      	ldr	r3, [pc, #332]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	4a52      	ldr	r2, [pc, #328]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 80084d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80084d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084d8:	4b50      	ldr	r3, [pc, #320]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	494d      	ldr	r1, [pc, #308]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d044      	beq.n	8008580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d107      	bne.n	800850e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084fe:	4b47      	ldr	r3, [pc, #284]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d119      	bne.n	800853e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e07f      	b.n	800860e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	2b02      	cmp	r3, #2
 8008514:	d003      	beq.n	800851e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800851a:	2b03      	cmp	r3, #3
 800851c:	d107      	bne.n	800852e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800851e:	4b3f      	ldr	r3, [pc, #252]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d109      	bne.n	800853e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e06f      	b.n	800860e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800852e:	4b3b      	ldr	r3, [pc, #236]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e067      	b.n	800860e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800853e:	4b37      	ldr	r3, [pc, #220]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f023 0203 	bic.w	r2, r3, #3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	4934      	ldr	r1, [pc, #208]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 800854c:	4313      	orrs	r3, r2
 800854e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008550:	f7fd f936 	bl	80057c0 <HAL_GetTick>
 8008554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008556:	e00a      	b.n	800856e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008558:	f7fd f932 	bl	80057c0 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008566:	4293      	cmp	r3, r2
 8008568:	d901      	bls.n	800856e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e04f      	b.n	800860e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800856e:	4b2b      	ldr	r3, [pc, #172]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f003 020c 	and.w	r2, r3, #12
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	429a      	cmp	r2, r3
 800857e:	d1eb      	bne.n	8008558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008580:	4b25      	ldr	r3, [pc, #148]	@ (8008618 <HAL_RCC_ClockConfig+0x1b8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	429a      	cmp	r2, r3
 800858c:	d20c      	bcs.n	80085a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800858e:	4b22      	ldr	r3, [pc, #136]	@ (8008618 <HAL_RCC_ClockConfig+0x1b8>)
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	b2d2      	uxtb	r2, r2
 8008594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008596:	4b20      	ldr	r3, [pc, #128]	@ (8008618 <HAL_RCC_ClockConfig+0x1b8>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 030f 	and.w	r3, r3, #15
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d001      	beq.n	80085a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e032      	b.n	800860e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d008      	beq.n	80085c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085b4:	4b19      	ldr	r3, [pc, #100]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	4916      	ldr	r1, [pc, #88]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d009      	beq.n	80085e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085d2:	4b12      	ldr	r3, [pc, #72]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	490e      	ldr	r1, [pc, #56]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80085e6:	f000 f855 	bl	8008694 <HAL_RCC_GetSysClockFreq>
 80085ea:	4602      	mov	r2, r0
 80085ec:	4b0b      	ldr	r3, [pc, #44]	@ (800861c <HAL_RCC_ClockConfig+0x1bc>)
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	091b      	lsrs	r3, r3, #4
 80085f2:	f003 030f 	and.w	r3, r3, #15
 80085f6:	490a      	ldr	r1, [pc, #40]	@ (8008620 <HAL_RCC_ClockConfig+0x1c0>)
 80085f8:	5ccb      	ldrb	r3, [r1, r3]
 80085fa:	fa22 f303 	lsr.w	r3, r2, r3
 80085fe:	4a09      	ldr	r2, [pc, #36]	@ (8008624 <HAL_RCC_ClockConfig+0x1c4>)
 8008600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008602:	4b09      	ldr	r3, [pc, #36]	@ (8008628 <HAL_RCC_ClockConfig+0x1c8>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4618      	mov	r0, r3
 8008608:	f7fd f896 	bl	8005738 <HAL_InitTick>

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	40023c00 	.word	0x40023c00
 800861c:	40023800 	.word	0x40023800
 8008620:	08011350 	.word	0x08011350
 8008624:	20000004 	.word	0x20000004
 8008628:	200003c4 	.word	0x200003c4

0800862c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008630:	4b03      	ldr	r3, [pc, #12]	@ (8008640 <HAL_RCC_GetHCLKFreq+0x14>)
 8008632:	681b      	ldr	r3, [r3, #0]
}
 8008634:	4618      	mov	r0, r3
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	20000004 	.word	0x20000004

08008644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008648:	f7ff fff0 	bl	800862c <HAL_RCC_GetHCLKFreq>
 800864c:	4602      	mov	r2, r0
 800864e:	4b05      	ldr	r3, [pc, #20]	@ (8008664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	0a9b      	lsrs	r3, r3, #10
 8008654:	f003 0307 	and.w	r3, r3, #7
 8008658:	4903      	ldr	r1, [pc, #12]	@ (8008668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800865a:	5ccb      	ldrb	r3, [r1, r3]
 800865c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008660:	4618      	mov	r0, r3
 8008662:	bd80      	pop	{r7, pc}
 8008664:	40023800 	.word	0x40023800
 8008668:	08011360 	.word	0x08011360

0800866c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008670:	f7ff ffdc 	bl	800862c <HAL_RCC_GetHCLKFreq>
 8008674:	4602      	mov	r2, r0
 8008676:	4b05      	ldr	r3, [pc, #20]	@ (800868c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	0b5b      	lsrs	r3, r3, #13
 800867c:	f003 0307 	and.w	r3, r3, #7
 8008680:	4903      	ldr	r1, [pc, #12]	@ (8008690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008682:	5ccb      	ldrb	r3, [r1, r3]
 8008684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008688:	4618      	mov	r0, r3
 800868a:	bd80      	pop	{r7, pc}
 800868c:	40023800 	.word	0x40023800
 8008690:	08011360 	.word	0x08011360

08008694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008698:	b0ae      	sub	sp, #184	@ 0xb8
 800869a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086ba:	4bcb      	ldr	r3, [pc, #812]	@ (80089e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f003 030c 	and.w	r3, r3, #12
 80086c2:	2b0c      	cmp	r3, #12
 80086c4:	f200 8206 	bhi.w	8008ad4 <HAL_RCC_GetSysClockFreq+0x440>
 80086c8:	a201      	add	r2, pc, #4	@ (adr r2, 80086d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80086ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ce:	bf00      	nop
 80086d0:	08008705 	.word	0x08008705
 80086d4:	08008ad5 	.word	0x08008ad5
 80086d8:	08008ad5 	.word	0x08008ad5
 80086dc:	08008ad5 	.word	0x08008ad5
 80086e0:	0800870d 	.word	0x0800870d
 80086e4:	08008ad5 	.word	0x08008ad5
 80086e8:	08008ad5 	.word	0x08008ad5
 80086ec:	08008ad5 	.word	0x08008ad5
 80086f0:	08008715 	.word	0x08008715
 80086f4:	08008ad5 	.word	0x08008ad5
 80086f8:	08008ad5 	.word	0x08008ad5
 80086fc:	08008ad5 	.word	0x08008ad5
 8008700:	08008905 	.word	0x08008905
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008704:	4bb9      	ldr	r3, [pc, #740]	@ (80089ec <HAL_RCC_GetSysClockFreq+0x358>)
 8008706:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800870a:	e1e7      	b.n	8008adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800870c:	4bb8      	ldr	r3, [pc, #736]	@ (80089f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800870e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008712:	e1e3      	b.n	8008adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008714:	4bb4      	ldr	r3, [pc, #720]	@ (80089e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800871c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008720:	4bb1      	ldr	r3, [pc, #708]	@ (80089e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d071      	beq.n	8008810 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800872c:	4bae      	ldr	r3, [pc, #696]	@ (80089e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	099b      	lsrs	r3, r3, #6
 8008732:	2200      	movs	r2, #0
 8008734:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008738:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800873c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008744:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008748:	2300      	movs	r3, #0
 800874a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800874e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008752:	4622      	mov	r2, r4
 8008754:	462b      	mov	r3, r5
 8008756:	f04f 0000 	mov.w	r0, #0
 800875a:	f04f 0100 	mov.w	r1, #0
 800875e:	0159      	lsls	r1, r3, #5
 8008760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008764:	0150      	lsls	r0, r2, #5
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4621      	mov	r1, r4
 800876c:	1a51      	subs	r1, r2, r1
 800876e:	6439      	str	r1, [r7, #64]	@ 0x40
 8008770:	4629      	mov	r1, r5
 8008772:	eb63 0301 	sbc.w	r3, r3, r1
 8008776:	647b      	str	r3, [r7, #68]	@ 0x44
 8008778:	f04f 0200 	mov.w	r2, #0
 800877c:	f04f 0300 	mov.w	r3, #0
 8008780:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8008784:	4649      	mov	r1, r9
 8008786:	018b      	lsls	r3, r1, #6
 8008788:	4641      	mov	r1, r8
 800878a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800878e:	4641      	mov	r1, r8
 8008790:	018a      	lsls	r2, r1, #6
 8008792:	4641      	mov	r1, r8
 8008794:	1a51      	subs	r1, r2, r1
 8008796:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008798:	4649      	mov	r1, r9
 800879a:	eb63 0301 	sbc.w	r3, r3, r1
 800879e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	f04f 0300 	mov.w	r3, #0
 80087a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80087ac:	4649      	mov	r1, r9
 80087ae:	00cb      	lsls	r3, r1, #3
 80087b0:	4641      	mov	r1, r8
 80087b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087b6:	4641      	mov	r1, r8
 80087b8:	00ca      	lsls	r2, r1, #3
 80087ba:	4610      	mov	r0, r2
 80087bc:	4619      	mov	r1, r3
 80087be:	4603      	mov	r3, r0
 80087c0:	4622      	mov	r2, r4
 80087c2:	189b      	adds	r3, r3, r2
 80087c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80087c6:	462b      	mov	r3, r5
 80087c8:	460a      	mov	r2, r1
 80087ca:	eb42 0303 	adc.w	r3, r2, r3
 80087ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d0:	f04f 0200 	mov.w	r2, #0
 80087d4:	f04f 0300 	mov.w	r3, #0
 80087d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80087dc:	4629      	mov	r1, r5
 80087de:	024b      	lsls	r3, r1, #9
 80087e0:	4621      	mov	r1, r4
 80087e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80087e6:	4621      	mov	r1, r4
 80087e8:	024a      	lsls	r2, r1, #9
 80087ea:	4610      	mov	r0, r2
 80087ec:	4619      	mov	r1, r3
 80087ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80087fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008800:	f7f8 fa72 	bl	8000ce8 <__aeabi_uldivmod>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4613      	mov	r3, r2
 800880a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800880e:	e067      	b.n	80088e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008810:	4b75      	ldr	r3, [pc, #468]	@ (80089e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	099b      	lsrs	r3, r3, #6
 8008816:	2200      	movs	r2, #0
 8008818:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800881c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008820:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008828:	67bb      	str	r3, [r7, #120]	@ 0x78
 800882a:	2300      	movs	r3, #0
 800882c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800882e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8008832:	4622      	mov	r2, r4
 8008834:	462b      	mov	r3, r5
 8008836:	f04f 0000 	mov.w	r0, #0
 800883a:	f04f 0100 	mov.w	r1, #0
 800883e:	0159      	lsls	r1, r3, #5
 8008840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008844:	0150      	lsls	r0, r2, #5
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4621      	mov	r1, r4
 800884c:	1a51      	subs	r1, r2, r1
 800884e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008850:	4629      	mov	r1, r5
 8008852:	eb63 0301 	sbc.w	r3, r3, r1
 8008856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008858:	f04f 0200 	mov.w	r2, #0
 800885c:	f04f 0300 	mov.w	r3, #0
 8008860:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8008864:	4649      	mov	r1, r9
 8008866:	018b      	lsls	r3, r1, #6
 8008868:	4641      	mov	r1, r8
 800886a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800886e:	4641      	mov	r1, r8
 8008870:	018a      	lsls	r2, r1, #6
 8008872:	4641      	mov	r1, r8
 8008874:	ebb2 0a01 	subs.w	sl, r2, r1
 8008878:	4649      	mov	r1, r9
 800887a:	eb63 0b01 	sbc.w	fp, r3, r1
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	f04f 0300 	mov.w	r3, #0
 8008886:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800888a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800888e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008892:	4692      	mov	sl, r2
 8008894:	469b      	mov	fp, r3
 8008896:	4623      	mov	r3, r4
 8008898:	eb1a 0303 	adds.w	r3, sl, r3
 800889c:	623b      	str	r3, [r7, #32]
 800889e:	462b      	mov	r3, r5
 80088a0:	eb4b 0303 	adc.w	r3, fp, r3
 80088a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80088a6:	f04f 0200 	mov.w	r2, #0
 80088aa:	f04f 0300 	mov.w	r3, #0
 80088ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80088b2:	4629      	mov	r1, r5
 80088b4:	028b      	lsls	r3, r1, #10
 80088b6:	4621      	mov	r1, r4
 80088b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80088bc:	4621      	mov	r1, r4
 80088be:	028a      	lsls	r2, r1, #10
 80088c0:	4610      	mov	r0, r2
 80088c2:	4619      	mov	r1, r3
 80088c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088c8:	2200      	movs	r2, #0
 80088ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80088cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80088ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80088d2:	f7f8 fa09 	bl	8000ce8 <__aeabi_uldivmod>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4613      	mov	r3, r2
 80088dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80088e0:	4b41      	ldr	r3, [pc, #260]	@ (80089e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	0c1b      	lsrs	r3, r3, #16
 80088e6:	f003 0303 	and.w	r3, r3, #3
 80088ea:	3301      	adds	r3, #1
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80088f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80088f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008902:	e0eb      	b.n	8008adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008904:	4b38      	ldr	r3, [pc, #224]	@ (80089e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800890c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008910:	4b35      	ldr	r3, [pc, #212]	@ (80089e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d06b      	beq.n	80089f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800891c:	4b32      	ldr	r3, [pc, #200]	@ (80089e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	099b      	lsrs	r3, r3, #6
 8008922:	2200      	movs	r2, #0
 8008924:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008926:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008928:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800892a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800892e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008930:	2300      	movs	r3, #0
 8008932:	667b      	str	r3, [r7, #100]	@ 0x64
 8008934:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8008938:	4622      	mov	r2, r4
 800893a:	462b      	mov	r3, r5
 800893c:	f04f 0000 	mov.w	r0, #0
 8008940:	f04f 0100 	mov.w	r1, #0
 8008944:	0159      	lsls	r1, r3, #5
 8008946:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800894a:	0150      	lsls	r0, r2, #5
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4621      	mov	r1, r4
 8008952:	1a51      	subs	r1, r2, r1
 8008954:	61b9      	str	r1, [r7, #24]
 8008956:	4629      	mov	r1, r5
 8008958:	eb63 0301 	sbc.w	r3, r3, r1
 800895c:	61fb      	str	r3, [r7, #28]
 800895e:	f04f 0200 	mov.w	r2, #0
 8008962:	f04f 0300 	mov.w	r3, #0
 8008966:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800896a:	4659      	mov	r1, fp
 800896c:	018b      	lsls	r3, r1, #6
 800896e:	4651      	mov	r1, sl
 8008970:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008974:	4651      	mov	r1, sl
 8008976:	018a      	lsls	r2, r1, #6
 8008978:	4651      	mov	r1, sl
 800897a:	ebb2 0801 	subs.w	r8, r2, r1
 800897e:	4659      	mov	r1, fp
 8008980:	eb63 0901 	sbc.w	r9, r3, r1
 8008984:	f04f 0200 	mov.w	r2, #0
 8008988:	f04f 0300 	mov.w	r3, #0
 800898c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008990:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008994:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008998:	4690      	mov	r8, r2
 800899a:	4699      	mov	r9, r3
 800899c:	4623      	mov	r3, r4
 800899e:	eb18 0303 	adds.w	r3, r8, r3
 80089a2:	613b      	str	r3, [r7, #16]
 80089a4:	462b      	mov	r3, r5
 80089a6:	eb49 0303 	adc.w	r3, r9, r3
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	f04f 0200 	mov.w	r2, #0
 80089b0:	f04f 0300 	mov.w	r3, #0
 80089b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80089b8:	4629      	mov	r1, r5
 80089ba:	024b      	lsls	r3, r1, #9
 80089bc:	4621      	mov	r1, r4
 80089be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80089c2:	4621      	mov	r1, r4
 80089c4:	024a      	lsls	r2, r1, #9
 80089c6:	4610      	mov	r0, r2
 80089c8:	4619      	mov	r1, r3
 80089ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089ce:	2200      	movs	r2, #0
 80089d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80089d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80089d8:	f7f8 f986 	bl	8000ce8 <__aeabi_uldivmod>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4613      	mov	r3, r2
 80089e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089e6:	e065      	b.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x420>
 80089e8:	40023800 	.word	0x40023800
 80089ec:	00f42400 	.word	0x00f42400
 80089f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089f4:	4b3d      	ldr	r3, [pc, #244]	@ (8008aec <HAL_RCC_GetSysClockFreq+0x458>)
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	099b      	lsrs	r3, r3, #6
 80089fa:	2200      	movs	r2, #0
 80089fc:	4618      	mov	r0, r3
 80089fe:	4611      	mov	r1, r2
 8008a00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008a04:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a06:	2300      	movs	r3, #0
 8008a08:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8008a0e:	4642      	mov	r2, r8
 8008a10:	464b      	mov	r3, r9
 8008a12:	f04f 0000 	mov.w	r0, #0
 8008a16:	f04f 0100 	mov.w	r1, #0
 8008a1a:	0159      	lsls	r1, r3, #5
 8008a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a20:	0150      	lsls	r0, r2, #5
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4641      	mov	r1, r8
 8008a28:	1a51      	subs	r1, r2, r1
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	4649      	mov	r1, r9
 8008a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	f04f 0200 	mov.w	r2, #0
 8008a38:	f04f 0300 	mov.w	r3, #0
 8008a3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008a40:	4659      	mov	r1, fp
 8008a42:	018b      	lsls	r3, r1, #6
 8008a44:	4651      	mov	r1, sl
 8008a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008a4a:	4651      	mov	r1, sl
 8008a4c:	018a      	lsls	r2, r1, #6
 8008a4e:	4651      	mov	r1, sl
 8008a50:	1a54      	subs	r4, r2, r1
 8008a52:	4659      	mov	r1, fp
 8008a54:	eb63 0501 	sbc.w	r5, r3, r1
 8008a58:	f04f 0200 	mov.w	r2, #0
 8008a5c:	f04f 0300 	mov.w	r3, #0
 8008a60:	00eb      	lsls	r3, r5, #3
 8008a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a66:	00e2      	lsls	r2, r4, #3
 8008a68:	4614      	mov	r4, r2
 8008a6a:	461d      	mov	r5, r3
 8008a6c:	4643      	mov	r3, r8
 8008a6e:	18e3      	adds	r3, r4, r3
 8008a70:	603b      	str	r3, [r7, #0]
 8008a72:	464b      	mov	r3, r9
 8008a74:	eb45 0303 	adc.w	r3, r5, r3
 8008a78:	607b      	str	r3, [r7, #4]
 8008a7a:	f04f 0200 	mov.w	r2, #0
 8008a7e:	f04f 0300 	mov.w	r3, #0
 8008a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a86:	4629      	mov	r1, r5
 8008a88:	028b      	lsls	r3, r1, #10
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a90:	4621      	mov	r1, r4
 8008a92:	028a      	lsls	r2, r1, #10
 8008a94:	4610      	mov	r0, r2
 8008a96:	4619      	mov	r1, r3
 8008a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008aa0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008aa2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008aa6:	f7f8 f91f 	bl	8000ce8 <__aeabi_uldivmod>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4613      	mov	r3, r2
 8008ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8008aec <HAL_RCC_GetSysClockFreq+0x458>)
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	0f1b      	lsrs	r3, r3, #28
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8008ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ac6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ace:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008ad2:	e003      	b.n	8008adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ad4:	4b06      	ldr	r3, [pc, #24]	@ (8008af0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008ada:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008adc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	37b8      	adds	r7, #184	@ 0xb8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008aea:	bf00      	nop
 8008aec:	40023800 	.word	0x40023800
 8008af0:	00f42400 	.word	0x00f42400

08008af4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e28d      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 8083 	beq.w	8008c1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008b14:	4b94      	ldr	r3, [pc, #592]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f003 030c 	and.w	r3, r3, #12
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	d019      	beq.n	8008b54 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008b20:	4b91      	ldr	r3, [pc, #580]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f003 030c 	and.w	r3, r3, #12
        || \
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	d106      	bne.n	8008b3a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008b2c:	4b8e      	ldr	r3, [pc, #568]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b38:	d00c      	beq.n	8008b54 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b3a:	4b8b      	ldr	r3, [pc, #556]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008b42:	2b0c      	cmp	r3, #12
 8008b44:	d112      	bne.n	8008b6c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b46:	4b88      	ldr	r3, [pc, #544]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b52:	d10b      	bne.n	8008b6c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b54:	4b84      	ldr	r3, [pc, #528]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d05b      	beq.n	8008c18 <HAL_RCC_OscConfig+0x124>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d157      	bne.n	8008c18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e25a      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b74:	d106      	bne.n	8008b84 <HAL_RCC_OscConfig+0x90>
 8008b76:	4b7c      	ldr	r3, [pc, #496]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a7b      	ldr	r2, [pc, #492]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	e01d      	b.n	8008bc0 <HAL_RCC_OscConfig+0xcc>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b8c:	d10c      	bne.n	8008ba8 <HAL_RCC_OscConfig+0xb4>
 8008b8e:	4b76      	ldr	r3, [pc, #472]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a75      	ldr	r2, [pc, #468]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	4b73      	ldr	r3, [pc, #460]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a72      	ldr	r2, [pc, #456]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ba4:	6013      	str	r3, [r2, #0]
 8008ba6:	e00b      	b.n	8008bc0 <HAL_RCC_OscConfig+0xcc>
 8008ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a6e      	ldr	r2, [pc, #440]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	4b6c      	ldr	r3, [pc, #432]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a6b      	ldr	r2, [pc, #428]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d013      	beq.n	8008bf0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc8:	f7fc fdfa 	bl	80057c0 <HAL_GetTick>
 8008bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bce:	e008      	b.n	8008be2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bd0:	f7fc fdf6 	bl	80057c0 <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	2b64      	cmp	r3, #100	@ 0x64
 8008bdc:	d901      	bls.n	8008be2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e21f      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008be2:	4b61      	ldr	r3, [pc, #388]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d0f0      	beq.n	8008bd0 <HAL_RCC_OscConfig+0xdc>
 8008bee:	e014      	b.n	8008c1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf0:	f7fc fde6 	bl	80057c0 <HAL_GetTick>
 8008bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bf6:	e008      	b.n	8008c0a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bf8:	f7fc fde2 	bl	80057c0 <HAL_GetTick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	2b64      	cmp	r3, #100	@ 0x64
 8008c04:	d901      	bls.n	8008c0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e20b      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c0a:	4b57      	ldr	r3, [pc, #348]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1f0      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x104>
 8008c16:	e000      	b.n	8008c1a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d06f      	beq.n	8008d06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008c26:	4b50      	ldr	r3, [pc, #320]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f003 030c 	and.w	r3, r3, #12
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d017      	beq.n	8008c62 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008c32:	4b4d      	ldr	r3, [pc, #308]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f003 030c 	and.w	r3, r3, #12
        || \
 8008c3a:	2b08      	cmp	r3, #8
 8008c3c:	d105      	bne.n	8008c4a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00b      	beq.n	8008c62 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c4a:	4b47      	ldr	r3, [pc, #284]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008c52:	2b0c      	cmp	r3, #12
 8008c54:	d11c      	bne.n	8008c90 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c56:	4b44      	ldr	r3, [pc, #272]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d116      	bne.n	8008c90 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c62:	4b41      	ldr	r3, [pc, #260]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0302 	and.w	r3, r3, #2
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d005      	beq.n	8008c7a <HAL_RCC_OscConfig+0x186>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d001      	beq.n	8008c7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e1d3      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	4937      	ldr	r1, [pc, #220]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c8e:	e03a      	b.n	8008d06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d020      	beq.n	8008cda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c98:	4b34      	ldr	r3, [pc, #208]	@ (8008d6c <HAL_RCC_OscConfig+0x278>)
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c9e:	f7fc fd8f 	bl	80057c0 <HAL_GetTick>
 8008ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ca4:	e008      	b.n	8008cb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ca6:	f7fc fd8b 	bl	80057c0 <HAL_GetTick>
 8008caa:	4602      	mov	r2, r0
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d901      	bls.n	8008cb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e1b4      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d0f0      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cc4:	4b28      	ldr	r3, [pc, #160]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	4925      	ldr	r1, [pc, #148]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	600b      	str	r3, [r1, #0]
 8008cd8:	e015      	b.n	8008d06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cda:	4b24      	ldr	r3, [pc, #144]	@ (8008d6c <HAL_RCC_OscConfig+0x278>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ce0:	f7fc fd6e 	bl	80057c0 <HAL_GetTick>
 8008ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ce6:	e008      	b.n	8008cfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ce8:	f7fc fd6a 	bl	80057c0 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e193      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1f0      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d036      	beq.n	8008d80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d016      	beq.n	8008d48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d1a:	4b15      	ldr	r3, [pc, #84]	@ (8008d70 <HAL_RCC_OscConfig+0x27c>)
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d20:	f7fc fd4e 	bl	80057c0 <HAL_GetTick>
 8008d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d26:	e008      	b.n	8008d3a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d28:	f7fc fd4a 	bl	80057c0 <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d901      	bls.n	8008d3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e173      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d68 <HAL_RCC_OscConfig+0x274>)
 8008d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0f0      	beq.n	8008d28 <HAL_RCC_OscConfig+0x234>
 8008d46:	e01b      	b.n	8008d80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d48:	4b09      	ldr	r3, [pc, #36]	@ (8008d70 <HAL_RCC_OscConfig+0x27c>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d4e:	f7fc fd37 	bl	80057c0 <HAL_GetTick>
 8008d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d54:	e00e      	b.n	8008d74 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d56:	f7fc fd33 	bl	80057c0 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d907      	bls.n	8008d74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e15c      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
 8008d68:	40023800 	.word	0x40023800
 8008d6c:	42470000 	.word	0x42470000
 8008d70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d74:	4b8a      	ldr	r3, [pc, #552]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1ea      	bne.n	8008d56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 8097 	beq.w	8008ebc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d92:	4b83      	ldr	r3, [pc, #524]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10f      	bne.n	8008dbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60bb      	str	r3, [r7, #8]
 8008da2:	4b7f      	ldr	r3, [pc, #508]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da6:	4a7e      	ldr	r2, [pc, #504]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8008dae:	4b7c      	ldr	r3, [pc, #496]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008db6:	60bb      	str	r3, [r7, #8]
 8008db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dbe:	4b79      	ldr	r3, [pc, #484]	@ (8008fa4 <HAL_RCC_OscConfig+0x4b0>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d118      	bne.n	8008dfc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dca:	4b76      	ldr	r3, [pc, #472]	@ (8008fa4 <HAL_RCC_OscConfig+0x4b0>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a75      	ldr	r2, [pc, #468]	@ (8008fa4 <HAL_RCC_OscConfig+0x4b0>)
 8008dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dd6:	f7fc fcf3 	bl	80057c0 <HAL_GetTick>
 8008dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ddc:	e008      	b.n	8008df0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dde:	f7fc fcef 	bl	80057c0 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d901      	bls.n	8008df0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e118      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008df0:	4b6c      	ldr	r3, [pc, #432]	@ (8008fa4 <HAL_RCC_OscConfig+0x4b0>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0f0      	beq.n	8008dde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d106      	bne.n	8008e12 <HAL_RCC_OscConfig+0x31e>
 8008e04:	4b66      	ldr	r3, [pc, #408]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e08:	4a65      	ldr	r2, [pc, #404]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e10:	e01c      	b.n	8008e4c <HAL_RCC_OscConfig+0x358>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	2b05      	cmp	r3, #5
 8008e18:	d10c      	bne.n	8008e34 <HAL_RCC_OscConfig+0x340>
 8008e1a:	4b61      	ldr	r3, [pc, #388]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e1e:	4a60      	ldr	r2, [pc, #384]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008e20:	f043 0304 	orr.w	r3, r3, #4
 8008e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e26:	4b5e      	ldr	r3, [pc, #376]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e2a:	4a5d      	ldr	r2, [pc, #372]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008e2c:	f043 0301 	orr.w	r3, r3, #1
 8008e30:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e32:	e00b      	b.n	8008e4c <HAL_RCC_OscConfig+0x358>
 8008e34:	4b5a      	ldr	r3, [pc, #360]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e38:	4a59      	ldr	r2, [pc, #356]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008e3a:	f023 0301 	bic.w	r3, r3, #1
 8008e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e40:	4b57      	ldr	r3, [pc, #348]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e44:	4a56      	ldr	r2, [pc, #344]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008e46:	f023 0304 	bic.w	r3, r3, #4
 8008e4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d015      	beq.n	8008e80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e54:	f7fc fcb4 	bl	80057c0 <HAL_GetTick>
 8008e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e5a:	e00a      	b.n	8008e72 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e5c:	f7fc fcb0 	bl	80057c0 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d901      	bls.n	8008e72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e0d7      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e72:	4b4b      	ldr	r3, [pc, #300]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e76:	f003 0302 	and.w	r3, r3, #2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0ee      	beq.n	8008e5c <HAL_RCC_OscConfig+0x368>
 8008e7e:	e014      	b.n	8008eaa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e80:	f7fc fc9e 	bl	80057c0 <HAL_GetTick>
 8008e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e86:	e00a      	b.n	8008e9e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e88:	f7fc fc9a 	bl	80057c0 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d901      	bls.n	8008e9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e0c1      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e9e:	4b40      	ldr	r3, [pc, #256]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1ee      	bne.n	8008e88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d105      	bne.n	8008ebc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb4:	4a3a      	ldr	r2, [pc, #232]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008eba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 80ad 	beq.w	8009020 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ec6:	4b36      	ldr	r3, [pc, #216]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f003 030c 	and.w	r3, r3, #12
 8008ece:	2b08      	cmp	r3, #8
 8008ed0:	d060      	beq.n	8008f94 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d145      	bne.n	8008f66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eda:	4b33      	ldr	r3, [pc, #204]	@ (8008fa8 <HAL_RCC_OscConfig+0x4b4>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee0:	f7fc fc6e 	bl	80057c0 <HAL_GetTick>
 8008ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ee6:	e008      	b.n	8008efa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ee8:	f7fc fc6a 	bl	80057c0 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d901      	bls.n	8008efa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e093      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008efa:	4b29      	ldr	r3, [pc, #164]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1f0      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	69da      	ldr	r2, [r3, #28]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f14:	019b      	lsls	r3, r3, #6
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f1c:	085b      	lsrs	r3, r3, #1
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	041b      	lsls	r3, r3, #16
 8008f22:	431a      	orrs	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f28:	061b      	lsls	r3, r3, #24
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f30:	071b      	lsls	r3, r3, #28
 8008f32:	491b      	ldr	r1, [pc, #108]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f38:	4b1b      	ldr	r3, [pc, #108]	@ (8008fa8 <HAL_RCC_OscConfig+0x4b4>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f3e:	f7fc fc3f 	bl	80057c0 <HAL_GetTick>
 8008f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f44:	e008      	b.n	8008f58 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f46:	f7fc fc3b 	bl	80057c0 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d901      	bls.n	8008f58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e064      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f58:	4b11      	ldr	r3, [pc, #68]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d0f0      	beq.n	8008f46 <HAL_RCC_OscConfig+0x452>
 8008f64:	e05c      	b.n	8009020 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f66:	4b10      	ldr	r3, [pc, #64]	@ (8008fa8 <HAL_RCC_OscConfig+0x4b4>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f6c:	f7fc fc28 	bl	80057c0 <HAL_GetTick>
 8008f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f72:	e008      	b.n	8008f86 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f74:	f7fc fc24 	bl	80057c0 <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e04d      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f86:	4b06      	ldr	r3, [pc, #24]	@ (8008fa0 <HAL_RCC_OscConfig+0x4ac>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1f0      	bne.n	8008f74 <HAL_RCC_OscConfig+0x480>
 8008f92:	e045      	b.n	8009020 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d107      	bne.n	8008fac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e040      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
 8008fa0:	40023800 	.word	0x40023800
 8008fa4:	40007000 	.word	0x40007000
 8008fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fac:	4b1f      	ldr	r3, [pc, #124]	@ (800902c <HAL_RCC_OscConfig+0x538>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d030      	beq.n	800901c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d129      	bne.n	800901c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d122      	bne.n	800901c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008fdc:	4013      	ands	r3, r2
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d119      	bne.n	800901c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff2:	085b      	lsrs	r3, r3, #1
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d10f      	bne.n	800901c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009008:	429a      	cmp	r2, r3
 800900a:	d107      	bne.n	800901c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009016:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009018:	429a      	cmp	r2, r3
 800901a:	d001      	beq.n	8009020 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e000      	b.n	8009022 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	40023800 	.word	0x40023800

08009030 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e07b      	b.n	800913a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009046:	2b00      	cmp	r3, #0
 8009048:	d108      	bne.n	800905c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009052:	d009      	beq.n	8009068 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	61da      	str	r2, [r3, #28]
 800905a:	e005      	b.n	8009068 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d106      	bne.n	8009088 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7f8 fcac 	bl	80019e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800909e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80090b0:	431a      	orrs	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090ba:	431a      	orrs	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	f003 0302 	and.w	r3, r3, #2
 80090c4:	431a      	orrs	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	431a      	orrs	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090d8:	431a      	orrs	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090e2:	431a      	orrs	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ec:	ea42 0103 	orr.w	r1, r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	430a      	orrs	r2, r1
 80090fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	0c1b      	lsrs	r3, r3, #16
 8009106:	f003 0104 	and.w	r1, r3, #4
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800910e:	f003 0210 	and.w	r2, r3, #16
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	430a      	orrs	r2, r1
 8009118:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	69da      	ldr	r2, [r3, #28]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009128:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b088      	sub	sp, #32
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	603b      	str	r3, [r7, #0]
 800914e:	4613      	mov	r3, r2
 8009150:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009152:	f7fc fb35 	bl	80057c0 <HAL_GetTick>
 8009156:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009158:	88fb      	ldrh	r3, [r7, #6]
 800915a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b01      	cmp	r3, #1
 8009166:	d001      	beq.n	800916c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009168:	2302      	movs	r3, #2
 800916a:	e12a      	b.n	80093c2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <HAL_SPI_Transmit+0x36>
 8009172:	88fb      	ldrh	r3, [r7, #6]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e122      	b.n	80093c2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009182:	2b01      	cmp	r3, #1
 8009184:	d101      	bne.n	800918a <HAL_SPI_Transmit+0x48>
 8009186:	2302      	movs	r3, #2
 8009188:	e11b      	b.n	80093c2 <HAL_SPI_Transmit+0x280>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2203      	movs	r2, #3
 8009196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	88fa      	ldrh	r2, [r7, #6]
 80091aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	88fa      	ldrh	r2, [r7, #6]
 80091b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091d8:	d10f      	bne.n	80091fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009204:	2b40      	cmp	r3, #64	@ 0x40
 8009206:	d007      	beq.n	8009218 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009216:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009220:	d152      	bne.n	80092c8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <HAL_SPI_Transmit+0xee>
 800922a:	8b7b      	ldrh	r3, [r7, #26]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d145      	bne.n	80092bc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009234:	881a      	ldrh	r2, [r3, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009240:	1c9a      	adds	r2, r3, #2
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800924a:	b29b      	uxth	r3, r3
 800924c:	3b01      	subs	r3, #1
 800924e:	b29a      	uxth	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009254:	e032      	b.n	80092bc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b02      	cmp	r3, #2
 8009262:	d112      	bne.n	800928a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009268:	881a      	ldrh	r2, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009274:	1c9a      	adds	r2, r3, #2
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800927e:	b29b      	uxth	r3, r3
 8009280:	3b01      	subs	r3, #1
 8009282:	b29a      	uxth	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009288:	e018      	b.n	80092bc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800928a:	f7fc fa99 	bl	80057c0 <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	683a      	ldr	r2, [r7, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d803      	bhi.n	80092a2 <HAL_SPI_Transmit+0x160>
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092a0:	d102      	bne.n	80092a8 <HAL_SPI_Transmit+0x166>
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d109      	bne.n	80092bc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e082      	b.n	80093c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1c7      	bne.n	8009256 <HAL_SPI_Transmit+0x114>
 80092c6:	e053      	b.n	8009370 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <HAL_SPI_Transmit+0x194>
 80092d0:	8b7b      	ldrh	r3, [r7, #26]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d147      	bne.n	8009366 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	330c      	adds	r3, #12
 80092e0:	7812      	ldrb	r2, [r2, #0]
 80092e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e8:	1c5a      	adds	r2, r3, #1
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	3b01      	subs	r3, #1
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80092fc:	e033      	b.n	8009366 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f003 0302 	and.w	r3, r3, #2
 8009308:	2b02      	cmp	r3, #2
 800930a:	d113      	bne.n	8009334 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	330c      	adds	r3, #12
 8009316:	7812      	ldrb	r2, [r2, #0]
 8009318:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931e:	1c5a      	adds	r2, r3, #1
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009328:	b29b      	uxth	r3, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	b29a      	uxth	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009332:	e018      	b.n	8009366 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009334:	f7fc fa44 	bl	80057c0 <HAL_GetTick>
 8009338:	4602      	mov	r2, r0
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	429a      	cmp	r2, r3
 8009342:	d803      	bhi.n	800934c <HAL_SPI_Transmit+0x20a>
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800934a:	d102      	bne.n	8009352 <HAL_SPI_Transmit+0x210>
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d109      	bne.n	8009366 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e02d      	b.n	80093c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800936a:	b29b      	uxth	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1c6      	bne.n	80092fe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009370:	69fa      	ldr	r2, [r7, #28]
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 f8b1 	bl	80094dc <SPI_EndRxTxTransaction>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2220      	movs	r2, #32
 8009384:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10a      	bne.n	80093a4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800938e:	2300      	movs	r3, #0
 8009390:	617b      	str	r3, [r7, #20]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	617b      	str	r3, [r7, #20]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	617b      	str	r3, [r7, #20]
 80093a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	e000      	b.n	80093c2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80093c0:	2300      	movs	r3, #0
  }
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3720      	adds	r7, #32
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
	...

080093cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	4613      	mov	r3, r2
 80093da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80093dc:	f7fc f9f0 	bl	80057c0 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e4:	1a9b      	subs	r3, r3, r2
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	4413      	add	r3, r2
 80093ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80093ec:	f7fc f9e8 	bl	80057c0 <HAL_GetTick>
 80093f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80093f2:	4b39      	ldr	r3, [pc, #228]	@ (80094d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	015b      	lsls	r3, r3, #5
 80093f8:	0d1b      	lsrs	r3, r3, #20
 80093fa:	69fa      	ldr	r2, [r7, #28]
 80093fc:	fb02 f303 	mul.w	r3, r2, r3
 8009400:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009402:	e055      	b.n	80094b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800940a:	d051      	beq.n	80094b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800940c:	f7fc f9d8 	bl	80057c0 <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	429a      	cmp	r2, r3
 800941a:	d902      	bls.n	8009422 <SPI_WaitFlagStateUntilTimeout+0x56>
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d13d      	bne.n	800949e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009430:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800943a:	d111      	bne.n	8009460 <SPI_WaitFlagStateUntilTimeout+0x94>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009444:	d004      	beq.n	8009450 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800944e:	d107      	bne.n	8009460 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800945e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009468:	d10f      	bne.n	800948a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009478:	601a      	str	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009488:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	e018      	b.n	80094d0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d102      	bne.n	80094aa <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61fb      	str	r3, [r7, #28]
 80094a8:	e002      	b.n	80094b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	689a      	ldr	r2, [r3, #8]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	4013      	ands	r3, r2
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	429a      	cmp	r2, r3
 80094be:	bf0c      	ite	eq
 80094c0:	2301      	moveq	r3, #1
 80094c2:	2300      	movne	r3, #0
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	461a      	mov	r2, r3
 80094c8:	79fb      	ldrb	r3, [r7, #7]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d19a      	bne.n	8009404 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3720      	adds	r7, #32
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	20000004 	.word	0x20000004

080094dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b088      	sub	sp, #32
 80094e0:	af02      	add	r7, sp, #8
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	2201      	movs	r2, #1
 80094f0:	2102      	movs	r1, #2
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f7ff ff6a 	bl	80093cc <SPI_WaitFlagStateUntilTimeout>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d007      	beq.n	800950e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009502:	f043 0220 	orr.w	r2, r3, #32
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800950a:	2303      	movs	r3, #3
 800950c:	e032      	b.n	8009574 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800950e:	4b1b      	ldr	r3, [pc, #108]	@ (800957c <SPI_EndRxTxTransaction+0xa0>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a1b      	ldr	r2, [pc, #108]	@ (8009580 <SPI_EndRxTxTransaction+0xa4>)
 8009514:	fba2 2303 	umull	r2, r3, r2, r3
 8009518:	0d5b      	lsrs	r3, r3, #21
 800951a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800951e:	fb02 f303 	mul.w	r3, r2, r3
 8009522:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800952c:	d112      	bne.n	8009554 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	2200      	movs	r2, #0
 8009536:	2180      	movs	r1, #128	@ 0x80
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f7ff ff47 	bl	80093cc <SPI_WaitFlagStateUntilTimeout>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d016      	beq.n	8009572 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009548:	f043 0220 	orr.w	r2, r3, #32
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e00f      	b.n	8009574 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	3b01      	subs	r3, #1
 800955e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800956a:	2b80      	cmp	r3, #128	@ 0x80
 800956c:	d0f2      	beq.n	8009554 <SPI_EndRxTxTransaction+0x78>
 800956e:	e000      	b.n	8009572 <SPI_EndRxTxTransaction+0x96>
        break;
 8009570:	bf00      	nop
  }

  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20000004 	.word	0x20000004
 8009580:	165e9f81 	.word	0x165e9f81

08009584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e041      	b.n	800961a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d106      	bne.n	80095b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7f8 fee4 	bl	8002378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2202      	movs	r2, #2
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3304      	adds	r3, #4
 80095c0:	4619      	mov	r1, r3
 80095c2:	4610      	mov	r0, r2
 80095c4:	f001 f818 	bl	800a5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	d001      	beq.n	800963c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e046      	b.n	80096ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a23      	ldr	r2, [pc, #140]	@ (80096d8 <HAL_TIM_Base_Start+0xb4>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d022      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009656:	d01d      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a1f      	ldr	r2, [pc, #124]	@ (80096dc <HAL_TIM_Base_Start+0xb8>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d018      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a1e      	ldr	r2, [pc, #120]	@ (80096e0 <HAL_TIM_Base_Start+0xbc>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d013      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a1c      	ldr	r2, [pc, #112]	@ (80096e4 <HAL_TIM_Base_Start+0xc0>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d00e      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a1b      	ldr	r2, [pc, #108]	@ (80096e8 <HAL_TIM_Base_Start+0xc4>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d009      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a19      	ldr	r2, [pc, #100]	@ (80096ec <HAL_TIM_Base_Start+0xc8>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d004      	beq.n	8009694 <HAL_TIM_Base_Start+0x70>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a18      	ldr	r2, [pc, #96]	@ (80096f0 <HAL_TIM_Base_Start+0xcc>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d111      	bne.n	80096b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f003 0307 	and.w	r3, r3, #7
 800969e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b06      	cmp	r3, #6
 80096a4:	d010      	beq.n	80096c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f042 0201 	orr.w	r2, r2, #1
 80096b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096b6:	e007      	b.n	80096c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0201 	orr.w	r2, r2, #1
 80096c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	40010000 	.word	0x40010000
 80096dc:	40000400 	.word	0x40000400
 80096e0:	40000800 	.word	0x40000800
 80096e4:	40000c00 	.word	0x40000c00
 80096e8:	40010400 	.word	0x40010400
 80096ec:	40014000 	.word	0x40014000
 80096f0:	40001800 	.word	0x40001800

080096f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b01      	cmp	r3, #1
 8009706:	d001      	beq.n	800970c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e04e      	b.n	80097aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68da      	ldr	r2, [r3, #12]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f042 0201 	orr.w	r2, r2, #1
 8009722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a23      	ldr	r2, [pc, #140]	@ (80097b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d022      	beq.n	8009774 <HAL_TIM_Base_Start_IT+0x80>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009736:	d01d      	beq.n	8009774 <HAL_TIM_Base_Start_IT+0x80>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a1f      	ldr	r2, [pc, #124]	@ (80097bc <HAL_TIM_Base_Start_IT+0xc8>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d018      	beq.n	8009774 <HAL_TIM_Base_Start_IT+0x80>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a1e      	ldr	r2, [pc, #120]	@ (80097c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d013      	beq.n	8009774 <HAL_TIM_Base_Start_IT+0x80>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a1c      	ldr	r2, [pc, #112]	@ (80097c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d00e      	beq.n	8009774 <HAL_TIM_Base_Start_IT+0x80>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a1b      	ldr	r2, [pc, #108]	@ (80097c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d009      	beq.n	8009774 <HAL_TIM_Base_Start_IT+0x80>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a19      	ldr	r2, [pc, #100]	@ (80097cc <HAL_TIM_Base_Start_IT+0xd8>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d004      	beq.n	8009774 <HAL_TIM_Base_Start_IT+0x80>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a18      	ldr	r2, [pc, #96]	@ (80097d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d111      	bne.n	8009798 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f003 0307 	and.w	r3, r3, #7
 800977e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2b06      	cmp	r3, #6
 8009784:	d010      	beq.n	80097a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f042 0201 	orr.w	r2, r2, #1
 8009794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009796:	e007      	b.n	80097a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f042 0201 	orr.w	r2, r2, #1
 80097a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	40010000 	.word	0x40010000
 80097bc:	40000400 	.word	0x40000400
 80097c0:	40000800 	.word	0x40000800
 80097c4:	40000c00 	.word	0x40000c00
 80097c8:	40010400 	.word	0x40010400
 80097cc:	40014000 	.word	0x40014000
 80097d0:	40001800 	.word	0x40001800

080097d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e041      	b.n	800986a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d106      	bne.n	8009800 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7f8 fe8a 	bl	8002514 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3304      	adds	r3, #4
 8009810:	4619      	mov	r1, r3
 8009812:	4610      	mov	r0, r2
 8009814:	f000 fef0 	bl	800a5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d109      	bne.n	800989c <HAL_TIM_OC_Start_IT+0x28>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b01      	cmp	r3, #1
 8009892:	bf14      	ite	ne
 8009894:	2301      	movne	r3, #1
 8009896:	2300      	moveq	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	e022      	b.n	80098e2 <HAL_TIM_OC_Start_IT+0x6e>
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	2b04      	cmp	r3, #4
 80098a0:	d109      	bne.n	80098b6 <HAL_TIM_OC_Start_IT+0x42>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	bf14      	ite	ne
 80098ae:	2301      	movne	r3, #1
 80098b0:	2300      	moveq	r3, #0
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	e015      	b.n	80098e2 <HAL_TIM_OC_Start_IT+0x6e>
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	2b08      	cmp	r3, #8
 80098ba:	d109      	bne.n	80098d0 <HAL_TIM_OC_Start_IT+0x5c>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	bf14      	ite	ne
 80098c8:	2301      	movne	r3, #1
 80098ca:	2300      	moveq	r3, #0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	e008      	b.n	80098e2 <HAL_TIM_OC_Start_IT+0x6e>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b01      	cmp	r3, #1
 80098da:	bf14      	ite	ne
 80098dc:	2301      	movne	r3, #1
 80098de:	2300      	moveq	r3, #0
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e0c7      	b.n	8009a7a <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d104      	bne.n	80098fa <HAL_TIM_OC_Start_IT+0x86>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098f8:	e013      	b.n	8009922 <HAL_TIM_OC_Start_IT+0xae>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	d104      	bne.n	800990a <HAL_TIM_OC_Start_IT+0x96>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2202      	movs	r2, #2
 8009904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009908:	e00b      	b.n	8009922 <HAL_TIM_OC_Start_IT+0xae>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b08      	cmp	r3, #8
 800990e:	d104      	bne.n	800991a <HAL_TIM_OC_Start_IT+0xa6>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2202      	movs	r2, #2
 8009914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009918:	e003      	b.n	8009922 <HAL_TIM_OC_Start_IT+0xae>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2202      	movs	r2, #2
 800991e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b0c      	cmp	r3, #12
 8009926:	d841      	bhi.n	80099ac <HAL_TIM_OC_Start_IT+0x138>
 8009928:	a201      	add	r2, pc, #4	@ (adr r2, 8009930 <HAL_TIM_OC_Start_IT+0xbc>)
 800992a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992e:	bf00      	nop
 8009930:	08009965 	.word	0x08009965
 8009934:	080099ad 	.word	0x080099ad
 8009938:	080099ad 	.word	0x080099ad
 800993c:	080099ad 	.word	0x080099ad
 8009940:	08009977 	.word	0x08009977
 8009944:	080099ad 	.word	0x080099ad
 8009948:	080099ad 	.word	0x080099ad
 800994c:	080099ad 	.word	0x080099ad
 8009950:	08009989 	.word	0x08009989
 8009954:	080099ad 	.word	0x080099ad
 8009958:	080099ad 	.word	0x080099ad
 800995c:	080099ad 	.word	0x080099ad
 8009960:	0800999b 	.word	0x0800999b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68da      	ldr	r2, [r3, #12]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f042 0202 	orr.w	r2, r2, #2
 8009972:	60da      	str	r2, [r3, #12]
      break;
 8009974:	e01d      	b.n	80099b2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68da      	ldr	r2, [r3, #12]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f042 0204 	orr.w	r2, r2, #4
 8009984:	60da      	str	r2, [r3, #12]
      break;
 8009986:	e014      	b.n	80099b2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68da      	ldr	r2, [r3, #12]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f042 0208 	orr.w	r2, r2, #8
 8009996:	60da      	str	r2, [r3, #12]
      break;
 8009998:	e00b      	b.n	80099b2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68da      	ldr	r2, [r3, #12]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f042 0210 	orr.w	r2, r2, #16
 80099a8:	60da      	str	r2, [r3, #12]
      break;
 80099aa:	e002      	b.n	80099b2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	73fb      	strb	r3, [r7, #15]
      break;
 80099b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d15f      	bne.n	8009a78 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2201      	movs	r2, #1
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	4618      	mov	r0, r3
 80099c2:	f001 f99a 	bl	800acfa <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009a84 <HAL_TIM_OC_Start_IT+0x210>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d004      	beq.n	80099da <HAL_TIM_OC_Start_IT+0x166>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a2c      	ldr	r2, [pc, #176]	@ (8009a88 <HAL_TIM_OC_Start_IT+0x214>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d101      	bne.n	80099de <HAL_TIM_OC_Start_IT+0x16a>
 80099da:	2301      	movs	r3, #1
 80099dc:	e000      	b.n	80099e0 <HAL_TIM_OC_Start_IT+0x16c>
 80099de:	2300      	movs	r3, #0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d007      	beq.n	80099f4 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80099f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a22      	ldr	r2, [pc, #136]	@ (8009a84 <HAL_TIM_OC_Start_IT+0x210>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d022      	beq.n	8009a44 <HAL_TIM_OC_Start_IT+0x1d0>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a06:	d01d      	beq.n	8009a44 <HAL_TIM_OC_Start_IT+0x1d0>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8009a8c <HAL_TIM_OC_Start_IT+0x218>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d018      	beq.n	8009a44 <HAL_TIM_OC_Start_IT+0x1d0>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1e      	ldr	r2, [pc, #120]	@ (8009a90 <HAL_TIM_OC_Start_IT+0x21c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d013      	beq.n	8009a44 <HAL_TIM_OC_Start_IT+0x1d0>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1c      	ldr	r2, [pc, #112]	@ (8009a94 <HAL_TIM_OC_Start_IT+0x220>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d00e      	beq.n	8009a44 <HAL_TIM_OC_Start_IT+0x1d0>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a17      	ldr	r2, [pc, #92]	@ (8009a88 <HAL_TIM_OC_Start_IT+0x214>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d009      	beq.n	8009a44 <HAL_TIM_OC_Start_IT+0x1d0>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a18      	ldr	r2, [pc, #96]	@ (8009a98 <HAL_TIM_OC_Start_IT+0x224>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d004      	beq.n	8009a44 <HAL_TIM_OC_Start_IT+0x1d0>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a17      	ldr	r2, [pc, #92]	@ (8009a9c <HAL_TIM_OC_Start_IT+0x228>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d111      	bne.n	8009a68 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f003 0307 	and.w	r3, r3, #7
 8009a4e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b06      	cmp	r3, #6
 8009a54:	d010      	beq.n	8009a78 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f042 0201 	orr.w	r2, r2, #1
 8009a64:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a66:	e007      	b.n	8009a78 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f042 0201 	orr.w	r2, r2, #1
 8009a76:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	40010000 	.word	0x40010000
 8009a88:	40010400 	.word	0x40010400
 8009a8c:	40000400 	.word	0x40000400
 8009a90:	40000800 	.word	0x40000800
 8009a94:	40000c00 	.word	0x40000c00
 8009a98:	40014000 	.word	0x40014000
 8009a9c:	40001800 	.word	0x40001800

08009aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e041      	b.n	8009b36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d106      	bne.n	8009acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7f8 fcee 	bl	80024a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4619      	mov	r1, r3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f000 fd8a 	bl	800a5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d109      	bne.n	8009b64 <HAL_TIM_PWM_Start+0x24>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	bf14      	ite	ne
 8009b5c:	2301      	movne	r3, #1
 8009b5e:	2300      	moveq	r3, #0
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	e022      	b.n	8009baa <HAL_TIM_PWM_Start+0x6a>
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2b04      	cmp	r3, #4
 8009b68:	d109      	bne.n	8009b7e <HAL_TIM_PWM_Start+0x3e>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	bf14      	ite	ne
 8009b76:	2301      	movne	r3, #1
 8009b78:	2300      	moveq	r3, #0
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	e015      	b.n	8009baa <HAL_TIM_PWM_Start+0x6a>
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	d109      	bne.n	8009b98 <HAL_TIM_PWM_Start+0x58>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	bf14      	ite	ne
 8009b90:	2301      	movne	r3, #1
 8009b92:	2300      	moveq	r3, #0
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	e008      	b.n	8009baa <HAL_TIM_PWM_Start+0x6a>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	bf14      	ite	ne
 8009ba4:	2301      	movne	r3, #1
 8009ba6:	2300      	moveq	r3, #0
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e07c      	b.n	8009cac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d104      	bne.n	8009bc2 <HAL_TIM_PWM_Start+0x82>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bc0:	e013      	b.n	8009bea <HAL_TIM_PWM_Start+0xaa>
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2b04      	cmp	r3, #4
 8009bc6:	d104      	bne.n	8009bd2 <HAL_TIM_PWM_Start+0x92>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bd0:	e00b      	b.n	8009bea <HAL_TIM_PWM_Start+0xaa>
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d104      	bne.n	8009be2 <HAL_TIM_PWM_Start+0xa2>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009be0:	e003      	b.n	8009bea <HAL_TIM_PWM_Start+0xaa>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2202      	movs	r2, #2
 8009be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f001 f881 	bl	800acfa <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a2d      	ldr	r2, [pc, #180]	@ (8009cb4 <HAL_TIM_PWM_Start+0x174>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d004      	beq.n	8009c0c <HAL_TIM_PWM_Start+0xcc>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a2c      	ldr	r2, [pc, #176]	@ (8009cb8 <HAL_TIM_PWM_Start+0x178>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d101      	bne.n	8009c10 <HAL_TIM_PWM_Start+0xd0>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e000      	b.n	8009c12 <HAL_TIM_PWM_Start+0xd2>
 8009c10:	2300      	movs	r3, #0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d007      	beq.n	8009c26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a22      	ldr	r2, [pc, #136]	@ (8009cb4 <HAL_TIM_PWM_Start+0x174>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d022      	beq.n	8009c76 <HAL_TIM_PWM_Start+0x136>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c38:	d01d      	beq.n	8009c76 <HAL_TIM_PWM_Start+0x136>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8009cbc <HAL_TIM_PWM_Start+0x17c>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d018      	beq.n	8009c76 <HAL_TIM_PWM_Start+0x136>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a1d      	ldr	r2, [pc, #116]	@ (8009cc0 <HAL_TIM_PWM_Start+0x180>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d013      	beq.n	8009c76 <HAL_TIM_PWM_Start+0x136>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a1c      	ldr	r2, [pc, #112]	@ (8009cc4 <HAL_TIM_PWM_Start+0x184>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00e      	beq.n	8009c76 <HAL_TIM_PWM_Start+0x136>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a16      	ldr	r2, [pc, #88]	@ (8009cb8 <HAL_TIM_PWM_Start+0x178>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d009      	beq.n	8009c76 <HAL_TIM_PWM_Start+0x136>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a18      	ldr	r2, [pc, #96]	@ (8009cc8 <HAL_TIM_PWM_Start+0x188>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d004      	beq.n	8009c76 <HAL_TIM_PWM_Start+0x136>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a16      	ldr	r2, [pc, #88]	@ (8009ccc <HAL_TIM_PWM_Start+0x18c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d111      	bne.n	8009c9a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f003 0307 	and.w	r3, r3, #7
 8009c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b06      	cmp	r3, #6
 8009c86:	d010      	beq.n	8009caa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f042 0201 	orr.w	r2, r2, #1
 8009c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c98:	e007      	b.n	8009caa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f042 0201 	orr.w	r2, r2, #1
 8009ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	40010000 	.word	0x40010000
 8009cb8:	40010400 	.word	0x40010400
 8009cbc:	40000400 	.word	0x40000400
 8009cc0:	40000800 	.word	0x40000800
 8009cc4:	40000c00 	.word	0x40000c00
 8009cc8:	40014000 	.word	0x40014000
 8009ccc:	40001800 	.word	0x40001800

08009cd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d101      	bne.n	8009ce4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e097      	b.n	8009e14 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d106      	bne.n	8009cfe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f88f 	bl	8009e1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2202      	movs	r2, #2
 8009d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	6812      	ldr	r2, [r2, #0]
 8009d10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d14:	f023 0307 	bic.w	r3, r3, #7
 8009d18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	3304      	adds	r3, #4
 8009d22:	4619      	mov	r1, r3
 8009d24:	4610      	mov	r0, r2
 8009d26:	f000 fc67 	bl	800a5f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6a1b      	ldr	r3, [r3, #32]
 8009d40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d52:	f023 0303 	bic.w	r3, r3, #3
 8009d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	689a      	ldr	r2, [r3, #8]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	021b      	lsls	r3, r3, #8
 8009d62:	4313      	orrs	r3, r2
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009d70:	f023 030c 	bic.w	r3, r3, #12
 8009d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	68da      	ldr	r2, [r3, #12]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	69db      	ldr	r3, [r3, #28]
 8009d8a:	021b      	lsls	r3, r3, #8
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	011a      	lsls	r2, r3, #4
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	031b      	lsls	r3, r3, #12
 8009da0:	4313      	orrs	r3, r2
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009dae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009db6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	011b      	lsls	r3, r3, #4
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2201      	movs	r2, #1
 8009de6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009e40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009e48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009e58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d110      	bne.n	8009e82 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d102      	bne.n	8009e6c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e66:	7b7b      	ldrb	r3, [r7, #13]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d001      	beq.n	8009e70 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e089      	b.n	8009f84 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2202      	movs	r2, #2
 8009e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e80:	e031      	b.n	8009ee6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	2b04      	cmp	r3, #4
 8009e86:	d110      	bne.n	8009eaa <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d102      	bne.n	8009e94 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e8e:	7b3b      	ldrb	r3, [r7, #12]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d001      	beq.n	8009e98 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e075      	b.n	8009f84 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2202      	movs	r2, #2
 8009e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2202      	movs	r2, #2
 8009ea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009ea8:	e01d      	b.n	8009ee6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d108      	bne.n	8009ec2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009eb0:	7bbb      	ldrb	r3, [r7, #14]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d105      	bne.n	8009ec2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009eb6:	7b7b      	ldrb	r3, [r7, #13]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d102      	bne.n	8009ec2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ebc:	7b3b      	ldrb	r3, [r7, #12]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d001      	beq.n	8009ec6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e05e      	b.n	8009f84 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2202      	movs	r2, #2
 8009eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2202      	movs	r2, #2
 8009ed2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2202      	movs	r2, #2
 8009eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d003      	beq.n	8009ef4 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d010      	beq.n	8009f14 <HAL_TIM_Encoder_Start_IT+0xe4>
 8009ef2:	e01f      	b.n	8009f34 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	2100      	movs	r1, #0
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 fefc 	bl	800acfa <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68da      	ldr	r2, [r3, #12]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f042 0202 	orr.w	r2, r2, #2
 8009f10:	60da      	str	r2, [r3, #12]
      break;
 8009f12:	e02e      	b.n	8009f72 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	2104      	movs	r1, #4
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f000 feec 	bl	800acfa <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68da      	ldr	r2, [r3, #12]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f042 0204 	orr.w	r2, r2, #4
 8009f30:	60da      	str	r2, [r3, #12]
      break;
 8009f32:	e01e      	b.n	8009f72 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 fedc 	bl	800acfa <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2201      	movs	r2, #1
 8009f48:	2104      	movs	r1, #4
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f000 fed5 	bl	800acfa <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f042 0202 	orr.w	r2, r2, #2
 8009f5e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68da      	ldr	r2, [r3, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f042 0204 	orr.w	r2, r2, #4
 8009f6e:	60da      	str	r2, [r3, #12]
      break;
 8009f70:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f042 0201 	orr.w	r2, r2, #1
 8009f80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f003 0302 	and.w	r3, r3, #2
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d020      	beq.n	8009ff0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d01b      	beq.n	8009ff0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f06f 0202 	mvn.w	r2, #2
 8009fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	f003 0303 	and.w	r3, r3, #3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 faef 	bl	800a5ba <HAL_TIM_IC_CaptureCallback>
 8009fdc:	e005      	b.n	8009fea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7f7 fc32 	bl	8001848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 faf2 	bl	800a5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	f003 0304 	and.w	r3, r3, #4
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d020      	beq.n	800a03c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	2b00      	cmp	r3, #0
 800a002:	d01b      	beq.n	800a03c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f06f 0204 	mvn.w	r2, #4
 800a00c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2202      	movs	r2, #2
 800a012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d003      	beq.n	800a02a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fac9 	bl	800a5ba <HAL_TIM_IC_CaptureCallback>
 800a028:	e005      	b.n	800a036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7f7 fc0c 	bl	8001848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 facc 	bl	800a5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	f003 0308 	and.w	r3, r3, #8
 800a042:	2b00      	cmp	r3, #0
 800a044:	d020      	beq.n	800a088 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f003 0308 	and.w	r3, r3, #8
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d01b      	beq.n	800a088 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f06f 0208 	mvn.w	r2, #8
 800a058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2204      	movs	r2, #4
 800a05e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d003      	beq.n	800a076 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 faa3 	bl	800a5ba <HAL_TIM_IC_CaptureCallback>
 800a074:	e005      	b.n	800a082 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7f7 fbe6 	bl	8001848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 faa6 	bl	800a5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	f003 0310 	and.w	r3, r3, #16
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d020      	beq.n	800a0d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f003 0310 	and.w	r3, r3, #16
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d01b      	beq.n	800a0d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f06f 0210 	mvn.w	r2, #16
 800a0a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2208      	movs	r2, #8
 800a0aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fa7d 	bl	800a5ba <HAL_TIM_IC_CaptureCallback>
 800a0c0:	e005      	b.n	800a0ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7f7 fbc0 	bl	8001848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fa80 	bl	800a5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	f003 0301 	and.w	r3, r3, #1
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00c      	beq.n	800a0f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f003 0301 	and.w	r3, r3, #1
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d007      	beq.n	800a0f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f06f 0201 	mvn.w	r2, #1
 800a0f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7f7 fb60 	bl	80017b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00c      	beq.n	800a11c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d007      	beq.n	800a11c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fe9a 	bl	800ae50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00c      	beq.n	800a140 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d007      	beq.n	800a140 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fa51 	bl	800a5e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00c      	beq.n	800a164 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f003 0320 	and.w	r3, r3, #32
 800a150:	2b00      	cmp	r3, #0
 800a152:	d007      	beq.n	800a164 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f06f 0220 	mvn.w	r2, #32
 800a15c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fe6c 	bl	800ae3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a164:	bf00      	nop
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a182:	2b01      	cmp	r3, #1
 800a184:	d101      	bne.n	800a18a <HAL_TIM_OC_ConfigChannel+0x1e>
 800a186:	2302      	movs	r3, #2
 800a188:	e048      	b.n	800a21c <HAL_TIM_OC_ConfigChannel+0xb0>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b0c      	cmp	r3, #12
 800a196:	d839      	bhi.n	800a20c <HAL_TIM_OC_ConfigChannel+0xa0>
 800a198:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19e:	bf00      	nop
 800a1a0:	0800a1d5 	.word	0x0800a1d5
 800a1a4:	0800a20d 	.word	0x0800a20d
 800a1a8:	0800a20d 	.word	0x0800a20d
 800a1ac:	0800a20d 	.word	0x0800a20d
 800a1b0:	0800a1e3 	.word	0x0800a1e3
 800a1b4:	0800a20d 	.word	0x0800a20d
 800a1b8:	0800a20d 	.word	0x0800a20d
 800a1bc:	0800a20d 	.word	0x0800a20d
 800a1c0:	0800a1f1 	.word	0x0800a1f1
 800a1c4:	0800a20d 	.word	0x0800a20d
 800a1c8:	0800a20d 	.word	0x0800a20d
 800a1cc:	0800a20d 	.word	0x0800a20d
 800a1d0:	0800a1ff 	.word	0x0800a1ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68b9      	ldr	r1, [r7, #8]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f000 fab2 	bl	800a744 <TIM_OC1_SetConfig>
      break;
 800a1e0:	e017      	b.n	800a212 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68b9      	ldr	r1, [r7, #8]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 fb1b 	bl	800a824 <TIM_OC2_SetConfig>
      break;
 800a1ee:	e010      	b.n	800a212 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68b9      	ldr	r1, [r7, #8]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 fb8a 	bl	800a910 <TIM_OC3_SetConfig>
      break;
 800a1fc:	e009      	b.n	800a212 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68b9      	ldr	r1, [r7, #8]
 800a204:	4618      	mov	r0, r3
 800a206:	f000 fbf7 	bl	800a9f8 <TIM_OC4_SetConfig>
      break;
 800a20a:	e002      	b.n	800a212 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	75fb      	strb	r3, [r7, #23]
      break;
 800a210:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a21a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3718      	adds	r7, #24
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d101      	bne.n	800a242 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a23e:	2302      	movs	r3, #2
 800a240:	e0ae      	b.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b0c      	cmp	r3, #12
 800a24e:	f200 809f 	bhi.w	800a390 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a252:	a201      	add	r2, pc, #4	@ (adr r2, 800a258 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a258:	0800a28d 	.word	0x0800a28d
 800a25c:	0800a391 	.word	0x0800a391
 800a260:	0800a391 	.word	0x0800a391
 800a264:	0800a391 	.word	0x0800a391
 800a268:	0800a2cd 	.word	0x0800a2cd
 800a26c:	0800a391 	.word	0x0800a391
 800a270:	0800a391 	.word	0x0800a391
 800a274:	0800a391 	.word	0x0800a391
 800a278:	0800a30f 	.word	0x0800a30f
 800a27c:	0800a391 	.word	0x0800a391
 800a280:	0800a391 	.word	0x0800a391
 800a284:	0800a391 	.word	0x0800a391
 800a288:	0800a34f 	.word	0x0800a34f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68b9      	ldr	r1, [r7, #8]
 800a292:	4618      	mov	r0, r3
 800a294:	f000 fa56 	bl	800a744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	699a      	ldr	r2, [r3, #24]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f042 0208 	orr.w	r2, r2, #8
 800a2a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	699a      	ldr	r2, [r3, #24]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f022 0204 	bic.w	r2, r2, #4
 800a2b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6999      	ldr	r1, [r3, #24]
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	691a      	ldr	r2, [r3, #16]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	619a      	str	r2, [r3, #24]
      break;
 800a2ca:	e064      	b.n	800a396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68b9      	ldr	r1, [r7, #8]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f000 faa6 	bl	800a824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	699a      	ldr	r2, [r3, #24]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	699a      	ldr	r2, [r3, #24]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6999      	ldr	r1, [r3, #24]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	021a      	lsls	r2, r3, #8
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	430a      	orrs	r2, r1
 800a30a:	619a      	str	r2, [r3, #24]
      break;
 800a30c:	e043      	b.n	800a396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68b9      	ldr	r1, [r7, #8]
 800a314:	4618      	mov	r0, r3
 800a316:	f000 fafb 	bl	800a910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	69da      	ldr	r2, [r3, #28]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f042 0208 	orr.w	r2, r2, #8
 800a328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	69da      	ldr	r2, [r3, #28]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0204 	bic.w	r2, r2, #4
 800a338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	69d9      	ldr	r1, [r3, #28]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	691a      	ldr	r2, [r3, #16]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	430a      	orrs	r2, r1
 800a34a:	61da      	str	r2, [r3, #28]
      break;
 800a34c:	e023      	b.n	800a396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68b9      	ldr	r1, [r7, #8]
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fb4f 	bl	800a9f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	69da      	ldr	r2, [r3, #28]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	69da      	ldr	r2, [r3, #28]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	69d9      	ldr	r1, [r3, #28]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	021a      	lsls	r2, r3, #8
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	430a      	orrs	r2, r1
 800a38c:	61da      	str	r2, [r3, #28]
      break;
 800a38e:	e002      	b.n	800a396 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	75fb      	strb	r3, [r7, #23]
      break;
 800a394:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d101      	bne.n	800a3c4 <HAL_TIM_ConfigClockSource+0x1c>
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	e0b4      	b.n	800a52e <HAL_TIM_ConfigClockSource+0x186>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a3e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a3ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3fc:	d03e      	beq.n	800a47c <HAL_TIM_ConfigClockSource+0xd4>
 800a3fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a402:	f200 8087 	bhi.w	800a514 <HAL_TIM_ConfigClockSource+0x16c>
 800a406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a40a:	f000 8086 	beq.w	800a51a <HAL_TIM_ConfigClockSource+0x172>
 800a40e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a412:	d87f      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x16c>
 800a414:	2b70      	cmp	r3, #112	@ 0x70
 800a416:	d01a      	beq.n	800a44e <HAL_TIM_ConfigClockSource+0xa6>
 800a418:	2b70      	cmp	r3, #112	@ 0x70
 800a41a:	d87b      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x16c>
 800a41c:	2b60      	cmp	r3, #96	@ 0x60
 800a41e:	d050      	beq.n	800a4c2 <HAL_TIM_ConfigClockSource+0x11a>
 800a420:	2b60      	cmp	r3, #96	@ 0x60
 800a422:	d877      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x16c>
 800a424:	2b50      	cmp	r3, #80	@ 0x50
 800a426:	d03c      	beq.n	800a4a2 <HAL_TIM_ConfigClockSource+0xfa>
 800a428:	2b50      	cmp	r3, #80	@ 0x50
 800a42a:	d873      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x16c>
 800a42c:	2b40      	cmp	r3, #64	@ 0x40
 800a42e:	d058      	beq.n	800a4e2 <HAL_TIM_ConfigClockSource+0x13a>
 800a430:	2b40      	cmp	r3, #64	@ 0x40
 800a432:	d86f      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x16c>
 800a434:	2b30      	cmp	r3, #48	@ 0x30
 800a436:	d064      	beq.n	800a502 <HAL_TIM_ConfigClockSource+0x15a>
 800a438:	2b30      	cmp	r3, #48	@ 0x30
 800a43a:	d86b      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x16c>
 800a43c:	2b20      	cmp	r3, #32
 800a43e:	d060      	beq.n	800a502 <HAL_TIM_ConfigClockSource+0x15a>
 800a440:	2b20      	cmp	r3, #32
 800a442:	d867      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x16c>
 800a444:	2b00      	cmp	r3, #0
 800a446:	d05c      	beq.n	800a502 <HAL_TIM_ConfigClockSource+0x15a>
 800a448:	2b10      	cmp	r3, #16
 800a44a:	d05a      	beq.n	800a502 <HAL_TIM_ConfigClockSource+0x15a>
 800a44c:	e062      	b.n	800a514 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a45e:	f000 fc2c 	bl	800acba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a470:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	609a      	str	r2, [r3, #8]
      break;
 800a47a:	e04f      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a48c:	f000 fc15 	bl	800acba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689a      	ldr	r2, [r3, #8]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a49e:	609a      	str	r2, [r3, #8]
      break;
 800a4a0:	e03c      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f000 fb89 	bl	800abc6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2150      	movs	r1, #80	@ 0x50
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fbe2 	bl	800ac84 <TIM_ITRx_SetConfig>
      break;
 800a4c0:	e02c      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f000 fba8 	bl	800ac24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2160      	movs	r1, #96	@ 0x60
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fbd2 	bl	800ac84 <TIM_ITRx_SetConfig>
      break;
 800a4e0:	e01c      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f000 fb69 	bl	800abc6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2140      	movs	r1, #64	@ 0x40
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 fbc2 	bl	800ac84 <TIM_ITRx_SetConfig>
      break;
 800a500:	e00c      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4619      	mov	r1, r3
 800a50c:	4610      	mov	r0, r2
 800a50e:	f000 fbb9 	bl	800ac84 <TIM_ITRx_SetConfig>
      break;
 800a512:	e003      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	73fb      	strb	r3, [r7, #15]
      break;
 800a518:	e000      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a51a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b082      	sub	sp, #8
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a546:	2b01      	cmp	r3, #1
 800a548:	d101      	bne.n	800a54e <HAL_TIM_SlaveConfigSynchro+0x18>
 800a54a:	2302      	movs	r3, #2
 800a54c:	e031      	b.n	800a5b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2202      	movs	r2, #2
 800a55a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fa9f 	bl	800aaa4 <TIM_SlaveTimer_SetConfig>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d009      	beq.n	800a580 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	e018      	b.n	800a5b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68da      	ldr	r2, [r3, #12]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a58e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68da      	ldr	r2, [r3, #12]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a59e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5c2:	bf00      	nop
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b083      	sub	sp, #12
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5d6:	bf00      	nop
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5ea:	bf00      	nop
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a43      	ldr	r2, [pc, #268]	@ (800a718 <TIM_Base_SetConfig+0x120>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d013      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a616:	d00f      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a40      	ldr	r2, [pc, #256]	@ (800a71c <TIM_Base_SetConfig+0x124>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d00b      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a3f      	ldr	r2, [pc, #252]	@ (800a720 <TIM_Base_SetConfig+0x128>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d007      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a3e      	ldr	r2, [pc, #248]	@ (800a724 <TIM_Base_SetConfig+0x12c>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d003      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a3d      	ldr	r2, [pc, #244]	@ (800a728 <TIM_Base_SetConfig+0x130>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d108      	bne.n	800a64a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a63e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	4313      	orrs	r3, r2
 800a648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a32      	ldr	r2, [pc, #200]	@ (800a718 <TIM_Base_SetConfig+0x120>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d02b      	beq.n	800a6aa <TIM_Base_SetConfig+0xb2>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a658:	d027      	beq.n	800a6aa <TIM_Base_SetConfig+0xb2>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a2f      	ldr	r2, [pc, #188]	@ (800a71c <TIM_Base_SetConfig+0x124>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d023      	beq.n	800a6aa <TIM_Base_SetConfig+0xb2>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a2e      	ldr	r2, [pc, #184]	@ (800a720 <TIM_Base_SetConfig+0x128>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d01f      	beq.n	800a6aa <TIM_Base_SetConfig+0xb2>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a2d      	ldr	r2, [pc, #180]	@ (800a724 <TIM_Base_SetConfig+0x12c>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d01b      	beq.n	800a6aa <TIM_Base_SetConfig+0xb2>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a2c      	ldr	r2, [pc, #176]	@ (800a728 <TIM_Base_SetConfig+0x130>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d017      	beq.n	800a6aa <TIM_Base_SetConfig+0xb2>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a2b      	ldr	r2, [pc, #172]	@ (800a72c <TIM_Base_SetConfig+0x134>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d013      	beq.n	800a6aa <TIM_Base_SetConfig+0xb2>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a2a      	ldr	r2, [pc, #168]	@ (800a730 <TIM_Base_SetConfig+0x138>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d00f      	beq.n	800a6aa <TIM_Base_SetConfig+0xb2>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a29      	ldr	r2, [pc, #164]	@ (800a734 <TIM_Base_SetConfig+0x13c>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d00b      	beq.n	800a6aa <TIM_Base_SetConfig+0xb2>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a28      	ldr	r2, [pc, #160]	@ (800a738 <TIM_Base_SetConfig+0x140>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d007      	beq.n	800a6aa <TIM_Base_SetConfig+0xb2>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a27      	ldr	r2, [pc, #156]	@ (800a73c <TIM_Base_SetConfig+0x144>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d003      	beq.n	800a6aa <TIM_Base_SetConfig+0xb2>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a26      	ldr	r2, [pc, #152]	@ (800a740 <TIM_Base_SetConfig+0x148>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d108      	bne.n	800a6bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	689a      	ldr	r2, [r3, #8]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a0e      	ldr	r2, [pc, #56]	@ (800a718 <TIM_Base_SetConfig+0x120>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d003      	beq.n	800a6ea <TIM_Base_SetConfig+0xf2>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a10      	ldr	r2, [pc, #64]	@ (800a728 <TIM_Base_SetConfig+0x130>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d103      	bne.n	800a6f2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	691a      	ldr	r2, [r3, #16]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f043 0204 	orr.w	r2, r3, #4
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	601a      	str	r2, [r3, #0]
}
 800a70a:	bf00      	nop
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	40010000 	.word	0x40010000
 800a71c:	40000400 	.word	0x40000400
 800a720:	40000800 	.word	0x40000800
 800a724:	40000c00 	.word	0x40000c00
 800a728:	40010400 	.word	0x40010400
 800a72c:	40014000 	.word	0x40014000
 800a730:	40014400 	.word	0x40014400
 800a734:	40014800 	.word	0x40014800
 800a738:	40001800 	.word	0x40001800
 800a73c:	40001c00 	.word	0x40001c00
 800a740:	40002000 	.word	0x40002000

0800a744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a744:	b480      	push	{r7}
 800a746:	b087      	sub	sp, #28
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a1b      	ldr	r3, [r3, #32]
 800a752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a1b      	ldr	r3, [r3, #32]
 800a758:	f023 0201 	bic.w	r2, r3, #1
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f023 0303 	bic.w	r3, r3, #3
 800a77a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	4313      	orrs	r3, r2
 800a784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f023 0302 	bic.w	r3, r3, #2
 800a78c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	4313      	orrs	r3, r2
 800a796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a20      	ldr	r2, [pc, #128]	@ (800a81c <TIM_OC1_SetConfig+0xd8>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d003      	beq.n	800a7a8 <TIM_OC1_SetConfig+0x64>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a1f      	ldr	r2, [pc, #124]	@ (800a820 <TIM_OC1_SetConfig+0xdc>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d10c      	bne.n	800a7c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	f023 0308 	bic.w	r3, r3, #8
 800a7ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	f023 0304 	bic.w	r3, r3, #4
 800a7c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a15      	ldr	r2, [pc, #84]	@ (800a81c <TIM_OC1_SetConfig+0xd8>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d003      	beq.n	800a7d2 <TIM_OC1_SetConfig+0x8e>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a14      	ldr	r2, [pc, #80]	@ (800a820 <TIM_OC1_SetConfig+0xdc>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d111      	bne.n	800a7f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a7e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	693a      	ldr	r2, [r7, #16]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	699b      	ldr	r3, [r3, #24]
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	693a      	ldr	r2, [r7, #16]
 800a7fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	685a      	ldr	r2, [r3, #4]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	697a      	ldr	r2, [r7, #20]
 800a80e:	621a      	str	r2, [r3, #32]
}
 800a810:	bf00      	nop
 800a812:	371c      	adds	r7, #28
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	40010000 	.word	0x40010000
 800a820:	40010400 	.word	0x40010400

0800a824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a1b      	ldr	r3, [r3, #32]
 800a838:	f023 0210 	bic.w	r2, r3, #16
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a85a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	021b      	lsls	r3, r3, #8
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	4313      	orrs	r3, r2
 800a866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	f023 0320 	bic.w	r3, r3, #32
 800a86e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	011b      	lsls	r3, r3, #4
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	4313      	orrs	r3, r2
 800a87a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a22      	ldr	r2, [pc, #136]	@ (800a908 <TIM_OC2_SetConfig+0xe4>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d003      	beq.n	800a88c <TIM_OC2_SetConfig+0x68>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a21      	ldr	r2, [pc, #132]	@ (800a90c <TIM_OC2_SetConfig+0xe8>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d10d      	bne.n	800a8a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	011b      	lsls	r3, r3, #4
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a17      	ldr	r2, [pc, #92]	@ (800a908 <TIM_OC2_SetConfig+0xe4>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d003      	beq.n	800a8b8 <TIM_OC2_SetConfig+0x94>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a16      	ldr	r2, [pc, #88]	@ (800a90c <TIM_OC2_SetConfig+0xe8>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d113      	bne.n	800a8e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	693a      	ldr	r2, [r7, #16]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	693a      	ldr	r2, [r7, #16]
 800a8e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	621a      	str	r2, [r3, #32]
}
 800a8fa:	bf00      	nop
 800a8fc:	371c      	adds	r7, #28
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	40010000 	.word	0x40010000
 800a90c:	40010400 	.word	0x40010400

0800a910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a1b      	ldr	r3, [r3, #32]
 800a924:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a93e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f023 0303 	bic.w	r3, r3, #3
 800a946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	021b      	lsls	r3, r3, #8
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	4313      	orrs	r3, r2
 800a964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a21      	ldr	r2, [pc, #132]	@ (800a9f0 <TIM_OC3_SetConfig+0xe0>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d003      	beq.n	800a976 <TIM_OC3_SetConfig+0x66>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a20      	ldr	r2, [pc, #128]	@ (800a9f4 <TIM_OC3_SetConfig+0xe4>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d10d      	bne.n	800a992 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a97c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	021b      	lsls	r3, r3, #8
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	4313      	orrs	r3, r2
 800a988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a16      	ldr	r2, [pc, #88]	@ (800a9f0 <TIM_OC3_SetConfig+0xe0>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d003      	beq.n	800a9a2 <TIM_OC3_SetConfig+0x92>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4a15      	ldr	r2, [pc, #84]	@ (800a9f4 <TIM_OC3_SetConfig+0xe4>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d113      	bne.n	800a9ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a9b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	011b      	lsls	r3, r3, #4
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	011b      	lsls	r3, r3, #4
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	685a      	ldr	r2, [r3, #4]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	621a      	str	r2, [r3, #32]
}
 800a9e4:	bf00      	nop
 800a9e6:	371c      	adds	r7, #28
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr
 800a9f0:	40010000 	.word	0x40010000
 800a9f4:	40010400 	.word	0x40010400

0800a9f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a1b      	ldr	r3, [r3, #32]
 800aa06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	69db      	ldr	r3, [r3, #28]
 800aa1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	021b      	lsls	r3, r3, #8
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	031b      	lsls	r3, r3, #12
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a12      	ldr	r2, [pc, #72]	@ (800aa9c <TIM_OC4_SetConfig+0xa4>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d003      	beq.n	800aa60 <TIM_OC4_SetConfig+0x68>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a11      	ldr	r2, [pc, #68]	@ (800aaa0 <TIM_OC4_SetConfig+0xa8>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d109      	bne.n	800aa74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	019b      	lsls	r3, r3, #6
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	685a      	ldr	r2, [r3, #4]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	621a      	str	r2, [r3, #32]
}
 800aa8e:	bf00      	nop
 800aa90:	371c      	adds	r7, #28
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	40010000 	.word	0x40010000
 800aaa0:	40010400 	.word	0x40010400

0800aaa4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaae:	2300      	movs	r3, #0
 800aab0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aac0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	f023 0307 	bic.w	r3, r3, #7
 800aad2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	4313      	orrs	r3, r2
 800aadc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	693a      	ldr	r2, [r7, #16]
 800aae4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	2b70      	cmp	r3, #112	@ 0x70
 800aaec:	d01a      	beq.n	800ab24 <TIM_SlaveTimer_SetConfig+0x80>
 800aaee:	2b70      	cmp	r3, #112	@ 0x70
 800aaf0:	d860      	bhi.n	800abb4 <TIM_SlaveTimer_SetConfig+0x110>
 800aaf2:	2b60      	cmp	r3, #96	@ 0x60
 800aaf4:	d054      	beq.n	800aba0 <TIM_SlaveTimer_SetConfig+0xfc>
 800aaf6:	2b60      	cmp	r3, #96	@ 0x60
 800aaf8:	d85c      	bhi.n	800abb4 <TIM_SlaveTimer_SetConfig+0x110>
 800aafa:	2b50      	cmp	r3, #80	@ 0x50
 800aafc:	d046      	beq.n	800ab8c <TIM_SlaveTimer_SetConfig+0xe8>
 800aafe:	2b50      	cmp	r3, #80	@ 0x50
 800ab00:	d858      	bhi.n	800abb4 <TIM_SlaveTimer_SetConfig+0x110>
 800ab02:	2b40      	cmp	r3, #64	@ 0x40
 800ab04:	d019      	beq.n	800ab3a <TIM_SlaveTimer_SetConfig+0x96>
 800ab06:	2b40      	cmp	r3, #64	@ 0x40
 800ab08:	d854      	bhi.n	800abb4 <TIM_SlaveTimer_SetConfig+0x110>
 800ab0a:	2b30      	cmp	r3, #48	@ 0x30
 800ab0c:	d055      	beq.n	800abba <TIM_SlaveTimer_SetConfig+0x116>
 800ab0e:	2b30      	cmp	r3, #48	@ 0x30
 800ab10:	d850      	bhi.n	800abb4 <TIM_SlaveTimer_SetConfig+0x110>
 800ab12:	2b20      	cmp	r3, #32
 800ab14:	d051      	beq.n	800abba <TIM_SlaveTimer_SetConfig+0x116>
 800ab16:	2b20      	cmp	r3, #32
 800ab18:	d84c      	bhi.n	800abb4 <TIM_SlaveTimer_SetConfig+0x110>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d04d      	beq.n	800abba <TIM_SlaveTimer_SetConfig+0x116>
 800ab1e:	2b10      	cmp	r3, #16
 800ab20:	d04b      	beq.n	800abba <TIM_SlaveTimer_SetConfig+0x116>
 800ab22:	e047      	b.n	800abb4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800ab34:	f000 f8c1 	bl	800acba <TIM_ETR_SetConfig>
      break;
 800ab38:	e040      	b.n	800abbc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b05      	cmp	r3, #5
 800ab40:	d101      	bne.n	800ab46 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e03b      	b.n	800abbe <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6a1a      	ldr	r2, [r3, #32]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f022 0201 	bic.w	r2, r2, #1
 800ab5c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab6c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	011b      	lsls	r3, r3, #4
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	621a      	str	r2, [r3, #32]
      break;
 800ab8a:	e017      	b.n	800abbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab98:	461a      	mov	r2, r3
 800ab9a:	f000 f814 	bl	800abc6 <TIM_TI1_ConfigInputStage>
      break;
 800ab9e:	e00d      	b.n	800abbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800abac:	461a      	mov	r2, r3
 800abae:	f000 f839 	bl	800ac24 <TIM_TI2_ConfigInputStage>
      break;
 800abb2:	e003      	b.n	800abbc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	75fb      	strb	r3, [r7, #23]
      break;
 800abb8:	e000      	b.n	800abbc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800abba:	bf00      	nop
  }

  return status;
 800abbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3718      	adds	r7, #24
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b087      	sub	sp, #28
 800abca:	af00      	add	r7, sp, #0
 800abcc:	60f8      	str	r0, [r7, #12]
 800abce:	60b9      	str	r1, [r7, #8]
 800abd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6a1b      	ldr	r3, [r3, #32]
 800abdc:	f023 0201 	bic.w	r2, r3, #1
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800abf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	011b      	lsls	r3, r3, #4
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	f023 030a 	bic.w	r3, r3, #10
 800ac02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	693a      	ldr	r2, [r7, #16]
 800ac10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	621a      	str	r2, [r3, #32]
}
 800ac18:	bf00      	nop
 800ac1a:	371c      	adds	r7, #28
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b087      	sub	sp, #28
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	f023 0210 	bic.w	r2, r3, #16
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	031b      	lsls	r3, r3, #12
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	011b      	lsls	r3, r3, #4
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	697a      	ldr	r2, [r7, #20]
 800ac76:	621a      	str	r2, [r3, #32]
}
 800ac78:	bf00      	nop
 800ac7a:	371c      	adds	r7, #28
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	f043 0307 	orr.w	r3, r3, #7
 800aca6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	609a      	str	r2, [r3, #8]
}
 800acae:	bf00      	nop
 800acb0:	3714      	adds	r7, #20
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acba:	b480      	push	{r7}
 800acbc:	b087      	sub	sp, #28
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	60f8      	str	r0, [r7, #12]
 800acc2:	60b9      	str	r1, [r7, #8]
 800acc4:	607a      	str	r2, [r7, #4]
 800acc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800acd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	021a      	lsls	r2, r3, #8
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	431a      	orrs	r2, r3
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	609a      	str	r2, [r3, #8]
}
 800acee:	bf00      	nop
 800acf0:	371c      	adds	r7, #28
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800acfa:	b480      	push	{r7}
 800acfc:	b087      	sub	sp, #28
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	60f8      	str	r0, [r7, #12]
 800ad02:	60b9      	str	r1, [r7, #8]
 800ad04:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	f003 031f 	and.w	r3, r3, #31
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad12:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6a1a      	ldr	r2, [r3, #32]
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	43db      	mvns	r3, r3
 800ad1c:	401a      	ands	r2, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6a1a      	ldr	r2, [r3, #32]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	f003 031f 	and.w	r3, r3, #31
 800ad2c:	6879      	ldr	r1, [r7, #4]
 800ad2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad32:	431a      	orrs	r2, r3
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	621a      	str	r2, [r3, #32]
}
 800ad38:	bf00      	nop
 800ad3a:	371c      	adds	r7, #28
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d101      	bne.n	800ad5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad58:	2302      	movs	r3, #2
 800ad5a:	e05a      	b.n	800ae12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2202      	movs	r2, #2
 800ad68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a21      	ldr	r2, [pc, #132]	@ (800ae20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d022      	beq.n	800ade6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ada8:	d01d      	beq.n	800ade6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a1d      	ldr	r2, [pc, #116]	@ (800ae24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d018      	beq.n	800ade6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a1b      	ldr	r2, [pc, #108]	@ (800ae28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d013      	beq.n	800ade6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a1a      	ldr	r2, [pc, #104]	@ (800ae2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d00e      	beq.n	800ade6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a18      	ldr	r2, [pc, #96]	@ (800ae30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d009      	beq.n	800ade6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a17      	ldr	r2, [pc, #92]	@ (800ae34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d004      	beq.n	800ade6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a15      	ldr	r2, [pc, #84]	@ (800ae38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d10c      	bne.n	800ae00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	40010000 	.word	0x40010000
 800ae24:	40000400 	.word	0x40000400
 800ae28:	40000800 	.word	0x40000800
 800ae2c:	40000c00 	.word	0x40000c00
 800ae30:	40010400 	.word	0x40010400
 800ae34:	40014000 	.word	0x40014000
 800ae38:	40001800 	.word	0x40001800

0800ae3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae44:	bf00      	nop
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e042      	b.n	800aefc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d106      	bne.n	800ae90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7f7 fc82 	bl	8002794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2224      	movs	r2, #36	@ 0x24
 800ae94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fe8b 	bl	800bbc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	691a      	ldr	r2, [r3, #16]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	695a      	ldr	r2, [r3, #20]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68da      	ldr	r2, [r3, #12]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aedc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2220      	movs	r2, #32
 800aee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2220      	movs	r2, #32
 800aef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	4613      	mov	r3, r2
 800af10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b20      	cmp	r3, #32
 800af1c:	d112      	bne.n	800af44 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d002      	beq.n	800af2a <HAL_UART_Receive_DMA+0x26>
 800af24:	88fb      	ldrh	r3, [r7, #6]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e00b      	b.n	800af46 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2200      	movs	r2, #0
 800af32:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800af34:	88fb      	ldrh	r3, [r7, #6]
 800af36:	461a      	mov	r2, r3
 800af38:	68b9      	ldr	r1, [r7, #8]
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f000 fbda 	bl	800b6f4 <UART_Start_Receive_DMA>
 800af40:	4603      	mov	r3, r0
 800af42:	e000      	b.n	800af46 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800af44:	2302      	movs	r3, #2
  }
}
 800af46:	4618      	mov	r0, r3
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
	...

0800af50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b0ba      	sub	sp, #232	@ 0xe8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800af76:	2300      	movs	r3, #0
 800af78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800af7c:	2300      	movs	r3, #0
 800af7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800af82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af86:	f003 030f 	and.w	r3, r3, #15
 800af8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800af8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10f      	bne.n	800afb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af9a:	f003 0320 	and.w	r3, r3, #32
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d009      	beq.n	800afb6 <HAL_UART_IRQHandler+0x66>
 800afa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afa6:	f003 0320 	and.w	r3, r3, #32
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d003      	beq.n	800afb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fd4a 	bl	800ba48 <UART_Receive_IT>
      return;
 800afb4:	e273      	b.n	800b49e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800afb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 80de 	beq.w	800b17c <HAL_UART_IRQHandler+0x22c>
 800afc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800afc4:	f003 0301 	and.w	r3, r3, #1
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d106      	bne.n	800afda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800afcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f000 80d1 	beq.w	800b17c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800afda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afde:	f003 0301 	and.w	r3, r3, #1
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00b      	beq.n	800affe <HAL_UART_IRQHandler+0xae>
 800afe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d005      	beq.n	800affe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aff6:	f043 0201 	orr.w	r2, r3, #1
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800affe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b002:	f003 0304 	and.w	r3, r3, #4
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00b      	beq.n	800b022 <HAL_UART_IRQHandler+0xd2>
 800b00a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	2b00      	cmp	r3, #0
 800b014:	d005      	beq.n	800b022 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b01a:	f043 0202 	orr.w	r2, r3, #2
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b026:	f003 0302 	and.w	r3, r3, #2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00b      	beq.n	800b046 <HAL_UART_IRQHandler+0xf6>
 800b02e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	2b00      	cmp	r3, #0
 800b038:	d005      	beq.n	800b046 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b03e:	f043 0204 	orr.w	r2, r3, #4
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b04a:	f003 0308 	and.w	r3, r3, #8
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d011      	beq.n	800b076 <HAL_UART_IRQHandler+0x126>
 800b052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b056:	f003 0320 	and.w	r3, r3, #32
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d105      	bne.n	800b06a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b05e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b062:	f003 0301 	and.w	r3, r3, #1
 800b066:	2b00      	cmp	r3, #0
 800b068:	d005      	beq.n	800b076 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b06e:	f043 0208 	orr.w	r2, r3, #8
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f000 820a 	beq.w	800b494 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b084:	f003 0320 	and.w	r3, r3, #32
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d008      	beq.n	800b09e <HAL_UART_IRQHandler+0x14e>
 800b08c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b090:	f003 0320 	and.w	r3, r3, #32
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 fcd5 	bl	800ba48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	695b      	ldr	r3, [r3, #20]
 800b0a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0a8:	2b40      	cmp	r3, #64	@ 0x40
 800b0aa:	bf0c      	ite	eq
 800b0ac:	2301      	moveq	r3, #1
 800b0ae:	2300      	movne	r3, #0
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ba:	f003 0308 	and.w	r3, r3, #8
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d103      	bne.n	800b0ca <HAL_UART_IRQHandler+0x17a>
 800b0c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d04f      	beq.n	800b16a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fbe0 	bl	800b890 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0da:	2b40      	cmp	r3, #64	@ 0x40
 800b0dc:	d141      	bne.n	800b162 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	3314      	adds	r3, #20
 800b0e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b0ec:	e853 3f00 	ldrex	r3, [r3]
 800b0f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b0f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b0f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	3314      	adds	r3, #20
 800b106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b10a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b10e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b11a:	e841 2300 	strex	r3, r2, [r1]
 800b11e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1d9      	bne.n	800b0de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d013      	beq.n	800b15a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b136:	4a8a      	ldr	r2, [pc, #552]	@ (800b360 <HAL_UART_IRQHandler+0x410>)
 800b138:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fb fa06 	bl	8006550 <HAL_DMA_Abort_IT>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d016      	beq.n	800b178 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b14e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b154:	4610      	mov	r0, r2
 800b156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b158:	e00e      	b.n	800b178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f9b6 	bl	800b4cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b160:	e00a      	b.n	800b178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f9b2 	bl	800b4cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b168:	e006      	b.n	800b178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f9ae 	bl	800b4cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b176:	e18d      	b.n	800b494 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b178:	bf00      	nop
    return;
 800b17a:	e18b      	b.n	800b494 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b180:	2b01      	cmp	r3, #1
 800b182:	f040 8167 	bne.w	800b454 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b18a:	f003 0310 	and.w	r3, r3, #16
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f000 8160 	beq.w	800b454 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b198:	f003 0310 	and.w	r3, r3, #16
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f000 8159 	beq.w	800b454 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60bb      	str	r3, [r7, #8]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	60bb      	str	r3, [r7, #8]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	60bb      	str	r3, [r7, #8]
 800b1b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1c2:	2b40      	cmp	r3, #64	@ 0x40
 800b1c4:	f040 80ce 	bne.w	800b364 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b1d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f000 80a9 	beq.w	800b330 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b1e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	f080 80a2 	bcs.w	800b330 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b1f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1fe:	f000 8088 	beq.w	800b312 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	330c      	adds	r3, #12
 800b208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b210:	e853 3f00 	ldrex	r3, [r3]
 800b214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b218:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b21c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	330c      	adds	r3, #12
 800b22a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b22e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b236:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b23a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b23e:	e841 2300 	strex	r3, r2, [r1]
 800b242:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1d9      	bne.n	800b202 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3314      	adds	r3, #20
 800b254:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b256:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b258:	e853 3f00 	ldrex	r3, [r3]
 800b25c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b25e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b260:	f023 0301 	bic.w	r3, r3, #1
 800b264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3314      	adds	r3, #20
 800b26e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b272:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b276:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b278:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b27a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b27e:	e841 2300 	strex	r3, r2, [r1]
 800b282:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1e1      	bne.n	800b24e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	3314      	adds	r3, #20
 800b290:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b292:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b294:	e853 3f00 	ldrex	r3, [r3]
 800b298:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b29a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b29c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	3314      	adds	r3, #20
 800b2aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b2ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b2b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b2b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b2b6:	e841 2300 	strex	r3, r2, [r1]
 800b2ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b2bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1e3      	bne.n	800b28a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	330c      	adds	r3, #12
 800b2d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2da:	e853 3f00 	ldrex	r3, [r3]
 800b2de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b2e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2e2:	f023 0310 	bic.w	r3, r3, #16
 800b2e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	330c      	adds	r3, #12
 800b2f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b2f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b2f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b2fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b2fc:	e841 2300 	strex	r3, r2, [r1]
 800b300:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e3      	bne.n	800b2d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fb f8af 	bl	8006470 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2202      	movs	r2, #2
 800b316:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b320:	b29b      	uxth	r3, r3
 800b322:	1ad3      	subs	r3, r2, r3
 800b324:	b29b      	uxth	r3, r3
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f8d9 	bl	800b4e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b32e:	e0b3      	b.n	800b498 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b334:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b338:	429a      	cmp	r2, r3
 800b33a:	f040 80ad 	bne.w	800b498 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b342:	69db      	ldr	r3, [r3, #28]
 800b344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b348:	f040 80a6 	bne.w	800b498 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2202      	movs	r2, #2
 800b350:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f8c1 	bl	800b4e0 <HAL_UARTEx_RxEventCallback>
      return;
 800b35e:	e09b      	b.n	800b498 <HAL_UART_IRQHandler+0x548>
 800b360:	0800b957 	.word	0x0800b957
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b378:	b29b      	uxth	r3, r3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f000 808e 	beq.w	800b49c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b384:	2b00      	cmp	r3, #0
 800b386:	f000 8089 	beq.w	800b49c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	330c      	adds	r3, #12
 800b390:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b39a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b39c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	330c      	adds	r3, #12
 800b3aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b3ae:	647a      	str	r2, [r7, #68]	@ 0x44
 800b3b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b3b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b3b6:	e841 2300 	strex	r3, r2, [r1]
 800b3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b3bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1e3      	bne.n	800b38a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3314      	adds	r3, #20
 800b3c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3cc:	e853 3f00 	ldrex	r3, [r3]
 800b3d0:	623b      	str	r3, [r7, #32]
   return(result);
 800b3d2:	6a3b      	ldr	r3, [r7, #32]
 800b3d4:	f023 0301 	bic.w	r3, r3, #1
 800b3d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	3314      	adds	r3, #20
 800b3e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b3e6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3ee:	e841 2300 	strex	r3, r2, [r1]
 800b3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1e3      	bne.n	800b3c2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2220      	movs	r2, #32
 800b3fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	330c      	adds	r3, #12
 800b40e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	e853 3f00 	ldrex	r3, [r3]
 800b416:	60fb      	str	r3, [r7, #12]
   return(result);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f023 0310 	bic.w	r3, r3, #16
 800b41e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	330c      	adds	r3, #12
 800b428:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b42c:	61fa      	str	r2, [r7, #28]
 800b42e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b430:	69b9      	ldr	r1, [r7, #24]
 800b432:	69fa      	ldr	r2, [r7, #28]
 800b434:	e841 2300 	strex	r3, r2, [r1]
 800b438:	617b      	str	r3, [r7, #20]
   return(result);
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1e3      	bne.n	800b408 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2202      	movs	r2, #2
 800b444:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b446:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f847 	bl	800b4e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b452:	e023      	b.n	800b49c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d009      	beq.n	800b474 <HAL_UART_IRQHandler+0x524>
 800b460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d003      	beq.n	800b474 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fa83 	bl	800b978 <UART_Transmit_IT>
    return;
 800b472:	e014      	b.n	800b49e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00e      	beq.n	800b49e <HAL_UART_IRQHandler+0x54e>
 800b480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d008      	beq.n	800b49e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 fac3 	bl	800ba18 <UART_EndTransmit_IT>
    return;
 800b492:	e004      	b.n	800b49e <HAL_UART_IRQHandler+0x54e>
    return;
 800b494:	bf00      	nop
 800b496:	e002      	b.n	800b49e <HAL_UART_IRQHandler+0x54e>
      return;
 800b498:	bf00      	nop
 800b49a:	e000      	b.n	800b49e <HAL_UART_IRQHandler+0x54e>
      return;
 800b49c:	bf00      	nop
  }
}
 800b49e:	37e8      	adds	r7, #232	@ 0xe8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b09c      	sub	sp, #112	@ 0x70
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b504:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b510:	2b00      	cmp	r3, #0
 800b512:	d172      	bne.n	800b5fa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b516:	2200      	movs	r2, #0
 800b518:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b51a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	330c      	adds	r3, #12
 800b520:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b524:	e853 3f00 	ldrex	r3, [r3]
 800b528:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b52a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b52c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b530:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	330c      	adds	r3, #12
 800b538:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b53a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b53c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b540:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b542:	e841 2300 	strex	r3, r2, [r1]
 800b546:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1e5      	bne.n	800b51a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b54e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3314      	adds	r3, #20
 800b554:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b558:	e853 3f00 	ldrex	r3, [r3]
 800b55c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b560:	f023 0301 	bic.w	r3, r3, #1
 800b564:	667b      	str	r3, [r7, #100]	@ 0x64
 800b566:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3314      	adds	r3, #20
 800b56c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b56e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b570:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b572:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b574:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b576:	e841 2300 	strex	r3, r2, [r1]
 800b57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1e5      	bne.n	800b54e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	3314      	adds	r3, #20
 800b588:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	623b      	str	r3, [r7, #32]
   return(result);
 800b592:	6a3b      	ldr	r3, [r7, #32]
 800b594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b598:	663b      	str	r3, [r7, #96]	@ 0x60
 800b59a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3314      	adds	r3, #20
 800b5a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b5a2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b5a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5aa:	e841 2300 	strex	r3, r2, [r1]
 800b5ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1e5      	bne.n	800b582 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b5b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5b8:	2220      	movs	r2, #32
 800b5ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d119      	bne.n	800b5fa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	330c      	adds	r3, #12
 800b5cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	e853 3f00 	ldrex	r3, [r3]
 800b5d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f023 0310 	bic.w	r3, r3, #16
 800b5dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b5de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	330c      	adds	r3, #12
 800b5e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b5e6:	61fa      	str	r2, [r7, #28]
 800b5e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ea:	69b9      	ldr	r1, [r7, #24]
 800b5ec:	69fa      	ldr	r2, [r7, #28]
 800b5ee:	e841 2300 	strex	r3, r2, [r1]
 800b5f2:	617b      	str	r3, [r7, #20]
   return(result);
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1e5      	bne.n	800b5c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b604:	2b01      	cmp	r3, #1
 800b606:	d106      	bne.n	800b616 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b60a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b60c:	4619      	mov	r1, r3
 800b60e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b610:	f7ff ff66 	bl	800b4e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b614:	e002      	b.n	800b61c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b616:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b618:	f7f6 f97a 	bl	8001910 <HAL_UART_RxCpltCallback>
}
 800b61c:	bf00      	nop
 800b61e:	3770      	adds	r7, #112	@ 0x70
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b630:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2201      	movs	r2, #1
 800b636:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d108      	bne.n	800b652 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b644:	085b      	lsrs	r3, r3, #1
 800b646:	b29b      	uxth	r3, r3
 800b648:	4619      	mov	r1, r3
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f7ff ff48 	bl	800b4e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b650:	e002      	b.n	800b658 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f7ff ff30 	bl	800b4b8 <HAL_UART_RxHalfCpltCallback>
}
 800b658:	bf00      	nop
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b668:	2300      	movs	r3, #0
 800b66a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b670:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	695b      	ldr	r3, [r3, #20]
 800b678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b67c:	2b80      	cmp	r3, #128	@ 0x80
 800b67e:	bf0c      	ite	eq
 800b680:	2301      	moveq	r3, #1
 800b682:	2300      	movne	r3, #0
 800b684:	b2db      	uxtb	r3, r3
 800b686:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	2b21      	cmp	r3, #33	@ 0x21
 800b692:	d108      	bne.n	800b6a6 <UART_DMAError+0x46>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d005      	beq.n	800b6a6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2200      	movs	r2, #0
 800b69e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b6a0:	68b8      	ldr	r0, [r7, #8]
 800b6a2:	f000 f8cd 	bl	800b840 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	695b      	ldr	r3, [r3, #20]
 800b6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6b0:	2b40      	cmp	r3, #64	@ 0x40
 800b6b2:	bf0c      	ite	eq
 800b6b4:	2301      	moveq	r3, #1
 800b6b6:	2300      	movne	r3, #0
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b22      	cmp	r3, #34	@ 0x22
 800b6c6:	d108      	bne.n	800b6da <UART_DMAError+0x7a>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d005      	beq.n	800b6da <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800b6d4:	68b8      	ldr	r0, [r7, #8]
 800b6d6:	f000 f8db 	bl	800b890 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6de:	f043 0210 	orr.w	r2, r3, #16
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6e6:	68b8      	ldr	r0, [r7, #8]
 800b6e8:	f7ff fef0 	bl	800b4cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6ec:	bf00      	nop
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b098      	sub	sp, #96	@ 0x60
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	4613      	mov	r3, r2
 800b700:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	88fa      	ldrh	r2, [r7, #6]
 800b70c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2222      	movs	r2, #34	@ 0x22
 800b718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b720:	4a44      	ldr	r2, [pc, #272]	@ (800b834 <UART_Start_Receive_DMA+0x140>)
 800b722:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b728:	4a43      	ldr	r2, [pc, #268]	@ (800b838 <UART_Start_Receive_DMA+0x144>)
 800b72a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b730:	4a42      	ldr	r2, [pc, #264]	@ (800b83c <UART_Start_Receive_DMA+0x148>)
 800b732:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b738:	2200      	movs	r2, #0
 800b73a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b73c:	f107 0308 	add.w	r3, r7, #8
 800b740:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	3304      	adds	r3, #4
 800b74c:	4619      	mov	r1, r3
 800b74e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	88fb      	ldrh	r3, [r7, #6]
 800b754:	f7fa fe34 	bl	80063c0 <HAL_DMA_Start_IT>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d008      	beq.n	800b770 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2210      	movs	r2, #16
 800b762:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2220      	movs	r2, #32
 800b768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e05d      	b.n	800b82c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b770:	2300      	movs	r3, #0
 800b772:	613b      	str	r3, [r7, #16]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	613b      	str	r3, [r7, #16]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	613b      	str	r3, [r7, #16]
 800b784:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d019      	beq.n	800b7c2 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	330c      	adds	r3, #12
 800b794:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b798:	e853 3f00 	ldrex	r3, [r3]
 800b79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b79e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	330c      	adds	r3, #12
 800b7ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b7b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b7b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b7b6:	e841 2300 	strex	r3, r2, [r1]
 800b7ba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b7bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d1e5      	bne.n	800b78e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	3314      	adds	r3, #20
 800b7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7cc:	e853 3f00 	ldrex	r3, [r3]
 800b7d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d4:	f043 0301 	orr.w	r3, r3, #1
 800b7d8:	657b      	str	r3, [r7, #84]	@ 0x54
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	3314      	adds	r3, #20
 800b7e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b7e2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b7e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b7e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7ea:	e841 2300 	strex	r3, r2, [r1]
 800b7ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1e5      	bne.n	800b7c2 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	3314      	adds	r3, #20
 800b7fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	e853 3f00 	ldrex	r3, [r3]
 800b804:	617b      	str	r3, [r7, #20]
   return(result);
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b80c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3314      	adds	r3, #20
 800b814:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b816:	627a      	str	r2, [r7, #36]	@ 0x24
 800b818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81a:	6a39      	ldr	r1, [r7, #32]
 800b81c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b81e:	e841 2300 	strex	r3, r2, [r1]
 800b822:	61fb      	str	r3, [r7, #28]
   return(result);
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d1e5      	bne.n	800b7f6 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3760      	adds	r7, #96	@ 0x60
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	0800b4f9 	.word	0x0800b4f9
 800b838:	0800b625 	.word	0x0800b625
 800b83c:	0800b661 	.word	0x0800b661

0800b840 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b840:	b480      	push	{r7}
 800b842:	b089      	sub	sp, #36	@ 0x24
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	330c      	adds	r3, #12
 800b84e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	e853 3f00 	ldrex	r3, [r3]
 800b856:	60bb      	str	r3, [r7, #8]
   return(result);
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b85e:	61fb      	str	r3, [r7, #28]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	330c      	adds	r3, #12
 800b866:	69fa      	ldr	r2, [r7, #28]
 800b868:	61ba      	str	r2, [r7, #24]
 800b86a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86c:	6979      	ldr	r1, [r7, #20]
 800b86e:	69ba      	ldr	r2, [r7, #24]
 800b870:	e841 2300 	strex	r3, r2, [r1]
 800b874:	613b      	str	r3, [r7, #16]
   return(result);
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1e5      	bne.n	800b848 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2220      	movs	r2, #32
 800b880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800b884:	bf00      	nop
 800b886:	3724      	adds	r7, #36	@ 0x24
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b890:	b480      	push	{r7}
 800b892:	b095      	sub	sp, #84	@ 0x54
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	330c      	adds	r3, #12
 800b89e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8a2:	e853 3f00 	ldrex	r3, [r3]
 800b8a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	330c      	adds	r3, #12
 800b8b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b8b8:	643a      	str	r2, [r7, #64]	@ 0x40
 800b8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b8be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b8c0:	e841 2300 	strex	r3, r2, [r1]
 800b8c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1e5      	bne.n	800b898 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3314      	adds	r3, #20
 800b8d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d4:	6a3b      	ldr	r3, [r7, #32]
 800b8d6:	e853 3f00 	ldrex	r3, [r3]
 800b8da:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	f023 0301 	bic.w	r3, r3, #1
 800b8e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3314      	adds	r3, #20
 800b8ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8f4:	e841 2300 	strex	r3, r2, [r1]
 800b8f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1e5      	bne.n	800b8cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b904:	2b01      	cmp	r3, #1
 800b906:	d119      	bne.n	800b93c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	330c      	adds	r3, #12
 800b90e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	e853 3f00 	ldrex	r3, [r3]
 800b916:	60bb      	str	r3, [r7, #8]
   return(result);
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	f023 0310 	bic.w	r3, r3, #16
 800b91e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	330c      	adds	r3, #12
 800b926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b928:	61ba      	str	r2, [r7, #24]
 800b92a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92c:	6979      	ldr	r1, [r7, #20]
 800b92e:	69ba      	ldr	r2, [r7, #24]
 800b930:	e841 2300 	strex	r3, r2, [r1]
 800b934:	613b      	str	r3, [r7, #16]
   return(result);
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1e5      	bne.n	800b908 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2220      	movs	r2, #32
 800b940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b94a:	bf00      	nop
 800b94c:	3754      	adds	r7, #84	@ 0x54
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b084      	sub	sp, #16
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b962:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2200      	movs	r2, #0
 800b968:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f7ff fdae 	bl	800b4cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b970:	bf00      	nop
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b986:	b2db      	uxtb	r3, r3
 800b988:	2b21      	cmp	r3, #33	@ 0x21
 800b98a:	d13e      	bne.n	800ba0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b994:	d114      	bne.n	800b9c0 <UART_Transmit_IT+0x48>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d110      	bne.n	800b9c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	881b      	ldrh	r3, [r3, #0]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a1b      	ldr	r3, [r3, #32]
 800b9b8:	1c9a      	adds	r2, r3, #2
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	621a      	str	r2, [r3, #32]
 800b9be:	e008      	b.n	800b9d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6a1b      	ldr	r3, [r3, #32]
 800b9c4:	1c59      	adds	r1, r3, #1
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	6211      	str	r1, [r2, #32]
 800b9ca:	781a      	ldrb	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10f      	bne.n	800ba06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68da      	ldr	r2, [r3, #12]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b9f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68da      	ldr	r2, [r3, #12]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	e000      	b.n	800ba0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ba0a:	2302      	movs	r3, #2
  }
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3714      	adds	r7, #20
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	68da      	ldr	r2, [r3, #12]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ba2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2220      	movs	r2, #32
 800ba34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f7ff fd33 	bl	800b4a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b08c      	sub	sp, #48	@ 0x30
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800ba50:	2300      	movs	r3, #0
 800ba52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800ba54:	2300      	movs	r3, #0
 800ba56:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	2b22      	cmp	r3, #34	@ 0x22
 800ba62:	f040 80aa 	bne.w	800bbba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba6e:	d115      	bne.n	800ba9c <UART_Receive_IT+0x54>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d111      	bne.n	800ba9c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba94:	1c9a      	adds	r2, r3, #2
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	629a      	str	r2, [r3, #40]	@ 0x28
 800ba9a:	e024      	b.n	800bae6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800baaa:	d007      	beq.n	800babc <UART_Receive_IT+0x74>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10a      	bne.n	800baca <UART_Receive_IT+0x82>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	691b      	ldr	r3, [r3, #16]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d106      	bne.n	800baca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac6:	701a      	strb	r2, [r3, #0]
 800bac8:	e008      	b.n	800badc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bada:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800baea:	b29b      	uxth	r3, r3
 800baec:	3b01      	subs	r3, #1
 800baee:	b29b      	uxth	r3, r3
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	4619      	mov	r1, r3
 800baf4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d15d      	bne.n	800bbb6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68da      	ldr	r2, [r3, #12]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f022 0220 	bic.w	r2, r2, #32
 800bb08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68da      	ldr	r2, [r3, #12]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	695a      	ldr	r2, [r3, #20]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f022 0201 	bic.w	r2, r2, #1
 800bb28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2220      	movs	r2, #32
 800bb2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d135      	bne.n	800bbac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	330c      	adds	r3, #12
 800bb4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	e853 3f00 	ldrex	r3, [r3]
 800bb54:	613b      	str	r3, [r7, #16]
   return(result);
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	f023 0310 	bic.w	r3, r3, #16
 800bb5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	330c      	adds	r3, #12
 800bb64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb66:	623a      	str	r2, [r7, #32]
 800bb68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6a:	69f9      	ldr	r1, [r7, #28]
 800bb6c:	6a3a      	ldr	r2, [r7, #32]
 800bb6e:	e841 2300 	strex	r3, r2, [r1]
 800bb72:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1e5      	bne.n	800bb46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 0310 	and.w	r3, r3, #16
 800bb84:	2b10      	cmp	r3, #16
 800bb86:	d10a      	bne.n	800bb9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb88:	2300      	movs	r3, #0
 800bb8a:	60fb      	str	r3, [r7, #12]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	60fb      	str	r3, [r7, #12]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	60fb      	str	r3, [r7, #12]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bba2:	4619      	mov	r1, r3
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f7ff fc9b 	bl	800b4e0 <HAL_UARTEx_RxEventCallback>
 800bbaa:	e002      	b.n	800bbb2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7f5 feaf 	bl	8001910 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	e002      	b.n	800bbbc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	e000      	b.n	800bbbc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bbba:	2302      	movs	r3, #2
  }
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3730      	adds	r7, #48	@ 0x30
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbc8:	b0c0      	sub	sp, #256	@ 0x100
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	691b      	ldr	r3, [r3, #16]
 800bbd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bbdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbe0:	68d9      	ldr	r1, [r3, #12]
 800bbe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	ea40 0301 	orr.w	r3, r0, r1
 800bbec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bbee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbf2:	689a      	ldr	r2, [r3, #8]
 800bbf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	431a      	orrs	r2, r3
 800bbfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	431a      	orrs	r2, r3
 800bc04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc08:	69db      	ldr	r3, [r3, #28]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bc10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bc1c:	f021 010c 	bic.w	r1, r1, #12
 800bc20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bc2a:	430b      	orrs	r3, r1
 800bc2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	695b      	ldr	r3, [r3, #20]
 800bc36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bc3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc3e:	6999      	ldr	r1, [r3, #24]
 800bc40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	ea40 0301 	orr.w	r3, r0, r1
 800bc4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bc4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	4b8f      	ldr	r3, [pc, #572]	@ (800be90 <UART_SetConfig+0x2cc>)
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d005      	beq.n	800bc64 <UART_SetConfig+0xa0>
 800bc58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	4b8d      	ldr	r3, [pc, #564]	@ (800be94 <UART_SetConfig+0x2d0>)
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d104      	bne.n	800bc6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bc64:	f7fc fd02 	bl	800866c <HAL_RCC_GetPCLK2Freq>
 800bc68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bc6c:	e003      	b.n	800bc76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc6e:	f7fc fce9 	bl	8008644 <HAL_RCC_GetPCLK1Freq>
 800bc72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc7a:	69db      	ldr	r3, [r3, #28]
 800bc7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc80:	f040 810c 	bne.w	800be9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bc84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bc8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bc92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bc96:	4622      	mov	r2, r4
 800bc98:	462b      	mov	r3, r5
 800bc9a:	1891      	adds	r1, r2, r2
 800bc9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bc9e:	415b      	adcs	r3, r3
 800bca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bca6:	4621      	mov	r1, r4
 800bca8:	eb12 0801 	adds.w	r8, r2, r1
 800bcac:	4629      	mov	r1, r5
 800bcae:	eb43 0901 	adc.w	r9, r3, r1
 800bcb2:	f04f 0200 	mov.w	r2, #0
 800bcb6:	f04f 0300 	mov.w	r3, #0
 800bcba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bcbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bcc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bcc6:	4690      	mov	r8, r2
 800bcc8:	4699      	mov	r9, r3
 800bcca:	4623      	mov	r3, r4
 800bccc:	eb18 0303 	adds.w	r3, r8, r3
 800bcd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bcd4:	462b      	mov	r3, r5
 800bcd6:	eb49 0303 	adc.w	r3, r9, r3
 800bcda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bcde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bcea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bcee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	18db      	adds	r3, r3, r3
 800bcf6:	653b      	str	r3, [r7, #80]	@ 0x50
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	eb42 0303 	adc.w	r3, r2, r3
 800bcfe:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bd04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bd08:	f7f4 ffee 	bl	8000ce8 <__aeabi_uldivmod>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4b61      	ldr	r3, [pc, #388]	@ (800be98 <UART_SetConfig+0x2d4>)
 800bd12:	fba3 2302 	umull	r2, r3, r3, r2
 800bd16:	095b      	lsrs	r3, r3, #5
 800bd18:	011c      	lsls	r4, r3, #4
 800bd1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bd24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bd28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800bd2c:	4642      	mov	r2, r8
 800bd2e:	464b      	mov	r3, r9
 800bd30:	1891      	adds	r1, r2, r2
 800bd32:	64b9      	str	r1, [r7, #72]	@ 0x48
 800bd34:	415b      	adcs	r3, r3
 800bd36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800bd3c:	4641      	mov	r1, r8
 800bd3e:	eb12 0a01 	adds.w	sl, r2, r1
 800bd42:	4649      	mov	r1, r9
 800bd44:	eb43 0b01 	adc.w	fp, r3, r1
 800bd48:	f04f 0200 	mov.w	r2, #0
 800bd4c:	f04f 0300 	mov.w	r3, #0
 800bd50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bd54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bd58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd5c:	4692      	mov	sl, r2
 800bd5e:	469b      	mov	fp, r3
 800bd60:	4643      	mov	r3, r8
 800bd62:	eb1a 0303 	adds.w	r3, sl, r3
 800bd66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd6a:	464b      	mov	r3, r9
 800bd6c:	eb4b 0303 	adc.w	r3, fp, r3
 800bd70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bd74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bd80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800bd84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bd88:	460b      	mov	r3, r1
 800bd8a:	18db      	adds	r3, r3, r3
 800bd8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd8e:	4613      	mov	r3, r2
 800bd90:	eb42 0303 	adc.w	r3, r2, r3
 800bd94:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800bd9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800bd9e:	f7f4 ffa3 	bl	8000ce8 <__aeabi_uldivmod>
 800bda2:	4602      	mov	r2, r0
 800bda4:	460b      	mov	r3, r1
 800bda6:	4611      	mov	r1, r2
 800bda8:	4b3b      	ldr	r3, [pc, #236]	@ (800be98 <UART_SetConfig+0x2d4>)
 800bdaa:	fba3 2301 	umull	r2, r3, r3, r1
 800bdae:	095b      	lsrs	r3, r3, #5
 800bdb0:	2264      	movs	r2, #100	@ 0x64
 800bdb2:	fb02 f303 	mul.w	r3, r2, r3
 800bdb6:	1acb      	subs	r3, r1, r3
 800bdb8:	00db      	lsls	r3, r3, #3
 800bdba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800bdbe:	4b36      	ldr	r3, [pc, #216]	@ (800be98 <UART_SetConfig+0x2d4>)
 800bdc0:	fba3 2302 	umull	r2, r3, r3, r2
 800bdc4:	095b      	lsrs	r3, r3, #5
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800bdcc:	441c      	add	r4, r3
 800bdce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bdd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800bddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800bde0:	4642      	mov	r2, r8
 800bde2:	464b      	mov	r3, r9
 800bde4:	1891      	adds	r1, r2, r2
 800bde6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bde8:	415b      	adcs	r3, r3
 800bdea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bdf0:	4641      	mov	r1, r8
 800bdf2:	1851      	adds	r1, r2, r1
 800bdf4:	6339      	str	r1, [r7, #48]	@ 0x30
 800bdf6:	4649      	mov	r1, r9
 800bdf8:	414b      	adcs	r3, r1
 800bdfa:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdfc:	f04f 0200 	mov.w	r2, #0
 800be00:	f04f 0300 	mov.w	r3, #0
 800be04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800be08:	4659      	mov	r1, fp
 800be0a:	00cb      	lsls	r3, r1, #3
 800be0c:	4651      	mov	r1, sl
 800be0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be12:	4651      	mov	r1, sl
 800be14:	00ca      	lsls	r2, r1, #3
 800be16:	4610      	mov	r0, r2
 800be18:	4619      	mov	r1, r3
 800be1a:	4603      	mov	r3, r0
 800be1c:	4642      	mov	r2, r8
 800be1e:	189b      	adds	r3, r3, r2
 800be20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800be24:	464b      	mov	r3, r9
 800be26:	460a      	mov	r2, r1
 800be28:	eb42 0303 	adc.w	r3, r2, r3
 800be2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800be30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800be3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800be40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800be44:	460b      	mov	r3, r1
 800be46:	18db      	adds	r3, r3, r3
 800be48:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be4a:	4613      	mov	r3, r2
 800be4c:	eb42 0303 	adc.w	r3, r2, r3
 800be50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800be56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800be5a:	f7f4 ff45 	bl	8000ce8 <__aeabi_uldivmod>
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	4b0d      	ldr	r3, [pc, #52]	@ (800be98 <UART_SetConfig+0x2d4>)
 800be64:	fba3 1302 	umull	r1, r3, r3, r2
 800be68:	095b      	lsrs	r3, r3, #5
 800be6a:	2164      	movs	r1, #100	@ 0x64
 800be6c:	fb01 f303 	mul.w	r3, r1, r3
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	00db      	lsls	r3, r3, #3
 800be74:	3332      	adds	r3, #50	@ 0x32
 800be76:	4a08      	ldr	r2, [pc, #32]	@ (800be98 <UART_SetConfig+0x2d4>)
 800be78:	fba2 2303 	umull	r2, r3, r2, r3
 800be7c:	095b      	lsrs	r3, r3, #5
 800be7e:	f003 0207 	and.w	r2, r3, #7
 800be82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4422      	add	r2, r4
 800be8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800be8c:	e106      	b.n	800c09c <UART_SetConfig+0x4d8>
 800be8e:	bf00      	nop
 800be90:	40011000 	.word	0x40011000
 800be94:	40011400 	.word	0x40011400
 800be98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bea0:	2200      	movs	r2, #0
 800bea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bea6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800beaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800beae:	4642      	mov	r2, r8
 800beb0:	464b      	mov	r3, r9
 800beb2:	1891      	adds	r1, r2, r2
 800beb4:	6239      	str	r1, [r7, #32]
 800beb6:	415b      	adcs	r3, r3
 800beb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800beba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bebe:	4641      	mov	r1, r8
 800bec0:	1854      	adds	r4, r2, r1
 800bec2:	4649      	mov	r1, r9
 800bec4:	eb43 0501 	adc.w	r5, r3, r1
 800bec8:	f04f 0200 	mov.w	r2, #0
 800becc:	f04f 0300 	mov.w	r3, #0
 800bed0:	00eb      	lsls	r3, r5, #3
 800bed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bed6:	00e2      	lsls	r2, r4, #3
 800bed8:	4614      	mov	r4, r2
 800beda:	461d      	mov	r5, r3
 800bedc:	4643      	mov	r3, r8
 800bede:	18e3      	adds	r3, r4, r3
 800bee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bee4:	464b      	mov	r3, r9
 800bee6:	eb45 0303 	adc.w	r3, r5, r3
 800beea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800beee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800befa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800befe:	f04f 0200 	mov.w	r2, #0
 800bf02:	f04f 0300 	mov.w	r3, #0
 800bf06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	008b      	lsls	r3, r1, #2
 800bf0e:	4621      	mov	r1, r4
 800bf10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf14:	4621      	mov	r1, r4
 800bf16:	008a      	lsls	r2, r1, #2
 800bf18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bf1c:	f7f4 fee4 	bl	8000ce8 <__aeabi_uldivmod>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	4b60      	ldr	r3, [pc, #384]	@ (800c0a8 <UART_SetConfig+0x4e4>)
 800bf26:	fba3 2302 	umull	r2, r3, r3, r2
 800bf2a:	095b      	lsrs	r3, r3, #5
 800bf2c:	011c      	lsls	r4, r3, #4
 800bf2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf32:	2200      	movs	r2, #0
 800bf34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bf38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bf3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bf40:	4642      	mov	r2, r8
 800bf42:	464b      	mov	r3, r9
 800bf44:	1891      	adds	r1, r2, r2
 800bf46:	61b9      	str	r1, [r7, #24]
 800bf48:	415b      	adcs	r3, r3
 800bf4a:	61fb      	str	r3, [r7, #28]
 800bf4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bf50:	4641      	mov	r1, r8
 800bf52:	1851      	adds	r1, r2, r1
 800bf54:	6139      	str	r1, [r7, #16]
 800bf56:	4649      	mov	r1, r9
 800bf58:	414b      	adcs	r3, r1
 800bf5a:	617b      	str	r3, [r7, #20]
 800bf5c:	f04f 0200 	mov.w	r2, #0
 800bf60:	f04f 0300 	mov.w	r3, #0
 800bf64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bf68:	4659      	mov	r1, fp
 800bf6a:	00cb      	lsls	r3, r1, #3
 800bf6c:	4651      	mov	r1, sl
 800bf6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf72:	4651      	mov	r1, sl
 800bf74:	00ca      	lsls	r2, r1, #3
 800bf76:	4610      	mov	r0, r2
 800bf78:	4619      	mov	r1, r3
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	4642      	mov	r2, r8
 800bf7e:	189b      	adds	r3, r3, r2
 800bf80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bf84:	464b      	mov	r3, r9
 800bf86:	460a      	mov	r2, r1
 800bf88:	eb42 0303 	adc.w	r3, r2, r3
 800bf8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bf90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bf9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bf9c:	f04f 0200 	mov.w	r2, #0
 800bfa0:	f04f 0300 	mov.w	r3, #0
 800bfa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bfa8:	4649      	mov	r1, r9
 800bfaa:	008b      	lsls	r3, r1, #2
 800bfac:	4641      	mov	r1, r8
 800bfae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfb2:	4641      	mov	r1, r8
 800bfb4:	008a      	lsls	r2, r1, #2
 800bfb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bfba:	f7f4 fe95 	bl	8000ce8 <__aeabi_uldivmod>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	4b38      	ldr	r3, [pc, #224]	@ (800c0a8 <UART_SetConfig+0x4e4>)
 800bfc6:	fba3 2301 	umull	r2, r3, r3, r1
 800bfca:	095b      	lsrs	r3, r3, #5
 800bfcc:	2264      	movs	r2, #100	@ 0x64
 800bfce:	fb02 f303 	mul.w	r3, r2, r3
 800bfd2:	1acb      	subs	r3, r1, r3
 800bfd4:	011b      	lsls	r3, r3, #4
 800bfd6:	3332      	adds	r3, #50	@ 0x32
 800bfd8:	4a33      	ldr	r2, [pc, #204]	@ (800c0a8 <UART_SetConfig+0x4e4>)
 800bfda:	fba2 2303 	umull	r2, r3, r2, r3
 800bfde:	095b      	lsrs	r3, r3, #5
 800bfe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bfe4:	441c      	add	r4, r3
 800bfe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bfea:	2200      	movs	r2, #0
 800bfec:	673b      	str	r3, [r7, #112]	@ 0x70
 800bfee:	677a      	str	r2, [r7, #116]	@ 0x74
 800bff0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bff4:	4642      	mov	r2, r8
 800bff6:	464b      	mov	r3, r9
 800bff8:	1891      	adds	r1, r2, r2
 800bffa:	60b9      	str	r1, [r7, #8]
 800bffc:	415b      	adcs	r3, r3
 800bffe:	60fb      	str	r3, [r7, #12]
 800c000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c004:	4641      	mov	r1, r8
 800c006:	1851      	adds	r1, r2, r1
 800c008:	6039      	str	r1, [r7, #0]
 800c00a:	4649      	mov	r1, r9
 800c00c:	414b      	adcs	r3, r1
 800c00e:	607b      	str	r3, [r7, #4]
 800c010:	f04f 0200 	mov.w	r2, #0
 800c014:	f04f 0300 	mov.w	r3, #0
 800c018:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c01c:	4659      	mov	r1, fp
 800c01e:	00cb      	lsls	r3, r1, #3
 800c020:	4651      	mov	r1, sl
 800c022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c026:	4651      	mov	r1, sl
 800c028:	00ca      	lsls	r2, r1, #3
 800c02a:	4610      	mov	r0, r2
 800c02c:	4619      	mov	r1, r3
 800c02e:	4603      	mov	r3, r0
 800c030:	4642      	mov	r2, r8
 800c032:	189b      	adds	r3, r3, r2
 800c034:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c036:	464b      	mov	r3, r9
 800c038:	460a      	mov	r2, r1
 800c03a:	eb42 0303 	adc.w	r3, r2, r3
 800c03e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	663b      	str	r3, [r7, #96]	@ 0x60
 800c04a:	667a      	str	r2, [r7, #100]	@ 0x64
 800c04c:	f04f 0200 	mov.w	r2, #0
 800c050:	f04f 0300 	mov.w	r3, #0
 800c054:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c058:	4649      	mov	r1, r9
 800c05a:	008b      	lsls	r3, r1, #2
 800c05c:	4641      	mov	r1, r8
 800c05e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c062:	4641      	mov	r1, r8
 800c064:	008a      	lsls	r2, r1, #2
 800c066:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c06a:	f7f4 fe3d 	bl	8000ce8 <__aeabi_uldivmod>
 800c06e:	4602      	mov	r2, r0
 800c070:	460b      	mov	r3, r1
 800c072:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a8 <UART_SetConfig+0x4e4>)
 800c074:	fba3 1302 	umull	r1, r3, r3, r2
 800c078:	095b      	lsrs	r3, r3, #5
 800c07a:	2164      	movs	r1, #100	@ 0x64
 800c07c:	fb01 f303 	mul.w	r3, r1, r3
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	011b      	lsls	r3, r3, #4
 800c084:	3332      	adds	r3, #50	@ 0x32
 800c086:	4a08      	ldr	r2, [pc, #32]	@ (800c0a8 <UART_SetConfig+0x4e4>)
 800c088:	fba2 2303 	umull	r2, r3, r2, r3
 800c08c:	095b      	lsrs	r3, r3, #5
 800c08e:	f003 020f 	and.w	r2, r3, #15
 800c092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4422      	add	r2, r4
 800c09a:	609a      	str	r2, [r3, #8]
}
 800c09c:	bf00      	nop
 800c09e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0a8:	51eb851f 	.word	0x51eb851f

0800c0ac <__cvt>:
 800c0ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b0:	ec57 6b10 	vmov	r6, r7, d0
 800c0b4:	2f00      	cmp	r7, #0
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	463b      	mov	r3, r7
 800c0bc:	bfbb      	ittet	lt
 800c0be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c0c2:	461f      	movlt	r7, r3
 800c0c4:	2300      	movge	r3, #0
 800c0c6:	232d      	movlt	r3, #45	@ 0x2d
 800c0c8:	700b      	strb	r3, [r1, #0]
 800c0ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c0d0:	4691      	mov	r9, r2
 800c0d2:	f023 0820 	bic.w	r8, r3, #32
 800c0d6:	bfbc      	itt	lt
 800c0d8:	4632      	movlt	r2, r6
 800c0da:	4616      	movlt	r6, r2
 800c0dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c0e0:	d005      	beq.n	800c0ee <__cvt+0x42>
 800c0e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c0e6:	d100      	bne.n	800c0ea <__cvt+0x3e>
 800c0e8:	3401      	adds	r4, #1
 800c0ea:	2102      	movs	r1, #2
 800c0ec:	e000      	b.n	800c0f0 <__cvt+0x44>
 800c0ee:	2103      	movs	r1, #3
 800c0f0:	ab03      	add	r3, sp, #12
 800c0f2:	9301      	str	r3, [sp, #4]
 800c0f4:	ab02      	add	r3, sp, #8
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	ec47 6b10 	vmov	d0, r6, r7
 800c0fc:	4653      	mov	r3, sl
 800c0fe:	4622      	mov	r2, r4
 800c100:	f001 ff52 	bl	800dfa8 <_dtoa_r>
 800c104:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c108:	4605      	mov	r5, r0
 800c10a:	d119      	bne.n	800c140 <__cvt+0x94>
 800c10c:	f019 0f01 	tst.w	r9, #1
 800c110:	d00e      	beq.n	800c130 <__cvt+0x84>
 800c112:	eb00 0904 	add.w	r9, r0, r4
 800c116:	2200      	movs	r2, #0
 800c118:	2300      	movs	r3, #0
 800c11a:	4630      	mov	r0, r6
 800c11c:	4639      	mov	r1, r7
 800c11e:	f7f4 fd03 	bl	8000b28 <__aeabi_dcmpeq>
 800c122:	b108      	cbz	r0, 800c128 <__cvt+0x7c>
 800c124:	f8cd 900c 	str.w	r9, [sp, #12]
 800c128:	2230      	movs	r2, #48	@ 0x30
 800c12a:	9b03      	ldr	r3, [sp, #12]
 800c12c:	454b      	cmp	r3, r9
 800c12e:	d31e      	bcc.n	800c16e <__cvt+0xc2>
 800c130:	9b03      	ldr	r3, [sp, #12]
 800c132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c134:	1b5b      	subs	r3, r3, r5
 800c136:	4628      	mov	r0, r5
 800c138:	6013      	str	r3, [r2, #0]
 800c13a:	b004      	add	sp, #16
 800c13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c140:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c144:	eb00 0904 	add.w	r9, r0, r4
 800c148:	d1e5      	bne.n	800c116 <__cvt+0x6a>
 800c14a:	7803      	ldrb	r3, [r0, #0]
 800c14c:	2b30      	cmp	r3, #48	@ 0x30
 800c14e:	d10a      	bne.n	800c166 <__cvt+0xba>
 800c150:	2200      	movs	r2, #0
 800c152:	2300      	movs	r3, #0
 800c154:	4630      	mov	r0, r6
 800c156:	4639      	mov	r1, r7
 800c158:	f7f4 fce6 	bl	8000b28 <__aeabi_dcmpeq>
 800c15c:	b918      	cbnz	r0, 800c166 <__cvt+0xba>
 800c15e:	f1c4 0401 	rsb	r4, r4, #1
 800c162:	f8ca 4000 	str.w	r4, [sl]
 800c166:	f8da 3000 	ldr.w	r3, [sl]
 800c16a:	4499      	add	r9, r3
 800c16c:	e7d3      	b.n	800c116 <__cvt+0x6a>
 800c16e:	1c59      	adds	r1, r3, #1
 800c170:	9103      	str	r1, [sp, #12]
 800c172:	701a      	strb	r2, [r3, #0]
 800c174:	e7d9      	b.n	800c12a <__cvt+0x7e>

0800c176 <__exponent>:
 800c176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c178:	2900      	cmp	r1, #0
 800c17a:	bfba      	itte	lt
 800c17c:	4249      	neglt	r1, r1
 800c17e:	232d      	movlt	r3, #45	@ 0x2d
 800c180:	232b      	movge	r3, #43	@ 0x2b
 800c182:	2909      	cmp	r1, #9
 800c184:	7002      	strb	r2, [r0, #0]
 800c186:	7043      	strb	r3, [r0, #1]
 800c188:	dd29      	ble.n	800c1de <__exponent+0x68>
 800c18a:	f10d 0307 	add.w	r3, sp, #7
 800c18e:	461d      	mov	r5, r3
 800c190:	270a      	movs	r7, #10
 800c192:	461a      	mov	r2, r3
 800c194:	fbb1 f6f7 	udiv	r6, r1, r7
 800c198:	fb07 1416 	mls	r4, r7, r6, r1
 800c19c:	3430      	adds	r4, #48	@ 0x30
 800c19e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	2c63      	cmp	r4, #99	@ 0x63
 800c1a6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	dcf1      	bgt.n	800c192 <__exponent+0x1c>
 800c1ae:	3130      	adds	r1, #48	@ 0x30
 800c1b0:	1e94      	subs	r4, r2, #2
 800c1b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c1b6:	1c41      	adds	r1, r0, #1
 800c1b8:	4623      	mov	r3, r4
 800c1ba:	42ab      	cmp	r3, r5
 800c1bc:	d30a      	bcc.n	800c1d4 <__exponent+0x5e>
 800c1be:	f10d 0309 	add.w	r3, sp, #9
 800c1c2:	1a9b      	subs	r3, r3, r2
 800c1c4:	42ac      	cmp	r4, r5
 800c1c6:	bf88      	it	hi
 800c1c8:	2300      	movhi	r3, #0
 800c1ca:	3302      	adds	r3, #2
 800c1cc:	4403      	add	r3, r0
 800c1ce:	1a18      	subs	r0, r3, r0
 800c1d0:	b003      	add	sp, #12
 800c1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c1d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c1dc:	e7ed      	b.n	800c1ba <__exponent+0x44>
 800c1de:	2330      	movs	r3, #48	@ 0x30
 800c1e0:	3130      	adds	r1, #48	@ 0x30
 800c1e2:	7083      	strb	r3, [r0, #2]
 800c1e4:	70c1      	strb	r1, [r0, #3]
 800c1e6:	1d03      	adds	r3, r0, #4
 800c1e8:	e7f1      	b.n	800c1ce <__exponent+0x58>
	...

0800c1ec <_printf_float>:
 800c1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f0:	b08d      	sub	sp, #52	@ 0x34
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c1f8:	4616      	mov	r6, r2
 800c1fa:	461f      	mov	r7, r3
 800c1fc:	4605      	mov	r5, r0
 800c1fe:	f001 fe19 	bl	800de34 <_localeconv_r>
 800c202:	6803      	ldr	r3, [r0, #0]
 800c204:	9304      	str	r3, [sp, #16]
 800c206:	4618      	mov	r0, r3
 800c208:	f7f4 f862 	bl	80002d0 <strlen>
 800c20c:	2300      	movs	r3, #0
 800c20e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c210:	f8d8 3000 	ldr.w	r3, [r8]
 800c214:	9005      	str	r0, [sp, #20]
 800c216:	3307      	adds	r3, #7
 800c218:	f023 0307 	bic.w	r3, r3, #7
 800c21c:	f103 0208 	add.w	r2, r3, #8
 800c220:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c224:	f8d4 b000 	ldr.w	fp, [r4]
 800c228:	f8c8 2000 	str.w	r2, [r8]
 800c22c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c230:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c234:	9307      	str	r3, [sp, #28]
 800c236:	f8cd 8018 	str.w	r8, [sp, #24]
 800c23a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c23e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c242:	4b9c      	ldr	r3, [pc, #624]	@ (800c4b4 <_printf_float+0x2c8>)
 800c244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c248:	f7f4 fca0 	bl	8000b8c <__aeabi_dcmpun>
 800c24c:	bb70      	cbnz	r0, 800c2ac <_printf_float+0xc0>
 800c24e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c252:	4b98      	ldr	r3, [pc, #608]	@ (800c4b4 <_printf_float+0x2c8>)
 800c254:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c258:	f7f4 fc7a 	bl	8000b50 <__aeabi_dcmple>
 800c25c:	bb30      	cbnz	r0, 800c2ac <_printf_float+0xc0>
 800c25e:	2200      	movs	r2, #0
 800c260:	2300      	movs	r3, #0
 800c262:	4640      	mov	r0, r8
 800c264:	4649      	mov	r1, r9
 800c266:	f7f4 fc69 	bl	8000b3c <__aeabi_dcmplt>
 800c26a:	b110      	cbz	r0, 800c272 <_printf_float+0x86>
 800c26c:	232d      	movs	r3, #45	@ 0x2d
 800c26e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c272:	4a91      	ldr	r2, [pc, #580]	@ (800c4b8 <_printf_float+0x2cc>)
 800c274:	4b91      	ldr	r3, [pc, #580]	@ (800c4bc <_printf_float+0x2d0>)
 800c276:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c27a:	bf8c      	ite	hi
 800c27c:	4690      	movhi	r8, r2
 800c27e:	4698      	movls	r8, r3
 800c280:	2303      	movs	r3, #3
 800c282:	6123      	str	r3, [r4, #16]
 800c284:	f02b 0304 	bic.w	r3, fp, #4
 800c288:	6023      	str	r3, [r4, #0]
 800c28a:	f04f 0900 	mov.w	r9, #0
 800c28e:	9700      	str	r7, [sp, #0]
 800c290:	4633      	mov	r3, r6
 800c292:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c294:	4621      	mov	r1, r4
 800c296:	4628      	mov	r0, r5
 800c298:	f000 f9d2 	bl	800c640 <_printf_common>
 800c29c:	3001      	adds	r0, #1
 800c29e:	f040 808d 	bne.w	800c3bc <_printf_float+0x1d0>
 800c2a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2a6:	b00d      	add	sp, #52	@ 0x34
 800c2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ac:	4642      	mov	r2, r8
 800c2ae:	464b      	mov	r3, r9
 800c2b0:	4640      	mov	r0, r8
 800c2b2:	4649      	mov	r1, r9
 800c2b4:	f7f4 fc6a 	bl	8000b8c <__aeabi_dcmpun>
 800c2b8:	b140      	cbz	r0, 800c2cc <_printf_float+0xe0>
 800c2ba:	464b      	mov	r3, r9
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	bfbc      	itt	lt
 800c2c0:	232d      	movlt	r3, #45	@ 0x2d
 800c2c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c2c6:	4a7e      	ldr	r2, [pc, #504]	@ (800c4c0 <_printf_float+0x2d4>)
 800c2c8:	4b7e      	ldr	r3, [pc, #504]	@ (800c4c4 <_printf_float+0x2d8>)
 800c2ca:	e7d4      	b.n	800c276 <_printf_float+0x8a>
 800c2cc:	6863      	ldr	r3, [r4, #4]
 800c2ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c2d2:	9206      	str	r2, [sp, #24]
 800c2d4:	1c5a      	adds	r2, r3, #1
 800c2d6:	d13b      	bne.n	800c350 <_printf_float+0x164>
 800c2d8:	2306      	movs	r3, #6
 800c2da:	6063      	str	r3, [r4, #4]
 800c2dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	6022      	str	r2, [r4, #0]
 800c2e4:	9303      	str	r3, [sp, #12]
 800c2e6:	ab0a      	add	r3, sp, #40	@ 0x28
 800c2e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c2ec:	ab09      	add	r3, sp, #36	@ 0x24
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	6861      	ldr	r1, [r4, #4]
 800c2f2:	ec49 8b10 	vmov	d0, r8, r9
 800c2f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	f7ff fed6 	bl	800c0ac <__cvt>
 800c300:	9b06      	ldr	r3, [sp, #24]
 800c302:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c304:	2b47      	cmp	r3, #71	@ 0x47
 800c306:	4680      	mov	r8, r0
 800c308:	d129      	bne.n	800c35e <_printf_float+0x172>
 800c30a:	1cc8      	adds	r0, r1, #3
 800c30c:	db02      	blt.n	800c314 <_printf_float+0x128>
 800c30e:	6863      	ldr	r3, [r4, #4]
 800c310:	4299      	cmp	r1, r3
 800c312:	dd41      	ble.n	800c398 <_printf_float+0x1ac>
 800c314:	f1aa 0a02 	sub.w	sl, sl, #2
 800c318:	fa5f fa8a 	uxtb.w	sl, sl
 800c31c:	3901      	subs	r1, #1
 800c31e:	4652      	mov	r2, sl
 800c320:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c324:	9109      	str	r1, [sp, #36]	@ 0x24
 800c326:	f7ff ff26 	bl	800c176 <__exponent>
 800c32a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c32c:	1813      	adds	r3, r2, r0
 800c32e:	2a01      	cmp	r2, #1
 800c330:	4681      	mov	r9, r0
 800c332:	6123      	str	r3, [r4, #16]
 800c334:	dc02      	bgt.n	800c33c <_printf_float+0x150>
 800c336:	6822      	ldr	r2, [r4, #0]
 800c338:	07d2      	lsls	r2, r2, #31
 800c33a:	d501      	bpl.n	800c340 <_printf_float+0x154>
 800c33c:	3301      	adds	r3, #1
 800c33e:	6123      	str	r3, [r4, #16]
 800c340:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c344:	2b00      	cmp	r3, #0
 800c346:	d0a2      	beq.n	800c28e <_printf_float+0xa2>
 800c348:	232d      	movs	r3, #45	@ 0x2d
 800c34a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c34e:	e79e      	b.n	800c28e <_printf_float+0xa2>
 800c350:	9a06      	ldr	r2, [sp, #24]
 800c352:	2a47      	cmp	r2, #71	@ 0x47
 800c354:	d1c2      	bne.n	800c2dc <_printf_float+0xf0>
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1c0      	bne.n	800c2dc <_printf_float+0xf0>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e7bd      	b.n	800c2da <_printf_float+0xee>
 800c35e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c362:	d9db      	bls.n	800c31c <_printf_float+0x130>
 800c364:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c368:	d118      	bne.n	800c39c <_printf_float+0x1b0>
 800c36a:	2900      	cmp	r1, #0
 800c36c:	6863      	ldr	r3, [r4, #4]
 800c36e:	dd0b      	ble.n	800c388 <_printf_float+0x19c>
 800c370:	6121      	str	r1, [r4, #16]
 800c372:	b913      	cbnz	r3, 800c37a <_printf_float+0x18e>
 800c374:	6822      	ldr	r2, [r4, #0]
 800c376:	07d0      	lsls	r0, r2, #31
 800c378:	d502      	bpl.n	800c380 <_printf_float+0x194>
 800c37a:	3301      	adds	r3, #1
 800c37c:	440b      	add	r3, r1
 800c37e:	6123      	str	r3, [r4, #16]
 800c380:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c382:	f04f 0900 	mov.w	r9, #0
 800c386:	e7db      	b.n	800c340 <_printf_float+0x154>
 800c388:	b913      	cbnz	r3, 800c390 <_printf_float+0x1a4>
 800c38a:	6822      	ldr	r2, [r4, #0]
 800c38c:	07d2      	lsls	r2, r2, #31
 800c38e:	d501      	bpl.n	800c394 <_printf_float+0x1a8>
 800c390:	3302      	adds	r3, #2
 800c392:	e7f4      	b.n	800c37e <_printf_float+0x192>
 800c394:	2301      	movs	r3, #1
 800c396:	e7f2      	b.n	800c37e <_printf_float+0x192>
 800c398:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c39c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c39e:	4299      	cmp	r1, r3
 800c3a0:	db05      	blt.n	800c3ae <_printf_float+0x1c2>
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	6121      	str	r1, [r4, #16]
 800c3a6:	07d8      	lsls	r0, r3, #31
 800c3a8:	d5ea      	bpl.n	800c380 <_printf_float+0x194>
 800c3aa:	1c4b      	adds	r3, r1, #1
 800c3ac:	e7e7      	b.n	800c37e <_printf_float+0x192>
 800c3ae:	2900      	cmp	r1, #0
 800c3b0:	bfd4      	ite	le
 800c3b2:	f1c1 0202 	rsble	r2, r1, #2
 800c3b6:	2201      	movgt	r2, #1
 800c3b8:	4413      	add	r3, r2
 800c3ba:	e7e0      	b.n	800c37e <_printf_float+0x192>
 800c3bc:	6823      	ldr	r3, [r4, #0]
 800c3be:	055a      	lsls	r2, r3, #21
 800c3c0:	d407      	bmi.n	800c3d2 <_printf_float+0x1e6>
 800c3c2:	6923      	ldr	r3, [r4, #16]
 800c3c4:	4642      	mov	r2, r8
 800c3c6:	4631      	mov	r1, r6
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	47b8      	blx	r7
 800c3cc:	3001      	adds	r0, #1
 800c3ce:	d12b      	bne.n	800c428 <_printf_float+0x23c>
 800c3d0:	e767      	b.n	800c2a2 <_printf_float+0xb6>
 800c3d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c3d6:	f240 80dd 	bls.w	800c594 <_printf_float+0x3a8>
 800c3da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f7f4 fba1 	bl	8000b28 <__aeabi_dcmpeq>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d033      	beq.n	800c452 <_printf_float+0x266>
 800c3ea:	4a37      	ldr	r2, [pc, #220]	@ (800c4c8 <_printf_float+0x2dc>)
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	47b8      	blx	r7
 800c3f4:	3001      	adds	r0, #1
 800c3f6:	f43f af54 	beq.w	800c2a2 <_printf_float+0xb6>
 800c3fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c3fe:	4543      	cmp	r3, r8
 800c400:	db02      	blt.n	800c408 <_printf_float+0x21c>
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	07d8      	lsls	r0, r3, #31
 800c406:	d50f      	bpl.n	800c428 <_printf_float+0x23c>
 800c408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c40c:	4631      	mov	r1, r6
 800c40e:	4628      	mov	r0, r5
 800c410:	47b8      	blx	r7
 800c412:	3001      	adds	r0, #1
 800c414:	f43f af45 	beq.w	800c2a2 <_printf_float+0xb6>
 800c418:	f04f 0900 	mov.w	r9, #0
 800c41c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c420:	f104 0a1a 	add.w	sl, r4, #26
 800c424:	45c8      	cmp	r8, r9
 800c426:	dc09      	bgt.n	800c43c <_printf_float+0x250>
 800c428:	6823      	ldr	r3, [r4, #0]
 800c42a:	079b      	lsls	r3, r3, #30
 800c42c:	f100 8103 	bmi.w	800c636 <_printf_float+0x44a>
 800c430:	68e0      	ldr	r0, [r4, #12]
 800c432:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c434:	4298      	cmp	r0, r3
 800c436:	bfb8      	it	lt
 800c438:	4618      	movlt	r0, r3
 800c43a:	e734      	b.n	800c2a6 <_printf_float+0xba>
 800c43c:	2301      	movs	r3, #1
 800c43e:	4652      	mov	r2, sl
 800c440:	4631      	mov	r1, r6
 800c442:	4628      	mov	r0, r5
 800c444:	47b8      	blx	r7
 800c446:	3001      	adds	r0, #1
 800c448:	f43f af2b 	beq.w	800c2a2 <_printf_float+0xb6>
 800c44c:	f109 0901 	add.w	r9, r9, #1
 800c450:	e7e8      	b.n	800c424 <_printf_float+0x238>
 800c452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c454:	2b00      	cmp	r3, #0
 800c456:	dc39      	bgt.n	800c4cc <_printf_float+0x2e0>
 800c458:	4a1b      	ldr	r2, [pc, #108]	@ (800c4c8 <_printf_float+0x2dc>)
 800c45a:	2301      	movs	r3, #1
 800c45c:	4631      	mov	r1, r6
 800c45e:	4628      	mov	r0, r5
 800c460:	47b8      	blx	r7
 800c462:	3001      	adds	r0, #1
 800c464:	f43f af1d 	beq.w	800c2a2 <_printf_float+0xb6>
 800c468:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c46c:	ea59 0303 	orrs.w	r3, r9, r3
 800c470:	d102      	bne.n	800c478 <_printf_float+0x28c>
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	07d9      	lsls	r1, r3, #31
 800c476:	d5d7      	bpl.n	800c428 <_printf_float+0x23c>
 800c478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c47c:	4631      	mov	r1, r6
 800c47e:	4628      	mov	r0, r5
 800c480:	47b8      	blx	r7
 800c482:	3001      	adds	r0, #1
 800c484:	f43f af0d 	beq.w	800c2a2 <_printf_float+0xb6>
 800c488:	f04f 0a00 	mov.w	sl, #0
 800c48c:	f104 0b1a 	add.w	fp, r4, #26
 800c490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c492:	425b      	negs	r3, r3
 800c494:	4553      	cmp	r3, sl
 800c496:	dc01      	bgt.n	800c49c <_printf_float+0x2b0>
 800c498:	464b      	mov	r3, r9
 800c49a:	e793      	b.n	800c3c4 <_printf_float+0x1d8>
 800c49c:	2301      	movs	r3, #1
 800c49e:	465a      	mov	r2, fp
 800c4a0:	4631      	mov	r1, r6
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	47b8      	blx	r7
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	f43f aefb 	beq.w	800c2a2 <_printf_float+0xb6>
 800c4ac:	f10a 0a01 	add.w	sl, sl, #1
 800c4b0:	e7ee      	b.n	800c490 <_printf_float+0x2a4>
 800c4b2:	bf00      	nop
 800c4b4:	7fefffff 	.word	0x7fefffff
 800c4b8:	08011380 	.word	0x08011380
 800c4bc:	0801137c 	.word	0x0801137c
 800c4c0:	08011388 	.word	0x08011388
 800c4c4:	08011384 	.word	0x08011384
 800c4c8:	0801138c 	.word	0x0801138c
 800c4cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c4ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c4d2:	4553      	cmp	r3, sl
 800c4d4:	bfa8      	it	ge
 800c4d6:	4653      	movge	r3, sl
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	4699      	mov	r9, r3
 800c4dc:	dc36      	bgt.n	800c54c <_printf_float+0x360>
 800c4de:	f04f 0b00 	mov.w	fp, #0
 800c4e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4e6:	f104 021a 	add.w	r2, r4, #26
 800c4ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c4ec:	9306      	str	r3, [sp, #24]
 800c4ee:	eba3 0309 	sub.w	r3, r3, r9
 800c4f2:	455b      	cmp	r3, fp
 800c4f4:	dc31      	bgt.n	800c55a <_printf_float+0x36e>
 800c4f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4f8:	459a      	cmp	sl, r3
 800c4fa:	dc3a      	bgt.n	800c572 <_printf_float+0x386>
 800c4fc:	6823      	ldr	r3, [r4, #0]
 800c4fe:	07da      	lsls	r2, r3, #31
 800c500:	d437      	bmi.n	800c572 <_printf_float+0x386>
 800c502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c504:	ebaa 0903 	sub.w	r9, sl, r3
 800c508:	9b06      	ldr	r3, [sp, #24]
 800c50a:	ebaa 0303 	sub.w	r3, sl, r3
 800c50e:	4599      	cmp	r9, r3
 800c510:	bfa8      	it	ge
 800c512:	4699      	movge	r9, r3
 800c514:	f1b9 0f00 	cmp.w	r9, #0
 800c518:	dc33      	bgt.n	800c582 <_printf_float+0x396>
 800c51a:	f04f 0800 	mov.w	r8, #0
 800c51e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c522:	f104 0b1a 	add.w	fp, r4, #26
 800c526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c528:	ebaa 0303 	sub.w	r3, sl, r3
 800c52c:	eba3 0309 	sub.w	r3, r3, r9
 800c530:	4543      	cmp	r3, r8
 800c532:	f77f af79 	ble.w	800c428 <_printf_float+0x23c>
 800c536:	2301      	movs	r3, #1
 800c538:	465a      	mov	r2, fp
 800c53a:	4631      	mov	r1, r6
 800c53c:	4628      	mov	r0, r5
 800c53e:	47b8      	blx	r7
 800c540:	3001      	adds	r0, #1
 800c542:	f43f aeae 	beq.w	800c2a2 <_printf_float+0xb6>
 800c546:	f108 0801 	add.w	r8, r8, #1
 800c54a:	e7ec      	b.n	800c526 <_printf_float+0x33a>
 800c54c:	4642      	mov	r2, r8
 800c54e:	4631      	mov	r1, r6
 800c550:	4628      	mov	r0, r5
 800c552:	47b8      	blx	r7
 800c554:	3001      	adds	r0, #1
 800c556:	d1c2      	bne.n	800c4de <_printf_float+0x2f2>
 800c558:	e6a3      	b.n	800c2a2 <_printf_float+0xb6>
 800c55a:	2301      	movs	r3, #1
 800c55c:	4631      	mov	r1, r6
 800c55e:	4628      	mov	r0, r5
 800c560:	9206      	str	r2, [sp, #24]
 800c562:	47b8      	blx	r7
 800c564:	3001      	adds	r0, #1
 800c566:	f43f ae9c 	beq.w	800c2a2 <_printf_float+0xb6>
 800c56a:	9a06      	ldr	r2, [sp, #24]
 800c56c:	f10b 0b01 	add.w	fp, fp, #1
 800c570:	e7bb      	b.n	800c4ea <_printf_float+0x2fe>
 800c572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c576:	4631      	mov	r1, r6
 800c578:	4628      	mov	r0, r5
 800c57a:	47b8      	blx	r7
 800c57c:	3001      	adds	r0, #1
 800c57e:	d1c0      	bne.n	800c502 <_printf_float+0x316>
 800c580:	e68f      	b.n	800c2a2 <_printf_float+0xb6>
 800c582:	9a06      	ldr	r2, [sp, #24]
 800c584:	464b      	mov	r3, r9
 800c586:	4442      	add	r2, r8
 800c588:	4631      	mov	r1, r6
 800c58a:	4628      	mov	r0, r5
 800c58c:	47b8      	blx	r7
 800c58e:	3001      	adds	r0, #1
 800c590:	d1c3      	bne.n	800c51a <_printf_float+0x32e>
 800c592:	e686      	b.n	800c2a2 <_printf_float+0xb6>
 800c594:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c598:	f1ba 0f01 	cmp.w	sl, #1
 800c59c:	dc01      	bgt.n	800c5a2 <_printf_float+0x3b6>
 800c59e:	07db      	lsls	r3, r3, #31
 800c5a0:	d536      	bpl.n	800c610 <_printf_float+0x424>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	4642      	mov	r2, r8
 800c5a6:	4631      	mov	r1, r6
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	47b8      	blx	r7
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	f43f ae78 	beq.w	800c2a2 <_printf_float+0xb6>
 800c5b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5b6:	4631      	mov	r1, r6
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	47b8      	blx	r7
 800c5bc:	3001      	adds	r0, #1
 800c5be:	f43f ae70 	beq.w	800c2a2 <_printf_float+0xb6>
 800c5c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c5ce:	f7f4 faab 	bl	8000b28 <__aeabi_dcmpeq>
 800c5d2:	b9c0      	cbnz	r0, 800c606 <_printf_float+0x41a>
 800c5d4:	4653      	mov	r3, sl
 800c5d6:	f108 0201 	add.w	r2, r8, #1
 800c5da:	4631      	mov	r1, r6
 800c5dc:	4628      	mov	r0, r5
 800c5de:	47b8      	blx	r7
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	d10c      	bne.n	800c5fe <_printf_float+0x412>
 800c5e4:	e65d      	b.n	800c2a2 <_printf_float+0xb6>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	465a      	mov	r2, fp
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	47b8      	blx	r7
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	f43f ae56 	beq.w	800c2a2 <_printf_float+0xb6>
 800c5f6:	f108 0801 	add.w	r8, r8, #1
 800c5fa:	45d0      	cmp	r8, sl
 800c5fc:	dbf3      	blt.n	800c5e6 <_printf_float+0x3fa>
 800c5fe:	464b      	mov	r3, r9
 800c600:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c604:	e6df      	b.n	800c3c6 <_printf_float+0x1da>
 800c606:	f04f 0800 	mov.w	r8, #0
 800c60a:	f104 0b1a 	add.w	fp, r4, #26
 800c60e:	e7f4      	b.n	800c5fa <_printf_float+0x40e>
 800c610:	2301      	movs	r3, #1
 800c612:	4642      	mov	r2, r8
 800c614:	e7e1      	b.n	800c5da <_printf_float+0x3ee>
 800c616:	2301      	movs	r3, #1
 800c618:	464a      	mov	r2, r9
 800c61a:	4631      	mov	r1, r6
 800c61c:	4628      	mov	r0, r5
 800c61e:	47b8      	blx	r7
 800c620:	3001      	adds	r0, #1
 800c622:	f43f ae3e 	beq.w	800c2a2 <_printf_float+0xb6>
 800c626:	f108 0801 	add.w	r8, r8, #1
 800c62a:	68e3      	ldr	r3, [r4, #12]
 800c62c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c62e:	1a5b      	subs	r3, r3, r1
 800c630:	4543      	cmp	r3, r8
 800c632:	dcf0      	bgt.n	800c616 <_printf_float+0x42a>
 800c634:	e6fc      	b.n	800c430 <_printf_float+0x244>
 800c636:	f04f 0800 	mov.w	r8, #0
 800c63a:	f104 0919 	add.w	r9, r4, #25
 800c63e:	e7f4      	b.n	800c62a <_printf_float+0x43e>

0800c640 <_printf_common>:
 800c640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c644:	4616      	mov	r6, r2
 800c646:	4698      	mov	r8, r3
 800c648:	688a      	ldr	r2, [r1, #8]
 800c64a:	690b      	ldr	r3, [r1, #16]
 800c64c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c650:	4293      	cmp	r3, r2
 800c652:	bfb8      	it	lt
 800c654:	4613      	movlt	r3, r2
 800c656:	6033      	str	r3, [r6, #0]
 800c658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c65c:	4607      	mov	r7, r0
 800c65e:	460c      	mov	r4, r1
 800c660:	b10a      	cbz	r2, 800c666 <_printf_common+0x26>
 800c662:	3301      	adds	r3, #1
 800c664:	6033      	str	r3, [r6, #0]
 800c666:	6823      	ldr	r3, [r4, #0]
 800c668:	0699      	lsls	r1, r3, #26
 800c66a:	bf42      	ittt	mi
 800c66c:	6833      	ldrmi	r3, [r6, #0]
 800c66e:	3302      	addmi	r3, #2
 800c670:	6033      	strmi	r3, [r6, #0]
 800c672:	6825      	ldr	r5, [r4, #0]
 800c674:	f015 0506 	ands.w	r5, r5, #6
 800c678:	d106      	bne.n	800c688 <_printf_common+0x48>
 800c67a:	f104 0a19 	add.w	sl, r4, #25
 800c67e:	68e3      	ldr	r3, [r4, #12]
 800c680:	6832      	ldr	r2, [r6, #0]
 800c682:	1a9b      	subs	r3, r3, r2
 800c684:	42ab      	cmp	r3, r5
 800c686:	dc26      	bgt.n	800c6d6 <_printf_common+0x96>
 800c688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c68c:	6822      	ldr	r2, [r4, #0]
 800c68e:	3b00      	subs	r3, #0
 800c690:	bf18      	it	ne
 800c692:	2301      	movne	r3, #1
 800c694:	0692      	lsls	r2, r2, #26
 800c696:	d42b      	bmi.n	800c6f0 <_printf_common+0xb0>
 800c698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c69c:	4641      	mov	r1, r8
 800c69e:	4638      	mov	r0, r7
 800c6a0:	47c8      	blx	r9
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	d01e      	beq.n	800c6e4 <_printf_common+0xa4>
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	6922      	ldr	r2, [r4, #16]
 800c6aa:	f003 0306 	and.w	r3, r3, #6
 800c6ae:	2b04      	cmp	r3, #4
 800c6b0:	bf02      	ittt	eq
 800c6b2:	68e5      	ldreq	r5, [r4, #12]
 800c6b4:	6833      	ldreq	r3, [r6, #0]
 800c6b6:	1aed      	subeq	r5, r5, r3
 800c6b8:	68a3      	ldr	r3, [r4, #8]
 800c6ba:	bf0c      	ite	eq
 800c6bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6c0:	2500      	movne	r5, #0
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	bfc4      	itt	gt
 800c6c6:	1a9b      	subgt	r3, r3, r2
 800c6c8:	18ed      	addgt	r5, r5, r3
 800c6ca:	2600      	movs	r6, #0
 800c6cc:	341a      	adds	r4, #26
 800c6ce:	42b5      	cmp	r5, r6
 800c6d0:	d11a      	bne.n	800c708 <_printf_common+0xc8>
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	e008      	b.n	800c6e8 <_printf_common+0xa8>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	4652      	mov	r2, sl
 800c6da:	4641      	mov	r1, r8
 800c6dc:	4638      	mov	r0, r7
 800c6de:	47c8      	blx	r9
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	d103      	bne.n	800c6ec <_printf_common+0xac>
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ec:	3501      	adds	r5, #1
 800c6ee:	e7c6      	b.n	800c67e <_printf_common+0x3e>
 800c6f0:	18e1      	adds	r1, r4, r3
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	2030      	movs	r0, #48	@ 0x30
 800c6f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c6fa:	4422      	add	r2, r4
 800c6fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c704:	3302      	adds	r3, #2
 800c706:	e7c7      	b.n	800c698 <_printf_common+0x58>
 800c708:	2301      	movs	r3, #1
 800c70a:	4622      	mov	r2, r4
 800c70c:	4641      	mov	r1, r8
 800c70e:	4638      	mov	r0, r7
 800c710:	47c8      	blx	r9
 800c712:	3001      	adds	r0, #1
 800c714:	d0e6      	beq.n	800c6e4 <_printf_common+0xa4>
 800c716:	3601      	adds	r6, #1
 800c718:	e7d9      	b.n	800c6ce <_printf_common+0x8e>
	...

0800c71c <_printf_i>:
 800c71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c720:	7e0f      	ldrb	r7, [r1, #24]
 800c722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c724:	2f78      	cmp	r7, #120	@ 0x78
 800c726:	4691      	mov	r9, r2
 800c728:	4680      	mov	r8, r0
 800c72a:	460c      	mov	r4, r1
 800c72c:	469a      	mov	sl, r3
 800c72e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c732:	d807      	bhi.n	800c744 <_printf_i+0x28>
 800c734:	2f62      	cmp	r7, #98	@ 0x62
 800c736:	d80a      	bhi.n	800c74e <_printf_i+0x32>
 800c738:	2f00      	cmp	r7, #0
 800c73a:	f000 80d1 	beq.w	800c8e0 <_printf_i+0x1c4>
 800c73e:	2f58      	cmp	r7, #88	@ 0x58
 800c740:	f000 80b8 	beq.w	800c8b4 <_printf_i+0x198>
 800c744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c74c:	e03a      	b.n	800c7c4 <_printf_i+0xa8>
 800c74e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c752:	2b15      	cmp	r3, #21
 800c754:	d8f6      	bhi.n	800c744 <_printf_i+0x28>
 800c756:	a101      	add	r1, pc, #4	@ (adr r1, 800c75c <_printf_i+0x40>)
 800c758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c75c:	0800c7b5 	.word	0x0800c7b5
 800c760:	0800c7c9 	.word	0x0800c7c9
 800c764:	0800c745 	.word	0x0800c745
 800c768:	0800c745 	.word	0x0800c745
 800c76c:	0800c745 	.word	0x0800c745
 800c770:	0800c745 	.word	0x0800c745
 800c774:	0800c7c9 	.word	0x0800c7c9
 800c778:	0800c745 	.word	0x0800c745
 800c77c:	0800c745 	.word	0x0800c745
 800c780:	0800c745 	.word	0x0800c745
 800c784:	0800c745 	.word	0x0800c745
 800c788:	0800c8c7 	.word	0x0800c8c7
 800c78c:	0800c7f3 	.word	0x0800c7f3
 800c790:	0800c881 	.word	0x0800c881
 800c794:	0800c745 	.word	0x0800c745
 800c798:	0800c745 	.word	0x0800c745
 800c79c:	0800c8e9 	.word	0x0800c8e9
 800c7a0:	0800c745 	.word	0x0800c745
 800c7a4:	0800c7f3 	.word	0x0800c7f3
 800c7a8:	0800c745 	.word	0x0800c745
 800c7ac:	0800c745 	.word	0x0800c745
 800c7b0:	0800c889 	.word	0x0800c889
 800c7b4:	6833      	ldr	r3, [r6, #0]
 800c7b6:	1d1a      	adds	r2, r3, #4
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	6032      	str	r2, [r6, #0]
 800c7bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e09c      	b.n	800c902 <_printf_i+0x1e6>
 800c7c8:	6833      	ldr	r3, [r6, #0]
 800c7ca:	6820      	ldr	r0, [r4, #0]
 800c7cc:	1d19      	adds	r1, r3, #4
 800c7ce:	6031      	str	r1, [r6, #0]
 800c7d0:	0606      	lsls	r6, r0, #24
 800c7d2:	d501      	bpl.n	800c7d8 <_printf_i+0xbc>
 800c7d4:	681d      	ldr	r5, [r3, #0]
 800c7d6:	e003      	b.n	800c7e0 <_printf_i+0xc4>
 800c7d8:	0645      	lsls	r5, r0, #25
 800c7da:	d5fb      	bpl.n	800c7d4 <_printf_i+0xb8>
 800c7dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c7e0:	2d00      	cmp	r5, #0
 800c7e2:	da03      	bge.n	800c7ec <_printf_i+0xd0>
 800c7e4:	232d      	movs	r3, #45	@ 0x2d
 800c7e6:	426d      	negs	r5, r5
 800c7e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7ec:	4858      	ldr	r0, [pc, #352]	@ (800c950 <_printf_i+0x234>)
 800c7ee:	230a      	movs	r3, #10
 800c7f0:	e011      	b.n	800c816 <_printf_i+0xfa>
 800c7f2:	6821      	ldr	r1, [r4, #0]
 800c7f4:	6833      	ldr	r3, [r6, #0]
 800c7f6:	0608      	lsls	r0, r1, #24
 800c7f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c7fc:	d402      	bmi.n	800c804 <_printf_i+0xe8>
 800c7fe:	0649      	lsls	r1, r1, #25
 800c800:	bf48      	it	mi
 800c802:	b2ad      	uxthmi	r5, r5
 800c804:	2f6f      	cmp	r7, #111	@ 0x6f
 800c806:	4852      	ldr	r0, [pc, #328]	@ (800c950 <_printf_i+0x234>)
 800c808:	6033      	str	r3, [r6, #0]
 800c80a:	bf14      	ite	ne
 800c80c:	230a      	movne	r3, #10
 800c80e:	2308      	moveq	r3, #8
 800c810:	2100      	movs	r1, #0
 800c812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c816:	6866      	ldr	r6, [r4, #4]
 800c818:	60a6      	str	r6, [r4, #8]
 800c81a:	2e00      	cmp	r6, #0
 800c81c:	db05      	blt.n	800c82a <_printf_i+0x10e>
 800c81e:	6821      	ldr	r1, [r4, #0]
 800c820:	432e      	orrs	r6, r5
 800c822:	f021 0104 	bic.w	r1, r1, #4
 800c826:	6021      	str	r1, [r4, #0]
 800c828:	d04b      	beq.n	800c8c2 <_printf_i+0x1a6>
 800c82a:	4616      	mov	r6, r2
 800c82c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c830:	fb03 5711 	mls	r7, r3, r1, r5
 800c834:	5dc7      	ldrb	r7, [r0, r7]
 800c836:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c83a:	462f      	mov	r7, r5
 800c83c:	42bb      	cmp	r3, r7
 800c83e:	460d      	mov	r5, r1
 800c840:	d9f4      	bls.n	800c82c <_printf_i+0x110>
 800c842:	2b08      	cmp	r3, #8
 800c844:	d10b      	bne.n	800c85e <_printf_i+0x142>
 800c846:	6823      	ldr	r3, [r4, #0]
 800c848:	07df      	lsls	r7, r3, #31
 800c84a:	d508      	bpl.n	800c85e <_printf_i+0x142>
 800c84c:	6923      	ldr	r3, [r4, #16]
 800c84e:	6861      	ldr	r1, [r4, #4]
 800c850:	4299      	cmp	r1, r3
 800c852:	bfde      	ittt	le
 800c854:	2330      	movle	r3, #48	@ 0x30
 800c856:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c85a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c85e:	1b92      	subs	r2, r2, r6
 800c860:	6122      	str	r2, [r4, #16]
 800c862:	f8cd a000 	str.w	sl, [sp]
 800c866:	464b      	mov	r3, r9
 800c868:	aa03      	add	r2, sp, #12
 800c86a:	4621      	mov	r1, r4
 800c86c:	4640      	mov	r0, r8
 800c86e:	f7ff fee7 	bl	800c640 <_printf_common>
 800c872:	3001      	adds	r0, #1
 800c874:	d14a      	bne.n	800c90c <_printf_i+0x1f0>
 800c876:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c87a:	b004      	add	sp, #16
 800c87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	f043 0320 	orr.w	r3, r3, #32
 800c886:	6023      	str	r3, [r4, #0]
 800c888:	4832      	ldr	r0, [pc, #200]	@ (800c954 <_printf_i+0x238>)
 800c88a:	2778      	movs	r7, #120	@ 0x78
 800c88c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c890:	6823      	ldr	r3, [r4, #0]
 800c892:	6831      	ldr	r1, [r6, #0]
 800c894:	061f      	lsls	r7, r3, #24
 800c896:	f851 5b04 	ldr.w	r5, [r1], #4
 800c89a:	d402      	bmi.n	800c8a2 <_printf_i+0x186>
 800c89c:	065f      	lsls	r7, r3, #25
 800c89e:	bf48      	it	mi
 800c8a0:	b2ad      	uxthmi	r5, r5
 800c8a2:	6031      	str	r1, [r6, #0]
 800c8a4:	07d9      	lsls	r1, r3, #31
 800c8a6:	bf44      	itt	mi
 800c8a8:	f043 0320 	orrmi.w	r3, r3, #32
 800c8ac:	6023      	strmi	r3, [r4, #0]
 800c8ae:	b11d      	cbz	r5, 800c8b8 <_printf_i+0x19c>
 800c8b0:	2310      	movs	r3, #16
 800c8b2:	e7ad      	b.n	800c810 <_printf_i+0xf4>
 800c8b4:	4826      	ldr	r0, [pc, #152]	@ (800c950 <_printf_i+0x234>)
 800c8b6:	e7e9      	b.n	800c88c <_printf_i+0x170>
 800c8b8:	6823      	ldr	r3, [r4, #0]
 800c8ba:	f023 0320 	bic.w	r3, r3, #32
 800c8be:	6023      	str	r3, [r4, #0]
 800c8c0:	e7f6      	b.n	800c8b0 <_printf_i+0x194>
 800c8c2:	4616      	mov	r6, r2
 800c8c4:	e7bd      	b.n	800c842 <_printf_i+0x126>
 800c8c6:	6833      	ldr	r3, [r6, #0]
 800c8c8:	6825      	ldr	r5, [r4, #0]
 800c8ca:	6961      	ldr	r1, [r4, #20]
 800c8cc:	1d18      	adds	r0, r3, #4
 800c8ce:	6030      	str	r0, [r6, #0]
 800c8d0:	062e      	lsls	r6, r5, #24
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	d501      	bpl.n	800c8da <_printf_i+0x1be>
 800c8d6:	6019      	str	r1, [r3, #0]
 800c8d8:	e002      	b.n	800c8e0 <_printf_i+0x1c4>
 800c8da:	0668      	lsls	r0, r5, #25
 800c8dc:	d5fb      	bpl.n	800c8d6 <_printf_i+0x1ba>
 800c8de:	8019      	strh	r1, [r3, #0]
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	6123      	str	r3, [r4, #16]
 800c8e4:	4616      	mov	r6, r2
 800c8e6:	e7bc      	b.n	800c862 <_printf_i+0x146>
 800c8e8:	6833      	ldr	r3, [r6, #0]
 800c8ea:	1d1a      	adds	r2, r3, #4
 800c8ec:	6032      	str	r2, [r6, #0]
 800c8ee:	681e      	ldr	r6, [r3, #0]
 800c8f0:	6862      	ldr	r2, [r4, #4]
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f7f3 fc9b 	bl	8000230 <memchr>
 800c8fa:	b108      	cbz	r0, 800c900 <_printf_i+0x1e4>
 800c8fc:	1b80      	subs	r0, r0, r6
 800c8fe:	6060      	str	r0, [r4, #4]
 800c900:	6863      	ldr	r3, [r4, #4]
 800c902:	6123      	str	r3, [r4, #16]
 800c904:	2300      	movs	r3, #0
 800c906:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c90a:	e7aa      	b.n	800c862 <_printf_i+0x146>
 800c90c:	6923      	ldr	r3, [r4, #16]
 800c90e:	4632      	mov	r2, r6
 800c910:	4649      	mov	r1, r9
 800c912:	4640      	mov	r0, r8
 800c914:	47d0      	blx	sl
 800c916:	3001      	adds	r0, #1
 800c918:	d0ad      	beq.n	800c876 <_printf_i+0x15a>
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	079b      	lsls	r3, r3, #30
 800c91e:	d413      	bmi.n	800c948 <_printf_i+0x22c>
 800c920:	68e0      	ldr	r0, [r4, #12]
 800c922:	9b03      	ldr	r3, [sp, #12]
 800c924:	4298      	cmp	r0, r3
 800c926:	bfb8      	it	lt
 800c928:	4618      	movlt	r0, r3
 800c92a:	e7a6      	b.n	800c87a <_printf_i+0x15e>
 800c92c:	2301      	movs	r3, #1
 800c92e:	4632      	mov	r2, r6
 800c930:	4649      	mov	r1, r9
 800c932:	4640      	mov	r0, r8
 800c934:	47d0      	blx	sl
 800c936:	3001      	adds	r0, #1
 800c938:	d09d      	beq.n	800c876 <_printf_i+0x15a>
 800c93a:	3501      	adds	r5, #1
 800c93c:	68e3      	ldr	r3, [r4, #12]
 800c93e:	9903      	ldr	r1, [sp, #12]
 800c940:	1a5b      	subs	r3, r3, r1
 800c942:	42ab      	cmp	r3, r5
 800c944:	dcf2      	bgt.n	800c92c <_printf_i+0x210>
 800c946:	e7eb      	b.n	800c920 <_printf_i+0x204>
 800c948:	2500      	movs	r5, #0
 800c94a:	f104 0619 	add.w	r6, r4, #25
 800c94e:	e7f5      	b.n	800c93c <_printf_i+0x220>
 800c950:	0801138e 	.word	0x0801138e
 800c954:	0801139f 	.word	0x0801139f

0800c958 <_scanf_float>:
 800c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95c:	b087      	sub	sp, #28
 800c95e:	4691      	mov	r9, r2
 800c960:	9303      	str	r3, [sp, #12]
 800c962:	688b      	ldr	r3, [r1, #8]
 800c964:	1e5a      	subs	r2, r3, #1
 800c966:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c96a:	bf81      	itttt	hi
 800c96c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c970:	eb03 0b05 	addhi.w	fp, r3, r5
 800c974:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c978:	608b      	strhi	r3, [r1, #8]
 800c97a:	680b      	ldr	r3, [r1, #0]
 800c97c:	460a      	mov	r2, r1
 800c97e:	f04f 0500 	mov.w	r5, #0
 800c982:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c986:	f842 3b1c 	str.w	r3, [r2], #28
 800c98a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c98e:	4680      	mov	r8, r0
 800c990:	460c      	mov	r4, r1
 800c992:	bf98      	it	ls
 800c994:	f04f 0b00 	movls.w	fp, #0
 800c998:	9201      	str	r2, [sp, #4]
 800c99a:	4616      	mov	r6, r2
 800c99c:	46aa      	mov	sl, r5
 800c99e:	462f      	mov	r7, r5
 800c9a0:	9502      	str	r5, [sp, #8]
 800c9a2:	68a2      	ldr	r2, [r4, #8]
 800c9a4:	b15a      	cbz	r2, 800c9be <_scanf_float+0x66>
 800c9a6:	f8d9 3000 	ldr.w	r3, [r9]
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	2b4e      	cmp	r3, #78	@ 0x4e
 800c9ae:	d863      	bhi.n	800ca78 <_scanf_float+0x120>
 800c9b0:	2b40      	cmp	r3, #64	@ 0x40
 800c9b2:	d83b      	bhi.n	800ca2c <_scanf_float+0xd4>
 800c9b4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c9b8:	b2c8      	uxtb	r0, r1
 800c9ba:	280e      	cmp	r0, #14
 800c9bc:	d939      	bls.n	800ca32 <_scanf_float+0xda>
 800c9be:	b11f      	cbz	r7, 800c9c8 <_scanf_float+0x70>
 800c9c0:	6823      	ldr	r3, [r4, #0]
 800c9c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9c6:	6023      	str	r3, [r4, #0]
 800c9c8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c9cc:	f1ba 0f01 	cmp.w	sl, #1
 800c9d0:	f200 8114 	bhi.w	800cbfc <_scanf_float+0x2a4>
 800c9d4:	9b01      	ldr	r3, [sp, #4]
 800c9d6:	429e      	cmp	r6, r3
 800c9d8:	f200 8105 	bhi.w	800cbe6 <_scanf_float+0x28e>
 800c9dc:	2001      	movs	r0, #1
 800c9de:	b007      	add	sp, #28
 800c9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c9e8:	2a0d      	cmp	r2, #13
 800c9ea:	d8e8      	bhi.n	800c9be <_scanf_float+0x66>
 800c9ec:	a101      	add	r1, pc, #4	@ (adr r1, 800c9f4 <_scanf_float+0x9c>)
 800c9ee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c9f2:	bf00      	nop
 800c9f4:	0800cb3d 	.word	0x0800cb3d
 800c9f8:	0800c9bf 	.word	0x0800c9bf
 800c9fc:	0800c9bf 	.word	0x0800c9bf
 800ca00:	0800c9bf 	.word	0x0800c9bf
 800ca04:	0800cb99 	.word	0x0800cb99
 800ca08:	0800cb73 	.word	0x0800cb73
 800ca0c:	0800c9bf 	.word	0x0800c9bf
 800ca10:	0800c9bf 	.word	0x0800c9bf
 800ca14:	0800cb4b 	.word	0x0800cb4b
 800ca18:	0800c9bf 	.word	0x0800c9bf
 800ca1c:	0800c9bf 	.word	0x0800c9bf
 800ca20:	0800c9bf 	.word	0x0800c9bf
 800ca24:	0800c9bf 	.word	0x0800c9bf
 800ca28:	0800cb07 	.word	0x0800cb07
 800ca2c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ca30:	e7da      	b.n	800c9e8 <_scanf_float+0x90>
 800ca32:	290e      	cmp	r1, #14
 800ca34:	d8c3      	bhi.n	800c9be <_scanf_float+0x66>
 800ca36:	a001      	add	r0, pc, #4	@ (adr r0, 800ca3c <_scanf_float+0xe4>)
 800ca38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ca3c:	0800caf7 	.word	0x0800caf7
 800ca40:	0800c9bf 	.word	0x0800c9bf
 800ca44:	0800caf7 	.word	0x0800caf7
 800ca48:	0800cb87 	.word	0x0800cb87
 800ca4c:	0800c9bf 	.word	0x0800c9bf
 800ca50:	0800ca99 	.word	0x0800ca99
 800ca54:	0800cadd 	.word	0x0800cadd
 800ca58:	0800cadd 	.word	0x0800cadd
 800ca5c:	0800cadd 	.word	0x0800cadd
 800ca60:	0800cadd 	.word	0x0800cadd
 800ca64:	0800cadd 	.word	0x0800cadd
 800ca68:	0800cadd 	.word	0x0800cadd
 800ca6c:	0800cadd 	.word	0x0800cadd
 800ca70:	0800cadd 	.word	0x0800cadd
 800ca74:	0800cadd 	.word	0x0800cadd
 800ca78:	2b6e      	cmp	r3, #110	@ 0x6e
 800ca7a:	d809      	bhi.n	800ca90 <_scanf_float+0x138>
 800ca7c:	2b60      	cmp	r3, #96	@ 0x60
 800ca7e:	d8b1      	bhi.n	800c9e4 <_scanf_float+0x8c>
 800ca80:	2b54      	cmp	r3, #84	@ 0x54
 800ca82:	d07b      	beq.n	800cb7c <_scanf_float+0x224>
 800ca84:	2b59      	cmp	r3, #89	@ 0x59
 800ca86:	d19a      	bne.n	800c9be <_scanf_float+0x66>
 800ca88:	2d07      	cmp	r5, #7
 800ca8a:	d198      	bne.n	800c9be <_scanf_float+0x66>
 800ca8c:	2508      	movs	r5, #8
 800ca8e:	e02f      	b.n	800caf0 <_scanf_float+0x198>
 800ca90:	2b74      	cmp	r3, #116	@ 0x74
 800ca92:	d073      	beq.n	800cb7c <_scanf_float+0x224>
 800ca94:	2b79      	cmp	r3, #121	@ 0x79
 800ca96:	e7f6      	b.n	800ca86 <_scanf_float+0x12e>
 800ca98:	6821      	ldr	r1, [r4, #0]
 800ca9a:	05c8      	lsls	r0, r1, #23
 800ca9c:	d51e      	bpl.n	800cadc <_scanf_float+0x184>
 800ca9e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800caa2:	6021      	str	r1, [r4, #0]
 800caa4:	3701      	adds	r7, #1
 800caa6:	f1bb 0f00 	cmp.w	fp, #0
 800caaa:	d003      	beq.n	800cab4 <_scanf_float+0x15c>
 800caac:	3201      	adds	r2, #1
 800caae:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800cab2:	60a2      	str	r2, [r4, #8]
 800cab4:	68a3      	ldr	r3, [r4, #8]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	60a3      	str	r3, [r4, #8]
 800caba:	6923      	ldr	r3, [r4, #16]
 800cabc:	3301      	adds	r3, #1
 800cabe:	6123      	str	r3, [r4, #16]
 800cac0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cac4:	3b01      	subs	r3, #1
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f8c9 3004 	str.w	r3, [r9, #4]
 800cacc:	f340 8082 	ble.w	800cbd4 <_scanf_float+0x27c>
 800cad0:	f8d9 3000 	ldr.w	r3, [r9]
 800cad4:	3301      	adds	r3, #1
 800cad6:	f8c9 3000 	str.w	r3, [r9]
 800cada:	e762      	b.n	800c9a2 <_scanf_float+0x4a>
 800cadc:	eb1a 0105 	adds.w	r1, sl, r5
 800cae0:	f47f af6d 	bne.w	800c9be <_scanf_float+0x66>
 800cae4:	6822      	ldr	r2, [r4, #0]
 800cae6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800caea:	6022      	str	r2, [r4, #0]
 800caec:	460d      	mov	r5, r1
 800caee:	468a      	mov	sl, r1
 800caf0:	f806 3b01 	strb.w	r3, [r6], #1
 800caf4:	e7de      	b.n	800cab4 <_scanf_float+0x15c>
 800caf6:	6822      	ldr	r2, [r4, #0]
 800caf8:	0610      	lsls	r0, r2, #24
 800cafa:	f57f af60 	bpl.w	800c9be <_scanf_float+0x66>
 800cafe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cb02:	6022      	str	r2, [r4, #0]
 800cb04:	e7f4      	b.n	800caf0 <_scanf_float+0x198>
 800cb06:	f1ba 0f00 	cmp.w	sl, #0
 800cb0a:	d10c      	bne.n	800cb26 <_scanf_float+0x1ce>
 800cb0c:	b977      	cbnz	r7, 800cb2c <_scanf_float+0x1d4>
 800cb0e:	6822      	ldr	r2, [r4, #0]
 800cb10:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cb14:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cb18:	d108      	bne.n	800cb2c <_scanf_float+0x1d4>
 800cb1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cb1e:	6022      	str	r2, [r4, #0]
 800cb20:	f04f 0a01 	mov.w	sl, #1
 800cb24:	e7e4      	b.n	800caf0 <_scanf_float+0x198>
 800cb26:	f1ba 0f02 	cmp.w	sl, #2
 800cb2a:	d050      	beq.n	800cbce <_scanf_float+0x276>
 800cb2c:	2d01      	cmp	r5, #1
 800cb2e:	d002      	beq.n	800cb36 <_scanf_float+0x1de>
 800cb30:	2d04      	cmp	r5, #4
 800cb32:	f47f af44 	bne.w	800c9be <_scanf_float+0x66>
 800cb36:	3501      	adds	r5, #1
 800cb38:	b2ed      	uxtb	r5, r5
 800cb3a:	e7d9      	b.n	800caf0 <_scanf_float+0x198>
 800cb3c:	f1ba 0f01 	cmp.w	sl, #1
 800cb40:	f47f af3d 	bne.w	800c9be <_scanf_float+0x66>
 800cb44:	f04f 0a02 	mov.w	sl, #2
 800cb48:	e7d2      	b.n	800caf0 <_scanf_float+0x198>
 800cb4a:	b975      	cbnz	r5, 800cb6a <_scanf_float+0x212>
 800cb4c:	2f00      	cmp	r7, #0
 800cb4e:	f47f af37 	bne.w	800c9c0 <_scanf_float+0x68>
 800cb52:	6822      	ldr	r2, [r4, #0]
 800cb54:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cb58:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cb5c:	f040 8103 	bne.w	800cd66 <_scanf_float+0x40e>
 800cb60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cb64:	6022      	str	r2, [r4, #0]
 800cb66:	2501      	movs	r5, #1
 800cb68:	e7c2      	b.n	800caf0 <_scanf_float+0x198>
 800cb6a:	2d03      	cmp	r5, #3
 800cb6c:	d0e3      	beq.n	800cb36 <_scanf_float+0x1de>
 800cb6e:	2d05      	cmp	r5, #5
 800cb70:	e7df      	b.n	800cb32 <_scanf_float+0x1da>
 800cb72:	2d02      	cmp	r5, #2
 800cb74:	f47f af23 	bne.w	800c9be <_scanf_float+0x66>
 800cb78:	2503      	movs	r5, #3
 800cb7a:	e7b9      	b.n	800caf0 <_scanf_float+0x198>
 800cb7c:	2d06      	cmp	r5, #6
 800cb7e:	f47f af1e 	bne.w	800c9be <_scanf_float+0x66>
 800cb82:	2507      	movs	r5, #7
 800cb84:	e7b4      	b.n	800caf0 <_scanf_float+0x198>
 800cb86:	6822      	ldr	r2, [r4, #0]
 800cb88:	0591      	lsls	r1, r2, #22
 800cb8a:	f57f af18 	bpl.w	800c9be <_scanf_float+0x66>
 800cb8e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cb92:	6022      	str	r2, [r4, #0]
 800cb94:	9702      	str	r7, [sp, #8]
 800cb96:	e7ab      	b.n	800caf0 <_scanf_float+0x198>
 800cb98:	6822      	ldr	r2, [r4, #0]
 800cb9a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cb9e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cba2:	d005      	beq.n	800cbb0 <_scanf_float+0x258>
 800cba4:	0550      	lsls	r0, r2, #21
 800cba6:	f57f af0a 	bpl.w	800c9be <_scanf_float+0x66>
 800cbaa:	2f00      	cmp	r7, #0
 800cbac:	f000 80db 	beq.w	800cd66 <_scanf_float+0x40e>
 800cbb0:	0591      	lsls	r1, r2, #22
 800cbb2:	bf58      	it	pl
 800cbb4:	9902      	ldrpl	r1, [sp, #8]
 800cbb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cbba:	bf58      	it	pl
 800cbbc:	1a79      	subpl	r1, r7, r1
 800cbbe:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cbc2:	bf58      	it	pl
 800cbc4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cbc8:	6022      	str	r2, [r4, #0]
 800cbca:	2700      	movs	r7, #0
 800cbcc:	e790      	b.n	800caf0 <_scanf_float+0x198>
 800cbce:	f04f 0a03 	mov.w	sl, #3
 800cbd2:	e78d      	b.n	800caf0 <_scanf_float+0x198>
 800cbd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cbd8:	4649      	mov	r1, r9
 800cbda:	4640      	mov	r0, r8
 800cbdc:	4798      	blx	r3
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	f43f aedf 	beq.w	800c9a2 <_scanf_float+0x4a>
 800cbe4:	e6eb      	b.n	800c9be <_scanf_float+0x66>
 800cbe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cbee:	464a      	mov	r2, r9
 800cbf0:	4640      	mov	r0, r8
 800cbf2:	4798      	blx	r3
 800cbf4:	6923      	ldr	r3, [r4, #16]
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	6123      	str	r3, [r4, #16]
 800cbfa:	e6eb      	b.n	800c9d4 <_scanf_float+0x7c>
 800cbfc:	1e6b      	subs	r3, r5, #1
 800cbfe:	2b06      	cmp	r3, #6
 800cc00:	d824      	bhi.n	800cc4c <_scanf_float+0x2f4>
 800cc02:	2d02      	cmp	r5, #2
 800cc04:	d836      	bhi.n	800cc74 <_scanf_float+0x31c>
 800cc06:	9b01      	ldr	r3, [sp, #4]
 800cc08:	429e      	cmp	r6, r3
 800cc0a:	f67f aee7 	bls.w	800c9dc <_scanf_float+0x84>
 800cc0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc16:	464a      	mov	r2, r9
 800cc18:	4640      	mov	r0, r8
 800cc1a:	4798      	blx	r3
 800cc1c:	6923      	ldr	r3, [r4, #16]
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	6123      	str	r3, [r4, #16]
 800cc22:	e7f0      	b.n	800cc06 <_scanf_float+0x2ae>
 800cc24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc28:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cc2c:	464a      	mov	r2, r9
 800cc2e:	4640      	mov	r0, r8
 800cc30:	4798      	blx	r3
 800cc32:	6923      	ldr	r3, [r4, #16]
 800cc34:	3b01      	subs	r3, #1
 800cc36:	6123      	str	r3, [r4, #16]
 800cc38:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cc3c:	fa5f fa8a 	uxtb.w	sl, sl
 800cc40:	f1ba 0f02 	cmp.w	sl, #2
 800cc44:	d1ee      	bne.n	800cc24 <_scanf_float+0x2cc>
 800cc46:	3d03      	subs	r5, #3
 800cc48:	b2ed      	uxtb	r5, r5
 800cc4a:	1b76      	subs	r6, r6, r5
 800cc4c:	6823      	ldr	r3, [r4, #0]
 800cc4e:	05da      	lsls	r2, r3, #23
 800cc50:	d530      	bpl.n	800ccb4 <_scanf_float+0x35c>
 800cc52:	055b      	lsls	r3, r3, #21
 800cc54:	d511      	bpl.n	800cc7a <_scanf_float+0x322>
 800cc56:	9b01      	ldr	r3, [sp, #4]
 800cc58:	429e      	cmp	r6, r3
 800cc5a:	f67f aebf 	bls.w	800c9dc <_scanf_float+0x84>
 800cc5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc66:	464a      	mov	r2, r9
 800cc68:	4640      	mov	r0, r8
 800cc6a:	4798      	blx	r3
 800cc6c:	6923      	ldr	r3, [r4, #16]
 800cc6e:	3b01      	subs	r3, #1
 800cc70:	6123      	str	r3, [r4, #16]
 800cc72:	e7f0      	b.n	800cc56 <_scanf_float+0x2fe>
 800cc74:	46aa      	mov	sl, r5
 800cc76:	46b3      	mov	fp, r6
 800cc78:	e7de      	b.n	800cc38 <_scanf_float+0x2e0>
 800cc7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cc7e:	6923      	ldr	r3, [r4, #16]
 800cc80:	2965      	cmp	r1, #101	@ 0x65
 800cc82:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cc86:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800cc8a:	6123      	str	r3, [r4, #16]
 800cc8c:	d00c      	beq.n	800cca8 <_scanf_float+0x350>
 800cc8e:	2945      	cmp	r1, #69	@ 0x45
 800cc90:	d00a      	beq.n	800cca8 <_scanf_float+0x350>
 800cc92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc96:	464a      	mov	r2, r9
 800cc98:	4640      	mov	r0, r8
 800cc9a:	4798      	blx	r3
 800cc9c:	6923      	ldr	r3, [r4, #16]
 800cc9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cca2:	3b01      	subs	r3, #1
 800cca4:	1eb5      	subs	r5, r6, #2
 800cca6:	6123      	str	r3, [r4, #16]
 800cca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccac:	464a      	mov	r2, r9
 800ccae:	4640      	mov	r0, r8
 800ccb0:	4798      	blx	r3
 800ccb2:	462e      	mov	r6, r5
 800ccb4:	6822      	ldr	r2, [r4, #0]
 800ccb6:	f012 0210 	ands.w	r2, r2, #16
 800ccba:	d001      	beq.n	800ccc0 <_scanf_float+0x368>
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	e68e      	b.n	800c9de <_scanf_float+0x86>
 800ccc0:	7032      	strb	r2, [r6, #0]
 800ccc2:	6823      	ldr	r3, [r4, #0]
 800ccc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ccc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cccc:	d125      	bne.n	800cd1a <_scanf_float+0x3c2>
 800ccce:	9b02      	ldr	r3, [sp, #8]
 800ccd0:	429f      	cmp	r7, r3
 800ccd2:	d00a      	beq.n	800ccea <_scanf_float+0x392>
 800ccd4:	1bda      	subs	r2, r3, r7
 800ccd6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ccda:	429e      	cmp	r6, r3
 800ccdc:	bf28      	it	cs
 800ccde:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cce2:	4922      	ldr	r1, [pc, #136]	@ (800cd6c <_scanf_float+0x414>)
 800cce4:	4630      	mov	r0, r6
 800cce6:	f000 f87b 	bl	800cde0 <siprintf>
 800ccea:	9901      	ldr	r1, [sp, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	4640      	mov	r0, r8
 800ccf0:	f000 ff82 	bl	800dbf8 <_strtod_r>
 800ccf4:	9b03      	ldr	r3, [sp, #12]
 800ccf6:	6821      	ldr	r1, [r4, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f011 0f02 	tst.w	r1, #2
 800ccfe:	ec57 6b10 	vmov	r6, r7, d0
 800cd02:	f103 0204 	add.w	r2, r3, #4
 800cd06:	d015      	beq.n	800cd34 <_scanf_float+0x3dc>
 800cd08:	9903      	ldr	r1, [sp, #12]
 800cd0a:	600a      	str	r2, [r1, #0]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	e9c3 6700 	strd	r6, r7, [r3]
 800cd12:	68e3      	ldr	r3, [r4, #12]
 800cd14:	3301      	adds	r3, #1
 800cd16:	60e3      	str	r3, [r4, #12]
 800cd18:	e7d0      	b.n	800ccbc <_scanf_float+0x364>
 800cd1a:	9b04      	ldr	r3, [sp, #16]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d0e4      	beq.n	800ccea <_scanf_float+0x392>
 800cd20:	9905      	ldr	r1, [sp, #20]
 800cd22:	230a      	movs	r3, #10
 800cd24:	3101      	adds	r1, #1
 800cd26:	4640      	mov	r0, r8
 800cd28:	f000 ffe6 	bl	800dcf8 <_strtol_r>
 800cd2c:	9b04      	ldr	r3, [sp, #16]
 800cd2e:	9e05      	ldr	r6, [sp, #20]
 800cd30:	1ac2      	subs	r2, r0, r3
 800cd32:	e7d0      	b.n	800ccd6 <_scanf_float+0x37e>
 800cd34:	f011 0f04 	tst.w	r1, #4
 800cd38:	9903      	ldr	r1, [sp, #12]
 800cd3a:	600a      	str	r2, [r1, #0]
 800cd3c:	d1e6      	bne.n	800cd0c <_scanf_float+0x3b4>
 800cd3e:	681d      	ldr	r5, [r3, #0]
 800cd40:	4632      	mov	r2, r6
 800cd42:	463b      	mov	r3, r7
 800cd44:	4630      	mov	r0, r6
 800cd46:	4639      	mov	r1, r7
 800cd48:	f7f3 ff20 	bl	8000b8c <__aeabi_dcmpun>
 800cd4c:	b128      	cbz	r0, 800cd5a <_scanf_float+0x402>
 800cd4e:	4808      	ldr	r0, [pc, #32]	@ (800cd70 <_scanf_float+0x418>)
 800cd50:	f001 f89a 	bl	800de88 <nanf>
 800cd54:	ed85 0a00 	vstr	s0, [r5]
 800cd58:	e7db      	b.n	800cd12 <_scanf_float+0x3ba>
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	f7f3 ff73 	bl	8000c48 <__aeabi_d2f>
 800cd62:	6028      	str	r0, [r5, #0]
 800cd64:	e7d5      	b.n	800cd12 <_scanf_float+0x3ba>
 800cd66:	2700      	movs	r7, #0
 800cd68:	e62e      	b.n	800c9c8 <_scanf_float+0x70>
 800cd6a:	bf00      	nop
 800cd6c:	080113b0 	.word	0x080113b0
 800cd70:	08011551 	.word	0x08011551

0800cd74 <sniprintf>:
 800cd74:	b40c      	push	{r2, r3}
 800cd76:	b530      	push	{r4, r5, lr}
 800cd78:	4b18      	ldr	r3, [pc, #96]	@ (800cddc <sniprintf+0x68>)
 800cd7a:	1e0c      	subs	r4, r1, #0
 800cd7c:	681d      	ldr	r5, [r3, #0]
 800cd7e:	b09d      	sub	sp, #116	@ 0x74
 800cd80:	da08      	bge.n	800cd94 <sniprintf+0x20>
 800cd82:	238b      	movs	r3, #139	@ 0x8b
 800cd84:	602b      	str	r3, [r5, #0]
 800cd86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd8a:	b01d      	add	sp, #116	@ 0x74
 800cd8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd90:	b002      	add	sp, #8
 800cd92:	4770      	bx	lr
 800cd94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cd98:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cd9c:	f04f 0300 	mov.w	r3, #0
 800cda0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cda2:	bf14      	ite	ne
 800cda4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800cda8:	4623      	moveq	r3, r4
 800cdaa:	9304      	str	r3, [sp, #16]
 800cdac:	9307      	str	r3, [sp, #28]
 800cdae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cdb2:	9002      	str	r0, [sp, #8]
 800cdb4:	9006      	str	r0, [sp, #24]
 800cdb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cdba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cdbc:	ab21      	add	r3, sp, #132	@ 0x84
 800cdbe:	a902      	add	r1, sp, #8
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	9301      	str	r3, [sp, #4]
 800cdc4:	f002 fa9e 	bl	800f304 <_svfiprintf_r>
 800cdc8:	1c43      	adds	r3, r0, #1
 800cdca:	bfbc      	itt	lt
 800cdcc:	238b      	movlt	r3, #139	@ 0x8b
 800cdce:	602b      	strlt	r3, [r5, #0]
 800cdd0:	2c00      	cmp	r4, #0
 800cdd2:	d0da      	beq.n	800cd8a <sniprintf+0x16>
 800cdd4:	9b02      	ldr	r3, [sp, #8]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	701a      	strb	r2, [r3, #0]
 800cdda:	e7d6      	b.n	800cd8a <sniprintf+0x16>
 800cddc:	20000544 	.word	0x20000544

0800cde0 <siprintf>:
 800cde0:	b40e      	push	{r1, r2, r3}
 800cde2:	b510      	push	{r4, lr}
 800cde4:	b09d      	sub	sp, #116	@ 0x74
 800cde6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cde8:	9002      	str	r0, [sp, #8]
 800cdea:	9006      	str	r0, [sp, #24]
 800cdec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cdf0:	480a      	ldr	r0, [pc, #40]	@ (800ce1c <siprintf+0x3c>)
 800cdf2:	9107      	str	r1, [sp, #28]
 800cdf4:	9104      	str	r1, [sp, #16]
 800cdf6:	490a      	ldr	r1, [pc, #40]	@ (800ce20 <siprintf+0x40>)
 800cdf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdfc:	9105      	str	r1, [sp, #20]
 800cdfe:	2400      	movs	r4, #0
 800ce00:	a902      	add	r1, sp, #8
 800ce02:	6800      	ldr	r0, [r0, #0]
 800ce04:	9301      	str	r3, [sp, #4]
 800ce06:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ce08:	f002 fa7c 	bl	800f304 <_svfiprintf_r>
 800ce0c:	9b02      	ldr	r3, [sp, #8]
 800ce0e:	701c      	strb	r4, [r3, #0]
 800ce10:	b01d      	add	sp, #116	@ 0x74
 800ce12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce16:	b003      	add	sp, #12
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	20000544 	.word	0x20000544
 800ce20:	ffff0208 	.word	0xffff0208

0800ce24 <__sread>:
 800ce24:	b510      	push	{r4, lr}
 800ce26:	460c      	mov	r4, r1
 800ce28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce2c:	f000 ffb0 	bl	800dd90 <_read_r>
 800ce30:	2800      	cmp	r0, #0
 800ce32:	bfab      	itete	ge
 800ce34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce36:	89a3      	ldrhlt	r3, [r4, #12]
 800ce38:	181b      	addge	r3, r3, r0
 800ce3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce3e:	bfac      	ite	ge
 800ce40:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce42:	81a3      	strhlt	r3, [r4, #12]
 800ce44:	bd10      	pop	{r4, pc}

0800ce46 <__swrite>:
 800ce46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce4a:	461f      	mov	r7, r3
 800ce4c:	898b      	ldrh	r3, [r1, #12]
 800ce4e:	05db      	lsls	r3, r3, #23
 800ce50:	4605      	mov	r5, r0
 800ce52:	460c      	mov	r4, r1
 800ce54:	4616      	mov	r6, r2
 800ce56:	d505      	bpl.n	800ce64 <__swrite+0x1e>
 800ce58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce5c:	2302      	movs	r3, #2
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f000 ff84 	bl	800dd6c <_lseek_r>
 800ce64:	89a3      	ldrh	r3, [r4, #12]
 800ce66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce6e:	81a3      	strh	r3, [r4, #12]
 800ce70:	4632      	mov	r2, r6
 800ce72:	463b      	mov	r3, r7
 800ce74:	4628      	mov	r0, r5
 800ce76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7a:	f000 bf9b 	b.w	800ddb4 <_write_r>

0800ce7e <__sseek>:
 800ce7e:	b510      	push	{r4, lr}
 800ce80:	460c      	mov	r4, r1
 800ce82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce86:	f000 ff71 	bl	800dd6c <_lseek_r>
 800ce8a:	1c43      	adds	r3, r0, #1
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	bf15      	itete	ne
 800ce90:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ce92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ce96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ce9a:	81a3      	strheq	r3, [r4, #12]
 800ce9c:	bf18      	it	ne
 800ce9e:	81a3      	strhne	r3, [r4, #12]
 800cea0:	bd10      	pop	{r4, pc}

0800cea2 <__sclose>:
 800cea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea6:	f000 bfc9 	b.w	800de3c <_close_r>
	...

0800ceac <std>:
 800ceac:	2300      	movs	r3, #0
 800ceae:	b510      	push	{r4, lr}
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	e9c0 3300 	strd	r3, r3, [r0]
 800ceb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ceba:	6083      	str	r3, [r0, #8]
 800cebc:	8181      	strh	r1, [r0, #12]
 800cebe:	6643      	str	r3, [r0, #100]	@ 0x64
 800cec0:	81c2      	strh	r2, [r0, #14]
 800cec2:	6183      	str	r3, [r0, #24]
 800cec4:	4619      	mov	r1, r3
 800cec6:	2208      	movs	r2, #8
 800cec8:	305c      	adds	r0, #92	@ 0x5c
 800ceca:	f000 ff35 	bl	800dd38 <memset>
 800cece:	4b0d      	ldr	r3, [pc, #52]	@ (800cf04 <std+0x58>)
 800ced0:	6263      	str	r3, [r4, #36]	@ 0x24
 800ced2:	4b0d      	ldr	r3, [pc, #52]	@ (800cf08 <std+0x5c>)
 800ced4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ced6:	4b0d      	ldr	r3, [pc, #52]	@ (800cf0c <std+0x60>)
 800ced8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ceda:	4b0d      	ldr	r3, [pc, #52]	@ (800cf10 <std+0x64>)
 800cedc:	6323      	str	r3, [r4, #48]	@ 0x30
 800cede:	4b0d      	ldr	r3, [pc, #52]	@ (800cf14 <std+0x68>)
 800cee0:	6224      	str	r4, [r4, #32]
 800cee2:	429c      	cmp	r4, r3
 800cee4:	d006      	beq.n	800cef4 <std+0x48>
 800cee6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ceea:	4294      	cmp	r4, r2
 800ceec:	d002      	beq.n	800cef4 <std+0x48>
 800ceee:	33d0      	adds	r3, #208	@ 0xd0
 800cef0:	429c      	cmp	r4, r3
 800cef2:	d105      	bne.n	800cf00 <std+0x54>
 800cef4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cefc:	f000 bf96 	b.w	800de2c <__retarget_lock_init_recursive>
 800cf00:	bd10      	pop	{r4, pc}
 800cf02:	bf00      	nop
 800cf04:	0800ce25 	.word	0x0800ce25
 800cf08:	0800ce47 	.word	0x0800ce47
 800cf0c:	0800ce7f 	.word	0x0800ce7f
 800cf10:	0800cea3 	.word	0x0800cea3
 800cf14:	20000d88 	.word	0x20000d88

0800cf18 <stdio_exit_handler>:
 800cf18:	4a02      	ldr	r2, [pc, #8]	@ (800cf24 <stdio_exit_handler+0xc>)
 800cf1a:	4903      	ldr	r1, [pc, #12]	@ (800cf28 <stdio_exit_handler+0x10>)
 800cf1c:	4803      	ldr	r0, [pc, #12]	@ (800cf2c <stdio_exit_handler+0x14>)
 800cf1e:	f000 beed 	b.w	800dcfc <_fwalk_sglue>
 800cf22:	bf00      	nop
 800cf24:	200003cc 	.word	0x200003cc
 800cf28:	0800f77d 	.word	0x0800f77d
 800cf2c:	20000548 	.word	0x20000548

0800cf30 <cleanup_stdio>:
 800cf30:	6841      	ldr	r1, [r0, #4]
 800cf32:	4b0c      	ldr	r3, [pc, #48]	@ (800cf64 <cleanup_stdio+0x34>)
 800cf34:	4299      	cmp	r1, r3
 800cf36:	b510      	push	{r4, lr}
 800cf38:	4604      	mov	r4, r0
 800cf3a:	d001      	beq.n	800cf40 <cleanup_stdio+0x10>
 800cf3c:	f002 fc1e 	bl	800f77c <_fflush_r>
 800cf40:	68a1      	ldr	r1, [r4, #8]
 800cf42:	4b09      	ldr	r3, [pc, #36]	@ (800cf68 <cleanup_stdio+0x38>)
 800cf44:	4299      	cmp	r1, r3
 800cf46:	d002      	beq.n	800cf4e <cleanup_stdio+0x1e>
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f002 fc17 	bl	800f77c <_fflush_r>
 800cf4e:	68e1      	ldr	r1, [r4, #12]
 800cf50:	4b06      	ldr	r3, [pc, #24]	@ (800cf6c <cleanup_stdio+0x3c>)
 800cf52:	4299      	cmp	r1, r3
 800cf54:	d004      	beq.n	800cf60 <cleanup_stdio+0x30>
 800cf56:	4620      	mov	r0, r4
 800cf58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf5c:	f002 bc0e 	b.w	800f77c <_fflush_r>
 800cf60:	bd10      	pop	{r4, pc}
 800cf62:	bf00      	nop
 800cf64:	20000d88 	.word	0x20000d88
 800cf68:	20000df0 	.word	0x20000df0
 800cf6c:	20000e58 	.word	0x20000e58

0800cf70 <global_stdio_init.part.0>:
 800cf70:	b510      	push	{r4, lr}
 800cf72:	4b0b      	ldr	r3, [pc, #44]	@ (800cfa0 <global_stdio_init.part.0+0x30>)
 800cf74:	4c0b      	ldr	r4, [pc, #44]	@ (800cfa4 <global_stdio_init.part.0+0x34>)
 800cf76:	4a0c      	ldr	r2, [pc, #48]	@ (800cfa8 <global_stdio_init.part.0+0x38>)
 800cf78:	601a      	str	r2, [r3, #0]
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2104      	movs	r1, #4
 800cf80:	f7ff ff94 	bl	800ceac <std>
 800cf84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf88:	2201      	movs	r2, #1
 800cf8a:	2109      	movs	r1, #9
 800cf8c:	f7ff ff8e 	bl	800ceac <std>
 800cf90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf94:	2202      	movs	r2, #2
 800cf96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf9a:	2112      	movs	r1, #18
 800cf9c:	f7ff bf86 	b.w	800ceac <std>
 800cfa0:	20000ec0 	.word	0x20000ec0
 800cfa4:	20000d88 	.word	0x20000d88
 800cfa8:	0800cf19 	.word	0x0800cf19

0800cfac <__sfp_lock_acquire>:
 800cfac:	4801      	ldr	r0, [pc, #4]	@ (800cfb4 <__sfp_lock_acquire+0x8>)
 800cfae:	f000 bf3e 	b.w	800de2e <__retarget_lock_acquire_recursive>
 800cfb2:	bf00      	nop
 800cfb4:	20000ec5 	.word	0x20000ec5

0800cfb8 <__sfp_lock_release>:
 800cfb8:	4801      	ldr	r0, [pc, #4]	@ (800cfc0 <__sfp_lock_release+0x8>)
 800cfba:	f000 bf39 	b.w	800de30 <__retarget_lock_release_recursive>
 800cfbe:	bf00      	nop
 800cfc0:	20000ec5 	.word	0x20000ec5

0800cfc4 <__sinit>:
 800cfc4:	b510      	push	{r4, lr}
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	f7ff fff0 	bl	800cfac <__sfp_lock_acquire>
 800cfcc:	6a23      	ldr	r3, [r4, #32]
 800cfce:	b11b      	cbz	r3, 800cfd8 <__sinit+0x14>
 800cfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfd4:	f7ff bff0 	b.w	800cfb8 <__sfp_lock_release>
 800cfd8:	4b04      	ldr	r3, [pc, #16]	@ (800cfec <__sinit+0x28>)
 800cfda:	6223      	str	r3, [r4, #32]
 800cfdc:	4b04      	ldr	r3, [pc, #16]	@ (800cff0 <__sinit+0x2c>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1f5      	bne.n	800cfd0 <__sinit+0xc>
 800cfe4:	f7ff ffc4 	bl	800cf70 <global_stdio_init.part.0>
 800cfe8:	e7f2      	b.n	800cfd0 <__sinit+0xc>
 800cfea:	bf00      	nop
 800cfec:	0800cf31 	.word	0x0800cf31
 800cff0:	20000ec0 	.word	0x20000ec0

0800cff4 <sulp>:
 800cff4:	b570      	push	{r4, r5, r6, lr}
 800cff6:	4604      	mov	r4, r0
 800cff8:	460d      	mov	r5, r1
 800cffa:	ec45 4b10 	vmov	d0, r4, r5
 800cffe:	4616      	mov	r6, r2
 800d000:	f002 ff5c 	bl	800febc <__ulp>
 800d004:	ec51 0b10 	vmov	r0, r1, d0
 800d008:	b17e      	cbz	r6, 800d02a <sulp+0x36>
 800d00a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d00e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d012:	2b00      	cmp	r3, #0
 800d014:	dd09      	ble.n	800d02a <sulp+0x36>
 800d016:	051b      	lsls	r3, r3, #20
 800d018:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d01c:	2400      	movs	r4, #0
 800d01e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d022:	4622      	mov	r2, r4
 800d024:	462b      	mov	r3, r5
 800d026:	f7f3 fb17 	bl	8000658 <__aeabi_dmul>
 800d02a:	ec41 0b10 	vmov	d0, r0, r1
 800d02e:	bd70      	pop	{r4, r5, r6, pc}

0800d030 <_strtod_l>:
 800d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d034:	b09f      	sub	sp, #124	@ 0x7c
 800d036:	460c      	mov	r4, r1
 800d038:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d03a:	2200      	movs	r2, #0
 800d03c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d03e:	9005      	str	r0, [sp, #20]
 800d040:	f04f 0a00 	mov.w	sl, #0
 800d044:	f04f 0b00 	mov.w	fp, #0
 800d048:	460a      	mov	r2, r1
 800d04a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d04c:	7811      	ldrb	r1, [r2, #0]
 800d04e:	292b      	cmp	r1, #43	@ 0x2b
 800d050:	d04a      	beq.n	800d0e8 <_strtod_l+0xb8>
 800d052:	d838      	bhi.n	800d0c6 <_strtod_l+0x96>
 800d054:	290d      	cmp	r1, #13
 800d056:	d832      	bhi.n	800d0be <_strtod_l+0x8e>
 800d058:	2908      	cmp	r1, #8
 800d05a:	d832      	bhi.n	800d0c2 <_strtod_l+0x92>
 800d05c:	2900      	cmp	r1, #0
 800d05e:	d03b      	beq.n	800d0d8 <_strtod_l+0xa8>
 800d060:	2200      	movs	r2, #0
 800d062:	920e      	str	r2, [sp, #56]	@ 0x38
 800d064:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d066:	782a      	ldrb	r2, [r5, #0]
 800d068:	2a30      	cmp	r2, #48	@ 0x30
 800d06a:	f040 80b2 	bne.w	800d1d2 <_strtod_l+0x1a2>
 800d06e:	786a      	ldrb	r2, [r5, #1]
 800d070:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d074:	2a58      	cmp	r2, #88	@ 0x58
 800d076:	d16e      	bne.n	800d156 <_strtod_l+0x126>
 800d078:	9302      	str	r3, [sp, #8]
 800d07a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d07c:	9301      	str	r3, [sp, #4]
 800d07e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d080:	9300      	str	r3, [sp, #0]
 800d082:	4a8f      	ldr	r2, [pc, #572]	@ (800d2c0 <_strtod_l+0x290>)
 800d084:	9805      	ldr	r0, [sp, #20]
 800d086:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d088:	a919      	add	r1, sp, #100	@ 0x64
 800d08a:	f001 fe0f 	bl	800ecac <__gethex>
 800d08e:	f010 060f 	ands.w	r6, r0, #15
 800d092:	4604      	mov	r4, r0
 800d094:	d005      	beq.n	800d0a2 <_strtod_l+0x72>
 800d096:	2e06      	cmp	r6, #6
 800d098:	d128      	bne.n	800d0ec <_strtod_l+0xbc>
 800d09a:	3501      	adds	r5, #1
 800d09c:	2300      	movs	r3, #0
 800d09e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d0a0:	930e      	str	r3, [sp, #56]	@ 0x38
 800d0a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f040 858e 	bne.w	800dbc6 <_strtod_l+0xb96>
 800d0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0ac:	b1cb      	cbz	r3, 800d0e2 <_strtod_l+0xb2>
 800d0ae:	4652      	mov	r2, sl
 800d0b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d0b4:	ec43 2b10 	vmov	d0, r2, r3
 800d0b8:	b01f      	add	sp, #124	@ 0x7c
 800d0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0be:	2920      	cmp	r1, #32
 800d0c0:	d1ce      	bne.n	800d060 <_strtod_l+0x30>
 800d0c2:	3201      	adds	r2, #1
 800d0c4:	e7c1      	b.n	800d04a <_strtod_l+0x1a>
 800d0c6:	292d      	cmp	r1, #45	@ 0x2d
 800d0c8:	d1ca      	bne.n	800d060 <_strtod_l+0x30>
 800d0ca:	2101      	movs	r1, #1
 800d0cc:	910e      	str	r1, [sp, #56]	@ 0x38
 800d0ce:	1c51      	adds	r1, r2, #1
 800d0d0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d0d2:	7852      	ldrb	r2, [r2, #1]
 800d0d4:	2a00      	cmp	r2, #0
 800d0d6:	d1c5      	bne.n	800d064 <_strtod_l+0x34>
 800d0d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d0da:	9419      	str	r4, [sp, #100]	@ 0x64
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f040 8570 	bne.w	800dbc2 <_strtod_l+0xb92>
 800d0e2:	4652      	mov	r2, sl
 800d0e4:	465b      	mov	r3, fp
 800d0e6:	e7e5      	b.n	800d0b4 <_strtod_l+0x84>
 800d0e8:	2100      	movs	r1, #0
 800d0ea:	e7ef      	b.n	800d0cc <_strtod_l+0x9c>
 800d0ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d0ee:	b13a      	cbz	r2, 800d100 <_strtod_l+0xd0>
 800d0f0:	2135      	movs	r1, #53	@ 0x35
 800d0f2:	a81c      	add	r0, sp, #112	@ 0x70
 800d0f4:	f002 ffdc 	bl	80100b0 <__copybits>
 800d0f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0fa:	9805      	ldr	r0, [sp, #20]
 800d0fc:	f002 fbb2 	bl	800f864 <_Bfree>
 800d100:	3e01      	subs	r6, #1
 800d102:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d104:	2e04      	cmp	r6, #4
 800d106:	d806      	bhi.n	800d116 <_strtod_l+0xe6>
 800d108:	e8df f006 	tbb	[pc, r6]
 800d10c:	201d0314 	.word	0x201d0314
 800d110:	14          	.byte	0x14
 800d111:	00          	.byte	0x00
 800d112:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d116:	05e1      	lsls	r1, r4, #23
 800d118:	bf48      	it	mi
 800d11a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d11e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d122:	0d1b      	lsrs	r3, r3, #20
 800d124:	051b      	lsls	r3, r3, #20
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1bb      	bne.n	800d0a2 <_strtod_l+0x72>
 800d12a:	f000 fe55 	bl	800ddd8 <__errno>
 800d12e:	2322      	movs	r3, #34	@ 0x22
 800d130:	6003      	str	r3, [r0, #0]
 800d132:	e7b6      	b.n	800d0a2 <_strtod_l+0x72>
 800d134:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d138:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d13c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d140:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d144:	e7e7      	b.n	800d116 <_strtod_l+0xe6>
 800d146:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d2c8 <_strtod_l+0x298>
 800d14a:	e7e4      	b.n	800d116 <_strtod_l+0xe6>
 800d14c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d150:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d154:	e7df      	b.n	800d116 <_strtod_l+0xe6>
 800d156:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d158:	1c5a      	adds	r2, r3, #1
 800d15a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d15c:	785b      	ldrb	r3, [r3, #1]
 800d15e:	2b30      	cmp	r3, #48	@ 0x30
 800d160:	d0f9      	beq.n	800d156 <_strtod_l+0x126>
 800d162:	2b00      	cmp	r3, #0
 800d164:	d09d      	beq.n	800d0a2 <_strtod_l+0x72>
 800d166:	2301      	movs	r3, #1
 800d168:	2700      	movs	r7, #0
 800d16a:	9308      	str	r3, [sp, #32]
 800d16c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d16e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d170:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d172:	46b9      	mov	r9, r7
 800d174:	220a      	movs	r2, #10
 800d176:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d178:	7805      	ldrb	r5, [r0, #0]
 800d17a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d17e:	b2d9      	uxtb	r1, r3
 800d180:	2909      	cmp	r1, #9
 800d182:	d928      	bls.n	800d1d6 <_strtod_l+0x1a6>
 800d184:	494f      	ldr	r1, [pc, #316]	@ (800d2c4 <_strtod_l+0x294>)
 800d186:	2201      	movs	r2, #1
 800d188:	f000 fdde 	bl	800dd48 <strncmp>
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d032      	beq.n	800d1f6 <_strtod_l+0x1c6>
 800d190:	2000      	movs	r0, #0
 800d192:	462a      	mov	r2, r5
 800d194:	900a      	str	r0, [sp, #40]	@ 0x28
 800d196:	464d      	mov	r5, r9
 800d198:	4603      	mov	r3, r0
 800d19a:	2a65      	cmp	r2, #101	@ 0x65
 800d19c:	d001      	beq.n	800d1a2 <_strtod_l+0x172>
 800d19e:	2a45      	cmp	r2, #69	@ 0x45
 800d1a0:	d114      	bne.n	800d1cc <_strtod_l+0x19c>
 800d1a2:	b91d      	cbnz	r5, 800d1ac <_strtod_l+0x17c>
 800d1a4:	9a08      	ldr	r2, [sp, #32]
 800d1a6:	4302      	orrs	r2, r0
 800d1a8:	d096      	beq.n	800d0d8 <_strtod_l+0xa8>
 800d1aa:	2500      	movs	r5, #0
 800d1ac:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d1ae:	1c62      	adds	r2, r4, #1
 800d1b0:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1b2:	7862      	ldrb	r2, [r4, #1]
 800d1b4:	2a2b      	cmp	r2, #43	@ 0x2b
 800d1b6:	d07a      	beq.n	800d2ae <_strtod_l+0x27e>
 800d1b8:	2a2d      	cmp	r2, #45	@ 0x2d
 800d1ba:	d07e      	beq.n	800d2ba <_strtod_l+0x28a>
 800d1bc:	f04f 0c00 	mov.w	ip, #0
 800d1c0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d1c4:	2909      	cmp	r1, #9
 800d1c6:	f240 8085 	bls.w	800d2d4 <_strtod_l+0x2a4>
 800d1ca:	9419      	str	r4, [sp, #100]	@ 0x64
 800d1cc:	f04f 0800 	mov.w	r8, #0
 800d1d0:	e0a5      	b.n	800d31e <_strtod_l+0x2ee>
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	e7c8      	b.n	800d168 <_strtod_l+0x138>
 800d1d6:	f1b9 0f08 	cmp.w	r9, #8
 800d1da:	bfd8      	it	le
 800d1dc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d1de:	f100 0001 	add.w	r0, r0, #1
 800d1e2:	bfda      	itte	le
 800d1e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d1e8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d1ea:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d1ee:	f109 0901 	add.w	r9, r9, #1
 800d1f2:	9019      	str	r0, [sp, #100]	@ 0x64
 800d1f4:	e7bf      	b.n	800d176 <_strtod_l+0x146>
 800d1f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1f8:	1c5a      	adds	r2, r3, #1
 800d1fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1fc:	785a      	ldrb	r2, [r3, #1]
 800d1fe:	f1b9 0f00 	cmp.w	r9, #0
 800d202:	d03b      	beq.n	800d27c <_strtod_l+0x24c>
 800d204:	900a      	str	r0, [sp, #40]	@ 0x28
 800d206:	464d      	mov	r5, r9
 800d208:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d20c:	2b09      	cmp	r3, #9
 800d20e:	d912      	bls.n	800d236 <_strtod_l+0x206>
 800d210:	2301      	movs	r3, #1
 800d212:	e7c2      	b.n	800d19a <_strtod_l+0x16a>
 800d214:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d216:	1c5a      	adds	r2, r3, #1
 800d218:	9219      	str	r2, [sp, #100]	@ 0x64
 800d21a:	785a      	ldrb	r2, [r3, #1]
 800d21c:	3001      	adds	r0, #1
 800d21e:	2a30      	cmp	r2, #48	@ 0x30
 800d220:	d0f8      	beq.n	800d214 <_strtod_l+0x1e4>
 800d222:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d226:	2b08      	cmp	r3, #8
 800d228:	f200 84d2 	bhi.w	800dbd0 <_strtod_l+0xba0>
 800d22c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d22e:	900a      	str	r0, [sp, #40]	@ 0x28
 800d230:	2000      	movs	r0, #0
 800d232:	930c      	str	r3, [sp, #48]	@ 0x30
 800d234:	4605      	mov	r5, r0
 800d236:	3a30      	subs	r2, #48	@ 0x30
 800d238:	f100 0301 	add.w	r3, r0, #1
 800d23c:	d018      	beq.n	800d270 <_strtod_l+0x240>
 800d23e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d240:	4419      	add	r1, r3
 800d242:	910a      	str	r1, [sp, #40]	@ 0x28
 800d244:	462e      	mov	r6, r5
 800d246:	f04f 0e0a 	mov.w	lr, #10
 800d24a:	1c71      	adds	r1, r6, #1
 800d24c:	eba1 0c05 	sub.w	ip, r1, r5
 800d250:	4563      	cmp	r3, ip
 800d252:	dc15      	bgt.n	800d280 <_strtod_l+0x250>
 800d254:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d258:	182b      	adds	r3, r5, r0
 800d25a:	2b08      	cmp	r3, #8
 800d25c:	f105 0501 	add.w	r5, r5, #1
 800d260:	4405      	add	r5, r0
 800d262:	dc1a      	bgt.n	800d29a <_strtod_l+0x26a>
 800d264:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d266:	230a      	movs	r3, #10
 800d268:	fb03 2301 	mla	r3, r3, r1, r2
 800d26c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d26e:	2300      	movs	r3, #0
 800d270:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d272:	1c51      	adds	r1, r2, #1
 800d274:	9119      	str	r1, [sp, #100]	@ 0x64
 800d276:	7852      	ldrb	r2, [r2, #1]
 800d278:	4618      	mov	r0, r3
 800d27a:	e7c5      	b.n	800d208 <_strtod_l+0x1d8>
 800d27c:	4648      	mov	r0, r9
 800d27e:	e7ce      	b.n	800d21e <_strtod_l+0x1ee>
 800d280:	2e08      	cmp	r6, #8
 800d282:	dc05      	bgt.n	800d290 <_strtod_l+0x260>
 800d284:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d286:	fb0e f606 	mul.w	r6, lr, r6
 800d28a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d28c:	460e      	mov	r6, r1
 800d28e:	e7dc      	b.n	800d24a <_strtod_l+0x21a>
 800d290:	2910      	cmp	r1, #16
 800d292:	bfd8      	it	le
 800d294:	fb0e f707 	mulle.w	r7, lr, r7
 800d298:	e7f8      	b.n	800d28c <_strtod_l+0x25c>
 800d29a:	2b0f      	cmp	r3, #15
 800d29c:	bfdc      	itt	le
 800d29e:	230a      	movle	r3, #10
 800d2a0:	fb03 2707 	mlale	r7, r3, r7, r2
 800d2a4:	e7e3      	b.n	800d26e <_strtod_l+0x23e>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e77a      	b.n	800d1a4 <_strtod_l+0x174>
 800d2ae:	f04f 0c00 	mov.w	ip, #0
 800d2b2:	1ca2      	adds	r2, r4, #2
 800d2b4:	9219      	str	r2, [sp, #100]	@ 0x64
 800d2b6:	78a2      	ldrb	r2, [r4, #2]
 800d2b8:	e782      	b.n	800d1c0 <_strtod_l+0x190>
 800d2ba:	f04f 0c01 	mov.w	ip, #1
 800d2be:	e7f8      	b.n	800d2b2 <_strtod_l+0x282>
 800d2c0:	08011568 	.word	0x08011568
 800d2c4:	080113b5 	.word	0x080113b5
 800d2c8:	7ff00000 	.word	0x7ff00000
 800d2cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2ce:	1c51      	adds	r1, r2, #1
 800d2d0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d2d2:	7852      	ldrb	r2, [r2, #1]
 800d2d4:	2a30      	cmp	r2, #48	@ 0x30
 800d2d6:	d0f9      	beq.n	800d2cc <_strtod_l+0x29c>
 800d2d8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d2dc:	2908      	cmp	r1, #8
 800d2de:	f63f af75 	bhi.w	800d1cc <_strtod_l+0x19c>
 800d2e2:	3a30      	subs	r2, #48	@ 0x30
 800d2e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2e8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d2ea:	f04f 080a 	mov.w	r8, #10
 800d2ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2f0:	1c56      	adds	r6, r2, #1
 800d2f2:	9619      	str	r6, [sp, #100]	@ 0x64
 800d2f4:	7852      	ldrb	r2, [r2, #1]
 800d2f6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d2fa:	f1be 0f09 	cmp.w	lr, #9
 800d2fe:	d939      	bls.n	800d374 <_strtod_l+0x344>
 800d300:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d302:	1a76      	subs	r6, r6, r1
 800d304:	2e08      	cmp	r6, #8
 800d306:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d30a:	dc03      	bgt.n	800d314 <_strtod_l+0x2e4>
 800d30c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d30e:	4588      	cmp	r8, r1
 800d310:	bfa8      	it	ge
 800d312:	4688      	movge	r8, r1
 800d314:	f1bc 0f00 	cmp.w	ip, #0
 800d318:	d001      	beq.n	800d31e <_strtod_l+0x2ee>
 800d31a:	f1c8 0800 	rsb	r8, r8, #0
 800d31e:	2d00      	cmp	r5, #0
 800d320:	d14e      	bne.n	800d3c0 <_strtod_l+0x390>
 800d322:	9908      	ldr	r1, [sp, #32]
 800d324:	4308      	orrs	r0, r1
 800d326:	f47f aebc 	bne.w	800d0a2 <_strtod_l+0x72>
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f47f aed4 	bne.w	800d0d8 <_strtod_l+0xa8>
 800d330:	2a69      	cmp	r2, #105	@ 0x69
 800d332:	d028      	beq.n	800d386 <_strtod_l+0x356>
 800d334:	dc25      	bgt.n	800d382 <_strtod_l+0x352>
 800d336:	2a49      	cmp	r2, #73	@ 0x49
 800d338:	d025      	beq.n	800d386 <_strtod_l+0x356>
 800d33a:	2a4e      	cmp	r2, #78	@ 0x4e
 800d33c:	f47f aecc 	bne.w	800d0d8 <_strtod_l+0xa8>
 800d340:	499a      	ldr	r1, [pc, #616]	@ (800d5ac <_strtod_l+0x57c>)
 800d342:	a819      	add	r0, sp, #100	@ 0x64
 800d344:	f001 fed4 	bl	800f0f0 <__match>
 800d348:	2800      	cmp	r0, #0
 800d34a:	f43f aec5 	beq.w	800d0d8 <_strtod_l+0xa8>
 800d34e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	2b28      	cmp	r3, #40	@ 0x28
 800d354:	d12e      	bne.n	800d3b4 <_strtod_l+0x384>
 800d356:	4996      	ldr	r1, [pc, #600]	@ (800d5b0 <_strtod_l+0x580>)
 800d358:	aa1c      	add	r2, sp, #112	@ 0x70
 800d35a:	a819      	add	r0, sp, #100	@ 0x64
 800d35c:	f001 fedc 	bl	800f118 <__hexnan>
 800d360:	2805      	cmp	r0, #5
 800d362:	d127      	bne.n	800d3b4 <_strtod_l+0x384>
 800d364:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d366:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d36a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d36e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d372:	e696      	b.n	800d0a2 <_strtod_l+0x72>
 800d374:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d376:	fb08 2101 	mla	r1, r8, r1, r2
 800d37a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d37e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d380:	e7b5      	b.n	800d2ee <_strtod_l+0x2be>
 800d382:	2a6e      	cmp	r2, #110	@ 0x6e
 800d384:	e7da      	b.n	800d33c <_strtod_l+0x30c>
 800d386:	498b      	ldr	r1, [pc, #556]	@ (800d5b4 <_strtod_l+0x584>)
 800d388:	a819      	add	r0, sp, #100	@ 0x64
 800d38a:	f001 feb1 	bl	800f0f0 <__match>
 800d38e:	2800      	cmp	r0, #0
 800d390:	f43f aea2 	beq.w	800d0d8 <_strtod_l+0xa8>
 800d394:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d396:	4988      	ldr	r1, [pc, #544]	@ (800d5b8 <_strtod_l+0x588>)
 800d398:	3b01      	subs	r3, #1
 800d39a:	a819      	add	r0, sp, #100	@ 0x64
 800d39c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d39e:	f001 fea7 	bl	800f0f0 <__match>
 800d3a2:	b910      	cbnz	r0, 800d3aa <_strtod_l+0x37a>
 800d3a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d3aa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d5c8 <_strtod_l+0x598>
 800d3ae:	f04f 0a00 	mov.w	sl, #0
 800d3b2:	e676      	b.n	800d0a2 <_strtod_l+0x72>
 800d3b4:	4881      	ldr	r0, [pc, #516]	@ (800d5bc <_strtod_l+0x58c>)
 800d3b6:	f000 fd5f 	bl	800de78 <nan>
 800d3ba:	ec5b ab10 	vmov	sl, fp, d0
 800d3be:	e670      	b.n	800d0a2 <_strtod_l+0x72>
 800d3c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3c2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d3c4:	eba8 0303 	sub.w	r3, r8, r3
 800d3c8:	f1b9 0f00 	cmp.w	r9, #0
 800d3cc:	bf08      	it	eq
 800d3ce:	46a9      	moveq	r9, r5
 800d3d0:	2d10      	cmp	r5, #16
 800d3d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3d4:	462c      	mov	r4, r5
 800d3d6:	bfa8      	it	ge
 800d3d8:	2410      	movge	r4, #16
 800d3da:	f7f3 f8c3 	bl	8000564 <__aeabi_ui2d>
 800d3de:	2d09      	cmp	r5, #9
 800d3e0:	4682      	mov	sl, r0
 800d3e2:	468b      	mov	fp, r1
 800d3e4:	dc13      	bgt.n	800d40e <_strtod_l+0x3de>
 800d3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f43f ae5a 	beq.w	800d0a2 <_strtod_l+0x72>
 800d3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f0:	dd78      	ble.n	800d4e4 <_strtod_l+0x4b4>
 800d3f2:	2b16      	cmp	r3, #22
 800d3f4:	dc5f      	bgt.n	800d4b6 <_strtod_l+0x486>
 800d3f6:	4972      	ldr	r1, [pc, #456]	@ (800d5c0 <_strtod_l+0x590>)
 800d3f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d3fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d400:	4652      	mov	r2, sl
 800d402:	465b      	mov	r3, fp
 800d404:	f7f3 f928 	bl	8000658 <__aeabi_dmul>
 800d408:	4682      	mov	sl, r0
 800d40a:	468b      	mov	fp, r1
 800d40c:	e649      	b.n	800d0a2 <_strtod_l+0x72>
 800d40e:	4b6c      	ldr	r3, [pc, #432]	@ (800d5c0 <_strtod_l+0x590>)
 800d410:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d414:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d418:	f7f3 f91e 	bl	8000658 <__aeabi_dmul>
 800d41c:	4682      	mov	sl, r0
 800d41e:	4638      	mov	r0, r7
 800d420:	468b      	mov	fp, r1
 800d422:	f7f3 f89f 	bl	8000564 <__aeabi_ui2d>
 800d426:	4602      	mov	r2, r0
 800d428:	460b      	mov	r3, r1
 800d42a:	4650      	mov	r0, sl
 800d42c:	4659      	mov	r1, fp
 800d42e:	f7f2 ff5d 	bl	80002ec <__adddf3>
 800d432:	2d0f      	cmp	r5, #15
 800d434:	4682      	mov	sl, r0
 800d436:	468b      	mov	fp, r1
 800d438:	ddd5      	ble.n	800d3e6 <_strtod_l+0x3b6>
 800d43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d43c:	1b2c      	subs	r4, r5, r4
 800d43e:	441c      	add	r4, r3
 800d440:	2c00      	cmp	r4, #0
 800d442:	f340 8093 	ble.w	800d56c <_strtod_l+0x53c>
 800d446:	f014 030f 	ands.w	r3, r4, #15
 800d44a:	d00a      	beq.n	800d462 <_strtod_l+0x432>
 800d44c:	495c      	ldr	r1, [pc, #368]	@ (800d5c0 <_strtod_l+0x590>)
 800d44e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d452:	4652      	mov	r2, sl
 800d454:	465b      	mov	r3, fp
 800d456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d45a:	f7f3 f8fd 	bl	8000658 <__aeabi_dmul>
 800d45e:	4682      	mov	sl, r0
 800d460:	468b      	mov	fp, r1
 800d462:	f034 040f 	bics.w	r4, r4, #15
 800d466:	d073      	beq.n	800d550 <_strtod_l+0x520>
 800d468:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d46c:	dd49      	ble.n	800d502 <_strtod_l+0x4d2>
 800d46e:	2400      	movs	r4, #0
 800d470:	46a0      	mov	r8, r4
 800d472:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d474:	46a1      	mov	r9, r4
 800d476:	9a05      	ldr	r2, [sp, #20]
 800d478:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d5c8 <_strtod_l+0x598>
 800d47c:	2322      	movs	r3, #34	@ 0x22
 800d47e:	6013      	str	r3, [r2, #0]
 800d480:	f04f 0a00 	mov.w	sl, #0
 800d484:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d486:	2b00      	cmp	r3, #0
 800d488:	f43f ae0b 	beq.w	800d0a2 <_strtod_l+0x72>
 800d48c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d48e:	9805      	ldr	r0, [sp, #20]
 800d490:	f002 f9e8 	bl	800f864 <_Bfree>
 800d494:	9805      	ldr	r0, [sp, #20]
 800d496:	4649      	mov	r1, r9
 800d498:	f002 f9e4 	bl	800f864 <_Bfree>
 800d49c:	9805      	ldr	r0, [sp, #20]
 800d49e:	4641      	mov	r1, r8
 800d4a0:	f002 f9e0 	bl	800f864 <_Bfree>
 800d4a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d4a6:	9805      	ldr	r0, [sp, #20]
 800d4a8:	f002 f9dc 	bl	800f864 <_Bfree>
 800d4ac:	9805      	ldr	r0, [sp, #20]
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	f002 f9d8 	bl	800f864 <_Bfree>
 800d4b4:	e5f5      	b.n	800d0a2 <_strtod_l+0x72>
 800d4b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	dbbc      	blt.n	800d43a <_strtod_l+0x40a>
 800d4c0:	4c3f      	ldr	r4, [pc, #252]	@ (800d5c0 <_strtod_l+0x590>)
 800d4c2:	f1c5 050f 	rsb	r5, r5, #15
 800d4c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d4ca:	4652      	mov	r2, sl
 800d4cc:	465b      	mov	r3, fp
 800d4ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4d2:	f7f3 f8c1 	bl	8000658 <__aeabi_dmul>
 800d4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4d8:	1b5d      	subs	r5, r3, r5
 800d4da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d4de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d4e2:	e78f      	b.n	800d404 <_strtod_l+0x3d4>
 800d4e4:	3316      	adds	r3, #22
 800d4e6:	dba8      	blt.n	800d43a <_strtod_l+0x40a>
 800d4e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4ea:	eba3 0808 	sub.w	r8, r3, r8
 800d4ee:	4b34      	ldr	r3, [pc, #208]	@ (800d5c0 <_strtod_l+0x590>)
 800d4f0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d4f4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d4f8:	4650      	mov	r0, sl
 800d4fa:	4659      	mov	r1, fp
 800d4fc:	f7f3 f9d6 	bl	80008ac <__aeabi_ddiv>
 800d500:	e782      	b.n	800d408 <_strtod_l+0x3d8>
 800d502:	2300      	movs	r3, #0
 800d504:	4f2f      	ldr	r7, [pc, #188]	@ (800d5c4 <_strtod_l+0x594>)
 800d506:	1124      	asrs	r4, r4, #4
 800d508:	4650      	mov	r0, sl
 800d50a:	4659      	mov	r1, fp
 800d50c:	461e      	mov	r6, r3
 800d50e:	2c01      	cmp	r4, #1
 800d510:	dc21      	bgt.n	800d556 <_strtod_l+0x526>
 800d512:	b10b      	cbz	r3, 800d518 <_strtod_l+0x4e8>
 800d514:	4682      	mov	sl, r0
 800d516:	468b      	mov	fp, r1
 800d518:	492a      	ldr	r1, [pc, #168]	@ (800d5c4 <_strtod_l+0x594>)
 800d51a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d51e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d522:	4652      	mov	r2, sl
 800d524:	465b      	mov	r3, fp
 800d526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d52a:	f7f3 f895 	bl	8000658 <__aeabi_dmul>
 800d52e:	4b26      	ldr	r3, [pc, #152]	@ (800d5c8 <_strtod_l+0x598>)
 800d530:	460a      	mov	r2, r1
 800d532:	400b      	ands	r3, r1
 800d534:	4925      	ldr	r1, [pc, #148]	@ (800d5cc <_strtod_l+0x59c>)
 800d536:	428b      	cmp	r3, r1
 800d538:	4682      	mov	sl, r0
 800d53a:	d898      	bhi.n	800d46e <_strtod_l+0x43e>
 800d53c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d540:	428b      	cmp	r3, r1
 800d542:	bf86      	itte	hi
 800d544:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d5d0 <_strtod_l+0x5a0>
 800d548:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800d54c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d550:	2300      	movs	r3, #0
 800d552:	9308      	str	r3, [sp, #32]
 800d554:	e076      	b.n	800d644 <_strtod_l+0x614>
 800d556:	07e2      	lsls	r2, r4, #31
 800d558:	d504      	bpl.n	800d564 <_strtod_l+0x534>
 800d55a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d55e:	f7f3 f87b 	bl	8000658 <__aeabi_dmul>
 800d562:	2301      	movs	r3, #1
 800d564:	3601      	adds	r6, #1
 800d566:	1064      	asrs	r4, r4, #1
 800d568:	3708      	adds	r7, #8
 800d56a:	e7d0      	b.n	800d50e <_strtod_l+0x4de>
 800d56c:	d0f0      	beq.n	800d550 <_strtod_l+0x520>
 800d56e:	4264      	negs	r4, r4
 800d570:	f014 020f 	ands.w	r2, r4, #15
 800d574:	d00a      	beq.n	800d58c <_strtod_l+0x55c>
 800d576:	4b12      	ldr	r3, [pc, #72]	@ (800d5c0 <_strtod_l+0x590>)
 800d578:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d57c:	4650      	mov	r0, sl
 800d57e:	4659      	mov	r1, fp
 800d580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d584:	f7f3 f992 	bl	80008ac <__aeabi_ddiv>
 800d588:	4682      	mov	sl, r0
 800d58a:	468b      	mov	fp, r1
 800d58c:	1124      	asrs	r4, r4, #4
 800d58e:	d0df      	beq.n	800d550 <_strtod_l+0x520>
 800d590:	2c1f      	cmp	r4, #31
 800d592:	dd1f      	ble.n	800d5d4 <_strtod_l+0x5a4>
 800d594:	2400      	movs	r4, #0
 800d596:	46a0      	mov	r8, r4
 800d598:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d59a:	46a1      	mov	r9, r4
 800d59c:	9a05      	ldr	r2, [sp, #20]
 800d59e:	2322      	movs	r3, #34	@ 0x22
 800d5a0:	f04f 0a00 	mov.w	sl, #0
 800d5a4:	f04f 0b00 	mov.w	fp, #0
 800d5a8:	6013      	str	r3, [r2, #0]
 800d5aa:	e76b      	b.n	800d484 <_strtod_l+0x454>
 800d5ac:	08011389 	.word	0x08011389
 800d5b0:	08011554 	.word	0x08011554
 800d5b4:	08011381 	.word	0x08011381
 800d5b8:	080113c2 	.word	0x080113c2
 800d5bc:	08011551 	.word	0x08011551
 800d5c0:	080116e0 	.word	0x080116e0
 800d5c4:	080116b8 	.word	0x080116b8
 800d5c8:	7ff00000 	.word	0x7ff00000
 800d5cc:	7ca00000 	.word	0x7ca00000
 800d5d0:	7fefffff 	.word	0x7fefffff
 800d5d4:	f014 0310 	ands.w	r3, r4, #16
 800d5d8:	bf18      	it	ne
 800d5da:	236a      	movne	r3, #106	@ 0x6a
 800d5dc:	4ea9      	ldr	r6, [pc, #676]	@ (800d884 <_strtod_l+0x854>)
 800d5de:	9308      	str	r3, [sp, #32]
 800d5e0:	4650      	mov	r0, sl
 800d5e2:	4659      	mov	r1, fp
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	07e7      	lsls	r7, r4, #31
 800d5e8:	d504      	bpl.n	800d5f4 <_strtod_l+0x5c4>
 800d5ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d5ee:	f7f3 f833 	bl	8000658 <__aeabi_dmul>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	1064      	asrs	r4, r4, #1
 800d5f6:	f106 0608 	add.w	r6, r6, #8
 800d5fa:	d1f4      	bne.n	800d5e6 <_strtod_l+0x5b6>
 800d5fc:	b10b      	cbz	r3, 800d602 <_strtod_l+0x5d2>
 800d5fe:	4682      	mov	sl, r0
 800d600:	468b      	mov	fp, r1
 800d602:	9b08      	ldr	r3, [sp, #32]
 800d604:	b1b3      	cbz	r3, 800d634 <_strtod_l+0x604>
 800d606:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d60a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d60e:	2b00      	cmp	r3, #0
 800d610:	4659      	mov	r1, fp
 800d612:	dd0f      	ble.n	800d634 <_strtod_l+0x604>
 800d614:	2b1f      	cmp	r3, #31
 800d616:	dd56      	ble.n	800d6c6 <_strtod_l+0x696>
 800d618:	2b34      	cmp	r3, #52	@ 0x34
 800d61a:	bfde      	ittt	le
 800d61c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800d620:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d624:	4093      	lslle	r3, r2
 800d626:	f04f 0a00 	mov.w	sl, #0
 800d62a:	bfcc      	ite	gt
 800d62c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d630:	ea03 0b01 	andle.w	fp, r3, r1
 800d634:	2200      	movs	r2, #0
 800d636:	2300      	movs	r3, #0
 800d638:	4650      	mov	r0, sl
 800d63a:	4659      	mov	r1, fp
 800d63c:	f7f3 fa74 	bl	8000b28 <__aeabi_dcmpeq>
 800d640:	2800      	cmp	r0, #0
 800d642:	d1a7      	bne.n	800d594 <_strtod_l+0x564>
 800d644:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d64a:	9805      	ldr	r0, [sp, #20]
 800d64c:	462b      	mov	r3, r5
 800d64e:	464a      	mov	r2, r9
 800d650:	f002 f970 	bl	800f934 <__s2b>
 800d654:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d656:	2800      	cmp	r0, #0
 800d658:	f43f af09 	beq.w	800d46e <_strtod_l+0x43e>
 800d65c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d65e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d660:	2a00      	cmp	r2, #0
 800d662:	eba3 0308 	sub.w	r3, r3, r8
 800d666:	bfa8      	it	ge
 800d668:	2300      	movge	r3, #0
 800d66a:	9312      	str	r3, [sp, #72]	@ 0x48
 800d66c:	2400      	movs	r4, #0
 800d66e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d672:	9316      	str	r3, [sp, #88]	@ 0x58
 800d674:	46a0      	mov	r8, r4
 800d676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d678:	9805      	ldr	r0, [sp, #20]
 800d67a:	6859      	ldr	r1, [r3, #4]
 800d67c:	f002 f8b2 	bl	800f7e4 <_Balloc>
 800d680:	4681      	mov	r9, r0
 800d682:	2800      	cmp	r0, #0
 800d684:	f43f aef7 	beq.w	800d476 <_strtod_l+0x446>
 800d688:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d68a:	691a      	ldr	r2, [r3, #16]
 800d68c:	3202      	adds	r2, #2
 800d68e:	f103 010c 	add.w	r1, r3, #12
 800d692:	0092      	lsls	r2, r2, #2
 800d694:	300c      	adds	r0, #12
 800d696:	f000 fbe1 	bl	800de5c <memcpy>
 800d69a:	ec4b ab10 	vmov	d0, sl, fp
 800d69e:	9805      	ldr	r0, [sp, #20]
 800d6a0:	aa1c      	add	r2, sp, #112	@ 0x70
 800d6a2:	a91b      	add	r1, sp, #108	@ 0x6c
 800d6a4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d6a8:	f002 fc78 	bl	800ff9c <__d2b>
 800d6ac:	901a      	str	r0, [sp, #104]	@ 0x68
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	f43f aee1 	beq.w	800d476 <_strtod_l+0x446>
 800d6b4:	9805      	ldr	r0, [sp, #20]
 800d6b6:	2101      	movs	r1, #1
 800d6b8:	f002 f9d2 	bl	800fa60 <__i2b>
 800d6bc:	4680      	mov	r8, r0
 800d6be:	b948      	cbnz	r0, 800d6d4 <_strtod_l+0x6a4>
 800d6c0:	f04f 0800 	mov.w	r8, #0
 800d6c4:	e6d7      	b.n	800d476 <_strtod_l+0x446>
 800d6c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800d6ce:	ea03 0a0a 	and.w	sl, r3, sl
 800d6d2:	e7af      	b.n	800d634 <_strtod_l+0x604>
 800d6d4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d6d6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d6d8:	2d00      	cmp	r5, #0
 800d6da:	bfab      	itete	ge
 800d6dc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d6de:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d6e0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d6e2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d6e4:	bfac      	ite	ge
 800d6e6:	18ef      	addge	r7, r5, r3
 800d6e8:	1b5e      	sublt	r6, r3, r5
 800d6ea:	9b08      	ldr	r3, [sp, #32]
 800d6ec:	1aed      	subs	r5, r5, r3
 800d6ee:	4415      	add	r5, r2
 800d6f0:	4b65      	ldr	r3, [pc, #404]	@ (800d888 <_strtod_l+0x858>)
 800d6f2:	3d01      	subs	r5, #1
 800d6f4:	429d      	cmp	r5, r3
 800d6f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d6fa:	da50      	bge.n	800d79e <_strtod_l+0x76e>
 800d6fc:	1b5b      	subs	r3, r3, r5
 800d6fe:	2b1f      	cmp	r3, #31
 800d700:	eba2 0203 	sub.w	r2, r2, r3
 800d704:	f04f 0101 	mov.w	r1, #1
 800d708:	dc3d      	bgt.n	800d786 <_strtod_l+0x756>
 800d70a:	fa01 f303 	lsl.w	r3, r1, r3
 800d70e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d710:	2300      	movs	r3, #0
 800d712:	9310      	str	r3, [sp, #64]	@ 0x40
 800d714:	18bd      	adds	r5, r7, r2
 800d716:	9b08      	ldr	r3, [sp, #32]
 800d718:	42af      	cmp	r7, r5
 800d71a:	4416      	add	r6, r2
 800d71c:	441e      	add	r6, r3
 800d71e:	463b      	mov	r3, r7
 800d720:	bfa8      	it	ge
 800d722:	462b      	movge	r3, r5
 800d724:	42b3      	cmp	r3, r6
 800d726:	bfa8      	it	ge
 800d728:	4633      	movge	r3, r6
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	bfc2      	ittt	gt
 800d72e:	1aed      	subgt	r5, r5, r3
 800d730:	1af6      	subgt	r6, r6, r3
 800d732:	1aff      	subgt	r7, r7, r3
 800d734:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d736:	2b00      	cmp	r3, #0
 800d738:	dd16      	ble.n	800d768 <_strtod_l+0x738>
 800d73a:	4641      	mov	r1, r8
 800d73c:	9805      	ldr	r0, [sp, #20]
 800d73e:	461a      	mov	r2, r3
 800d740:	f002 fa46 	bl	800fbd0 <__pow5mult>
 800d744:	4680      	mov	r8, r0
 800d746:	2800      	cmp	r0, #0
 800d748:	d0ba      	beq.n	800d6c0 <_strtod_l+0x690>
 800d74a:	4601      	mov	r1, r0
 800d74c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d74e:	9805      	ldr	r0, [sp, #20]
 800d750:	f002 f99c 	bl	800fa8c <__multiply>
 800d754:	900a      	str	r0, [sp, #40]	@ 0x28
 800d756:	2800      	cmp	r0, #0
 800d758:	f43f ae8d 	beq.w	800d476 <_strtod_l+0x446>
 800d75c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d75e:	9805      	ldr	r0, [sp, #20]
 800d760:	f002 f880 	bl	800f864 <_Bfree>
 800d764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d766:	931a      	str	r3, [sp, #104]	@ 0x68
 800d768:	2d00      	cmp	r5, #0
 800d76a:	dc1d      	bgt.n	800d7a8 <_strtod_l+0x778>
 800d76c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d76e:	2b00      	cmp	r3, #0
 800d770:	dd23      	ble.n	800d7ba <_strtod_l+0x78a>
 800d772:	4649      	mov	r1, r9
 800d774:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d776:	9805      	ldr	r0, [sp, #20]
 800d778:	f002 fa2a 	bl	800fbd0 <__pow5mult>
 800d77c:	4681      	mov	r9, r0
 800d77e:	b9e0      	cbnz	r0, 800d7ba <_strtod_l+0x78a>
 800d780:	f04f 0900 	mov.w	r9, #0
 800d784:	e677      	b.n	800d476 <_strtod_l+0x446>
 800d786:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d78a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d78e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d792:	35e2      	adds	r5, #226	@ 0xe2
 800d794:	fa01 f305 	lsl.w	r3, r1, r5
 800d798:	9310      	str	r3, [sp, #64]	@ 0x40
 800d79a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d79c:	e7ba      	b.n	800d714 <_strtod_l+0x6e4>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d7a6:	e7b5      	b.n	800d714 <_strtod_l+0x6e4>
 800d7a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d7aa:	9805      	ldr	r0, [sp, #20]
 800d7ac:	462a      	mov	r2, r5
 800d7ae:	f002 fa69 	bl	800fc84 <__lshift>
 800d7b2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	d1d9      	bne.n	800d76c <_strtod_l+0x73c>
 800d7b8:	e65d      	b.n	800d476 <_strtod_l+0x446>
 800d7ba:	2e00      	cmp	r6, #0
 800d7bc:	dd07      	ble.n	800d7ce <_strtod_l+0x79e>
 800d7be:	4649      	mov	r1, r9
 800d7c0:	9805      	ldr	r0, [sp, #20]
 800d7c2:	4632      	mov	r2, r6
 800d7c4:	f002 fa5e 	bl	800fc84 <__lshift>
 800d7c8:	4681      	mov	r9, r0
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	d0d8      	beq.n	800d780 <_strtod_l+0x750>
 800d7ce:	2f00      	cmp	r7, #0
 800d7d0:	dd08      	ble.n	800d7e4 <_strtod_l+0x7b4>
 800d7d2:	4641      	mov	r1, r8
 800d7d4:	9805      	ldr	r0, [sp, #20]
 800d7d6:	463a      	mov	r2, r7
 800d7d8:	f002 fa54 	bl	800fc84 <__lshift>
 800d7dc:	4680      	mov	r8, r0
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	f43f ae49 	beq.w	800d476 <_strtod_l+0x446>
 800d7e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d7e6:	9805      	ldr	r0, [sp, #20]
 800d7e8:	464a      	mov	r2, r9
 800d7ea:	f002 fad3 	bl	800fd94 <__mdiff>
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	f43f ae40 	beq.w	800d476 <_strtod_l+0x446>
 800d7f6:	68c3      	ldr	r3, [r0, #12]
 800d7f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	60c3      	str	r3, [r0, #12]
 800d7fe:	4641      	mov	r1, r8
 800d800:	f002 faac 	bl	800fd5c <__mcmp>
 800d804:	2800      	cmp	r0, #0
 800d806:	da45      	bge.n	800d894 <_strtod_l+0x864>
 800d808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d80a:	ea53 030a 	orrs.w	r3, r3, sl
 800d80e:	d16b      	bne.n	800d8e8 <_strtod_l+0x8b8>
 800d810:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d814:	2b00      	cmp	r3, #0
 800d816:	d167      	bne.n	800d8e8 <_strtod_l+0x8b8>
 800d818:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d81c:	0d1b      	lsrs	r3, r3, #20
 800d81e:	051b      	lsls	r3, r3, #20
 800d820:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d824:	d960      	bls.n	800d8e8 <_strtod_l+0x8b8>
 800d826:	6963      	ldr	r3, [r4, #20]
 800d828:	b913      	cbnz	r3, 800d830 <_strtod_l+0x800>
 800d82a:	6923      	ldr	r3, [r4, #16]
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	dd5b      	ble.n	800d8e8 <_strtod_l+0x8b8>
 800d830:	4621      	mov	r1, r4
 800d832:	2201      	movs	r2, #1
 800d834:	9805      	ldr	r0, [sp, #20]
 800d836:	f002 fa25 	bl	800fc84 <__lshift>
 800d83a:	4641      	mov	r1, r8
 800d83c:	4604      	mov	r4, r0
 800d83e:	f002 fa8d 	bl	800fd5c <__mcmp>
 800d842:	2800      	cmp	r0, #0
 800d844:	dd50      	ble.n	800d8e8 <_strtod_l+0x8b8>
 800d846:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d84a:	9a08      	ldr	r2, [sp, #32]
 800d84c:	0d1b      	lsrs	r3, r3, #20
 800d84e:	051b      	lsls	r3, r3, #20
 800d850:	2a00      	cmp	r2, #0
 800d852:	d06a      	beq.n	800d92a <_strtod_l+0x8fa>
 800d854:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d858:	d867      	bhi.n	800d92a <_strtod_l+0x8fa>
 800d85a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d85e:	f67f ae9d 	bls.w	800d59c <_strtod_l+0x56c>
 800d862:	4b0a      	ldr	r3, [pc, #40]	@ (800d88c <_strtod_l+0x85c>)
 800d864:	4650      	mov	r0, sl
 800d866:	4659      	mov	r1, fp
 800d868:	2200      	movs	r2, #0
 800d86a:	f7f2 fef5 	bl	8000658 <__aeabi_dmul>
 800d86e:	4b08      	ldr	r3, [pc, #32]	@ (800d890 <_strtod_l+0x860>)
 800d870:	400b      	ands	r3, r1
 800d872:	4682      	mov	sl, r0
 800d874:	468b      	mov	fp, r1
 800d876:	2b00      	cmp	r3, #0
 800d878:	f47f ae08 	bne.w	800d48c <_strtod_l+0x45c>
 800d87c:	9a05      	ldr	r2, [sp, #20]
 800d87e:	2322      	movs	r3, #34	@ 0x22
 800d880:	6013      	str	r3, [r2, #0]
 800d882:	e603      	b.n	800d48c <_strtod_l+0x45c>
 800d884:	08011580 	.word	0x08011580
 800d888:	fffffc02 	.word	0xfffffc02
 800d88c:	39500000 	.word	0x39500000
 800d890:	7ff00000 	.word	0x7ff00000
 800d894:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d898:	d165      	bne.n	800d966 <_strtod_l+0x936>
 800d89a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d89c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8a0:	b35a      	cbz	r2, 800d8fa <_strtod_l+0x8ca>
 800d8a2:	4a9f      	ldr	r2, [pc, #636]	@ (800db20 <_strtod_l+0xaf0>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d12b      	bne.n	800d900 <_strtod_l+0x8d0>
 800d8a8:	9b08      	ldr	r3, [sp, #32]
 800d8aa:	4651      	mov	r1, sl
 800d8ac:	b303      	cbz	r3, 800d8f0 <_strtod_l+0x8c0>
 800d8ae:	4b9d      	ldr	r3, [pc, #628]	@ (800db24 <_strtod_l+0xaf4>)
 800d8b0:	465a      	mov	r2, fp
 800d8b2:	4013      	ands	r3, r2
 800d8b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d8b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d8bc:	d81b      	bhi.n	800d8f6 <_strtod_l+0x8c6>
 800d8be:	0d1b      	lsrs	r3, r3, #20
 800d8c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d8c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8c8:	4299      	cmp	r1, r3
 800d8ca:	d119      	bne.n	800d900 <_strtod_l+0x8d0>
 800d8cc:	4b96      	ldr	r3, [pc, #600]	@ (800db28 <_strtod_l+0xaf8>)
 800d8ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d102      	bne.n	800d8da <_strtod_l+0x8aa>
 800d8d4:	3101      	adds	r1, #1
 800d8d6:	f43f adce 	beq.w	800d476 <_strtod_l+0x446>
 800d8da:	4b92      	ldr	r3, [pc, #584]	@ (800db24 <_strtod_l+0xaf4>)
 800d8dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d8de:	401a      	ands	r2, r3
 800d8e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d8e4:	f04f 0a00 	mov.w	sl, #0
 800d8e8:	9b08      	ldr	r3, [sp, #32]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d1b9      	bne.n	800d862 <_strtod_l+0x832>
 800d8ee:	e5cd      	b.n	800d48c <_strtod_l+0x45c>
 800d8f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d8f4:	e7e8      	b.n	800d8c8 <_strtod_l+0x898>
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	e7e6      	b.n	800d8c8 <_strtod_l+0x898>
 800d8fa:	ea53 030a 	orrs.w	r3, r3, sl
 800d8fe:	d0a2      	beq.n	800d846 <_strtod_l+0x816>
 800d900:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d902:	b1db      	cbz	r3, 800d93c <_strtod_l+0x90c>
 800d904:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d906:	4213      	tst	r3, r2
 800d908:	d0ee      	beq.n	800d8e8 <_strtod_l+0x8b8>
 800d90a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d90c:	9a08      	ldr	r2, [sp, #32]
 800d90e:	4650      	mov	r0, sl
 800d910:	4659      	mov	r1, fp
 800d912:	b1bb      	cbz	r3, 800d944 <_strtod_l+0x914>
 800d914:	f7ff fb6e 	bl	800cff4 <sulp>
 800d918:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d91c:	ec53 2b10 	vmov	r2, r3, d0
 800d920:	f7f2 fce4 	bl	80002ec <__adddf3>
 800d924:	4682      	mov	sl, r0
 800d926:	468b      	mov	fp, r1
 800d928:	e7de      	b.n	800d8e8 <_strtod_l+0x8b8>
 800d92a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d92e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d932:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d936:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d93a:	e7d5      	b.n	800d8e8 <_strtod_l+0x8b8>
 800d93c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d93e:	ea13 0f0a 	tst.w	r3, sl
 800d942:	e7e1      	b.n	800d908 <_strtod_l+0x8d8>
 800d944:	f7ff fb56 	bl	800cff4 <sulp>
 800d948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d94c:	ec53 2b10 	vmov	r2, r3, d0
 800d950:	f7f2 fcca 	bl	80002e8 <__aeabi_dsub>
 800d954:	2200      	movs	r2, #0
 800d956:	2300      	movs	r3, #0
 800d958:	4682      	mov	sl, r0
 800d95a:	468b      	mov	fp, r1
 800d95c:	f7f3 f8e4 	bl	8000b28 <__aeabi_dcmpeq>
 800d960:	2800      	cmp	r0, #0
 800d962:	d0c1      	beq.n	800d8e8 <_strtod_l+0x8b8>
 800d964:	e61a      	b.n	800d59c <_strtod_l+0x56c>
 800d966:	4641      	mov	r1, r8
 800d968:	4620      	mov	r0, r4
 800d96a:	f002 fb6f 	bl	801004c <__ratio>
 800d96e:	ec57 6b10 	vmov	r6, r7, d0
 800d972:	2200      	movs	r2, #0
 800d974:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d978:	4630      	mov	r0, r6
 800d97a:	4639      	mov	r1, r7
 800d97c:	f7f3 f8e8 	bl	8000b50 <__aeabi_dcmple>
 800d980:	2800      	cmp	r0, #0
 800d982:	d06f      	beq.n	800da64 <_strtod_l+0xa34>
 800d984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d986:	2b00      	cmp	r3, #0
 800d988:	d17a      	bne.n	800da80 <_strtod_l+0xa50>
 800d98a:	f1ba 0f00 	cmp.w	sl, #0
 800d98e:	d158      	bne.n	800da42 <_strtod_l+0xa12>
 800d990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d992:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d996:	2b00      	cmp	r3, #0
 800d998:	d15a      	bne.n	800da50 <_strtod_l+0xa20>
 800d99a:	4b64      	ldr	r3, [pc, #400]	@ (800db2c <_strtod_l+0xafc>)
 800d99c:	2200      	movs	r2, #0
 800d99e:	4630      	mov	r0, r6
 800d9a0:	4639      	mov	r1, r7
 800d9a2:	f7f3 f8cb 	bl	8000b3c <__aeabi_dcmplt>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d159      	bne.n	800da5e <_strtod_l+0xa2e>
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	4639      	mov	r1, r7
 800d9ae:	4b60      	ldr	r3, [pc, #384]	@ (800db30 <_strtod_l+0xb00>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f7f2 fe51 	bl	8000658 <__aeabi_dmul>
 800d9b6:	4606      	mov	r6, r0
 800d9b8:	460f      	mov	r7, r1
 800d9ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d9be:	9606      	str	r6, [sp, #24]
 800d9c0:	9307      	str	r3, [sp, #28]
 800d9c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9c6:	4d57      	ldr	r5, [pc, #348]	@ (800db24 <_strtod_l+0xaf4>)
 800d9c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9ce:	401d      	ands	r5, r3
 800d9d0:	4b58      	ldr	r3, [pc, #352]	@ (800db34 <_strtod_l+0xb04>)
 800d9d2:	429d      	cmp	r5, r3
 800d9d4:	f040 80b2 	bne.w	800db3c <_strtod_l+0xb0c>
 800d9d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d9de:	ec4b ab10 	vmov	d0, sl, fp
 800d9e2:	f002 fa6b 	bl	800febc <__ulp>
 800d9e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9ea:	ec51 0b10 	vmov	r0, r1, d0
 800d9ee:	f7f2 fe33 	bl	8000658 <__aeabi_dmul>
 800d9f2:	4652      	mov	r2, sl
 800d9f4:	465b      	mov	r3, fp
 800d9f6:	f7f2 fc79 	bl	80002ec <__adddf3>
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	4949      	ldr	r1, [pc, #292]	@ (800db24 <_strtod_l+0xaf4>)
 800d9fe:	4a4e      	ldr	r2, [pc, #312]	@ (800db38 <_strtod_l+0xb08>)
 800da00:	4019      	ands	r1, r3
 800da02:	4291      	cmp	r1, r2
 800da04:	4682      	mov	sl, r0
 800da06:	d942      	bls.n	800da8e <_strtod_l+0xa5e>
 800da08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800da0a:	4b47      	ldr	r3, [pc, #284]	@ (800db28 <_strtod_l+0xaf8>)
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d103      	bne.n	800da18 <_strtod_l+0x9e8>
 800da10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da12:	3301      	adds	r3, #1
 800da14:	f43f ad2f 	beq.w	800d476 <_strtod_l+0x446>
 800da18:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800db28 <_strtod_l+0xaf8>
 800da1c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800da20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da22:	9805      	ldr	r0, [sp, #20]
 800da24:	f001 ff1e 	bl	800f864 <_Bfree>
 800da28:	9805      	ldr	r0, [sp, #20]
 800da2a:	4649      	mov	r1, r9
 800da2c:	f001 ff1a 	bl	800f864 <_Bfree>
 800da30:	9805      	ldr	r0, [sp, #20]
 800da32:	4641      	mov	r1, r8
 800da34:	f001 ff16 	bl	800f864 <_Bfree>
 800da38:	9805      	ldr	r0, [sp, #20]
 800da3a:	4621      	mov	r1, r4
 800da3c:	f001 ff12 	bl	800f864 <_Bfree>
 800da40:	e619      	b.n	800d676 <_strtod_l+0x646>
 800da42:	f1ba 0f01 	cmp.w	sl, #1
 800da46:	d103      	bne.n	800da50 <_strtod_l+0xa20>
 800da48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f43f ada6 	beq.w	800d59c <_strtod_l+0x56c>
 800da50:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800db00 <_strtod_l+0xad0>
 800da54:	4f35      	ldr	r7, [pc, #212]	@ (800db2c <_strtod_l+0xafc>)
 800da56:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da5a:	2600      	movs	r6, #0
 800da5c:	e7b1      	b.n	800d9c2 <_strtod_l+0x992>
 800da5e:	4f34      	ldr	r7, [pc, #208]	@ (800db30 <_strtod_l+0xb00>)
 800da60:	2600      	movs	r6, #0
 800da62:	e7aa      	b.n	800d9ba <_strtod_l+0x98a>
 800da64:	4b32      	ldr	r3, [pc, #200]	@ (800db30 <_strtod_l+0xb00>)
 800da66:	4630      	mov	r0, r6
 800da68:	4639      	mov	r1, r7
 800da6a:	2200      	movs	r2, #0
 800da6c:	f7f2 fdf4 	bl	8000658 <__aeabi_dmul>
 800da70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da72:	4606      	mov	r6, r0
 800da74:	460f      	mov	r7, r1
 800da76:	2b00      	cmp	r3, #0
 800da78:	d09f      	beq.n	800d9ba <_strtod_l+0x98a>
 800da7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800da7e:	e7a0      	b.n	800d9c2 <_strtod_l+0x992>
 800da80:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800db08 <_strtod_l+0xad8>
 800da84:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da88:	ec57 6b17 	vmov	r6, r7, d7
 800da8c:	e799      	b.n	800d9c2 <_strtod_l+0x992>
 800da8e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800da92:	9b08      	ldr	r3, [sp, #32]
 800da94:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d1c1      	bne.n	800da20 <_strtod_l+0x9f0>
 800da9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800daa0:	0d1b      	lsrs	r3, r3, #20
 800daa2:	051b      	lsls	r3, r3, #20
 800daa4:	429d      	cmp	r5, r3
 800daa6:	d1bb      	bne.n	800da20 <_strtod_l+0x9f0>
 800daa8:	4630      	mov	r0, r6
 800daaa:	4639      	mov	r1, r7
 800daac:	f7f3 f934 	bl	8000d18 <__aeabi_d2lz>
 800dab0:	f7f2 fda4 	bl	80005fc <__aeabi_l2d>
 800dab4:	4602      	mov	r2, r0
 800dab6:	460b      	mov	r3, r1
 800dab8:	4630      	mov	r0, r6
 800daba:	4639      	mov	r1, r7
 800dabc:	f7f2 fc14 	bl	80002e8 <__aeabi_dsub>
 800dac0:	460b      	mov	r3, r1
 800dac2:	4602      	mov	r2, r0
 800dac4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dac8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dacc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dace:	ea46 060a 	orr.w	r6, r6, sl
 800dad2:	431e      	orrs	r6, r3
 800dad4:	d06f      	beq.n	800dbb6 <_strtod_l+0xb86>
 800dad6:	a30e      	add	r3, pc, #56	@ (adr r3, 800db10 <_strtod_l+0xae0>)
 800dad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dadc:	f7f3 f82e 	bl	8000b3c <__aeabi_dcmplt>
 800dae0:	2800      	cmp	r0, #0
 800dae2:	f47f acd3 	bne.w	800d48c <_strtod_l+0x45c>
 800dae6:	a30c      	add	r3, pc, #48	@ (adr r3, 800db18 <_strtod_l+0xae8>)
 800dae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800daf0:	f7f3 f842 	bl	8000b78 <__aeabi_dcmpgt>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	d093      	beq.n	800da20 <_strtod_l+0x9f0>
 800daf8:	e4c8      	b.n	800d48c <_strtod_l+0x45c>
 800dafa:	bf00      	nop
 800dafc:	f3af 8000 	nop.w
 800db00:	00000000 	.word	0x00000000
 800db04:	bff00000 	.word	0xbff00000
 800db08:	00000000 	.word	0x00000000
 800db0c:	3ff00000 	.word	0x3ff00000
 800db10:	94a03595 	.word	0x94a03595
 800db14:	3fdfffff 	.word	0x3fdfffff
 800db18:	35afe535 	.word	0x35afe535
 800db1c:	3fe00000 	.word	0x3fe00000
 800db20:	000fffff 	.word	0x000fffff
 800db24:	7ff00000 	.word	0x7ff00000
 800db28:	7fefffff 	.word	0x7fefffff
 800db2c:	3ff00000 	.word	0x3ff00000
 800db30:	3fe00000 	.word	0x3fe00000
 800db34:	7fe00000 	.word	0x7fe00000
 800db38:	7c9fffff 	.word	0x7c9fffff
 800db3c:	9b08      	ldr	r3, [sp, #32]
 800db3e:	b323      	cbz	r3, 800db8a <_strtod_l+0xb5a>
 800db40:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800db44:	d821      	bhi.n	800db8a <_strtod_l+0xb5a>
 800db46:	a328      	add	r3, pc, #160	@ (adr r3, 800dbe8 <_strtod_l+0xbb8>)
 800db48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4c:	4630      	mov	r0, r6
 800db4e:	4639      	mov	r1, r7
 800db50:	f7f2 fffe 	bl	8000b50 <__aeabi_dcmple>
 800db54:	b1a0      	cbz	r0, 800db80 <_strtod_l+0xb50>
 800db56:	4639      	mov	r1, r7
 800db58:	4630      	mov	r0, r6
 800db5a:	f7f3 f855 	bl	8000c08 <__aeabi_d2uiz>
 800db5e:	2801      	cmp	r0, #1
 800db60:	bf38      	it	cc
 800db62:	2001      	movcc	r0, #1
 800db64:	f7f2 fcfe 	bl	8000564 <__aeabi_ui2d>
 800db68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db6a:	4606      	mov	r6, r0
 800db6c:	460f      	mov	r7, r1
 800db6e:	b9fb      	cbnz	r3, 800dbb0 <_strtod_l+0xb80>
 800db70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db74:	9014      	str	r0, [sp, #80]	@ 0x50
 800db76:	9315      	str	r3, [sp, #84]	@ 0x54
 800db78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800db7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800db80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db82:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800db86:	1b5b      	subs	r3, r3, r5
 800db88:	9311      	str	r3, [sp, #68]	@ 0x44
 800db8a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800db8e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800db92:	f002 f993 	bl	800febc <__ulp>
 800db96:	4650      	mov	r0, sl
 800db98:	ec53 2b10 	vmov	r2, r3, d0
 800db9c:	4659      	mov	r1, fp
 800db9e:	f7f2 fd5b 	bl	8000658 <__aeabi_dmul>
 800dba2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dba6:	f7f2 fba1 	bl	80002ec <__adddf3>
 800dbaa:	4682      	mov	sl, r0
 800dbac:	468b      	mov	fp, r1
 800dbae:	e770      	b.n	800da92 <_strtod_l+0xa62>
 800dbb0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dbb4:	e7e0      	b.n	800db78 <_strtod_l+0xb48>
 800dbb6:	a30e      	add	r3, pc, #56	@ (adr r3, 800dbf0 <_strtod_l+0xbc0>)
 800dbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbc:	f7f2 ffbe 	bl	8000b3c <__aeabi_dcmplt>
 800dbc0:	e798      	b.n	800daf4 <_strtod_l+0xac4>
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	930e      	str	r3, [sp, #56]	@ 0x38
 800dbc6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dbc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbca:	6013      	str	r3, [r2, #0]
 800dbcc:	f7ff ba6d 	b.w	800d0aa <_strtod_l+0x7a>
 800dbd0:	2a65      	cmp	r2, #101	@ 0x65
 800dbd2:	f43f ab68 	beq.w	800d2a6 <_strtod_l+0x276>
 800dbd6:	2a45      	cmp	r2, #69	@ 0x45
 800dbd8:	f43f ab65 	beq.w	800d2a6 <_strtod_l+0x276>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	f7ff bba0 	b.w	800d322 <_strtod_l+0x2f2>
 800dbe2:	bf00      	nop
 800dbe4:	f3af 8000 	nop.w
 800dbe8:	ffc00000 	.word	0xffc00000
 800dbec:	41dfffff 	.word	0x41dfffff
 800dbf0:	94a03595 	.word	0x94a03595
 800dbf4:	3fcfffff 	.word	0x3fcfffff

0800dbf8 <_strtod_r>:
 800dbf8:	4b01      	ldr	r3, [pc, #4]	@ (800dc00 <_strtod_r+0x8>)
 800dbfa:	f7ff ba19 	b.w	800d030 <_strtod_l>
 800dbfe:	bf00      	nop
 800dc00:	200003d8 	.word	0x200003d8

0800dc04 <_strtol_l.isra.0>:
 800dc04:	2b24      	cmp	r3, #36	@ 0x24
 800dc06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc0a:	4686      	mov	lr, r0
 800dc0c:	4690      	mov	r8, r2
 800dc0e:	d801      	bhi.n	800dc14 <_strtol_l.isra.0+0x10>
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d106      	bne.n	800dc22 <_strtol_l.isra.0+0x1e>
 800dc14:	f000 f8e0 	bl	800ddd8 <__errno>
 800dc18:	2316      	movs	r3, #22
 800dc1a:	6003      	str	r3, [r0, #0]
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc22:	4834      	ldr	r0, [pc, #208]	@ (800dcf4 <_strtol_l.isra.0+0xf0>)
 800dc24:	460d      	mov	r5, r1
 800dc26:	462a      	mov	r2, r5
 800dc28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc2c:	5d06      	ldrb	r6, [r0, r4]
 800dc2e:	f016 0608 	ands.w	r6, r6, #8
 800dc32:	d1f8      	bne.n	800dc26 <_strtol_l.isra.0+0x22>
 800dc34:	2c2d      	cmp	r4, #45	@ 0x2d
 800dc36:	d110      	bne.n	800dc5a <_strtol_l.isra.0+0x56>
 800dc38:	782c      	ldrb	r4, [r5, #0]
 800dc3a:	2601      	movs	r6, #1
 800dc3c:	1c95      	adds	r5, r2, #2
 800dc3e:	f033 0210 	bics.w	r2, r3, #16
 800dc42:	d115      	bne.n	800dc70 <_strtol_l.isra.0+0x6c>
 800dc44:	2c30      	cmp	r4, #48	@ 0x30
 800dc46:	d10d      	bne.n	800dc64 <_strtol_l.isra.0+0x60>
 800dc48:	782a      	ldrb	r2, [r5, #0]
 800dc4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dc4e:	2a58      	cmp	r2, #88	@ 0x58
 800dc50:	d108      	bne.n	800dc64 <_strtol_l.isra.0+0x60>
 800dc52:	786c      	ldrb	r4, [r5, #1]
 800dc54:	3502      	adds	r5, #2
 800dc56:	2310      	movs	r3, #16
 800dc58:	e00a      	b.n	800dc70 <_strtol_l.isra.0+0x6c>
 800dc5a:	2c2b      	cmp	r4, #43	@ 0x2b
 800dc5c:	bf04      	itt	eq
 800dc5e:	782c      	ldrbeq	r4, [r5, #0]
 800dc60:	1c95      	addeq	r5, r2, #2
 800dc62:	e7ec      	b.n	800dc3e <_strtol_l.isra.0+0x3a>
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1f6      	bne.n	800dc56 <_strtol_l.isra.0+0x52>
 800dc68:	2c30      	cmp	r4, #48	@ 0x30
 800dc6a:	bf14      	ite	ne
 800dc6c:	230a      	movne	r3, #10
 800dc6e:	2308      	moveq	r3, #8
 800dc70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dc74:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800dc78:	2200      	movs	r2, #0
 800dc7a:	fbbc f9f3 	udiv	r9, ip, r3
 800dc7e:	4610      	mov	r0, r2
 800dc80:	fb03 ca19 	mls	sl, r3, r9, ip
 800dc84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dc88:	2f09      	cmp	r7, #9
 800dc8a:	d80f      	bhi.n	800dcac <_strtol_l.isra.0+0xa8>
 800dc8c:	463c      	mov	r4, r7
 800dc8e:	42a3      	cmp	r3, r4
 800dc90:	dd1b      	ble.n	800dcca <_strtol_l.isra.0+0xc6>
 800dc92:	1c57      	adds	r7, r2, #1
 800dc94:	d007      	beq.n	800dca6 <_strtol_l.isra.0+0xa2>
 800dc96:	4581      	cmp	r9, r0
 800dc98:	d314      	bcc.n	800dcc4 <_strtol_l.isra.0+0xc0>
 800dc9a:	d101      	bne.n	800dca0 <_strtol_l.isra.0+0x9c>
 800dc9c:	45a2      	cmp	sl, r4
 800dc9e:	db11      	blt.n	800dcc4 <_strtol_l.isra.0+0xc0>
 800dca0:	fb00 4003 	mla	r0, r0, r3, r4
 800dca4:	2201      	movs	r2, #1
 800dca6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcaa:	e7eb      	b.n	800dc84 <_strtol_l.isra.0+0x80>
 800dcac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dcb0:	2f19      	cmp	r7, #25
 800dcb2:	d801      	bhi.n	800dcb8 <_strtol_l.isra.0+0xb4>
 800dcb4:	3c37      	subs	r4, #55	@ 0x37
 800dcb6:	e7ea      	b.n	800dc8e <_strtol_l.isra.0+0x8a>
 800dcb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dcbc:	2f19      	cmp	r7, #25
 800dcbe:	d804      	bhi.n	800dcca <_strtol_l.isra.0+0xc6>
 800dcc0:	3c57      	subs	r4, #87	@ 0x57
 800dcc2:	e7e4      	b.n	800dc8e <_strtol_l.isra.0+0x8a>
 800dcc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dcc8:	e7ed      	b.n	800dca6 <_strtol_l.isra.0+0xa2>
 800dcca:	1c53      	adds	r3, r2, #1
 800dccc:	d108      	bne.n	800dce0 <_strtol_l.isra.0+0xdc>
 800dcce:	2322      	movs	r3, #34	@ 0x22
 800dcd0:	f8ce 3000 	str.w	r3, [lr]
 800dcd4:	4660      	mov	r0, ip
 800dcd6:	f1b8 0f00 	cmp.w	r8, #0
 800dcda:	d0a0      	beq.n	800dc1e <_strtol_l.isra.0+0x1a>
 800dcdc:	1e69      	subs	r1, r5, #1
 800dcde:	e006      	b.n	800dcee <_strtol_l.isra.0+0xea>
 800dce0:	b106      	cbz	r6, 800dce4 <_strtol_l.isra.0+0xe0>
 800dce2:	4240      	negs	r0, r0
 800dce4:	f1b8 0f00 	cmp.w	r8, #0
 800dce8:	d099      	beq.n	800dc1e <_strtol_l.isra.0+0x1a>
 800dcea:	2a00      	cmp	r2, #0
 800dcec:	d1f6      	bne.n	800dcdc <_strtol_l.isra.0+0xd8>
 800dcee:	f8c8 1000 	str.w	r1, [r8]
 800dcf2:	e794      	b.n	800dc1e <_strtol_l.isra.0+0x1a>
 800dcf4:	080115a9 	.word	0x080115a9

0800dcf8 <_strtol_r>:
 800dcf8:	f7ff bf84 	b.w	800dc04 <_strtol_l.isra.0>

0800dcfc <_fwalk_sglue>:
 800dcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd00:	4607      	mov	r7, r0
 800dd02:	4688      	mov	r8, r1
 800dd04:	4614      	mov	r4, r2
 800dd06:	2600      	movs	r6, #0
 800dd08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd0c:	f1b9 0901 	subs.w	r9, r9, #1
 800dd10:	d505      	bpl.n	800dd1e <_fwalk_sglue+0x22>
 800dd12:	6824      	ldr	r4, [r4, #0]
 800dd14:	2c00      	cmp	r4, #0
 800dd16:	d1f7      	bne.n	800dd08 <_fwalk_sglue+0xc>
 800dd18:	4630      	mov	r0, r6
 800dd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd1e:	89ab      	ldrh	r3, [r5, #12]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d907      	bls.n	800dd34 <_fwalk_sglue+0x38>
 800dd24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	d003      	beq.n	800dd34 <_fwalk_sglue+0x38>
 800dd2c:	4629      	mov	r1, r5
 800dd2e:	4638      	mov	r0, r7
 800dd30:	47c0      	blx	r8
 800dd32:	4306      	orrs	r6, r0
 800dd34:	3568      	adds	r5, #104	@ 0x68
 800dd36:	e7e9      	b.n	800dd0c <_fwalk_sglue+0x10>

0800dd38 <memset>:
 800dd38:	4402      	add	r2, r0
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d100      	bne.n	800dd42 <memset+0xa>
 800dd40:	4770      	bx	lr
 800dd42:	f803 1b01 	strb.w	r1, [r3], #1
 800dd46:	e7f9      	b.n	800dd3c <memset+0x4>

0800dd48 <strncmp>:
 800dd48:	b510      	push	{r4, lr}
 800dd4a:	b16a      	cbz	r2, 800dd68 <strncmp+0x20>
 800dd4c:	3901      	subs	r1, #1
 800dd4e:	1884      	adds	r4, r0, r2
 800dd50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d103      	bne.n	800dd64 <strncmp+0x1c>
 800dd5c:	42a0      	cmp	r0, r4
 800dd5e:	d001      	beq.n	800dd64 <strncmp+0x1c>
 800dd60:	2a00      	cmp	r2, #0
 800dd62:	d1f5      	bne.n	800dd50 <strncmp+0x8>
 800dd64:	1ad0      	subs	r0, r2, r3
 800dd66:	bd10      	pop	{r4, pc}
 800dd68:	4610      	mov	r0, r2
 800dd6a:	e7fc      	b.n	800dd66 <strncmp+0x1e>

0800dd6c <_lseek_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4d07      	ldr	r5, [pc, #28]	@ (800dd8c <_lseek_r+0x20>)
 800dd70:	4604      	mov	r4, r0
 800dd72:	4608      	mov	r0, r1
 800dd74:	4611      	mov	r1, r2
 800dd76:	2200      	movs	r2, #0
 800dd78:	602a      	str	r2, [r5, #0]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	f7f3 ffcf 	bl	8001d1e <_lseek>
 800dd80:	1c43      	adds	r3, r0, #1
 800dd82:	d102      	bne.n	800dd8a <_lseek_r+0x1e>
 800dd84:	682b      	ldr	r3, [r5, #0]
 800dd86:	b103      	cbz	r3, 800dd8a <_lseek_r+0x1e>
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	bd38      	pop	{r3, r4, r5, pc}
 800dd8c:	20000ec8 	.word	0x20000ec8

0800dd90 <_read_r>:
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	4d07      	ldr	r5, [pc, #28]	@ (800ddb0 <_read_r+0x20>)
 800dd94:	4604      	mov	r4, r0
 800dd96:	4608      	mov	r0, r1
 800dd98:	4611      	mov	r1, r2
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	602a      	str	r2, [r5, #0]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	f7f3 ff5d 	bl	8001c5e <_read>
 800dda4:	1c43      	adds	r3, r0, #1
 800dda6:	d102      	bne.n	800ddae <_read_r+0x1e>
 800dda8:	682b      	ldr	r3, [r5, #0]
 800ddaa:	b103      	cbz	r3, 800ddae <_read_r+0x1e>
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	20000ec8 	.word	0x20000ec8

0800ddb4 <_write_r>:
 800ddb4:	b538      	push	{r3, r4, r5, lr}
 800ddb6:	4d07      	ldr	r5, [pc, #28]	@ (800ddd4 <_write_r+0x20>)
 800ddb8:	4604      	mov	r4, r0
 800ddba:	4608      	mov	r0, r1
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	602a      	str	r2, [r5, #0]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	f7f3 ff68 	bl	8001c98 <_write>
 800ddc8:	1c43      	adds	r3, r0, #1
 800ddca:	d102      	bne.n	800ddd2 <_write_r+0x1e>
 800ddcc:	682b      	ldr	r3, [r5, #0]
 800ddce:	b103      	cbz	r3, 800ddd2 <_write_r+0x1e>
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	bd38      	pop	{r3, r4, r5, pc}
 800ddd4:	20000ec8 	.word	0x20000ec8

0800ddd8 <__errno>:
 800ddd8:	4b01      	ldr	r3, [pc, #4]	@ (800dde0 <__errno+0x8>)
 800ddda:	6818      	ldr	r0, [r3, #0]
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	20000544 	.word	0x20000544

0800dde4 <__libc_init_array>:
 800dde4:	b570      	push	{r4, r5, r6, lr}
 800dde6:	4d0d      	ldr	r5, [pc, #52]	@ (800de1c <__libc_init_array+0x38>)
 800dde8:	4c0d      	ldr	r4, [pc, #52]	@ (800de20 <__libc_init_array+0x3c>)
 800ddea:	1b64      	subs	r4, r4, r5
 800ddec:	10a4      	asrs	r4, r4, #2
 800ddee:	2600      	movs	r6, #0
 800ddf0:	42a6      	cmp	r6, r4
 800ddf2:	d109      	bne.n	800de08 <__libc_init_array+0x24>
 800ddf4:	4d0b      	ldr	r5, [pc, #44]	@ (800de24 <__libc_init_array+0x40>)
 800ddf6:	4c0c      	ldr	r4, [pc, #48]	@ (800de28 <__libc_init_array+0x44>)
 800ddf8:	f003 fa32 	bl	8011260 <_init>
 800ddfc:	1b64      	subs	r4, r4, r5
 800ddfe:	10a4      	asrs	r4, r4, #2
 800de00:	2600      	movs	r6, #0
 800de02:	42a6      	cmp	r6, r4
 800de04:	d105      	bne.n	800de12 <__libc_init_array+0x2e>
 800de06:	bd70      	pop	{r4, r5, r6, pc}
 800de08:	f855 3b04 	ldr.w	r3, [r5], #4
 800de0c:	4798      	blx	r3
 800de0e:	3601      	adds	r6, #1
 800de10:	e7ee      	b.n	800ddf0 <__libc_init_array+0xc>
 800de12:	f855 3b04 	ldr.w	r3, [r5], #4
 800de16:	4798      	blx	r3
 800de18:	3601      	adds	r6, #1
 800de1a:	e7f2      	b.n	800de02 <__libc_init_array+0x1e>
 800de1c:	08011800 	.word	0x08011800
 800de20:	08011800 	.word	0x08011800
 800de24:	08011800 	.word	0x08011800
 800de28:	08011804 	.word	0x08011804

0800de2c <__retarget_lock_init_recursive>:
 800de2c:	4770      	bx	lr

0800de2e <__retarget_lock_acquire_recursive>:
 800de2e:	4770      	bx	lr

0800de30 <__retarget_lock_release_recursive>:
 800de30:	4770      	bx	lr
	...

0800de34 <_localeconv_r>:
 800de34:	4800      	ldr	r0, [pc, #0]	@ (800de38 <_localeconv_r+0x4>)
 800de36:	4770      	bx	lr
 800de38:	200004c8 	.word	0x200004c8

0800de3c <_close_r>:
 800de3c:	b538      	push	{r3, r4, r5, lr}
 800de3e:	4d06      	ldr	r5, [pc, #24]	@ (800de58 <_close_r+0x1c>)
 800de40:	2300      	movs	r3, #0
 800de42:	4604      	mov	r4, r0
 800de44:	4608      	mov	r0, r1
 800de46:	602b      	str	r3, [r5, #0]
 800de48:	f7f3 ff42 	bl	8001cd0 <_close>
 800de4c:	1c43      	adds	r3, r0, #1
 800de4e:	d102      	bne.n	800de56 <_close_r+0x1a>
 800de50:	682b      	ldr	r3, [r5, #0]
 800de52:	b103      	cbz	r3, 800de56 <_close_r+0x1a>
 800de54:	6023      	str	r3, [r4, #0]
 800de56:	bd38      	pop	{r3, r4, r5, pc}
 800de58:	20000ec8 	.word	0x20000ec8

0800de5c <memcpy>:
 800de5c:	440a      	add	r2, r1
 800de5e:	4291      	cmp	r1, r2
 800de60:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800de64:	d100      	bne.n	800de68 <memcpy+0xc>
 800de66:	4770      	bx	lr
 800de68:	b510      	push	{r4, lr}
 800de6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de72:	4291      	cmp	r1, r2
 800de74:	d1f9      	bne.n	800de6a <memcpy+0xe>
 800de76:	bd10      	pop	{r4, pc}

0800de78 <nan>:
 800de78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800de80 <nan+0x8>
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	00000000 	.word	0x00000000
 800de84:	7ff80000 	.word	0x7ff80000

0800de88 <nanf>:
 800de88:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800de90 <nanf+0x8>
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	7fc00000 	.word	0x7fc00000

0800de94 <quorem>:
 800de94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de98:	6903      	ldr	r3, [r0, #16]
 800de9a:	690c      	ldr	r4, [r1, #16]
 800de9c:	42a3      	cmp	r3, r4
 800de9e:	4607      	mov	r7, r0
 800dea0:	db7e      	blt.n	800dfa0 <quorem+0x10c>
 800dea2:	3c01      	subs	r4, #1
 800dea4:	f101 0814 	add.w	r8, r1, #20
 800dea8:	00a3      	lsls	r3, r4, #2
 800deaa:	f100 0514 	add.w	r5, r0, #20
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800deb4:	9301      	str	r3, [sp, #4]
 800deb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800deba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800debe:	3301      	adds	r3, #1
 800dec0:	429a      	cmp	r2, r3
 800dec2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dec6:	fbb2 f6f3 	udiv	r6, r2, r3
 800deca:	d32e      	bcc.n	800df2a <quorem+0x96>
 800decc:	f04f 0a00 	mov.w	sl, #0
 800ded0:	46c4      	mov	ip, r8
 800ded2:	46ae      	mov	lr, r5
 800ded4:	46d3      	mov	fp, sl
 800ded6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800deda:	b298      	uxth	r0, r3
 800dedc:	fb06 a000 	mla	r0, r6, r0, sl
 800dee0:	0c02      	lsrs	r2, r0, #16
 800dee2:	0c1b      	lsrs	r3, r3, #16
 800dee4:	fb06 2303 	mla	r3, r6, r3, r2
 800dee8:	f8de 2000 	ldr.w	r2, [lr]
 800deec:	b280      	uxth	r0, r0
 800deee:	b292      	uxth	r2, r2
 800def0:	1a12      	subs	r2, r2, r0
 800def2:	445a      	add	r2, fp
 800def4:	f8de 0000 	ldr.w	r0, [lr]
 800def8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800defc:	b29b      	uxth	r3, r3
 800defe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800df02:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800df06:	b292      	uxth	r2, r2
 800df08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800df0c:	45e1      	cmp	r9, ip
 800df0e:	f84e 2b04 	str.w	r2, [lr], #4
 800df12:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800df16:	d2de      	bcs.n	800ded6 <quorem+0x42>
 800df18:	9b00      	ldr	r3, [sp, #0]
 800df1a:	58eb      	ldr	r3, [r5, r3]
 800df1c:	b92b      	cbnz	r3, 800df2a <quorem+0x96>
 800df1e:	9b01      	ldr	r3, [sp, #4]
 800df20:	3b04      	subs	r3, #4
 800df22:	429d      	cmp	r5, r3
 800df24:	461a      	mov	r2, r3
 800df26:	d32f      	bcc.n	800df88 <quorem+0xf4>
 800df28:	613c      	str	r4, [r7, #16]
 800df2a:	4638      	mov	r0, r7
 800df2c:	f001 ff16 	bl	800fd5c <__mcmp>
 800df30:	2800      	cmp	r0, #0
 800df32:	db25      	blt.n	800df80 <quorem+0xec>
 800df34:	4629      	mov	r1, r5
 800df36:	2000      	movs	r0, #0
 800df38:	f858 2b04 	ldr.w	r2, [r8], #4
 800df3c:	f8d1 c000 	ldr.w	ip, [r1]
 800df40:	fa1f fe82 	uxth.w	lr, r2
 800df44:	fa1f f38c 	uxth.w	r3, ip
 800df48:	eba3 030e 	sub.w	r3, r3, lr
 800df4c:	4403      	add	r3, r0
 800df4e:	0c12      	lsrs	r2, r2, #16
 800df50:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800df54:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800df58:	b29b      	uxth	r3, r3
 800df5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df5e:	45c1      	cmp	r9, r8
 800df60:	f841 3b04 	str.w	r3, [r1], #4
 800df64:	ea4f 4022 	mov.w	r0, r2, asr #16
 800df68:	d2e6      	bcs.n	800df38 <quorem+0xa4>
 800df6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df72:	b922      	cbnz	r2, 800df7e <quorem+0xea>
 800df74:	3b04      	subs	r3, #4
 800df76:	429d      	cmp	r5, r3
 800df78:	461a      	mov	r2, r3
 800df7a:	d30b      	bcc.n	800df94 <quorem+0x100>
 800df7c:	613c      	str	r4, [r7, #16]
 800df7e:	3601      	adds	r6, #1
 800df80:	4630      	mov	r0, r6
 800df82:	b003      	add	sp, #12
 800df84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df88:	6812      	ldr	r2, [r2, #0]
 800df8a:	3b04      	subs	r3, #4
 800df8c:	2a00      	cmp	r2, #0
 800df8e:	d1cb      	bne.n	800df28 <quorem+0x94>
 800df90:	3c01      	subs	r4, #1
 800df92:	e7c6      	b.n	800df22 <quorem+0x8e>
 800df94:	6812      	ldr	r2, [r2, #0]
 800df96:	3b04      	subs	r3, #4
 800df98:	2a00      	cmp	r2, #0
 800df9a:	d1ef      	bne.n	800df7c <quorem+0xe8>
 800df9c:	3c01      	subs	r4, #1
 800df9e:	e7ea      	b.n	800df76 <quorem+0xe2>
 800dfa0:	2000      	movs	r0, #0
 800dfa2:	e7ee      	b.n	800df82 <quorem+0xee>
 800dfa4:	0000      	movs	r0, r0
	...

0800dfa8 <_dtoa_r>:
 800dfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfac:	69c7      	ldr	r7, [r0, #28]
 800dfae:	b097      	sub	sp, #92	@ 0x5c
 800dfb0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dfb4:	ec55 4b10 	vmov	r4, r5, d0
 800dfb8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dfba:	9107      	str	r1, [sp, #28]
 800dfbc:	4681      	mov	r9, r0
 800dfbe:	920c      	str	r2, [sp, #48]	@ 0x30
 800dfc0:	9311      	str	r3, [sp, #68]	@ 0x44
 800dfc2:	b97f      	cbnz	r7, 800dfe4 <_dtoa_r+0x3c>
 800dfc4:	2010      	movs	r0, #16
 800dfc6:	f001 fa99 	bl	800f4fc <malloc>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	f8c9 001c 	str.w	r0, [r9, #28]
 800dfd0:	b920      	cbnz	r0, 800dfdc <_dtoa_r+0x34>
 800dfd2:	4ba9      	ldr	r3, [pc, #676]	@ (800e278 <_dtoa_r+0x2d0>)
 800dfd4:	21ef      	movs	r1, #239	@ 0xef
 800dfd6:	48a9      	ldr	r0, [pc, #676]	@ (800e27c <_dtoa_r+0x2d4>)
 800dfd8:	f002 f914 	bl	8010204 <__assert_func>
 800dfdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dfe0:	6007      	str	r7, [r0, #0]
 800dfe2:	60c7      	str	r7, [r0, #12]
 800dfe4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dfe8:	6819      	ldr	r1, [r3, #0]
 800dfea:	b159      	cbz	r1, 800e004 <_dtoa_r+0x5c>
 800dfec:	685a      	ldr	r2, [r3, #4]
 800dfee:	604a      	str	r2, [r1, #4]
 800dff0:	2301      	movs	r3, #1
 800dff2:	4093      	lsls	r3, r2
 800dff4:	608b      	str	r3, [r1, #8]
 800dff6:	4648      	mov	r0, r9
 800dff8:	f001 fc34 	bl	800f864 <_Bfree>
 800dffc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e000:	2200      	movs	r2, #0
 800e002:	601a      	str	r2, [r3, #0]
 800e004:	1e2b      	subs	r3, r5, #0
 800e006:	bfb9      	ittee	lt
 800e008:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e00c:	9305      	strlt	r3, [sp, #20]
 800e00e:	2300      	movge	r3, #0
 800e010:	6033      	strge	r3, [r6, #0]
 800e012:	9f05      	ldr	r7, [sp, #20]
 800e014:	4b9a      	ldr	r3, [pc, #616]	@ (800e280 <_dtoa_r+0x2d8>)
 800e016:	bfbc      	itt	lt
 800e018:	2201      	movlt	r2, #1
 800e01a:	6032      	strlt	r2, [r6, #0]
 800e01c:	43bb      	bics	r3, r7
 800e01e:	d112      	bne.n	800e046 <_dtoa_r+0x9e>
 800e020:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e022:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e026:	6013      	str	r3, [r2, #0]
 800e028:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e02c:	4323      	orrs	r3, r4
 800e02e:	f000 855a 	beq.w	800eae6 <_dtoa_r+0xb3e>
 800e032:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e034:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e294 <_dtoa_r+0x2ec>
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f000 855c 	beq.w	800eaf6 <_dtoa_r+0xb4e>
 800e03e:	f10a 0303 	add.w	r3, sl, #3
 800e042:	f000 bd56 	b.w	800eaf2 <_dtoa_r+0xb4a>
 800e046:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e04a:	2200      	movs	r2, #0
 800e04c:	ec51 0b17 	vmov	r0, r1, d7
 800e050:	2300      	movs	r3, #0
 800e052:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e056:	f7f2 fd67 	bl	8000b28 <__aeabi_dcmpeq>
 800e05a:	4680      	mov	r8, r0
 800e05c:	b158      	cbz	r0, 800e076 <_dtoa_r+0xce>
 800e05e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e060:	2301      	movs	r3, #1
 800e062:	6013      	str	r3, [r2, #0]
 800e064:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e066:	b113      	cbz	r3, 800e06e <_dtoa_r+0xc6>
 800e068:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e06a:	4b86      	ldr	r3, [pc, #536]	@ (800e284 <_dtoa_r+0x2dc>)
 800e06c:	6013      	str	r3, [r2, #0]
 800e06e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e298 <_dtoa_r+0x2f0>
 800e072:	f000 bd40 	b.w	800eaf6 <_dtoa_r+0xb4e>
 800e076:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e07a:	aa14      	add	r2, sp, #80	@ 0x50
 800e07c:	a915      	add	r1, sp, #84	@ 0x54
 800e07e:	4648      	mov	r0, r9
 800e080:	f001 ff8c 	bl	800ff9c <__d2b>
 800e084:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e088:	9002      	str	r0, [sp, #8]
 800e08a:	2e00      	cmp	r6, #0
 800e08c:	d078      	beq.n	800e180 <_dtoa_r+0x1d8>
 800e08e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e090:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e098:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e09c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e0a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e0a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	4b76      	ldr	r3, [pc, #472]	@ (800e288 <_dtoa_r+0x2e0>)
 800e0ae:	f7f2 f91b 	bl	80002e8 <__aeabi_dsub>
 800e0b2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e260 <_dtoa_r+0x2b8>)
 800e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b8:	f7f2 face 	bl	8000658 <__aeabi_dmul>
 800e0bc:	a36a      	add	r3, pc, #424	@ (adr r3, 800e268 <_dtoa_r+0x2c0>)
 800e0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c2:	f7f2 f913 	bl	80002ec <__adddf3>
 800e0c6:	4604      	mov	r4, r0
 800e0c8:	4630      	mov	r0, r6
 800e0ca:	460d      	mov	r5, r1
 800e0cc:	f7f2 fa5a 	bl	8000584 <__aeabi_i2d>
 800e0d0:	a367      	add	r3, pc, #412	@ (adr r3, 800e270 <_dtoa_r+0x2c8>)
 800e0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d6:	f7f2 fabf 	bl	8000658 <__aeabi_dmul>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4620      	mov	r0, r4
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	f7f2 f903 	bl	80002ec <__adddf3>
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	460d      	mov	r5, r1
 800e0ea:	f7f2 fd65 	bl	8000bb8 <__aeabi_d2iz>
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	4607      	mov	r7, r0
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	4629      	mov	r1, r5
 800e0f8:	f7f2 fd20 	bl	8000b3c <__aeabi_dcmplt>
 800e0fc:	b140      	cbz	r0, 800e110 <_dtoa_r+0x168>
 800e0fe:	4638      	mov	r0, r7
 800e100:	f7f2 fa40 	bl	8000584 <__aeabi_i2d>
 800e104:	4622      	mov	r2, r4
 800e106:	462b      	mov	r3, r5
 800e108:	f7f2 fd0e 	bl	8000b28 <__aeabi_dcmpeq>
 800e10c:	b900      	cbnz	r0, 800e110 <_dtoa_r+0x168>
 800e10e:	3f01      	subs	r7, #1
 800e110:	2f16      	cmp	r7, #22
 800e112:	d852      	bhi.n	800e1ba <_dtoa_r+0x212>
 800e114:	4b5d      	ldr	r3, [pc, #372]	@ (800e28c <_dtoa_r+0x2e4>)
 800e116:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e122:	f7f2 fd0b 	bl	8000b3c <__aeabi_dcmplt>
 800e126:	2800      	cmp	r0, #0
 800e128:	d049      	beq.n	800e1be <_dtoa_r+0x216>
 800e12a:	3f01      	subs	r7, #1
 800e12c:	2300      	movs	r3, #0
 800e12e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e130:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e132:	1b9b      	subs	r3, r3, r6
 800e134:	1e5a      	subs	r2, r3, #1
 800e136:	bf45      	ittet	mi
 800e138:	f1c3 0301 	rsbmi	r3, r3, #1
 800e13c:	9300      	strmi	r3, [sp, #0]
 800e13e:	2300      	movpl	r3, #0
 800e140:	2300      	movmi	r3, #0
 800e142:	9206      	str	r2, [sp, #24]
 800e144:	bf54      	ite	pl
 800e146:	9300      	strpl	r3, [sp, #0]
 800e148:	9306      	strmi	r3, [sp, #24]
 800e14a:	2f00      	cmp	r7, #0
 800e14c:	db39      	blt.n	800e1c2 <_dtoa_r+0x21a>
 800e14e:	9b06      	ldr	r3, [sp, #24]
 800e150:	970d      	str	r7, [sp, #52]	@ 0x34
 800e152:	443b      	add	r3, r7
 800e154:	9306      	str	r3, [sp, #24]
 800e156:	2300      	movs	r3, #0
 800e158:	9308      	str	r3, [sp, #32]
 800e15a:	9b07      	ldr	r3, [sp, #28]
 800e15c:	2b09      	cmp	r3, #9
 800e15e:	d863      	bhi.n	800e228 <_dtoa_r+0x280>
 800e160:	2b05      	cmp	r3, #5
 800e162:	bfc4      	itt	gt
 800e164:	3b04      	subgt	r3, #4
 800e166:	9307      	strgt	r3, [sp, #28]
 800e168:	9b07      	ldr	r3, [sp, #28]
 800e16a:	f1a3 0302 	sub.w	r3, r3, #2
 800e16e:	bfcc      	ite	gt
 800e170:	2400      	movgt	r4, #0
 800e172:	2401      	movle	r4, #1
 800e174:	2b03      	cmp	r3, #3
 800e176:	d863      	bhi.n	800e240 <_dtoa_r+0x298>
 800e178:	e8df f003 	tbb	[pc, r3]
 800e17c:	2b375452 	.word	0x2b375452
 800e180:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e184:	441e      	add	r6, r3
 800e186:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e18a:	2b20      	cmp	r3, #32
 800e18c:	bfc1      	itttt	gt
 800e18e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e192:	409f      	lslgt	r7, r3
 800e194:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e198:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e19c:	bfd6      	itet	le
 800e19e:	f1c3 0320 	rsble	r3, r3, #32
 800e1a2:	ea47 0003 	orrgt.w	r0, r7, r3
 800e1a6:	fa04 f003 	lslle.w	r0, r4, r3
 800e1aa:	f7f2 f9db 	bl	8000564 <__aeabi_ui2d>
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e1b4:	3e01      	subs	r6, #1
 800e1b6:	9212      	str	r2, [sp, #72]	@ 0x48
 800e1b8:	e776      	b.n	800e0a8 <_dtoa_r+0x100>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e7b7      	b.n	800e12e <_dtoa_r+0x186>
 800e1be:	9010      	str	r0, [sp, #64]	@ 0x40
 800e1c0:	e7b6      	b.n	800e130 <_dtoa_r+0x188>
 800e1c2:	9b00      	ldr	r3, [sp, #0]
 800e1c4:	1bdb      	subs	r3, r3, r7
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	427b      	negs	r3, r7
 800e1ca:	9308      	str	r3, [sp, #32]
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	930d      	str	r3, [sp, #52]	@ 0x34
 800e1d0:	e7c3      	b.n	800e15a <_dtoa_r+0x1b2>
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1d8:	eb07 0b03 	add.w	fp, r7, r3
 800e1dc:	f10b 0301 	add.w	r3, fp, #1
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	9303      	str	r3, [sp, #12]
 800e1e4:	bfb8      	it	lt
 800e1e6:	2301      	movlt	r3, #1
 800e1e8:	e006      	b.n	800e1f8 <_dtoa_r+0x250>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	dd28      	ble.n	800e246 <_dtoa_r+0x29e>
 800e1f4:	469b      	mov	fp, r3
 800e1f6:	9303      	str	r3, [sp, #12]
 800e1f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	2204      	movs	r2, #4
 800e200:	f102 0514 	add.w	r5, r2, #20
 800e204:	429d      	cmp	r5, r3
 800e206:	d926      	bls.n	800e256 <_dtoa_r+0x2ae>
 800e208:	6041      	str	r1, [r0, #4]
 800e20a:	4648      	mov	r0, r9
 800e20c:	f001 faea 	bl	800f7e4 <_Balloc>
 800e210:	4682      	mov	sl, r0
 800e212:	2800      	cmp	r0, #0
 800e214:	d142      	bne.n	800e29c <_dtoa_r+0x2f4>
 800e216:	4b1e      	ldr	r3, [pc, #120]	@ (800e290 <_dtoa_r+0x2e8>)
 800e218:	4602      	mov	r2, r0
 800e21a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e21e:	e6da      	b.n	800dfd6 <_dtoa_r+0x2e>
 800e220:	2300      	movs	r3, #0
 800e222:	e7e3      	b.n	800e1ec <_dtoa_r+0x244>
 800e224:	2300      	movs	r3, #0
 800e226:	e7d5      	b.n	800e1d4 <_dtoa_r+0x22c>
 800e228:	2401      	movs	r4, #1
 800e22a:	2300      	movs	r3, #0
 800e22c:	9307      	str	r3, [sp, #28]
 800e22e:	9409      	str	r4, [sp, #36]	@ 0x24
 800e230:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e234:	2200      	movs	r2, #0
 800e236:	f8cd b00c 	str.w	fp, [sp, #12]
 800e23a:	2312      	movs	r3, #18
 800e23c:	920c      	str	r2, [sp, #48]	@ 0x30
 800e23e:	e7db      	b.n	800e1f8 <_dtoa_r+0x250>
 800e240:	2301      	movs	r3, #1
 800e242:	9309      	str	r3, [sp, #36]	@ 0x24
 800e244:	e7f4      	b.n	800e230 <_dtoa_r+0x288>
 800e246:	f04f 0b01 	mov.w	fp, #1
 800e24a:	f8cd b00c 	str.w	fp, [sp, #12]
 800e24e:	465b      	mov	r3, fp
 800e250:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e254:	e7d0      	b.n	800e1f8 <_dtoa_r+0x250>
 800e256:	3101      	adds	r1, #1
 800e258:	0052      	lsls	r2, r2, #1
 800e25a:	e7d1      	b.n	800e200 <_dtoa_r+0x258>
 800e25c:	f3af 8000 	nop.w
 800e260:	636f4361 	.word	0x636f4361
 800e264:	3fd287a7 	.word	0x3fd287a7
 800e268:	8b60c8b3 	.word	0x8b60c8b3
 800e26c:	3fc68a28 	.word	0x3fc68a28
 800e270:	509f79fb 	.word	0x509f79fb
 800e274:	3fd34413 	.word	0x3fd34413
 800e278:	080113cc 	.word	0x080113cc
 800e27c:	080113e3 	.word	0x080113e3
 800e280:	7ff00000 	.word	0x7ff00000
 800e284:	0801138d 	.word	0x0801138d
 800e288:	3ff80000 	.word	0x3ff80000
 800e28c:	080116e0 	.word	0x080116e0
 800e290:	0801143b 	.word	0x0801143b
 800e294:	080113c8 	.word	0x080113c8
 800e298:	0801138c 	.word	0x0801138c
 800e29c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e2a0:	6018      	str	r0, [r3, #0]
 800e2a2:	9b03      	ldr	r3, [sp, #12]
 800e2a4:	2b0e      	cmp	r3, #14
 800e2a6:	f200 80a1 	bhi.w	800e3ec <_dtoa_r+0x444>
 800e2aa:	2c00      	cmp	r4, #0
 800e2ac:	f000 809e 	beq.w	800e3ec <_dtoa_r+0x444>
 800e2b0:	2f00      	cmp	r7, #0
 800e2b2:	dd33      	ble.n	800e31c <_dtoa_r+0x374>
 800e2b4:	4b9c      	ldr	r3, [pc, #624]	@ (800e528 <_dtoa_r+0x580>)
 800e2b6:	f007 020f 	and.w	r2, r7, #15
 800e2ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2be:	ed93 7b00 	vldr	d7, [r3]
 800e2c2:	05f8      	lsls	r0, r7, #23
 800e2c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e2c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e2cc:	d516      	bpl.n	800e2fc <_dtoa_r+0x354>
 800e2ce:	4b97      	ldr	r3, [pc, #604]	@ (800e52c <_dtoa_r+0x584>)
 800e2d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e2d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e2d8:	f7f2 fae8 	bl	80008ac <__aeabi_ddiv>
 800e2dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2e0:	f004 040f 	and.w	r4, r4, #15
 800e2e4:	2603      	movs	r6, #3
 800e2e6:	4d91      	ldr	r5, [pc, #580]	@ (800e52c <_dtoa_r+0x584>)
 800e2e8:	b954      	cbnz	r4, 800e300 <_dtoa_r+0x358>
 800e2ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e2ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2f2:	f7f2 fadb 	bl	80008ac <__aeabi_ddiv>
 800e2f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2fa:	e028      	b.n	800e34e <_dtoa_r+0x3a6>
 800e2fc:	2602      	movs	r6, #2
 800e2fe:	e7f2      	b.n	800e2e6 <_dtoa_r+0x33e>
 800e300:	07e1      	lsls	r1, r4, #31
 800e302:	d508      	bpl.n	800e316 <_dtoa_r+0x36e>
 800e304:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e308:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e30c:	f7f2 f9a4 	bl	8000658 <__aeabi_dmul>
 800e310:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e314:	3601      	adds	r6, #1
 800e316:	1064      	asrs	r4, r4, #1
 800e318:	3508      	adds	r5, #8
 800e31a:	e7e5      	b.n	800e2e8 <_dtoa_r+0x340>
 800e31c:	f000 80af 	beq.w	800e47e <_dtoa_r+0x4d6>
 800e320:	427c      	negs	r4, r7
 800e322:	4b81      	ldr	r3, [pc, #516]	@ (800e528 <_dtoa_r+0x580>)
 800e324:	4d81      	ldr	r5, [pc, #516]	@ (800e52c <_dtoa_r+0x584>)
 800e326:	f004 020f 	and.w	r2, r4, #15
 800e32a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e332:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e336:	f7f2 f98f 	bl	8000658 <__aeabi_dmul>
 800e33a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e33e:	1124      	asrs	r4, r4, #4
 800e340:	2300      	movs	r3, #0
 800e342:	2602      	movs	r6, #2
 800e344:	2c00      	cmp	r4, #0
 800e346:	f040 808f 	bne.w	800e468 <_dtoa_r+0x4c0>
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d1d3      	bne.n	800e2f6 <_dtoa_r+0x34e>
 800e34e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e350:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e354:	2b00      	cmp	r3, #0
 800e356:	f000 8094 	beq.w	800e482 <_dtoa_r+0x4da>
 800e35a:	4b75      	ldr	r3, [pc, #468]	@ (800e530 <_dtoa_r+0x588>)
 800e35c:	2200      	movs	r2, #0
 800e35e:	4620      	mov	r0, r4
 800e360:	4629      	mov	r1, r5
 800e362:	f7f2 fbeb 	bl	8000b3c <__aeabi_dcmplt>
 800e366:	2800      	cmp	r0, #0
 800e368:	f000 808b 	beq.w	800e482 <_dtoa_r+0x4da>
 800e36c:	9b03      	ldr	r3, [sp, #12]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	f000 8087 	beq.w	800e482 <_dtoa_r+0x4da>
 800e374:	f1bb 0f00 	cmp.w	fp, #0
 800e378:	dd34      	ble.n	800e3e4 <_dtoa_r+0x43c>
 800e37a:	4620      	mov	r0, r4
 800e37c:	4b6d      	ldr	r3, [pc, #436]	@ (800e534 <_dtoa_r+0x58c>)
 800e37e:	2200      	movs	r2, #0
 800e380:	4629      	mov	r1, r5
 800e382:	f7f2 f969 	bl	8000658 <__aeabi_dmul>
 800e386:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e38a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e38e:	3601      	adds	r6, #1
 800e390:	465c      	mov	r4, fp
 800e392:	4630      	mov	r0, r6
 800e394:	f7f2 f8f6 	bl	8000584 <__aeabi_i2d>
 800e398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e39c:	f7f2 f95c 	bl	8000658 <__aeabi_dmul>
 800e3a0:	4b65      	ldr	r3, [pc, #404]	@ (800e538 <_dtoa_r+0x590>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f7f1 ffa2 	bl	80002ec <__adddf3>
 800e3a8:	4605      	mov	r5, r0
 800e3aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e3ae:	2c00      	cmp	r4, #0
 800e3b0:	d16a      	bne.n	800e488 <_dtoa_r+0x4e0>
 800e3b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3b6:	4b61      	ldr	r3, [pc, #388]	@ (800e53c <_dtoa_r+0x594>)
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f7f1 ff95 	bl	80002e8 <__aeabi_dsub>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3c6:	462a      	mov	r2, r5
 800e3c8:	4633      	mov	r3, r6
 800e3ca:	f7f2 fbd5 	bl	8000b78 <__aeabi_dcmpgt>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	f040 8298 	bne.w	800e904 <_dtoa_r+0x95c>
 800e3d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3d8:	462a      	mov	r2, r5
 800e3da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e3de:	f7f2 fbad 	bl	8000b3c <__aeabi_dcmplt>
 800e3e2:	bb38      	cbnz	r0, 800e434 <_dtoa_r+0x48c>
 800e3e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e3e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e3ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f2c0 8157 	blt.w	800e6a2 <_dtoa_r+0x6fa>
 800e3f4:	2f0e      	cmp	r7, #14
 800e3f6:	f300 8154 	bgt.w	800e6a2 <_dtoa_r+0x6fa>
 800e3fa:	4b4b      	ldr	r3, [pc, #300]	@ (800e528 <_dtoa_r+0x580>)
 800e3fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e400:	ed93 7b00 	vldr	d7, [r3]
 800e404:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e406:	2b00      	cmp	r3, #0
 800e408:	ed8d 7b00 	vstr	d7, [sp]
 800e40c:	f280 80e5 	bge.w	800e5da <_dtoa_r+0x632>
 800e410:	9b03      	ldr	r3, [sp, #12]
 800e412:	2b00      	cmp	r3, #0
 800e414:	f300 80e1 	bgt.w	800e5da <_dtoa_r+0x632>
 800e418:	d10c      	bne.n	800e434 <_dtoa_r+0x48c>
 800e41a:	4b48      	ldr	r3, [pc, #288]	@ (800e53c <_dtoa_r+0x594>)
 800e41c:	2200      	movs	r2, #0
 800e41e:	ec51 0b17 	vmov	r0, r1, d7
 800e422:	f7f2 f919 	bl	8000658 <__aeabi_dmul>
 800e426:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e42a:	f7f2 fb9b 	bl	8000b64 <__aeabi_dcmpge>
 800e42e:	2800      	cmp	r0, #0
 800e430:	f000 8266 	beq.w	800e900 <_dtoa_r+0x958>
 800e434:	2400      	movs	r4, #0
 800e436:	4625      	mov	r5, r4
 800e438:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e43a:	4656      	mov	r6, sl
 800e43c:	ea6f 0803 	mvn.w	r8, r3
 800e440:	2700      	movs	r7, #0
 800e442:	4621      	mov	r1, r4
 800e444:	4648      	mov	r0, r9
 800e446:	f001 fa0d 	bl	800f864 <_Bfree>
 800e44a:	2d00      	cmp	r5, #0
 800e44c:	f000 80bd 	beq.w	800e5ca <_dtoa_r+0x622>
 800e450:	b12f      	cbz	r7, 800e45e <_dtoa_r+0x4b6>
 800e452:	42af      	cmp	r7, r5
 800e454:	d003      	beq.n	800e45e <_dtoa_r+0x4b6>
 800e456:	4639      	mov	r1, r7
 800e458:	4648      	mov	r0, r9
 800e45a:	f001 fa03 	bl	800f864 <_Bfree>
 800e45e:	4629      	mov	r1, r5
 800e460:	4648      	mov	r0, r9
 800e462:	f001 f9ff 	bl	800f864 <_Bfree>
 800e466:	e0b0      	b.n	800e5ca <_dtoa_r+0x622>
 800e468:	07e2      	lsls	r2, r4, #31
 800e46a:	d505      	bpl.n	800e478 <_dtoa_r+0x4d0>
 800e46c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e470:	f7f2 f8f2 	bl	8000658 <__aeabi_dmul>
 800e474:	3601      	adds	r6, #1
 800e476:	2301      	movs	r3, #1
 800e478:	1064      	asrs	r4, r4, #1
 800e47a:	3508      	adds	r5, #8
 800e47c:	e762      	b.n	800e344 <_dtoa_r+0x39c>
 800e47e:	2602      	movs	r6, #2
 800e480:	e765      	b.n	800e34e <_dtoa_r+0x3a6>
 800e482:	9c03      	ldr	r4, [sp, #12]
 800e484:	46b8      	mov	r8, r7
 800e486:	e784      	b.n	800e392 <_dtoa_r+0x3ea>
 800e488:	4b27      	ldr	r3, [pc, #156]	@ (800e528 <_dtoa_r+0x580>)
 800e48a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e48c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e490:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e494:	4454      	add	r4, sl
 800e496:	2900      	cmp	r1, #0
 800e498:	d054      	beq.n	800e544 <_dtoa_r+0x59c>
 800e49a:	4929      	ldr	r1, [pc, #164]	@ (800e540 <_dtoa_r+0x598>)
 800e49c:	2000      	movs	r0, #0
 800e49e:	f7f2 fa05 	bl	80008ac <__aeabi_ddiv>
 800e4a2:	4633      	mov	r3, r6
 800e4a4:	462a      	mov	r2, r5
 800e4a6:	f7f1 ff1f 	bl	80002e8 <__aeabi_dsub>
 800e4aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e4ae:	4656      	mov	r6, sl
 800e4b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4b4:	f7f2 fb80 	bl	8000bb8 <__aeabi_d2iz>
 800e4b8:	4605      	mov	r5, r0
 800e4ba:	f7f2 f863 	bl	8000584 <__aeabi_i2d>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4c6:	f7f1 ff0f 	bl	80002e8 <__aeabi_dsub>
 800e4ca:	3530      	adds	r5, #48	@ 0x30
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	460b      	mov	r3, r1
 800e4d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e4d4:	f806 5b01 	strb.w	r5, [r6], #1
 800e4d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e4dc:	f7f2 fb2e 	bl	8000b3c <__aeabi_dcmplt>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	d172      	bne.n	800e5ca <_dtoa_r+0x622>
 800e4e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4e8:	4911      	ldr	r1, [pc, #68]	@ (800e530 <_dtoa_r+0x588>)
 800e4ea:	2000      	movs	r0, #0
 800e4ec:	f7f1 fefc 	bl	80002e8 <__aeabi_dsub>
 800e4f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e4f4:	f7f2 fb22 	bl	8000b3c <__aeabi_dcmplt>
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	f040 80b4 	bne.w	800e666 <_dtoa_r+0x6be>
 800e4fe:	42a6      	cmp	r6, r4
 800e500:	f43f af70 	beq.w	800e3e4 <_dtoa_r+0x43c>
 800e504:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e508:	4b0a      	ldr	r3, [pc, #40]	@ (800e534 <_dtoa_r+0x58c>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	f7f2 f8a4 	bl	8000658 <__aeabi_dmul>
 800e510:	4b08      	ldr	r3, [pc, #32]	@ (800e534 <_dtoa_r+0x58c>)
 800e512:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e516:	2200      	movs	r2, #0
 800e518:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e51c:	f7f2 f89c 	bl	8000658 <__aeabi_dmul>
 800e520:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e524:	e7c4      	b.n	800e4b0 <_dtoa_r+0x508>
 800e526:	bf00      	nop
 800e528:	080116e0 	.word	0x080116e0
 800e52c:	080116b8 	.word	0x080116b8
 800e530:	3ff00000 	.word	0x3ff00000
 800e534:	40240000 	.word	0x40240000
 800e538:	401c0000 	.word	0x401c0000
 800e53c:	40140000 	.word	0x40140000
 800e540:	3fe00000 	.word	0x3fe00000
 800e544:	4631      	mov	r1, r6
 800e546:	4628      	mov	r0, r5
 800e548:	f7f2 f886 	bl	8000658 <__aeabi_dmul>
 800e54c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e550:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e552:	4656      	mov	r6, sl
 800e554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e558:	f7f2 fb2e 	bl	8000bb8 <__aeabi_d2iz>
 800e55c:	4605      	mov	r5, r0
 800e55e:	f7f2 f811 	bl	8000584 <__aeabi_i2d>
 800e562:	4602      	mov	r2, r0
 800e564:	460b      	mov	r3, r1
 800e566:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e56a:	f7f1 febd 	bl	80002e8 <__aeabi_dsub>
 800e56e:	3530      	adds	r5, #48	@ 0x30
 800e570:	f806 5b01 	strb.w	r5, [r6], #1
 800e574:	4602      	mov	r2, r0
 800e576:	460b      	mov	r3, r1
 800e578:	42a6      	cmp	r6, r4
 800e57a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e57e:	f04f 0200 	mov.w	r2, #0
 800e582:	d124      	bne.n	800e5ce <_dtoa_r+0x626>
 800e584:	4baf      	ldr	r3, [pc, #700]	@ (800e844 <_dtoa_r+0x89c>)
 800e586:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e58a:	f7f1 feaf 	bl	80002ec <__adddf3>
 800e58e:	4602      	mov	r2, r0
 800e590:	460b      	mov	r3, r1
 800e592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e596:	f7f2 faef 	bl	8000b78 <__aeabi_dcmpgt>
 800e59a:	2800      	cmp	r0, #0
 800e59c:	d163      	bne.n	800e666 <_dtoa_r+0x6be>
 800e59e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e5a2:	49a8      	ldr	r1, [pc, #672]	@ (800e844 <_dtoa_r+0x89c>)
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	f7f1 fe9f 	bl	80002e8 <__aeabi_dsub>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5b2:	f7f2 fac3 	bl	8000b3c <__aeabi_dcmplt>
 800e5b6:	2800      	cmp	r0, #0
 800e5b8:	f43f af14 	beq.w	800e3e4 <_dtoa_r+0x43c>
 800e5bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e5be:	1e73      	subs	r3, r6, #1
 800e5c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e5c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e5c6:	2b30      	cmp	r3, #48	@ 0x30
 800e5c8:	d0f8      	beq.n	800e5bc <_dtoa_r+0x614>
 800e5ca:	4647      	mov	r7, r8
 800e5cc:	e03b      	b.n	800e646 <_dtoa_r+0x69e>
 800e5ce:	4b9e      	ldr	r3, [pc, #632]	@ (800e848 <_dtoa_r+0x8a0>)
 800e5d0:	f7f2 f842 	bl	8000658 <__aeabi_dmul>
 800e5d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5d8:	e7bc      	b.n	800e554 <_dtoa_r+0x5ac>
 800e5da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e5de:	4656      	mov	r6, sl
 800e5e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	f7f2 f960 	bl	80008ac <__aeabi_ddiv>
 800e5ec:	f7f2 fae4 	bl	8000bb8 <__aeabi_d2iz>
 800e5f0:	4680      	mov	r8, r0
 800e5f2:	f7f1 ffc7 	bl	8000584 <__aeabi_i2d>
 800e5f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5fa:	f7f2 f82d 	bl	8000658 <__aeabi_dmul>
 800e5fe:	4602      	mov	r2, r0
 800e600:	460b      	mov	r3, r1
 800e602:	4620      	mov	r0, r4
 800e604:	4629      	mov	r1, r5
 800e606:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e60a:	f7f1 fe6d 	bl	80002e8 <__aeabi_dsub>
 800e60e:	f806 4b01 	strb.w	r4, [r6], #1
 800e612:	9d03      	ldr	r5, [sp, #12]
 800e614:	eba6 040a 	sub.w	r4, r6, sl
 800e618:	42a5      	cmp	r5, r4
 800e61a:	4602      	mov	r2, r0
 800e61c:	460b      	mov	r3, r1
 800e61e:	d133      	bne.n	800e688 <_dtoa_r+0x6e0>
 800e620:	f7f1 fe64 	bl	80002ec <__adddf3>
 800e624:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e628:	4604      	mov	r4, r0
 800e62a:	460d      	mov	r5, r1
 800e62c:	f7f2 faa4 	bl	8000b78 <__aeabi_dcmpgt>
 800e630:	b9c0      	cbnz	r0, 800e664 <_dtoa_r+0x6bc>
 800e632:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e636:	4620      	mov	r0, r4
 800e638:	4629      	mov	r1, r5
 800e63a:	f7f2 fa75 	bl	8000b28 <__aeabi_dcmpeq>
 800e63e:	b110      	cbz	r0, 800e646 <_dtoa_r+0x69e>
 800e640:	f018 0f01 	tst.w	r8, #1
 800e644:	d10e      	bne.n	800e664 <_dtoa_r+0x6bc>
 800e646:	9902      	ldr	r1, [sp, #8]
 800e648:	4648      	mov	r0, r9
 800e64a:	f001 f90b 	bl	800f864 <_Bfree>
 800e64e:	2300      	movs	r3, #0
 800e650:	7033      	strb	r3, [r6, #0]
 800e652:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e654:	3701      	adds	r7, #1
 800e656:	601f      	str	r7, [r3, #0]
 800e658:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	f000 824b 	beq.w	800eaf6 <_dtoa_r+0xb4e>
 800e660:	601e      	str	r6, [r3, #0]
 800e662:	e248      	b.n	800eaf6 <_dtoa_r+0xb4e>
 800e664:	46b8      	mov	r8, r7
 800e666:	4633      	mov	r3, r6
 800e668:	461e      	mov	r6, r3
 800e66a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e66e:	2a39      	cmp	r2, #57	@ 0x39
 800e670:	d106      	bne.n	800e680 <_dtoa_r+0x6d8>
 800e672:	459a      	cmp	sl, r3
 800e674:	d1f8      	bne.n	800e668 <_dtoa_r+0x6c0>
 800e676:	2230      	movs	r2, #48	@ 0x30
 800e678:	f108 0801 	add.w	r8, r8, #1
 800e67c:	f88a 2000 	strb.w	r2, [sl]
 800e680:	781a      	ldrb	r2, [r3, #0]
 800e682:	3201      	adds	r2, #1
 800e684:	701a      	strb	r2, [r3, #0]
 800e686:	e7a0      	b.n	800e5ca <_dtoa_r+0x622>
 800e688:	4b6f      	ldr	r3, [pc, #444]	@ (800e848 <_dtoa_r+0x8a0>)
 800e68a:	2200      	movs	r2, #0
 800e68c:	f7f1 ffe4 	bl	8000658 <__aeabi_dmul>
 800e690:	2200      	movs	r2, #0
 800e692:	2300      	movs	r3, #0
 800e694:	4604      	mov	r4, r0
 800e696:	460d      	mov	r5, r1
 800e698:	f7f2 fa46 	bl	8000b28 <__aeabi_dcmpeq>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	d09f      	beq.n	800e5e0 <_dtoa_r+0x638>
 800e6a0:	e7d1      	b.n	800e646 <_dtoa_r+0x69e>
 800e6a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6a4:	2a00      	cmp	r2, #0
 800e6a6:	f000 80ea 	beq.w	800e87e <_dtoa_r+0x8d6>
 800e6aa:	9a07      	ldr	r2, [sp, #28]
 800e6ac:	2a01      	cmp	r2, #1
 800e6ae:	f300 80cd 	bgt.w	800e84c <_dtoa_r+0x8a4>
 800e6b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e6b4:	2a00      	cmp	r2, #0
 800e6b6:	f000 80c1 	beq.w	800e83c <_dtoa_r+0x894>
 800e6ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e6be:	9c08      	ldr	r4, [sp, #32]
 800e6c0:	9e00      	ldr	r6, [sp, #0]
 800e6c2:	9a00      	ldr	r2, [sp, #0]
 800e6c4:	441a      	add	r2, r3
 800e6c6:	9200      	str	r2, [sp, #0]
 800e6c8:	9a06      	ldr	r2, [sp, #24]
 800e6ca:	2101      	movs	r1, #1
 800e6cc:	441a      	add	r2, r3
 800e6ce:	4648      	mov	r0, r9
 800e6d0:	9206      	str	r2, [sp, #24]
 800e6d2:	f001 f9c5 	bl	800fa60 <__i2b>
 800e6d6:	4605      	mov	r5, r0
 800e6d8:	b166      	cbz	r6, 800e6f4 <_dtoa_r+0x74c>
 800e6da:	9b06      	ldr	r3, [sp, #24]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	dd09      	ble.n	800e6f4 <_dtoa_r+0x74c>
 800e6e0:	42b3      	cmp	r3, r6
 800e6e2:	9a00      	ldr	r2, [sp, #0]
 800e6e4:	bfa8      	it	ge
 800e6e6:	4633      	movge	r3, r6
 800e6e8:	1ad2      	subs	r2, r2, r3
 800e6ea:	9200      	str	r2, [sp, #0]
 800e6ec:	9a06      	ldr	r2, [sp, #24]
 800e6ee:	1af6      	subs	r6, r6, r3
 800e6f0:	1ad3      	subs	r3, r2, r3
 800e6f2:	9306      	str	r3, [sp, #24]
 800e6f4:	9b08      	ldr	r3, [sp, #32]
 800e6f6:	b30b      	cbz	r3, 800e73c <_dtoa_r+0x794>
 800e6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f000 80c6 	beq.w	800e88c <_dtoa_r+0x8e4>
 800e700:	2c00      	cmp	r4, #0
 800e702:	f000 80c0 	beq.w	800e886 <_dtoa_r+0x8de>
 800e706:	4629      	mov	r1, r5
 800e708:	4622      	mov	r2, r4
 800e70a:	4648      	mov	r0, r9
 800e70c:	f001 fa60 	bl	800fbd0 <__pow5mult>
 800e710:	9a02      	ldr	r2, [sp, #8]
 800e712:	4601      	mov	r1, r0
 800e714:	4605      	mov	r5, r0
 800e716:	4648      	mov	r0, r9
 800e718:	f001 f9b8 	bl	800fa8c <__multiply>
 800e71c:	9902      	ldr	r1, [sp, #8]
 800e71e:	4680      	mov	r8, r0
 800e720:	4648      	mov	r0, r9
 800e722:	f001 f89f 	bl	800f864 <_Bfree>
 800e726:	9b08      	ldr	r3, [sp, #32]
 800e728:	1b1b      	subs	r3, r3, r4
 800e72a:	9308      	str	r3, [sp, #32]
 800e72c:	f000 80b1 	beq.w	800e892 <_dtoa_r+0x8ea>
 800e730:	9a08      	ldr	r2, [sp, #32]
 800e732:	4641      	mov	r1, r8
 800e734:	4648      	mov	r0, r9
 800e736:	f001 fa4b 	bl	800fbd0 <__pow5mult>
 800e73a:	9002      	str	r0, [sp, #8]
 800e73c:	2101      	movs	r1, #1
 800e73e:	4648      	mov	r0, r9
 800e740:	f001 f98e 	bl	800fa60 <__i2b>
 800e744:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e746:	4604      	mov	r4, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	f000 81d8 	beq.w	800eafe <_dtoa_r+0xb56>
 800e74e:	461a      	mov	r2, r3
 800e750:	4601      	mov	r1, r0
 800e752:	4648      	mov	r0, r9
 800e754:	f001 fa3c 	bl	800fbd0 <__pow5mult>
 800e758:	9b07      	ldr	r3, [sp, #28]
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	4604      	mov	r4, r0
 800e75e:	f300 809f 	bgt.w	800e8a0 <_dtoa_r+0x8f8>
 800e762:	9b04      	ldr	r3, [sp, #16]
 800e764:	2b00      	cmp	r3, #0
 800e766:	f040 8097 	bne.w	800e898 <_dtoa_r+0x8f0>
 800e76a:	9b05      	ldr	r3, [sp, #20]
 800e76c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e770:	2b00      	cmp	r3, #0
 800e772:	f040 8093 	bne.w	800e89c <_dtoa_r+0x8f4>
 800e776:	9b05      	ldr	r3, [sp, #20]
 800e778:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e77c:	0d1b      	lsrs	r3, r3, #20
 800e77e:	051b      	lsls	r3, r3, #20
 800e780:	b133      	cbz	r3, 800e790 <_dtoa_r+0x7e8>
 800e782:	9b00      	ldr	r3, [sp, #0]
 800e784:	3301      	adds	r3, #1
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	9b06      	ldr	r3, [sp, #24]
 800e78a:	3301      	adds	r3, #1
 800e78c:	9306      	str	r3, [sp, #24]
 800e78e:	2301      	movs	r3, #1
 800e790:	9308      	str	r3, [sp, #32]
 800e792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e794:	2b00      	cmp	r3, #0
 800e796:	f000 81b8 	beq.w	800eb0a <_dtoa_r+0xb62>
 800e79a:	6923      	ldr	r3, [r4, #16]
 800e79c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e7a0:	6918      	ldr	r0, [r3, #16]
 800e7a2:	f001 f911 	bl	800f9c8 <__hi0bits>
 800e7a6:	f1c0 0020 	rsb	r0, r0, #32
 800e7aa:	9b06      	ldr	r3, [sp, #24]
 800e7ac:	4418      	add	r0, r3
 800e7ae:	f010 001f 	ands.w	r0, r0, #31
 800e7b2:	f000 8082 	beq.w	800e8ba <_dtoa_r+0x912>
 800e7b6:	f1c0 0320 	rsb	r3, r0, #32
 800e7ba:	2b04      	cmp	r3, #4
 800e7bc:	dd73      	ble.n	800e8a6 <_dtoa_r+0x8fe>
 800e7be:	9b00      	ldr	r3, [sp, #0]
 800e7c0:	f1c0 001c 	rsb	r0, r0, #28
 800e7c4:	4403      	add	r3, r0
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	9b06      	ldr	r3, [sp, #24]
 800e7ca:	4403      	add	r3, r0
 800e7cc:	4406      	add	r6, r0
 800e7ce:	9306      	str	r3, [sp, #24]
 800e7d0:	9b00      	ldr	r3, [sp, #0]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	dd05      	ble.n	800e7e2 <_dtoa_r+0x83a>
 800e7d6:	9902      	ldr	r1, [sp, #8]
 800e7d8:	461a      	mov	r2, r3
 800e7da:	4648      	mov	r0, r9
 800e7dc:	f001 fa52 	bl	800fc84 <__lshift>
 800e7e0:	9002      	str	r0, [sp, #8]
 800e7e2:	9b06      	ldr	r3, [sp, #24]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	dd05      	ble.n	800e7f4 <_dtoa_r+0x84c>
 800e7e8:	4621      	mov	r1, r4
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	4648      	mov	r0, r9
 800e7ee:	f001 fa49 	bl	800fc84 <__lshift>
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d061      	beq.n	800e8be <_dtoa_r+0x916>
 800e7fa:	9802      	ldr	r0, [sp, #8]
 800e7fc:	4621      	mov	r1, r4
 800e7fe:	f001 faad 	bl	800fd5c <__mcmp>
 800e802:	2800      	cmp	r0, #0
 800e804:	da5b      	bge.n	800e8be <_dtoa_r+0x916>
 800e806:	2300      	movs	r3, #0
 800e808:	9902      	ldr	r1, [sp, #8]
 800e80a:	220a      	movs	r2, #10
 800e80c:	4648      	mov	r0, r9
 800e80e:	f001 f84b 	bl	800f8a8 <__multadd>
 800e812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e814:	9002      	str	r0, [sp, #8]
 800e816:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	f000 8177 	beq.w	800eb0e <_dtoa_r+0xb66>
 800e820:	4629      	mov	r1, r5
 800e822:	2300      	movs	r3, #0
 800e824:	220a      	movs	r2, #10
 800e826:	4648      	mov	r0, r9
 800e828:	f001 f83e 	bl	800f8a8 <__multadd>
 800e82c:	f1bb 0f00 	cmp.w	fp, #0
 800e830:	4605      	mov	r5, r0
 800e832:	dc6f      	bgt.n	800e914 <_dtoa_r+0x96c>
 800e834:	9b07      	ldr	r3, [sp, #28]
 800e836:	2b02      	cmp	r3, #2
 800e838:	dc49      	bgt.n	800e8ce <_dtoa_r+0x926>
 800e83a:	e06b      	b.n	800e914 <_dtoa_r+0x96c>
 800e83c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e83e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e842:	e73c      	b.n	800e6be <_dtoa_r+0x716>
 800e844:	3fe00000 	.word	0x3fe00000
 800e848:	40240000 	.word	0x40240000
 800e84c:	9b03      	ldr	r3, [sp, #12]
 800e84e:	1e5c      	subs	r4, r3, #1
 800e850:	9b08      	ldr	r3, [sp, #32]
 800e852:	42a3      	cmp	r3, r4
 800e854:	db09      	blt.n	800e86a <_dtoa_r+0x8c2>
 800e856:	1b1c      	subs	r4, r3, r4
 800e858:	9b03      	ldr	r3, [sp, #12]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	f6bf af30 	bge.w	800e6c0 <_dtoa_r+0x718>
 800e860:	9b00      	ldr	r3, [sp, #0]
 800e862:	9a03      	ldr	r2, [sp, #12]
 800e864:	1a9e      	subs	r6, r3, r2
 800e866:	2300      	movs	r3, #0
 800e868:	e72b      	b.n	800e6c2 <_dtoa_r+0x71a>
 800e86a:	9b08      	ldr	r3, [sp, #32]
 800e86c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e86e:	9408      	str	r4, [sp, #32]
 800e870:	1ae3      	subs	r3, r4, r3
 800e872:	441a      	add	r2, r3
 800e874:	9e00      	ldr	r6, [sp, #0]
 800e876:	9b03      	ldr	r3, [sp, #12]
 800e878:	920d      	str	r2, [sp, #52]	@ 0x34
 800e87a:	2400      	movs	r4, #0
 800e87c:	e721      	b.n	800e6c2 <_dtoa_r+0x71a>
 800e87e:	9c08      	ldr	r4, [sp, #32]
 800e880:	9e00      	ldr	r6, [sp, #0]
 800e882:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e884:	e728      	b.n	800e6d8 <_dtoa_r+0x730>
 800e886:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e88a:	e751      	b.n	800e730 <_dtoa_r+0x788>
 800e88c:	9a08      	ldr	r2, [sp, #32]
 800e88e:	9902      	ldr	r1, [sp, #8]
 800e890:	e750      	b.n	800e734 <_dtoa_r+0x78c>
 800e892:	f8cd 8008 	str.w	r8, [sp, #8]
 800e896:	e751      	b.n	800e73c <_dtoa_r+0x794>
 800e898:	2300      	movs	r3, #0
 800e89a:	e779      	b.n	800e790 <_dtoa_r+0x7e8>
 800e89c:	9b04      	ldr	r3, [sp, #16]
 800e89e:	e777      	b.n	800e790 <_dtoa_r+0x7e8>
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	9308      	str	r3, [sp, #32]
 800e8a4:	e779      	b.n	800e79a <_dtoa_r+0x7f2>
 800e8a6:	d093      	beq.n	800e7d0 <_dtoa_r+0x828>
 800e8a8:	9a00      	ldr	r2, [sp, #0]
 800e8aa:	331c      	adds	r3, #28
 800e8ac:	441a      	add	r2, r3
 800e8ae:	9200      	str	r2, [sp, #0]
 800e8b0:	9a06      	ldr	r2, [sp, #24]
 800e8b2:	441a      	add	r2, r3
 800e8b4:	441e      	add	r6, r3
 800e8b6:	9206      	str	r2, [sp, #24]
 800e8b8:	e78a      	b.n	800e7d0 <_dtoa_r+0x828>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	e7f4      	b.n	800e8a8 <_dtoa_r+0x900>
 800e8be:	9b03      	ldr	r3, [sp, #12]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	46b8      	mov	r8, r7
 800e8c4:	dc20      	bgt.n	800e908 <_dtoa_r+0x960>
 800e8c6:	469b      	mov	fp, r3
 800e8c8:	9b07      	ldr	r3, [sp, #28]
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	dd1e      	ble.n	800e90c <_dtoa_r+0x964>
 800e8ce:	f1bb 0f00 	cmp.w	fp, #0
 800e8d2:	f47f adb1 	bne.w	800e438 <_dtoa_r+0x490>
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	465b      	mov	r3, fp
 800e8da:	2205      	movs	r2, #5
 800e8dc:	4648      	mov	r0, r9
 800e8de:	f000 ffe3 	bl	800f8a8 <__multadd>
 800e8e2:	4601      	mov	r1, r0
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	9802      	ldr	r0, [sp, #8]
 800e8e8:	f001 fa38 	bl	800fd5c <__mcmp>
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	f77f ada3 	ble.w	800e438 <_dtoa_r+0x490>
 800e8f2:	4656      	mov	r6, sl
 800e8f4:	2331      	movs	r3, #49	@ 0x31
 800e8f6:	f806 3b01 	strb.w	r3, [r6], #1
 800e8fa:	f108 0801 	add.w	r8, r8, #1
 800e8fe:	e59f      	b.n	800e440 <_dtoa_r+0x498>
 800e900:	9c03      	ldr	r4, [sp, #12]
 800e902:	46b8      	mov	r8, r7
 800e904:	4625      	mov	r5, r4
 800e906:	e7f4      	b.n	800e8f2 <_dtoa_r+0x94a>
 800e908:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e90e:	2b00      	cmp	r3, #0
 800e910:	f000 8101 	beq.w	800eb16 <_dtoa_r+0xb6e>
 800e914:	2e00      	cmp	r6, #0
 800e916:	dd05      	ble.n	800e924 <_dtoa_r+0x97c>
 800e918:	4629      	mov	r1, r5
 800e91a:	4632      	mov	r2, r6
 800e91c:	4648      	mov	r0, r9
 800e91e:	f001 f9b1 	bl	800fc84 <__lshift>
 800e922:	4605      	mov	r5, r0
 800e924:	9b08      	ldr	r3, [sp, #32]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d05c      	beq.n	800e9e4 <_dtoa_r+0xa3c>
 800e92a:	6869      	ldr	r1, [r5, #4]
 800e92c:	4648      	mov	r0, r9
 800e92e:	f000 ff59 	bl	800f7e4 <_Balloc>
 800e932:	4606      	mov	r6, r0
 800e934:	b928      	cbnz	r0, 800e942 <_dtoa_r+0x99a>
 800e936:	4b82      	ldr	r3, [pc, #520]	@ (800eb40 <_dtoa_r+0xb98>)
 800e938:	4602      	mov	r2, r0
 800e93a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e93e:	f7ff bb4a 	b.w	800dfd6 <_dtoa_r+0x2e>
 800e942:	692a      	ldr	r2, [r5, #16]
 800e944:	3202      	adds	r2, #2
 800e946:	0092      	lsls	r2, r2, #2
 800e948:	f105 010c 	add.w	r1, r5, #12
 800e94c:	300c      	adds	r0, #12
 800e94e:	f7ff fa85 	bl	800de5c <memcpy>
 800e952:	2201      	movs	r2, #1
 800e954:	4631      	mov	r1, r6
 800e956:	4648      	mov	r0, r9
 800e958:	f001 f994 	bl	800fc84 <__lshift>
 800e95c:	f10a 0301 	add.w	r3, sl, #1
 800e960:	9300      	str	r3, [sp, #0]
 800e962:	eb0a 030b 	add.w	r3, sl, fp
 800e966:	9308      	str	r3, [sp, #32]
 800e968:	9b04      	ldr	r3, [sp, #16]
 800e96a:	f003 0301 	and.w	r3, r3, #1
 800e96e:	462f      	mov	r7, r5
 800e970:	9306      	str	r3, [sp, #24]
 800e972:	4605      	mov	r5, r0
 800e974:	9b00      	ldr	r3, [sp, #0]
 800e976:	9802      	ldr	r0, [sp, #8]
 800e978:	4621      	mov	r1, r4
 800e97a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800e97e:	f7ff fa89 	bl	800de94 <quorem>
 800e982:	4603      	mov	r3, r0
 800e984:	3330      	adds	r3, #48	@ 0x30
 800e986:	9003      	str	r0, [sp, #12]
 800e988:	4639      	mov	r1, r7
 800e98a:	9802      	ldr	r0, [sp, #8]
 800e98c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e98e:	f001 f9e5 	bl	800fd5c <__mcmp>
 800e992:	462a      	mov	r2, r5
 800e994:	9004      	str	r0, [sp, #16]
 800e996:	4621      	mov	r1, r4
 800e998:	4648      	mov	r0, r9
 800e99a:	f001 f9fb 	bl	800fd94 <__mdiff>
 800e99e:	68c2      	ldr	r2, [r0, #12]
 800e9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9a2:	4606      	mov	r6, r0
 800e9a4:	bb02      	cbnz	r2, 800e9e8 <_dtoa_r+0xa40>
 800e9a6:	4601      	mov	r1, r0
 800e9a8:	9802      	ldr	r0, [sp, #8]
 800e9aa:	f001 f9d7 	bl	800fd5c <__mcmp>
 800e9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	4631      	mov	r1, r6
 800e9b4:	4648      	mov	r0, r9
 800e9b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e9b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9ba:	f000 ff53 	bl	800f864 <_Bfree>
 800e9be:	9b07      	ldr	r3, [sp, #28]
 800e9c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e9c2:	9e00      	ldr	r6, [sp, #0]
 800e9c4:	ea42 0103 	orr.w	r1, r2, r3
 800e9c8:	9b06      	ldr	r3, [sp, #24]
 800e9ca:	4319      	orrs	r1, r3
 800e9cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ce:	d10d      	bne.n	800e9ec <_dtoa_r+0xa44>
 800e9d0:	2b39      	cmp	r3, #57	@ 0x39
 800e9d2:	d027      	beq.n	800ea24 <_dtoa_r+0xa7c>
 800e9d4:	9a04      	ldr	r2, [sp, #16]
 800e9d6:	2a00      	cmp	r2, #0
 800e9d8:	dd01      	ble.n	800e9de <_dtoa_r+0xa36>
 800e9da:	9b03      	ldr	r3, [sp, #12]
 800e9dc:	3331      	adds	r3, #49	@ 0x31
 800e9de:	f88b 3000 	strb.w	r3, [fp]
 800e9e2:	e52e      	b.n	800e442 <_dtoa_r+0x49a>
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	e7b9      	b.n	800e95c <_dtoa_r+0x9b4>
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	e7e2      	b.n	800e9b2 <_dtoa_r+0xa0a>
 800e9ec:	9904      	ldr	r1, [sp, #16]
 800e9ee:	2900      	cmp	r1, #0
 800e9f0:	db04      	blt.n	800e9fc <_dtoa_r+0xa54>
 800e9f2:	9807      	ldr	r0, [sp, #28]
 800e9f4:	4301      	orrs	r1, r0
 800e9f6:	9806      	ldr	r0, [sp, #24]
 800e9f8:	4301      	orrs	r1, r0
 800e9fa:	d120      	bne.n	800ea3e <_dtoa_r+0xa96>
 800e9fc:	2a00      	cmp	r2, #0
 800e9fe:	ddee      	ble.n	800e9de <_dtoa_r+0xa36>
 800ea00:	9902      	ldr	r1, [sp, #8]
 800ea02:	9300      	str	r3, [sp, #0]
 800ea04:	2201      	movs	r2, #1
 800ea06:	4648      	mov	r0, r9
 800ea08:	f001 f93c 	bl	800fc84 <__lshift>
 800ea0c:	4621      	mov	r1, r4
 800ea0e:	9002      	str	r0, [sp, #8]
 800ea10:	f001 f9a4 	bl	800fd5c <__mcmp>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	9b00      	ldr	r3, [sp, #0]
 800ea18:	dc02      	bgt.n	800ea20 <_dtoa_r+0xa78>
 800ea1a:	d1e0      	bne.n	800e9de <_dtoa_r+0xa36>
 800ea1c:	07da      	lsls	r2, r3, #31
 800ea1e:	d5de      	bpl.n	800e9de <_dtoa_r+0xa36>
 800ea20:	2b39      	cmp	r3, #57	@ 0x39
 800ea22:	d1da      	bne.n	800e9da <_dtoa_r+0xa32>
 800ea24:	2339      	movs	r3, #57	@ 0x39
 800ea26:	f88b 3000 	strb.w	r3, [fp]
 800ea2a:	4633      	mov	r3, r6
 800ea2c:	461e      	mov	r6, r3
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ea34:	2a39      	cmp	r2, #57	@ 0x39
 800ea36:	d04e      	beq.n	800ead6 <_dtoa_r+0xb2e>
 800ea38:	3201      	adds	r2, #1
 800ea3a:	701a      	strb	r2, [r3, #0]
 800ea3c:	e501      	b.n	800e442 <_dtoa_r+0x49a>
 800ea3e:	2a00      	cmp	r2, #0
 800ea40:	dd03      	ble.n	800ea4a <_dtoa_r+0xaa2>
 800ea42:	2b39      	cmp	r3, #57	@ 0x39
 800ea44:	d0ee      	beq.n	800ea24 <_dtoa_r+0xa7c>
 800ea46:	3301      	adds	r3, #1
 800ea48:	e7c9      	b.n	800e9de <_dtoa_r+0xa36>
 800ea4a:	9a00      	ldr	r2, [sp, #0]
 800ea4c:	9908      	ldr	r1, [sp, #32]
 800ea4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ea52:	428a      	cmp	r2, r1
 800ea54:	d028      	beq.n	800eaa8 <_dtoa_r+0xb00>
 800ea56:	9902      	ldr	r1, [sp, #8]
 800ea58:	2300      	movs	r3, #0
 800ea5a:	220a      	movs	r2, #10
 800ea5c:	4648      	mov	r0, r9
 800ea5e:	f000 ff23 	bl	800f8a8 <__multadd>
 800ea62:	42af      	cmp	r7, r5
 800ea64:	9002      	str	r0, [sp, #8]
 800ea66:	f04f 0300 	mov.w	r3, #0
 800ea6a:	f04f 020a 	mov.w	r2, #10
 800ea6e:	4639      	mov	r1, r7
 800ea70:	4648      	mov	r0, r9
 800ea72:	d107      	bne.n	800ea84 <_dtoa_r+0xadc>
 800ea74:	f000 ff18 	bl	800f8a8 <__multadd>
 800ea78:	4607      	mov	r7, r0
 800ea7a:	4605      	mov	r5, r0
 800ea7c:	9b00      	ldr	r3, [sp, #0]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	9300      	str	r3, [sp, #0]
 800ea82:	e777      	b.n	800e974 <_dtoa_r+0x9cc>
 800ea84:	f000 ff10 	bl	800f8a8 <__multadd>
 800ea88:	4629      	mov	r1, r5
 800ea8a:	4607      	mov	r7, r0
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	220a      	movs	r2, #10
 800ea90:	4648      	mov	r0, r9
 800ea92:	f000 ff09 	bl	800f8a8 <__multadd>
 800ea96:	4605      	mov	r5, r0
 800ea98:	e7f0      	b.n	800ea7c <_dtoa_r+0xad4>
 800ea9a:	f1bb 0f00 	cmp.w	fp, #0
 800ea9e:	bfcc      	ite	gt
 800eaa0:	465e      	movgt	r6, fp
 800eaa2:	2601      	movle	r6, #1
 800eaa4:	4456      	add	r6, sl
 800eaa6:	2700      	movs	r7, #0
 800eaa8:	9902      	ldr	r1, [sp, #8]
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	2201      	movs	r2, #1
 800eaae:	4648      	mov	r0, r9
 800eab0:	f001 f8e8 	bl	800fc84 <__lshift>
 800eab4:	4621      	mov	r1, r4
 800eab6:	9002      	str	r0, [sp, #8]
 800eab8:	f001 f950 	bl	800fd5c <__mcmp>
 800eabc:	2800      	cmp	r0, #0
 800eabe:	dcb4      	bgt.n	800ea2a <_dtoa_r+0xa82>
 800eac0:	d102      	bne.n	800eac8 <_dtoa_r+0xb20>
 800eac2:	9b00      	ldr	r3, [sp, #0]
 800eac4:	07db      	lsls	r3, r3, #31
 800eac6:	d4b0      	bmi.n	800ea2a <_dtoa_r+0xa82>
 800eac8:	4633      	mov	r3, r6
 800eaca:	461e      	mov	r6, r3
 800eacc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ead0:	2a30      	cmp	r2, #48	@ 0x30
 800ead2:	d0fa      	beq.n	800eaca <_dtoa_r+0xb22>
 800ead4:	e4b5      	b.n	800e442 <_dtoa_r+0x49a>
 800ead6:	459a      	cmp	sl, r3
 800ead8:	d1a8      	bne.n	800ea2c <_dtoa_r+0xa84>
 800eada:	2331      	movs	r3, #49	@ 0x31
 800eadc:	f108 0801 	add.w	r8, r8, #1
 800eae0:	f88a 3000 	strb.w	r3, [sl]
 800eae4:	e4ad      	b.n	800e442 <_dtoa_r+0x49a>
 800eae6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eae8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800eb44 <_dtoa_r+0xb9c>
 800eaec:	b11b      	cbz	r3, 800eaf6 <_dtoa_r+0xb4e>
 800eaee:	f10a 0308 	add.w	r3, sl, #8
 800eaf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800eaf4:	6013      	str	r3, [r2, #0]
 800eaf6:	4650      	mov	r0, sl
 800eaf8:	b017      	add	sp, #92	@ 0x5c
 800eafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eafe:	9b07      	ldr	r3, [sp, #28]
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	f77f ae2e 	ble.w	800e762 <_dtoa_r+0x7ba>
 800eb06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb08:	9308      	str	r3, [sp, #32]
 800eb0a:	2001      	movs	r0, #1
 800eb0c:	e64d      	b.n	800e7aa <_dtoa_r+0x802>
 800eb0e:	f1bb 0f00 	cmp.w	fp, #0
 800eb12:	f77f aed9 	ble.w	800e8c8 <_dtoa_r+0x920>
 800eb16:	4656      	mov	r6, sl
 800eb18:	9802      	ldr	r0, [sp, #8]
 800eb1a:	4621      	mov	r1, r4
 800eb1c:	f7ff f9ba 	bl	800de94 <quorem>
 800eb20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800eb24:	f806 3b01 	strb.w	r3, [r6], #1
 800eb28:	eba6 020a 	sub.w	r2, r6, sl
 800eb2c:	4593      	cmp	fp, r2
 800eb2e:	ddb4      	ble.n	800ea9a <_dtoa_r+0xaf2>
 800eb30:	9902      	ldr	r1, [sp, #8]
 800eb32:	2300      	movs	r3, #0
 800eb34:	220a      	movs	r2, #10
 800eb36:	4648      	mov	r0, r9
 800eb38:	f000 feb6 	bl	800f8a8 <__multadd>
 800eb3c:	9002      	str	r0, [sp, #8]
 800eb3e:	e7eb      	b.n	800eb18 <_dtoa_r+0xb70>
 800eb40:	0801143b 	.word	0x0801143b
 800eb44:	080113bf 	.word	0x080113bf

0800eb48 <_free_r>:
 800eb48:	b538      	push	{r3, r4, r5, lr}
 800eb4a:	4605      	mov	r5, r0
 800eb4c:	2900      	cmp	r1, #0
 800eb4e:	d041      	beq.n	800ebd4 <_free_r+0x8c>
 800eb50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb54:	1f0c      	subs	r4, r1, #4
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	bfb8      	it	lt
 800eb5a:	18e4      	addlt	r4, r4, r3
 800eb5c:	f000 fe36 	bl	800f7cc <__malloc_lock>
 800eb60:	4a1d      	ldr	r2, [pc, #116]	@ (800ebd8 <_free_r+0x90>)
 800eb62:	6813      	ldr	r3, [r2, #0]
 800eb64:	b933      	cbnz	r3, 800eb74 <_free_r+0x2c>
 800eb66:	6063      	str	r3, [r4, #4]
 800eb68:	6014      	str	r4, [r2, #0]
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb70:	f000 be32 	b.w	800f7d8 <__malloc_unlock>
 800eb74:	42a3      	cmp	r3, r4
 800eb76:	d908      	bls.n	800eb8a <_free_r+0x42>
 800eb78:	6820      	ldr	r0, [r4, #0]
 800eb7a:	1821      	adds	r1, r4, r0
 800eb7c:	428b      	cmp	r3, r1
 800eb7e:	bf01      	itttt	eq
 800eb80:	6819      	ldreq	r1, [r3, #0]
 800eb82:	685b      	ldreq	r3, [r3, #4]
 800eb84:	1809      	addeq	r1, r1, r0
 800eb86:	6021      	streq	r1, [r4, #0]
 800eb88:	e7ed      	b.n	800eb66 <_free_r+0x1e>
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	b10b      	cbz	r3, 800eb94 <_free_r+0x4c>
 800eb90:	42a3      	cmp	r3, r4
 800eb92:	d9fa      	bls.n	800eb8a <_free_r+0x42>
 800eb94:	6811      	ldr	r1, [r2, #0]
 800eb96:	1850      	adds	r0, r2, r1
 800eb98:	42a0      	cmp	r0, r4
 800eb9a:	d10b      	bne.n	800ebb4 <_free_r+0x6c>
 800eb9c:	6820      	ldr	r0, [r4, #0]
 800eb9e:	4401      	add	r1, r0
 800eba0:	1850      	adds	r0, r2, r1
 800eba2:	4283      	cmp	r3, r0
 800eba4:	6011      	str	r1, [r2, #0]
 800eba6:	d1e0      	bne.n	800eb6a <_free_r+0x22>
 800eba8:	6818      	ldr	r0, [r3, #0]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	6053      	str	r3, [r2, #4]
 800ebae:	4408      	add	r0, r1
 800ebb0:	6010      	str	r0, [r2, #0]
 800ebb2:	e7da      	b.n	800eb6a <_free_r+0x22>
 800ebb4:	d902      	bls.n	800ebbc <_free_r+0x74>
 800ebb6:	230c      	movs	r3, #12
 800ebb8:	602b      	str	r3, [r5, #0]
 800ebba:	e7d6      	b.n	800eb6a <_free_r+0x22>
 800ebbc:	6820      	ldr	r0, [r4, #0]
 800ebbe:	1821      	adds	r1, r4, r0
 800ebc0:	428b      	cmp	r3, r1
 800ebc2:	bf04      	itt	eq
 800ebc4:	6819      	ldreq	r1, [r3, #0]
 800ebc6:	685b      	ldreq	r3, [r3, #4]
 800ebc8:	6063      	str	r3, [r4, #4]
 800ebca:	bf04      	itt	eq
 800ebcc:	1809      	addeq	r1, r1, r0
 800ebce:	6021      	streq	r1, [r4, #0]
 800ebd0:	6054      	str	r4, [r2, #4]
 800ebd2:	e7ca      	b.n	800eb6a <_free_r+0x22>
 800ebd4:	bd38      	pop	{r3, r4, r5, pc}
 800ebd6:	bf00      	nop
 800ebd8:	20000ed0 	.word	0x20000ed0

0800ebdc <rshift>:
 800ebdc:	6903      	ldr	r3, [r0, #16]
 800ebde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ebe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebe6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ebea:	f100 0414 	add.w	r4, r0, #20
 800ebee:	dd45      	ble.n	800ec7c <rshift+0xa0>
 800ebf0:	f011 011f 	ands.w	r1, r1, #31
 800ebf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ebf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ebfc:	d10c      	bne.n	800ec18 <rshift+0x3c>
 800ebfe:	f100 0710 	add.w	r7, r0, #16
 800ec02:	4629      	mov	r1, r5
 800ec04:	42b1      	cmp	r1, r6
 800ec06:	d334      	bcc.n	800ec72 <rshift+0x96>
 800ec08:	1a9b      	subs	r3, r3, r2
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	1eea      	subs	r2, r5, #3
 800ec0e:	4296      	cmp	r6, r2
 800ec10:	bf38      	it	cc
 800ec12:	2300      	movcc	r3, #0
 800ec14:	4423      	add	r3, r4
 800ec16:	e015      	b.n	800ec44 <rshift+0x68>
 800ec18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ec1c:	f1c1 0820 	rsb	r8, r1, #32
 800ec20:	40cf      	lsrs	r7, r1
 800ec22:	f105 0e04 	add.w	lr, r5, #4
 800ec26:	46a1      	mov	r9, r4
 800ec28:	4576      	cmp	r6, lr
 800ec2a:	46f4      	mov	ip, lr
 800ec2c:	d815      	bhi.n	800ec5a <rshift+0x7e>
 800ec2e:	1a9a      	subs	r2, r3, r2
 800ec30:	0092      	lsls	r2, r2, #2
 800ec32:	3a04      	subs	r2, #4
 800ec34:	3501      	adds	r5, #1
 800ec36:	42ae      	cmp	r6, r5
 800ec38:	bf38      	it	cc
 800ec3a:	2200      	movcc	r2, #0
 800ec3c:	18a3      	adds	r3, r4, r2
 800ec3e:	50a7      	str	r7, [r4, r2]
 800ec40:	b107      	cbz	r7, 800ec44 <rshift+0x68>
 800ec42:	3304      	adds	r3, #4
 800ec44:	1b1a      	subs	r2, r3, r4
 800ec46:	42a3      	cmp	r3, r4
 800ec48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ec4c:	bf08      	it	eq
 800ec4e:	2300      	moveq	r3, #0
 800ec50:	6102      	str	r2, [r0, #16]
 800ec52:	bf08      	it	eq
 800ec54:	6143      	streq	r3, [r0, #20]
 800ec56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec5a:	f8dc c000 	ldr.w	ip, [ip]
 800ec5e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ec62:	ea4c 0707 	orr.w	r7, ip, r7
 800ec66:	f849 7b04 	str.w	r7, [r9], #4
 800ec6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec6e:	40cf      	lsrs	r7, r1
 800ec70:	e7da      	b.n	800ec28 <rshift+0x4c>
 800ec72:	f851 cb04 	ldr.w	ip, [r1], #4
 800ec76:	f847 cf04 	str.w	ip, [r7, #4]!
 800ec7a:	e7c3      	b.n	800ec04 <rshift+0x28>
 800ec7c:	4623      	mov	r3, r4
 800ec7e:	e7e1      	b.n	800ec44 <rshift+0x68>

0800ec80 <__hexdig_fun>:
 800ec80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ec84:	2b09      	cmp	r3, #9
 800ec86:	d802      	bhi.n	800ec8e <__hexdig_fun+0xe>
 800ec88:	3820      	subs	r0, #32
 800ec8a:	b2c0      	uxtb	r0, r0
 800ec8c:	4770      	bx	lr
 800ec8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ec92:	2b05      	cmp	r3, #5
 800ec94:	d801      	bhi.n	800ec9a <__hexdig_fun+0x1a>
 800ec96:	3847      	subs	r0, #71	@ 0x47
 800ec98:	e7f7      	b.n	800ec8a <__hexdig_fun+0xa>
 800ec9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ec9e:	2b05      	cmp	r3, #5
 800eca0:	d801      	bhi.n	800eca6 <__hexdig_fun+0x26>
 800eca2:	3827      	subs	r0, #39	@ 0x27
 800eca4:	e7f1      	b.n	800ec8a <__hexdig_fun+0xa>
 800eca6:	2000      	movs	r0, #0
 800eca8:	4770      	bx	lr
	...

0800ecac <__gethex>:
 800ecac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb0:	b085      	sub	sp, #20
 800ecb2:	468a      	mov	sl, r1
 800ecb4:	9302      	str	r3, [sp, #8]
 800ecb6:	680b      	ldr	r3, [r1, #0]
 800ecb8:	9001      	str	r0, [sp, #4]
 800ecba:	4690      	mov	r8, r2
 800ecbc:	1c9c      	adds	r4, r3, #2
 800ecbe:	46a1      	mov	r9, r4
 800ecc0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ecc4:	2830      	cmp	r0, #48	@ 0x30
 800ecc6:	d0fa      	beq.n	800ecbe <__gethex+0x12>
 800ecc8:	eba9 0303 	sub.w	r3, r9, r3
 800eccc:	f1a3 0b02 	sub.w	fp, r3, #2
 800ecd0:	f7ff ffd6 	bl	800ec80 <__hexdig_fun>
 800ecd4:	4605      	mov	r5, r0
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	d168      	bne.n	800edac <__gethex+0x100>
 800ecda:	49a0      	ldr	r1, [pc, #640]	@ (800ef5c <__gethex+0x2b0>)
 800ecdc:	2201      	movs	r2, #1
 800ecde:	4648      	mov	r0, r9
 800ece0:	f7ff f832 	bl	800dd48 <strncmp>
 800ece4:	4607      	mov	r7, r0
 800ece6:	2800      	cmp	r0, #0
 800ece8:	d167      	bne.n	800edba <__gethex+0x10e>
 800ecea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ecee:	4626      	mov	r6, r4
 800ecf0:	f7ff ffc6 	bl	800ec80 <__hexdig_fun>
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d062      	beq.n	800edbe <__gethex+0x112>
 800ecf8:	4623      	mov	r3, r4
 800ecfa:	7818      	ldrb	r0, [r3, #0]
 800ecfc:	2830      	cmp	r0, #48	@ 0x30
 800ecfe:	4699      	mov	r9, r3
 800ed00:	f103 0301 	add.w	r3, r3, #1
 800ed04:	d0f9      	beq.n	800ecfa <__gethex+0x4e>
 800ed06:	f7ff ffbb 	bl	800ec80 <__hexdig_fun>
 800ed0a:	fab0 f580 	clz	r5, r0
 800ed0e:	096d      	lsrs	r5, r5, #5
 800ed10:	f04f 0b01 	mov.w	fp, #1
 800ed14:	464a      	mov	r2, r9
 800ed16:	4616      	mov	r6, r2
 800ed18:	3201      	adds	r2, #1
 800ed1a:	7830      	ldrb	r0, [r6, #0]
 800ed1c:	f7ff ffb0 	bl	800ec80 <__hexdig_fun>
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d1f8      	bne.n	800ed16 <__gethex+0x6a>
 800ed24:	498d      	ldr	r1, [pc, #564]	@ (800ef5c <__gethex+0x2b0>)
 800ed26:	2201      	movs	r2, #1
 800ed28:	4630      	mov	r0, r6
 800ed2a:	f7ff f80d 	bl	800dd48 <strncmp>
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	d13f      	bne.n	800edb2 <__gethex+0x106>
 800ed32:	b944      	cbnz	r4, 800ed46 <__gethex+0x9a>
 800ed34:	1c74      	adds	r4, r6, #1
 800ed36:	4622      	mov	r2, r4
 800ed38:	4616      	mov	r6, r2
 800ed3a:	3201      	adds	r2, #1
 800ed3c:	7830      	ldrb	r0, [r6, #0]
 800ed3e:	f7ff ff9f 	bl	800ec80 <__hexdig_fun>
 800ed42:	2800      	cmp	r0, #0
 800ed44:	d1f8      	bne.n	800ed38 <__gethex+0x8c>
 800ed46:	1ba4      	subs	r4, r4, r6
 800ed48:	00a7      	lsls	r7, r4, #2
 800ed4a:	7833      	ldrb	r3, [r6, #0]
 800ed4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ed50:	2b50      	cmp	r3, #80	@ 0x50
 800ed52:	d13e      	bne.n	800edd2 <__gethex+0x126>
 800ed54:	7873      	ldrb	r3, [r6, #1]
 800ed56:	2b2b      	cmp	r3, #43	@ 0x2b
 800ed58:	d033      	beq.n	800edc2 <__gethex+0x116>
 800ed5a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ed5c:	d034      	beq.n	800edc8 <__gethex+0x11c>
 800ed5e:	1c71      	adds	r1, r6, #1
 800ed60:	2400      	movs	r4, #0
 800ed62:	7808      	ldrb	r0, [r1, #0]
 800ed64:	f7ff ff8c 	bl	800ec80 <__hexdig_fun>
 800ed68:	1e43      	subs	r3, r0, #1
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	2b18      	cmp	r3, #24
 800ed6e:	d830      	bhi.n	800edd2 <__gethex+0x126>
 800ed70:	f1a0 0210 	sub.w	r2, r0, #16
 800ed74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ed78:	f7ff ff82 	bl	800ec80 <__hexdig_fun>
 800ed7c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800ed80:	fa5f fc8c 	uxtb.w	ip, ip
 800ed84:	f1bc 0f18 	cmp.w	ip, #24
 800ed88:	f04f 030a 	mov.w	r3, #10
 800ed8c:	d91e      	bls.n	800edcc <__gethex+0x120>
 800ed8e:	b104      	cbz	r4, 800ed92 <__gethex+0xe6>
 800ed90:	4252      	negs	r2, r2
 800ed92:	4417      	add	r7, r2
 800ed94:	f8ca 1000 	str.w	r1, [sl]
 800ed98:	b1ed      	cbz	r5, 800edd6 <__gethex+0x12a>
 800ed9a:	f1bb 0f00 	cmp.w	fp, #0
 800ed9e:	bf0c      	ite	eq
 800eda0:	2506      	moveq	r5, #6
 800eda2:	2500      	movne	r5, #0
 800eda4:	4628      	mov	r0, r5
 800eda6:	b005      	add	sp, #20
 800eda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edac:	2500      	movs	r5, #0
 800edae:	462c      	mov	r4, r5
 800edb0:	e7b0      	b.n	800ed14 <__gethex+0x68>
 800edb2:	2c00      	cmp	r4, #0
 800edb4:	d1c7      	bne.n	800ed46 <__gethex+0x9a>
 800edb6:	4627      	mov	r7, r4
 800edb8:	e7c7      	b.n	800ed4a <__gethex+0x9e>
 800edba:	464e      	mov	r6, r9
 800edbc:	462f      	mov	r7, r5
 800edbe:	2501      	movs	r5, #1
 800edc0:	e7c3      	b.n	800ed4a <__gethex+0x9e>
 800edc2:	2400      	movs	r4, #0
 800edc4:	1cb1      	adds	r1, r6, #2
 800edc6:	e7cc      	b.n	800ed62 <__gethex+0xb6>
 800edc8:	2401      	movs	r4, #1
 800edca:	e7fb      	b.n	800edc4 <__gethex+0x118>
 800edcc:	fb03 0002 	mla	r0, r3, r2, r0
 800edd0:	e7ce      	b.n	800ed70 <__gethex+0xc4>
 800edd2:	4631      	mov	r1, r6
 800edd4:	e7de      	b.n	800ed94 <__gethex+0xe8>
 800edd6:	eba6 0309 	sub.w	r3, r6, r9
 800edda:	3b01      	subs	r3, #1
 800eddc:	4629      	mov	r1, r5
 800edde:	2b07      	cmp	r3, #7
 800ede0:	dc0a      	bgt.n	800edf8 <__gethex+0x14c>
 800ede2:	9801      	ldr	r0, [sp, #4]
 800ede4:	f000 fcfe 	bl	800f7e4 <_Balloc>
 800ede8:	4604      	mov	r4, r0
 800edea:	b940      	cbnz	r0, 800edfe <__gethex+0x152>
 800edec:	4b5c      	ldr	r3, [pc, #368]	@ (800ef60 <__gethex+0x2b4>)
 800edee:	4602      	mov	r2, r0
 800edf0:	21e4      	movs	r1, #228	@ 0xe4
 800edf2:	485c      	ldr	r0, [pc, #368]	@ (800ef64 <__gethex+0x2b8>)
 800edf4:	f001 fa06 	bl	8010204 <__assert_func>
 800edf8:	3101      	adds	r1, #1
 800edfa:	105b      	asrs	r3, r3, #1
 800edfc:	e7ef      	b.n	800edde <__gethex+0x132>
 800edfe:	f100 0a14 	add.w	sl, r0, #20
 800ee02:	2300      	movs	r3, #0
 800ee04:	4655      	mov	r5, sl
 800ee06:	469b      	mov	fp, r3
 800ee08:	45b1      	cmp	r9, r6
 800ee0a:	d337      	bcc.n	800ee7c <__gethex+0x1d0>
 800ee0c:	f845 bb04 	str.w	fp, [r5], #4
 800ee10:	eba5 050a 	sub.w	r5, r5, sl
 800ee14:	10ad      	asrs	r5, r5, #2
 800ee16:	6125      	str	r5, [r4, #16]
 800ee18:	4658      	mov	r0, fp
 800ee1a:	f000 fdd5 	bl	800f9c8 <__hi0bits>
 800ee1e:	016d      	lsls	r5, r5, #5
 800ee20:	f8d8 6000 	ldr.w	r6, [r8]
 800ee24:	1a2d      	subs	r5, r5, r0
 800ee26:	42b5      	cmp	r5, r6
 800ee28:	dd54      	ble.n	800eed4 <__gethex+0x228>
 800ee2a:	1bad      	subs	r5, r5, r6
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	4620      	mov	r0, r4
 800ee30:	f001 f961 	bl	80100f6 <__any_on>
 800ee34:	4681      	mov	r9, r0
 800ee36:	b178      	cbz	r0, 800ee58 <__gethex+0x1ac>
 800ee38:	1e6b      	subs	r3, r5, #1
 800ee3a:	1159      	asrs	r1, r3, #5
 800ee3c:	f003 021f 	and.w	r2, r3, #31
 800ee40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ee44:	f04f 0901 	mov.w	r9, #1
 800ee48:	fa09 f202 	lsl.w	r2, r9, r2
 800ee4c:	420a      	tst	r2, r1
 800ee4e:	d003      	beq.n	800ee58 <__gethex+0x1ac>
 800ee50:	454b      	cmp	r3, r9
 800ee52:	dc36      	bgt.n	800eec2 <__gethex+0x216>
 800ee54:	f04f 0902 	mov.w	r9, #2
 800ee58:	4629      	mov	r1, r5
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	f7ff febe 	bl	800ebdc <rshift>
 800ee60:	442f      	add	r7, r5
 800ee62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee66:	42bb      	cmp	r3, r7
 800ee68:	da42      	bge.n	800eef0 <__gethex+0x244>
 800ee6a:	9801      	ldr	r0, [sp, #4]
 800ee6c:	4621      	mov	r1, r4
 800ee6e:	f000 fcf9 	bl	800f864 <_Bfree>
 800ee72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee74:	2300      	movs	r3, #0
 800ee76:	6013      	str	r3, [r2, #0]
 800ee78:	25a3      	movs	r5, #163	@ 0xa3
 800ee7a:	e793      	b.n	800eda4 <__gethex+0xf8>
 800ee7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ee80:	2a2e      	cmp	r2, #46	@ 0x2e
 800ee82:	d012      	beq.n	800eeaa <__gethex+0x1fe>
 800ee84:	2b20      	cmp	r3, #32
 800ee86:	d104      	bne.n	800ee92 <__gethex+0x1e6>
 800ee88:	f845 bb04 	str.w	fp, [r5], #4
 800ee8c:	f04f 0b00 	mov.w	fp, #0
 800ee90:	465b      	mov	r3, fp
 800ee92:	7830      	ldrb	r0, [r6, #0]
 800ee94:	9303      	str	r3, [sp, #12]
 800ee96:	f7ff fef3 	bl	800ec80 <__hexdig_fun>
 800ee9a:	9b03      	ldr	r3, [sp, #12]
 800ee9c:	f000 000f 	and.w	r0, r0, #15
 800eea0:	4098      	lsls	r0, r3
 800eea2:	ea4b 0b00 	orr.w	fp, fp, r0
 800eea6:	3304      	adds	r3, #4
 800eea8:	e7ae      	b.n	800ee08 <__gethex+0x15c>
 800eeaa:	45b1      	cmp	r9, r6
 800eeac:	d8ea      	bhi.n	800ee84 <__gethex+0x1d8>
 800eeae:	492b      	ldr	r1, [pc, #172]	@ (800ef5c <__gethex+0x2b0>)
 800eeb0:	9303      	str	r3, [sp, #12]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	4630      	mov	r0, r6
 800eeb6:	f7fe ff47 	bl	800dd48 <strncmp>
 800eeba:	9b03      	ldr	r3, [sp, #12]
 800eebc:	2800      	cmp	r0, #0
 800eebe:	d1e1      	bne.n	800ee84 <__gethex+0x1d8>
 800eec0:	e7a2      	b.n	800ee08 <__gethex+0x15c>
 800eec2:	1ea9      	subs	r1, r5, #2
 800eec4:	4620      	mov	r0, r4
 800eec6:	f001 f916 	bl	80100f6 <__any_on>
 800eeca:	2800      	cmp	r0, #0
 800eecc:	d0c2      	beq.n	800ee54 <__gethex+0x1a8>
 800eece:	f04f 0903 	mov.w	r9, #3
 800eed2:	e7c1      	b.n	800ee58 <__gethex+0x1ac>
 800eed4:	da09      	bge.n	800eeea <__gethex+0x23e>
 800eed6:	1b75      	subs	r5, r6, r5
 800eed8:	4621      	mov	r1, r4
 800eeda:	9801      	ldr	r0, [sp, #4]
 800eedc:	462a      	mov	r2, r5
 800eede:	f000 fed1 	bl	800fc84 <__lshift>
 800eee2:	1b7f      	subs	r7, r7, r5
 800eee4:	4604      	mov	r4, r0
 800eee6:	f100 0a14 	add.w	sl, r0, #20
 800eeea:	f04f 0900 	mov.w	r9, #0
 800eeee:	e7b8      	b.n	800ee62 <__gethex+0x1b6>
 800eef0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eef4:	42bd      	cmp	r5, r7
 800eef6:	dd6f      	ble.n	800efd8 <__gethex+0x32c>
 800eef8:	1bed      	subs	r5, r5, r7
 800eefa:	42ae      	cmp	r6, r5
 800eefc:	dc34      	bgt.n	800ef68 <__gethex+0x2bc>
 800eefe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef02:	2b02      	cmp	r3, #2
 800ef04:	d022      	beq.n	800ef4c <__gethex+0x2a0>
 800ef06:	2b03      	cmp	r3, #3
 800ef08:	d024      	beq.n	800ef54 <__gethex+0x2a8>
 800ef0a:	2b01      	cmp	r3, #1
 800ef0c:	d115      	bne.n	800ef3a <__gethex+0x28e>
 800ef0e:	42ae      	cmp	r6, r5
 800ef10:	d113      	bne.n	800ef3a <__gethex+0x28e>
 800ef12:	2e01      	cmp	r6, #1
 800ef14:	d10b      	bne.n	800ef2e <__gethex+0x282>
 800ef16:	9a02      	ldr	r2, [sp, #8]
 800ef18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ef1c:	6013      	str	r3, [r2, #0]
 800ef1e:	2301      	movs	r3, #1
 800ef20:	6123      	str	r3, [r4, #16]
 800ef22:	f8ca 3000 	str.w	r3, [sl]
 800ef26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef28:	2562      	movs	r5, #98	@ 0x62
 800ef2a:	601c      	str	r4, [r3, #0]
 800ef2c:	e73a      	b.n	800eda4 <__gethex+0xf8>
 800ef2e:	1e71      	subs	r1, r6, #1
 800ef30:	4620      	mov	r0, r4
 800ef32:	f001 f8e0 	bl	80100f6 <__any_on>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	d1ed      	bne.n	800ef16 <__gethex+0x26a>
 800ef3a:	9801      	ldr	r0, [sp, #4]
 800ef3c:	4621      	mov	r1, r4
 800ef3e:	f000 fc91 	bl	800f864 <_Bfree>
 800ef42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef44:	2300      	movs	r3, #0
 800ef46:	6013      	str	r3, [r2, #0]
 800ef48:	2550      	movs	r5, #80	@ 0x50
 800ef4a:	e72b      	b.n	800eda4 <__gethex+0xf8>
 800ef4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d1f3      	bne.n	800ef3a <__gethex+0x28e>
 800ef52:	e7e0      	b.n	800ef16 <__gethex+0x26a>
 800ef54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d1dd      	bne.n	800ef16 <__gethex+0x26a>
 800ef5a:	e7ee      	b.n	800ef3a <__gethex+0x28e>
 800ef5c:	080113b5 	.word	0x080113b5
 800ef60:	0801143b 	.word	0x0801143b
 800ef64:	0801144c 	.word	0x0801144c
 800ef68:	1e6f      	subs	r7, r5, #1
 800ef6a:	f1b9 0f00 	cmp.w	r9, #0
 800ef6e:	d130      	bne.n	800efd2 <__gethex+0x326>
 800ef70:	b127      	cbz	r7, 800ef7c <__gethex+0x2d0>
 800ef72:	4639      	mov	r1, r7
 800ef74:	4620      	mov	r0, r4
 800ef76:	f001 f8be 	bl	80100f6 <__any_on>
 800ef7a:	4681      	mov	r9, r0
 800ef7c:	117a      	asrs	r2, r7, #5
 800ef7e:	2301      	movs	r3, #1
 800ef80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ef84:	f007 071f 	and.w	r7, r7, #31
 800ef88:	40bb      	lsls	r3, r7
 800ef8a:	4213      	tst	r3, r2
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	4620      	mov	r0, r4
 800ef90:	bf18      	it	ne
 800ef92:	f049 0902 	orrne.w	r9, r9, #2
 800ef96:	f7ff fe21 	bl	800ebdc <rshift>
 800ef9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ef9e:	1b76      	subs	r6, r6, r5
 800efa0:	2502      	movs	r5, #2
 800efa2:	f1b9 0f00 	cmp.w	r9, #0
 800efa6:	d047      	beq.n	800f038 <__gethex+0x38c>
 800efa8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800efac:	2b02      	cmp	r3, #2
 800efae:	d015      	beq.n	800efdc <__gethex+0x330>
 800efb0:	2b03      	cmp	r3, #3
 800efb2:	d017      	beq.n	800efe4 <__gethex+0x338>
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d109      	bne.n	800efcc <__gethex+0x320>
 800efb8:	f019 0f02 	tst.w	r9, #2
 800efbc:	d006      	beq.n	800efcc <__gethex+0x320>
 800efbe:	f8da 3000 	ldr.w	r3, [sl]
 800efc2:	ea49 0903 	orr.w	r9, r9, r3
 800efc6:	f019 0f01 	tst.w	r9, #1
 800efca:	d10e      	bne.n	800efea <__gethex+0x33e>
 800efcc:	f045 0510 	orr.w	r5, r5, #16
 800efd0:	e032      	b.n	800f038 <__gethex+0x38c>
 800efd2:	f04f 0901 	mov.w	r9, #1
 800efd6:	e7d1      	b.n	800ef7c <__gethex+0x2d0>
 800efd8:	2501      	movs	r5, #1
 800efda:	e7e2      	b.n	800efa2 <__gethex+0x2f6>
 800efdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efde:	f1c3 0301 	rsb	r3, r3, #1
 800efe2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800efe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d0f0      	beq.n	800efcc <__gethex+0x320>
 800efea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800efee:	f104 0314 	add.w	r3, r4, #20
 800eff2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eff6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800effa:	f04f 0c00 	mov.w	ip, #0
 800effe:	4618      	mov	r0, r3
 800f000:	f853 2b04 	ldr.w	r2, [r3], #4
 800f004:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800f008:	d01b      	beq.n	800f042 <__gethex+0x396>
 800f00a:	3201      	adds	r2, #1
 800f00c:	6002      	str	r2, [r0, #0]
 800f00e:	2d02      	cmp	r5, #2
 800f010:	f104 0314 	add.w	r3, r4, #20
 800f014:	d13c      	bne.n	800f090 <__gethex+0x3e4>
 800f016:	f8d8 2000 	ldr.w	r2, [r8]
 800f01a:	3a01      	subs	r2, #1
 800f01c:	42b2      	cmp	r2, r6
 800f01e:	d109      	bne.n	800f034 <__gethex+0x388>
 800f020:	1171      	asrs	r1, r6, #5
 800f022:	2201      	movs	r2, #1
 800f024:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f028:	f006 061f 	and.w	r6, r6, #31
 800f02c:	fa02 f606 	lsl.w	r6, r2, r6
 800f030:	421e      	tst	r6, r3
 800f032:	d13a      	bne.n	800f0aa <__gethex+0x3fe>
 800f034:	f045 0520 	orr.w	r5, r5, #32
 800f038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f03a:	601c      	str	r4, [r3, #0]
 800f03c:	9b02      	ldr	r3, [sp, #8]
 800f03e:	601f      	str	r7, [r3, #0]
 800f040:	e6b0      	b.n	800eda4 <__gethex+0xf8>
 800f042:	4299      	cmp	r1, r3
 800f044:	f843 cc04 	str.w	ip, [r3, #-4]
 800f048:	d8d9      	bhi.n	800effe <__gethex+0x352>
 800f04a:	68a3      	ldr	r3, [r4, #8]
 800f04c:	459b      	cmp	fp, r3
 800f04e:	db17      	blt.n	800f080 <__gethex+0x3d4>
 800f050:	6861      	ldr	r1, [r4, #4]
 800f052:	9801      	ldr	r0, [sp, #4]
 800f054:	3101      	adds	r1, #1
 800f056:	f000 fbc5 	bl	800f7e4 <_Balloc>
 800f05a:	4681      	mov	r9, r0
 800f05c:	b918      	cbnz	r0, 800f066 <__gethex+0x3ba>
 800f05e:	4b1a      	ldr	r3, [pc, #104]	@ (800f0c8 <__gethex+0x41c>)
 800f060:	4602      	mov	r2, r0
 800f062:	2184      	movs	r1, #132	@ 0x84
 800f064:	e6c5      	b.n	800edf2 <__gethex+0x146>
 800f066:	6922      	ldr	r2, [r4, #16]
 800f068:	3202      	adds	r2, #2
 800f06a:	f104 010c 	add.w	r1, r4, #12
 800f06e:	0092      	lsls	r2, r2, #2
 800f070:	300c      	adds	r0, #12
 800f072:	f7fe fef3 	bl	800de5c <memcpy>
 800f076:	4621      	mov	r1, r4
 800f078:	9801      	ldr	r0, [sp, #4]
 800f07a:	f000 fbf3 	bl	800f864 <_Bfree>
 800f07e:	464c      	mov	r4, r9
 800f080:	6923      	ldr	r3, [r4, #16]
 800f082:	1c5a      	adds	r2, r3, #1
 800f084:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f088:	6122      	str	r2, [r4, #16]
 800f08a:	2201      	movs	r2, #1
 800f08c:	615a      	str	r2, [r3, #20]
 800f08e:	e7be      	b.n	800f00e <__gethex+0x362>
 800f090:	6922      	ldr	r2, [r4, #16]
 800f092:	455a      	cmp	r2, fp
 800f094:	dd0b      	ble.n	800f0ae <__gethex+0x402>
 800f096:	2101      	movs	r1, #1
 800f098:	4620      	mov	r0, r4
 800f09a:	f7ff fd9f 	bl	800ebdc <rshift>
 800f09e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0a2:	3701      	adds	r7, #1
 800f0a4:	42bb      	cmp	r3, r7
 800f0a6:	f6ff aee0 	blt.w	800ee6a <__gethex+0x1be>
 800f0aa:	2501      	movs	r5, #1
 800f0ac:	e7c2      	b.n	800f034 <__gethex+0x388>
 800f0ae:	f016 061f 	ands.w	r6, r6, #31
 800f0b2:	d0fa      	beq.n	800f0aa <__gethex+0x3fe>
 800f0b4:	4453      	add	r3, sl
 800f0b6:	f1c6 0620 	rsb	r6, r6, #32
 800f0ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f0be:	f000 fc83 	bl	800f9c8 <__hi0bits>
 800f0c2:	42b0      	cmp	r0, r6
 800f0c4:	dbe7      	blt.n	800f096 <__gethex+0x3ea>
 800f0c6:	e7f0      	b.n	800f0aa <__gethex+0x3fe>
 800f0c8:	0801143b 	.word	0x0801143b

0800f0cc <L_shift>:
 800f0cc:	f1c2 0208 	rsb	r2, r2, #8
 800f0d0:	0092      	lsls	r2, r2, #2
 800f0d2:	b570      	push	{r4, r5, r6, lr}
 800f0d4:	f1c2 0620 	rsb	r6, r2, #32
 800f0d8:	6843      	ldr	r3, [r0, #4]
 800f0da:	6804      	ldr	r4, [r0, #0]
 800f0dc:	fa03 f506 	lsl.w	r5, r3, r6
 800f0e0:	432c      	orrs	r4, r5
 800f0e2:	40d3      	lsrs	r3, r2
 800f0e4:	6004      	str	r4, [r0, #0]
 800f0e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f0ea:	4288      	cmp	r0, r1
 800f0ec:	d3f4      	bcc.n	800f0d8 <L_shift+0xc>
 800f0ee:	bd70      	pop	{r4, r5, r6, pc}

0800f0f0 <__match>:
 800f0f0:	b530      	push	{r4, r5, lr}
 800f0f2:	6803      	ldr	r3, [r0, #0]
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0fa:	b914      	cbnz	r4, 800f102 <__match+0x12>
 800f0fc:	6003      	str	r3, [r0, #0]
 800f0fe:	2001      	movs	r0, #1
 800f100:	bd30      	pop	{r4, r5, pc}
 800f102:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f106:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f10a:	2d19      	cmp	r5, #25
 800f10c:	bf98      	it	ls
 800f10e:	3220      	addls	r2, #32
 800f110:	42a2      	cmp	r2, r4
 800f112:	d0f0      	beq.n	800f0f6 <__match+0x6>
 800f114:	2000      	movs	r0, #0
 800f116:	e7f3      	b.n	800f100 <__match+0x10>

0800f118 <__hexnan>:
 800f118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11c:	680b      	ldr	r3, [r1, #0]
 800f11e:	6801      	ldr	r1, [r0, #0]
 800f120:	115e      	asrs	r6, r3, #5
 800f122:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f126:	f013 031f 	ands.w	r3, r3, #31
 800f12a:	b087      	sub	sp, #28
 800f12c:	bf18      	it	ne
 800f12e:	3604      	addne	r6, #4
 800f130:	2500      	movs	r5, #0
 800f132:	1f37      	subs	r7, r6, #4
 800f134:	4682      	mov	sl, r0
 800f136:	4690      	mov	r8, r2
 800f138:	9301      	str	r3, [sp, #4]
 800f13a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f13e:	46b9      	mov	r9, r7
 800f140:	463c      	mov	r4, r7
 800f142:	9502      	str	r5, [sp, #8]
 800f144:	46ab      	mov	fp, r5
 800f146:	784a      	ldrb	r2, [r1, #1]
 800f148:	1c4b      	adds	r3, r1, #1
 800f14a:	9303      	str	r3, [sp, #12]
 800f14c:	b342      	cbz	r2, 800f1a0 <__hexnan+0x88>
 800f14e:	4610      	mov	r0, r2
 800f150:	9105      	str	r1, [sp, #20]
 800f152:	9204      	str	r2, [sp, #16]
 800f154:	f7ff fd94 	bl	800ec80 <__hexdig_fun>
 800f158:	2800      	cmp	r0, #0
 800f15a:	d151      	bne.n	800f200 <__hexnan+0xe8>
 800f15c:	9a04      	ldr	r2, [sp, #16]
 800f15e:	9905      	ldr	r1, [sp, #20]
 800f160:	2a20      	cmp	r2, #32
 800f162:	d818      	bhi.n	800f196 <__hexnan+0x7e>
 800f164:	9b02      	ldr	r3, [sp, #8]
 800f166:	459b      	cmp	fp, r3
 800f168:	dd13      	ble.n	800f192 <__hexnan+0x7a>
 800f16a:	454c      	cmp	r4, r9
 800f16c:	d206      	bcs.n	800f17c <__hexnan+0x64>
 800f16e:	2d07      	cmp	r5, #7
 800f170:	dc04      	bgt.n	800f17c <__hexnan+0x64>
 800f172:	462a      	mov	r2, r5
 800f174:	4649      	mov	r1, r9
 800f176:	4620      	mov	r0, r4
 800f178:	f7ff ffa8 	bl	800f0cc <L_shift>
 800f17c:	4544      	cmp	r4, r8
 800f17e:	d952      	bls.n	800f226 <__hexnan+0x10e>
 800f180:	2300      	movs	r3, #0
 800f182:	f1a4 0904 	sub.w	r9, r4, #4
 800f186:	f844 3c04 	str.w	r3, [r4, #-4]
 800f18a:	f8cd b008 	str.w	fp, [sp, #8]
 800f18e:	464c      	mov	r4, r9
 800f190:	461d      	mov	r5, r3
 800f192:	9903      	ldr	r1, [sp, #12]
 800f194:	e7d7      	b.n	800f146 <__hexnan+0x2e>
 800f196:	2a29      	cmp	r2, #41	@ 0x29
 800f198:	d157      	bne.n	800f24a <__hexnan+0x132>
 800f19a:	3102      	adds	r1, #2
 800f19c:	f8ca 1000 	str.w	r1, [sl]
 800f1a0:	f1bb 0f00 	cmp.w	fp, #0
 800f1a4:	d051      	beq.n	800f24a <__hexnan+0x132>
 800f1a6:	454c      	cmp	r4, r9
 800f1a8:	d206      	bcs.n	800f1b8 <__hexnan+0xa0>
 800f1aa:	2d07      	cmp	r5, #7
 800f1ac:	dc04      	bgt.n	800f1b8 <__hexnan+0xa0>
 800f1ae:	462a      	mov	r2, r5
 800f1b0:	4649      	mov	r1, r9
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f7ff ff8a 	bl	800f0cc <L_shift>
 800f1b8:	4544      	cmp	r4, r8
 800f1ba:	d936      	bls.n	800f22a <__hexnan+0x112>
 800f1bc:	f1a8 0204 	sub.w	r2, r8, #4
 800f1c0:	4623      	mov	r3, r4
 800f1c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f1c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f1ca:	429f      	cmp	r7, r3
 800f1cc:	d2f9      	bcs.n	800f1c2 <__hexnan+0xaa>
 800f1ce:	1b3b      	subs	r3, r7, r4
 800f1d0:	f023 0303 	bic.w	r3, r3, #3
 800f1d4:	3304      	adds	r3, #4
 800f1d6:	3401      	adds	r4, #1
 800f1d8:	3e03      	subs	r6, #3
 800f1da:	42b4      	cmp	r4, r6
 800f1dc:	bf88      	it	hi
 800f1de:	2304      	movhi	r3, #4
 800f1e0:	4443      	add	r3, r8
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f843 2b04 	str.w	r2, [r3], #4
 800f1e8:	429f      	cmp	r7, r3
 800f1ea:	d2fb      	bcs.n	800f1e4 <__hexnan+0xcc>
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	b91b      	cbnz	r3, 800f1f8 <__hexnan+0xe0>
 800f1f0:	4547      	cmp	r7, r8
 800f1f2:	d128      	bne.n	800f246 <__hexnan+0x12e>
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	603b      	str	r3, [r7, #0]
 800f1f8:	2005      	movs	r0, #5
 800f1fa:	b007      	add	sp, #28
 800f1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f200:	3501      	adds	r5, #1
 800f202:	2d08      	cmp	r5, #8
 800f204:	f10b 0b01 	add.w	fp, fp, #1
 800f208:	dd06      	ble.n	800f218 <__hexnan+0x100>
 800f20a:	4544      	cmp	r4, r8
 800f20c:	d9c1      	bls.n	800f192 <__hexnan+0x7a>
 800f20e:	2300      	movs	r3, #0
 800f210:	f844 3c04 	str.w	r3, [r4, #-4]
 800f214:	2501      	movs	r5, #1
 800f216:	3c04      	subs	r4, #4
 800f218:	6822      	ldr	r2, [r4, #0]
 800f21a:	f000 000f 	and.w	r0, r0, #15
 800f21e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f222:	6020      	str	r0, [r4, #0]
 800f224:	e7b5      	b.n	800f192 <__hexnan+0x7a>
 800f226:	2508      	movs	r5, #8
 800f228:	e7b3      	b.n	800f192 <__hexnan+0x7a>
 800f22a:	9b01      	ldr	r3, [sp, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d0dd      	beq.n	800f1ec <__hexnan+0xd4>
 800f230:	f1c3 0320 	rsb	r3, r3, #32
 800f234:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f238:	40da      	lsrs	r2, r3
 800f23a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f23e:	4013      	ands	r3, r2
 800f240:	f846 3c04 	str.w	r3, [r6, #-4]
 800f244:	e7d2      	b.n	800f1ec <__hexnan+0xd4>
 800f246:	3f04      	subs	r7, #4
 800f248:	e7d0      	b.n	800f1ec <__hexnan+0xd4>
 800f24a:	2004      	movs	r0, #4
 800f24c:	e7d5      	b.n	800f1fa <__hexnan+0xe2>

0800f24e <__ssputs_r>:
 800f24e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f252:	688e      	ldr	r6, [r1, #8]
 800f254:	461f      	mov	r7, r3
 800f256:	42be      	cmp	r6, r7
 800f258:	680b      	ldr	r3, [r1, #0]
 800f25a:	4682      	mov	sl, r0
 800f25c:	460c      	mov	r4, r1
 800f25e:	4690      	mov	r8, r2
 800f260:	d82d      	bhi.n	800f2be <__ssputs_r+0x70>
 800f262:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f266:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f26a:	d026      	beq.n	800f2ba <__ssputs_r+0x6c>
 800f26c:	6965      	ldr	r5, [r4, #20]
 800f26e:	6909      	ldr	r1, [r1, #16]
 800f270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f274:	eba3 0901 	sub.w	r9, r3, r1
 800f278:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f27c:	1c7b      	adds	r3, r7, #1
 800f27e:	444b      	add	r3, r9
 800f280:	106d      	asrs	r5, r5, #1
 800f282:	429d      	cmp	r5, r3
 800f284:	bf38      	it	cc
 800f286:	461d      	movcc	r5, r3
 800f288:	0553      	lsls	r3, r2, #21
 800f28a:	d527      	bpl.n	800f2dc <__ssputs_r+0x8e>
 800f28c:	4629      	mov	r1, r5
 800f28e:	f000 f95f 	bl	800f550 <_malloc_r>
 800f292:	4606      	mov	r6, r0
 800f294:	b360      	cbz	r0, 800f2f0 <__ssputs_r+0xa2>
 800f296:	6921      	ldr	r1, [r4, #16]
 800f298:	464a      	mov	r2, r9
 800f29a:	f7fe fddf 	bl	800de5c <memcpy>
 800f29e:	89a3      	ldrh	r3, [r4, #12]
 800f2a0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f2a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2a8:	81a3      	strh	r3, [r4, #12]
 800f2aa:	6126      	str	r6, [r4, #16]
 800f2ac:	6165      	str	r5, [r4, #20]
 800f2ae:	444e      	add	r6, r9
 800f2b0:	eba5 0509 	sub.w	r5, r5, r9
 800f2b4:	6026      	str	r6, [r4, #0]
 800f2b6:	60a5      	str	r5, [r4, #8]
 800f2b8:	463e      	mov	r6, r7
 800f2ba:	42be      	cmp	r6, r7
 800f2bc:	d900      	bls.n	800f2c0 <__ssputs_r+0x72>
 800f2be:	463e      	mov	r6, r7
 800f2c0:	6820      	ldr	r0, [r4, #0]
 800f2c2:	4632      	mov	r2, r6
 800f2c4:	4641      	mov	r1, r8
 800f2c6:	f000 ff72 	bl	80101ae <memmove>
 800f2ca:	68a3      	ldr	r3, [r4, #8]
 800f2cc:	1b9b      	subs	r3, r3, r6
 800f2ce:	60a3      	str	r3, [r4, #8]
 800f2d0:	6823      	ldr	r3, [r4, #0]
 800f2d2:	4433      	add	r3, r6
 800f2d4:	6023      	str	r3, [r4, #0]
 800f2d6:	2000      	movs	r0, #0
 800f2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2dc:	462a      	mov	r2, r5
 800f2de:	f000 ff2b 	bl	8010138 <_realloc_r>
 800f2e2:	4606      	mov	r6, r0
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d1e0      	bne.n	800f2aa <__ssputs_r+0x5c>
 800f2e8:	6921      	ldr	r1, [r4, #16]
 800f2ea:	4650      	mov	r0, sl
 800f2ec:	f7ff fc2c 	bl	800eb48 <_free_r>
 800f2f0:	230c      	movs	r3, #12
 800f2f2:	f8ca 3000 	str.w	r3, [sl]
 800f2f6:	89a3      	ldrh	r3, [r4, #12]
 800f2f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2fc:	81a3      	strh	r3, [r4, #12]
 800f2fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f302:	e7e9      	b.n	800f2d8 <__ssputs_r+0x8a>

0800f304 <_svfiprintf_r>:
 800f304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f308:	4698      	mov	r8, r3
 800f30a:	898b      	ldrh	r3, [r1, #12]
 800f30c:	061b      	lsls	r3, r3, #24
 800f30e:	b09d      	sub	sp, #116	@ 0x74
 800f310:	4607      	mov	r7, r0
 800f312:	460d      	mov	r5, r1
 800f314:	4614      	mov	r4, r2
 800f316:	d510      	bpl.n	800f33a <_svfiprintf_r+0x36>
 800f318:	690b      	ldr	r3, [r1, #16]
 800f31a:	b973      	cbnz	r3, 800f33a <_svfiprintf_r+0x36>
 800f31c:	2140      	movs	r1, #64	@ 0x40
 800f31e:	f000 f917 	bl	800f550 <_malloc_r>
 800f322:	6028      	str	r0, [r5, #0]
 800f324:	6128      	str	r0, [r5, #16]
 800f326:	b930      	cbnz	r0, 800f336 <_svfiprintf_r+0x32>
 800f328:	230c      	movs	r3, #12
 800f32a:	603b      	str	r3, [r7, #0]
 800f32c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f330:	b01d      	add	sp, #116	@ 0x74
 800f332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f336:	2340      	movs	r3, #64	@ 0x40
 800f338:	616b      	str	r3, [r5, #20]
 800f33a:	2300      	movs	r3, #0
 800f33c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f33e:	2320      	movs	r3, #32
 800f340:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f344:	f8cd 800c 	str.w	r8, [sp, #12]
 800f348:	2330      	movs	r3, #48	@ 0x30
 800f34a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f4e8 <_svfiprintf_r+0x1e4>
 800f34e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f352:	f04f 0901 	mov.w	r9, #1
 800f356:	4623      	mov	r3, r4
 800f358:	469a      	mov	sl, r3
 800f35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f35e:	b10a      	cbz	r2, 800f364 <_svfiprintf_r+0x60>
 800f360:	2a25      	cmp	r2, #37	@ 0x25
 800f362:	d1f9      	bne.n	800f358 <_svfiprintf_r+0x54>
 800f364:	ebba 0b04 	subs.w	fp, sl, r4
 800f368:	d00b      	beq.n	800f382 <_svfiprintf_r+0x7e>
 800f36a:	465b      	mov	r3, fp
 800f36c:	4622      	mov	r2, r4
 800f36e:	4629      	mov	r1, r5
 800f370:	4638      	mov	r0, r7
 800f372:	f7ff ff6c 	bl	800f24e <__ssputs_r>
 800f376:	3001      	adds	r0, #1
 800f378:	f000 80a7 	beq.w	800f4ca <_svfiprintf_r+0x1c6>
 800f37c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f37e:	445a      	add	r2, fp
 800f380:	9209      	str	r2, [sp, #36]	@ 0x24
 800f382:	f89a 3000 	ldrb.w	r3, [sl]
 800f386:	2b00      	cmp	r3, #0
 800f388:	f000 809f 	beq.w	800f4ca <_svfiprintf_r+0x1c6>
 800f38c:	2300      	movs	r3, #0
 800f38e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f396:	f10a 0a01 	add.w	sl, sl, #1
 800f39a:	9304      	str	r3, [sp, #16]
 800f39c:	9307      	str	r3, [sp, #28]
 800f39e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f3a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3a4:	4654      	mov	r4, sl
 800f3a6:	2205      	movs	r2, #5
 800f3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3ac:	484e      	ldr	r0, [pc, #312]	@ (800f4e8 <_svfiprintf_r+0x1e4>)
 800f3ae:	f7f0 ff3f 	bl	8000230 <memchr>
 800f3b2:	9a04      	ldr	r2, [sp, #16]
 800f3b4:	b9d8      	cbnz	r0, 800f3ee <_svfiprintf_r+0xea>
 800f3b6:	06d0      	lsls	r0, r2, #27
 800f3b8:	bf44      	itt	mi
 800f3ba:	2320      	movmi	r3, #32
 800f3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3c0:	0711      	lsls	r1, r2, #28
 800f3c2:	bf44      	itt	mi
 800f3c4:	232b      	movmi	r3, #43	@ 0x2b
 800f3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800f3ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3d0:	d015      	beq.n	800f3fe <_svfiprintf_r+0xfa>
 800f3d2:	9a07      	ldr	r2, [sp, #28]
 800f3d4:	4654      	mov	r4, sl
 800f3d6:	2000      	movs	r0, #0
 800f3d8:	f04f 0c0a 	mov.w	ip, #10
 800f3dc:	4621      	mov	r1, r4
 800f3de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3e2:	3b30      	subs	r3, #48	@ 0x30
 800f3e4:	2b09      	cmp	r3, #9
 800f3e6:	d94b      	bls.n	800f480 <_svfiprintf_r+0x17c>
 800f3e8:	b1b0      	cbz	r0, 800f418 <_svfiprintf_r+0x114>
 800f3ea:	9207      	str	r2, [sp, #28]
 800f3ec:	e014      	b.n	800f418 <_svfiprintf_r+0x114>
 800f3ee:	eba0 0308 	sub.w	r3, r0, r8
 800f3f2:	fa09 f303 	lsl.w	r3, r9, r3
 800f3f6:	4313      	orrs	r3, r2
 800f3f8:	9304      	str	r3, [sp, #16]
 800f3fa:	46a2      	mov	sl, r4
 800f3fc:	e7d2      	b.n	800f3a4 <_svfiprintf_r+0xa0>
 800f3fe:	9b03      	ldr	r3, [sp, #12]
 800f400:	1d19      	adds	r1, r3, #4
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	9103      	str	r1, [sp, #12]
 800f406:	2b00      	cmp	r3, #0
 800f408:	bfbb      	ittet	lt
 800f40a:	425b      	neglt	r3, r3
 800f40c:	f042 0202 	orrlt.w	r2, r2, #2
 800f410:	9307      	strge	r3, [sp, #28]
 800f412:	9307      	strlt	r3, [sp, #28]
 800f414:	bfb8      	it	lt
 800f416:	9204      	strlt	r2, [sp, #16]
 800f418:	7823      	ldrb	r3, [r4, #0]
 800f41a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f41c:	d10a      	bne.n	800f434 <_svfiprintf_r+0x130>
 800f41e:	7863      	ldrb	r3, [r4, #1]
 800f420:	2b2a      	cmp	r3, #42	@ 0x2a
 800f422:	d132      	bne.n	800f48a <_svfiprintf_r+0x186>
 800f424:	9b03      	ldr	r3, [sp, #12]
 800f426:	1d1a      	adds	r2, r3, #4
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	9203      	str	r2, [sp, #12]
 800f42c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f430:	3402      	adds	r4, #2
 800f432:	9305      	str	r3, [sp, #20]
 800f434:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f4f8 <_svfiprintf_r+0x1f4>
 800f438:	7821      	ldrb	r1, [r4, #0]
 800f43a:	2203      	movs	r2, #3
 800f43c:	4650      	mov	r0, sl
 800f43e:	f7f0 fef7 	bl	8000230 <memchr>
 800f442:	b138      	cbz	r0, 800f454 <_svfiprintf_r+0x150>
 800f444:	9b04      	ldr	r3, [sp, #16]
 800f446:	eba0 000a 	sub.w	r0, r0, sl
 800f44a:	2240      	movs	r2, #64	@ 0x40
 800f44c:	4082      	lsls	r2, r0
 800f44e:	4313      	orrs	r3, r2
 800f450:	3401      	adds	r4, #1
 800f452:	9304      	str	r3, [sp, #16]
 800f454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f458:	4824      	ldr	r0, [pc, #144]	@ (800f4ec <_svfiprintf_r+0x1e8>)
 800f45a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f45e:	2206      	movs	r2, #6
 800f460:	f7f0 fee6 	bl	8000230 <memchr>
 800f464:	2800      	cmp	r0, #0
 800f466:	d036      	beq.n	800f4d6 <_svfiprintf_r+0x1d2>
 800f468:	4b21      	ldr	r3, [pc, #132]	@ (800f4f0 <_svfiprintf_r+0x1ec>)
 800f46a:	bb1b      	cbnz	r3, 800f4b4 <_svfiprintf_r+0x1b0>
 800f46c:	9b03      	ldr	r3, [sp, #12]
 800f46e:	3307      	adds	r3, #7
 800f470:	f023 0307 	bic.w	r3, r3, #7
 800f474:	3308      	adds	r3, #8
 800f476:	9303      	str	r3, [sp, #12]
 800f478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f47a:	4433      	add	r3, r6
 800f47c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f47e:	e76a      	b.n	800f356 <_svfiprintf_r+0x52>
 800f480:	fb0c 3202 	mla	r2, ip, r2, r3
 800f484:	460c      	mov	r4, r1
 800f486:	2001      	movs	r0, #1
 800f488:	e7a8      	b.n	800f3dc <_svfiprintf_r+0xd8>
 800f48a:	2300      	movs	r3, #0
 800f48c:	3401      	adds	r4, #1
 800f48e:	9305      	str	r3, [sp, #20]
 800f490:	4619      	mov	r1, r3
 800f492:	f04f 0c0a 	mov.w	ip, #10
 800f496:	4620      	mov	r0, r4
 800f498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f49c:	3a30      	subs	r2, #48	@ 0x30
 800f49e:	2a09      	cmp	r2, #9
 800f4a0:	d903      	bls.n	800f4aa <_svfiprintf_r+0x1a6>
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d0c6      	beq.n	800f434 <_svfiprintf_r+0x130>
 800f4a6:	9105      	str	r1, [sp, #20]
 800f4a8:	e7c4      	b.n	800f434 <_svfiprintf_r+0x130>
 800f4aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	e7f0      	b.n	800f496 <_svfiprintf_r+0x192>
 800f4b4:	ab03      	add	r3, sp, #12
 800f4b6:	9300      	str	r3, [sp, #0]
 800f4b8:	462a      	mov	r2, r5
 800f4ba:	4b0e      	ldr	r3, [pc, #56]	@ (800f4f4 <_svfiprintf_r+0x1f0>)
 800f4bc:	a904      	add	r1, sp, #16
 800f4be:	4638      	mov	r0, r7
 800f4c0:	f7fc fe94 	bl	800c1ec <_printf_float>
 800f4c4:	1c42      	adds	r2, r0, #1
 800f4c6:	4606      	mov	r6, r0
 800f4c8:	d1d6      	bne.n	800f478 <_svfiprintf_r+0x174>
 800f4ca:	89ab      	ldrh	r3, [r5, #12]
 800f4cc:	065b      	lsls	r3, r3, #25
 800f4ce:	f53f af2d 	bmi.w	800f32c <_svfiprintf_r+0x28>
 800f4d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4d4:	e72c      	b.n	800f330 <_svfiprintf_r+0x2c>
 800f4d6:	ab03      	add	r3, sp, #12
 800f4d8:	9300      	str	r3, [sp, #0]
 800f4da:	462a      	mov	r2, r5
 800f4dc:	4b05      	ldr	r3, [pc, #20]	@ (800f4f4 <_svfiprintf_r+0x1f0>)
 800f4de:	a904      	add	r1, sp, #16
 800f4e0:	4638      	mov	r0, r7
 800f4e2:	f7fd f91b 	bl	800c71c <_printf_i>
 800f4e6:	e7ed      	b.n	800f4c4 <_svfiprintf_r+0x1c0>
 800f4e8:	080114ac 	.word	0x080114ac
 800f4ec:	080114b6 	.word	0x080114b6
 800f4f0:	0800c1ed 	.word	0x0800c1ed
 800f4f4:	0800f24f 	.word	0x0800f24f
 800f4f8:	080114b2 	.word	0x080114b2

0800f4fc <malloc>:
 800f4fc:	4b02      	ldr	r3, [pc, #8]	@ (800f508 <malloc+0xc>)
 800f4fe:	4601      	mov	r1, r0
 800f500:	6818      	ldr	r0, [r3, #0]
 800f502:	f000 b825 	b.w	800f550 <_malloc_r>
 800f506:	bf00      	nop
 800f508:	20000544 	.word	0x20000544

0800f50c <sbrk_aligned>:
 800f50c:	b570      	push	{r4, r5, r6, lr}
 800f50e:	4e0f      	ldr	r6, [pc, #60]	@ (800f54c <sbrk_aligned+0x40>)
 800f510:	460c      	mov	r4, r1
 800f512:	6831      	ldr	r1, [r6, #0]
 800f514:	4605      	mov	r5, r0
 800f516:	b911      	cbnz	r1, 800f51e <sbrk_aligned+0x12>
 800f518:	f000 fe64 	bl	80101e4 <_sbrk_r>
 800f51c:	6030      	str	r0, [r6, #0]
 800f51e:	4621      	mov	r1, r4
 800f520:	4628      	mov	r0, r5
 800f522:	f000 fe5f 	bl	80101e4 <_sbrk_r>
 800f526:	1c43      	adds	r3, r0, #1
 800f528:	d103      	bne.n	800f532 <sbrk_aligned+0x26>
 800f52a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f52e:	4620      	mov	r0, r4
 800f530:	bd70      	pop	{r4, r5, r6, pc}
 800f532:	1cc4      	adds	r4, r0, #3
 800f534:	f024 0403 	bic.w	r4, r4, #3
 800f538:	42a0      	cmp	r0, r4
 800f53a:	d0f8      	beq.n	800f52e <sbrk_aligned+0x22>
 800f53c:	1a21      	subs	r1, r4, r0
 800f53e:	4628      	mov	r0, r5
 800f540:	f000 fe50 	bl	80101e4 <_sbrk_r>
 800f544:	3001      	adds	r0, #1
 800f546:	d1f2      	bne.n	800f52e <sbrk_aligned+0x22>
 800f548:	e7ef      	b.n	800f52a <sbrk_aligned+0x1e>
 800f54a:	bf00      	nop
 800f54c:	20000ecc 	.word	0x20000ecc

0800f550 <_malloc_r>:
 800f550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f554:	1ccd      	adds	r5, r1, #3
 800f556:	f025 0503 	bic.w	r5, r5, #3
 800f55a:	3508      	adds	r5, #8
 800f55c:	2d0c      	cmp	r5, #12
 800f55e:	bf38      	it	cc
 800f560:	250c      	movcc	r5, #12
 800f562:	2d00      	cmp	r5, #0
 800f564:	4606      	mov	r6, r0
 800f566:	db01      	blt.n	800f56c <_malloc_r+0x1c>
 800f568:	42a9      	cmp	r1, r5
 800f56a:	d904      	bls.n	800f576 <_malloc_r+0x26>
 800f56c:	230c      	movs	r3, #12
 800f56e:	6033      	str	r3, [r6, #0]
 800f570:	2000      	movs	r0, #0
 800f572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f64c <_malloc_r+0xfc>
 800f57a:	f000 f927 	bl	800f7cc <__malloc_lock>
 800f57e:	f8d8 3000 	ldr.w	r3, [r8]
 800f582:	461c      	mov	r4, r3
 800f584:	bb44      	cbnz	r4, 800f5d8 <_malloc_r+0x88>
 800f586:	4629      	mov	r1, r5
 800f588:	4630      	mov	r0, r6
 800f58a:	f7ff ffbf 	bl	800f50c <sbrk_aligned>
 800f58e:	1c43      	adds	r3, r0, #1
 800f590:	4604      	mov	r4, r0
 800f592:	d158      	bne.n	800f646 <_malloc_r+0xf6>
 800f594:	f8d8 4000 	ldr.w	r4, [r8]
 800f598:	4627      	mov	r7, r4
 800f59a:	2f00      	cmp	r7, #0
 800f59c:	d143      	bne.n	800f626 <_malloc_r+0xd6>
 800f59e:	2c00      	cmp	r4, #0
 800f5a0:	d04b      	beq.n	800f63a <_malloc_r+0xea>
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	4639      	mov	r1, r7
 800f5a6:	4630      	mov	r0, r6
 800f5a8:	eb04 0903 	add.w	r9, r4, r3
 800f5ac:	f000 fe1a 	bl	80101e4 <_sbrk_r>
 800f5b0:	4581      	cmp	r9, r0
 800f5b2:	d142      	bne.n	800f63a <_malloc_r+0xea>
 800f5b4:	6821      	ldr	r1, [r4, #0]
 800f5b6:	1a6d      	subs	r5, r5, r1
 800f5b8:	4629      	mov	r1, r5
 800f5ba:	4630      	mov	r0, r6
 800f5bc:	f7ff ffa6 	bl	800f50c <sbrk_aligned>
 800f5c0:	3001      	adds	r0, #1
 800f5c2:	d03a      	beq.n	800f63a <_malloc_r+0xea>
 800f5c4:	6823      	ldr	r3, [r4, #0]
 800f5c6:	442b      	add	r3, r5
 800f5c8:	6023      	str	r3, [r4, #0]
 800f5ca:	f8d8 3000 	ldr.w	r3, [r8]
 800f5ce:	685a      	ldr	r2, [r3, #4]
 800f5d0:	bb62      	cbnz	r2, 800f62c <_malloc_r+0xdc>
 800f5d2:	f8c8 7000 	str.w	r7, [r8]
 800f5d6:	e00f      	b.n	800f5f8 <_malloc_r+0xa8>
 800f5d8:	6822      	ldr	r2, [r4, #0]
 800f5da:	1b52      	subs	r2, r2, r5
 800f5dc:	d420      	bmi.n	800f620 <_malloc_r+0xd0>
 800f5de:	2a0b      	cmp	r2, #11
 800f5e0:	d917      	bls.n	800f612 <_malloc_r+0xc2>
 800f5e2:	1961      	adds	r1, r4, r5
 800f5e4:	42a3      	cmp	r3, r4
 800f5e6:	6025      	str	r5, [r4, #0]
 800f5e8:	bf18      	it	ne
 800f5ea:	6059      	strne	r1, [r3, #4]
 800f5ec:	6863      	ldr	r3, [r4, #4]
 800f5ee:	bf08      	it	eq
 800f5f0:	f8c8 1000 	streq.w	r1, [r8]
 800f5f4:	5162      	str	r2, [r4, r5]
 800f5f6:	604b      	str	r3, [r1, #4]
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	f000 f8ed 	bl	800f7d8 <__malloc_unlock>
 800f5fe:	f104 000b 	add.w	r0, r4, #11
 800f602:	1d23      	adds	r3, r4, #4
 800f604:	f020 0007 	bic.w	r0, r0, #7
 800f608:	1ac2      	subs	r2, r0, r3
 800f60a:	bf1c      	itt	ne
 800f60c:	1a1b      	subne	r3, r3, r0
 800f60e:	50a3      	strne	r3, [r4, r2]
 800f610:	e7af      	b.n	800f572 <_malloc_r+0x22>
 800f612:	6862      	ldr	r2, [r4, #4]
 800f614:	42a3      	cmp	r3, r4
 800f616:	bf0c      	ite	eq
 800f618:	f8c8 2000 	streq.w	r2, [r8]
 800f61c:	605a      	strne	r2, [r3, #4]
 800f61e:	e7eb      	b.n	800f5f8 <_malloc_r+0xa8>
 800f620:	4623      	mov	r3, r4
 800f622:	6864      	ldr	r4, [r4, #4]
 800f624:	e7ae      	b.n	800f584 <_malloc_r+0x34>
 800f626:	463c      	mov	r4, r7
 800f628:	687f      	ldr	r7, [r7, #4]
 800f62a:	e7b6      	b.n	800f59a <_malloc_r+0x4a>
 800f62c:	461a      	mov	r2, r3
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	42a3      	cmp	r3, r4
 800f632:	d1fb      	bne.n	800f62c <_malloc_r+0xdc>
 800f634:	2300      	movs	r3, #0
 800f636:	6053      	str	r3, [r2, #4]
 800f638:	e7de      	b.n	800f5f8 <_malloc_r+0xa8>
 800f63a:	230c      	movs	r3, #12
 800f63c:	6033      	str	r3, [r6, #0]
 800f63e:	4630      	mov	r0, r6
 800f640:	f000 f8ca 	bl	800f7d8 <__malloc_unlock>
 800f644:	e794      	b.n	800f570 <_malloc_r+0x20>
 800f646:	6005      	str	r5, [r0, #0]
 800f648:	e7d6      	b.n	800f5f8 <_malloc_r+0xa8>
 800f64a:	bf00      	nop
 800f64c:	20000ed0 	.word	0x20000ed0

0800f650 <__ascii_mbtowc>:
 800f650:	b082      	sub	sp, #8
 800f652:	b901      	cbnz	r1, 800f656 <__ascii_mbtowc+0x6>
 800f654:	a901      	add	r1, sp, #4
 800f656:	b142      	cbz	r2, 800f66a <__ascii_mbtowc+0x1a>
 800f658:	b14b      	cbz	r3, 800f66e <__ascii_mbtowc+0x1e>
 800f65a:	7813      	ldrb	r3, [r2, #0]
 800f65c:	600b      	str	r3, [r1, #0]
 800f65e:	7812      	ldrb	r2, [r2, #0]
 800f660:	1e10      	subs	r0, r2, #0
 800f662:	bf18      	it	ne
 800f664:	2001      	movne	r0, #1
 800f666:	b002      	add	sp, #8
 800f668:	4770      	bx	lr
 800f66a:	4610      	mov	r0, r2
 800f66c:	e7fb      	b.n	800f666 <__ascii_mbtowc+0x16>
 800f66e:	f06f 0001 	mvn.w	r0, #1
 800f672:	e7f8      	b.n	800f666 <__ascii_mbtowc+0x16>

0800f674 <__sflush_r>:
 800f674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f67c:	0716      	lsls	r6, r2, #28
 800f67e:	4605      	mov	r5, r0
 800f680:	460c      	mov	r4, r1
 800f682:	d454      	bmi.n	800f72e <__sflush_r+0xba>
 800f684:	684b      	ldr	r3, [r1, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	dc02      	bgt.n	800f690 <__sflush_r+0x1c>
 800f68a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	dd48      	ble.n	800f722 <__sflush_r+0xae>
 800f690:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f692:	2e00      	cmp	r6, #0
 800f694:	d045      	beq.n	800f722 <__sflush_r+0xae>
 800f696:	2300      	movs	r3, #0
 800f698:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f69c:	682f      	ldr	r7, [r5, #0]
 800f69e:	6a21      	ldr	r1, [r4, #32]
 800f6a0:	602b      	str	r3, [r5, #0]
 800f6a2:	d030      	beq.n	800f706 <__sflush_r+0x92>
 800f6a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f6a6:	89a3      	ldrh	r3, [r4, #12]
 800f6a8:	0759      	lsls	r1, r3, #29
 800f6aa:	d505      	bpl.n	800f6b8 <__sflush_r+0x44>
 800f6ac:	6863      	ldr	r3, [r4, #4]
 800f6ae:	1ad2      	subs	r2, r2, r3
 800f6b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f6b2:	b10b      	cbz	r3, 800f6b8 <__sflush_r+0x44>
 800f6b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f6b6:	1ad2      	subs	r2, r2, r3
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f6bc:	6a21      	ldr	r1, [r4, #32]
 800f6be:	4628      	mov	r0, r5
 800f6c0:	47b0      	blx	r6
 800f6c2:	1c43      	adds	r3, r0, #1
 800f6c4:	89a3      	ldrh	r3, [r4, #12]
 800f6c6:	d106      	bne.n	800f6d6 <__sflush_r+0x62>
 800f6c8:	6829      	ldr	r1, [r5, #0]
 800f6ca:	291d      	cmp	r1, #29
 800f6cc:	d82b      	bhi.n	800f726 <__sflush_r+0xb2>
 800f6ce:	4a2a      	ldr	r2, [pc, #168]	@ (800f778 <__sflush_r+0x104>)
 800f6d0:	40ca      	lsrs	r2, r1
 800f6d2:	07d6      	lsls	r6, r2, #31
 800f6d4:	d527      	bpl.n	800f726 <__sflush_r+0xb2>
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	6062      	str	r2, [r4, #4]
 800f6da:	04d9      	lsls	r1, r3, #19
 800f6dc:	6922      	ldr	r2, [r4, #16]
 800f6de:	6022      	str	r2, [r4, #0]
 800f6e0:	d504      	bpl.n	800f6ec <__sflush_r+0x78>
 800f6e2:	1c42      	adds	r2, r0, #1
 800f6e4:	d101      	bne.n	800f6ea <__sflush_r+0x76>
 800f6e6:	682b      	ldr	r3, [r5, #0]
 800f6e8:	b903      	cbnz	r3, 800f6ec <__sflush_r+0x78>
 800f6ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800f6ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6ee:	602f      	str	r7, [r5, #0]
 800f6f0:	b1b9      	cbz	r1, 800f722 <__sflush_r+0xae>
 800f6f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6f6:	4299      	cmp	r1, r3
 800f6f8:	d002      	beq.n	800f700 <__sflush_r+0x8c>
 800f6fa:	4628      	mov	r0, r5
 800f6fc:	f7ff fa24 	bl	800eb48 <_free_r>
 800f700:	2300      	movs	r3, #0
 800f702:	6363      	str	r3, [r4, #52]	@ 0x34
 800f704:	e00d      	b.n	800f722 <__sflush_r+0xae>
 800f706:	2301      	movs	r3, #1
 800f708:	4628      	mov	r0, r5
 800f70a:	47b0      	blx	r6
 800f70c:	4602      	mov	r2, r0
 800f70e:	1c50      	adds	r0, r2, #1
 800f710:	d1c9      	bne.n	800f6a6 <__sflush_r+0x32>
 800f712:	682b      	ldr	r3, [r5, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d0c6      	beq.n	800f6a6 <__sflush_r+0x32>
 800f718:	2b1d      	cmp	r3, #29
 800f71a:	d001      	beq.n	800f720 <__sflush_r+0xac>
 800f71c:	2b16      	cmp	r3, #22
 800f71e:	d11e      	bne.n	800f75e <__sflush_r+0xea>
 800f720:	602f      	str	r7, [r5, #0]
 800f722:	2000      	movs	r0, #0
 800f724:	e022      	b.n	800f76c <__sflush_r+0xf8>
 800f726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f72a:	b21b      	sxth	r3, r3
 800f72c:	e01b      	b.n	800f766 <__sflush_r+0xf2>
 800f72e:	690f      	ldr	r7, [r1, #16]
 800f730:	2f00      	cmp	r7, #0
 800f732:	d0f6      	beq.n	800f722 <__sflush_r+0xae>
 800f734:	0793      	lsls	r3, r2, #30
 800f736:	680e      	ldr	r6, [r1, #0]
 800f738:	bf08      	it	eq
 800f73a:	694b      	ldreq	r3, [r1, #20]
 800f73c:	600f      	str	r7, [r1, #0]
 800f73e:	bf18      	it	ne
 800f740:	2300      	movne	r3, #0
 800f742:	eba6 0807 	sub.w	r8, r6, r7
 800f746:	608b      	str	r3, [r1, #8]
 800f748:	f1b8 0f00 	cmp.w	r8, #0
 800f74c:	dde9      	ble.n	800f722 <__sflush_r+0xae>
 800f74e:	6a21      	ldr	r1, [r4, #32]
 800f750:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f752:	4643      	mov	r3, r8
 800f754:	463a      	mov	r2, r7
 800f756:	4628      	mov	r0, r5
 800f758:	47b0      	blx	r6
 800f75a:	2800      	cmp	r0, #0
 800f75c:	dc08      	bgt.n	800f770 <__sflush_r+0xfc>
 800f75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f766:	81a3      	strh	r3, [r4, #12]
 800f768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f770:	4407      	add	r7, r0
 800f772:	eba8 0800 	sub.w	r8, r8, r0
 800f776:	e7e7      	b.n	800f748 <__sflush_r+0xd4>
 800f778:	20400001 	.word	0x20400001

0800f77c <_fflush_r>:
 800f77c:	b538      	push	{r3, r4, r5, lr}
 800f77e:	690b      	ldr	r3, [r1, #16]
 800f780:	4605      	mov	r5, r0
 800f782:	460c      	mov	r4, r1
 800f784:	b913      	cbnz	r3, 800f78c <_fflush_r+0x10>
 800f786:	2500      	movs	r5, #0
 800f788:	4628      	mov	r0, r5
 800f78a:	bd38      	pop	{r3, r4, r5, pc}
 800f78c:	b118      	cbz	r0, 800f796 <_fflush_r+0x1a>
 800f78e:	6a03      	ldr	r3, [r0, #32]
 800f790:	b90b      	cbnz	r3, 800f796 <_fflush_r+0x1a>
 800f792:	f7fd fc17 	bl	800cfc4 <__sinit>
 800f796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d0f3      	beq.n	800f786 <_fflush_r+0xa>
 800f79e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f7a0:	07d0      	lsls	r0, r2, #31
 800f7a2:	d404      	bmi.n	800f7ae <_fflush_r+0x32>
 800f7a4:	0599      	lsls	r1, r3, #22
 800f7a6:	d402      	bmi.n	800f7ae <_fflush_r+0x32>
 800f7a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7aa:	f7fe fb40 	bl	800de2e <__retarget_lock_acquire_recursive>
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	f7ff ff5f 	bl	800f674 <__sflush_r>
 800f7b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7b8:	07da      	lsls	r2, r3, #31
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	d4e4      	bmi.n	800f788 <_fflush_r+0xc>
 800f7be:	89a3      	ldrh	r3, [r4, #12]
 800f7c0:	059b      	lsls	r3, r3, #22
 800f7c2:	d4e1      	bmi.n	800f788 <_fflush_r+0xc>
 800f7c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7c6:	f7fe fb33 	bl	800de30 <__retarget_lock_release_recursive>
 800f7ca:	e7dd      	b.n	800f788 <_fflush_r+0xc>

0800f7cc <__malloc_lock>:
 800f7cc:	4801      	ldr	r0, [pc, #4]	@ (800f7d4 <__malloc_lock+0x8>)
 800f7ce:	f7fe bb2e 	b.w	800de2e <__retarget_lock_acquire_recursive>
 800f7d2:	bf00      	nop
 800f7d4:	20000ec4 	.word	0x20000ec4

0800f7d8 <__malloc_unlock>:
 800f7d8:	4801      	ldr	r0, [pc, #4]	@ (800f7e0 <__malloc_unlock+0x8>)
 800f7da:	f7fe bb29 	b.w	800de30 <__retarget_lock_release_recursive>
 800f7de:	bf00      	nop
 800f7e0:	20000ec4 	.word	0x20000ec4

0800f7e4 <_Balloc>:
 800f7e4:	b570      	push	{r4, r5, r6, lr}
 800f7e6:	69c6      	ldr	r6, [r0, #28]
 800f7e8:	4604      	mov	r4, r0
 800f7ea:	460d      	mov	r5, r1
 800f7ec:	b976      	cbnz	r6, 800f80c <_Balloc+0x28>
 800f7ee:	2010      	movs	r0, #16
 800f7f0:	f7ff fe84 	bl	800f4fc <malloc>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	61e0      	str	r0, [r4, #28]
 800f7f8:	b920      	cbnz	r0, 800f804 <_Balloc+0x20>
 800f7fa:	4b18      	ldr	r3, [pc, #96]	@ (800f85c <_Balloc+0x78>)
 800f7fc:	4818      	ldr	r0, [pc, #96]	@ (800f860 <_Balloc+0x7c>)
 800f7fe:	216b      	movs	r1, #107	@ 0x6b
 800f800:	f000 fd00 	bl	8010204 <__assert_func>
 800f804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f808:	6006      	str	r6, [r0, #0]
 800f80a:	60c6      	str	r6, [r0, #12]
 800f80c:	69e6      	ldr	r6, [r4, #28]
 800f80e:	68f3      	ldr	r3, [r6, #12]
 800f810:	b183      	cbz	r3, 800f834 <_Balloc+0x50>
 800f812:	69e3      	ldr	r3, [r4, #28]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f81a:	b9b8      	cbnz	r0, 800f84c <_Balloc+0x68>
 800f81c:	2101      	movs	r1, #1
 800f81e:	fa01 f605 	lsl.w	r6, r1, r5
 800f822:	1d72      	adds	r2, r6, #5
 800f824:	0092      	lsls	r2, r2, #2
 800f826:	4620      	mov	r0, r4
 800f828:	f000 fd0a 	bl	8010240 <_calloc_r>
 800f82c:	b160      	cbz	r0, 800f848 <_Balloc+0x64>
 800f82e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f832:	e00e      	b.n	800f852 <_Balloc+0x6e>
 800f834:	2221      	movs	r2, #33	@ 0x21
 800f836:	2104      	movs	r1, #4
 800f838:	4620      	mov	r0, r4
 800f83a:	f000 fd01 	bl	8010240 <_calloc_r>
 800f83e:	69e3      	ldr	r3, [r4, #28]
 800f840:	60f0      	str	r0, [r6, #12]
 800f842:	68db      	ldr	r3, [r3, #12]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d1e4      	bne.n	800f812 <_Balloc+0x2e>
 800f848:	2000      	movs	r0, #0
 800f84a:	bd70      	pop	{r4, r5, r6, pc}
 800f84c:	6802      	ldr	r2, [r0, #0]
 800f84e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f852:	2300      	movs	r3, #0
 800f854:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f858:	e7f7      	b.n	800f84a <_Balloc+0x66>
 800f85a:	bf00      	nop
 800f85c:	080113cc 	.word	0x080113cc
 800f860:	080114bd 	.word	0x080114bd

0800f864 <_Bfree>:
 800f864:	b570      	push	{r4, r5, r6, lr}
 800f866:	69c6      	ldr	r6, [r0, #28]
 800f868:	4605      	mov	r5, r0
 800f86a:	460c      	mov	r4, r1
 800f86c:	b976      	cbnz	r6, 800f88c <_Bfree+0x28>
 800f86e:	2010      	movs	r0, #16
 800f870:	f7ff fe44 	bl	800f4fc <malloc>
 800f874:	4602      	mov	r2, r0
 800f876:	61e8      	str	r0, [r5, #28]
 800f878:	b920      	cbnz	r0, 800f884 <_Bfree+0x20>
 800f87a:	4b09      	ldr	r3, [pc, #36]	@ (800f8a0 <_Bfree+0x3c>)
 800f87c:	4809      	ldr	r0, [pc, #36]	@ (800f8a4 <_Bfree+0x40>)
 800f87e:	218f      	movs	r1, #143	@ 0x8f
 800f880:	f000 fcc0 	bl	8010204 <__assert_func>
 800f884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f888:	6006      	str	r6, [r0, #0]
 800f88a:	60c6      	str	r6, [r0, #12]
 800f88c:	b13c      	cbz	r4, 800f89e <_Bfree+0x3a>
 800f88e:	69eb      	ldr	r3, [r5, #28]
 800f890:	6862      	ldr	r2, [r4, #4]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f898:	6021      	str	r1, [r4, #0]
 800f89a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f89e:	bd70      	pop	{r4, r5, r6, pc}
 800f8a0:	080113cc 	.word	0x080113cc
 800f8a4:	080114bd 	.word	0x080114bd

0800f8a8 <__multadd>:
 800f8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ac:	690d      	ldr	r5, [r1, #16]
 800f8ae:	4607      	mov	r7, r0
 800f8b0:	460c      	mov	r4, r1
 800f8b2:	461e      	mov	r6, r3
 800f8b4:	f101 0c14 	add.w	ip, r1, #20
 800f8b8:	2000      	movs	r0, #0
 800f8ba:	f8dc 3000 	ldr.w	r3, [ip]
 800f8be:	b299      	uxth	r1, r3
 800f8c0:	fb02 6101 	mla	r1, r2, r1, r6
 800f8c4:	0c1e      	lsrs	r6, r3, #16
 800f8c6:	0c0b      	lsrs	r3, r1, #16
 800f8c8:	fb02 3306 	mla	r3, r2, r6, r3
 800f8cc:	b289      	uxth	r1, r1
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8d4:	4285      	cmp	r5, r0
 800f8d6:	f84c 1b04 	str.w	r1, [ip], #4
 800f8da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f8de:	dcec      	bgt.n	800f8ba <__multadd+0x12>
 800f8e0:	b30e      	cbz	r6, 800f926 <__multadd+0x7e>
 800f8e2:	68a3      	ldr	r3, [r4, #8]
 800f8e4:	42ab      	cmp	r3, r5
 800f8e6:	dc19      	bgt.n	800f91c <__multadd+0x74>
 800f8e8:	6861      	ldr	r1, [r4, #4]
 800f8ea:	4638      	mov	r0, r7
 800f8ec:	3101      	adds	r1, #1
 800f8ee:	f7ff ff79 	bl	800f7e4 <_Balloc>
 800f8f2:	4680      	mov	r8, r0
 800f8f4:	b928      	cbnz	r0, 800f902 <__multadd+0x5a>
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	4b0c      	ldr	r3, [pc, #48]	@ (800f92c <__multadd+0x84>)
 800f8fa:	480d      	ldr	r0, [pc, #52]	@ (800f930 <__multadd+0x88>)
 800f8fc:	21ba      	movs	r1, #186	@ 0xba
 800f8fe:	f000 fc81 	bl	8010204 <__assert_func>
 800f902:	6922      	ldr	r2, [r4, #16]
 800f904:	3202      	adds	r2, #2
 800f906:	f104 010c 	add.w	r1, r4, #12
 800f90a:	0092      	lsls	r2, r2, #2
 800f90c:	300c      	adds	r0, #12
 800f90e:	f7fe faa5 	bl	800de5c <memcpy>
 800f912:	4621      	mov	r1, r4
 800f914:	4638      	mov	r0, r7
 800f916:	f7ff ffa5 	bl	800f864 <_Bfree>
 800f91a:	4644      	mov	r4, r8
 800f91c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f920:	3501      	adds	r5, #1
 800f922:	615e      	str	r6, [r3, #20]
 800f924:	6125      	str	r5, [r4, #16]
 800f926:	4620      	mov	r0, r4
 800f928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f92c:	0801143b 	.word	0x0801143b
 800f930:	080114bd 	.word	0x080114bd

0800f934 <__s2b>:
 800f934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f938:	460c      	mov	r4, r1
 800f93a:	4615      	mov	r5, r2
 800f93c:	461f      	mov	r7, r3
 800f93e:	2209      	movs	r2, #9
 800f940:	3308      	adds	r3, #8
 800f942:	4606      	mov	r6, r0
 800f944:	fb93 f3f2 	sdiv	r3, r3, r2
 800f948:	2100      	movs	r1, #0
 800f94a:	2201      	movs	r2, #1
 800f94c:	429a      	cmp	r2, r3
 800f94e:	db09      	blt.n	800f964 <__s2b+0x30>
 800f950:	4630      	mov	r0, r6
 800f952:	f7ff ff47 	bl	800f7e4 <_Balloc>
 800f956:	b940      	cbnz	r0, 800f96a <__s2b+0x36>
 800f958:	4602      	mov	r2, r0
 800f95a:	4b19      	ldr	r3, [pc, #100]	@ (800f9c0 <__s2b+0x8c>)
 800f95c:	4819      	ldr	r0, [pc, #100]	@ (800f9c4 <__s2b+0x90>)
 800f95e:	21d3      	movs	r1, #211	@ 0xd3
 800f960:	f000 fc50 	bl	8010204 <__assert_func>
 800f964:	0052      	lsls	r2, r2, #1
 800f966:	3101      	adds	r1, #1
 800f968:	e7f0      	b.n	800f94c <__s2b+0x18>
 800f96a:	9b08      	ldr	r3, [sp, #32]
 800f96c:	6143      	str	r3, [r0, #20]
 800f96e:	2d09      	cmp	r5, #9
 800f970:	f04f 0301 	mov.w	r3, #1
 800f974:	6103      	str	r3, [r0, #16]
 800f976:	dd16      	ble.n	800f9a6 <__s2b+0x72>
 800f978:	f104 0909 	add.w	r9, r4, #9
 800f97c:	46c8      	mov	r8, r9
 800f97e:	442c      	add	r4, r5
 800f980:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f984:	4601      	mov	r1, r0
 800f986:	3b30      	subs	r3, #48	@ 0x30
 800f988:	220a      	movs	r2, #10
 800f98a:	4630      	mov	r0, r6
 800f98c:	f7ff ff8c 	bl	800f8a8 <__multadd>
 800f990:	45a0      	cmp	r8, r4
 800f992:	d1f5      	bne.n	800f980 <__s2b+0x4c>
 800f994:	f1a5 0408 	sub.w	r4, r5, #8
 800f998:	444c      	add	r4, r9
 800f99a:	1b2d      	subs	r5, r5, r4
 800f99c:	1963      	adds	r3, r4, r5
 800f99e:	42bb      	cmp	r3, r7
 800f9a0:	db04      	blt.n	800f9ac <__s2b+0x78>
 800f9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9a6:	340a      	adds	r4, #10
 800f9a8:	2509      	movs	r5, #9
 800f9aa:	e7f6      	b.n	800f99a <__s2b+0x66>
 800f9ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f9b0:	4601      	mov	r1, r0
 800f9b2:	3b30      	subs	r3, #48	@ 0x30
 800f9b4:	220a      	movs	r2, #10
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	f7ff ff76 	bl	800f8a8 <__multadd>
 800f9bc:	e7ee      	b.n	800f99c <__s2b+0x68>
 800f9be:	bf00      	nop
 800f9c0:	0801143b 	.word	0x0801143b
 800f9c4:	080114bd 	.word	0x080114bd

0800f9c8 <__hi0bits>:
 800f9c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	bf36      	itet	cc
 800f9d0:	0403      	lslcc	r3, r0, #16
 800f9d2:	2000      	movcs	r0, #0
 800f9d4:	2010      	movcc	r0, #16
 800f9d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f9da:	bf3c      	itt	cc
 800f9dc:	021b      	lslcc	r3, r3, #8
 800f9de:	3008      	addcc	r0, #8
 800f9e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f9e4:	bf3c      	itt	cc
 800f9e6:	011b      	lslcc	r3, r3, #4
 800f9e8:	3004      	addcc	r0, #4
 800f9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9ee:	bf3c      	itt	cc
 800f9f0:	009b      	lslcc	r3, r3, #2
 800f9f2:	3002      	addcc	r0, #2
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	db05      	blt.n	800fa04 <__hi0bits+0x3c>
 800f9f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f9fc:	f100 0001 	add.w	r0, r0, #1
 800fa00:	bf08      	it	eq
 800fa02:	2020      	moveq	r0, #32
 800fa04:	4770      	bx	lr

0800fa06 <__lo0bits>:
 800fa06:	6803      	ldr	r3, [r0, #0]
 800fa08:	4602      	mov	r2, r0
 800fa0a:	f013 0007 	ands.w	r0, r3, #7
 800fa0e:	d00b      	beq.n	800fa28 <__lo0bits+0x22>
 800fa10:	07d9      	lsls	r1, r3, #31
 800fa12:	d421      	bmi.n	800fa58 <__lo0bits+0x52>
 800fa14:	0798      	lsls	r0, r3, #30
 800fa16:	bf49      	itett	mi
 800fa18:	085b      	lsrmi	r3, r3, #1
 800fa1a:	089b      	lsrpl	r3, r3, #2
 800fa1c:	2001      	movmi	r0, #1
 800fa1e:	6013      	strmi	r3, [r2, #0]
 800fa20:	bf5c      	itt	pl
 800fa22:	6013      	strpl	r3, [r2, #0]
 800fa24:	2002      	movpl	r0, #2
 800fa26:	4770      	bx	lr
 800fa28:	b299      	uxth	r1, r3
 800fa2a:	b909      	cbnz	r1, 800fa30 <__lo0bits+0x2a>
 800fa2c:	0c1b      	lsrs	r3, r3, #16
 800fa2e:	2010      	movs	r0, #16
 800fa30:	b2d9      	uxtb	r1, r3
 800fa32:	b909      	cbnz	r1, 800fa38 <__lo0bits+0x32>
 800fa34:	3008      	adds	r0, #8
 800fa36:	0a1b      	lsrs	r3, r3, #8
 800fa38:	0719      	lsls	r1, r3, #28
 800fa3a:	bf04      	itt	eq
 800fa3c:	091b      	lsreq	r3, r3, #4
 800fa3e:	3004      	addeq	r0, #4
 800fa40:	0799      	lsls	r1, r3, #30
 800fa42:	bf04      	itt	eq
 800fa44:	089b      	lsreq	r3, r3, #2
 800fa46:	3002      	addeq	r0, #2
 800fa48:	07d9      	lsls	r1, r3, #31
 800fa4a:	d403      	bmi.n	800fa54 <__lo0bits+0x4e>
 800fa4c:	085b      	lsrs	r3, r3, #1
 800fa4e:	f100 0001 	add.w	r0, r0, #1
 800fa52:	d003      	beq.n	800fa5c <__lo0bits+0x56>
 800fa54:	6013      	str	r3, [r2, #0]
 800fa56:	4770      	bx	lr
 800fa58:	2000      	movs	r0, #0
 800fa5a:	4770      	bx	lr
 800fa5c:	2020      	movs	r0, #32
 800fa5e:	4770      	bx	lr

0800fa60 <__i2b>:
 800fa60:	b510      	push	{r4, lr}
 800fa62:	460c      	mov	r4, r1
 800fa64:	2101      	movs	r1, #1
 800fa66:	f7ff febd 	bl	800f7e4 <_Balloc>
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	b928      	cbnz	r0, 800fa7a <__i2b+0x1a>
 800fa6e:	4b05      	ldr	r3, [pc, #20]	@ (800fa84 <__i2b+0x24>)
 800fa70:	4805      	ldr	r0, [pc, #20]	@ (800fa88 <__i2b+0x28>)
 800fa72:	f240 1145 	movw	r1, #325	@ 0x145
 800fa76:	f000 fbc5 	bl	8010204 <__assert_func>
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	6144      	str	r4, [r0, #20]
 800fa7e:	6103      	str	r3, [r0, #16]
 800fa80:	bd10      	pop	{r4, pc}
 800fa82:	bf00      	nop
 800fa84:	0801143b 	.word	0x0801143b
 800fa88:	080114bd 	.word	0x080114bd

0800fa8c <__multiply>:
 800fa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa90:	4617      	mov	r7, r2
 800fa92:	690a      	ldr	r2, [r1, #16]
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	bfa8      	it	ge
 800fa9a:	463b      	movge	r3, r7
 800fa9c:	4689      	mov	r9, r1
 800fa9e:	bfa4      	itt	ge
 800faa0:	460f      	movge	r7, r1
 800faa2:	4699      	movge	r9, r3
 800faa4:	693d      	ldr	r5, [r7, #16]
 800faa6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	6879      	ldr	r1, [r7, #4]
 800faae:	eb05 060a 	add.w	r6, r5, sl
 800fab2:	42b3      	cmp	r3, r6
 800fab4:	b085      	sub	sp, #20
 800fab6:	bfb8      	it	lt
 800fab8:	3101      	addlt	r1, #1
 800faba:	f7ff fe93 	bl	800f7e4 <_Balloc>
 800fabe:	b930      	cbnz	r0, 800face <__multiply+0x42>
 800fac0:	4602      	mov	r2, r0
 800fac2:	4b41      	ldr	r3, [pc, #260]	@ (800fbc8 <__multiply+0x13c>)
 800fac4:	4841      	ldr	r0, [pc, #260]	@ (800fbcc <__multiply+0x140>)
 800fac6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800faca:	f000 fb9b 	bl	8010204 <__assert_func>
 800face:	f100 0414 	add.w	r4, r0, #20
 800fad2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800fad6:	4623      	mov	r3, r4
 800fad8:	2200      	movs	r2, #0
 800fada:	4573      	cmp	r3, lr
 800fadc:	d320      	bcc.n	800fb20 <__multiply+0x94>
 800fade:	f107 0814 	add.w	r8, r7, #20
 800fae2:	f109 0114 	add.w	r1, r9, #20
 800fae6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800faea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800faee:	9302      	str	r3, [sp, #8]
 800faf0:	1beb      	subs	r3, r5, r7
 800faf2:	3b15      	subs	r3, #21
 800faf4:	f023 0303 	bic.w	r3, r3, #3
 800faf8:	3304      	adds	r3, #4
 800fafa:	3715      	adds	r7, #21
 800fafc:	42bd      	cmp	r5, r7
 800fafe:	bf38      	it	cc
 800fb00:	2304      	movcc	r3, #4
 800fb02:	9301      	str	r3, [sp, #4]
 800fb04:	9b02      	ldr	r3, [sp, #8]
 800fb06:	9103      	str	r1, [sp, #12]
 800fb08:	428b      	cmp	r3, r1
 800fb0a:	d80c      	bhi.n	800fb26 <__multiply+0x9a>
 800fb0c:	2e00      	cmp	r6, #0
 800fb0e:	dd03      	ble.n	800fb18 <__multiply+0x8c>
 800fb10:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d055      	beq.n	800fbc4 <__multiply+0x138>
 800fb18:	6106      	str	r6, [r0, #16]
 800fb1a:	b005      	add	sp, #20
 800fb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb20:	f843 2b04 	str.w	r2, [r3], #4
 800fb24:	e7d9      	b.n	800fada <__multiply+0x4e>
 800fb26:	f8b1 a000 	ldrh.w	sl, [r1]
 800fb2a:	f1ba 0f00 	cmp.w	sl, #0
 800fb2e:	d01f      	beq.n	800fb70 <__multiply+0xe4>
 800fb30:	46c4      	mov	ip, r8
 800fb32:	46a1      	mov	r9, r4
 800fb34:	2700      	movs	r7, #0
 800fb36:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fb3a:	f8d9 3000 	ldr.w	r3, [r9]
 800fb3e:	fa1f fb82 	uxth.w	fp, r2
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	fb0a 330b 	mla	r3, sl, fp, r3
 800fb48:	443b      	add	r3, r7
 800fb4a:	f8d9 7000 	ldr.w	r7, [r9]
 800fb4e:	0c12      	lsrs	r2, r2, #16
 800fb50:	0c3f      	lsrs	r7, r7, #16
 800fb52:	fb0a 7202 	mla	r2, sl, r2, r7
 800fb56:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb60:	4565      	cmp	r5, ip
 800fb62:	f849 3b04 	str.w	r3, [r9], #4
 800fb66:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fb6a:	d8e4      	bhi.n	800fb36 <__multiply+0xaa>
 800fb6c:	9b01      	ldr	r3, [sp, #4]
 800fb6e:	50e7      	str	r7, [r4, r3]
 800fb70:	9b03      	ldr	r3, [sp, #12]
 800fb72:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fb76:	3104      	adds	r1, #4
 800fb78:	f1b9 0f00 	cmp.w	r9, #0
 800fb7c:	d020      	beq.n	800fbc0 <__multiply+0x134>
 800fb7e:	6823      	ldr	r3, [r4, #0]
 800fb80:	4647      	mov	r7, r8
 800fb82:	46a4      	mov	ip, r4
 800fb84:	f04f 0a00 	mov.w	sl, #0
 800fb88:	f8b7 b000 	ldrh.w	fp, [r7]
 800fb8c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fb90:	fb09 220b 	mla	r2, r9, fp, r2
 800fb94:	4452      	add	r2, sl
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb9c:	f84c 3b04 	str.w	r3, [ip], #4
 800fba0:	f857 3b04 	ldr.w	r3, [r7], #4
 800fba4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fba8:	f8bc 3000 	ldrh.w	r3, [ip]
 800fbac:	fb09 330a 	mla	r3, r9, sl, r3
 800fbb0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fbb4:	42bd      	cmp	r5, r7
 800fbb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbba:	d8e5      	bhi.n	800fb88 <__multiply+0xfc>
 800fbbc:	9a01      	ldr	r2, [sp, #4]
 800fbbe:	50a3      	str	r3, [r4, r2]
 800fbc0:	3404      	adds	r4, #4
 800fbc2:	e79f      	b.n	800fb04 <__multiply+0x78>
 800fbc4:	3e01      	subs	r6, #1
 800fbc6:	e7a1      	b.n	800fb0c <__multiply+0x80>
 800fbc8:	0801143b 	.word	0x0801143b
 800fbcc:	080114bd 	.word	0x080114bd

0800fbd0 <__pow5mult>:
 800fbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbd4:	4615      	mov	r5, r2
 800fbd6:	f012 0203 	ands.w	r2, r2, #3
 800fbda:	4607      	mov	r7, r0
 800fbdc:	460e      	mov	r6, r1
 800fbde:	d007      	beq.n	800fbf0 <__pow5mult+0x20>
 800fbe0:	4c25      	ldr	r4, [pc, #148]	@ (800fc78 <__pow5mult+0xa8>)
 800fbe2:	3a01      	subs	r2, #1
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fbea:	f7ff fe5d 	bl	800f8a8 <__multadd>
 800fbee:	4606      	mov	r6, r0
 800fbf0:	10ad      	asrs	r5, r5, #2
 800fbf2:	d03d      	beq.n	800fc70 <__pow5mult+0xa0>
 800fbf4:	69fc      	ldr	r4, [r7, #28]
 800fbf6:	b97c      	cbnz	r4, 800fc18 <__pow5mult+0x48>
 800fbf8:	2010      	movs	r0, #16
 800fbfa:	f7ff fc7f 	bl	800f4fc <malloc>
 800fbfe:	4602      	mov	r2, r0
 800fc00:	61f8      	str	r0, [r7, #28]
 800fc02:	b928      	cbnz	r0, 800fc10 <__pow5mult+0x40>
 800fc04:	4b1d      	ldr	r3, [pc, #116]	@ (800fc7c <__pow5mult+0xac>)
 800fc06:	481e      	ldr	r0, [pc, #120]	@ (800fc80 <__pow5mult+0xb0>)
 800fc08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fc0c:	f000 fafa 	bl	8010204 <__assert_func>
 800fc10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc14:	6004      	str	r4, [r0, #0]
 800fc16:	60c4      	str	r4, [r0, #12]
 800fc18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fc1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc20:	b94c      	cbnz	r4, 800fc36 <__pow5mult+0x66>
 800fc22:	f240 2171 	movw	r1, #625	@ 0x271
 800fc26:	4638      	mov	r0, r7
 800fc28:	f7ff ff1a 	bl	800fa60 <__i2b>
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc32:	4604      	mov	r4, r0
 800fc34:	6003      	str	r3, [r0, #0]
 800fc36:	f04f 0900 	mov.w	r9, #0
 800fc3a:	07eb      	lsls	r3, r5, #31
 800fc3c:	d50a      	bpl.n	800fc54 <__pow5mult+0x84>
 800fc3e:	4631      	mov	r1, r6
 800fc40:	4622      	mov	r2, r4
 800fc42:	4638      	mov	r0, r7
 800fc44:	f7ff ff22 	bl	800fa8c <__multiply>
 800fc48:	4631      	mov	r1, r6
 800fc4a:	4680      	mov	r8, r0
 800fc4c:	4638      	mov	r0, r7
 800fc4e:	f7ff fe09 	bl	800f864 <_Bfree>
 800fc52:	4646      	mov	r6, r8
 800fc54:	106d      	asrs	r5, r5, #1
 800fc56:	d00b      	beq.n	800fc70 <__pow5mult+0xa0>
 800fc58:	6820      	ldr	r0, [r4, #0]
 800fc5a:	b938      	cbnz	r0, 800fc6c <__pow5mult+0x9c>
 800fc5c:	4622      	mov	r2, r4
 800fc5e:	4621      	mov	r1, r4
 800fc60:	4638      	mov	r0, r7
 800fc62:	f7ff ff13 	bl	800fa8c <__multiply>
 800fc66:	6020      	str	r0, [r4, #0]
 800fc68:	f8c0 9000 	str.w	r9, [r0]
 800fc6c:	4604      	mov	r4, r0
 800fc6e:	e7e4      	b.n	800fc3a <__pow5mult+0x6a>
 800fc70:	4630      	mov	r0, r6
 800fc72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc76:	bf00      	nop
 800fc78:	080116ac 	.word	0x080116ac
 800fc7c:	080113cc 	.word	0x080113cc
 800fc80:	080114bd 	.word	0x080114bd

0800fc84 <__lshift>:
 800fc84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc88:	460c      	mov	r4, r1
 800fc8a:	6849      	ldr	r1, [r1, #4]
 800fc8c:	6923      	ldr	r3, [r4, #16]
 800fc8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc92:	68a3      	ldr	r3, [r4, #8]
 800fc94:	4607      	mov	r7, r0
 800fc96:	4691      	mov	r9, r2
 800fc98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc9c:	f108 0601 	add.w	r6, r8, #1
 800fca0:	42b3      	cmp	r3, r6
 800fca2:	db0b      	blt.n	800fcbc <__lshift+0x38>
 800fca4:	4638      	mov	r0, r7
 800fca6:	f7ff fd9d 	bl	800f7e4 <_Balloc>
 800fcaa:	4605      	mov	r5, r0
 800fcac:	b948      	cbnz	r0, 800fcc2 <__lshift+0x3e>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	4b28      	ldr	r3, [pc, #160]	@ (800fd54 <__lshift+0xd0>)
 800fcb2:	4829      	ldr	r0, [pc, #164]	@ (800fd58 <__lshift+0xd4>)
 800fcb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fcb8:	f000 faa4 	bl	8010204 <__assert_func>
 800fcbc:	3101      	adds	r1, #1
 800fcbe:	005b      	lsls	r3, r3, #1
 800fcc0:	e7ee      	b.n	800fca0 <__lshift+0x1c>
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	f100 0114 	add.w	r1, r0, #20
 800fcc8:	f100 0210 	add.w	r2, r0, #16
 800fccc:	4618      	mov	r0, r3
 800fcce:	4553      	cmp	r3, sl
 800fcd0:	db33      	blt.n	800fd3a <__lshift+0xb6>
 800fcd2:	6920      	ldr	r0, [r4, #16]
 800fcd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fcd8:	f104 0314 	add.w	r3, r4, #20
 800fcdc:	f019 091f 	ands.w	r9, r9, #31
 800fce0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fce4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fce8:	d02b      	beq.n	800fd42 <__lshift+0xbe>
 800fcea:	f1c9 0e20 	rsb	lr, r9, #32
 800fcee:	468a      	mov	sl, r1
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	6818      	ldr	r0, [r3, #0]
 800fcf4:	fa00 f009 	lsl.w	r0, r0, r9
 800fcf8:	4310      	orrs	r0, r2
 800fcfa:	f84a 0b04 	str.w	r0, [sl], #4
 800fcfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd02:	459c      	cmp	ip, r3
 800fd04:	fa22 f20e 	lsr.w	r2, r2, lr
 800fd08:	d8f3      	bhi.n	800fcf2 <__lshift+0x6e>
 800fd0a:	ebac 0304 	sub.w	r3, ip, r4
 800fd0e:	3b15      	subs	r3, #21
 800fd10:	f023 0303 	bic.w	r3, r3, #3
 800fd14:	3304      	adds	r3, #4
 800fd16:	f104 0015 	add.w	r0, r4, #21
 800fd1a:	4560      	cmp	r0, ip
 800fd1c:	bf88      	it	hi
 800fd1e:	2304      	movhi	r3, #4
 800fd20:	50ca      	str	r2, [r1, r3]
 800fd22:	b10a      	cbz	r2, 800fd28 <__lshift+0xa4>
 800fd24:	f108 0602 	add.w	r6, r8, #2
 800fd28:	3e01      	subs	r6, #1
 800fd2a:	4638      	mov	r0, r7
 800fd2c:	612e      	str	r6, [r5, #16]
 800fd2e:	4621      	mov	r1, r4
 800fd30:	f7ff fd98 	bl	800f864 <_Bfree>
 800fd34:	4628      	mov	r0, r5
 800fd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd3e:	3301      	adds	r3, #1
 800fd40:	e7c5      	b.n	800fcce <__lshift+0x4a>
 800fd42:	3904      	subs	r1, #4
 800fd44:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd48:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd4c:	459c      	cmp	ip, r3
 800fd4e:	d8f9      	bhi.n	800fd44 <__lshift+0xc0>
 800fd50:	e7ea      	b.n	800fd28 <__lshift+0xa4>
 800fd52:	bf00      	nop
 800fd54:	0801143b 	.word	0x0801143b
 800fd58:	080114bd 	.word	0x080114bd

0800fd5c <__mcmp>:
 800fd5c:	690a      	ldr	r2, [r1, #16]
 800fd5e:	4603      	mov	r3, r0
 800fd60:	6900      	ldr	r0, [r0, #16]
 800fd62:	1a80      	subs	r0, r0, r2
 800fd64:	b530      	push	{r4, r5, lr}
 800fd66:	d10e      	bne.n	800fd86 <__mcmp+0x2a>
 800fd68:	3314      	adds	r3, #20
 800fd6a:	3114      	adds	r1, #20
 800fd6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fd70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fd74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fd78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fd7c:	4295      	cmp	r5, r2
 800fd7e:	d003      	beq.n	800fd88 <__mcmp+0x2c>
 800fd80:	d205      	bcs.n	800fd8e <__mcmp+0x32>
 800fd82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd86:	bd30      	pop	{r4, r5, pc}
 800fd88:	42a3      	cmp	r3, r4
 800fd8a:	d3f3      	bcc.n	800fd74 <__mcmp+0x18>
 800fd8c:	e7fb      	b.n	800fd86 <__mcmp+0x2a>
 800fd8e:	2001      	movs	r0, #1
 800fd90:	e7f9      	b.n	800fd86 <__mcmp+0x2a>
	...

0800fd94 <__mdiff>:
 800fd94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd98:	4689      	mov	r9, r1
 800fd9a:	4606      	mov	r6, r0
 800fd9c:	4611      	mov	r1, r2
 800fd9e:	4648      	mov	r0, r9
 800fda0:	4614      	mov	r4, r2
 800fda2:	f7ff ffdb 	bl	800fd5c <__mcmp>
 800fda6:	1e05      	subs	r5, r0, #0
 800fda8:	d112      	bne.n	800fdd0 <__mdiff+0x3c>
 800fdaa:	4629      	mov	r1, r5
 800fdac:	4630      	mov	r0, r6
 800fdae:	f7ff fd19 	bl	800f7e4 <_Balloc>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	b928      	cbnz	r0, 800fdc2 <__mdiff+0x2e>
 800fdb6:	4b3f      	ldr	r3, [pc, #252]	@ (800feb4 <__mdiff+0x120>)
 800fdb8:	f240 2137 	movw	r1, #567	@ 0x237
 800fdbc:	483e      	ldr	r0, [pc, #248]	@ (800feb8 <__mdiff+0x124>)
 800fdbe:	f000 fa21 	bl	8010204 <__assert_func>
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fdc8:	4610      	mov	r0, r2
 800fdca:	b003      	add	sp, #12
 800fdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdd0:	bfbc      	itt	lt
 800fdd2:	464b      	movlt	r3, r9
 800fdd4:	46a1      	movlt	r9, r4
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fddc:	bfba      	itte	lt
 800fdde:	461c      	movlt	r4, r3
 800fde0:	2501      	movlt	r5, #1
 800fde2:	2500      	movge	r5, #0
 800fde4:	f7ff fcfe 	bl	800f7e4 <_Balloc>
 800fde8:	4602      	mov	r2, r0
 800fdea:	b918      	cbnz	r0, 800fdf4 <__mdiff+0x60>
 800fdec:	4b31      	ldr	r3, [pc, #196]	@ (800feb4 <__mdiff+0x120>)
 800fdee:	f240 2145 	movw	r1, #581	@ 0x245
 800fdf2:	e7e3      	b.n	800fdbc <__mdiff+0x28>
 800fdf4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fdf8:	6926      	ldr	r6, [r4, #16]
 800fdfa:	60c5      	str	r5, [r0, #12]
 800fdfc:	f109 0310 	add.w	r3, r9, #16
 800fe00:	f109 0514 	add.w	r5, r9, #20
 800fe04:	f104 0e14 	add.w	lr, r4, #20
 800fe08:	f100 0b14 	add.w	fp, r0, #20
 800fe0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fe10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fe14:	9301      	str	r3, [sp, #4]
 800fe16:	46d9      	mov	r9, fp
 800fe18:	f04f 0c00 	mov.w	ip, #0
 800fe1c:	9b01      	ldr	r3, [sp, #4]
 800fe1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fe22:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fe26:	9301      	str	r3, [sp, #4]
 800fe28:	fa1f f38a 	uxth.w	r3, sl
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	b283      	uxth	r3, r0
 800fe30:	1acb      	subs	r3, r1, r3
 800fe32:	0c00      	lsrs	r0, r0, #16
 800fe34:	4463      	add	r3, ip
 800fe36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fe3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fe44:	4576      	cmp	r6, lr
 800fe46:	f849 3b04 	str.w	r3, [r9], #4
 800fe4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fe4e:	d8e5      	bhi.n	800fe1c <__mdiff+0x88>
 800fe50:	1b33      	subs	r3, r6, r4
 800fe52:	3b15      	subs	r3, #21
 800fe54:	f023 0303 	bic.w	r3, r3, #3
 800fe58:	3415      	adds	r4, #21
 800fe5a:	3304      	adds	r3, #4
 800fe5c:	42a6      	cmp	r6, r4
 800fe5e:	bf38      	it	cc
 800fe60:	2304      	movcc	r3, #4
 800fe62:	441d      	add	r5, r3
 800fe64:	445b      	add	r3, fp
 800fe66:	461e      	mov	r6, r3
 800fe68:	462c      	mov	r4, r5
 800fe6a:	4544      	cmp	r4, r8
 800fe6c:	d30e      	bcc.n	800fe8c <__mdiff+0xf8>
 800fe6e:	f108 0103 	add.w	r1, r8, #3
 800fe72:	1b49      	subs	r1, r1, r5
 800fe74:	f021 0103 	bic.w	r1, r1, #3
 800fe78:	3d03      	subs	r5, #3
 800fe7a:	45a8      	cmp	r8, r5
 800fe7c:	bf38      	it	cc
 800fe7e:	2100      	movcc	r1, #0
 800fe80:	440b      	add	r3, r1
 800fe82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe86:	b191      	cbz	r1, 800feae <__mdiff+0x11a>
 800fe88:	6117      	str	r7, [r2, #16]
 800fe8a:	e79d      	b.n	800fdc8 <__mdiff+0x34>
 800fe8c:	f854 1b04 	ldr.w	r1, [r4], #4
 800fe90:	46e6      	mov	lr, ip
 800fe92:	0c08      	lsrs	r0, r1, #16
 800fe94:	fa1c fc81 	uxtah	ip, ip, r1
 800fe98:	4471      	add	r1, lr
 800fe9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fe9e:	b289      	uxth	r1, r1
 800fea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fea4:	f846 1b04 	str.w	r1, [r6], #4
 800fea8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800feac:	e7dd      	b.n	800fe6a <__mdiff+0xd6>
 800feae:	3f01      	subs	r7, #1
 800feb0:	e7e7      	b.n	800fe82 <__mdiff+0xee>
 800feb2:	bf00      	nop
 800feb4:	0801143b 	.word	0x0801143b
 800feb8:	080114bd 	.word	0x080114bd

0800febc <__ulp>:
 800febc:	b082      	sub	sp, #8
 800febe:	ed8d 0b00 	vstr	d0, [sp]
 800fec2:	9a01      	ldr	r2, [sp, #4]
 800fec4:	4b0f      	ldr	r3, [pc, #60]	@ (800ff04 <__ulp+0x48>)
 800fec6:	4013      	ands	r3, r2
 800fec8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fecc:	2b00      	cmp	r3, #0
 800fece:	dc08      	bgt.n	800fee2 <__ulp+0x26>
 800fed0:	425b      	negs	r3, r3
 800fed2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fed6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800feda:	da04      	bge.n	800fee6 <__ulp+0x2a>
 800fedc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fee0:	4113      	asrs	r3, r2
 800fee2:	2200      	movs	r2, #0
 800fee4:	e008      	b.n	800fef8 <__ulp+0x3c>
 800fee6:	f1a2 0314 	sub.w	r3, r2, #20
 800feea:	2b1e      	cmp	r3, #30
 800feec:	bfda      	itte	le
 800feee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fef2:	40da      	lsrle	r2, r3
 800fef4:	2201      	movgt	r2, #1
 800fef6:	2300      	movs	r3, #0
 800fef8:	4619      	mov	r1, r3
 800fefa:	4610      	mov	r0, r2
 800fefc:	ec41 0b10 	vmov	d0, r0, r1
 800ff00:	b002      	add	sp, #8
 800ff02:	4770      	bx	lr
 800ff04:	7ff00000 	.word	0x7ff00000

0800ff08 <__b2d>:
 800ff08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff0c:	6906      	ldr	r6, [r0, #16]
 800ff0e:	f100 0814 	add.w	r8, r0, #20
 800ff12:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ff16:	1f37      	subs	r7, r6, #4
 800ff18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ff1c:	4610      	mov	r0, r2
 800ff1e:	f7ff fd53 	bl	800f9c8 <__hi0bits>
 800ff22:	f1c0 0320 	rsb	r3, r0, #32
 800ff26:	280a      	cmp	r0, #10
 800ff28:	600b      	str	r3, [r1, #0]
 800ff2a:	491b      	ldr	r1, [pc, #108]	@ (800ff98 <__b2d+0x90>)
 800ff2c:	dc15      	bgt.n	800ff5a <__b2d+0x52>
 800ff2e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ff32:	fa22 f30c 	lsr.w	r3, r2, ip
 800ff36:	45b8      	cmp	r8, r7
 800ff38:	ea43 0501 	orr.w	r5, r3, r1
 800ff3c:	bf34      	ite	cc
 800ff3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ff42:	2300      	movcs	r3, #0
 800ff44:	3015      	adds	r0, #21
 800ff46:	fa02 f000 	lsl.w	r0, r2, r0
 800ff4a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ff4e:	4303      	orrs	r3, r0
 800ff50:	461c      	mov	r4, r3
 800ff52:	ec45 4b10 	vmov	d0, r4, r5
 800ff56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff5a:	45b8      	cmp	r8, r7
 800ff5c:	bf3a      	itte	cc
 800ff5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ff62:	f1a6 0708 	subcc.w	r7, r6, #8
 800ff66:	2300      	movcs	r3, #0
 800ff68:	380b      	subs	r0, #11
 800ff6a:	d012      	beq.n	800ff92 <__b2d+0x8a>
 800ff6c:	f1c0 0120 	rsb	r1, r0, #32
 800ff70:	fa23 f401 	lsr.w	r4, r3, r1
 800ff74:	4082      	lsls	r2, r0
 800ff76:	4322      	orrs	r2, r4
 800ff78:	4547      	cmp	r7, r8
 800ff7a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ff7e:	bf8c      	ite	hi
 800ff80:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ff84:	2200      	movls	r2, #0
 800ff86:	4083      	lsls	r3, r0
 800ff88:	40ca      	lsrs	r2, r1
 800ff8a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	e7de      	b.n	800ff50 <__b2d+0x48>
 800ff92:	ea42 0501 	orr.w	r5, r2, r1
 800ff96:	e7db      	b.n	800ff50 <__b2d+0x48>
 800ff98:	3ff00000 	.word	0x3ff00000

0800ff9c <__d2b>:
 800ff9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ffa0:	460f      	mov	r7, r1
 800ffa2:	2101      	movs	r1, #1
 800ffa4:	ec59 8b10 	vmov	r8, r9, d0
 800ffa8:	4616      	mov	r6, r2
 800ffaa:	f7ff fc1b 	bl	800f7e4 <_Balloc>
 800ffae:	4604      	mov	r4, r0
 800ffb0:	b930      	cbnz	r0, 800ffc0 <__d2b+0x24>
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	4b23      	ldr	r3, [pc, #140]	@ (8010044 <__d2b+0xa8>)
 800ffb6:	4824      	ldr	r0, [pc, #144]	@ (8010048 <__d2b+0xac>)
 800ffb8:	f240 310f 	movw	r1, #783	@ 0x30f
 800ffbc:	f000 f922 	bl	8010204 <__assert_func>
 800ffc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ffc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ffc8:	b10d      	cbz	r5, 800ffce <__d2b+0x32>
 800ffca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ffce:	9301      	str	r3, [sp, #4]
 800ffd0:	f1b8 0300 	subs.w	r3, r8, #0
 800ffd4:	d023      	beq.n	801001e <__d2b+0x82>
 800ffd6:	4668      	mov	r0, sp
 800ffd8:	9300      	str	r3, [sp, #0]
 800ffda:	f7ff fd14 	bl	800fa06 <__lo0bits>
 800ffde:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ffe2:	b1d0      	cbz	r0, 801001a <__d2b+0x7e>
 800ffe4:	f1c0 0320 	rsb	r3, r0, #32
 800ffe8:	fa02 f303 	lsl.w	r3, r2, r3
 800ffec:	430b      	orrs	r3, r1
 800ffee:	40c2      	lsrs	r2, r0
 800fff0:	6163      	str	r3, [r4, #20]
 800fff2:	9201      	str	r2, [sp, #4]
 800fff4:	9b01      	ldr	r3, [sp, #4]
 800fff6:	61a3      	str	r3, [r4, #24]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	bf0c      	ite	eq
 800fffc:	2201      	moveq	r2, #1
 800fffe:	2202      	movne	r2, #2
 8010000:	6122      	str	r2, [r4, #16]
 8010002:	b1a5      	cbz	r5, 801002e <__d2b+0x92>
 8010004:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010008:	4405      	add	r5, r0
 801000a:	603d      	str	r5, [r7, #0]
 801000c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010010:	6030      	str	r0, [r6, #0]
 8010012:	4620      	mov	r0, r4
 8010014:	b003      	add	sp, #12
 8010016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801001a:	6161      	str	r1, [r4, #20]
 801001c:	e7ea      	b.n	800fff4 <__d2b+0x58>
 801001e:	a801      	add	r0, sp, #4
 8010020:	f7ff fcf1 	bl	800fa06 <__lo0bits>
 8010024:	9b01      	ldr	r3, [sp, #4]
 8010026:	6163      	str	r3, [r4, #20]
 8010028:	3020      	adds	r0, #32
 801002a:	2201      	movs	r2, #1
 801002c:	e7e8      	b.n	8010000 <__d2b+0x64>
 801002e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010032:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010036:	6038      	str	r0, [r7, #0]
 8010038:	6918      	ldr	r0, [r3, #16]
 801003a:	f7ff fcc5 	bl	800f9c8 <__hi0bits>
 801003e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010042:	e7e5      	b.n	8010010 <__d2b+0x74>
 8010044:	0801143b 	.word	0x0801143b
 8010048:	080114bd 	.word	0x080114bd

0801004c <__ratio>:
 801004c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010050:	b085      	sub	sp, #20
 8010052:	e9cd 1000 	strd	r1, r0, [sp]
 8010056:	a902      	add	r1, sp, #8
 8010058:	f7ff ff56 	bl	800ff08 <__b2d>
 801005c:	9800      	ldr	r0, [sp, #0]
 801005e:	a903      	add	r1, sp, #12
 8010060:	ec55 4b10 	vmov	r4, r5, d0
 8010064:	f7ff ff50 	bl	800ff08 <__b2d>
 8010068:	9b01      	ldr	r3, [sp, #4]
 801006a:	6919      	ldr	r1, [r3, #16]
 801006c:	9b00      	ldr	r3, [sp, #0]
 801006e:	691b      	ldr	r3, [r3, #16]
 8010070:	1ac9      	subs	r1, r1, r3
 8010072:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010076:	1a9b      	subs	r3, r3, r2
 8010078:	ec5b ab10 	vmov	sl, fp, d0
 801007c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010080:	2b00      	cmp	r3, #0
 8010082:	bfce      	itee	gt
 8010084:	462a      	movgt	r2, r5
 8010086:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801008a:	465a      	movle	r2, fp
 801008c:	462f      	mov	r7, r5
 801008e:	46d9      	mov	r9, fp
 8010090:	bfcc      	ite	gt
 8010092:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010096:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801009a:	464b      	mov	r3, r9
 801009c:	4652      	mov	r2, sl
 801009e:	4620      	mov	r0, r4
 80100a0:	4639      	mov	r1, r7
 80100a2:	f7f0 fc03 	bl	80008ac <__aeabi_ddiv>
 80100a6:	ec41 0b10 	vmov	d0, r0, r1
 80100aa:	b005      	add	sp, #20
 80100ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080100b0 <__copybits>:
 80100b0:	3901      	subs	r1, #1
 80100b2:	b570      	push	{r4, r5, r6, lr}
 80100b4:	1149      	asrs	r1, r1, #5
 80100b6:	6914      	ldr	r4, [r2, #16]
 80100b8:	3101      	adds	r1, #1
 80100ba:	f102 0314 	add.w	r3, r2, #20
 80100be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80100c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80100c6:	1f05      	subs	r5, r0, #4
 80100c8:	42a3      	cmp	r3, r4
 80100ca:	d30c      	bcc.n	80100e6 <__copybits+0x36>
 80100cc:	1aa3      	subs	r3, r4, r2
 80100ce:	3b11      	subs	r3, #17
 80100d0:	f023 0303 	bic.w	r3, r3, #3
 80100d4:	3211      	adds	r2, #17
 80100d6:	42a2      	cmp	r2, r4
 80100d8:	bf88      	it	hi
 80100da:	2300      	movhi	r3, #0
 80100dc:	4418      	add	r0, r3
 80100de:	2300      	movs	r3, #0
 80100e0:	4288      	cmp	r0, r1
 80100e2:	d305      	bcc.n	80100f0 <__copybits+0x40>
 80100e4:	bd70      	pop	{r4, r5, r6, pc}
 80100e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80100ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80100ee:	e7eb      	b.n	80100c8 <__copybits+0x18>
 80100f0:	f840 3b04 	str.w	r3, [r0], #4
 80100f4:	e7f4      	b.n	80100e0 <__copybits+0x30>

080100f6 <__any_on>:
 80100f6:	f100 0214 	add.w	r2, r0, #20
 80100fa:	6900      	ldr	r0, [r0, #16]
 80100fc:	114b      	asrs	r3, r1, #5
 80100fe:	4298      	cmp	r0, r3
 8010100:	b510      	push	{r4, lr}
 8010102:	db11      	blt.n	8010128 <__any_on+0x32>
 8010104:	dd0a      	ble.n	801011c <__any_on+0x26>
 8010106:	f011 011f 	ands.w	r1, r1, #31
 801010a:	d007      	beq.n	801011c <__any_on+0x26>
 801010c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010110:	fa24 f001 	lsr.w	r0, r4, r1
 8010114:	fa00 f101 	lsl.w	r1, r0, r1
 8010118:	428c      	cmp	r4, r1
 801011a:	d10b      	bne.n	8010134 <__any_on+0x3e>
 801011c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010120:	4293      	cmp	r3, r2
 8010122:	d803      	bhi.n	801012c <__any_on+0x36>
 8010124:	2000      	movs	r0, #0
 8010126:	bd10      	pop	{r4, pc}
 8010128:	4603      	mov	r3, r0
 801012a:	e7f7      	b.n	801011c <__any_on+0x26>
 801012c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010130:	2900      	cmp	r1, #0
 8010132:	d0f5      	beq.n	8010120 <__any_on+0x2a>
 8010134:	2001      	movs	r0, #1
 8010136:	e7f6      	b.n	8010126 <__any_on+0x30>

08010138 <_realloc_r>:
 8010138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801013c:	4607      	mov	r7, r0
 801013e:	4614      	mov	r4, r2
 8010140:	460d      	mov	r5, r1
 8010142:	b921      	cbnz	r1, 801014e <_realloc_r+0x16>
 8010144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010148:	4611      	mov	r1, r2
 801014a:	f7ff ba01 	b.w	800f550 <_malloc_r>
 801014e:	b92a      	cbnz	r2, 801015c <_realloc_r+0x24>
 8010150:	f7fe fcfa 	bl	800eb48 <_free_r>
 8010154:	4625      	mov	r5, r4
 8010156:	4628      	mov	r0, r5
 8010158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801015c:	f000 f884 	bl	8010268 <_malloc_usable_size_r>
 8010160:	4284      	cmp	r4, r0
 8010162:	4606      	mov	r6, r0
 8010164:	d802      	bhi.n	801016c <_realloc_r+0x34>
 8010166:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801016a:	d8f4      	bhi.n	8010156 <_realloc_r+0x1e>
 801016c:	4621      	mov	r1, r4
 801016e:	4638      	mov	r0, r7
 8010170:	f7ff f9ee 	bl	800f550 <_malloc_r>
 8010174:	4680      	mov	r8, r0
 8010176:	b908      	cbnz	r0, 801017c <_realloc_r+0x44>
 8010178:	4645      	mov	r5, r8
 801017a:	e7ec      	b.n	8010156 <_realloc_r+0x1e>
 801017c:	42b4      	cmp	r4, r6
 801017e:	4622      	mov	r2, r4
 8010180:	4629      	mov	r1, r5
 8010182:	bf28      	it	cs
 8010184:	4632      	movcs	r2, r6
 8010186:	f7fd fe69 	bl	800de5c <memcpy>
 801018a:	4629      	mov	r1, r5
 801018c:	4638      	mov	r0, r7
 801018e:	f7fe fcdb 	bl	800eb48 <_free_r>
 8010192:	e7f1      	b.n	8010178 <_realloc_r+0x40>

08010194 <__ascii_wctomb>:
 8010194:	4603      	mov	r3, r0
 8010196:	4608      	mov	r0, r1
 8010198:	b141      	cbz	r1, 80101ac <__ascii_wctomb+0x18>
 801019a:	2aff      	cmp	r2, #255	@ 0xff
 801019c:	d904      	bls.n	80101a8 <__ascii_wctomb+0x14>
 801019e:	228a      	movs	r2, #138	@ 0x8a
 80101a0:	601a      	str	r2, [r3, #0]
 80101a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101a6:	4770      	bx	lr
 80101a8:	700a      	strb	r2, [r1, #0]
 80101aa:	2001      	movs	r0, #1
 80101ac:	4770      	bx	lr

080101ae <memmove>:
 80101ae:	4288      	cmp	r0, r1
 80101b0:	b510      	push	{r4, lr}
 80101b2:	eb01 0402 	add.w	r4, r1, r2
 80101b6:	d902      	bls.n	80101be <memmove+0x10>
 80101b8:	4284      	cmp	r4, r0
 80101ba:	4623      	mov	r3, r4
 80101bc:	d807      	bhi.n	80101ce <memmove+0x20>
 80101be:	1e43      	subs	r3, r0, #1
 80101c0:	42a1      	cmp	r1, r4
 80101c2:	d008      	beq.n	80101d6 <memmove+0x28>
 80101c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101cc:	e7f8      	b.n	80101c0 <memmove+0x12>
 80101ce:	4402      	add	r2, r0
 80101d0:	4601      	mov	r1, r0
 80101d2:	428a      	cmp	r2, r1
 80101d4:	d100      	bne.n	80101d8 <memmove+0x2a>
 80101d6:	bd10      	pop	{r4, pc}
 80101d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101e0:	e7f7      	b.n	80101d2 <memmove+0x24>
	...

080101e4 <_sbrk_r>:
 80101e4:	b538      	push	{r3, r4, r5, lr}
 80101e6:	4d06      	ldr	r5, [pc, #24]	@ (8010200 <_sbrk_r+0x1c>)
 80101e8:	2300      	movs	r3, #0
 80101ea:	4604      	mov	r4, r0
 80101ec:	4608      	mov	r0, r1
 80101ee:	602b      	str	r3, [r5, #0]
 80101f0:	f7f1 fda2 	bl	8001d38 <_sbrk>
 80101f4:	1c43      	adds	r3, r0, #1
 80101f6:	d102      	bne.n	80101fe <_sbrk_r+0x1a>
 80101f8:	682b      	ldr	r3, [r5, #0]
 80101fa:	b103      	cbz	r3, 80101fe <_sbrk_r+0x1a>
 80101fc:	6023      	str	r3, [r4, #0]
 80101fe:	bd38      	pop	{r3, r4, r5, pc}
 8010200:	20000ec8 	.word	0x20000ec8

08010204 <__assert_func>:
 8010204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010206:	4614      	mov	r4, r2
 8010208:	461a      	mov	r2, r3
 801020a:	4b09      	ldr	r3, [pc, #36]	@ (8010230 <__assert_func+0x2c>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	4605      	mov	r5, r0
 8010210:	68d8      	ldr	r0, [r3, #12]
 8010212:	b14c      	cbz	r4, 8010228 <__assert_func+0x24>
 8010214:	4b07      	ldr	r3, [pc, #28]	@ (8010234 <__assert_func+0x30>)
 8010216:	9100      	str	r1, [sp, #0]
 8010218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801021c:	4906      	ldr	r1, [pc, #24]	@ (8010238 <__assert_func+0x34>)
 801021e:	462b      	mov	r3, r5
 8010220:	f000 f82a 	bl	8010278 <fiprintf>
 8010224:	f000 f83a 	bl	801029c <abort>
 8010228:	4b04      	ldr	r3, [pc, #16]	@ (801023c <__assert_func+0x38>)
 801022a:	461c      	mov	r4, r3
 801022c:	e7f3      	b.n	8010216 <__assert_func+0x12>
 801022e:	bf00      	nop
 8010230:	20000544 	.word	0x20000544
 8010234:	08011516 	.word	0x08011516
 8010238:	08011523 	.word	0x08011523
 801023c:	08011551 	.word	0x08011551

08010240 <_calloc_r>:
 8010240:	b570      	push	{r4, r5, r6, lr}
 8010242:	fba1 5402 	umull	r5, r4, r1, r2
 8010246:	b934      	cbnz	r4, 8010256 <_calloc_r+0x16>
 8010248:	4629      	mov	r1, r5
 801024a:	f7ff f981 	bl	800f550 <_malloc_r>
 801024e:	4606      	mov	r6, r0
 8010250:	b928      	cbnz	r0, 801025e <_calloc_r+0x1e>
 8010252:	4630      	mov	r0, r6
 8010254:	bd70      	pop	{r4, r5, r6, pc}
 8010256:	220c      	movs	r2, #12
 8010258:	6002      	str	r2, [r0, #0]
 801025a:	2600      	movs	r6, #0
 801025c:	e7f9      	b.n	8010252 <_calloc_r+0x12>
 801025e:	462a      	mov	r2, r5
 8010260:	4621      	mov	r1, r4
 8010262:	f7fd fd69 	bl	800dd38 <memset>
 8010266:	e7f4      	b.n	8010252 <_calloc_r+0x12>

08010268 <_malloc_usable_size_r>:
 8010268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801026c:	1f18      	subs	r0, r3, #4
 801026e:	2b00      	cmp	r3, #0
 8010270:	bfbc      	itt	lt
 8010272:	580b      	ldrlt	r3, [r1, r0]
 8010274:	18c0      	addlt	r0, r0, r3
 8010276:	4770      	bx	lr

08010278 <fiprintf>:
 8010278:	b40e      	push	{r1, r2, r3}
 801027a:	b503      	push	{r0, r1, lr}
 801027c:	4601      	mov	r1, r0
 801027e:	ab03      	add	r3, sp, #12
 8010280:	4805      	ldr	r0, [pc, #20]	@ (8010298 <fiprintf+0x20>)
 8010282:	f853 2b04 	ldr.w	r2, [r3], #4
 8010286:	6800      	ldr	r0, [r0, #0]
 8010288:	9301      	str	r3, [sp, #4]
 801028a:	f000 f837 	bl	80102fc <_vfiprintf_r>
 801028e:	b002      	add	sp, #8
 8010290:	f85d eb04 	ldr.w	lr, [sp], #4
 8010294:	b003      	add	sp, #12
 8010296:	4770      	bx	lr
 8010298:	20000544 	.word	0x20000544

0801029c <abort>:
 801029c:	b508      	push	{r3, lr}
 801029e:	2006      	movs	r0, #6
 80102a0:	f000 fa62 	bl	8010768 <raise>
 80102a4:	2001      	movs	r0, #1
 80102a6:	f7f1 fccf 	bl	8001c48 <_exit>

080102aa <__sfputc_r>:
 80102aa:	6893      	ldr	r3, [r2, #8]
 80102ac:	3b01      	subs	r3, #1
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	b410      	push	{r4}
 80102b2:	6093      	str	r3, [r2, #8]
 80102b4:	da08      	bge.n	80102c8 <__sfputc_r+0x1e>
 80102b6:	6994      	ldr	r4, [r2, #24]
 80102b8:	42a3      	cmp	r3, r4
 80102ba:	db01      	blt.n	80102c0 <__sfputc_r+0x16>
 80102bc:	290a      	cmp	r1, #10
 80102be:	d103      	bne.n	80102c8 <__sfputc_r+0x1e>
 80102c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102c4:	f000 b932 	b.w	801052c <__swbuf_r>
 80102c8:	6813      	ldr	r3, [r2, #0]
 80102ca:	1c58      	adds	r0, r3, #1
 80102cc:	6010      	str	r0, [r2, #0]
 80102ce:	7019      	strb	r1, [r3, #0]
 80102d0:	4608      	mov	r0, r1
 80102d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <__sfputs_r>:
 80102d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102da:	4606      	mov	r6, r0
 80102dc:	460f      	mov	r7, r1
 80102de:	4614      	mov	r4, r2
 80102e0:	18d5      	adds	r5, r2, r3
 80102e2:	42ac      	cmp	r4, r5
 80102e4:	d101      	bne.n	80102ea <__sfputs_r+0x12>
 80102e6:	2000      	movs	r0, #0
 80102e8:	e007      	b.n	80102fa <__sfputs_r+0x22>
 80102ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102ee:	463a      	mov	r2, r7
 80102f0:	4630      	mov	r0, r6
 80102f2:	f7ff ffda 	bl	80102aa <__sfputc_r>
 80102f6:	1c43      	adds	r3, r0, #1
 80102f8:	d1f3      	bne.n	80102e2 <__sfputs_r+0xa>
 80102fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080102fc <_vfiprintf_r>:
 80102fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010300:	460d      	mov	r5, r1
 8010302:	b09d      	sub	sp, #116	@ 0x74
 8010304:	4614      	mov	r4, r2
 8010306:	4698      	mov	r8, r3
 8010308:	4606      	mov	r6, r0
 801030a:	b118      	cbz	r0, 8010314 <_vfiprintf_r+0x18>
 801030c:	6a03      	ldr	r3, [r0, #32]
 801030e:	b90b      	cbnz	r3, 8010314 <_vfiprintf_r+0x18>
 8010310:	f7fc fe58 	bl	800cfc4 <__sinit>
 8010314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010316:	07d9      	lsls	r1, r3, #31
 8010318:	d405      	bmi.n	8010326 <_vfiprintf_r+0x2a>
 801031a:	89ab      	ldrh	r3, [r5, #12]
 801031c:	059a      	lsls	r2, r3, #22
 801031e:	d402      	bmi.n	8010326 <_vfiprintf_r+0x2a>
 8010320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010322:	f7fd fd84 	bl	800de2e <__retarget_lock_acquire_recursive>
 8010326:	89ab      	ldrh	r3, [r5, #12]
 8010328:	071b      	lsls	r3, r3, #28
 801032a:	d501      	bpl.n	8010330 <_vfiprintf_r+0x34>
 801032c:	692b      	ldr	r3, [r5, #16]
 801032e:	b99b      	cbnz	r3, 8010358 <_vfiprintf_r+0x5c>
 8010330:	4629      	mov	r1, r5
 8010332:	4630      	mov	r0, r6
 8010334:	f000 f938 	bl	80105a8 <__swsetup_r>
 8010338:	b170      	cbz	r0, 8010358 <_vfiprintf_r+0x5c>
 801033a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801033c:	07dc      	lsls	r4, r3, #31
 801033e:	d504      	bpl.n	801034a <_vfiprintf_r+0x4e>
 8010340:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010344:	b01d      	add	sp, #116	@ 0x74
 8010346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801034a:	89ab      	ldrh	r3, [r5, #12]
 801034c:	0598      	lsls	r0, r3, #22
 801034e:	d4f7      	bmi.n	8010340 <_vfiprintf_r+0x44>
 8010350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010352:	f7fd fd6d 	bl	800de30 <__retarget_lock_release_recursive>
 8010356:	e7f3      	b.n	8010340 <_vfiprintf_r+0x44>
 8010358:	2300      	movs	r3, #0
 801035a:	9309      	str	r3, [sp, #36]	@ 0x24
 801035c:	2320      	movs	r3, #32
 801035e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010362:	f8cd 800c 	str.w	r8, [sp, #12]
 8010366:	2330      	movs	r3, #48	@ 0x30
 8010368:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010518 <_vfiprintf_r+0x21c>
 801036c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010370:	f04f 0901 	mov.w	r9, #1
 8010374:	4623      	mov	r3, r4
 8010376:	469a      	mov	sl, r3
 8010378:	f813 2b01 	ldrb.w	r2, [r3], #1
 801037c:	b10a      	cbz	r2, 8010382 <_vfiprintf_r+0x86>
 801037e:	2a25      	cmp	r2, #37	@ 0x25
 8010380:	d1f9      	bne.n	8010376 <_vfiprintf_r+0x7a>
 8010382:	ebba 0b04 	subs.w	fp, sl, r4
 8010386:	d00b      	beq.n	80103a0 <_vfiprintf_r+0xa4>
 8010388:	465b      	mov	r3, fp
 801038a:	4622      	mov	r2, r4
 801038c:	4629      	mov	r1, r5
 801038e:	4630      	mov	r0, r6
 8010390:	f7ff ffa2 	bl	80102d8 <__sfputs_r>
 8010394:	3001      	adds	r0, #1
 8010396:	f000 80a7 	beq.w	80104e8 <_vfiprintf_r+0x1ec>
 801039a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801039c:	445a      	add	r2, fp
 801039e:	9209      	str	r2, [sp, #36]	@ 0x24
 80103a0:	f89a 3000 	ldrb.w	r3, [sl]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	f000 809f 	beq.w	80104e8 <_vfiprintf_r+0x1ec>
 80103aa:	2300      	movs	r3, #0
 80103ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80103b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103b4:	f10a 0a01 	add.w	sl, sl, #1
 80103b8:	9304      	str	r3, [sp, #16]
 80103ba:	9307      	str	r3, [sp, #28]
 80103bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80103c2:	4654      	mov	r4, sl
 80103c4:	2205      	movs	r2, #5
 80103c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103ca:	4853      	ldr	r0, [pc, #332]	@ (8010518 <_vfiprintf_r+0x21c>)
 80103cc:	f7ef ff30 	bl	8000230 <memchr>
 80103d0:	9a04      	ldr	r2, [sp, #16]
 80103d2:	b9d8      	cbnz	r0, 801040c <_vfiprintf_r+0x110>
 80103d4:	06d1      	lsls	r1, r2, #27
 80103d6:	bf44      	itt	mi
 80103d8:	2320      	movmi	r3, #32
 80103da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103de:	0713      	lsls	r3, r2, #28
 80103e0:	bf44      	itt	mi
 80103e2:	232b      	movmi	r3, #43	@ 0x2b
 80103e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103e8:	f89a 3000 	ldrb.w	r3, [sl]
 80103ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80103ee:	d015      	beq.n	801041c <_vfiprintf_r+0x120>
 80103f0:	9a07      	ldr	r2, [sp, #28]
 80103f2:	4654      	mov	r4, sl
 80103f4:	2000      	movs	r0, #0
 80103f6:	f04f 0c0a 	mov.w	ip, #10
 80103fa:	4621      	mov	r1, r4
 80103fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010400:	3b30      	subs	r3, #48	@ 0x30
 8010402:	2b09      	cmp	r3, #9
 8010404:	d94b      	bls.n	801049e <_vfiprintf_r+0x1a2>
 8010406:	b1b0      	cbz	r0, 8010436 <_vfiprintf_r+0x13a>
 8010408:	9207      	str	r2, [sp, #28]
 801040a:	e014      	b.n	8010436 <_vfiprintf_r+0x13a>
 801040c:	eba0 0308 	sub.w	r3, r0, r8
 8010410:	fa09 f303 	lsl.w	r3, r9, r3
 8010414:	4313      	orrs	r3, r2
 8010416:	9304      	str	r3, [sp, #16]
 8010418:	46a2      	mov	sl, r4
 801041a:	e7d2      	b.n	80103c2 <_vfiprintf_r+0xc6>
 801041c:	9b03      	ldr	r3, [sp, #12]
 801041e:	1d19      	adds	r1, r3, #4
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	9103      	str	r1, [sp, #12]
 8010424:	2b00      	cmp	r3, #0
 8010426:	bfbb      	ittet	lt
 8010428:	425b      	neglt	r3, r3
 801042a:	f042 0202 	orrlt.w	r2, r2, #2
 801042e:	9307      	strge	r3, [sp, #28]
 8010430:	9307      	strlt	r3, [sp, #28]
 8010432:	bfb8      	it	lt
 8010434:	9204      	strlt	r2, [sp, #16]
 8010436:	7823      	ldrb	r3, [r4, #0]
 8010438:	2b2e      	cmp	r3, #46	@ 0x2e
 801043a:	d10a      	bne.n	8010452 <_vfiprintf_r+0x156>
 801043c:	7863      	ldrb	r3, [r4, #1]
 801043e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010440:	d132      	bne.n	80104a8 <_vfiprintf_r+0x1ac>
 8010442:	9b03      	ldr	r3, [sp, #12]
 8010444:	1d1a      	adds	r2, r3, #4
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	9203      	str	r2, [sp, #12]
 801044a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801044e:	3402      	adds	r4, #2
 8010450:	9305      	str	r3, [sp, #20]
 8010452:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010528 <_vfiprintf_r+0x22c>
 8010456:	7821      	ldrb	r1, [r4, #0]
 8010458:	2203      	movs	r2, #3
 801045a:	4650      	mov	r0, sl
 801045c:	f7ef fee8 	bl	8000230 <memchr>
 8010460:	b138      	cbz	r0, 8010472 <_vfiprintf_r+0x176>
 8010462:	9b04      	ldr	r3, [sp, #16]
 8010464:	eba0 000a 	sub.w	r0, r0, sl
 8010468:	2240      	movs	r2, #64	@ 0x40
 801046a:	4082      	lsls	r2, r0
 801046c:	4313      	orrs	r3, r2
 801046e:	3401      	adds	r4, #1
 8010470:	9304      	str	r3, [sp, #16]
 8010472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010476:	4829      	ldr	r0, [pc, #164]	@ (801051c <_vfiprintf_r+0x220>)
 8010478:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801047c:	2206      	movs	r2, #6
 801047e:	f7ef fed7 	bl	8000230 <memchr>
 8010482:	2800      	cmp	r0, #0
 8010484:	d03f      	beq.n	8010506 <_vfiprintf_r+0x20a>
 8010486:	4b26      	ldr	r3, [pc, #152]	@ (8010520 <_vfiprintf_r+0x224>)
 8010488:	bb1b      	cbnz	r3, 80104d2 <_vfiprintf_r+0x1d6>
 801048a:	9b03      	ldr	r3, [sp, #12]
 801048c:	3307      	adds	r3, #7
 801048e:	f023 0307 	bic.w	r3, r3, #7
 8010492:	3308      	adds	r3, #8
 8010494:	9303      	str	r3, [sp, #12]
 8010496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010498:	443b      	add	r3, r7
 801049a:	9309      	str	r3, [sp, #36]	@ 0x24
 801049c:	e76a      	b.n	8010374 <_vfiprintf_r+0x78>
 801049e:	fb0c 3202 	mla	r2, ip, r2, r3
 80104a2:	460c      	mov	r4, r1
 80104a4:	2001      	movs	r0, #1
 80104a6:	e7a8      	b.n	80103fa <_vfiprintf_r+0xfe>
 80104a8:	2300      	movs	r3, #0
 80104aa:	3401      	adds	r4, #1
 80104ac:	9305      	str	r3, [sp, #20]
 80104ae:	4619      	mov	r1, r3
 80104b0:	f04f 0c0a 	mov.w	ip, #10
 80104b4:	4620      	mov	r0, r4
 80104b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104ba:	3a30      	subs	r2, #48	@ 0x30
 80104bc:	2a09      	cmp	r2, #9
 80104be:	d903      	bls.n	80104c8 <_vfiprintf_r+0x1cc>
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d0c6      	beq.n	8010452 <_vfiprintf_r+0x156>
 80104c4:	9105      	str	r1, [sp, #20]
 80104c6:	e7c4      	b.n	8010452 <_vfiprintf_r+0x156>
 80104c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80104cc:	4604      	mov	r4, r0
 80104ce:	2301      	movs	r3, #1
 80104d0:	e7f0      	b.n	80104b4 <_vfiprintf_r+0x1b8>
 80104d2:	ab03      	add	r3, sp, #12
 80104d4:	9300      	str	r3, [sp, #0]
 80104d6:	462a      	mov	r2, r5
 80104d8:	4b12      	ldr	r3, [pc, #72]	@ (8010524 <_vfiprintf_r+0x228>)
 80104da:	a904      	add	r1, sp, #16
 80104dc:	4630      	mov	r0, r6
 80104de:	f7fb fe85 	bl	800c1ec <_printf_float>
 80104e2:	4607      	mov	r7, r0
 80104e4:	1c78      	adds	r0, r7, #1
 80104e6:	d1d6      	bne.n	8010496 <_vfiprintf_r+0x19a>
 80104e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80104ea:	07d9      	lsls	r1, r3, #31
 80104ec:	d405      	bmi.n	80104fa <_vfiprintf_r+0x1fe>
 80104ee:	89ab      	ldrh	r3, [r5, #12]
 80104f0:	059a      	lsls	r2, r3, #22
 80104f2:	d402      	bmi.n	80104fa <_vfiprintf_r+0x1fe>
 80104f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80104f6:	f7fd fc9b 	bl	800de30 <__retarget_lock_release_recursive>
 80104fa:	89ab      	ldrh	r3, [r5, #12]
 80104fc:	065b      	lsls	r3, r3, #25
 80104fe:	f53f af1f 	bmi.w	8010340 <_vfiprintf_r+0x44>
 8010502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010504:	e71e      	b.n	8010344 <_vfiprintf_r+0x48>
 8010506:	ab03      	add	r3, sp, #12
 8010508:	9300      	str	r3, [sp, #0]
 801050a:	462a      	mov	r2, r5
 801050c:	4b05      	ldr	r3, [pc, #20]	@ (8010524 <_vfiprintf_r+0x228>)
 801050e:	a904      	add	r1, sp, #16
 8010510:	4630      	mov	r0, r6
 8010512:	f7fc f903 	bl	800c71c <_printf_i>
 8010516:	e7e4      	b.n	80104e2 <_vfiprintf_r+0x1e6>
 8010518:	080114ac 	.word	0x080114ac
 801051c:	080114b6 	.word	0x080114b6
 8010520:	0800c1ed 	.word	0x0800c1ed
 8010524:	080102d9 	.word	0x080102d9
 8010528:	080114b2 	.word	0x080114b2

0801052c <__swbuf_r>:
 801052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801052e:	460e      	mov	r6, r1
 8010530:	4614      	mov	r4, r2
 8010532:	4605      	mov	r5, r0
 8010534:	b118      	cbz	r0, 801053e <__swbuf_r+0x12>
 8010536:	6a03      	ldr	r3, [r0, #32]
 8010538:	b90b      	cbnz	r3, 801053e <__swbuf_r+0x12>
 801053a:	f7fc fd43 	bl	800cfc4 <__sinit>
 801053e:	69a3      	ldr	r3, [r4, #24]
 8010540:	60a3      	str	r3, [r4, #8]
 8010542:	89a3      	ldrh	r3, [r4, #12]
 8010544:	071a      	lsls	r2, r3, #28
 8010546:	d501      	bpl.n	801054c <__swbuf_r+0x20>
 8010548:	6923      	ldr	r3, [r4, #16]
 801054a:	b943      	cbnz	r3, 801055e <__swbuf_r+0x32>
 801054c:	4621      	mov	r1, r4
 801054e:	4628      	mov	r0, r5
 8010550:	f000 f82a 	bl	80105a8 <__swsetup_r>
 8010554:	b118      	cbz	r0, 801055e <__swbuf_r+0x32>
 8010556:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801055a:	4638      	mov	r0, r7
 801055c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801055e:	6823      	ldr	r3, [r4, #0]
 8010560:	6922      	ldr	r2, [r4, #16]
 8010562:	1a98      	subs	r0, r3, r2
 8010564:	6963      	ldr	r3, [r4, #20]
 8010566:	b2f6      	uxtb	r6, r6
 8010568:	4283      	cmp	r3, r0
 801056a:	4637      	mov	r7, r6
 801056c:	dc05      	bgt.n	801057a <__swbuf_r+0x4e>
 801056e:	4621      	mov	r1, r4
 8010570:	4628      	mov	r0, r5
 8010572:	f7ff f903 	bl	800f77c <_fflush_r>
 8010576:	2800      	cmp	r0, #0
 8010578:	d1ed      	bne.n	8010556 <__swbuf_r+0x2a>
 801057a:	68a3      	ldr	r3, [r4, #8]
 801057c:	3b01      	subs	r3, #1
 801057e:	60a3      	str	r3, [r4, #8]
 8010580:	6823      	ldr	r3, [r4, #0]
 8010582:	1c5a      	adds	r2, r3, #1
 8010584:	6022      	str	r2, [r4, #0]
 8010586:	701e      	strb	r6, [r3, #0]
 8010588:	6962      	ldr	r2, [r4, #20]
 801058a:	1c43      	adds	r3, r0, #1
 801058c:	429a      	cmp	r2, r3
 801058e:	d004      	beq.n	801059a <__swbuf_r+0x6e>
 8010590:	89a3      	ldrh	r3, [r4, #12]
 8010592:	07db      	lsls	r3, r3, #31
 8010594:	d5e1      	bpl.n	801055a <__swbuf_r+0x2e>
 8010596:	2e0a      	cmp	r6, #10
 8010598:	d1df      	bne.n	801055a <__swbuf_r+0x2e>
 801059a:	4621      	mov	r1, r4
 801059c:	4628      	mov	r0, r5
 801059e:	f7ff f8ed 	bl	800f77c <_fflush_r>
 80105a2:	2800      	cmp	r0, #0
 80105a4:	d0d9      	beq.n	801055a <__swbuf_r+0x2e>
 80105a6:	e7d6      	b.n	8010556 <__swbuf_r+0x2a>

080105a8 <__swsetup_r>:
 80105a8:	b538      	push	{r3, r4, r5, lr}
 80105aa:	4b29      	ldr	r3, [pc, #164]	@ (8010650 <__swsetup_r+0xa8>)
 80105ac:	4605      	mov	r5, r0
 80105ae:	6818      	ldr	r0, [r3, #0]
 80105b0:	460c      	mov	r4, r1
 80105b2:	b118      	cbz	r0, 80105bc <__swsetup_r+0x14>
 80105b4:	6a03      	ldr	r3, [r0, #32]
 80105b6:	b90b      	cbnz	r3, 80105bc <__swsetup_r+0x14>
 80105b8:	f7fc fd04 	bl	800cfc4 <__sinit>
 80105bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105c0:	0719      	lsls	r1, r3, #28
 80105c2:	d422      	bmi.n	801060a <__swsetup_r+0x62>
 80105c4:	06da      	lsls	r2, r3, #27
 80105c6:	d407      	bmi.n	80105d8 <__swsetup_r+0x30>
 80105c8:	2209      	movs	r2, #9
 80105ca:	602a      	str	r2, [r5, #0]
 80105cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105d0:	81a3      	strh	r3, [r4, #12]
 80105d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80105d6:	e033      	b.n	8010640 <__swsetup_r+0x98>
 80105d8:	0758      	lsls	r0, r3, #29
 80105da:	d512      	bpl.n	8010602 <__swsetup_r+0x5a>
 80105dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80105de:	b141      	cbz	r1, 80105f2 <__swsetup_r+0x4a>
 80105e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80105e4:	4299      	cmp	r1, r3
 80105e6:	d002      	beq.n	80105ee <__swsetup_r+0x46>
 80105e8:	4628      	mov	r0, r5
 80105ea:	f7fe faad 	bl	800eb48 <_free_r>
 80105ee:	2300      	movs	r3, #0
 80105f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80105f2:	89a3      	ldrh	r3, [r4, #12]
 80105f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80105f8:	81a3      	strh	r3, [r4, #12]
 80105fa:	2300      	movs	r3, #0
 80105fc:	6063      	str	r3, [r4, #4]
 80105fe:	6923      	ldr	r3, [r4, #16]
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	89a3      	ldrh	r3, [r4, #12]
 8010604:	f043 0308 	orr.w	r3, r3, #8
 8010608:	81a3      	strh	r3, [r4, #12]
 801060a:	6923      	ldr	r3, [r4, #16]
 801060c:	b94b      	cbnz	r3, 8010622 <__swsetup_r+0x7a>
 801060e:	89a3      	ldrh	r3, [r4, #12]
 8010610:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010618:	d003      	beq.n	8010622 <__swsetup_r+0x7a>
 801061a:	4621      	mov	r1, r4
 801061c:	4628      	mov	r0, r5
 801061e:	f000 f83f 	bl	80106a0 <__smakebuf_r>
 8010622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010626:	f013 0201 	ands.w	r2, r3, #1
 801062a:	d00a      	beq.n	8010642 <__swsetup_r+0x9a>
 801062c:	2200      	movs	r2, #0
 801062e:	60a2      	str	r2, [r4, #8]
 8010630:	6962      	ldr	r2, [r4, #20]
 8010632:	4252      	negs	r2, r2
 8010634:	61a2      	str	r2, [r4, #24]
 8010636:	6922      	ldr	r2, [r4, #16]
 8010638:	b942      	cbnz	r2, 801064c <__swsetup_r+0xa4>
 801063a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801063e:	d1c5      	bne.n	80105cc <__swsetup_r+0x24>
 8010640:	bd38      	pop	{r3, r4, r5, pc}
 8010642:	0799      	lsls	r1, r3, #30
 8010644:	bf58      	it	pl
 8010646:	6962      	ldrpl	r2, [r4, #20]
 8010648:	60a2      	str	r2, [r4, #8]
 801064a:	e7f4      	b.n	8010636 <__swsetup_r+0x8e>
 801064c:	2000      	movs	r0, #0
 801064e:	e7f7      	b.n	8010640 <__swsetup_r+0x98>
 8010650:	20000544 	.word	0x20000544

08010654 <__swhatbuf_r>:
 8010654:	b570      	push	{r4, r5, r6, lr}
 8010656:	460c      	mov	r4, r1
 8010658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801065c:	2900      	cmp	r1, #0
 801065e:	b096      	sub	sp, #88	@ 0x58
 8010660:	4615      	mov	r5, r2
 8010662:	461e      	mov	r6, r3
 8010664:	da0d      	bge.n	8010682 <__swhatbuf_r+0x2e>
 8010666:	89a3      	ldrh	r3, [r4, #12]
 8010668:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801066c:	f04f 0100 	mov.w	r1, #0
 8010670:	bf14      	ite	ne
 8010672:	2340      	movne	r3, #64	@ 0x40
 8010674:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010678:	2000      	movs	r0, #0
 801067a:	6031      	str	r1, [r6, #0]
 801067c:	602b      	str	r3, [r5, #0]
 801067e:	b016      	add	sp, #88	@ 0x58
 8010680:	bd70      	pop	{r4, r5, r6, pc}
 8010682:	466a      	mov	r2, sp
 8010684:	f000 f89c 	bl	80107c0 <_fstat_r>
 8010688:	2800      	cmp	r0, #0
 801068a:	dbec      	blt.n	8010666 <__swhatbuf_r+0x12>
 801068c:	9901      	ldr	r1, [sp, #4]
 801068e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010692:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010696:	4259      	negs	r1, r3
 8010698:	4159      	adcs	r1, r3
 801069a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801069e:	e7eb      	b.n	8010678 <__swhatbuf_r+0x24>

080106a0 <__smakebuf_r>:
 80106a0:	898b      	ldrh	r3, [r1, #12]
 80106a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106a4:	079d      	lsls	r5, r3, #30
 80106a6:	4606      	mov	r6, r0
 80106a8:	460c      	mov	r4, r1
 80106aa:	d507      	bpl.n	80106bc <__smakebuf_r+0x1c>
 80106ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80106b0:	6023      	str	r3, [r4, #0]
 80106b2:	6123      	str	r3, [r4, #16]
 80106b4:	2301      	movs	r3, #1
 80106b6:	6163      	str	r3, [r4, #20]
 80106b8:	b003      	add	sp, #12
 80106ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106bc:	ab01      	add	r3, sp, #4
 80106be:	466a      	mov	r2, sp
 80106c0:	f7ff ffc8 	bl	8010654 <__swhatbuf_r>
 80106c4:	9f00      	ldr	r7, [sp, #0]
 80106c6:	4605      	mov	r5, r0
 80106c8:	4639      	mov	r1, r7
 80106ca:	4630      	mov	r0, r6
 80106cc:	f7fe ff40 	bl	800f550 <_malloc_r>
 80106d0:	b948      	cbnz	r0, 80106e6 <__smakebuf_r+0x46>
 80106d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106d6:	059a      	lsls	r2, r3, #22
 80106d8:	d4ee      	bmi.n	80106b8 <__smakebuf_r+0x18>
 80106da:	f023 0303 	bic.w	r3, r3, #3
 80106de:	f043 0302 	orr.w	r3, r3, #2
 80106e2:	81a3      	strh	r3, [r4, #12]
 80106e4:	e7e2      	b.n	80106ac <__smakebuf_r+0xc>
 80106e6:	89a3      	ldrh	r3, [r4, #12]
 80106e8:	6020      	str	r0, [r4, #0]
 80106ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106ee:	81a3      	strh	r3, [r4, #12]
 80106f0:	9b01      	ldr	r3, [sp, #4]
 80106f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80106f6:	b15b      	cbz	r3, 8010710 <__smakebuf_r+0x70>
 80106f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106fc:	4630      	mov	r0, r6
 80106fe:	f000 f83b 	bl	8010778 <_isatty_r>
 8010702:	b128      	cbz	r0, 8010710 <__smakebuf_r+0x70>
 8010704:	89a3      	ldrh	r3, [r4, #12]
 8010706:	f023 0303 	bic.w	r3, r3, #3
 801070a:	f043 0301 	orr.w	r3, r3, #1
 801070e:	81a3      	strh	r3, [r4, #12]
 8010710:	89a3      	ldrh	r3, [r4, #12]
 8010712:	431d      	orrs	r5, r3
 8010714:	81a5      	strh	r5, [r4, #12]
 8010716:	e7cf      	b.n	80106b8 <__smakebuf_r+0x18>

08010718 <_raise_r>:
 8010718:	291f      	cmp	r1, #31
 801071a:	b538      	push	{r3, r4, r5, lr}
 801071c:	4605      	mov	r5, r0
 801071e:	460c      	mov	r4, r1
 8010720:	d904      	bls.n	801072c <_raise_r+0x14>
 8010722:	2316      	movs	r3, #22
 8010724:	6003      	str	r3, [r0, #0]
 8010726:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801072a:	bd38      	pop	{r3, r4, r5, pc}
 801072c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801072e:	b112      	cbz	r2, 8010736 <_raise_r+0x1e>
 8010730:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010734:	b94b      	cbnz	r3, 801074a <_raise_r+0x32>
 8010736:	4628      	mov	r0, r5
 8010738:	f000 f840 	bl	80107bc <_getpid_r>
 801073c:	4622      	mov	r2, r4
 801073e:	4601      	mov	r1, r0
 8010740:	4628      	mov	r0, r5
 8010742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010746:	f000 b827 	b.w	8010798 <_kill_r>
 801074a:	2b01      	cmp	r3, #1
 801074c:	d00a      	beq.n	8010764 <_raise_r+0x4c>
 801074e:	1c59      	adds	r1, r3, #1
 8010750:	d103      	bne.n	801075a <_raise_r+0x42>
 8010752:	2316      	movs	r3, #22
 8010754:	6003      	str	r3, [r0, #0]
 8010756:	2001      	movs	r0, #1
 8010758:	e7e7      	b.n	801072a <_raise_r+0x12>
 801075a:	2100      	movs	r1, #0
 801075c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010760:	4620      	mov	r0, r4
 8010762:	4798      	blx	r3
 8010764:	2000      	movs	r0, #0
 8010766:	e7e0      	b.n	801072a <_raise_r+0x12>

08010768 <raise>:
 8010768:	4b02      	ldr	r3, [pc, #8]	@ (8010774 <raise+0xc>)
 801076a:	4601      	mov	r1, r0
 801076c:	6818      	ldr	r0, [r3, #0]
 801076e:	f7ff bfd3 	b.w	8010718 <_raise_r>
 8010772:	bf00      	nop
 8010774:	20000544 	.word	0x20000544

08010778 <_isatty_r>:
 8010778:	b538      	push	{r3, r4, r5, lr}
 801077a:	4d06      	ldr	r5, [pc, #24]	@ (8010794 <_isatty_r+0x1c>)
 801077c:	2300      	movs	r3, #0
 801077e:	4604      	mov	r4, r0
 8010780:	4608      	mov	r0, r1
 8010782:	602b      	str	r3, [r5, #0]
 8010784:	f7f1 fac0 	bl	8001d08 <_isatty>
 8010788:	1c43      	adds	r3, r0, #1
 801078a:	d102      	bne.n	8010792 <_isatty_r+0x1a>
 801078c:	682b      	ldr	r3, [r5, #0]
 801078e:	b103      	cbz	r3, 8010792 <_isatty_r+0x1a>
 8010790:	6023      	str	r3, [r4, #0]
 8010792:	bd38      	pop	{r3, r4, r5, pc}
 8010794:	20000ec8 	.word	0x20000ec8

08010798 <_kill_r>:
 8010798:	b538      	push	{r3, r4, r5, lr}
 801079a:	4d07      	ldr	r5, [pc, #28]	@ (80107b8 <_kill_r+0x20>)
 801079c:	2300      	movs	r3, #0
 801079e:	4604      	mov	r4, r0
 80107a0:	4608      	mov	r0, r1
 80107a2:	4611      	mov	r1, r2
 80107a4:	602b      	str	r3, [r5, #0]
 80107a6:	f7f1 fa3f 	bl	8001c28 <_kill>
 80107aa:	1c43      	adds	r3, r0, #1
 80107ac:	d102      	bne.n	80107b4 <_kill_r+0x1c>
 80107ae:	682b      	ldr	r3, [r5, #0]
 80107b0:	b103      	cbz	r3, 80107b4 <_kill_r+0x1c>
 80107b2:	6023      	str	r3, [r4, #0]
 80107b4:	bd38      	pop	{r3, r4, r5, pc}
 80107b6:	bf00      	nop
 80107b8:	20000ec8 	.word	0x20000ec8

080107bc <_getpid_r>:
 80107bc:	f7f1 ba2c 	b.w	8001c18 <_getpid>

080107c0 <_fstat_r>:
 80107c0:	b538      	push	{r3, r4, r5, lr}
 80107c2:	4d07      	ldr	r5, [pc, #28]	@ (80107e0 <_fstat_r+0x20>)
 80107c4:	2300      	movs	r3, #0
 80107c6:	4604      	mov	r4, r0
 80107c8:	4608      	mov	r0, r1
 80107ca:	4611      	mov	r1, r2
 80107cc:	602b      	str	r3, [r5, #0]
 80107ce:	f7f1 fa8b 	bl	8001ce8 <_fstat>
 80107d2:	1c43      	adds	r3, r0, #1
 80107d4:	d102      	bne.n	80107dc <_fstat_r+0x1c>
 80107d6:	682b      	ldr	r3, [r5, #0]
 80107d8:	b103      	cbz	r3, 80107dc <_fstat_r+0x1c>
 80107da:	6023      	str	r3, [r4, #0]
 80107dc:	bd38      	pop	{r3, r4, r5, pc}
 80107de:	bf00      	nop
 80107e0:	20000ec8 	.word	0x20000ec8

080107e4 <atan2f>:
 80107e4:	f000 b862 	b.w	80108ac <__ieee754_atan2f>

080107e8 <powf>:
 80107e8:	b508      	push	{r3, lr}
 80107ea:	ed2d 8b04 	vpush	{d8-d9}
 80107ee:	eeb0 8a60 	vmov.f32	s16, s1
 80107f2:	eeb0 9a40 	vmov.f32	s18, s0
 80107f6:	f000 f8fd 	bl	80109f4 <__ieee754_powf>
 80107fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80107fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010802:	eef0 8a40 	vmov.f32	s17, s0
 8010806:	d63e      	bvs.n	8010886 <powf+0x9e>
 8010808:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801080c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010810:	d112      	bne.n	8010838 <powf+0x50>
 8010812:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801081a:	d039      	beq.n	8010890 <powf+0xa8>
 801081c:	eeb0 0a48 	vmov.f32	s0, s16
 8010820:	f000 f839 	bl	8010896 <finitef>
 8010824:	b378      	cbz	r0, 8010886 <powf+0x9e>
 8010826:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801082a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801082e:	d52a      	bpl.n	8010886 <powf+0x9e>
 8010830:	f7fd fad2 	bl	800ddd8 <__errno>
 8010834:	2322      	movs	r3, #34	@ 0x22
 8010836:	e014      	b.n	8010862 <powf+0x7a>
 8010838:	f000 f82d 	bl	8010896 <finitef>
 801083c:	b998      	cbnz	r0, 8010866 <powf+0x7e>
 801083e:	eeb0 0a49 	vmov.f32	s0, s18
 8010842:	f000 f828 	bl	8010896 <finitef>
 8010846:	b170      	cbz	r0, 8010866 <powf+0x7e>
 8010848:	eeb0 0a48 	vmov.f32	s0, s16
 801084c:	f000 f823 	bl	8010896 <finitef>
 8010850:	b148      	cbz	r0, 8010866 <powf+0x7e>
 8010852:	eef4 8a68 	vcmp.f32	s17, s17
 8010856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801085a:	d7e9      	bvc.n	8010830 <powf+0x48>
 801085c:	f7fd fabc 	bl	800ddd8 <__errno>
 8010860:	2321      	movs	r3, #33	@ 0x21
 8010862:	6003      	str	r3, [r0, #0]
 8010864:	e00f      	b.n	8010886 <powf+0x9e>
 8010866:	eef5 8a40 	vcmp.f32	s17, #0.0
 801086a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801086e:	d10a      	bne.n	8010886 <powf+0x9e>
 8010870:	eeb0 0a49 	vmov.f32	s0, s18
 8010874:	f000 f80f 	bl	8010896 <finitef>
 8010878:	b128      	cbz	r0, 8010886 <powf+0x9e>
 801087a:	eeb0 0a48 	vmov.f32	s0, s16
 801087e:	f000 f80a 	bl	8010896 <finitef>
 8010882:	2800      	cmp	r0, #0
 8010884:	d1d4      	bne.n	8010830 <powf+0x48>
 8010886:	eeb0 0a68 	vmov.f32	s0, s17
 801088a:	ecbd 8b04 	vpop	{d8-d9}
 801088e:	bd08      	pop	{r3, pc}
 8010890:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010894:	e7f7      	b.n	8010886 <powf+0x9e>

08010896 <finitef>:
 8010896:	ee10 3a10 	vmov	r3, s0
 801089a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801089e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80108a2:	bfac      	ite	ge
 80108a4:	2000      	movge	r0, #0
 80108a6:	2001      	movlt	r0, #1
 80108a8:	4770      	bx	lr
	...

080108ac <__ieee754_atan2f>:
 80108ac:	ee10 2a90 	vmov	r2, s1
 80108b0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80108b4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80108b8:	b510      	push	{r4, lr}
 80108ba:	eef0 7a40 	vmov.f32	s15, s0
 80108be:	d806      	bhi.n	80108ce <__ieee754_atan2f+0x22>
 80108c0:	ee10 0a10 	vmov	r0, s0
 80108c4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80108c8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80108cc:	d904      	bls.n	80108d8 <__ieee754_atan2f+0x2c>
 80108ce:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80108d2:	eeb0 0a67 	vmov.f32	s0, s15
 80108d6:	bd10      	pop	{r4, pc}
 80108d8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80108dc:	d103      	bne.n	80108e6 <__ieee754_atan2f+0x3a>
 80108de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108e2:	f000 bbe1 	b.w	80110a8 <atanf>
 80108e6:	1794      	asrs	r4, r2, #30
 80108e8:	f004 0402 	and.w	r4, r4, #2
 80108ec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80108f0:	b943      	cbnz	r3, 8010904 <__ieee754_atan2f+0x58>
 80108f2:	2c02      	cmp	r4, #2
 80108f4:	d05e      	beq.n	80109b4 <__ieee754_atan2f+0x108>
 80108f6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80109c8 <__ieee754_atan2f+0x11c>
 80108fa:	2c03      	cmp	r4, #3
 80108fc:	bf08      	it	eq
 80108fe:	eef0 7a47 	vmoveq.f32	s15, s14
 8010902:	e7e6      	b.n	80108d2 <__ieee754_atan2f+0x26>
 8010904:	b941      	cbnz	r1, 8010918 <__ieee754_atan2f+0x6c>
 8010906:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80109cc <__ieee754_atan2f+0x120>
 801090a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80109d0 <__ieee754_atan2f+0x124>
 801090e:	2800      	cmp	r0, #0
 8010910:	bfa8      	it	ge
 8010912:	eef0 7a47 	vmovge.f32	s15, s14
 8010916:	e7dc      	b.n	80108d2 <__ieee754_atan2f+0x26>
 8010918:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801091c:	d110      	bne.n	8010940 <__ieee754_atan2f+0x94>
 801091e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010922:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8010926:	d107      	bne.n	8010938 <__ieee754_atan2f+0x8c>
 8010928:	2c02      	cmp	r4, #2
 801092a:	d846      	bhi.n	80109ba <__ieee754_atan2f+0x10e>
 801092c:	4b29      	ldr	r3, [pc, #164]	@ (80109d4 <__ieee754_atan2f+0x128>)
 801092e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010932:	edd3 7a00 	vldr	s15, [r3]
 8010936:	e7cc      	b.n	80108d2 <__ieee754_atan2f+0x26>
 8010938:	2c02      	cmp	r4, #2
 801093a:	d841      	bhi.n	80109c0 <__ieee754_atan2f+0x114>
 801093c:	4b26      	ldr	r3, [pc, #152]	@ (80109d8 <__ieee754_atan2f+0x12c>)
 801093e:	e7f6      	b.n	801092e <__ieee754_atan2f+0x82>
 8010940:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010944:	d0df      	beq.n	8010906 <__ieee754_atan2f+0x5a>
 8010946:	1a5b      	subs	r3, r3, r1
 8010948:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801094c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010950:	da1a      	bge.n	8010988 <__ieee754_atan2f+0xdc>
 8010952:	2a00      	cmp	r2, #0
 8010954:	da01      	bge.n	801095a <__ieee754_atan2f+0xae>
 8010956:	313c      	adds	r1, #60	@ 0x3c
 8010958:	db19      	blt.n	801098e <__ieee754_atan2f+0xe2>
 801095a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801095e:	f000 fc77 	bl	8011250 <fabsf>
 8010962:	f000 fba1 	bl	80110a8 <atanf>
 8010966:	eef0 7a40 	vmov.f32	s15, s0
 801096a:	2c01      	cmp	r4, #1
 801096c:	d012      	beq.n	8010994 <__ieee754_atan2f+0xe8>
 801096e:	2c02      	cmp	r4, #2
 8010970:	d017      	beq.n	80109a2 <__ieee754_atan2f+0xf6>
 8010972:	2c00      	cmp	r4, #0
 8010974:	d0ad      	beq.n	80108d2 <__ieee754_atan2f+0x26>
 8010976:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80109dc <__ieee754_atan2f+0x130>
 801097a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801097e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80109e0 <__ieee754_atan2f+0x134>
 8010982:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010986:	e7a4      	b.n	80108d2 <__ieee754_atan2f+0x26>
 8010988:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80109d0 <__ieee754_atan2f+0x124>
 801098c:	e7ed      	b.n	801096a <__ieee754_atan2f+0xbe>
 801098e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80109e4 <__ieee754_atan2f+0x138>
 8010992:	e7ea      	b.n	801096a <__ieee754_atan2f+0xbe>
 8010994:	ee17 3a90 	vmov	r3, s15
 8010998:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801099c:	ee07 3a90 	vmov	s15, r3
 80109a0:	e797      	b.n	80108d2 <__ieee754_atan2f+0x26>
 80109a2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80109dc <__ieee754_atan2f+0x130>
 80109a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109aa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80109e0 <__ieee754_atan2f+0x134>
 80109ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109b2:	e78e      	b.n	80108d2 <__ieee754_atan2f+0x26>
 80109b4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80109e0 <__ieee754_atan2f+0x134>
 80109b8:	e78b      	b.n	80108d2 <__ieee754_atan2f+0x26>
 80109ba:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80109e8 <__ieee754_atan2f+0x13c>
 80109be:	e788      	b.n	80108d2 <__ieee754_atan2f+0x26>
 80109c0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80109e4 <__ieee754_atan2f+0x138>
 80109c4:	e785      	b.n	80108d2 <__ieee754_atan2f+0x26>
 80109c6:	bf00      	nop
 80109c8:	c0490fdb 	.word	0xc0490fdb
 80109cc:	bfc90fdb 	.word	0xbfc90fdb
 80109d0:	3fc90fdb 	.word	0x3fc90fdb
 80109d4:	080117b4 	.word	0x080117b4
 80109d8:	080117a8 	.word	0x080117a8
 80109dc:	33bbbd2e 	.word	0x33bbbd2e
 80109e0:	40490fdb 	.word	0x40490fdb
 80109e4:	00000000 	.word	0x00000000
 80109e8:	3f490fdb 	.word	0x3f490fdb

080109ec <__ieee754_sqrtf>:
 80109ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80109f0:	4770      	bx	lr
	...

080109f4 <__ieee754_powf>:
 80109f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109f8:	ee10 4a90 	vmov	r4, s1
 80109fc:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8010a00:	ed2d 8b02 	vpush	{d8}
 8010a04:	ee10 6a10 	vmov	r6, s0
 8010a08:	eeb0 8a40 	vmov.f32	s16, s0
 8010a0c:	eef0 8a60 	vmov.f32	s17, s1
 8010a10:	d10c      	bne.n	8010a2c <__ieee754_powf+0x38>
 8010a12:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8010a16:	0076      	lsls	r6, r6, #1
 8010a18:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8010a1c:	f240 8274 	bls.w	8010f08 <__ieee754_powf+0x514>
 8010a20:	ee38 0a28 	vadd.f32	s0, s16, s17
 8010a24:	ecbd 8b02 	vpop	{d8}
 8010a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a2c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8010a30:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8010a34:	d802      	bhi.n	8010a3c <__ieee754_powf+0x48>
 8010a36:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010a3a:	d908      	bls.n	8010a4e <__ieee754_powf+0x5a>
 8010a3c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8010a40:	d1ee      	bne.n	8010a20 <__ieee754_powf+0x2c>
 8010a42:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8010a46:	0064      	lsls	r4, r4, #1
 8010a48:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8010a4c:	e7e6      	b.n	8010a1c <__ieee754_powf+0x28>
 8010a4e:	2e00      	cmp	r6, #0
 8010a50:	da1f      	bge.n	8010a92 <__ieee754_powf+0x9e>
 8010a52:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8010a56:	f080 8260 	bcs.w	8010f1a <__ieee754_powf+0x526>
 8010a5a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8010a5e:	d32f      	bcc.n	8010ac0 <__ieee754_powf+0xcc>
 8010a60:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8010a64:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8010a68:	fa49 f503 	asr.w	r5, r9, r3
 8010a6c:	fa05 f303 	lsl.w	r3, r5, r3
 8010a70:	454b      	cmp	r3, r9
 8010a72:	d123      	bne.n	8010abc <__ieee754_powf+0xc8>
 8010a74:	f005 0501 	and.w	r5, r5, #1
 8010a78:	f1c5 0502 	rsb	r5, r5, #2
 8010a7c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8010a80:	d11f      	bne.n	8010ac2 <__ieee754_powf+0xce>
 8010a82:	2c00      	cmp	r4, #0
 8010a84:	f280 8246 	bge.w	8010f14 <__ieee754_powf+0x520>
 8010a88:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010a8c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010a90:	e7c8      	b.n	8010a24 <__ieee754_powf+0x30>
 8010a92:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010a96:	d111      	bne.n	8010abc <__ieee754_powf+0xc8>
 8010a98:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8010a9c:	f000 8234 	beq.w	8010f08 <__ieee754_powf+0x514>
 8010aa0:	d906      	bls.n	8010ab0 <__ieee754_powf+0xbc>
 8010aa2:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8010db8 <__ieee754_powf+0x3c4>
 8010aa6:	2c00      	cmp	r4, #0
 8010aa8:	bfa8      	it	ge
 8010aaa:	eeb0 0a68 	vmovge.f32	s0, s17
 8010aae:	e7b9      	b.n	8010a24 <__ieee754_powf+0x30>
 8010ab0:	2c00      	cmp	r4, #0
 8010ab2:	f280 822c 	bge.w	8010f0e <__ieee754_powf+0x51a>
 8010ab6:	eeb1 0a68 	vneg.f32	s0, s17
 8010aba:	e7b3      	b.n	8010a24 <__ieee754_powf+0x30>
 8010abc:	2500      	movs	r5, #0
 8010abe:	e7dd      	b.n	8010a7c <__ieee754_powf+0x88>
 8010ac0:	2500      	movs	r5, #0
 8010ac2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010ac6:	d102      	bne.n	8010ace <__ieee754_powf+0xda>
 8010ac8:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010acc:	e7aa      	b.n	8010a24 <__ieee754_powf+0x30>
 8010ace:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010ad2:	f040 8227 	bne.w	8010f24 <__ieee754_powf+0x530>
 8010ad6:	2e00      	cmp	r6, #0
 8010ad8:	f2c0 8224 	blt.w	8010f24 <__ieee754_powf+0x530>
 8010adc:	eeb0 0a48 	vmov.f32	s0, s16
 8010ae0:	ecbd 8b02 	vpop	{d8}
 8010ae4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ae8:	f7ff bf80 	b.w	80109ec <__ieee754_sqrtf>
 8010aec:	2d01      	cmp	r5, #1
 8010aee:	d199      	bne.n	8010a24 <__ieee754_powf+0x30>
 8010af0:	eeb1 0a40 	vneg.f32	s0, s0
 8010af4:	e796      	b.n	8010a24 <__ieee754_powf+0x30>
 8010af6:	0ff0      	lsrs	r0, r6, #31
 8010af8:	3801      	subs	r0, #1
 8010afa:	ea55 0300 	orrs.w	r3, r5, r0
 8010afe:	d104      	bne.n	8010b0a <__ieee754_powf+0x116>
 8010b00:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010b04:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010b08:	e78c      	b.n	8010a24 <__ieee754_powf+0x30>
 8010b0a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8010b0e:	d96d      	bls.n	8010bec <__ieee754_powf+0x1f8>
 8010b10:	4baa      	ldr	r3, [pc, #680]	@ (8010dbc <__ieee754_powf+0x3c8>)
 8010b12:	4598      	cmp	r8, r3
 8010b14:	d808      	bhi.n	8010b28 <__ieee754_powf+0x134>
 8010b16:	2c00      	cmp	r4, #0
 8010b18:	da0b      	bge.n	8010b32 <__ieee754_powf+0x13e>
 8010b1a:	2000      	movs	r0, #0
 8010b1c:	ecbd 8b02 	vpop	{d8}
 8010b20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b24:	f000 ba54 	b.w	8010fd0 <__math_oflowf>
 8010b28:	4ba5      	ldr	r3, [pc, #660]	@ (8010dc0 <__ieee754_powf+0x3cc>)
 8010b2a:	4598      	cmp	r8, r3
 8010b2c:	d908      	bls.n	8010b40 <__ieee754_powf+0x14c>
 8010b2e:	2c00      	cmp	r4, #0
 8010b30:	dcf3      	bgt.n	8010b1a <__ieee754_powf+0x126>
 8010b32:	2000      	movs	r0, #0
 8010b34:	ecbd 8b02 	vpop	{d8}
 8010b38:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b3c:	f000 ba42 	b.w	8010fc4 <__math_uflowf>
 8010b40:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010b44:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010b48:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8010dc4 <__ieee754_powf+0x3d0>
 8010b4c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010b50:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010b54:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010b58:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8010b5c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010b60:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8010dc8 <__ieee754_powf+0x3d4>
 8010b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010b68:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8010dcc <__ieee754_powf+0x3d8>
 8010b6c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010b70:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8010dd0 <__ieee754_powf+0x3dc>
 8010b74:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010b78:	eeb0 7a67 	vmov.f32	s14, s15
 8010b7c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010b80:	ee17 3a10 	vmov	r3, s14
 8010b84:	f36f 030b 	bfc	r3, #0, #12
 8010b88:	ee07 3a10 	vmov	s14, r3
 8010b8c:	eeb0 6a47 	vmov.f32	s12, s14
 8010b90:	eea0 6a66 	vfms.f32	s12, s0, s13
 8010b94:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010b98:	3d01      	subs	r5, #1
 8010b9a:	4305      	orrs	r5, r0
 8010b9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010ba0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8010ba4:	f36f 040b 	bfc	r4, #0, #12
 8010ba8:	bf18      	it	ne
 8010baa:	eeb0 8a66 	vmovne.f32	s16, s13
 8010bae:	ee06 4a90 	vmov	s13, r4
 8010bb2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010bb6:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8010bba:	ee67 7a26 	vmul.f32	s15, s14, s13
 8010bbe:	eee6 0a07 	vfma.f32	s1, s12, s14
 8010bc2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010bc6:	ee17 1a10 	vmov	r1, s14
 8010bca:	2900      	cmp	r1, #0
 8010bcc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010bd0:	f340 80dd 	ble.w	8010d8e <__ieee754_powf+0x39a>
 8010bd4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8010bd8:	f240 80ca 	bls.w	8010d70 <__ieee754_powf+0x37c>
 8010bdc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be4:	bf4c      	ite	mi
 8010be6:	2001      	movmi	r0, #1
 8010be8:	2000      	movpl	r0, #0
 8010bea:	e797      	b.n	8010b1c <__ieee754_powf+0x128>
 8010bec:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8010bf0:	bf01      	itttt	eq
 8010bf2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8010dd4 <__ieee754_powf+0x3e0>
 8010bf6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010bfa:	f06f 0317 	mvneq.w	r3, #23
 8010bfe:	ee17 7a90 	vmoveq	r7, s15
 8010c02:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8010c06:	bf18      	it	ne
 8010c08:	2300      	movne	r3, #0
 8010c0a:	3a7f      	subs	r2, #127	@ 0x7f
 8010c0c:	441a      	add	r2, r3
 8010c0e:	4b72      	ldr	r3, [pc, #456]	@ (8010dd8 <__ieee754_powf+0x3e4>)
 8010c10:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8010c14:	429f      	cmp	r7, r3
 8010c16:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8010c1a:	dd06      	ble.n	8010c2a <__ieee754_powf+0x236>
 8010c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8010ddc <__ieee754_powf+0x3e8>)
 8010c1e:	429f      	cmp	r7, r3
 8010c20:	f340 80a4 	ble.w	8010d6c <__ieee754_powf+0x378>
 8010c24:	3201      	adds	r2, #1
 8010c26:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8010c2a:	2600      	movs	r6, #0
 8010c2c:	4b6c      	ldr	r3, [pc, #432]	@ (8010de0 <__ieee754_powf+0x3ec>)
 8010c2e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8010c32:	ee07 1a10 	vmov	s14, r1
 8010c36:	edd3 5a00 	vldr	s11, [r3]
 8010c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8010de4 <__ieee754_powf+0x3f0>)
 8010c3c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8010c40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010c44:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8010c48:	1049      	asrs	r1, r1, #1
 8010c4a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8010c4e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8010c52:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8010c56:	ee37 6a65 	vsub.f32	s12, s14, s11
 8010c5a:	ee07 1a90 	vmov	s15, r1
 8010c5e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8010c62:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8010c66:	ee15 7a10 	vmov	r7, s10
 8010c6a:	401f      	ands	r7, r3
 8010c6c:	ee06 7a90 	vmov	s13, r7
 8010c70:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8010c74:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010c78:	ee65 7a05 	vmul.f32	s15, s10, s10
 8010c7c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010c80:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8010de8 <__ieee754_powf+0x3f4>
 8010c84:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010dec <__ieee754_powf+0x3f8>
 8010c88:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010c8c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8010df0 <__ieee754_powf+0x3fc>
 8010c90:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010c94:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8010dc4 <__ieee754_powf+0x3d0>
 8010c98:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010c9c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010df4 <__ieee754_powf+0x400>
 8010ca0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010ca4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8010df8 <__ieee754_powf+0x404>
 8010ca8:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010cac:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010cb0:	ee35 7a26 	vadd.f32	s14, s10, s13
 8010cb4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8010cb8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010cbc:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8010cc0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8010cc4:	eef0 5a67 	vmov.f32	s11, s15
 8010cc8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8010ccc:	ee75 5a87 	vadd.f32	s11, s11, s14
 8010cd0:	ee15 1a90 	vmov	r1, s11
 8010cd4:	4019      	ands	r1, r3
 8010cd6:	ee05 1a90 	vmov	s11, r1
 8010cda:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8010cde:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8010ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ce6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010cea:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010cee:	eeb0 6a67 	vmov.f32	s12, s15
 8010cf2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010cf6:	ee16 1a10 	vmov	r1, s12
 8010cfa:	4019      	ands	r1, r3
 8010cfc:	ee06 1a10 	vmov	s12, r1
 8010d00:	eeb0 7a46 	vmov.f32	s14, s12
 8010d04:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8010d08:	493c      	ldr	r1, [pc, #240]	@ (8010dfc <__ieee754_powf+0x408>)
 8010d0a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8010d0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d12:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8010e00 <__ieee754_powf+0x40c>
 8010d16:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8010e04 <__ieee754_powf+0x410>
 8010d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d1e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8010e08 <__ieee754_powf+0x414>
 8010d22:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010d26:	ed91 7a00 	vldr	s14, [r1]
 8010d2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d2e:	ee07 2a10 	vmov	s14, r2
 8010d32:	4a36      	ldr	r2, [pc, #216]	@ (8010e0c <__ieee754_powf+0x418>)
 8010d34:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8010d38:	eeb0 7a67 	vmov.f32	s14, s15
 8010d3c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8010d40:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8010d44:	ed92 5a00 	vldr	s10, [r2]
 8010d48:	ee37 7a05 	vadd.f32	s14, s14, s10
 8010d4c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010d50:	ee17 2a10 	vmov	r2, s14
 8010d54:	401a      	ands	r2, r3
 8010d56:	ee07 2a10 	vmov	s14, r2
 8010d5a:	ee77 6a66 	vsub.f32	s13, s14, s13
 8010d5e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8010d62:	eee6 6a65 	vfms.f32	s13, s12, s11
 8010d66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010d6a:	e715      	b.n	8010b98 <__ieee754_powf+0x1a4>
 8010d6c:	2601      	movs	r6, #1
 8010d6e:	e75d      	b.n	8010c2c <__ieee754_powf+0x238>
 8010d70:	d152      	bne.n	8010e18 <__ieee754_powf+0x424>
 8010d72:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8010e10 <__ieee754_powf+0x41c>
 8010d76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010d7a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010d7e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d86:	f73f af29 	bgt.w	8010bdc <__ieee754_powf+0x1e8>
 8010d8a:	2386      	movs	r3, #134	@ 0x86
 8010d8c:	e048      	b.n	8010e20 <__ieee754_powf+0x42c>
 8010d8e:	4a21      	ldr	r2, [pc, #132]	@ (8010e14 <__ieee754_powf+0x420>)
 8010d90:	4293      	cmp	r3, r2
 8010d92:	d907      	bls.n	8010da4 <__ieee754_powf+0x3b0>
 8010d94:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d9c:	bf4c      	ite	mi
 8010d9e:	2001      	movmi	r0, #1
 8010da0:	2000      	movpl	r0, #0
 8010da2:	e6c7      	b.n	8010b34 <__ieee754_powf+0x140>
 8010da4:	d138      	bne.n	8010e18 <__ieee754_powf+0x424>
 8010da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010daa:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db2:	dbea      	blt.n	8010d8a <__ieee754_powf+0x396>
 8010db4:	e7ee      	b.n	8010d94 <__ieee754_powf+0x3a0>
 8010db6:	bf00      	nop
 8010db8:	00000000 	.word	0x00000000
 8010dbc:	3f7ffff3 	.word	0x3f7ffff3
 8010dc0:	3f800007 	.word	0x3f800007
 8010dc4:	3eaaaaab 	.word	0x3eaaaaab
 8010dc8:	3fb8aa00 	.word	0x3fb8aa00
 8010dcc:	3fb8aa3b 	.word	0x3fb8aa3b
 8010dd0:	36eca570 	.word	0x36eca570
 8010dd4:	4b800000 	.word	0x4b800000
 8010dd8:	001cc471 	.word	0x001cc471
 8010ddc:	005db3d6 	.word	0x005db3d6
 8010de0:	080117d0 	.word	0x080117d0
 8010de4:	fffff000 	.word	0xfffff000
 8010de8:	3e6c3255 	.word	0x3e6c3255
 8010dec:	3e53f142 	.word	0x3e53f142
 8010df0:	3e8ba305 	.word	0x3e8ba305
 8010df4:	3edb6db7 	.word	0x3edb6db7
 8010df8:	3f19999a 	.word	0x3f19999a
 8010dfc:	080117c0 	.word	0x080117c0
 8010e00:	3f76384f 	.word	0x3f76384f
 8010e04:	3f763800 	.word	0x3f763800
 8010e08:	369dc3a0 	.word	0x369dc3a0
 8010e0c:	080117c8 	.word	0x080117c8
 8010e10:	3338aa3c 	.word	0x3338aa3c
 8010e14:	43160000 	.word	0x43160000
 8010e18:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8010e1c:	d96f      	bls.n	8010efe <__ieee754_powf+0x50a>
 8010e1e:	15db      	asrs	r3, r3, #23
 8010e20:	3b7e      	subs	r3, #126	@ 0x7e
 8010e22:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8010e26:	4118      	asrs	r0, r3
 8010e28:	4408      	add	r0, r1
 8010e2a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010e2e:	4a4e      	ldr	r2, [pc, #312]	@ (8010f68 <__ieee754_powf+0x574>)
 8010e30:	3b7f      	subs	r3, #127	@ 0x7f
 8010e32:	411a      	asrs	r2, r3
 8010e34:	4002      	ands	r2, r0
 8010e36:	ee07 2a10 	vmov	s14, r2
 8010e3a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8010e3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010e42:	f1c3 0317 	rsb	r3, r3, #23
 8010e46:	4118      	asrs	r0, r3
 8010e48:	2900      	cmp	r1, #0
 8010e4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010e4e:	bfb8      	it	lt
 8010e50:	4240      	neglt	r0, r0
 8010e52:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8010e56:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8010f6c <__ieee754_powf+0x578>
 8010e5a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8010f70 <__ieee754_powf+0x57c>
 8010e5e:	ee16 3a90 	vmov	r3, s13
 8010e62:	f36f 030b 	bfc	r3, #0, #12
 8010e66:	ee06 3a90 	vmov	s13, r3
 8010e6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010e6e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010e72:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010e76:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8010f74 <__ieee754_powf+0x580>
 8010e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010e7e:	eee0 7a87 	vfma.f32	s15, s1, s14
 8010e82:	eeb0 7a67 	vmov.f32	s14, s15
 8010e86:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010e8a:	eef0 5a47 	vmov.f32	s11, s14
 8010e8e:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8010e92:	ee67 6a07 	vmul.f32	s13, s14, s14
 8010e96:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010e9a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8010f78 <__ieee754_powf+0x584>
 8010e9e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8010f7c <__ieee754_powf+0x588>
 8010ea2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010ea6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8010f80 <__ieee754_powf+0x58c>
 8010eaa:	eee6 5a26 	vfma.f32	s11, s12, s13
 8010eae:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8010f84 <__ieee754_powf+0x590>
 8010eb2:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8010eb6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010f88 <__ieee754_powf+0x594>
 8010eba:	eee6 5a26 	vfma.f32	s11, s12, s13
 8010ebe:	eeb0 6a47 	vmov.f32	s12, s14
 8010ec2:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8010ec6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010eca:	ee67 5a06 	vmul.f32	s11, s14, s12
 8010ece:	ee36 6a66 	vsub.f32	s12, s12, s13
 8010ed2:	eee7 7a27 	vfma.f32	s15, s14, s15
 8010ed6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8010eda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010ede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ee2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010ee6:	ee10 3a10 	vmov	r3, s0
 8010eea:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8010eee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010ef2:	da06      	bge.n	8010f02 <__ieee754_powf+0x50e>
 8010ef4:	f000 f872 	bl	8010fdc <scalbnf>
 8010ef8:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010efc:	e592      	b.n	8010a24 <__ieee754_powf+0x30>
 8010efe:	2000      	movs	r0, #0
 8010f00:	e7a7      	b.n	8010e52 <__ieee754_powf+0x45e>
 8010f02:	ee00 3a10 	vmov	s0, r3
 8010f06:	e7f7      	b.n	8010ef8 <__ieee754_powf+0x504>
 8010f08:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010f0c:	e58a      	b.n	8010a24 <__ieee754_powf+0x30>
 8010f0e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8010f8c <__ieee754_powf+0x598>
 8010f12:	e587      	b.n	8010a24 <__ieee754_powf+0x30>
 8010f14:	eeb0 0a48 	vmov.f32	s0, s16
 8010f18:	e584      	b.n	8010a24 <__ieee754_powf+0x30>
 8010f1a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010f1e:	f43f adbb 	beq.w	8010a98 <__ieee754_powf+0xa4>
 8010f22:	2502      	movs	r5, #2
 8010f24:	eeb0 0a48 	vmov.f32	s0, s16
 8010f28:	f000 f992 	bl	8011250 <fabsf>
 8010f2c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8010f30:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8010f34:	4647      	mov	r7, r8
 8010f36:	d003      	beq.n	8010f40 <__ieee754_powf+0x54c>
 8010f38:	f1b8 0f00 	cmp.w	r8, #0
 8010f3c:	f47f addb 	bne.w	8010af6 <__ieee754_powf+0x102>
 8010f40:	2c00      	cmp	r4, #0
 8010f42:	bfbc      	itt	lt
 8010f44:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8010f48:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8010f4c:	2e00      	cmp	r6, #0
 8010f4e:	f6bf ad69 	bge.w	8010a24 <__ieee754_powf+0x30>
 8010f52:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8010f56:	ea58 0805 	orrs.w	r8, r8, r5
 8010f5a:	f47f adc7 	bne.w	8010aec <__ieee754_powf+0xf8>
 8010f5e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010f62:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010f66:	e55d      	b.n	8010a24 <__ieee754_powf+0x30>
 8010f68:	ff800000 	.word	0xff800000
 8010f6c:	3f317218 	.word	0x3f317218
 8010f70:	3f317200 	.word	0x3f317200
 8010f74:	35bfbe8c 	.word	0x35bfbe8c
 8010f78:	b5ddea0e 	.word	0xb5ddea0e
 8010f7c:	3331bb4c 	.word	0x3331bb4c
 8010f80:	388ab355 	.word	0x388ab355
 8010f84:	bb360b61 	.word	0xbb360b61
 8010f88:	3e2aaaab 	.word	0x3e2aaaab
 8010f8c:	00000000 	.word	0x00000000

08010f90 <with_errnof>:
 8010f90:	b510      	push	{r4, lr}
 8010f92:	ed2d 8b02 	vpush	{d8}
 8010f96:	eeb0 8a40 	vmov.f32	s16, s0
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	f7fc ff1c 	bl	800ddd8 <__errno>
 8010fa0:	eeb0 0a48 	vmov.f32	s0, s16
 8010fa4:	ecbd 8b02 	vpop	{d8}
 8010fa8:	6004      	str	r4, [r0, #0]
 8010faa:	bd10      	pop	{r4, pc}

08010fac <xflowf>:
 8010fac:	b130      	cbz	r0, 8010fbc <xflowf+0x10>
 8010fae:	eef1 7a40 	vneg.f32	s15, s0
 8010fb2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010fb6:	2022      	movs	r0, #34	@ 0x22
 8010fb8:	f7ff bfea 	b.w	8010f90 <with_errnof>
 8010fbc:	eef0 7a40 	vmov.f32	s15, s0
 8010fc0:	e7f7      	b.n	8010fb2 <xflowf+0x6>
	...

08010fc4 <__math_uflowf>:
 8010fc4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010fcc <__math_uflowf+0x8>
 8010fc8:	f7ff bff0 	b.w	8010fac <xflowf>
 8010fcc:	10000000 	.word	0x10000000

08010fd0 <__math_oflowf>:
 8010fd0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010fd8 <__math_oflowf+0x8>
 8010fd4:	f7ff bfea 	b.w	8010fac <xflowf>
 8010fd8:	70000000 	.word	0x70000000

08010fdc <scalbnf>:
 8010fdc:	ee10 3a10 	vmov	r3, s0
 8010fe0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010fe4:	d02b      	beq.n	801103e <scalbnf+0x62>
 8010fe6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010fea:	d302      	bcc.n	8010ff2 <scalbnf+0x16>
 8010fec:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ff0:	4770      	bx	lr
 8010ff2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010ff6:	d123      	bne.n	8011040 <scalbnf+0x64>
 8010ff8:	4b24      	ldr	r3, [pc, #144]	@ (801108c <scalbnf+0xb0>)
 8010ffa:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011090 <scalbnf+0xb4>
 8010ffe:	4298      	cmp	r0, r3
 8011000:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011004:	db17      	blt.n	8011036 <scalbnf+0x5a>
 8011006:	ee10 3a10 	vmov	r3, s0
 801100a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801100e:	3a19      	subs	r2, #25
 8011010:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011014:	4288      	cmp	r0, r1
 8011016:	dd15      	ble.n	8011044 <scalbnf+0x68>
 8011018:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011094 <scalbnf+0xb8>
 801101c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011098 <scalbnf+0xbc>
 8011020:	ee10 3a10 	vmov	r3, s0
 8011024:	eeb0 7a67 	vmov.f32	s14, s15
 8011028:	2b00      	cmp	r3, #0
 801102a:	bfb8      	it	lt
 801102c:	eef0 7a66 	vmovlt.f32	s15, s13
 8011030:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011034:	4770      	bx	lr
 8011036:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801109c <scalbnf+0xc0>
 801103a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801103e:	4770      	bx	lr
 8011040:	0dd2      	lsrs	r2, r2, #23
 8011042:	e7e5      	b.n	8011010 <scalbnf+0x34>
 8011044:	4410      	add	r0, r2
 8011046:	28fe      	cmp	r0, #254	@ 0xfe
 8011048:	dce6      	bgt.n	8011018 <scalbnf+0x3c>
 801104a:	2800      	cmp	r0, #0
 801104c:	dd06      	ble.n	801105c <scalbnf+0x80>
 801104e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011052:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011056:	ee00 3a10 	vmov	s0, r3
 801105a:	4770      	bx	lr
 801105c:	f110 0f16 	cmn.w	r0, #22
 8011060:	da09      	bge.n	8011076 <scalbnf+0x9a>
 8011062:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801109c <scalbnf+0xc0>
 8011066:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80110a0 <scalbnf+0xc4>
 801106a:	ee10 3a10 	vmov	r3, s0
 801106e:	eeb0 7a67 	vmov.f32	s14, s15
 8011072:	2b00      	cmp	r3, #0
 8011074:	e7d9      	b.n	801102a <scalbnf+0x4e>
 8011076:	3019      	adds	r0, #25
 8011078:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801107c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011080:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80110a4 <scalbnf+0xc8>
 8011084:	ee07 3a90 	vmov	s15, r3
 8011088:	e7d7      	b.n	801103a <scalbnf+0x5e>
 801108a:	bf00      	nop
 801108c:	ffff3cb0 	.word	0xffff3cb0
 8011090:	4c000000 	.word	0x4c000000
 8011094:	7149f2ca 	.word	0x7149f2ca
 8011098:	f149f2ca 	.word	0xf149f2ca
 801109c:	0da24260 	.word	0x0da24260
 80110a0:	8da24260 	.word	0x8da24260
 80110a4:	33000000 	.word	0x33000000

080110a8 <atanf>:
 80110a8:	b538      	push	{r3, r4, r5, lr}
 80110aa:	ee10 5a10 	vmov	r5, s0
 80110ae:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80110b2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80110b6:	eef0 7a40 	vmov.f32	s15, s0
 80110ba:	d310      	bcc.n	80110de <atanf+0x36>
 80110bc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80110c0:	d904      	bls.n	80110cc <atanf+0x24>
 80110c2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80110c6:	eeb0 0a67 	vmov.f32	s0, s15
 80110ca:	bd38      	pop	{r3, r4, r5, pc}
 80110cc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011204 <atanf+0x15c>
 80110d0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011208 <atanf+0x160>
 80110d4:	2d00      	cmp	r5, #0
 80110d6:	bfc8      	it	gt
 80110d8:	eef0 7a47 	vmovgt.f32	s15, s14
 80110dc:	e7f3      	b.n	80110c6 <atanf+0x1e>
 80110de:	4b4b      	ldr	r3, [pc, #300]	@ (801120c <atanf+0x164>)
 80110e0:	429c      	cmp	r4, r3
 80110e2:	d810      	bhi.n	8011106 <atanf+0x5e>
 80110e4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80110e8:	d20a      	bcs.n	8011100 <atanf+0x58>
 80110ea:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011210 <atanf+0x168>
 80110ee:	ee30 7a07 	vadd.f32	s14, s0, s14
 80110f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80110f6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80110fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110fe:	dce2      	bgt.n	80110c6 <atanf+0x1e>
 8011100:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011104:	e013      	b.n	801112e <atanf+0x86>
 8011106:	f000 f8a3 	bl	8011250 <fabsf>
 801110a:	4b42      	ldr	r3, [pc, #264]	@ (8011214 <atanf+0x16c>)
 801110c:	429c      	cmp	r4, r3
 801110e:	d84f      	bhi.n	80111b0 <atanf+0x108>
 8011110:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011114:	429c      	cmp	r4, r3
 8011116:	d841      	bhi.n	801119c <atanf+0xf4>
 8011118:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801111c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011120:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011124:	2300      	movs	r3, #0
 8011126:	ee30 0a27 	vadd.f32	s0, s0, s15
 801112a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801112e:	1c5a      	adds	r2, r3, #1
 8011130:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011134:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011218 <atanf+0x170>
 8011138:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801121c <atanf+0x174>
 801113c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011220 <atanf+0x178>
 8011140:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011144:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011148:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011224 <atanf+0x17c>
 801114c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011150:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8011228 <atanf+0x180>
 8011154:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011158:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801122c <atanf+0x184>
 801115c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011160:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011230 <atanf+0x188>
 8011164:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011168:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011234 <atanf+0x18c>
 801116c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011170:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011238 <atanf+0x190>
 8011174:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011178:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801123c <atanf+0x194>
 801117c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011180:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011240 <atanf+0x198>
 8011184:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011188:	ee27 7a26 	vmul.f32	s14, s14, s13
 801118c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011190:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011194:	d121      	bne.n	80111da <atanf+0x132>
 8011196:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801119a:	e794      	b.n	80110c6 <atanf+0x1e>
 801119c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80111a0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80111a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80111a8:	2301      	movs	r3, #1
 80111aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80111ae:	e7be      	b.n	801112e <atanf+0x86>
 80111b0:	4b24      	ldr	r3, [pc, #144]	@ (8011244 <atanf+0x19c>)
 80111b2:	429c      	cmp	r4, r3
 80111b4:	d80b      	bhi.n	80111ce <atanf+0x126>
 80111b6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80111ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80111be:	eea0 7a27 	vfma.f32	s14, s0, s15
 80111c2:	2302      	movs	r3, #2
 80111c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80111c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111cc:	e7af      	b.n	801112e <atanf+0x86>
 80111ce:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80111d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80111d6:	2303      	movs	r3, #3
 80111d8:	e7a9      	b.n	801112e <atanf+0x86>
 80111da:	4a1b      	ldr	r2, [pc, #108]	@ (8011248 <atanf+0x1a0>)
 80111dc:	491b      	ldr	r1, [pc, #108]	@ (801124c <atanf+0x1a4>)
 80111de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80111e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80111e6:	edd3 6a00 	vldr	s13, [r3]
 80111ea:	ee37 7a66 	vsub.f32	s14, s14, s13
 80111ee:	2d00      	cmp	r5, #0
 80111f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80111f4:	edd2 7a00 	vldr	s15, [r2]
 80111f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111fc:	bfb8      	it	lt
 80111fe:	eef1 7a67 	vneglt.f32	s15, s15
 8011202:	e760      	b.n	80110c6 <atanf+0x1e>
 8011204:	bfc90fdb 	.word	0xbfc90fdb
 8011208:	3fc90fdb 	.word	0x3fc90fdb
 801120c:	3edfffff 	.word	0x3edfffff
 8011210:	7149f2ca 	.word	0x7149f2ca
 8011214:	3f97ffff 	.word	0x3f97ffff
 8011218:	3c8569d7 	.word	0x3c8569d7
 801121c:	3d4bda59 	.word	0x3d4bda59
 8011220:	bd6ef16b 	.word	0xbd6ef16b
 8011224:	3d886b35 	.word	0x3d886b35
 8011228:	3dba2e6e 	.word	0x3dba2e6e
 801122c:	3e124925 	.word	0x3e124925
 8011230:	3eaaaaab 	.word	0x3eaaaaab
 8011234:	bd15a221 	.word	0xbd15a221
 8011238:	bd9d8795 	.word	0xbd9d8795
 801123c:	bde38e38 	.word	0xbde38e38
 8011240:	be4ccccd 	.word	0xbe4ccccd
 8011244:	401bffff 	.word	0x401bffff
 8011248:	080117e8 	.word	0x080117e8
 801124c:	080117d8 	.word	0x080117d8

08011250 <fabsf>:
 8011250:	ee10 3a10 	vmov	r3, s0
 8011254:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011258:	ee00 3a10 	vmov	s0, r3
 801125c:	4770      	bx	lr
	...

08011260 <_init>:
 8011260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011262:	bf00      	nop
 8011264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011266:	bc08      	pop	{r3}
 8011268:	469e      	mov	lr, r3
 801126a:	4770      	bx	lr

0801126c <_fini>:
 801126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801126e:	bf00      	nop
 8011270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011272:	bc08      	pop	{r3}
 8011274:	469e      	mov	lr, r3
 8011276:	4770      	bx	lr
