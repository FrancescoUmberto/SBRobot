
self-balancing-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005800  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080059d0  080059d0  000069d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a34  08005a34  000073b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005a34  08005a34  00006a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a3c  08005a3c  000073b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a3c  08005a3c  00006a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a40  08005a40  00006a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003b4  20000000  08005a44  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  200003b4  08005df8  000073b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007dc  08005df8  000077dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000073b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bdc  00000000  00000000  000073e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4b  00000000  00000000  00019fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0001cf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8e  00000000  00000000  0001df38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002399d  00000000  00000000  0001ebc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e9e  00000000  00000000  00042563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d342a  00000000  00000000  00057401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a82b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000483c  00000000  00000000  0012a870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0012f0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200003b4 	.word	0x200003b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080059b8 	.word	0x080059b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200003b8 	.word	0x200003b8
 800020c:	080059b8 	.word	0x080059b8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b10:	f000 b988 	b.w	8000e24 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	468e      	mov	lr, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d962      	bls.n	8000c08 <__udivmoddi4+0xdc>
 8000b42:	fab2 f682 	clz	r6, r2
 8000b46:	b14e      	cbz	r6, 8000b5c <__udivmoddi4+0x30>
 8000b48:	f1c6 0320 	rsb	r3, r6, #32
 8000b4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	40b7      	lsls	r7, r6
 8000b56:	ea43 0808 	orr.w	r8, r3, r8
 8000b5a:	40b4      	lsls	r4, r6
 8000b5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b72:	fb01 f20c 	mul.w	r2, r1, ip
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b80:	f080 80ea 	bcs.w	8000d58 <__udivmoddi4+0x22c>
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f240 80e7 	bls.w	8000d58 <__udivmoddi4+0x22c>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	1a9a      	subs	r2, r3, r2
 8000b90:	b2a3      	uxth	r3, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba2:	459c      	cmp	ip, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x8e>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000bac:	f080 80d6 	bcs.w	8000d5c <__udivmoddi4+0x230>
 8000bb0:	459c      	cmp	ip, r3
 8000bb2:	f240 80d3 	bls.w	8000d5c <__udivmoddi4+0x230>
 8000bb6:	443b      	add	r3, r7
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bbe:	eba3 030c 	sub.w	r3, r3, ip
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11d      	cbz	r5, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40f3      	lsrs	r3, r6
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e9c5 3200 	strd	r3, r2, [r5]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d905      	bls.n	8000be2 <__udivmoddi4+0xb6>
 8000bd6:	b10d      	cbz	r5, 8000bdc <__udivmoddi4+0xb0>
 8000bd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4608      	mov	r0, r1
 8000be0:	e7f5      	b.n	8000bce <__udivmoddi4+0xa2>
 8000be2:	fab3 f183 	clz	r1, r3
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d146      	bne.n	8000c78 <__udivmoddi4+0x14c>
 8000bea:	4573      	cmp	r3, lr
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xc8>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 8105 	bhi.w	8000dfe <__udivmoddi4+0x2d2>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	4690      	mov	r8, r2
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e5      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c02:	e9c5 4800 	strd	r4, r8, [r5]
 8000c06:	e7e2      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f000 8090 	beq.w	8000d2e <__udivmoddi4+0x202>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	f040 80a4 	bne.w	8000d60 <__udivmoddi4+0x234>
 8000c18:	1a8a      	subs	r2, r1, r2
 8000c1a:	0c03      	lsrs	r3, r0, #16
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c32:	fb04 f20c 	mul.w	r2, r4, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x11e>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x11c>
 8000c42:	429a      	cmp	r2, r3
 8000c44:	f200 80e0 	bhi.w	8000e08 <__udivmoddi4+0x2dc>
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c58:	fb02 f404 	mul.w	r4, r2, r4
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x144>
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x142>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f200 80ca 	bhi.w	8000e02 <__udivmoddi4+0x2d6>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	1b1b      	subs	r3, r3, r4
 8000c72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c76:	e7a5      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c78:	f1c1 0620 	rsb	r6, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c82:	431f      	orrs	r7, r3
 8000c84:	fa0e f401 	lsl.w	r4, lr, r1
 8000c88:	fa20 f306 	lsr.w	r3, r0, r6
 8000c8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	fa1f fc87 	uxth.w	ip, r7
 8000c9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x1a0>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000cbe:	f080 809c 	bcs.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8099 	bls.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	fa1f fe83 	uxth.w	lr, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1ce>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000cee:	f080 8082 	bcs.w	8000df6 <__udivmoddi4+0x2ca>
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d97f      	bls.n	8000df6 <__udivmoddi4+0x2ca>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfe:	eba4 040c 	sub.w	r4, r4, ip
 8000d02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d06:	4564      	cmp	r4, ip
 8000d08:	4673      	mov	r3, lr
 8000d0a:	46e1      	mov	r9, ip
 8000d0c:	d362      	bcc.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d0e:	d05f      	beq.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d10:	b15d      	cbz	r5, 8000d2a <__udivmoddi4+0x1fe>
 8000d12:	ebb8 0203 	subs.w	r2, r8, r3
 8000d16:	eb64 0409 	sbc.w	r4, r4, r9
 8000d1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d22:	431e      	orrs	r6, r3
 8000d24:	40cc      	lsrs	r4, r1
 8000d26:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e74f      	b.n	8000bce <__udivmoddi4+0xa2>
 8000d2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d32:	0c01      	lsrs	r1, r0, #16
 8000d34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d38:	b280      	uxth	r0, r0
 8000d3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4638      	mov	r0, r7
 8000d42:	463c      	mov	r4, r7
 8000d44:	46b8      	mov	r8, r7
 8000d46:	46be      	mov	lr, r7
 8000d48:	2620      	movs	r6, #32
 8000d4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4e:	eba2 0208 	sub.w	r2, r2, r8
 8000d52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d56:	e766      	b.n	8000c26 <__udivmoddi4+0xfa>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	e718      	b.n	8000b8e <__udivmoddi4+0x62>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	e72c      	b.n	8000bba <__udivmoddi4+0x8e>
 8000d60:	f1c6 0220 	rsb	r2, r6, #32
 8000d64:	fa2e f302 	lsr.w	r3, lr, r2
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b1      	lsls	r1, r6
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d74:	430a      	orrs	r2, r1
 8000d76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb08 f904 	mul.w	r9, r8, r4
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	4589      	cmp	r9, r1
 8000d8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d92:	b280      	uxth	r0, r0
 8000d94:	d93e      	bls.n	8000e14 <__udivmoddi4+0x2e8>
 8000d96:	1879      	adds	r1, r7, r1
 8000d98:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d9c:	d201      	bcs.n	8000da2 <__udivmoddi4+0x276>
 8000d9e:	4589      	cmp	r9, r1
 8000da0:	d81f      	bhi.n	8000de2 <__udivmoddi4+0x2b6>
 8000da2:	eba1 0109 	sub.w	r1, r1, r9
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fb09 f804 	mul.w	r8, r9, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	b292      	uxth	r2, r2
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	4542      	cmp	r2, r8
 8000dba:	d229      	bcs.n	8000e10 <__udivmoddi4+0x2e4>
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000dc2:	d2c4      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc4:	4542      	cmp	r2, r8
 8000dc6:	d2c2      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dcc:	443a      	add	r2, r7
 8000dce:	e7be      	b.n	8000d4e <__udivmoddi4+0x222>
 8000dd0:	45f0      	cmp	r8, lr
 8000dd2:	d29d      	bcs.n	8000d10 <__udivmoddi4+0x1e4>
 8000dd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ddc:	3801      	subs	r0, #1
 8000dde:	46e1      	mov	r9, ip
 8000de0:	e796      	b.n	8000d10 <__udivmoddi4+0x1e4>
 8000de2:	eba7 0909 	sub.w	r9, r7, r9
 8000de6:	4449      	add	r1, r9
 8000de8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df0:	fb09 f804 	mul.w	r8, r9, r4
 8000df4:	e7db      	b.n	8000dae <__udivmoddi4+0x282>
 8000df6:	4673      	mov	r3, lr
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1ce>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	e766      	b.n	8000ccc <__udivmoddi4+0x1a0>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e6fd      	b.n	8000bfe <__udivmoddi4+0xd2>
 8000e02:	443b      	add	r3, r7
 8000e04:	3a02      	subs	r2, #2
 8000e06:	e733      	b.n	8000c70 <__udivmoddi4+0x144>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	443b      	add	r3, r7
 8000e0e:	e71c      	b.n	8000c4a <__udivmoddi4+0x11e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x222>
 8000e14:	eba1 0109 	sub.w	r1, r1, r9
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fb09 f804 	mul.w	r8, r9, r4
 8000e22:	e7c4      	b.n	8000dae <__udivmoddi4+0x282>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b73      	ldr	r3, [pc, #460]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a72      	ldr	r2, [pc, #456]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b70      	ldr	r3, [pc, #448]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b6c      	ldr	r3, [pc, #432]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a6b      	ldr	r2, [pc, #428]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b69      	ldr	r3, [pc, #420]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	4b65      	ldr	r3, [pc, #404]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a64      	ldr	r2, [pc, #400]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b62      	ldr	r3, [pc, #392]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b5e      	ldr	r3, [pc, #376]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a5d      	ldr	r2, [pc, #372]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	4b57      	ldr	r3, [pc, #348]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a56      	ldr	r2, [pc, #344]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b54      	ldr	r3, [pc, #336]	@ (8001010 <MX_GPIO_Init+0x1e8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2130      	movs	r1, #48	@ 0x30
 8000ece:	4851      	ldr	r0, [pc, #324]	@ (8001014 <MX_GPIO_Init+0x1ec>)
 8000ed0:	f001 fd2a 	bl	8002928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_DIR_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2111      	movs	r1, #17
 8000ed8:	484f      	ldr	r0, [pc, #316]	@ (8001018 <MX_GPIO_Init+0x1f0>)
 8000eda:	f001 fd25 	bl	8002928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BTN2_GPIO_Port, LED_BTN2_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee4:	484d      	ldr	r0, [pc, #308]	@ (800101c <MX_GPIO_Init+0x1f4>)
 8000ee6:	f001 fd1f 	bl	8002928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ef0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	4846      	ldr	r0, [pc, #280]	@ (800101c <MX_GPIO_Init+0x1f4>)
 8000f02:	f001 fb7d 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC6 PC7 PC8 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f06:	f641 53dd 	movw	r3, #7645	@ 0x1ddd
 8000f0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4840      	ldr	r0, [pc, #256]	@ (800101c <MX_GPIO_Init+0x1f4>)
 8000f1c:	f001 fb70 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_DIR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|LD2_Pin;
 8000f20:	2330      	movs	r3, #48	@ 0x30
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4837      	ldr	r0, [pc, #220]	@ (8001014 <MX_GPIO_Init+0x1ec>)
 8000f38:	f001 fb62 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8000f3c:	2320      	movs	r3, #32
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f40:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4832      	ldr	r0, [pc, #200]	@ (800101c <MX_GPIO_Init+0x1f4>)
 8000f52:	f001 fb55 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 8000f56:	2301      	movs	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	482a      	ldr	r0, [pc, #168]	@ (8001018 <MX_GPIO_Init+0x1f0>)
 8000f6e:	f001 fb47 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000f72:	f24f 3326 	movw	r3, #62246	@ 0xf326
 8000f76:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4824      	ldr	r0, [pc, #144]	@ (8001018 <MX_GPIO_Init+0x1f0>)
 8000f88:	f001 fb3a 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BTN2_Pin */
  GPIO_InitStruct.Pin = LED_BTN2_Pin;
 8000f8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BTN2_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481d      	ldr	r0, [pc, #116]	@ (800101c <MX_GPIO_Init+0x1f4>)
 8000fa6:	f001 fb2b 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000faa:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 8000fae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4815      	ldr	r0, [pc, #84]	@ (8001014 <MX_GPIO_Init+0x1ec>)
 8000fc0:	f001 fb1e 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4812      	ldr	r0, [pc, #72]	@ (8001020 <MX_GPIO_Init+0x1f8>)
 8000fd8:	f001 fb12 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4809      	ldr	r0, [pc, #36]	@ (8001018 <MX_GPIO_Init+0x1f0>)
 8000ff4:	f001 fb04 	bl	8002600 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2017      	movs	r0, #23
 8000ffe:	f001 fac8 	bl	8002592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001002:	2017      	movs	r0, #23
 8001004:	f001 fae1 	bl	80025ca <HAL_NVIC_EnableIRQ>

}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	@ 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400
 800101c:	40020800 	.word	0x40020800
 8001020:	40020c00 	.word	0x40020c00

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001028:	f001 f942 	bl	80022b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102c:	f000 f83c 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001030:	f7ff fefa 	bl	8000e28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001034:	f000 fd5c 	bl	8001af0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001038:	f000 fae8 	bl	800160c <MX_TIM4_Init>
  MX_TIM6_Init();
 800103c:	f000 fb94 	bl	8001768 <MX_TIM6_Init>
  MX_SPI2_Init();
 8001040:	f000 f8de 	bl	8001200 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001044:	f000 fa36 	bl	80014b4 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001048:	f000 fbc4 	bl	80017d4 <MX_TIM7_Init>
  MX_TIM3_Init();
 800104c:	f000 fa8a 	bl	8001564 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001050:	f000 fb30 	bl	80016b4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);						// Display timer (0.1MHz)
 8001054:	480e      	ldr	r0, [pc, #56]	@ (8001090 <main+0x6c>)
 8001056:	f002 fd95 	bl	8003b84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);						// Timeline
 800105a:	480e      	ldr	r0, [pc, #56]	@ (8001094 <main+0x70>)
 800105c:	f002 fd92 	bl	8003b84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		// Encoder right
 8001060:	213c      	movs	r1, #60	@ 0x3c
 8001062:	480d      	ldr	r0, [pc, #52]	@ (8001098 <main+0x74>)
 8001064:	f002 ffbc 	bl	8003fe0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);		// Encoder left
 8001068:	213c      	movs	r1, #60	@ 0x3c
 800106a:	480c      	ldr	r0, [pc, #48]	@ (800109c <main+0x78>)
 800106c:	f002 ffb8 	bl	8003fe0 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);				// Stepper left
 8001070:	2104      	movs	r1, #4
 8001072:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <main+0x7c>)
 8001074:	f002 fe46 	bl	8003d04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);				// Stepper right
 8001078:	2100      	movs	r1, #0
 800107a:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <main+0x80>)
 800107c:	f002 fe42 	bl	8003d04 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(50);
 8001080:	2032      	movs	r0, #50	@ 0x32
 8001082:	f001 f987 	bl	8002394 <HAL_Delay>
  Robot_init();
 8001086:	f000 ffd5 	bl	8002034 <Robot_init>
//  MAX72_Start_Scrolling("Work in progress...");
  while (1)
 800108a:	bf00      	nop
 800108c:	e7fd      	b.n	800108a <main+0x66>
 800108e:	bf00      	nop
 8001090:	2000054c 	.word	0x2000054c
 8001094:	20000594 	.word	0x20000594
 8001098:	20000474 	.word	0x20000474
 800109c:	200004bc 	.word	0x200004bc
 80010a0:	2000042c 	.word	0x2000042c
 80010a4:	20000504 	.word	0x20000504

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	@ 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	2234      	movs	r2, #52	@ 0x34
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 f800 	bl	80050bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	4b2a      	ldr	r3, [pc, #168]	@ (800117c <SystemClock_Config+0xd4>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	4a29      	ldr	r2, [pc, #164]	@ (800117c <SystemClock_Config+0xd4>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	@ 0x40
 80010dc:	4b27      	ldr	r3, [pc, #156]	@ (800117c <SystemClock_Config+0xd4>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010e8:	2300      	movs	r3, #0
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <SystemClock_Config+0xd8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010f4:	4a22      	ldr	r2, [pc, #136]	@ (8001180 <SystemClock_Config+0xd8>)
 80010f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <SystemClock_Config+0xd8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001108:	2302      	movs	r3, #2
 800110a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110c:	2301      	movs	r3, #1
 800110e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001110:	2310      	movs	r3, #16
 8001112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001114:	2302      	movs	r3, #2
 8001116:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001118:	2300      	movs	r3, #0
 800111a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800111c:	2310      	movs	r3, #16
 800111e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001120:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001124:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001126:	2304      	movs	r3, #4
 8001128:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800112a:	2302      	movs	r3, #2
 800112c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800112e:	2302      	movs	r3, #2
 8001130:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4618      	mov	r0, r3
 8001138:	f001 ff8c 	bl	8003054 <HAL_RCC_OscConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001142:	f000 f857 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001146:	230f      	movs	r3, #15
 8001148:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114a:	2302      	movs	r3, #2
 800114c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001156:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	2102      	movs	r1, #2
 8001162:	4618      	mov	r0, r3
 8001164:	f001 fc2c 	bl	80029c0 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800116e:	f000 f841 	bl	80011f4 <Error_Handler>
  }
}
 8001172:	bf00      	nop
 8001174:	3750      	adds	r7, #80	@ 0x50
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d011      	beq.n	80011ba <HAL_TIM_PeriodElapsedCallback+0x36>
//		MAX72_Scroll_Timer_ISR(); // Scrolling function
	} else if (htim->Instance == TIM7) {
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a0b      	ldr	r2, [pc, #44]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d10c      	bne.n	80011ba <HAL_TIM_PeriodElapsedCallback+0x36>
		speed_control(&stepper_l);
 80011a0:	480a      	ldr	r0, [pc, #40]	@ (80011cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011a2:	f000 ff7d 	bl	80020a0 <speed_control>
		speed_control(&stepper_r);
 80011a6:	480a      	ldr	r0, [pc, #40]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80011a8:	f000 ff7a 	bl	80020a0 <speed_control>
//		MAX72_Print_Float(encoder_l.speed);
		MAX72_Print_Float(encoder_r.speed);
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80011ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	f000 fe57 	bl	8001e68 <MAX72_Print_Float>
	}
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40001000 	.word	0x40001000
 80011c8:	40001400 	.word	0x40001400
 80011cc:	20000670 	.word	0x20000670
 80011d0:	20000644 	.word	0x20000644
 80011d4:	20000634 	.word	0x20000634

080011d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_5) {
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2b20      	cmp	r3, #32
 80011e6:	d101      	bne.n	80011ec <HAL_GPIO_EXTI_Callback+0x14>
    on_click();
 80011e8:	f000 fcf4 	bl	8001bd4 <on_click>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <Error_Handler+0x8>

08001200 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001204:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <MX_SPI2_Init+0x68>)
 8001206:	4a19      	ldr	r2, [pc, #100]	@ (800126c <MX_SPI2_Init+0x6c>)
 8001208:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <MX_SPI2_Init+0x68>)
 800120c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001210:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <MX_SPI2_Init+0x68>)
 8001214:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001218:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <MX_SPI2_Init+0x68>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_SPI2_Init+0x68>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <MX_SPI2_Init+0x68>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_SPI2_Init+0x68>)
 800122e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001232:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001234:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <MX_SPI2_Init+0x68>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <MX_SPI2_Init+0x68>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <MX_SPI2_Init+0x68>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <MX_SPI2_Init+0x68>)
 8001248:	2200      	movs	r2, #0
 800124a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_SPI2_Init+0x68>)
 800124e:	220a      	movs	r2, #10
 8001250:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_SPI2_Init+0x68>)
 8001254:	f002 f99c 	bl	8003590 <HAL_SPI_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800125e:	f7ff ffc9 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200003d0 	.word	0x200003d0
 800126c:	40003800 	.word	0x40003800

08001270 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	@ 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a28      	ldr	r2, [pc, #160]	@ (8001330 <HAL_SPI_MspInit+0xc0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d14a      	bne.n	8001328 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <HAL_SPI_MspInit+0xc4>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	4a26      	ldr	r2, [pc, #152]	@ (8001334 <HAL_SPI_MspInit+0xc4>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a2:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <HAL_SPI_MspInit+0xc4>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <HAL_SPI_MspInit+0xc4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001334 <HAL_SPI_MspInit+0xc4>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <HAL_SPI_MspInit+0xc4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <HAL_SPI_MspInit+0xc4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a18      	ldr	r2, [pc, #96]	@ (8001334 <HAL_SPI_MspInit+0xc4>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <HAL_SPI_MspInit+0xc4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012e6:	2302      	movs	r3, #2
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80012f6:	2307      	movs	r3, #7
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	480d      	ldr	r0, [pc, #52]	@ (8001338 <HAL_SPI_MspInit+0xc8>)
 8001302:	f001 f97d 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 8001306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001318:	2305      	movs	r3, #5
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	@ (800133c <HAL_SPI_MspInit+0xcc>)
 8001324:	f001 f96c 	bl	8002600 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	@ 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40003800 	.word	0x40003800
 8001334:	40023800 	.word	0x40023800
 8001338:	40020800 	.word	0x40020800
 800133c:	40020400 	.word	0x40020400

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <HAL_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	4a0f      	ldr	r2, [pc, #60]	@ (800138c <HAL_MspInit+0x4c>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001354:	6453      	str	r3, [r2, #68]	@ 0x44
 8001356:	4b0d      	ldr	r3, [pc, #52]	@ (800138c <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	4a08      	ldr	r2, [pc, #32]	@ (800138c <HAL_MspInit+0x4c>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	@ 0x40
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800137e:	2007      	movs	r0, #7
 8001380:	f001 f8fc 	bl	800257c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <NMI_Handler+0x4>

08001398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <MemManage_Handler+0x4>

080013a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e6:	f000 ffb5 	bl	8002354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}

080013ee <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 80013f2:	2020      	movs	r0, #32
 80013f4:	f001 facc 	bl	8002990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <TIM6_DAC_IRQHandler+0x10>)
 8001402:	f002 fe7b 	bl	80040fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000054c 	.word	0x2000054c

08001410 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <TIM7_IRQHandler+0x10>)
 8001416:	f002 fe71 	bl	80040fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000594 	.word	0x20000594

08001424 <_sbrk>:
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	@ (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
 8001454:	f003 fe3a 	bl	80050cc <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
 8001464:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20020000 	.word	0x20020000
 8001484:	00000400 	.word	0x00000400
 8001488:	20000428 	.word	0x20000428
 800148c:	200007e0 	.word	0x200007e0

08001490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	@ (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
 80014d2:	615a      	str	r2, [r3, #20]
 80014d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d6:	4b22      	ldr	r3, [pc, #136]	@ (8001560 <MX_TIM2_Init+0xac>)
 80014d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014de:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <MX_TIM2_Init+0xac>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <MX_TIM2_Init+0xac>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <MX_TIM2_Init+0xac>)
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <MX_TIM2_Init+0xac>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <MX_TIM2_Init+0xac>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014fe:	4818      	ldr	r0, [pc, #96]	@ (8001560 <MX_TIM2_Init+0xac>)
 8001500:	f002 fbb0 	bl	8003c64 <HAL_TIM_PWM_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800150a:	f7ff fe73 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001516:	f107 0320 	add.w	r3, r7, #32
 800151a:	4619      	mov	r1, r3
 800151c:	4810      	ldr	r0, [pc, #64]	@ (8001560 <MX_TIM2_Init+0xac>)
 800151e:	f003 fa43 	bl	80049a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001528:	f7ff fe64 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152c:	2360      	movs	r3, #96	@ 0x60
 800152e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2204      	movs	r2, #4
 8001540:	4619      	mov	r1, r3
 8001542:	4807      	ldr	r0, [pc, #28]	@ (8001560 <MX_TIM2_Init+0xac>)
 8001544:	f002 feca 	bl	80042dc <HAL_TIM_PWM_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800154e:	f7ff fe51 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001552:	4803      	ldr	r0, [pc, #12]	@ (8001560 <MX_TIM2_Init+0xac>)
 8001554:	f000 fa6e 	bl	8001a34 <HAL_TIM_MspPostInit>

}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	@ 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000042c 	.word	0x2000042c

08001564 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	@ 0x30
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2224      	movs	r2, #36	@ 0x24
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fda2 	bl	80050bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <MX_TIM3_Init+0xa0>)
 8001582:	4a21      	ldr	r2, [pc, #132]	@ (8001608 <MX_TIM3_Init+0xa4>)
 8001584:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001586:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <MX_TIM3_Init+0xa0>)
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <MX_TIM3_Init+0xa0>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <MX_TIM3_Init+0xa0>)
 8001594:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001598:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <MX_TIM3_Init+0xa0>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <MX_TIM3_Init+0xa0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015a6:	2303      	movs	r3, #3
 80015a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015ae:	2301      	movs	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015be:	2301      	movs	r3, #1
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	@ (8001604 <MX_TIM3_Init+0xa0>)
 80015d2:	f002 fc5f 	bl	8003e94 <HAL_TIM_Encoder_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015dc:	f7ff fe0a 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	@ (8001604 <MX_TIM3_Init+0xa0>)
 80015ee:	f003 f9db 	bl	80049a8 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80015f8:	f7ff fdfc 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	3730      	adds	r7, #48	@ 0x30
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000474 	.word	0x20000474
 8001608:	40000400 	.word	0x40000400

0800160c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	@ 0x30
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	2224      	movs	r2, #36	@ 0x24
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fd4e 	bl	80050bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001628:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <MX_TIM4_Init+0xa0>)
 800162a:	4a21      	ldr	r2, [pc, #132]	@ (80016b0 <MX_TIM4_Init+0xa4>)
 800162c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800162e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <MX_TIM4_Init+0xa0>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <MX_TIM4_Init+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8191;
 800163a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <MX_TIM4_Init+0xa0>)
 800163c:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001640:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <MX_TIM4_Init+0xa0>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b18      	ldr	r3, [pc, #96]	@ (80016ac <MX_TIM4_Init+0xa0>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800164e:	2303      	movs	r3, #3
 8001650:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001656:	2301      	movs	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001666:	2301      	movs	r3, #1
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	4619      	mov	r1, r3
 8001678:	480c      	ldr	r0, [pc, #48]	@ (80016ac <MX_TIM4_Init+0xa0>)
 800167a:	f002 fc0b 	bl	8003e94 <HAL_TIM_Encoder_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001684:	f7ff fdb6 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	@ (80016ac <MX_TIM4_Init+0xa0>)
 8001696:	f003 f987 	bl	80049a8 <HAL_TIMEx_MasterConfigSynchronization>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80016a0:	f7ff fda8 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	3730      	adds	r7, #48	@ 0x30
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200004bc 	.word	0x200004bc
 80016b0:	40000800 	.word	0x40000800

080016b4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	@ 0x28
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ba:	f107 0320 	add.w	r3, r7, #32
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
 80016d2:	615a      	str	r2, [r3, #20]
 80016d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016d6:	4b22      	ldr	r3, [pc, #136]	@ (8001760 <MX_TIM5_Init+0xac>)
 80016d8:	4a22      	ldr	r2, [pc, #136]	@ (8001764 <MX_TIM5_Init+0xb0>)
 80016da:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80016dc:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <MX_TIM5_Init+0xac>)
 80016de:	2200      	movs	r2, #0
 80016e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <MX_TIM5_Init+0xac>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <MX_TIM5_Init+0xac>)
 80016ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <MX_TIM5_Init+0xac>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_TIM5_Init+0xac>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80016fc:	4818      	ldr	r0, [pc, #96]	@ (8001760 <MX_TIM5_Init+0xac>)
 80016fe:	f002 fab1 	bl	8003c64 <HAL_TIM_PWM_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001708:	f7ff fd74 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001714:	f107 0320 	add.w	r3, r7, #32
 8001718:	4619      	mov	r1, r3
 800171a:	4811      	ldr	r0, [pc, #68]	@ (8001760 <MX_TIM5_Init+0xac>)
 800171c:	f003 f944 	bl	80049a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001726:	f7ff fd65 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172a:	2360      	movs	r3, #96	@ 0x60
 800172c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2200      	movs	r2, #0
 800173e:	4619      	mov	r1, r3
 8001740:	4807      	ldr	r0, [pc, #28]	@ (8001760 <MX_TIM5_Init+0xac>)
 8001742:	f002 fdcb 	bl	80042dc <HAL_TIM_PWM_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800174c:	f7ff fd52 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001750:	4803      	ldr	r0, [pc, #12]	@ (8001760 <MX_TIM5_Init+0xac>)
 8001752:	f000 f96f 	bl	8001a34 <HAL_TIM_MspPostInit>

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	@ 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000504 	.word	0x20000504
 8001764:	40000c00 	.word	0x40000c00

08001768 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176e:	463b      	mov	r3, r7
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <MX_TIM6_Init+0x64>)
 8001778:	4a15      	ldr	r2, [pc, #84]	@ (80017d0 <MX_TIM6_Init+0x68>)
 800177a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <MX_TIM6_Init+0x64>)
 800177e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001782:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_TIM6_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <MX_TIM6_Init+0x64>)
 800178c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001790:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_TIM6_Init+0x64>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001798:	480c      	ldr	r0, [pc, #48]	@ (80017cc <MX_TIM6_Init+0x64>)
 800179a:	f002 f9a3 	bl	8003ae4 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80017a4:	f7ff fd26 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017b0:	463b      	mov	r3, r7
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_TIM6_Init+0x64>)
 80017b6:	f003 f8f7 	bl	80049a8 <HAL_TIMEx_MasterConfigSynchronization>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80017c0:	f7ff fd18 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000054c 	.word	0x2000054c
 80017d0:	40001000 	.word	0x40001000

080017d4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017da:	463b      	mov	r3, r7
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <MX_TIM7_Init+0x64>)
 80017e4:	4a15      	ldr	r2, [pc, #84]	@ (800183c <MX_TIM7_Init+0x68>)
 80017e6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 499;
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <MX_TIM7_Init+0x64>)
 80017ea:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80017ee:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_TIM7_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <MX_TIM7_Init+0x64>)
 80017f8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80017fc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_TIM7_Init+0x64>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <MX_TIM7_Init+0x64>)
 8001806:	f002 f96d 	bl	8003ae4 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001810:	f7ff fcf0 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	@ (8001838 <MX_TIM7_Init+0x64>)
 8001822:	f003 f8c1 	bl	80049a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800182c:	f7ff fce2 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000594 	.word	0x20000594
 800183c:	40001400 	.word	0x40001400

08001840 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001850:	d10e      	bne.n	8001870 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <HAL_TIM_PWM_MspInit+0x64>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <HAL_TIM_PWM_MspInit+0x64>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6413      	str	r3, [r2, #64]	@ 0x40
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <HAL_TIM_PWM_MspInit+0x64>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800186e:	e012      	b.n	8001896 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <HAL_TIM_PWM_MspInit+0x68>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d10d      	bne.n	8001896 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_TIM_PWM_MspInit+0x64>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <HAL_TIM_PWM_MspInit+0x64>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6413      	str	r3, [r2, #64]	@ 0x40
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_TIM_PWM_MspInit+0x64>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40000c00 	.word	0x40000c00

080018ac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	@ 0x30
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a32      	ldr	r2, [pc, #200]	@ (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d12c      	bne.n	8001928 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	4a30      	ldr	r2, [pc, #192]	@ (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018de:	4b2e      	ldr	r3, [pc, #184]	@ (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	61bb      	str	r3, [r7, #24]
 80018e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a29      	ldr	r2, [pc, #164]	@ (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b27      	ldr	r3, [pc, #156]	@ (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 8001906:	23c0      	movs	r3, #192	@ 0xc0
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001916:	2302      	movs	r3, #2
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	481e      	ldr	r0, [pc, #120]	@ (800199c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001922:	f000 fe6d 	bl	8002600 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001926:	e030      	b.n	800198a <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d12b      	bne.n	800198a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	4a17      	ldr	r2, [pc, #92]	@ (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6413      	str	r3, [r2, #64]	@ 0x40
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a10      	ldr	r2, [pc, #64]	@ (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin|ENC2_CH2_Pin;
 800196a:	23c0      	movs	r3, #192	@ 0xc0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800197a:	2302      	movs	r3, #2
 800197c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	4807      	ldr	r0, [pc, #28]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001986:	f000 fe3b 	bl	8002600 <HAL_GPIO_Init>
}
 800198a:	bf00      	nop
 800198c:	3730      	adds	r7, #48	@ 0x30
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40000400 	.word	0x40000400
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000
 80019a0:	40000800 	.word	0x40000800
 80019a4:	40020400 	.word	0x40020400

080019a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a28 <HAL_TIM_Base_MspInit+0x80>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d116      	bne.n	80019e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 80019c4:	f043 0310 	orr.w	r3, r3, #16
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2036      	movs	r0, #54	@ 0x36
 80019dc:	f000 fdd9 	bl	8002592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019e0:	2036      	movs	r0, #54	@ 0x36
 80019e2:	f000 fdf2 	bl	80025ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80019e6:	e01a      	b.n	8001a1e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a10      	ldr	r2, [pc, #64]	@ (8001a30 <HAL_TIM_Base_MspInit+0x88>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d115      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	4a0c      	ldr	r2, [pc, #48]	@ (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 80019fc:	f043 0320 	orr.w	r3, r3, #32
 8001a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f003 0320 	and.w	r3, r3, #32
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	2037      	movs	r0, #55	@ 0x37
 8001a14:	f000 fdbd 	bl	8002592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a18:	2037      	movs	r0, #55	@ 0x37
 8001a1a:	f000 fdd6 	bl	80025ca <HAL_NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40001000 	.word	0x40001000
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40001400 	.word	0x40001400

08001a34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	@ 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a54:	d11e      	bne.n	8001a94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <HAL_TIM_MspPostInit+0xb0>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a21      	ldr	r2, [pc, #132]	@ (8001ae4 <HAL_TIM_MspPostInit+0xb0>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <HAL_TIM_MspPostInit+0xb0>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M2_PUL_Pin;
 8001a72:	2302      	movs	r3, #2
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a82:	2301      	movs	r3, #1
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_PUL_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4816      	ldr	r0, [pc, #88]	@ (8001ae8 <HAL_TIM_MspPostInit+0xb4>)
 8001a8e:	f000 fdb7 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001a92:	e022      	b.n	8001ada <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a14      	ldr	r2, [pc, #80]	@ (8001aec <HAL_TIM_MspPostInit+0xb8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d11d      	bne.n	8001ada <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <HAL_TIM_MspPostInit+0xb0>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae4 <HAL_TIM_MspPostInit+0xb0>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <HAL_TIM_MspPostInit+0xb0>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PUL_Pin;
 8001aba:	2301      	movs	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001aca:	2302      	movs	r3, #2
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_PUL_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4804      	ldr	r0, [pc, #16]	@ (8001ae8 <HAL_TIM_MspPostInit+0xb4>)
 8001ad6:	f000 fd93 	bl	8002600 <HAL_GPIO_Init>
}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	@ 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020000 	.word	0x40020000
 8001aec:	40000c00 	.word	0x40000c00

08001af0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <MX_USART2_UART_Init+0x50>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b28:	f002 ffce 	bl	8004ac8 <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b32:	f7ff fb5f 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200005dc 	.word	0x200005dc
 8001b40:	40004400 	.word	0x40004400

08001b44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	@ 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a19      	ldr	r2, [pc, #100]	@ (8001bc8 <HAL_UART_MspInit+0x84>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d12b      	bne.n	8001bbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <HAL_UART_MspInit+0x88>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	4a17      	ldr	r2, [pc, #92]	@ (8001bcc <HAL_UART_MspInit+0x88>)
 8001b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b76:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_UART_MspInit+0x88>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_UART_MspInit+0x88>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a10      	ldr	r2, [pc, #64]	@ (8001bcc <HAL_UART_MspInit+0x88>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <HAL_UART_MspInit+0x88>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b9e:	230c      	movs	r3, #12
 8001ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001baa:	2303      	movs	r3, #3
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bae:	2307      	movs	r3, #7
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	@ (8001bd0 <HAL_UART_MspInit+0x8c>)
 8001bba:	f000 fd21 	bl	8002600 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3728      	adds	r7, #40	@ 0x28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40004400 	.word	0x40004400
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <on_click>:
#define DEBOUNCE_DELAY 100 // ms

static uint32_t last_debounce_time = 0;
static uint8_t active = 0;

void on_click(){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY){
 8001bd8:	f000 fbd0 	bl	800237c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <on_click+0x6c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b64      	cmp	r3, #100	@ 0x64
 8001be6:	d929      	bls.n	8001c3c <on_click+0x68>
		last_debounce_time = HAL_GetTick();
 8001be8:	f000 fbc8 	bl	800237c <HAL_GetTick>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <on_click+0x6c>)
 8001bf0:	6013      	str	r3, [r2, #0]
		active ^= 1;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <on_click+0x70>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	f083 0301 	eor.w	r3, r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <on_click+0x70>)
 8001bfe:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001c00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c04:	4810      	ldr	r0, [pc, #64]	@ (8001c48 <on_click+0x74>)
 8001c06:	f000 fea8 	bl	800295a <HAL_GPIO_TogglePin>

		if(active){
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <on_click+0x70>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00a      	beq.n	8001c28 <on_click+0x54>
			set_speed(&stepper_l, 3);
 8001c12:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001c16:	480d      	ldr	r0, [pc, #52]	@ (8001c4c <on_click+0x78>)
 8001c18:	f000 faa6 	bl	8002168 <set_speed>
			set_speed(&stepper_r, 3);
 8001c1c:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001c20:	480b      	ldr	r0, [pc, #44]	@ (8001c50 <on_click+0x7c>)
 8001c22:	f000 faa1 	bl	8002168 <set_speed>
		} else{
			set_speed(&stepper_l, 0);
			set_speed(&stepper_r, 0);
		}
	}
}
 8001c26:	e009      	b.n	8001c3c <on_click+0x68>
			set_speed(&stepper_l, 0);
 8001c28:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001c54 <on_click+0x80>
 8001c2c:	4807      	ldr	r0, [pc, #28]	@ (8001c4c <on_click+0x78>)
 8001c2e:	f000 fa9b 	bl	8002168 <set_speed>
			set_speed(&stepper_r, 0);
 8001c32:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001c54 <on_click+0x80>
 8001c36:	4806      	ldr	r0, [pc, #24]	@ (8001c50 <on_click+0x7c>)
 8001c38:	f000 fa96 	bl	8002168 <set_speed>
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000624 	.word	0x20000624
 8001c44:	20000628 	.word	0x20000628
 8001c48:	40020800 	.word	0x40020800
 8001c4c:	20000670 	.word	0x20000670
 8001c50:	20000644 	.word	0x20000644
 8001c54:	00000000 	.word	0x00000000

08001c58 <MAX72_init>:
    {'~', {0b00000, 0b00000, 0b00000, 0b01001, 0b10110, 0b00000, 0b00000, 0b00000}},
};


void MAX72_init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
    uint8_t txBuf[8];
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e034      	b.n	8001cce <MAX72_init+0x76>
        // riempi txBuf con 4 volte InitCommands[cmd]
        for (uint8_t dev=0; dev<4; dev++) {
 8001c64:	2300      	movs	r3, #0
 8001c66:	73bb      	strb	r3, [r7, #14]
 8001c68:	e01a      	b.n	8001ca0 <MAX72_init+0x48>
            txBuf[dev*2]   = InitCommands[cmd][0];
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	7bbb      	ldrb	r3, [r7, #14]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	491b      	ldr	r1, [pc, #108]	@ (8001ce0 <MAX72_init+0x88>)
 8001c72:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8001c76:	3310      	adds	r3, #16
 8001c78:	443b      	add	r3, r7
 8001c7a:	f803 2c0c 	strb.w	r2, [r3, #-12]
            txBuf[dev*2+1] = InitCommands[cmd][1];
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	7bba      	ldrb	r2, [r7, #14]
 8001c82:	0052      	lsls	r2, r2, #1
 8001c84:	3201      	adds	r2, #1
 8001c86:	4916      	ldr	r1, [pc, #88]	@ (8001ce0 <MAX72_init+0x88>)
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	440b      	add	r3, r1
 8001c8c:	7859      	ldrb	r1, [r3, #1]
 8001c8e:	f102 0310 	add.w	r3, r2, #16
 8001c92:	443b      	add	r3, r7
 8001c94:	460a      	mov	r2, r1
 8001c96:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (uint8_t dev=0; dev<4; dev++) {
 8001c9a:	7bbb      	ldrb	r3, [r7, #14]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	73bb      	strb	r3, [r7, #14]
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d9e1      	bls.n	8001c6a <MAX72_init+0x12>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // CS
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2110      	movs	r1, #16
 8001caa:	480e      	ldr	r0, [pc, #56]	@ (8001ce4 <MAX72_init+0x8c>)
 8001cac:	f000 fe3c 	bl	8002928 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8001cb0:	1d39      	adds	r1, r7, #4
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	480b      	ldr	r0, [pc, #44]	@ (8001ce8 <MAX72_init+0x90>)
 8001cba:	f001 fcf2 	bl	80036a2 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // CS
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2110      	movs	r1, #16
 8001cc2:	4808      	ldr	r0, [pc, #32]	@ (8001ce4 <MAX72_init+0x8c>)
 8001cc4:	f000 fe30 	bl	8002928 <HAL_GPIO_WritePin>
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d9c7      	bls.n	8001c64 <MAX72_init+0xc>
    }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	080059f4 	.word	0x080059f4
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	200003d0 	.word	0x200003d0

08001cec <MAX72_SendRow>:

void MAX72_SendRow(uint8_t row, uint8_t pattern[4])
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[8];
    // pattern[i] = dato per il modulo i
    for (uint8_t dev=0; dev<4; dev++) {
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	75fb      	strb	r3, [r7, #23]
 8001cfc:	e014      	b.n	8001d28 <MAX72_SendRow+0x3c>
        txBuf[dev*2]   = row;          // registro DIG[row]
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	3318      	adds	r3, #24
 8001d04:	443b      	add	r3, r7
 8001d06:	79fa      	ldrb	r2, [r7, #7]
 8001d08:	f803 2c0c 	strb.w	r2, [r3, #-12]
        txBuf[dev*2+1] = pattern[dev]; // i‑esimo byte di dati
 8001d0c:	7dfb      	ldrb	r3, [r7, #23]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	441a      	add	r2, r3
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	3301      	adds	r3, #1
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	3318      	adds	r3, #24
 8001d1c:	443b      	add	r3, r7
 8001d1e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t dev=0; dev<4; dev++) {
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	3301      	adds	r3, #1
 8001d26:	75fb      	strb	r3, [r7, #23]
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d9e7      	bls.n	8001cfe <MAX72_SendRow+0x12>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2110      	movs	r1, #16
 8001d32:	480a      	ldr	r0, [pc, #40]	@ (8001d5c <MAX72_SendRow+0x70>)
 8001d34:	f000 fdf8 	bl	8002928 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8001d38:	f107 010c 	add.w	r1, r7, #12
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d40:	2208      	movs	r2, #8
 8001d42:	4807      	ldr	r0, [pc, #28]	@ (8001d60 <MAX72_SendRow+0x74>)
 8001d44:	f001 fcad 	bl	80036a2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2110      	movs	r1, #16
 8001d4c:	4803      	ldr	r0, [pc, #12]	@ (8001d5c <MAX72_SendRow+0x70>)
 8001d4e:	f000 fdeb 	bl	8002928 <HAL_GPIO_WritePin>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	200003d0 	.word	0x200003d0

08001d64 <MAX72_Print_String>:
        MAX72_SendRow(row+1, pat); // rows: 1-8
    }
}

void MAX72_Print_String(const char *str)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
    // str reverse
    // if str length is greater than 4, truncate it
    uint8_t len = strlen(str);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7fe fa4f 	bl	8000210 <strlen>
 8001d72:	4603      	mov	r3, r0
 8001d74:	753b      	strb	r3, [r7, #20]
    char reversed[4] = {}; // max 4 chars
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < 4 && i < len; i++) {
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]
 8001d7e:	e00f      	b.n	8001da0 <MAX72_Print_String+0x3c>
        reversed[i] = str[len - 1 - i];
 8001d80:	7d3b      	ldrb	r3, [r7, #20]
 8001d82:	1e5a      	subs	r2, r3, #1
 8001d84:	7dfb      	ldrb	r3, [r7, #23]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	441a      	add	r2, r3
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	7812      	ldrb	r2, [r2, #0]
 8001d92:	3318      	adds	r3, #24
 8001d94:	443b      	add	r3, r7
 8001d96:	f803 2c08 	strb.w	r2, [r3, #-8]
    for (uint8_t i = 0; i < 4 && i < len; i++) {
 8001d9a:	7dfb      	ldrb	r3, [r7, #23]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	75fb      	strb	r3, [r7, #23]
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d803      	bhi.n	8001dae <MAX72_Print_String+0x4a>
 8001da6:	7dfa      	ldrb	r2, [r7, #23]
 8001da8:	7d3b      	ldrb	r3, [r7, #20]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3e8      	bcc.n	8001d80 <MAX72_Print_String+0x1c>
    }

    // if str length is less than 4, pad with spaces
    for (uint8_t i = len; i < 4; i++) {
 8001dae:	7d3b      	ldrb	r3, [r7, #20]
 8001db0:	75bb      	strb	r3, [r7, #22]
 8001db2:	e008      	b.n	8001dc6 <MAX72_Print_String+0x62>
        reversed[i] = ' ';
 8001db4:	7dbb      	ldrb	r3, [r7, #22]
 8001db6:	3318      	adds	r3, #24
 8001db8:	443b      	add	r3, r7
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f803 2c08 	strb.w	r2, [r3, #-8]
    for (uint8_t i = len; i < 4; i++) {
 8001dc0:	7dbb      	ldrb	r3, [r7, #22]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	75bb      	strb	r3, [r7, #22]
 8001dc6:	7dbb      	ldrb	r3, [r7, #22]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d9f3      	bls.n	8001db4 <MAX72_Print_String+0x50>
    }

    // create a pattern and print with SendRow
    for (uint8_t row=0; row<=7; row++) {
 8001dcc:	2300      	movs	r3, #0
 8001dce:	757b      	strb	r3, [r7, #21]
 8001dd0:	e03f      	b.n	8001e52 <MAX72_Print_String+0xee>
        uint8_t pat[4] = {
            LETTERS[reversed[0] - ' '].value[row],
 8001dd2:	7c3b      	ldrb	r3, [r7, #16]
 8001dd4:	f1a3 0220 	sub.w	r2, r3, #32
 8001dd8:	7d79      	ldrb	r1, [r7, #21]
 8001dda:	4822      	ldr	r0, [pc, #136]	@ (8001e64 <MAX72_Print_String+0x100>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	4403      	add	r3, r0
 8001de4:	440b      	add	r3, r1
 8001de6:	3301      	adds	r3, #1
 8001de8:	781b      	ldrb	r3, [r3, #0]
        uint8_t pat[4] = {
 8001dea:	733b      	strb	r3, [r7, #12]
            LETTERS[reversed[1] - ' '].value[row],
 8001dec:	7c7b      	ldrb	r3, [r7, #17]
 8001dee:	f1a3 0220 	sub.w	r2, r3, #32
 8001df2:	7d79      	ldrb	r1, [r7, #21]
 8001df4:	481b      	ldr	r0, [pc, #108]	@ (8001e64 <MAX72_Print_String+0x100>)
 8001df6:	4613      	mov	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4403      	add	r3, r0
 8001dfe:	440b      	add	r3, r1
 8001e00:	3301      	adds	r3, #1
 8001e02:	781b      	ldrb	r3, [r3, #0]
        uint8_t pat[4] = {
 8001e04:	737b      	strb	r3, [r7, #13]
            LETTERS[reversed[2] - ' '].value[row],
 8001e06:	7cbb      	ldrb	r3, [r7, #18]
 8001e08:	f1a3 0220 	sub.w	r2, r3, #32
 8001e0c:	7d79      	ldrb	r1, [r7, #21]
 8001e0e:	4815      	ldr	r0, [pc, #84]	@ (8001e64 <MAX72_Print_String+0x100>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	4403      	add	r3, r0
 8001e18:	440b      	add	r3, r1
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	781b      	ldrb	r3, [r3, #0]
        uint8_t pat[4] = {
 8001e1e:	73bb      	strb	r3, [r7, #14]
            LETTERS[reversed[3] - ' '].value[row]
 8001e20:	7cfb      	ldrb	r3, [r7, #19]
 8001e22:	f1a3 0220 	sub.w	r2, r3, #32
 8001e26:	7d79      	ldrb	r1, [r7, #21]
 8001e28:	480e      	ldr	r0, [pc, #56]	@ (8001e64 <MAX72_Print_String+0x100>)
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	4403      	add	r3, r0
 8001e32:	440b      	add	r3, r1
 8001e34:	3301      	adds	r3, #1
 8001e36:	781b      	ldrb	r3, [r3, #0]
        uint8_t pat[4] = {
 8001e38:	73fb      	strb	r3, [r7, #15]
        };
        MAX72_SendRow(row+1, pat); // rows: 1-8
 8001e3a:	7d7b      	ldrb	r3, [r7, #21]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f107 020c 	add.w	r2, r7, #12
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff50 	bl	8001cec <MAX72_SendRow>
    for (uint8_t row=0; row<=7; row++) {
 8001e4c:	7d7b      	ldrb	r3, [r7, #21]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	757b      	strb	r3, [r7, #21]
 8001e52:	7d7b      	ldrb	r3, [r7, #21]
 8001e54:	2b07      	cmp	r3, #7
 8001e56:	d9bc      	bls.n	8001dd2 <MAX72_Print_String+0x6e>
    }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000004 	.word	0x20000004

08001e68 <MAX72_Print_Float>:
    char str[5];
    snprintf(str, sizeof(str), "%4d", num); // formatta il numero in 4 caratteri
    MAX72_Print_String(str);
}

void MAX72_Print_Float(float num) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	ed87 0a01 	vstr	s0, [r7, #4]
    int int_part = (int)num;
 8001e72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7a:	ee17 3a90 	vmov	r3, s15
 8001e7e:	617b      	str	r3, [r7, #20]
    int frac_part = abs((int)((num - int_part) * 100));  // due cifre decimale
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e92:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001ed0 <MAX72_Print_Float+0x68>
 8001e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e9e:	ee17 3a90 	vmov	r3, s15
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bfb8      	it	lt
 8001ea6:	425b      	neglt	r3, r3
 8001ea8:	613b      	str	r3, [r7, #16]

    char str[5];
    snprintf(str, sizeof(str), "%d.%02d", int_part, frac_part);
 8001eaa:	f107 0008 	add.w	r0, r7, #8
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	4a07      	ldr	r2, [pc, #28]	@ (8001ed4 <MAX72_Print_Float+0x6c>)
 8001eb6:	2105      	movs	r1, #5
 8001eb8:	f003 f8ca 	bl	8005050 <sniprintf>
    MAX72_Print_String(str);
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff4f 	bl	8001d64 <MAX72_Print_String>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	42c80000 	.word	0x42c80000
 8001ed4:	080059d4 	.word	0x080059d4

08001ed8 <update_direction>:
#include <stdio.h>

float SAMPLING_PERIOD; // seconds
uint32_t HCLK;

static void update_direction(encoder_t *encoder){
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	encoder->direction = (encoder->tim->CR1 & TIM_CR1_DIR_Msk) >> TIM_CR1_DIR_Pos;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	701a      	strb	r2, [r3, #0]
	return;
 8001ef4:	bf00      	nop
}
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <update_displacement>:

static void update_displacement(encoder_t *encoder){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

	encoder->displacement = ((float)encoder->tim->CNT - 4096) * DCF;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f16:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001f60 <update_displacement+0x60>
 8001f1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f1e:	ee17 0a90 	vmov	r0, s15
 8001f22:	f7fe fb31 	bl	8000588 <__aeabi_f2d>
 8001f26:	a30c      	add	r3, pc, #48	@ (adr r3, 8001f58 <update_displacement+0x58>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f7fe fb84 	bl	8000638 <__aeabi_dmul>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	f7fe fd90 	bl	8000a5c <__aeabi_d2f>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	605a      	str	r2, [r3, #4]
	encoder->tim->CNT = 4096;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f4a:	625a      	str	r2, [r3, #36]	@ 0x24
	return;
 8001f4c:	bf00      	nop
}
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	f3af 8000 	nop.w
 8001f58:	7bb1a72c 	.word	0x7bb1a72c
 8001f5c:	3f4921fa 	.word	0x3f4921fa
 8001f60:	45800000 	.word	0x45800000

08001f64 <compute_speed>:

static void compute_speed(encoder_t *encoder){
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	encoder->speed = encoder->displacement / SAMPLING_PERIOD;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f72:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <compute_speed+0x2c>)
 8001f74:	ed93 7a00 	vldr	s14, [r3]
 8001f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	2000062c 	.word	0x2000062c

08001f94 <update_data>:

void update_data(encoder_t *encoder){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	update_direction(encoder);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff9b 	bl	8001ed8 <update_direction>
	update_displacement(encoder);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffac 	bl	8001f00 <update_displacement>
	compute_speed(encoder);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ffdb 	bl	8001f64 <compute_speed>
	return;
 8001fae:	bf00      	nop
}
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <encoder_init>:

// em_tim : encoder mode timer | s_tim : sampling timer
void encoder_init(encoder_t *encoder, TIM_HandleTypeDef *em_tim, TIM_HandleTypeDef *s_tim){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
	encoder->tim = em_tim->Instance;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	60da      	str	r2, [r3, #12]
	encoder->tim->CNT = 4096;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fd4:	625a      	str	r2, [r3, #36]	@ 0x24

	encoder->speed = 0;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
	HCLK = HAL_RCC_GetHCLKFreq();
 8001fde:	f000 fdd5 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4a11      	ldr	r2, [pc, #68]	@ (800202c <encoder_init+0x74>)
 8001fe6:	6013      	str	r3, [r2, #0]
	SAMPLING_PERIOD = (float)(1+s_tim->Instance->ARR)*(1+s_tim->Instance->PSC)/HCLK;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fee:	3301      	adds	r3, #1
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffe:	3301      	adds	r3, #1
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002008:	ee67 6a27 	vmul.f32	s13, s14, s15
 800200c:	4b07      	ldr	r3, [pc, #28]	@ (800202c <encoder_init+0x74>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <encoder_init+0x78>)
 800201e:	edc3 7a00 	vstr	s15, [r3]
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000630 	.word	0x20000630
 8002030:	2000062c 	.word	0x2000062c

08002034 <Robot_init>:
stepper_t stepper_r;

encoder_t encoder_l;
stepper_t stepper_l;

void Robot_init(){
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af02      	add	r7, sp, #8

	encoder_init(&encoder_r, &htim3, &htim7);
 800203a:	4a0f      	ldr	r2, [pc, #60]	@ (8002078 <Robot_init+0x44>)
 800203c:	490f      	ldr	r1, [pc, #60]	@ (800207c <Robot_init+0x48>)
 800203e:	4810      	ldr	r0, [pc, #64]	@ (8002080 <Robot_init+0x4c>)
 8002040:	f7ff ffba 	bl	8001fb8 <encoder_init>
	stepper_init(&stepper_r, &htim5, TIM_CHANNEL_1, &encoder_r, -1);
 8002044:	23ff      	movs	r3, #255	@ 0xff
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <Robot_init+0x4c>)
 800204a:	2200      	movs	r2, #0
 800204c:	490d      	ldr	r1, [pc, #52]	@ (8002084 <Robot_init+0x50>)
 800204e:	480e      	ldr	r0, [pc, #56]	@ (8002088 <Robot_init+0x54>)
 8002050:	f000 f89a 	bl	8002188 <stepper_init>

	encoder_init(&encoder_l, &htim4, &htim7);
 8002054:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <Robot_init+0x44>)
 8002056:	490d      	ldr	r1, [pc, #52]	@ (800208c <Robot_init+0x58>)
 8002058:	480d      	ldr	r0, [pc, #52]	@ (8002090 <Robot_init+0x5c>)
 800205a:	f7ff ffad 	bl	8001fb8 <encoder_init>
	stepper_init(&stepper_l, &htim2, TIM_CHANNEL_2, &encoder_l, 1);
 800205e:	2301      	movs	r3, #1
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <Robot_init+0x5c>)
 8002064:	2204      	movs	r2, #4
 8002066:	490b      	ldr	r1, [pc, #44]	@ (8002094 <Robot_init+0x60>)
 8002068:	480b      	ldr	r0, [pc, #44]	@ (8002098 <Robot_init+0x64>)
 800206a:	f000 f88d 	bl	8002188 <stepper_init>


	MAX72_init();
 800206e:	f7ff fdf3 	bl	8001c58 <MAX72_init>
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000594 	.word	0x20000594
 800207c:	20000474 	.word	0x20000474
 8002080:	20000634 	.word	0x20000634
 8002084:	20000504 	.word	0x20000504
 8002088:	20000644 	.word	0x20000644
 800208c:	200004bc 	.word	0x200004bc
 8002090:	20000660 	.word	0x20000660
 8002094:	2000042c 	.word	0x2000042c
 8002098:	20000670 	.word	0x20000670
 800209c:	00000000 	.word	0x00000000

080020a0 <speed_control>:
#include "headers/stepper.h"
#include <stdio.h>

float err = 0;

void speed_control(stepper_t *stepper){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	update_data(stepper->encoder);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff71 	bl	8001f94 <update_data>

	float e = stepper->setpoint_speed - (-stepper->encoder->speed); // SEGNO INVERTITO
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80020c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c4:	edc7 7a03 	vstr	s15, [r7, #12]
	float delta_f = e / ANGLE_STEP ;
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7fe fa5d 	bl	8000588 <__aeabi_f2d>
 80020ce:	a324      	add	r3, pc, #144	@ (adr r3, 8002160 <speed_control+0xc0>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fbda 	bl	800088c <__aeabi_ddiv>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f7fe fcbc 	bl	8000a5c <__aeabi_d2f>
 80020e4:	4603      	mov	r3, r0
 80020e6:	60bb      	str	r3, [r7, #8]

	stepper->frequency += delta_f;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80020ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80020f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	edc3 7a02 	vstr	s15, [r3, #8]
	err = e;
 80020fc:	4a16      	ldr	r2, [pc, #88]	@ (8002158 <speed_control+0xb8>)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6013      	str	r3, [r2, #0]

	// period = (1+ARR)*(1+PSC)/HCLK;
	stepper->tim->ARR = (1/stepper->frequency)*HCLK-1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	edd3 7a02 	vldr	s15, [r3, #8]
 8002108:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800210c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002110:	4b12      	ldr	r3, [pc, #72]	@ (800215c <speed_control+0xbc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002120:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002124:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002130:	ee17 2a90 	vmov	r2, s15
 8002134:	62da      	str	r2, [r3, #44]	@ 0x2c
	*stepper->CCR = (stepper->tim->ARR+1)/2;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	0852      	lsrs	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
	stepper->tim->EGR = TIM_EGR_UG;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2201      	movs	r2, #1
 800214c:	615a      	str	r2, [r3, #20]
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000068c 	.word	0x2000068c
 800215c:	20000630 	.word	0x20000630
 8002160:	e362eeeb 	.word	0xe362eeeb
 8002164:	3f5015bf 	.word	0x3f5015bf

08002168 <set_speed>:

void set_speed(stepper_t *stepper, float speed){
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	ed87 0a00 	vstr	s0, [r7]
	stepper->setpoint_speed = speed;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	605a      	str	r2, [r3, #4]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <stepper_init>:

void stepper_init(stepper_t *stepper, TIM_HandleTypeDef *htim, uint32_t tim_channel, encoder_t *encoder, uint8_t direction_invert){
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
	stepper->angle_step = ANGLE_STEP;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4a2f      	ldr	r2, [pc, #188]	@ (8002258 <stepper_init+0xd0>)
 800219a:	601a      	str	r2, [r3, #0]
	stepper->tim = htim->Instance;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	611a      	str	r2, [r3, #16]
	stepper->direction_invert = direction_invert;
 80021a4:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	761a      	strb	r2, [r3, #24]
	switch (tim_channel){
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d838      	bhi.n	8002224 <stepper_init+0x9c>
 80021b2:	a201      	add	r2, pc, #4	@ (adr r2, 80021b8 <stepper_init+0x30>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	080021ed 	.word	0x080021ed
 80021bc:	08002225 	.word	0x08002225
 80021c0:	08002225 	.word	0x08002225
 80021c4:	08002225 	.word	0x08002225
 80021c8:	080021fb 	.word	0x080021fb
 80021cc:	08002225 	.word	0x08002225
 80021d0:	08002225 	.word	0x08002225
 80021d4:	08002225 	.word	0x08002225
 80021d8:	08002209 	.word	0x08002209
 80021dc:	08002225 	.word	0x08002225
 80021e0:	08002225 	.word	0x08002225
 80021e4:	08002225 	.word	0x08002225
 80021e8:	08002217 	.word	0x08002217
	case TIM_CHANNEL_1:
		stepper->CCR = &stepper->tim->CCR1;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	615a      	str	r2, [r3, #20]
		break;
 80021f8:	e018      	b.n	800222c <stepper_init+0xa4>
	case TIM_CHANNEL_2:
		stepper->CCR = &stepper->tim->CCR2;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	615a      	str	r2, [r3, #20]
		break;
 8002206:	e011      	b.n	800222c <stepper_init+0xa4>
	case TIM_CHANNEL_3:
		stepper->CCR = &stepper->tim->CCR3;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	615a      	str	r2, [r3, #20]
		break;
 8002214:	e00a      	b.n	800222c <stepper_init+0xa4>
	case TIM_CHANNEL_4:
		stepper->CCR = &stepper->tim->CCR4;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	615a      	str	r2, [r3, #20]
		break;
 8002222:	e003      	b.n	800222c <stepper_init+0xa4>
	default:
		stepper->CCR = NULL;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	615a      	str	r2, [r3, #20]
		break;
 800222a:	bf00      	nop
	}

	if (stepper->CCR != NULL)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <stepper_init+0xb4>
		*stepper->CCR = 0; // Disattiva il PWM (duty cycle 0)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

	stepper->encoder = encoder;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	60da      	str	r2, [r3, #12]
	stepper->setpoint_speed = 0;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	605a      	str	r2, [r3, #4]
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	3a80adff 	.word	0x3a80adff

0800225c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 800225c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002294 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002260:	f7ff f916 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002264:	480c      	ldr	r0, [pc, #48]	@ (8002298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002266:	490d      	ldr	r1, [pc, #52]	@ (800229c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002268:	4a0d      	ldr	r2, [pc, #52]	@ (80022a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800227c:	4c0a      	ldr	r4, [pc, #40]	@ (80022a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800228a:	f002 ff25 	bl	80050d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800228e:	f7fe fec9 	bl	8001024 <main>
  bx  lr    
 8002292:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	200003b4 	.word	0x200003b4
  ldr r2, =_sidata
 80022a0:	08005a44 	.word	0x08005a44
  ldr r2, =_sbss
 80022a4:	200003b4 	.word	0x200003b4
  ldr r4, =_ebss
 80022a8:	200007dc 	.word	0x200007dc

080022ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC_IRQHandler>
	...

080022b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022b4:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <HAL_Init+0x40>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0d      	ldr	r2, [pc, #52]	@ (80022f0 <HAL_Init+0x40>)
 80022ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022c0:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0a      	ldr	r2, [pc, #40]	@ (80022f0 <HAL_Init+0x40>)
 80022c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022cc:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a07      	ldr	r2, [pc, #28]	@ (80022f0 <HAL_Init+0x40>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d8:	2003      	movs	r0, #3
 80022da:	f000 f94f 	bl	800257c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022de:	2000      	movs	r0, #0
 80022e0:	f000 f808 	bl	80022f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e4:	f7ff f82c 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00

080022f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022fc:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_InitTick+0x54>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b12      	ldr	r3, [pc, #72]	@ (800234c <HAL_InitTick+0x58>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800230a:	fbb3 f3f1 	udiv	r3, r3, r1
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f967 	bl	80025e6 <HAL_SYSTICK_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e00e      	b.n	8002340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b0f      	cmp	r3, #15
 8002326:	d80a      	bhi.n	800233e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002328:	2200      	movs	r2, #0
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002330:	f000 f92f 	bl	8002592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002334:	4a06      	ldr	r2, [pc, #24]	@ (8002350 <HAL_InitTick+0x5c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000000 	.word	0x20000000
 800234c:	20000360 	.word	0x20000360
 8002350:	2000035c 	.word	0x2000035c

08002354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002358:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_IncTick+0x20>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_IncTick+0x24>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4413      	add	r3, r2
 8002364:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <HAL_IncTick+0x24>)
 8002366:	6013      	str	r3, [r2, #0]
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000360 	.word	0x20000360
 8002378:	20000690 	.word	0x20000690

0800237c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return uwTick;
 8002380:	4b03      	ldr	r3, [pc, #12]	@ (8002390 <HAL_GetTick+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000690 	.word	0x20000690

08002394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff ffee 	bl	800237c <HAL_GetTick>
 80023a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023ac:	d005      	beq.n	80023ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <HAL_Delay+0x44>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ba:	bf00      	nop
 80023bc:	f7ff ffde 	bl	800237c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d8f7      	bhi.n	80023bc <HAL_Delay+0x28>
  {
  }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000360 	.word	0x20000360

080023dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023f8:	4013      	ands	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002404:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800240c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240e:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	60d3      	str	r3, [r2, #12]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002428:	4b04      	ldr	r3, [pc, #16]	@ (800243c <__NVIC_GetPriorityGrouping+0x18>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	f003 0307 	and.w	r3, r3, #7
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	2b00      	cmp	r3, #0
 8002450:	db0b      	blt.n	800246a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	4907      	ldr	r1, [pc, #28]	@ (8002478 <__NVIC_EnableIRQ+0x38>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	2001      	movs	r0, #1
 8002462:	fa00 f202 	lsl.w	r2, r0, r2
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000e100 	.word	0xe000e100

0800247c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db0a      	blt.n	80024a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	490c      	ldr	r1, [pc, #48]	@ (80024c8 <__NVIC_SetPriority+0x4c>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	440b      	add	r3, r1
 80024a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a4:	e00a      	b.n	80024bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4908      	ldr	r1, [pc, #32]	@ (80024cc <__NVIC_SetPriority+0x50>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3b04      	subs	r3, #4
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	440b      	add	r3, r1
 80024ba:	761a      	strb	r2, [r3, #24]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	@ 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f1c3 0307 	rsb	r3, r3, #7
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	bf28      	it	cs
 80024ee:	2304      	movcs	r3, #4
 80024f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d902      	bls.n	8002500 <NVIC_EncodePriority+0x30>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3b03      	subs	r3, #3
 80024fe:	e000      	b.n	8002502 <NVIC_EncodePriority+0x32>
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002518:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43d9      	mvns	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	4313      	orrs	r3, r2
         );
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	@ 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002548:	d301      	bcc.n	800254e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254a:	2301      	movs	r3, #1
 800254c:	e00f      	b.n	800256e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <SysTick_Config+0x40>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002556:	210f      	movs	r1, #15
 8002558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800255c:	f7ff ff8e 	bl	800247c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <SysTick_Config+0x40>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002566:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <SysTick_Config+0x40>)
 8002568:	2207      	movs	r2, #7
 800256a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	e000e010 	.word	0xe000e010

0800257c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff29 	bl	80023dc <__NVIC_SetPriorityGrouping>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a4:	f7ff ff3e 	bl	8002424 <__NVIC_GetPriorityGrouping>
 80025a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	6978      	ldr	r0, [r7, #20]
 80025b0:	f7ff ff8e 	bl	80024d0 <NVIC_EncodePriority>
 80025b4:	4602      	mov	r2, r0
 80025b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff5d 	bl	800247c <__NVIC_SetPriority>
}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff31 	bl	8002440 <__NVIC_EnableIRQ>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ffa2 	bl	8002538 <SysTick_Config>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	@ 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	e165      	b.n	80028e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	f040 8154 	bne.w	80028e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d005      	beq.n	8002652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264e:	2b02      	cmp	r3, #2
 8002650:	d130      	bne.n	80026b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 0201 	and.w	r2, r3, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d017      	beq.n	80026f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d123      	bne.n	8002744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	08da      	lsrs	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3208      	adds	r2, #8
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80ae 	beq.w	80028e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b5d      	ldr	r3, [pc, #372]	@ (8002900 <HAL_GPIO_Init+0x300>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	4a5c      	ldr	r2, [pc, #368]	@ (8002900 <HAL_GPIO_Init+0x300>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002794:	6453      	str	r3, [r2, #68]	@ 0x44
 8002796:	4b5a      	ldr	r3, [pc, #360]	@ (8002900 <HAL_GPIO_Init+0x300>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a2:	4a58      	ldr	r2, [pc, #352]	@ (8002904 <HAL_GPIO_Init+0x304>)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	3302      	adds	r3, #2
 80027aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002908 <HAL_GPIO_Init+0x308>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d025      	beq.n	800281a <HAL_GPIO_Init+0x21a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4e      	ldr	r2, [pc, #312]	@ (800290c <HAL_GPIO_Init+0x30c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01f      	beq.n	8002816 <HAL_GPIO_Init+0x216>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002910 <HAL_GPIO_Init+0x310>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d019      	beq.n	8002812 <HAL_GPIO_Init+0x212>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002914 <HAL_GPIO_Init+0x314>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x20e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002918 <HAL_GPIO_Init+0x318>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x20a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4a      	ldr	r2, [pc, #296]	@ (800291c <HAL_GPIO_Init+0x31c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x206>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a49      	ldr	r2, [pc, #292]	@ (8002920 <HAL_GPIO_Init+0x320>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x202>
 80027fe:	2306      	movs	r3, #6
 8002800:	e00c      	b.n	800281c <HAL_GPIO_Init+0x21c>
 8002802:	2307      	movs	r3, #7
 8002804:	e00a      	b.n	800281c <HAL_GPIO_Init+0x21c>
 8002806:	2305      	movs	r3, #5
 8002808:	e008      	b.n	800281c <HAL_GPIO_Init+0x21c>
 800280a:	2304      	movs	r3, #4
 800280c:	e006      	b.n	800281c <HAL_GPIO_Init+0x21c>
 800280e:	2303      	movs	r3, #3
 8002810:	e004      	b.n	800281c <HAL_GPIO_Init+0x21c>
 8002812:	2302      	movs	r3, #2
 8002814:	e002      	b.n	800281c <HAL_GPIO_Init+0x21c>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <HAL_GPIO_Init+0x21c>
 800281a:	2300      	movs	r3, #0
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	f002 0203 	and.w	r2, r2, #3
 8002822:	0092      	lsls	r2, r2, #2
 8002824:	4093      	lsls	r3, r2
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800282c:	4935      	ldr	r1, [pc, #212]	@ (8002904 <HAL_GPIO_Init+0x304>)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	3302      	adds	r3, #2
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283a:	4b3a      	ldr	r3, [pc, #232]	@ (8002924 <HAL_GPIO_Init+0x324>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285e:	4a31      	ldr	r2, [pc, #196]	@ (8002924 <HAL_GPIO_Init+0x324>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002864:	4b2f      	ldr	r3, [pc, #188]	@ (8002924 <HAL_GPIO_Init+0x324>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002888:	4a26      	ldr	r2, [pc, #152]	@ (8002924 <HAL_GPIO_Init+0x324>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800288e:	4b25      	ldr	r3, [pc, #148]	@ (8002924 <HAL_GPIO_Init+0x324>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002924 <HAL_GPIO_Init+0x324>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002924 <HAL_GPIO_Init+0x324>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028dc:	4a11      	ldr	r2, [pc, #68]	@ (8002924 <HAL_GPIO_Init+0x324>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3301      	adds	r3, #1
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	2b0f      	cmp	r3, #15
 80028ec:	f67f ae96 	bls.w	800261c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3724      	adds	r7, #36	@ 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	40013800 	.word	0x40013800
 8002908:	40020000 	.word	0x40020000
 800290c:	40020400 	.word	0x40020400
 8002910:	40020800 	.word	0x40020800
 8002914:	40020c00 	.word	0x40020c00
 8002918:	40021000 	.word	0x40021000
 800291c:	40021400 	.word	0x40021400
 8002920:	40021800 	.word	0x40021800
 8002924:	40013c00 	.word	0x40013c00

08002928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
 8002934:	4613      	mov	r3, r2
 8002936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002938:	787b      	ldrb	r3, [r7, #1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002944:	e003      	b.n	800294e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	041a      	lsls	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	619a      	str	r2, [r3, #24]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800295a:	b480      	push	{r7}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800296c:	887a      	ldrh	r2, [r7, #2]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4013      	ands	r3, r2
 8002972:	041a      	lsls	r2, r3, #16
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	43d9      	mvns	r1, r3
 8002978:	887b      	ldrh	r3, [r7, #2]
 800297a:	400b      	ands	r3, r1
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	619a      	str	r2, [r3, #24]
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800299a:	4b08      	ldr	r3, [pc, #32]	@ (80029bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029a6:	4a05      	ldr	r2, [pc, #20]	@ (80029bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fc12 	bl	80011d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40013c00 	.word	0x40013c00

080029c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0cc      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b68      	ldr	r3, [pc, #416]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d90c      	bls.n	80029fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b65      	ldr	r3, [pc, #404]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b63      	ldr	r3, [pc, #396]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0b8      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a14:	4b59      	ldr	r3, [pc, #356]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a58      	ldr	r2, [pc, #352]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a2c:	4b53      	ldr	r3, [pc, #332]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a52      	ldr	r2, [pc, #328]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b50      	ldr	r3, [pc, #320]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	494d      	ldr	r1, [pc, #308]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d044      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b47      	ldr	r3, [pc, #284]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d119      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e07f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e067      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9e:	4b37      	ldr	r3, [pc, #220]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4934      	ldr	r1, [pc, #208]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab0:	f7ff fc64 	bl	800237c <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7ff fc60 	bl	800237c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e04f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	4b2b      	ldr	r3, [pc, #172]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 020c 	and.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1eb      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b25      	ldr	r3, [pc, #148]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d20c      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b22      	ldr	r3, [pc, #136]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e032      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	4b19      	ldr	r3, [pc, #100]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4916      	ldr	r1, [pc, #88]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b32:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	490e      	ldr	r1, [pc, #56]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b46:	f000 f855 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	490a      	ldr	r1, [pc, #40]	@ (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	5ccb      	ldrb	r3, [r1, r3]
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	4a09      	ldr	r2, [pc, #36]	@ (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b62:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fbc4 	bl	80022f4 <HAL_InitTick>

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	080059dc 	.word	0x080059dc
 8002b84:	20000000 	.word	0x20000000
 8002b88:	2000035c 	.word	0x2000035c

08002b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b90:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000000 	.word	0x20000000

08002ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ba8:	f7ff fff0 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	0a9b      	lsrs	r3, r3, #10
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4903      	ldr	r1, [pc, #12]	@ (8002bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	080059ec 	.word	0x080059ec

08002bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bd0:	f7ff ffdc 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	0b5b      	lsrs	r3, r3, #13
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	@ (8002bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	080059ec 	.word	0x080059ec

08002bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf8:	b0ae      	sub	sp, #184	@ 0xb8
 8002bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c1a:	4bcb      	ldr	r3, [pc, #812]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	f200 8206 	bhi.w	8003034 <HAL_RCC_GetSysClockFreq+0x440>
 8002c28:	a201      	add	r2, pc, #4	@ (adr r2, 8002c30 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002c65 	.word	0x08002c65
 8002c34:	08003035 	.word	0x08003035
 8002c38:	08003035 	.word	0x08003035
 8002c3c:	08003035 	.word	0x08003035
 8002c40:	08002c6d 	.word	0x08002c6d
 8002c44:	08003035 	.word	0x08003035
 8002c48:	08003035 	.word	0x08003035
 8002c4c:	08003035 	.word	0x08003035
 8002c50:	08002c75 	.word	0x08002c75
 8002c54:	08003035 	.word	0x08003035
 8002c58:	08003035 	.word	0x08003035
 8002c5c:	08003035 	.word	0x08003035
 8002c60:	08002e65 	.word	0x08002e65
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4bb9      	ldr	r3, [pc, #740]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8002c66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c6a:	e1e7      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c6c:	4bb8      	ldr	r3, [pc, #736]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c72:	e1e3      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c74:	4bb4      	ldr	r3, [pc, #720]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c80:	4bb1      	ldr	r3, [pc, #708]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d071      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8c:	4bae      	ldr	r3, [pc, #696]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c98:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cb2:	4622      	mov	r2, r4
 8002cb4:	462b      	mov	r3, r5
 8002cb6:	f04f 0000 	mov.w	r0, #0
 8002cba:	f04f 0100 	mov.w	r1, #0
 8002cbe:	0159      	lsls	r1, r3, #5
 8002cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc4:	0150      	lsls	r0, r2, #5
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4621      	mov	r1, r4
 8002ccc:	1a51      	subs	r1, r2, r1
 8002cce:	6439      	str	r1, [r7, #64]	@ 0x40
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002ce4:	4649      	mov	r1, r9
 8002ce6:	018b      	lsls	r3, r1, #6
 8002ce8:	4641      	mov	r1, r8
 8002cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cee:	4641      	mov	r1, r8
 8002cf0:	018a      	lsls	r2, r1, #6
 8002cf2:	4641      	mov	r1, r8
 8002cf4:	1a51      	subs	r1, r2, r1
 8002cf6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cf8:	4649      	mov	r1, r9
 8002cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	00cb      	lsls	r3, r1, #3
 8002d10:	4641      	mov	r1, r8
 8002d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d16:	4641      	mov	r1, r8
 8002d18:	00ca      	lsls	r2, r1, #3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4622      	mov	r2, r4
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d26:	462b      	mov	r3, r5
 8002d28:	460a      	mov	r2, r1
 8002d2a:	eb42 0303 	adc.w	r3, r2, r3
 8002d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	024b      	lsls	r3, r1, #9
 8002d40:	4621      	mov	r1, r4
 8002d42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d46:	4621      	mov	r1, r4
 8002d48:	024a      	lsls	r2, r1, #9
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d52:	2200      	movs	r2, #0
 8002d54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002d60:	f7fd fecc 	bl	8000afc <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4613      	mov	r3, r2
 8002d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d6e:	e067      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d70:	4b75      	ldr	r3, [pc, #468]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	099b      	lsrs	r3, r3, #6
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d7c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002d92:	4622      	mov	r2, r4
 8002d94:	462b      	mov	r3, r5
 8002d96:	f04f 0000 	mov.w	r0, #0
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	0159      	lsls	r1, r3, #5
 8002da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da4:	0150      	lsls	r0, r2, #5
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4621      	mov	r1, r4
 8002dac:	1a51      	subs	r1, r2, r1
 8002dae:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002db0:	4629      	mov	r1, r5
 8002db2:	eb63 0301 	sbc.w	r3, r3, r1
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	018b      	lsls	r3, r1, #6
 8002dc8:	4641      	mov	r1, r8
 8002dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dce:	4641      	mov	r1, r8
 8002dd0:	018a      	lsls	r2, r1, #6
 8002dd2:	4641      	mov	r1, r8
 8002dd4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dd8:	4649      	mov	r1, r9
 8002dda:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002df2:	4692      	mov	sl, r2
 8002df4:	469b      	mov	fp, r3
 8002df6:	4623      	mov	r3, r4
 8002df8:	eb1a 0303 	adds.w	r3, sl, r3
 8002dfc:	623b      	str	r3, [r7, #32]
 8002dfe:	462b      	mov	r3, r5
 8002e00:	eb4b 0303 	adc.w	r3, fp, r3
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e12:	4629      	mov	r1, r5
 8002e14:	028b      	lsls	r3, r1, #10
 8002e16:	4621      	mov	r1, r4
 8002e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	028a      	lsls	r2, r1, #10
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e28:	2200      	movs	r2, #0
 8002e2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e2c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e32:	f7fd fe63 	bl	8000afc <__aeabi_uldivmod>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e40:	4b41      	ldr	r3, [pc, #260]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e62:	e0eb      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e64:	4b38      	ldr	r3, [pc, #224]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e70:	4b35      	ldr	r3, [pc, #212]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d06b      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7c:	4b32      	ldr	r3, [pc, #200]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	099b      	lsrs	r3, r3, #6
 8002e82:	2200      	movs	r2, #0
 8002e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e90:	2300      	movs	r3, #0
 8002e92:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e94:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002e98:	4622      	mov	r2, r4
 8002e9a:	462b      	mov	r3, r5
 8002e9c:	f04f 0000 	mov.w	r0, #0
 8002ea0:	f04f 0100 	mov.w	r1, #0
 8002ea4:	0159      	lsls	r1, r3, #5
 8002ea6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eaa:	0150      	lsls	r0, r2, #5
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	1a51      	subs	r1, r2, r1
 8002eb4:	61b9      	str	r1, [r7, #24]
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	eb63 0301 	sbc.w	r3, r3, r1
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002eca:	4659      	mov	r1, fp
 8002ecc:	018b      	lsls	r3, r1, #6
 8002ece:	4651      	mov	r1, sl
 8002ed0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	018a      	lsls	r2, r1, #6
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ebb2 0801 	subs.w	r8, r2, r1
 8002ede:	4659      	mov	r1, fp
 8002ee0:	eb63 0901 	sbc.w	r9, r3, r1
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ef8:	4690      	mov	r8, r2
 8002efa:	4699      	mov	r9, r3
 8002efc:	4623      	mov	r3, r4
 8002efe:	eb18 0303 	adds.w	r3, r8, r3
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	462b      	mov	r3, r5
 8002f06:	eb49 0303 	adc.w	r3, r9, r3
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f18:	4629      	mov	r1, r5
 8002f1a:	024b      	lsls	r3, r1, #9
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f22:	4621      	mov	r1, r4
 8002f24:	024a      	lsls	r2, r1, #9
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f2e:	2200      	movs	r2, #0
 8002f30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f32:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f38:	f7fd fde0 	bl	8000afc <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4613      	mov	r3, r2
 8002f42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f46:	e065      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x420>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	00f42400 	.word	0x00f42400
 8002f50:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f54:	4b3d      	ldr	r3, [pc, #244]	@ (800304c <HAL_RCC_GetSysClockFreq+0x458>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	4611      	mov	r1, r2
 8002f60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f64:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f66:	2300      	movs	r3, #0
 8002f68:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002f6e:	4642      	mov	r2, r8
 8002f70:	464b      	mov	r3, r9
 8002f72:	f04f 0000 	mov.w	r0, #0
 8002f76:	f04f 0100 	mov.w	r1, #0
 8002f7a:	0159      	lsls	r1, r3, #5
 8002f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f80:	0150      	lsls	r0, r2, #5
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4641      	mov	r1, r8
 8002f88:	1a51      	subs	r1, r2, r1
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002fa0:	4659      	mov	r1, fp
 8002fa2:	018b      	lsls	r3, r1, #6
 8002fa4:	4651      	mov	r1, sl
 8002fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002faa:	4651      	mov	r1, sl
 8002fac:	018a      	lsls	r2, r1, #6
 8002fae:	4651      	mov	r1, sl
 8002fb0:	1a54      	subs	r4, r2, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	eb63 0501 	sbc.w	r5, r3, r1
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	00eb      	lsls	r3, r5, #3
 8002fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc6:	00e2      	lsls	r2, r4, #3
 8002fc8:	4614      	mov	r4, r2
 8002fca:	461d      	mov	r5, r3
 8002fcc:	4643      	mov	r3, r8
 8002fce:	18e3      	adds	r3, r4, r3
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	eb45 0303 	adc.w	r3, r5, r3
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	028b      	lsls	r3, r1, #10
 8002fea:	4621      	mov	r1, r4
 8002fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	028a      	lsls	r2, r1, #10
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003000:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003002:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003006:	f7fd fd79 	bl	8000afc <__aeabi_uldivmod>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4613      	mov	r3, r2
 8003010:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003014:	4b0d      	ldr	r3, [pc, #52]	@ (800304c <HAL_RCC_GetSysClockFreq+0x458>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	0f1b      	lsrs	r3, r3, #28
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003032:	e003      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003036:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800303a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800303c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003040:	4618      	mov	r0, r3
 8003042:	37b8      	adds	r7, #184	@ 0xb8
 8003044:	46bd      	mov	sp, r7
 8003046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800
 8003050:	00f42400 	.word	0x00f42400

08003054 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e28d      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8083 	beq.w	800317a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003074:	4b94      	ldr	r3, [pc, #592]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b04      	cmp	r3, #4
 800307e:	d019      	beq.n	80030b4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003080:	4b91      	ldr	r3, [pc, #580]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
        || \
 8003088:	2b08      	cmp	r3, #8
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800308c:	4b8e      	ldr	r3, [pc, #568]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003094:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003098:	d00c      	beq.n	80030b4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309a:	4b8b      	ldr	r3, [pc, #556]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d112      	bne.n	80030cc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a6:	4b88      	ldr	r3, [pc, #544]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030b2:	d10b      	bne.n	80030cc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	4b84      	ldr	r3, [pc, #528]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d05b      	beq.n	8003178 <HAL_RCC_OscConfig+0x124>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d157      	bne.n	8003178 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e25a      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d4:	d106      	bne.n	80030e4 <HAL_RCC_OscConfig+0x90>
 80030d6:	4b7c      	ldr	r3, [pc, #496]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a7b      	ldr	r2, [pc, #492]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e01d      	b.n	8003120 <HAL_RCC_OscConfig+0xcc>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0xb4>
 80030ee:	4b76      	ldr	r3, [pc, #472]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a75      	ldr	r2, [pc, #468]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b73      	ldr	r3, [pc, #460]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a72      	ldr	r2, [pc, #456]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e00b      	b.n	8003120 <HAL_RCC_OscConfig+0xcc>
 8003108:	4b6f      	ldr	r3, [pc, #444]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6e      	ldr	r2, [pc, #440]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 800310e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b6c      	ldr	r3, [pc, #432]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a6b      	ldr	r2, [pc, #428]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 800311a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800311e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d013      	beq.n	8003150 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7ff f928 	bl	800237c <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003130:	f7ff f924 	bl	800237c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	@ 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e21f      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b61      	ldr	r3, [pc, #388]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0xdc>
 800314e:	e014      	b.n	800317a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7ff f914 	bl	800237c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003158:	f7ff f910 	bl	800237c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	@ 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e20b      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	4b57      	ldr	r3, [pc, #348]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x104>
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d06f      	beq.n	8003266 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003186:	4b50      	ldr	r3, [pc, #320]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b00      	cmp	r3, #0
 8003190:	d017      	beq.n	80031c2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003192:	4b4d      	ldr	r3, [pc, #308]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
        || \
 800319a:	2b08      	cmp	r3, #8
 800319c:	d105      	bne.n	80031aa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800319e:	4b4a      	ldr	r3, [pc, #296]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031aa:	4b47      	ldr	r3, [pc, #284]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80031b2:	2b0c      	cmp	r3, #12
 80031b4:	d11c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b44      	ldr	r3, [pc, #272]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x186>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e1d3      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b3b      	ldr	r3, [pc, #236]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4937      	ldr	r1, [pc, #220]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	e03a      	b.n	8003266 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f8:	4b34      	ldr	r3, [pc, #208]	@ (80032cc <HAL_RCC_OscConfig+0x278>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7ff f8bd 	bl	800237c <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003206:	f7ff f8b9 	bl	800237c <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1b4      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	4b2b      	ldr	r3, [pc, #172]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b28      	ldr	r3, [pc, #160]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4925      	ldr	r1, [pc, #148]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
 8003238:	e015      	b.n	8003266 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	4b24      	ldr	r3, [pc, #144]	@ (80032cc <HAL_RCC_OscConfig+0x278>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7ff f89c 	bl	800237c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003248:	f7ff f898 	bl	800237c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e193      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d036      	beq.n	80032e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327a:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <HAL_RCC_OscConfig+0x27c>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7ff f87c 	bl	800237c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003288:	f7ff f878 	bl	800237c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e173      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_OscConfig+0x274>)
 800329c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x234>
 80032a6:	e01b      	b.n	80032e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a8:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <HAL_RCC_OscConfig+0x27c>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7ff f865 	bl	800237c <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	e00e      	b.n	80032d4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b6:	f7ff f861 	bl	800237c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d907      	bls.n	80032d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e15c      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	42470000 	.word	0x42470000
 80032d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	4b8a      	ldr	r3, [pc, #552]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ea      	bne.n	80032b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8097 	beq.w	800341c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f2:	4b83      	ldr	r3, [pc, #524]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	4b7f      	ldr	r3, [pc, #508]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	4a7e      	ldr	r2, [pc, #504]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	@ 0x40
 800330e:	4b7c      	ldr	r3, [pc, #496]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b79      	ldr	r3, [pc, #484]	@ (8003504 <HAL_RCC_OscConfig+0x4b0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d118      	bne.n	800335c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332a:	4b76      	ldr	r3, [pc, #472]	@ (8003504 <HAL_RCC_OscConfig+0x4b0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a75      	ldr	r2, [pc, #468]	@ (8003504 <HAL_RCC_OscConfig+0x4b0>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003336:	f7ff f821 	bl	800237c <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7ff f81d 	bl	800237c <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e118      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	4b6c      	ldr	r3, [pc, #432]	@ (8003504 <HAL_RCC_OscConfig+0x4b0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x31e>
 8003364:	4b66      	ldr	r3, [pc, #408]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003368:	4a65      	ldr	r2, [pc, #404]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003370:	e01c      	b.n	80033ac <HAL_RCC_OscConfig+0x358>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b05      	cmp	r3, #5
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x340>
 800337a:	4b61      	ldr	r3, [pc, #388]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337e:	4a60      	ldr	r2, [pc, #384]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	6713      	str	r3, [r2, #112]	@ 0x70
 8003386:	4b5e      	ldr	r3, [pc, #376]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338a:	4a5d      	ldr	r2, [pc, #372]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6713      	str	r3, [r2, #112]	@ 0x70
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0x358>
 8003394:	4b5a      	ldr	r3, [pc, #360]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003398:	4a59      	ldr	r2, [pc, #356]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a0:	4b57      	ldr	r3, [pc, #348]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	4a56      	ldr	r2, [pc, #344]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80033a6:	f023 0304 	bic.w	r3, r3, #4
 80033aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe ffe2 	bl	800237c <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fe ffde 	bl	800237c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0d7      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	4b4b      	ldr	r3, [pc, #300]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0ee      	beq.n	80033bc <HAL_RCC_OscConfig+0x368>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fe ffcc 	bl	800237c <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fe ffc8 	bl	800237c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0c1      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fe:	4b40      	ldr	r3, [pc, #256]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ee      	bne.n	80033e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b3b      	ldr	r3, [pc, #236]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	4a3a      	ldr	r2, [pc, #232]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800341a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80ad 	beq.w	8003580 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003426:	4b36      	ldr	r3, [pc, #216]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b08      	cmp	r3, #8
 8003430:	d060      	beq.n	80034f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d145      	bne.n	80034c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b33      	ldr	r3, [pc, #204]	@ (8003508 <HAL_RCC_OscConfig+0x4b4>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe ff9c 	bl	800237c <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe ff98 	bl	800237c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e093      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b29      	ldr	r3, [pc, #164]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	071b      	lsls	r3, r3, #28
 8003492:	491b      	ldr	r1, [pc, #108]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003498:	4b1b      	ldr	r3, [pc, #108]	@ (8003508 <HAL_RCC_OscConfig+0x4b4>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fe ff6d 	bl	800237c <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fe ff69 	bl	800237c <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e064      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	4b11      	ldr	r3, [pc, #68]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x452>
 80034c4:	e05c      	b.n	8003580 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	4b10      	ldr	r3, [pc, #64]	@ (8003508 <HAL_RCC_OscConfig+0x4b4>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fe ff56 	bl	800237c <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fe ff52 	bl	800237c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e04d      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <HAL_RCC_OscConfig+0x4ac>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x480>
 80034f2:	e045      	b.n	8003580 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d107      	bne.n	800350c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e040      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
 8003500:	40023800 	.word	0x40023800
 8003504:	40007000 	.word	0x40007000
 8003508:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800350c:	4b1f      	ldr	r3, [pc, #124]	@ (800358c <HAL_RCC_OscConfig+0x538>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d030      	beq.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d129      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d122      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800353c:	4013      	ands	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003542:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003544:	4293      	cmp	r3, r2
 8003546:	d119      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	3b01      	subs	r3, #1
 8003556:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d10f      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003566:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d107      	bne.n	800357c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800

08003590 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e07b      	b.n	800369a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d108      	bne.n	80035bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035b2:	d009      	beq.n	80035c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	61da      	str	r2, [r3, #28]
 80035ba:	e005      	b.n	80035c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fe44 	bl	8001270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364c:	ea42 0103 	orr.w	r1, r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003654:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	f003 0104 	and.w	r1, r3, #4
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	f003 0210 	and.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003688:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b088      	sub	sp, #32
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036b2:	f7fe fe63 	bl	800237c <HAL_GetTick>
 80036b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d001      	beq.n	80036cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
 80036ca:	e12a      	b.n	8003922 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_SPI_Transmit+0x36>
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e122      	b.n	8003922 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_SPI_Transmit+0x48>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e11b      	b.n	8003922 <HAL_SPI_Transmit+0x280>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2203      	movs	r2, #3
 80036f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	88fa      	ldrh	r2, [r7, #6]
 800370a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	88fa      	ldrh	r2, [r7, #6]
 8003710:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003738:	d10f      	bne.n	800375a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003748:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003758:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003764:	2b40      	cmp	r3, #64	@ 0x40
 8003766:	d007      	beq.n	8003778 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003776:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003780:	d152      	bne.n	8003828 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_SPI_Transmit+0xee>
 800378a:	8b7b      	ldrh	r3, [r7, #26]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d145      	bne.n	800381c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a0:	1c9a      	adds	r2, r3, #2
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037b4:	e032      	b.n	800381c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d112      	bne.n	80037ea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	881a      	ldrh	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d4:	1c9a      	adds	r2, r3, #2
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80037e8:	e018      	b.n	800381c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ea:	f7fe fdc7 	bl	800237c <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d803      	bhi.n	8003802 <HAL_SPI_Transmit+0x160>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003800:	d102      	bne.n	8003808 <HAL_SPI_Transmit+0x166>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e082      	b.n	8003922 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1c7      	bne.n	80037b6 <HAL_SPI_Transmit+0x114>
 8003826:	e053      	b.n	80038d0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_SPI_Transmit+0x194>
 8003830:	8b7b      	ldrh	r3, [r7, #26]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d147      	bne.n	80038c6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	7812      	ldrb	r2, [r2, #0]
 8003842:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800385c:	e033      	b.n	80038c6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b02      	cmp	r3, #2
 800386a:	d113      	bne.n	8003894 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	330c      	adds	r3, #12
 8003876:	7812      	ldrb	r2, [r2, #0]
 8003878:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003892:	e018      	b.n	80038c6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003894:	f7fe fd72 	bl	800237c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d803      	bhi.n	80038ac <HAL_SPI_Transmit+0x20a>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038aa:	d102      	bne.n	80038b2 <HAL_SPI_Transmit+0x210>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e02d      	b.n	8003922 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1c6      	bne.n	800385e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	6839      	ldr	r1, [r7, #0]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f8b1 	bl	8003a3c <SPI_EndRxTxTransaction>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003920:	2300      	movs	r3, #0
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800393c:	f7fe fd1e 	bl	800237c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	4413      	add	r3, r2
 800394a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800394c:	f7fe fd16 	bl	800237c <HAL_GetTick>
 8003950:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003952:	4b39      	ldr	r3, [pc, #228]	@ (8003a38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	015b      	lsls	r3, r3, #5
 8003958:	0d1b      	lsrs	r3, r3, #20
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003962:	e055      	b.n	8003a10 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800396a:	d051      	beq.n	8003a10 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800396c:	f7fe fd06 	bl	800237c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	429a      	cmp	r2, r3
 800397a:	d902      	bls.n	8003982 <SPI_WaitFlagStateUntilTimeout+0x56>
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d13d      	bne.n	80039fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003990:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800399a:	d111      	bne.n	80039c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039a4:	d004      	beq.n	80039b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ae:	d107      	bne.n	80039c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039c8:	d10f      	bne.n	80039ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e018      	b.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	e002      	b.n	8003a10 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d19a      	bne.n	8003964 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3720      	adds	r7, #32
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20000000 	.word	0x20000000

08003a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	2102      	movs	r1, #2
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f7ff ff6a 	bl	800392c <SPI_WaitFlagStateUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e032      	b.n	8003ad4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003adc <SPI_EndRxTxTransaction+0xa0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae0 <SPI_EndRxTxTransaction+0xa4>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	0d5b      	lsrs	r3, r3, #21
 8003a7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a8c:	d112      	bne.n	8003ab4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2200      	movs	r2, #0
 8003a96:	2180      	movs	r1, #128	@ 0x80
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7ff ff47 	bl	800392c <SPI_WaitFlagStateUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d016      	beq.n	8003ad2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e00f      	b.n	8003ad4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aca:	2b80      	cmp	r3, #128	@ 0x80
 8003acc:	d0f2      	beq.n	8003ab4 <SPI_EndRxTxTransaction+0x78>
 8003ace:	e000      	b.n	8003ad2 <SPI_EndRxTxTransaction+0x96>
        break;
 8003ad0:	bf00      	nop
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	165e9f81 	.word	0x165e9f81

08003ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e041      	b.n	8003b7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fd ff4c 	bl	80019a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4619      	mov	r1, r3
 8003b22:	4610      	mov	r0, r2
 8003b24:	f000 fcc4 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d001      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e04e      	b.n	8003c3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a23      	ldr	r2, [pc, #140]	@ (8003c48 <HAL_TIM_Base_Start_IT+0xc4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d022      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc6:	d01d      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8003c4c <HAL_TIM_Base_Start_IT+0xc8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d018      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c50 <HAL_TIM_Base_Start_IT+0xcc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d013      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c54 <HAL_TIM_Base_Start_IT+0xd0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00e      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1b      	ldr	r2, [pc, #108]	@ (8003c58 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d009      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a19      	ldr	r2, [pc, #100]	@ (8003c5c <HAL_TIM_Base_Start_IT+0xd8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d004      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x80>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a18      	ldr	r2, [pc, #96]	@ (8003c60 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d111      	bne.n	8003c28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d010      	beq.n	8003c38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c26:	e007      	b.n	8003c38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800
 8003c54:	40000c00 	.word	0x40000c00
 8003c58:	40010400 	.word	0x40010400
 8003c5c:	40014000 	.word	0x40014000
 8003c60:	40001800 	.word	0x40001800

08003c64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e041      	b.n	8003cfa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fd fdd8 	bl	8001840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	f000 fc04 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d109      	bne.n	8003d28 <HAL_TIM_PWM_Start+0x24>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	e022      	b.n	8003d6e <HAL_TIM_PWM_Start+0x6a>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d109      	bne.n	8003d42 <HAL_TIM_PWM_Start+0x3e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	bf14      	ite	ne
 8003d3a:	2301      	movne	r3, #1
 8003d3c:	2300      	moveq	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	e015      	b.n	8003d6e <HAL_TIM_PWM_Start+0x6a>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d109      	bne.n	8003d5c <HAL_TIM_PWM_Start+0x58>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	bf14      	ite	ne
 8003d54:	2301      	movne	r3, #1
 8003d56:	2300      	moveq	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e008      	b.n	8003d6e <HAL_TIM_PWM_Start+0x6a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	bf14      	ite	ne
 8003d68:	2301      	movne	r3, #1
 8003d6a:	2300      	moveq	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e07c      	b.n	8003e70 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d104      	bne.n	8003d86 <HAL_TIM_PWM_Start+0x82>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d84:	e013      	b.n	8003dae <HAL_TIM_PWM_Start+0xaa>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d104      	bne.n	8003d96 <HAL_TIM_PWM_Start+0x92>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d94:	e00b      	b.n	8003dae <HAL_TIM_PWM_Start+0xaa>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d104      	bne.n	8003da6 <HAL_TIM_PWM_Start+0xa2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003da4:	e003      	b.n	8003dae <HAL_TIM_PWM_Start+0xaa>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2201      	movs	r2, #1
 8003db4:	6839      	ldr	r1, [r7, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fdd0 	bl	800495c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e78 <HAL_TIM_PWM_Start+0x174>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_TIM_PWM_Start+0xcc>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a2c      	ldr	r2, [pc, #176]	@ (8003e7c <HAL_TIM_PWM_Start+0x178>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <HAL_TIM_PWM_Start+0xd0>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_TIM_PWM_Start+0xd2>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d007      	beq.n	8003dea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003de8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a22      	ldr	r2, [pc, #136]	@ (8003e78 <HAL_TIM_PWM_Start+0x174>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d022      	beq.n	8003e3a <HAL_TIM_PWM_Start+0x136>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dfc:	d01d      	beq.n	8003e3a <HAL_TIM_PWM_Start+0x136>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1f      	ldr	r2, [pc, #124]	@ (8003e80 <HAL_TIM_PWM_Start+0x17c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d018      	beq.n	8003e3a <HAL_TIM_PWM_Start+0x136>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e84 <HAL_TIM_PWM_Start+0x180>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_TIM_PWM_Start+0x136>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1c      	ldr	r2, [pc, #112]	@ (8003e88 <HAL_TIM_PWM_Start+0x184>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00e      	beq.n	8003e3a <HAL_TIM_PWM_Start+0x136>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a16      	ldr	r2, [pc, #88]	@ (8003e7c <HAL_TIM_PWM_Start+0x178>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_TIM_PWM_Start+0x136>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a18      	ldr	r2, [pc, #96]	@ (8003e8c <HAL_TIM_PWM_Start+0x188>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <HAL_TIM_PWM_Start+0x136>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a16      	ldr	r2, [pc, #88]	@ (8003e90 <HAL_TIM_PWM_Start+0x18c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d111      	bne.n	8003e5e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b06      	cmp	r3, #6
 8003e4a:	d010      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5c:	e007      	b.n	8003e6e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0201 	orr.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40010400 	.word	0x40010400
 8003e80:	40000400 	.word	0x40000400
 8003e84:	40000800 	.word	0x40000800
 8003e88:	40000c00 	.word	0x40000c00
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40001800 	.word	0x40001800

08003e94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e097      	b.n	8003fd8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7fd fcf5 	bl	80018ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ed8:	f023 0307 	bic.w	r3, r3, #7
 8003edc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4610      	mov	r0, r2
 8003eea:	f000 fae1 	bl	80044b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f16:	f023 0303 	bic.w	r3, r3, #3
 8003f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	4313      	orrs	r3, r2
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003f34:	f023 030c 	bic.w	r3, r3, #12
 8003f38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	4313      	orrs	r3, r2
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	011a      	lsls	r2, r3, #4
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	031b      	lsls	r3, r3, #12
 8003f64:	4313      	orrs	r3, r2
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003f72:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	4313      	orrs	r3, r2
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ff0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ff8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004000:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004008:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d110      	bne.n	8004032 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d102      	bne.n	800401c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004016:	7b7b      	ldrb	r3, [r7, #13]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d001      	beq.n	8004020 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e069      	b.n	80040f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004030:	e031      	b.n	8004096 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b04      	cmp	r3, #4
 8004036:	d110      	bne.n	800405a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004038:	7bbb      	ldrb	r3, [r7, #14]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d102      	bne.n	8004044 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800403e:	7b3b      	ldrb	r3, [r7, #12]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d001      	beq.n	8004048 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e055      	b.n	80040f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004058:	e01d      	b.n	8004096 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d108      	bne.n	8004072 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004060:	7bbb      	ldrb	r3, [r7, #14]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d105      	bne.n	8004072 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004066:	7b7b      	ldrb	r3, [r7, #13]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d102      	bne.n	8004072 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800406c:	7b3b      	ldrb	r3, [r7, #12]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d001      	beq.n	8004076 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e03e      	b.n	80040f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2202      	movs	r2, #2
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2202      	movs	r2, #2
 8004082:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2202      	movs	r2, #2
 800408a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_TIM_Encoder_Start+0xc4>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d008      	beq.n	80040b4 <HAL_TIM_Encoder_Start+0xd4>
 80040a2:	e00f      	b.n	80040c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2201      	movs	r2, #1
 80040aa:	2100      	movs	r1, #0
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fc55 	bl	800495c <TIM_CCxChannelCmd>
      break;
 80040b2:	e016      	b.n	80040e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2201      	movs	r2, #1
 80040ba:	2104      	movs	r1, #4
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fc4d 	bl	800495c <TIM_CCxChannelCmd>
      break;
 80040c2:	e00e      	b.n	80040e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2201      	movs	r2, #1
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fc45 	bl	800495c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2201      	movs	r2, #1
 80040d8:	2104      	movs	r1, #4
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fc3e 	bl	800495c <TIM_CCxChannelCmd>
      break;
 80040e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0201 	orr.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d020      	beq.n	8004160 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01b      	beq.n	8004160 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0202 	mvn.w	r2, #2
 8004130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f994 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 800414c:	e005      	b.n	800415a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f986 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f997 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d020      	beq.n	80041ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01b      	beq.n	80041ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0204 	mvn.w	r2, #4
 800417c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2202      	movs	r2, #2
 8004182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f96e 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f960 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f971 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d020      	beq.n	80041f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01b      	beq.n	80041f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0208 	mvn.w	r2, #8
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2204      	movs	r2, #4
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f948 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f93a 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f94b 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f003 0310 	and.w	r3, r3, #16
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d020      	beq.n	8004244 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01b      	beq.n	8004244 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0210 	mvn.w	r2, #16
 8004214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2208      	movs	r2, #8
 800421a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f922 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004230:	e005      	b.n	800423e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f914 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f925 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00c      	beq.n	8004268 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0201 	mvn.w	r2, #1
 8004260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fc ff8e 	bl	8001184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00c      	beq.n	800428c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fc14 	bl	8004ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00c      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8f6 	bl	800449c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00c      	beq.n	80042d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0220 	mvn.w	r2, #32
 80042cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fbe6 	bl	8004aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e0ae      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b0c      	cmp	r3, #12
 8004306:	f200 809f 	bhi.w	8004448 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800430a:	a201      	add	r2, pc, #4	@ (adr r2, 8004310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004345 	.word	0x08004345
 8004314:	08004449 	.word	0x08004449
 8004318:	08004449 	.word	0x08004449
 800431c:	08004449 	.word	0x08004449
 8004320:	08004385 	.word	0x08004385
 8004324:	08004449 	.word	0x08004449
 8004328:	08004449 	.word	0x08004449
 800432c:	08004449 	.word	0x08004449
 8004330:	080043c7 	.word	0x080043c7
 8004334:	08004449 	.word	0x08004449
 8004338:	08004449 	.word	0x08004449
 800433c:	08004449 	.word	0x08004449
 8004340:	08004407 	.word	0x08004407
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	4618      	mov	r0, r3
 800434c:	f000 f956 	bl	80045fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0208 	orr.w	r2, r2, #8
 800435e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0204 	bic.w	r2, r2, #4
 800436e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6999      	ldr	r1, [r3, #24]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	619a      	str	r2, [r3, #24]
      break;
 8004382:	e064      	b.n	800444e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f9a6 	bl	80046dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800439e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6999      	ldr	r1, [r3, #24]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	021a      	lsls	r2, r3, #8
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	619a      	str	r2, [r3, #24]
      break;
 80043c4:	e043      	b.n	800444e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 f9fb 	bl	80047c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0208 	orr.w	r2, r2, #8
 80043e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0204 	bic.w	r2, r2, #4
 80043f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69d9      	ldr	r1, [r3, #28]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	61da      	str	r2, [r3, #28]
      break;
 8004404:	e023      	b.n	800444e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fa4f 	bl	80048b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69d9      	ldr	r1, [r3, #28]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	021a      	lsls	r2, r3, #8
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	61da      	str	r2, [r3, #28]
      break;
 8004446:	e002      	b.n	800444e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	75fb      	strb	r3, [r7, #23]
      break;
 800444c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004456:	7dfb      	ldrb	r3, [r7, #23]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a43      	ldr	r2, [pc, #268]	@ (80045d0 <TIM_Base_SetConfig+0x120>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ce:	d00f      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a40      	ldr	r2, [pc, #256]	@ (80045d4 <TIM_Base_SetConfig+0x124>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3f      	ldr	r2, [pc, #252]	@ (80045d8 <TIM_Base_SetConfig+0x128>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3e      	ldr	r2, [pc, #248]	@ (80045dc <TIM_Base_SetConfig+0x12c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a3d      	ldr	r2, [pc, #244]	@ (80045e0 <TIM_Base_SetConfig+0x130>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a32      	ldr	r2, [pc, #200]	@ (80045d0 <TIM_Base_SetConfig+0x120>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d02b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004510:	d027      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2f      	ldr	r2, [pc, #188]	@ (80045d4 <TIM_Base_SetConfig+0x124>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d023      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2e      	ldr	r2, [pc, #184]	@ (80045d8 <TIM_Base_SetConfig+0x128>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2d      	ldr	r2, [pc, #180]	@ (80045dc <TIM_Base_SetConfig+0x12c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a2c      	ldr	r2, [pc, #176]	@ (80045e0 <TIM_Base_SetConfig+0x130>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d017      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a2b      	ldr	r2, [pc, #172]	@ (80045e4 <TIM_Base_SetConfig+0x134>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a2a      	ldr	r2, [pc, #168]	@ (80045e8 <TIM_Base_SetConfig+0x138>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a29      	ldr	r2, [pc, #164]	@ (80045ec <TIM_Base_SetConfig+0x13c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a28      	ldr	r2, [pc, #160]	@ (80045f0 <TIM_Base_SetConfig+0x140>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a27      	ldr	r2, [pc, #156]	@ (80045f4 <TIM_Base_SetConfig+0x144>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d003      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a26      	ldr	r2, [pc, #152]	@ (80045f8 <TIM_Base_SetConfig+0x148>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d108      	bne.n	8004574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a0e      	ldr	r2, [pc, #56]	@ (80045d0 <TIM_Base_SetConfig+0x120>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d003      	beq.n	80045a2 <TIM_Base_SetConfig+0xf2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a10      	ldr	r2, [pc, #64]	@ (80045e0 <TIM_Base_SetConfig+0x130>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d103      	bne.n	80045aa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f043 0204 	orr.w	r2, r3, #4
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	601a      	str	r2, [r3, #0]
}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800
 80045dc:	40000c00 	.word	0x40000c00
 80045e0:	40010400 	.word	0x40010400
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40014400 	.word	0x40014400
 80045ec:	40014800 	.word	0x40014800
 80045f0:	40001800 	.word	0x40001800
 80045f4:	40001c00 	.word	0x40001c00
 80045f8:	40002000 	.word	0x40002000

080045fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f023 0201 	bic.w	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0303 	bic.w	r3, r3, #3
 8004632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f023 0302 	bic.w	r3, r3, #2
 8004644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a20      	ldr	r2, [pc, #128]	@ (80046d4 <TIM_OC1_SetConfig+0xd8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_OC1_SetConfig+0x64>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a1f      	ldr	r2, [pc, #124]	@ (80046d8 <TIM_OC1_SetConfig+0xdc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d10c      	bne.n	800467a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f023 0308 	bic.w	r3, r3, #8
 8004666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f023 0304 	bic.w	r3, r3, #4
 8004678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a15      	ldr	r2, [pc, #84]	@ (80046d4 <TIM_OC1_SetConfig+0xd8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d003      	beq.n	800468a <TIM_OC1_SetConfig+0x8e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a14      	ldr	r2, [pc, #80]	@ (80046d8 <TIM_OC1_SetConfig+0xdc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d111      	bne.n	80046ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	621a      	str	r2, [r3, #32]
}
 80046c8:	bf00      	nop
 80046ca:	371c      	adds	r7, #28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	40010000 	.word	0x40010000
 80046d8:	40010400 	.word	0x40010400

080046dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f023 0210 	bic.w	r2, r3, #16
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800470a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f023 0320 	bic.w	r3, r3, #32
 8004726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a22      	ldr	r2, [pc, #136]	@ (80047c0 <TIM_OC2_SetConfig+0xe4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d003      	beq.n	8004744 <TIM_OC2_SetConfig+0x68>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a21      	ldr	r2, [pc, #132]	@ (80047c4 <TIM_OC2_SetConfig+0xe8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d10d      	bne.n	8004760 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800474a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800475e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a17      	ldr	r2, [pc, #92]	@ (80047c0 <TIM_OC2_SetConfig+0xe4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_OC2_SetConfig+0x94>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a16      	ldr	r2, [pc, #88]	@ (80047c4 <TIM_OC2_SetConfig+0xe8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d113      	bne.n	8004798 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800477e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40010000 	.word	0x40010000
 80047c4:	40010400 	.word	0x40010400

080047c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0303 	bic.w	r3, r3, #3
 80047fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a21      	ldr	r2, [pc, #132]	@ (80048a8 <TIM_OC3_SetConfig+0xe0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_OC3_SetConfig+0x66>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a20      	ldr	r2, [pc, #128]	@ (80048ac <TIM_OC3_SetConfig+0xe4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d10d      	bne.n	800484a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004834:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a16      	ldr	r2, [pc, #88]	@ (80048a8 <TIM_OC3_SetConfig+0xe0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d003      	beq.n	800485a <TIM_OC3_SetConfig+0x92>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a15      	ldr	r2, [pc, #84]	@ (80048ac <TIM_OC3_SetConfig+0xe4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d113      	bne.n	8004882 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	621a      	str	r2, [r3, #32]
}
 800489c:	bf00      	nop
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	40010000 	.word	0x40010000
 80048ac:	40010400 	.word	0x40010400

080048b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	031b      	lsls	r3, r3, #12
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a12      	ldr	r2, [pc, #72]	@ (8004954 <TIM_OC4_SetConfig+0xa4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d003      	beq.n	8004918 <TIM_OC4_SetConfig+0x68>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a11      	ldr	r2, [pc, #68]	@ (8004958 <TIM_OC4_SetConfig+0xa8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d109      	bne.n	800492c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800491e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	019b      	lsls	r3, r3, #6
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	621a      	str	r2, [r3, #32]
}
 8004946:	bf00      	nop
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40010400 	.word	0x40010400

0800495c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	2201      	movs	r2, #1
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1a      	ldr	r2, [r3, #32]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	43db      	mvns	r3, r3
 800497e:	401a      	ands	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1a      	ldr	r2, [r3, #32]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	431a      	orrs	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049bc:	2302      	movs	r3, #2
 80049be:	e05a      	b.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a21      	ldr	r2, [pc, #132]	@ (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d022      	beq.n	8004a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a0c:	d01d      	beq.n	8004a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1d      	ldr	r2, [pc, #116]	@ (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d018      	beq.n	8004a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d013      	beq.n	8004a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1a      	ldr	r2, [pc, #104]	@ (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00e      	beq.n	8004a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a18      	ldr	r2, [pc, #96]	@ (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d009      	beq.n	8004a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a17      	ldr	r2, [pc, #92]	@ (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d004      	beq.n	8004a4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a15      	ldr	r2, [pc, #84]	@ (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d10c      	bne.n	8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800
 8004a90:	40000c00 	.word	0x40000c00
 8004a94:	40010400 	.word	0x40010400
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40001800 	.word	0x40001800

08004aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e042      	b.n	8004b60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fd f828 	bl	8001b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2224      	movs	r2, #36	@ 0x24
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f82b 	bl	8004b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b6c:	b0c0      	sub	sp, #256	@ 0x100
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b84:	68d9      	ldr	r1, [r3, #12]
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	ea40 0301 	orr.w	r3, r0, r1
 8004b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bc0:	f021 010c 	bic.w	r1, r1, #12
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be2:	6999      	ldr	r1, [r3, #24]
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	ea40 0301 	orr.w	r3, r0, r1
 8004bee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b8f      	ldr	r3, [pc, #572]	@ (8004e34 <UART_SetConfig+0x2cc>)
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d005      	beq.n	8004c08 <UART_SetConfig+0xa0>
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b8d      	ldr	r3, [pc, #564]	@ (8004e38 <UART_SetConfig+0x2d0>)
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d104      	bne.n	8004c12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c08:	f7fd ffe0 	bl	8002bcc <HAL_RCC_GetPCLK2Freq>
 8004c0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c10:	e003      	b.n	8004c1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c12:	f7fd ffc7 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 8004c16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c24:	f040 810c 	bne.w	8004e40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	1891      	adds	r1, r2, r2
 8004c40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c42:	415b      	adcs	r3, r3
 8004c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	eb12 0801 	adds.w	r8, r2, r1
 8004c50:	4629      	mov	r1, r5
 8004c52:	eb43 0901 	adc.w	r9, r3, r1
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6a:	4690      	mov	r8, r2
 8004c6c:	4699      	mov	r9, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	eb18 0303 	adds.w	r3, r8, r3
 8004c74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c78:	462b      	mov	r3, r5
 8004c7a:	eb49 0303 	adc.w	r3, r9, r3
 8004c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c96:	460b      	mov	r3, r1
 8004c98:	18db      	adds	r3, r3, r3
 8004c9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	eb42 0303 	adc.w	r3, r2, r3
 8004ca2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ca4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ca8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cac:	f7fb ff26 	bl	8000afc <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4b61      	ldr	r3, [pc, #388]	@ (8004e3c <UART_SetConfig+0x2d4>)
 8004cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	011c      	lsls	r4, r3, #4
 8004cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cc8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ccc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	1891      	adds	r1, r2, r2
 8004cd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cd8:	415b      	adcs	r3, r3
 8004cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	eb43 0b01 	adc.w	fp, r3, r1
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d00:	4692      	mov	sl, r2
 8004d02:	469b      	mov	fp, r3
 8004d04:	4643      	mov	r3, r8
 8004d06:	eb1a 0303 	adds.w	r3, sl, r3
 8004d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d0e:	464b      	mov	r3, r9
 8004d10:	eb4b 0303 	adc.w	r3, fp, r3
 8004d14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	18db      	adds	r3, r3, r3
 8004d30:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d32:	4613      	mov	r3, r2
 8004d34:	eb42 0303 	adc.w	r3, r2, r3
 8004d38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d42:	f7fb fedb 	bl	8000afc <__aeabi_uldivmod>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e3c <UART_SetConfig+0x2d4>)
 8004d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	2264      	movs	r2, #100	@ 0x64
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	1acb      	subs	r3, r1, r3
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d62:	4b36      	ldr	r3, [pc, #216]	@ (8004e3c <UART_SetConfig+0x2d4>)
 8004d64:	fba3 2302 	umull	r2, r3, r3, r2
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d70:	441c      	add	r4, r3
 8004d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	1891      	adds	r1, r2, r2
 8004d8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d8c:	415b      	adcs	r3, r3
 8004d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d94:	4641      	mov	r1, r8
 8004d96:	1851      	adds	r1, r2, r1
 8004d98:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	414b      	adcs	r3, r1
 8004d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004dac:	4659      	mov	r1, fp
 8004dae:	00cb      	lsls	r3, r1, #3
 8004db0:	4651      	mov	r1, sl
 8004db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004db6:	4651      	mov	r1, sl
 8004db8:	00ca      	lsls	r2, r1, #3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	189b      	adds	r3, r3, r2
 8004dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dc8:	464b      	mov	r3, r9
 8004dca:	460a      	mov	r2, r1
 8004dcc:	eb42 0303 	adc.w	r3, r2, r3
 8004dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004de0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004de4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004de8:	460b      	mov	r3, r1
 8004dea:	18db      	adds	r3, r3, r3
 8004dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dee:	4613      	mov	r3, r2
 8004df0:	eb42 0303 	adc.w	r3, r2, r3
 8004df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004dfe:	f7fb fe7d 	bl	8000afc <__aeabi_uldivmod>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4b0d      	ldr	r3, [pc, #52]	@ (8004e3c <UART_SetConfig+0x2d4>)
 8004e08:	fba3 1302 	umull	r1, r3, r3, r2
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	2164      	movs	r1, #100	@ 0x64
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	3332      	adds	r3, #50	@ 0x32
 8004e1a:	4a08      	ldr	r2, [pc, #32]	@ (8004e3c <UART_SetConfig+0x2d4>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	f003 0207 	and.w	r2, r3, #7
 8004e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4422      	add	r2, r4
 8004e2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e30:	e106      	b.n	8005040 <UART_SetConfig+0x4d8>
 8004e32:	bf00      	nop
 8004e34:	40011000 	.word	0x40011000
 8004e38:	40011400 	.word	0x40011400
 8004e3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e52:	4642      	mov	r2, r8
 8004e54:	464b      	mov	r3, r9
 8004e56:	1891      	adds	r1, r2, r2
 8004e58:	6239      	str	r1, [r7, #32]
 8004e5a:	415b      	adcs	r3, r3
 8004e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e62:	4641      	mov	r1, r8
 8004e64:	1854      	adds	r4, r2, r1
 8004e66:	4649      	mov	r1, r9
 8004e68:	eb43 0501 	adc.w	r5, r3, r1
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	00eb      	lsls	r3, r5, #3
 8004e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e7a:	00e2      	lsls	r2, r4, #3
 8004e7c:	4614      	mov	r4, r2
 8004e7e:	461d      	mov	r5, r3
 8004e80:	4643      	mov	r3, r8
 8004e82:	18e3      	adds	r3, r4, r3
 8004e84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e88:	464b      	mov	r3, r9
 8004e8a:	eb45 0303 	adc.w	r3, r5, r3
 8004e8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004eae:	4629      	mov	r1, r5
 8004eb0:	008b      	lsls	r3, r1, #2
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb8:	4621      	mov	r1, r4
 8004eba:	008a      	lsls	r2, r1, #2
 8004ebc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ec0:	f7fb fe1c 	bl	8000afc <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4b60      	ldr	r3, [pc, #384]	@ (800504c <UART_SetConfig+0x4e4>)
 8004eca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	011c      	lsls	r4, r3, #4
 8004ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004edc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ee0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	464b      	mov	r3, r9
 8004ee8:	1891      	adds	r1, r2, r2
 8004eea:	61b9      	str	r1, [r7, #24]
 8004eec:	415b      	adcs	r3, r3
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	1851      	adds	r1, r2, r1
 8004ef8:	6139      	str	r1, [r7, #16]
 8004efa:	4649      	mov	r1, r9
 8004efc:	414b      	adcs	r3, r1
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	00cb      	lsls	r3, r1, #3
 8004f10:	4651      	mov	r1, sl
 8004f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f16:	4651      	mov	r1, sl
 8004f18:	00ca      	lsls	r2, r1, #3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4642      	mov	r2, r8
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f28:	464b      	mov	r3, r9
 8004f2a:	460a      	mov	r2, r1
 8004f2c:	eb42 0303 	adc.w	r3, r2, r3
 8004f30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	008b      	lsls	r3, r1, #2
 8004f50:	4641      	mov	r1, r8
 8004f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f56:	4641      	mov	r1, r8
 8004f58:	008a      	lsls	r2, r1, #2
 8004f5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f5e:	f7fb fdcd 	bl	8000afc <__aeabi_uldivmod>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	4b38      	ldr	r3, [pc, #224]	@ (800504c <UART_SetConfig+0x4e4>)
 8004f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	2264      	movs	r2, #100	@ 0x64
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	1acb      	subs	r3, r1, r3
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	3332      	adds	r3, #50	@ 0x32
 8004f7c:	4a33      	ldr	r2, [pc, #204]	@ (800504c <UART_SetConfig+0x4e4>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f88:	441c      	add	r4, r3
 8004f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f8e:	2200      	movs	r2, #0
 8004f90:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f92:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f98:	4642      	mov	r2, r8
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	1891      	adds	r1, r2, r2
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	415b      	adcs	r3, r3
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fa8:	4641      	mov	r1, r8
 8004faa:	1851      	adds	r1, r2, r1
 8004fac:	6039      	str	r1, [r7, #0]
 8004fae:	4649      	mov	r1, r9
 8004fb0:	414b      	adcs	r3, r1
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fc0:	4659      	mov	r1, fp
 8004fc2:	00cb      	lsls	r3, r1, #3
 8004fc4:	4651      	mov	r1, sl
 8004fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fca:	4651      	mov	r1, sl
 8004fcc:	00ca      	lsls	r2, r1, #3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fda:	464b      	mov	r3, r9
 8004fdc:	460a      	mov	r2, r1
 8004fde:	eb42 0303 	adc.w	r3, r2, r3
 8004fe2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fee:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ffc:	4649      	mov	r1, r9
 8004ffe:	008b      	lsls	r3, r1, #2
 8005000:	4641      	mov	r1, r8
 8005002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005006:	4641      	mov	r1, r8
 8005008:	008a      	lsls	r2, r1, #2
 800500a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800500e:	f7fb fd75 	bl	8000afc <__aeabi_uldivmod>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4b0d      	ldr	r3, [pc, #52]	@ (800504c <UART_SetConfig+0x4e4>)
 8005018:	fba3 1302 	umull	r1, r3, r3, r2
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	2164      	movs	r1, #100	@ 0x64
 8005020:	fb01 f303 	mul.w	r3, r1, r3
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	3332      	adds	r3, #50	@ 0x32
 800502a:	4a08      	ldr	r2, [pc, #32]	@ (800504c <UART_SetConfig+0x4e4>)
 800502c:	fba2 2303 	umull	r2, r3, r2, r3
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	f003 020f 	and.w	r2, r3, #15
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4422      	add	r2, r4
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005046:	46bd      	mov	sp, r7
 8005048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504c:	51eb851f 	.word	0x51eb851f

08005050 <sniprintf>:
 8005050:	b40c      	push	{r2, r3}
 8005052:	b530      	push	{r4, r5, lr}
 8005054:	4b18      	ldr	r3, [pc, #96]	@ (80050b8 <sniprintf+0x68>)
 8005056:	1e0c      	subs	r4, r1, #0
 8005058:	681d      	ldr	r5, [r3, #0]
 800505a:	b09d      	sub	sp, #116	@ 0x74
 800505c:	da08      	bge.n	8005070 <sniprintf+0x20>
 800505e:	238b      	movs	r3, #139	@ 0x8b
 8005060:	602b      	str	r3, [r5, #0]
 8005062:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005066:	b01d      	add	sp, #116	@ 0x74
 8005068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800506c:	b002      	add	sp, #8
 800506e:	4770      	bx	lr
 8005070:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005074:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800507e:	bf14      	ite	ne
 8005080:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005084:	4623      	moveq	r3, r4
 8005086:	9304      	str	r3, [sp, #16]
 8005088:	9307      	str	r3, [sp, #28]
 800508a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800508e:	9002      	str	r0, [sp, #8]
 8005090:	9006      	str	r0, [sp, #24]
 8005092:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005096:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005098:	ab21      	add	r3, sp, #132	@ 0x84
 800509a:	a902      	add	r1, sp, #8
 800509c:	4628      	mov	r0, r5
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	f000 f89c 	bl	80051dc <_svfiprintf_r>
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	bfbc      	itt	lt
 80050a8:	238b      	movlt	r3, #139	@ 0x8b
 80050aa:	602b      	strlt	r3, [r5, #0]
 80050ac:	2c00      	cmp	r4, #0
 80050ae:	d0da      	beq.n	8005066 <sniprintf+0x16>
 80050b0:	9b02      	ldr	r3, [sp, #8]
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e7d6      	b.n	8005066 <sniprintf+0x16>
 80050b8:	20000364 	.word	0x20000364

080050bc <memset>:
 80050bc:	4402      	add	r2, r0
 80050be:	4603      	mov	r3, r0
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d100      	bne.n	80050c6 <memset+0xa>
 80050c4:	4770      	bx	lr
 80050c6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ca:	e7f9      	b.n	80050c0 <memset+0x4>

080050cc <__errno>:
 80050cc:	4b01      	ldr	r3, [pc, #4]	@ (80050d4 <__errno+0x8>)
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000364 	.word	0x20000364

080050d8 <__libc_init_array>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	4d0d      	ldr	r5, [pc, #52]	@ (8005110 <__libc_init_array+0x38>)
 80050dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005114 <__libc_init_array+0x3c>)
 80050de:	1b64      	subs	r4, r4, r5
 80050e0:	10a4      	asrs	r4, r4, #2
 80050e2:	2600      	movs	r6, #0
 80050e4:	42a6      	cmp	r6, r4
 80050e6:	d109      	bne.n	80050fc <__libc_init_array+0x24>
 80050e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005118 <__libc_init_array+0x40>)
 80050ea:	4c0c      	ldr	r4, [pc, #48]	@ (800511c <__libc_init_array+0x44>)
 80050ec:	f000 fc64 	bl	80059b8 <_init>
 80050f0:	1b64      	subs	r4, r4, r5
 80050f2:	10a4      	asrs	r4, r4, #2
 80050f4:	2600      	movs	r6, #0
 80050f6:	42a6      	cmp	r6, r4
 80050f8:	d105      	bne.n	8005106 <__libc_init_array+0x2e>
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
 80050fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005100:	4798      	blx	r3
 8005102:	3601      	adds	r6, #1
 8005104:	e7ee      	b.n	80050e4 <__libc_init_array+0xc>
 8005106:	f855 3b04 	ldr.w	r3, [r5], #4
 800510a:	4798      	blx	r3
 800510c:	3601      	adds	r6, #1
 800510e:	e7f2      	b.n	80050f6 <__libc_init_array+0x1e>
 8005110:	08005a3c 	.word	0x08005a3c
 8005114:	08005a3c 	.word	0x08005a3c
 8005118:	08005a3c 	.word	0x08005a3c
 800511c:	08005a40 	.word	0x08005a40

08005120 <__retarget_lock_acquire_recursive>:
 8005120:	4770      	bx	lr

08005122 <__retarget_lock_release_recursive>:
 8005122:	4770      	bx	lr

08005124 <__ssputs_r>:
 8005124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	688e      	ldr	r6, [r1, #8]
 800512a:	461f      	mov	r7, r3
 800512c:	42be      	cmp	r6, r7
 800512e:	680b      	ldr	r3, [r1, #0]
 8005130:	4682      	mov	sl, r0
 8005132:	460c      	mov	r4, r1
 8005134:	4690      	mov	r8, r2
 8005136:	d82d      	bhi.n	8005194 <__ssputs_r+0x70>
 8005138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800513c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005140:	d026      	beq.n	8005190 <__ssputs_r+0x6c>
 8005142:	6965      	ldr	r5, [r4, #20]
 8005144:	6909      	ldr	r1, [r1, #16]
 8005146:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800514a:	eba3 0901 	sub.w	r9, r3, r1
 800514e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005152:	1c7b      	adds	r3, r7, #1
 8005154:	444b      	add	r3, r9
 8005156:	106d      	asrs	r5, r5, #1
 8005158:	429d      	cmp	r5, r3
 800515a:	bf38      	it	cc
 800515c:	461d      	movcc	r5, r3
 800515e:	0553      	lsls	r3, r2, #21
 8005160:	d527      	bpl.n	80051b2 <__ssputs_r+0x8e>
 8005162:	4629      	mov	r1, r5
 8005164:	f000 f958 	bl	8005418 <_malloc_r>
 8005168:	4606      	mov	r6, r0
 800516a:	b360      	cbz	r0, 80051c6 <__ssputs_r+0xa2>
 800516c:	6921      	ldr	r1, [r4, #16]
 800516e:	464a      	mov	r2, r9
 8005170:	f000 fbc2 	bl	80058f8 <memcpy>
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800517a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800517e:	81a3      	strh	r3, [r4, #12]
 8005180:	6126      	str	r6, [r4, #16]
 8005182:	6165      	str	r5, [r4, #20]
 8005184:	444e      	add	r6, r9
 8005186:	eba5 0509 	sub.w	r5, r5, r9
 800518a:	6026      	str	r6, [r4, #0]
 800518c:	60a5      	str	r5, [r4, #8]
 800518e:	463e      	mov	r6, r7
 8005190:	42be      	cmp	r6, r7
 8005192:	d900      	bls.n	8005196 <__ssputs_r+0x72>
 8005194:	463e      	mov	r6, r7
 8005196:	6820      	ldr	r0, [r4, #0]
 8005198:	4632      	mov	r2, r6
 800519a:	4641      	mov	r1, r8
 800519c:	f000 fb82 	bl	80058a4 <memmove>
 80051a0:	68a3      	ldr	r3, [r4, #8]
 80051a2:	1b9b      	subs	r3, r3, r6
 80051a4:	60a3      	str	r3, [r4, #8]
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	4433      	add	r3, r6
 80051aa:	6023      	str	r3, [r4, #0]
 80051ac:	2000      	movs	r0, #0
 80051ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b2:	462a      	mov	r2, r5
 80051b4:	f000 fb48 	bl	8005848 <_realloc_r>
 80051b8:	4606      	mov	r6, r0
 80051ba:	2800      	cmp	r0, #0
 80051bc:	d1e0      	bne.n	8005180 <__ssputs_r+0x5c>
 80051be:	6921      	ldr	r1, [r4, #16]
 80051c0:	4650      	mov	r0, sl
 80051c2:	f000 fba7 	bl	8005914 <_free_r>
 80051c6:	230c      	movs	r3, #12
 80051c8:	f8ca 3000 	str.w	r3, [sl]
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051d8:	e7e9      	b.n	80051ae <__ssputs_r+0x8a>
	...

080051dc <_svfiprintf_r>:
 80051dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e0:	4698      	mov	r8, r3
 80051e2:	898b      	ldrh	r3, [r1, #12]
 80051e4:	061b      	lsls	r3, r3, #24
 80051e6:	b09d      	sub	sp, #116	@ 0x74
 80051e8:	4607      	mov	r7, r0
 80051ea:	460d      	mov	r5, r1
 80051ec:	4614      	mov	r4, r2
 80051ee:	d510      	bpl.n	8005212 <_svfiprintf_r+0x36>
 80051f0:	690b      	ldr	r3, [r1, #16]
 80051f2:	b973      	cbnz	r3, 8005212 <_svfiprintf_r+0x36>
 80051f4:	2140      	movs	r1, #64	@ 0x40
 80051f6:	f000 f90f 	bl	8005418 <_malloc_r>
 80051fa:	6028      	str	r0, [r5, #0]
 80051fc:	6128      	str	r0, [r5, #16]
 80051fe:	b930      	cbnz	r0, 800520e <_svfiprintf_r+0x32>
 8005200:	230c      	movs	r3, #12
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005208:	b01d      	add	sp, #116	@ 0x74
 800520a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520e:	2340      	movs	r3, #64	@ 0x40
 8005210:	616b      	str	r3, [r5, #20]
 8005212:	2300      	movs	r3, #0
 8005214:	9309      	str	r3, [sp, #36]	@ 0x24
 8005216:	2320      	movs	r3, #32
 8005218:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800521c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005220:	2330      	movs	r3, #48	@ 0x30
 8005222:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80053c0 <_svfiprintf_r+0x1e4>
 8005226:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800522a:	f04f 0901 	mov.w	r9, #1
 800522e:	4623      	mov	r3, r4
 8005230:	469a      	mov	sl, r3
 8005232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005236:	b10a      	cbz	r2, 800523c <_svfiprintf_r+0x60>
 8005238:	2a25      	cmp	r2, #37	@ 0x25
 800523a:	d1f9      	bne.n	8005230 <_svfiprintf_r+0x54>
 800523c:	ebba 0b04 	subs.w	fp, sl, r4
 8005240:	d00b      	beq.n	800525a <_svfiprintf_r+0x7e>
 8005242:	465b      	mov	r3, fp
 8005244:	4622      	mov	r2, r4
 8005246:	4629      	mov	r1, r5
 8005248:	4638      	mov	r0, r7
 800524a:	f7ff ff6b 	bl	8005124 <__ssputs_r>
 800524e:	3001      	adds	r0, #1
 8005250:	f000 80a7 	beq.w	80053a2 <_svfiprintf_r+0x1c6>
 8005254:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005256:	445a      	add	r2, fp
 8005258:	9209      	str	r2, [sp, #36]	@ 0x24
 800525a:	f89a 3000 	ldrb.w	r3, [sl]
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 809f 	beq.w	80053a2 <_svfiprintf_r+0x1c6>
 8005264:	2300      	movs	r3, #0
 8005266:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800526a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800526e:	f10a 0a01 	add.w	sl, sl, #1
 8005272:	9304      	str	r3, [sp, #16]
 8005274:	9307      	str	r3, [sp, #28]
 8005276:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800527a:	931a      	str	r3, [sp, #104]	@ 0x68
 800527c:	4654      	mov	r4, sl
 800527e:	2205      	movs	r2, #5
 8005280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005284:	484e      	ldr	r0, [pc, #312]	@ (80053c0 <_svfiprintf_r+0x1e4>)
 8005286:	f7fa ffcb 	bl	8000220 <memchr>
 800528a:	9a04      	ldr	r2, [sp, #16]
 800528c:	b9d8      	cbnz	r0, 80052c6 <_svfiprintf_r+0xea>
 800528e:	06d0      	lsls	r0, r2, #27
 8005290:	bf44      	itt	mi
 8005292:	2320      	movmi	r3, #32
 8005294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005298:	0711      	lsls	r1, r2, #28
 800529a:	bf44      	itt	mi
 800529c:	232b      	movmi	r3, #43	@ 0x2b
 800529e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052a2:	f89a 3000 	ldrb.w	r3, [sl]
 80052a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80052a8:	d015      	beq.n	80052d6 <_svfiprintf_r+0xfa>
 80052aa:	9a07      	ldr	r2, [sp, #28]
 80052ac:	4654      	mov	r4, sl
 80052ae:	2000      	movs	r0, #0
 80052b0:	f04f 0c0a 	mov.w	ip, #10
 80052b4:	4621      	mov	r1, r4
 80052b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052ba:	3b30      	subs	r3, #48	@ 0x30
 80052bc:	2b09      	cmp	r3, #9
 80052be:	d94b      	bls.n	8005358 <_svfiprintf_r+0x17c>
 80052c0:	b1b0      	cbz	r0, 80052f0 <_svfiprintf_r+0x114>
 80052c2:	9207      	str	r2, [sp, #28]
 80052c4:	e014      	b.n	80052f0 <_svfiprintf_r+0x114>
 80052c6:	eba0 0308 	sub.w	r3, r0, r8
 80052ca:	fa09 f303 	lsl.w	r3, r9, r3
 80052ce:	4313      	orrs	r3, r2
 80052d0:	9304      	str	r3, [sp, #16]
 80052d2:	46a2      	mov	sl, r4
 80052d4:	e7d2      	b.n	800527c <_svfiprintf_r+0xa0>
 80052d6:	9b03      	ldr	r3, [sp, #12]
 80052d8:	1d19      	adds	r1, r3, #4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	9103      	str	r1, [sp, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	bfbb      	ittet	lt
 80052e2:	425b      	neglt	r3, r3
 80052e4:	f042 0202 	orrlt.w	r2, r2, #2
 80052e8:	9307      	strge	r3, [sp, #28]
 80052ea:	9307      	strlt	r3, [sp, #28]
 80052ec:	bfb8      	it	lt
 80052ee:	9204      	strlt	r2, [sp, #16]
 80052f0:	7823      	ldrb	r3, [r4, #0]
 80052f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80052f4:	d10a      	bne.n	800530c <_svfiprintf_r+0x130>
 80052f6:	7863      	ldrb	r3, [r4, #1]
 80052f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80052fa:	d132      	bne.n	8005362 <_svfiprintf_r+0x186>
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	1d1a      	adds	r2, r3, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	9203      	str	r2, [sp, #12]
 8005304:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005308:	3402      	adds	r4, #2
 800530a:	9305      	str	r3, [sp, #20]
 800530c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80053d0 <_svfiprintf_r+0x1f4>
 8005310:	7821      	ldrb	r1, [r4, #0]
 8005312:	2203      	movs	r2, #3
 8005314:	4650      	mov	r0, sl
 8005316:	f7fa ff83 	bl	8000220 <memchr>
 800531a:	b138      	cbz	r0, 800532c <_svfiprintf_r+0x150>
 800531c:	9b04      	ldr	r3, [sp, #16]
 800531e:	eba0 000a 	sub.w	r0, r0, sl
 8005322:	2240      	movs	r2, #64	@ 0x40
 8005324:	4082      	lsls	r2, r0
 8005326:	4313      	orrs	r3, r2
 8005328:	3401      	adds	r4, #1
 800532a:	9304      	str	r3, [sp, #16]
 800532c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005330:	4824      	ldr	r0, [pc, #144]	@ (80053c4 <_svfiprintf_r+0x1e8>)
 8005332:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005336:	2206      	movs	r2, #6
 8005338:	f7fa ff72 	bl	8000220 <memchr>
 800533c:	2800      	cmp	r0, #0
 800533e:	d036      	beq.n	80053ae <_svfiprintf_r+0x1d2>
 8005340:	4b21      	ldr	r3, [pc, #132]	@ (80053c8 <_svfiprintf_r+0x1ec>)
 8005342:	bb1b      	cbnz	r3, 800538c <_svfiprintf_r+0x1b0>
 8005344:	9b03      	ldr	r3, [sp, #12]
 8005346:	3307      	adds	r3, #7
 8005348:	f023 0307 	bic.w	r3, r3, #7
 800534c:	3308      	adds	r3, #8
 800534e:	9303      	str	r3, [sp, #12]
 8005350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005352:	4433      	add	r3, r6
 8005354:	9309      	str	r3, [sp, #36]	@ 0x24
 8005356:	e76a      	b.n	800522e <_svfiprintf_r+0x52>
 8005358:	fb0c 3202 	mla	r2, ip, r2, r3
 800535c:	460c      	mov	r4, r1
 800535e:	2001      	movs	r0, #1
 8005360:	e7a8      	b.n	80052b4 <_svfiprintf_r+0xd8>
 8005362:	2300      	movs	r3, #0
 8005364:	3401      	adds	r4, #1
 8005366:	9305      	str	r3, [sp, #20]
 8005368:	4619      	mov	r1, r3
 800536a:	f04f 0c0a 	mov.w	ip, #10
 800536e:	4620      	mov	r0, r4
 8005370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005374:	3a30      	subs	r2, #48	@ 0x30
 8005376:	2a09      	cmp	r2, #9
 8005378:	d903      	bls.n	8005382 <_svfiprintf_r+0x1a6>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0c6      	beq.n	800530c <_svfiprintf_r+0x130>
 800537e:	9105      	str	r1, [sp, #20]
 8005380:	e7c4      	b.n	800530c <_svfiprintf_r+0x130>
 8005382:	fb0c 2101 	mla	r1, ip, r1, r2
 8005386:	4604      	mov	r4, r0
 8005388:	2301      	movs	r3, #1
 800538a:	e7f0      	b.n	800536e <_svfiprintf_r+0x192>
 800538c:	ab03      	add	r3, sp, #12
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	462a      	mov	r2, r5
 8005392:	4b0e      	ldr	r3, [pc, #56]	@ (80053cc <_svfiprintf_r+0x1f0>)
 8005394:	a904      	add	r1, sp, #16
 8005396:	4638      	mov	r0, r7
 8005398:	f3af 8000 	nop.w
 800539c:	1c42      	adds	r2, r0, #1
 800539e:	4606      	mov	r6, r0
 80053a0:	d1d6      	bne.n	8005350 <_svfiprintf_r+0x174>
 80053a2:	89ab      	ldrh	r3, [r5, #12]
 80053a4:	065b      	lsls	r3, r3, #25
 80053a6:	f53f af2d 	bmi.w	8005204 <_svfiprintf_r+0x28>
 80053aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053ac:	e72c      	b.n	8005208 <_svfiprintf_r+0x2c>
 80053ae:	ab03      	add	r3, sp, #12
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	462a      	mov	r2, r5
 80053b4:	4b05      	ldr	r3, [pc, #20]	@ (80053cc <_svfiprintf_r+0x1f0>)
 80053b6:	a904      	add	r1, sp, #16
 80053b8:	4638      	mov	r0, r7
 80053ba:	f000 f91b 	bl	80055f4 <_printf_i>
 80053be:	e7ed      	b.n	800539c <_svfiprintf_r+0x1c0>
 80053c0:	080059fe 	.word	0x080059fe
 80053c4:	08005a08 	.word	0x08005a08
 80053c8:	00000000 	.word	0x00000000
 80053cc:	08005125 	.word	0x08005125
 80053d0:	08005a04 	.word	0x08005a04

080053d4 <sbrk_aligned>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4e0f      	ldr	r6, [pc, #60]	@ (8005414 <sbrk_aligned+0x40>)
 80053d8:	460c      	mov	r4, r1
 80053da:	6831      	ldr	r1, [r6, #0]
 80053dc:	4605      	mov	r5, r0
 80053de:	b911      	cbnz	r1, 80053e6 <sbrk_aligned+0x12>
 80053e0:	f000 fa7a 	bl	80058d8 <_sbrk_r>
 80053e4:	6030      	str	r0, [r6, #0]
 80053e6:	4621      	mov	r1, r4
 80053e8:	4628      	mov	r0, r5
 80053ea:	f000 fa75 	bl	80058d8 <_sbrk_r>
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	d103      	bne.n	80053fa <sbrk_aligned+0x26>
 80053f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80053f6:	4620      	mov	r0, r4
 80053f8:	bd70      	pop	{r4, r5, r6, pc}
 80053fa:	1cc4      	adds	r4, r0, #3
 80053fc:	f024 0403 	bic.w	r4, r4, #3
 8005400:	42a0      	cmp	r0, r4
 8005402:	d0f8      	beq.n	80053f6 <sbrk_aligned+0x22>
 8005404:	1a21      	subs	r1, r4, r0
 8005406:	4628      	mov	r0, r5
 8005408:	f000 fa66 	bl	80058d8 <_sbrk_r>
 800540c:	3001      	adds	r0, #1
 800540e:	d1f2      	bne.n	80053f6 <sbrk_aligned+0x22>
 8005410:	e7ef      	b.n	80053f2 <sbrk_aligned+0x1e>
 8005412:	bf00      	nop
 8005414:	200007d0 	.word	0x200007d0

08005418 <_malloc_r>:
 8005418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800541c:	1ccd      	adds	r5, r1, #3
 800541e:	f025 0503 	bic.w	r5, r5, #3
 8005422:	3508      	adds	r5, #8
 8005424:	2d0c      	cmp	r5, #12
 8005426:	bf38      	it	cc
 8005428:	250c      	movcc	r5, #12
 800542a:	2d00      	cmp	r5, #0
 800542c:	4606      	mov	r6, r0
 800542e:	db01      	blt.n	8005434 <_malloc_r+0x1c>
 8005430:	42a9      	cmp	r1, r5
 8005432:	d904      	bls.n	800543e <_malloc_r+0x26>
 8005434:	230c      	movs	r3, #12
 8005436:	6033      	str	r3, [r6, #0]
 8005438:	2000      	movs	r0, #0
 800543a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800543e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005514 <_malloc_r+0xfc>
 8005442:	f000 f9f5 	bl	8005830 <__malloc_lock>
 8005446:	f8d8 3000 	ldr.w	r3, [r8]
 800544a:	461c      	mov	r4, r3
 800544c:	bb44      	cbnz	r4, 80054a0 <_malloc_r+0x88>
 800544e:	4629      	mov	r1, r5
 8005450:	4630      	mov	r0, r6
 8005452:	f7ff ffbf 	bl	80053d4 <sbrk_aligned>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	4604      	mov	r4, r0
 800545a:	d158      	bne.n	800550e <_malloc_r+0xf6>
 800545c:	f8d8 4000 	ldr.w	r4, [r8]
 8005460:	4627      	mov	r7, r4
 8005462:	2f00      	cmp	r7, #0
 8005464:	d143      	bne.n	80054ee <_malloc_r+0xd6>
 8005466:	2c00      	cmp	r4, #0
 8005468:	d04b      	beq.n	8005502 <_malloc_r+0xea>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	4639      	mov	r1, r7
 800546e:	4630      	mov	r0, r6
 8005470:	eb04 0903 	add.w	r9, r4, r3
 8005474:	f000 fa30 	bl	80058d8 <_sbrk_r>
 8005478:	4581      	cmp	r9, r0
 800547a:	d142      	bne.n	8005502 <_malloc_r+0xea>
 800547c:	6821      	ldr	r1, [r4, #0]
 800547e:	1a6d      	subs	r5, r5, r1
 8005480:	4629      	mov	r1, r5
 8005482:	4630      	mov	r0, r6
 8005484:	f7ff ffa6 	bl	80053d4 <sbrk_aligned>
 8005488:	3001      	adds	r0, #1
 800548a:	d03a      	beq.n	8005502 <_malloc_r+0xea>
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	442b      	add	r3, r5
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	f8d8 3000 	ldr.w	r3, [r8]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	bb62      	cbnz	r2, 80054f4 <_malloc_r+0xdc>
 800549a:	f8c8 7000 	str.w	r7, [r8]
 800549e:	e00f      	b.n	80054c0 <_malloc_r+0xa8>
 80054a0:	6822      	ldr	r2, [r4, #0]
 80054a2:	1b52      	subs	r2, r2, r5
 80054a4:	d420      	bmi.n	80054e8 <_malloc_r+0xd0>
 80054a6:	2a0b      	cmp	r2, #11
 80054a8:	d917      	bls.n	80054da <_malloc_r+0xc2>
 80054aa:	1961      	adds	r1, r4, r5
 80054ac:	42a3      	cmp	r3, r4
 80054ae:	6025      	str	r5, [r4, #0]
 80054b0:	bf18      	it	ne
 80054b2:	6059      	strne	r1, [r3, #4]
 80054b4:	6863      	ldr	r3, [r4, #4]
 80054b6:	bf08      	it	eq
 80054b8:	f8c8 1000 	streq.w	r1, [r8]
 80054bc:	5162      	str	r2, [r4, r5]
 80054be:	604b      	str	r3, [r1, #4]
 80054c0:	4630      	mov	r0, r6
 80054c2:	f000 f9bb 	bl	800583c <__malloc_unlock>
 80054c6:	f104 000b 	add.w	r0, r4, #11
 80054ca:	1d23      	adds	r3, r4, #4
 80054cc:	f020 0007 	bic.w	r0, r0, #7
 80054d0:	1ac2      	subs	r2, r0, r3
 80054d2:	bf1c      	itt	ne
 80054d4:	1a1b      	subne	r3, r3, r0
 80054d6:	50a3      	strne	r3, [r4, r2]
 80054d8:	e7af      	b.n	800543a <_malloc_r+0x22>
 80054da:	6862      	ldr	r2, [r4, #4]
 80054dc:	42a3      	cmp	r3, r4
 80054de:	bf0c      	ite	eq
 80054e0:	f8c8 2000 	streq.w	r2, [r8]
 80054e4:	605a      	strne	r2, [r3, #4]
 80054e6:	e7eb      	b.n	80054c0 <_malloc_r+0xa8>
 80054e8:	4623      	mov	r3, r4
 80054ea:	6864      	ldr	r4, [r4, #4]
 80054ec:	e7ae      	b.n	800544c <_malloc_r+0x34>
 80054ee:	463c      	mov	r4, r7
 80054f0:	687f      	ldr	r7, [r7, #4]
 80054f2:	e7b6      	b.n	8005462 <_malloc_r+0x4a>
 80054f4:	461a      	mov	r2, r3
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	d1fb      	bne.n	80054f4 <_malloc_r+0xdc>
 80054fc:	2300      	movs	r3, #0
 80054fe:	6053      	str	r3, [r2, #4]
 8005500:	e7de      	b.n	80054c0 <_malloc_r+0xa8>
 8005502:	230c      	movs	r3, #12
 8005504:	6033      	str	r3, [r6, #0]
 8005506:	4630      	mov	r0, r6
 8005508:	f000 f998 	bl	800583c <__malloc_unlock>
 800550c:	e794      	b.n	8005438 <_malloc_r+0x20>
 800550e:	6005      	str	r5, [r0, #0]
 8005510:	e7d6      	b.n	80054c0 <_malloc_r+0xa8>
 8005512:	bf00      	nop
 8005514:	200007d4 	.word	0x200007d4

08005518 <_printf_common>:
 8005518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	4616      	mov	r6, r2
 800551e:	4698      	mov	r8, r3
 8005520:	688a      	ldr	r2, [r1, #8]
 8005522:	690b      	ldr	r3, [r1, #16]
 8005524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005528:	4293      	cmp	r3, r2
 800552a:	bfb8      	it	lt
 800552c:	4613      	movlt	r3, r2
 800552e:	6033      	str	r3, [r6, #0]
 8005530:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005534:	4607      	mov	r7, r0
 8005536:	460c      	mov	r4, r1
 8005538:	b10a      	cbz	r2, 800553e <_printf_common+0x26>
 800553a:	3301      	adds	r3, #1
 800553c:	6033      	str	r3, [r6, #0]
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	0699      	lsls	r1, r3, #26
 8005542:	bf42      	ittt	mi
 8005544:	6833      	ldrmi	r3, [r6, #0]
 8005546:	3302      	addmi	r3, #2
 8005548:	6033      	strmi	r3, [r6, #0]
 800554a:	6825      	ldr	r5, [r4, #0]
 800554c:	f015 0506 	ands.w	r5, r5, #6
 8005550:	d106      	bne.n	8005560 <_printf_common+0x48>
 8005552:	f104 0a19 	add.w	sl, r4, #25
 8005556:	68e3      	ldr	r3, [r4, #12]
 8005558:	6832      	ldr	r2, [r6, #0]
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	42ab      	cmp	r3, r5
 800555e:	dc26      	bgt.n	80055ae <_printf_common+0x96>
 8005560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005564:	6822      	ldr	r2, [r4, #0]
 8005566:	3b00      	subs	r3, #0
 8005568:	bf18      	it	ne
 800556a:	2301      	movne	r3, #1
 800556c:	0692      	lsls	r2, r2, #26
 800556e:	d42b      	bmi.n	80055c8 <_printf_common+0xb0>
 8005570:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005574:	4641      	mov	r1, r8
 8005576:	4638      	mov	r0, r7
 8005578:	47c8      	blx	r9
 800557a:	3001      	adds	r0, #1
 800557c:	d01e      	beq.n	80055bc <_printf_common+0xa4>
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	6922      	ldr	r2, [r4, #16]
 8005582:	f003 0306 	and.w	r3, r3, #6
 8005586:	2b04      	cmp	r3, #4
 8005588:	bf02      	ittt	eq
 800558a:	68e5      	ldreq	r5, [r4, #12]
 800558c:	6833      	ldreq	r3, [r6, #0]
 800558e:	1aed      	subeq	r5, r5, r3
 8005590:	68a3      	ldr	r3, [r4, #8]
 8005592:	bf0c      	ite	eq
 8005594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005598:	2500      	movne	r5, #0
 800559a:	4293      	cmp	r3, r2
 800559c:	bfc4      	itt	gt
 800559e:	1a9b      	subgt	r3, r3, r2
 80055a0:	18ed      	addgt	r5, r5, r3
 80055a2:	2600      	movs	r6, #0
 80055a4:	341a      	adds	r4, #26
 80055a6:	42b5      	cmp	r5, r6
 80055a8:	d11a      	bne.n	80055e0 <_printf_common+0xc8>
 80055aa:	2000      	movs	r0, #0
 80055ac:	e008      	b.n	80055c0 <_printf_common+0xa8>
 80055ae:	2301      	movs	r3, #1
 80055b0:	4652      	mov	r2, sl
 80055b2:	4641      	mov	r1, r8
 80055b4:	4638      	mov	r0, r7
 80055b6:	47c8      	blx	r9
 80055b8:	3001      	adds	r0, #1
 80055ba:	d103      	bne.n	80055c4 <_printf_common+0xac>
 80055bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c4:	3501      	adds	r5, #1
 80055c6:	e7c6      	b.n	8005556 <_printf_common+0x3e>
 80055c8:	18e1      	adds	r1, r4, r3
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	2030      	movs	r0, #48	@ 0x30
 80055ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055d2:	4422      	add	r2, r4
 80055d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055dc:	3302      	adds	r3, #2
 80055de:	e7c7      	b.n	8005570 <_printf_common+0x58>
 80055e0:	2301      	movs	r3, #1
 80055e2:	4622      	mov	r2, r4
 80055e4:	4641      	mov	r1, r8
 80055e6:	4638      	mov	r0, r7
 80055e8:	47c8      	blx	r9
 80055ea:	3001      	adds	r0, #1
 80055ec:	d0e6      	beq.n	80055bc <_printf_common+0xa4>
 80055ee:	3601      	adds	r6, #1
 80055f0:	e7d9      	b.n	80055a6 <_printf_common+0x8e>
	...

080055f4 <_printf_i>:
 80055f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055f8:	7e0f      	ldrb	r7, [r1, #24]
 80055fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055fc:	2f78      	cmp	r7, #120	@ 0x78
 80055fe:	4691      	mov	r9, r2
 8005600:	4680      	mov	r8, r0
 8005602:	460c      	mov	r4, r1
 8005604:	469a      	mov	sl, r3
 8005606:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800560a:	d807      	bhi.n	800561c <_printf_i+0x28>
 800560c:	2f62      	cmp	r7, #98	@ 0x62
 800560e:	d80a      	bhi.n	8005626 <_printf_i+0x32>
 8005610:	2f00      	cmp	r7, #0
 8005612:	f000 80d1 	beq.w	80057b8 <_printf_i+0x1c4>
 8005616:	2f58      	cmp	r7, #88	@ 0x58
 8005618:	f000 80b8 	beq.w	800578c <_printf_i+0x198>
 800561c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005620:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005624:	e03a      	b.n	800569c <_printf_i+0xa8>
 8005626:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800562a:	2b15      	cmp	r3, #21
 800562c:	d8f6      	bhi.n	800561c <_printf_i+0x28>
 800562e:	a101      	add	r1, pc, #4	@ (adr r1, 8005634 <_printf_i+0x40>)
 8005630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005634:	0800568d 	.word	0x0800568d
 8005638:	080056a1 	.word	0x080056a1
 800563c:	0800561d 	.word	0x0800561d
 8005640:	0800561d 	.word	0x0800561d
 8005644:	0800561d 	.word	0x0800561d
 8005648:	0800561d 	.word	0x0800561d
 800564c:	080056a1 	.word	0x080056a1
 8005650:	0800561d 	.word	0x0800561d
 8005654:	0800561d 	.word	0x0800561d
 8005658:	0800561d 	.word	0x0800561d
 800565c:	0800561d 	.word	0x0800561d
 8005660:	0800579f 	.word	0x0800579f
 8005664:	080056cb 	.word	0x080056cb
 8005668:	08005759 	.word	0x08005759
 800566c:	0800561d 	.word	0x0800561d
 8005670:	0800561d 	.word	0x0800561d
 8005674:	080057c1 	.word	0x080057c1
 8005678:	0800561d 	.word	0x0800561d
 800567c:	080056cb 	.word	0x080056cb
 8005680:	0800561d 	.word	0x0800561d
 8005684:	0800561d 	.word	0x0800561d
 8005688:	08005761 	.word	0x08005761
 800568c:	6833      	ldr	r3, [r6, #0]
 800568e:	1d1a      	adds	r2, r3, #4
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6032      	str	r2, [r6, #0]
 8005694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005698:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800569c:	2301      	movs	r3, #1
 800569e:	e09c      	b.n	80057da <_printf_i+0x1e6>
 80056a0:	6833      	ldr	r3, [r6, #0]
 80056a2:	6820      	ldr	r0, [r4, #0]
 80056a4:	1d19      	adds	r1, r3, #4
 80056a6:	6031      	str	r1, [r6, #0]
 80056a8:	0606      	lsls	r6, r0, #24
 80056aa:	d501      	bpl.n	80056b0 <_printf_i+0xbc>
 80056ac:	681d      	ldr	r5, [r3, #0]
 80056ae:	e003      	b.n	80056b8 <_printf_i+0xc4>
 80056b0:	0645      	lsls	r5, r0, #25
 80056b2:	d5fb      	bpl.n	80056ac <_printf_i+0xb8>
 80056b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056b8:	2d00      	cmp	r5, #0
 80056ba:	da03      	bge.n	80056c4 <_printf_i+0xd0>
 80056bc:	232d      	movs	r3, #45	@ 0x2d
 80056be:	426d      	negs	r5, r5
 80056c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056c4:	4858      	ldr	r0, [pc, #352]	@ (8005828 <_printf_i+0x234>)
 80056c6:	230a      	movs	r3, #10
 80056c8:	e011      	b.n	80056ee <_printf_i+0xfa>
 80056ca:	6821      	ldr	r1, [r4, #0]
 80056cc:	6833      	ldr	r3, [r6, #0]
 80056ce:	0608      	lsls	r0, r1, #24
 80056d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80056d4:	d402      	bmi.n	80056dc <_printf_i+0xe8>
 80056d6:	0649      	lsls	r1, r1, #25
 80056d8:	bf48      	it	mi
 80056da:	b2ad      	uxthmi	r5, r5
 80056dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80056de:	4852      	ldr	r0, [pc, #328]	@ (8005828 <_printf_i+0x234>)
 80056e0:	6033      	str	r3, [r6, #0]
 80056e2:	bf14      	ite	ne
 80056e4:	230a      	movne	r3, #10
 80056e6:	2308      	moveq	r3, #8
 80056e8:	2100      	movs	r1, #0
 80056ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056ee:	6866      	ldr	r6, [r4, #4]
 80056f0:	60a6      	str	r6, [r4, #8]
 80056f2:	2e00      	cmp	r6, #0
 80056f4:	db05      	blt.n	8005702 <_printf_i+0x10e>
 80056f6:	6821      	ldr	r1, [r4, #0]
 80056f8:	432e      	orrs	r6, r5
 80056fa:	f021 0104 	bic.w	r1, r1, #4
 80056fe:	6021      	str	r1, [r4, #0]
 8005700:	d04b      	beq.n	800579a <_printf_i+0x1a6>
 8005702:	4616      	mov	r6, r2
 8005704:	fbb5 f1f3 	udiv	r1, r5, r3
 8005708:	fb03 5711 	mls	r7, r3, r1, r5
 800570c:	5dc7      	ldrb	r7, [r0, r7]
 800570e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005712:	462f      	mov	r7, r5
 8005714:	42bb      	cmp	r3, r7
 8005716:	460d      	mov	r5, r1
 8005718:	d9f4      	bls.n	8005704 <_printf_i+0x110>
 800571a:	2b08      	cmp	r3, #8
 800571c:	d10b      	bne.n	8005736 <_printf_i+0x142>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	07df      	lsls	r7, r3, #31
 8005722:	d508      	bpl.n	8005736 <_printf_i+0x142>
 8005724:	6923      	ldr	r3, [r4, #16]
 8005726:	6861      	ldr	r1, [r4, #4]
 8005728:	4299      	cmp	r1, r3
 800572a:	bfde      	ittt	le
 800572c:	2330      	movle	r3, #48	@ 0x30
 800572e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005732:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005736:	1b92      	subs	r2, r2, r6
 8005738:	6122      	str	r2, [r4, #16]
 800573a:	f8cd a000 	str.w	sl, [sp]
 800573e:	464b      	mov	r3, r9
 8005740:	aa03      	add	r2, sp, #12
 8005742:	4621      	mov	r1, r4
 8005744:	4640      	mov	r0, r8
 8005746:	f7ff fee7 	bl	8005518 <_printf_common>
 800574a:	3001      	adds	r0, #1
 800574c:	d14a      	bne.n	80057e4 <_printf_i+0x1f0>
 800574e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005752:	b004      	add	sp, #16
 8005754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	f043 0320 	orr.w	r3, r3, #32
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	4832      	ldr	r0, [pc, #200]	@ (800582c <_printf_i+0x238>)
 8005762:	2778      	movs	r7, #120	@ 0x78
 8005764:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	6831      	ldr	r1, [r6, #0]
 800576c:	061f      	lsls	r7, r3, #24
 800576e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005772:	d402      	bmi.n	800577a <_printf_i+0x186>
 8005774:	065f      	lsls	r7, r3, #25
 8005776:	bf48      	it	mi
 8005778:	b2ad      	uxthmi	r5, r5
 800577a:	6031      	str	r1, [r6, #0]
 800577c:	07d9      	lsls	r1, r3, #31
 800577e:	bf44      	itt	mi
 8005780:	f043 0320 	orrmi.w	r3, r3, #32
 8005784:	6023      	strmi	r3, [r4, #0]
 8005786:	b11d      	cbz	r5, 8005790 <_printf_i+0x19c>
 8005788:	2310      	movs	r3, #16
 800578a:	e7ad      	b.n	80056e8 <_printf_i+0xf4>
 800578c:	4826      	ldr	r0, [pc, #152]	@ (8005828 <_printf_i+0x234>)
 800578e:	e7e9      	b.n	8005764 <_printf_i+0x170>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	f023 0320 	bic.w	r3, r3, #32
 8005796:	6023      	str	r3, [r4, #0]
 8005798:	e7f6      	b.n	8005788 <_printf_i+0x194>
 800579a:	4616      	mov	r6, r2
 800579c:	e7bd      	b.n	800571a <_printf_i+0x126>
 800579e:	6833      	ldr	r3, [r6, #0]
 80057a0:	6825      	ldr	r5, [r4, #0]
 80057a2:	6961      	ldr	r1, [r4, #20]
 80057a4:	1d18      	adds	r0, r3, #4
 80057a6:	6030      	str	r0, [r6, #0]
 80057a8:	062e      	lsls	r6, r5, #24
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	d501      	bpl.n	80057b2 <_printf_i+0x1be>
 80057ae:	6019      	str	r1, [r3, #0]
 80057b0:	e002      	b.n	80057b8 <_printf_i+0x1c4>
 80057b2:	0668      	lsls	r0, r5, #25
 80057b4:	d5fb      	bpl.n	80057ae <_printf_i+0x1ba>
 80057b6:	8019      	strh	r1, [r3, #0]
 80057b8:	2300      	movs	r3, #0
 80057ba:	6123      	str	r3, [r4, #16]
 80057bc:	4616      	mov	r6, r2
 80057be:	e7bc      	b.n	800573a <_printf_i+0x146>
 80057c0:	6833      	ldr	r3, [r6, #0]
 80057c2:	1d1a      	adds	r2, r3, #4
 80057c4:	6032      	str	r2, [r6, #0]
 80057c6:	681e      	ldr	r6, [r3, #0]
 80057c8:	6862      	ldr	r2, [r4, #4]
 80057ca:	2100      	movs	r1, #0
 80057cc:	4630      	mov	r0, r6
 80057ce:	f7fa fd27 	bl	8000220 <memchr>
 80057d2:	b108      	cbz	r0, 80057d8 <_printf_i+0x1e4>
 80057d4:	1b80      	subs	r0, r0, r6
 80057d6:	6060      	str	r0, [r4, #4]
 80057d8:	6863      	ldr	r3, [r4, #4]
 80057da:	6123      	str	r3, [r4, #16]
 80057dc:	2300      	movs	r3, #0
 80057de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057e2:	e7aa      	b.n	800573a <_printf_i+0x146>
 80057e4:	6923      	ldr	r3, [r4, #16]
 80057e6:	4632      	mov	r2, r6
 80057e8:	4649      	mov	r1, r9
 80057ea:	4640      	mov	r0, r8
 80057ec:	47d0      	blx	sl
 80057ee:	3001      	adds	r0, #1
 80057f0:	d0ad      	beq.n	800574e <_printf_i+0x15a>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	079b      	lsls	r3, r3, #30
 80057f6:	d413      	bmi.n	8005820 <_printf_i+0x22c>
 80057f8:	68e0      	ldr	r0, [r4, #12]
 80057fa:	9b03      	ldr	r3, [sp, #12]
 80057fc:	4298      	cmp	r0, r3
 80057fe:	bfb8      	it	lt
 8005800:	4618      	movlt	r0, r3
 8005802:	e7a6      	b.n	8005752 <_printf_i+0x15e>
 8005804:	2301      	movs	r3, #1
 8005806:	4632      	mov	r2, r6
 8005808:	4649      	mov	r1, r9
 800580a:	4640      	mov	r0, r8
 800580c:	47d0      	blx	sl
 800580e:	3001      	adds	r0, #1
 8005810:	d09d      	beq.n	800574e <_printf_i+0x15a>
 8005812:	3501      	adds	r5, #1
 8005814:	68e3      	ldr	r3, [r4, #12]
 8005816:	9903      	ldr	r1, [sp, #12]
 8005818:	1a5b      	subs	r3, r3, r1
 800581a:	42ab      	cmp	r3, r5
 800581c:	dcf2      	bgt.n	8005804 <_printf_i+0x210>
 800581e:	e7eb      	b.n	80057f8 <_printf_i+0x204>
 8005820:	2500      	movs	r5, #0
 8005822:	f104 0619 	add.w	r6, r4, #25
 8005826:	e7f5      	b.n	8005814 <_printf_i+0x220>
 8005828:	08005a0f 	.word	0x08005a0f
 800582c:	08005a20 	.word	0x08005a20

08005830 <__malloc_lock>:
 8005830:	4801      	ldr	r0, [pc, #4]	@ (8005838 <__malloc_lock+0x8>)
 8005832:	f7ff bc75 	b.w	8005120 <__retarget_lock_acquire_recursive>
 8005836:	bf00      	nop
 8005838:	200007cc 	.word	0x200007cc

0800583c <__malloc_unlock>:
 800583c:	4801      	ldr	r0, [pc, #4]	@ (8005844 <__malloc_unlock+0x8>)
 800583e:	f7ff bc70 	b.w	8005122 <__retarget_lock_release_recursive>
 8005842:	bf00      	nop
 8005844:	200007cc 	.word	0x200007cc

08005848 <_realloc_r>:
 8005848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584c:	4607      	mov	r7, r0
 800584e:	4614      	mov	r4, r2
 8005850:	460d      	mov	r5, r1
 8005852:	b921      	cbnz	r1, 800585e <_realloc_r+0x16>
 8005854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005858:	4611      	mov	r1, r2
 800585a:	f7ff bddd 	b.w	8005418 <_malloc_r>
 800585e:	b92a      	cbnz	r2, 800586c <_realloc_r+0x24>
 8005860:	f000 f858 	bl	8005914 <_free_r>
 8005864:	4625      	mov	r5, r4
 8005866:	4628      	mov	r0, r5
 8005868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800586c:	f000 f89c 	bl	80059a8 <_malloc_usable_size_r>
 8005870:	4284      	cmp	r4, r0
 8005872:	4606      	mov	r6, r0
 8005874:	d802      	bhi.n	800587c <_realloc_r+0x34>
 8005876:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800587a:	d8f4      	bhi.n	8005866 <_realloc_r+0x1e>
 800587c:	4621      	mov	r1, r4
 800587e:	4638      	mov	r0, r7
 8005880:	f7ff fdca 	bl	8005418 <_malloc_r>
 8005884:	4680      	mov	r8, r0
 8005886:	b908      	cbnz	r0, 800588c <_realloc_r+0x44>
 8005888:	4645      	mov	r5, r8
 800588a:	e7ec      	b.n	8005866 <_realloc_r+0x1e>
 800588c:	42b4      	cmp	r4, r6
 800588e:	4622      	mov	r2, r4
 8005890:	4629      	mov	r1, r5
 8005892:	bf28      	it	cs
 8005894:	4632      	movcs	r2, r6
 8005896:	f000 f82f 	bl	80058f8 <memcpy>
 800589a:	4629      	mov	r1, r5
 800589c:	4638      	mov	r0, r7
 800589e:	f000 f839 	bl	8005914 <_free_r>
 80058a2:	e7f1      	b.n	8005888 <_realloc_r+0x40>

080058a4 <memmove>:
 80058a4:	4288      	cmp	r0, r1
 80058a6:	b510      	push	{r4, lr}
 80058a8:	eb01 0402 	add.w	r4, r1, r2
 80058ac:	d902      	bls.n	80058b4 <memmove+0x10>
 80058ae:	4284      	cmp	r4, r0
 80058b0:	4623      	mov	r3, r4
 80058b2:	d807      	bhi.n	80058c4 <memmove+0x20>
 80058b4:	1e43      	subs	r3, r0, #1
 80058b6:	42a1      	cmp	r1, r4
 80058b8:	d008      	beq.n	80058cc <memmove+0x28>
 80058ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058c2:	e7f8      	b.n	80058b6 <memmove+0x12>
 80058c4:	4402      	add	r2, r0
 80058c6:	4601      	mov	r1, r0
 80058c8:	428a      	cmp	r2, r1
 80058ca:	d100      	bne.n	80058ce <memmove+0x2a>
 80058cc:	bd10      	pop	{r4, pc}
 80058ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058d6:	e7f7      	b.n	80058c8 <memmove+0x24>

080058d8 <_sbrk_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4d06      	ldr	r5, [pc, #24]	@ (80058f4 <_sbrk_r+0x1c>)
 80058dc:	2300      	movs	r3, #0
 80058de:	4604      	mov	r4, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	602b      	str	r3, [r5, #0]
 80058e4:	f7fb fd9e 	bl	8001424 <_sbrk>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d102      	bne.n	80058f2 <_sbrk_r+0x1a>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b103      	cbz	r3, 80058f2 <_sbrk_r+0x1a>
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	200007d8 	.word	0x200007d8

080058f8 <memcpy>:
 80058f8:	440a      	add	r2, r1
 80058fa:	4291      	cmp	r1, r2
 80058fc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005900:	d100      	bne.n	8005904 <memcpy+0xc>
 8005902:	4770      	bx	lr
 8005904:	b510      	push	{r4, lr}
 8005906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800590a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800590e:	4291      	cmp	r1, r2
 8005910:	d1f9      	bne.n	8005906 <memcpy+0xe>
 8005912:	bd10      	pop	{r4, pc}

08005914 <_free_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	4605      	mov	r5, r0
 8005918:	2900      	cmp	r1, #0
 800591a:	d041      	beq.n	80059a0 <_free_r+0x8c>
 800591c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005920:	1f0c      	subs	r4, r1, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	bfb8      	it	lt
 8005926:	18e4      	addlt	r4, r4, r3
 8005928:	f7ff ff82 	bl	8005830 <__malloc_lock>
 800592c:	4a1d      	ldr	r2, [pc, #116]	@ (80059a4 <_free_r+0x90>)
 800592e:	6813      	ldr	r3, [r2, #0]
 8005930:	b933      	cbnz	r3, 8005940 <_free_r+0x2c>
 8005932:	6063      	str	r3, [r4, #4]
 8005934:	6014      	str	r4, [r2, #0]
 8005936:	4628      	mov	r0, r5
 8005938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800593c:	f7ff bf7e 	b.w	800583c <__malloc_unlock>
 8005940:	42a3      	cmp	r3, r4
 8005942:	d908      	bls.n	8005956 <_free_r+0x42>
 8005944:	6820      	ldr	r0, [r4, #0]
 8005946:	1821      	adds	r1, r4, r0
 8005948:	428b      	cmp	r3, r1
 800594a:	bf01      	itttt	eq
 800594c:	6819      	ldreq	r1, [r3, #0]
 800594e:	685b      	ldreq	r3, [r3, #4]
 8005950:	1809      	addeq	r1, r1, r0
 8005952:	6021      	streq	r1, [r4, #0]
 8005954:	e7ed      	b.n	8005932 <_free_r+0x1e>
 8005956:	461a      	mov	r2, r3
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	b10b      	cbz	r3, 8005960 <_free_r+0x4c>
 800595c:	42a3      	cmp	r3, r4
 800595e:	d9fa      	bls.n	8005956 <_free_r+0x42>
 8005960:	6811      	ldr	r1, [r2, #0]
 8005962:	1850      	adds	r0, r2, r1
 8005964:	42a0      	cmp	r0, r4
 8005966:	d10b      	bne.n	8005980 <_free_r+0x6c>
 8005968:	6820      	ldr	r0, [r4, #0]
 800596a:	4401      	add	r1, r0
 800596c:	1850      	adds	r0, r2, r1
 800596e:	4283      	cmp	r3, r0
 8005970:	6011      	str	r1, [r2, #0]
 8005972:	d1e0      	bne.n	8005936 <_free_r+0x22>
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	6053      	str	r3, [r2, #4]
 800597a:	4408      	add	r0, r1
 800597c:	6010      	str	r0, [r2, #0]
 800597e:	e7da      	b.n	8005936 <_free_r+0x22>
 8005980:	d902      	bls.n	8005988 <_free_r+0x74>
 8005982:	230c      	movs	r3, #12
 8005984:	602b      	str	r3, [r5, #0]
 8005986:	e7d6      	b.n	8005936 <_free_r+0x22>
 8005988:	6820      	ldr	r0, [r4, #0]
 800598a:	1821      	adds	r1, r4, r0
 800598c:	428b      	cmp	r3, r1
 800598e:	bf04      	itt	eq
 8005990:	6819      	ldreq	r1, [r3, #0]
 8005992:	685b      	ldreq	r3, [r3, #4]
 8005994:	6063      	str	r3, [r4, #4]
 8005996:	bf04      	itt	eq
 8005998:	1809      	addeq	r1, r1, r0
 800599a:	6021      	streq	r1, [r4, #0]
 800599c:	6054      	str	r4, [r2, #4]
 800599e:	e7ca      	b.n	8005936 <_free_r+0x22>
 80059a0:	bd38      	pop	{r3, r4, r5, pc}
 80059a2:	bf00      	nop
 80059a4:	200007d4 	.word	0x200007d4

080059a8 <_malloc_usable_size_r>:
 80059a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ac:	1f18      	subs	r0, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bfbc      	itt	lt
 80059b2:	580b      	ldrlt	r3, [r1, r0]
 80059b4:	18c0      	addlt	r0, r0, r3
 80059b6:	4770      	bx	lr

080059b8 <_init>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr

080059c4 <_fini>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr
