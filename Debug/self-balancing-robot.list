
self-balancing-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b08  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08009cd8  08009cd8  0000acd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0dc  0800a0dc  0000c590  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a0dc  0800a0dc  0000b0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0e4  0800a0e4  0000c590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0e4  0800a0e4  0000b0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0e8  0800a0e8  0000b0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000590  20000000  0800a0ec  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000590  0800a67c  0000c590  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  0800a67c  0000cb48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c590  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001684a  00000000  00000000  0000c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a23  00000000  00000000  00022e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00026830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2a  00000000  00000000  00027a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000269bf  00000000  00000000  000288b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001974e  00000000  00000000  0004f271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2636  00000000  00000000  000689bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014aff5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be4  00000000  00000000  0014b038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00150c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000590 	.word	0x20000590
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009cc0 	.word	0x08009cc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000594 	.word	0x20000594
 800020c:	08009cc0 	.word	0x08009cc0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f000 b988 	b.w	8001010 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	468e      	mov	lr, r1
 8000d20:	4604      	mov	r4, r0
 8000d22:	4688      	mov	r8, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d14a      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4617      	mov	r7, r2
 8000d2c:	d962      	bls.n	8000df4 <__udivmoddi4+0xdc>
 8000d2e:	fab2 f682 	clz	r6, r2
 8000d32:	b14e      	cbz	r6, 8000d48 <__udivmoddi4+0x30>
 8000d34:	f1c6 0320 	rsb	r3, r6, #32
 8000d38:	fa01 f806 	lsl.w	r8, r1, r6
 8000d3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d40:	40b7      	lsls	r7, r6
 8000d42:	ea43 0808 	orr.w	r8, r3, r8
 8000d46:	40b4      	lsls	r4, r6
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d54:	0c23      	lsrs	r3, r4, #16
 8000d56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x62>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d6c:	f080 80ea 	bcs.w	8000f44 <__udivmoddi4+0x22c>
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f240 80e7 	bls.w	8000f44 <__udivmoddi4+0x22c>
 8000d76:	3902      	subs	r1, #2
 8000d78:	443b      	add	r3, r7
 8000d7a:	1a9a      	subs	r2, r3, r2
 8000d7c:	b2a3      	uxth	r3, r4
 8000d7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d8e:	459c      	cmp	ip, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x8e>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d98:	f080 80d6 	bcs.w	8000f48 <__udivmoddi4+0x230>
 8000d9c:	459c      	cmp	ip, r3
 8000d9e:	f240 80d3 	bls.w	8000f48 <__udivmoddi4+0x230>
 8000da2:	443b      	add	r3, r7
 8000da4:	3802      	subs	r0, #2
 8000da6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000daa:	eba3 030c 	sub.w	r3, r3, ip
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11d      	cbz	r5, 8000dba <__udivmoddi4+0xa2>
 8000db2:	40f3      	lsrs	r3, r6
 8000db4:	2200      	movs	r2, #0
 8000db6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d905      	bls.n	8000dce <__udivmoddi4+0xb6>
 8000dc2:	b10d      	cbz	r5, 8000dc8 <__udivmoddi4+0xb0>
 8000dc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e7f5      	b.n	8000dba <__udivmoddi4+0xa2>
 8000dce:	fab3 f183 	clz	r1, r3
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d146      	bne.n	8000e64 <__udivmoddi4+0x14c>
 8000dd6:	4573      	cmp	r3, lr
 8000dd8:	d302      	bcc.n	8000de0 <__udivmoddi4+0xc8>
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	f200 8105 	bhi.w	8000fea <__udivmoddi4+0x2d2>
 8000de0:	1a84      	subs	r4, r0, r2
 8000de2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	4690      	mov	r8, r2
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d0e5      	beq.n	8000dba <__udivmoddi4+0xa2>
 8000dee:	e9c5 4800 	strd	r4, r8, [r5]
 8000df2:	e7e2      	b.n	8000dba <__udivmoddi4+0xa2>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f000 8090 	beq.w	8000f1a <__udivmoddi4+0x202>
 8000dfa:	fab2 f682 	clz	r6, r2
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f040 80a4 	bne.w	8000f4c <__udivmoddi4+0x234>
 8000e04:	1a8a      	subs	r2, r1, r2
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	b280      	uxth	r0, r0
 8000e0e:	b2bc      	uxth	r4, r7
 8000e10:	2101      	movs	r1, #1
 8000e12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x11e>
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x11c>
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	f200 80e0 	bhi.w	8000ff4 <__udivmoddi4+0x2dc>
 8000e34:	46c4      	mov	ip, r8
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e44:	fb02 f404 	mul.w	r4, r2, r4
 8000e48:	429c      	cmp	r4, r3
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x144>
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x142>
 8000e54:	429c      	cmp	r4, r3
 8000e56:	f200 80ca 	bhi.w	8000fee <__udivmoddi4+0x2d6>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	1b1b      	subs	r3, r3, r4
 8000e5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e62:	e7a5      	b.n	8000db0 <__udivmoddi4+0x98>
 8000e64:	f1c1 0620 	rsb	r6, r1, #32
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	fa0e f401 	lsl.w	r4, lr, r1
 8000e74:	fa20 f306 	lsr.w	r3, r0, r6
 8000e78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e80:	4323      	orrs	r3, r4
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	fa1f fc87 	uxth.w	ip, r7
 8000e8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e8e:	0c1c      	lsrs	r4, r3, #16
 8000e90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea2:	d909      	bls.n	8000eb8 <__udivmoddi4+0x1a0>
 8000ea4:	193c      	adds	r4, r7, r4
 8000ea6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eaa:	f080 809c 	bcs.w	8000fe6 <__udivmoddi4+0x2ce>
 8000eae:	45a6      	cmp	lr, r4
 8000eb0:	f240 8099 	bls.w	8000fe6 <__udivmoddi4+0x2ce>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	eba4 040e 	sub.w	r4, r4, lr
 8000ebc:	fa1f fe83 	uxth.w	lr, r3
 8000ec0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ecc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed0:	45a4      	cmp	ip, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x1ce>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000eda:	f080 8082 	bcs.w	8000fe2 <__udivmoddi4+0x2ca>
 8000ede:	45a4      	cmp	ip, r4
 8000ee0:	d97f      	bls.n	8000fe2 <__udivmoddi4+0x2ca>
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	443c      	add	r4, r7
 8000ee6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eea:	eba4 040c 	sub.w	r4, r4, ip
 8000eee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ef2:	4564      	cmp	r4, ip
 8000ef4:	4673      	mov	r3, lr
 8000ef6:	46e1      	mov	r9, ip
 8000ef8:	d362      	bcc.n	8000fc0 <__udivmoddi4+0x2a8>
 8000efa:	d05f      	beq.n	8000fbc <__udivmoddi4+0x2a4>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x1fe>
 8000efe:	ebb8 0203 	subs.w	r2, r8, r3
 8000f02:	eb64 0409 	sbc.w	r4, r4, r9
 8000f06:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f0e:	431e      	orrs	r6, r3
 8000f10:	40cc      	lsrs	r4, r1
 8000f12:	e9c5 6400 	strd	r6, r4, [r5]
 8000f16:	2100      	movs	r1, #0
 8000f18:	e74f      	b.n	8000dba <__udivmoddi4+0xa2>
 8000f1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f1e:	0c01      	lsrs	r1, r0, #16
 8000f20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f24:	b280      	uxth	r0, r0
 8000f26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	463c      	mov	r4, r7
 8000f30:	46b8      	mov	r8, r7
 8000f32:	46be      	mov	lr, r7
 8000f34:	2620      	movs	r6, #32
 8000f36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f3a:	eba2 0208 	sub.w	r2, r2, r8
 8000f3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f42:	e766      	b.n	8000e12 <__udivmoddi4+0xfa>
 8000f44:	4601      	mov	r1, r0
 8000f46:	e718      	b.n	8000d7a <__udivmoddi4+0x62>
 8000f48:	4610      	mov	r0, r2
 8000f4a:	e72c      	b.n	8000da6 <__udivmoddi4+0x8e>
 8000f4c:	f1c6 0220 	rsb	r2, r6, #32
 8000f50:	fa2e f302 	lsr.w	r3, lr, r2
 8000f54:	40b7      	lsls	r7, r6
 8000f56:	40b1      	lsls	r1, r6
 8000f58:	fa20 f202 	lsr.w	r2, r0, r2
 8000f5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f60:	430a      	orrs	r2, r1
 8000f62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f66:	b2bc      	uxth	r4, r7
 8000f68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f6c:	0c11      	lsrs	r1, r2, #16
 8000f6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f72:	fb08 f904 	mul.w	r9, r8, r4
 8000f76:	40b0      	lsls	r0, r6
 8000f78:	4589      	cmp	r9, r1
 8000f7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f7e:	b280      	uxth	r0, r0
 8000f80:	d93e      	bls.n	8001000 <__udivmoddi4+0x2e8>
 8000f82:	1879      	adds	r1, r7, r1
 8000f84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f88:	d201      	bcs.n	8000f8e <__udivmoddi4+0x276>
 8000f8a:	4589      	cmp	r9, r1
 8000f8c:	d81f      	bhi.n	8000fce <__udivmoddi4+0x2b6>
 8000f8e:	eba1 0109 	sub.w	r1, r1, r9
 8000f92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f96:	fb09 f804 	mul.w	r8, r9, r4
 8000f9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa4:	4542      	cmp	r2, r8
 8000fa6:	d229      	bcs.n	8000ffc <__udivmoddi4+0x2e4>
 8000fa8:	18ba      	adds	r2, r7, r2
 8000faa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fae:	d2c4      	bcs.n	8000f3a <__udivmoddi4+0x222>
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d2c2      	bcs.n	8000f3a <__udivmoddi4+0x222>
 8000fb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fb8:	443a      	add	r2, r7
 8000fba:	e7be      	b.n	8000f3a <__udivmoddi4+0x222>
 8000fbc:	45f0      	cmp	r8, lr
 8000fbe:	d29d      	bcs.n	8000efc <__udivmoddi4+0x1e4>
 8000fc0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fc4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fc8:	3801      	subs	r0, #1
 8000fca:	46e1      	mov	r9, ip
 8000fcc:	e796      	b.n	8000efc <__udivmoddi4+0x1e4>
 8000fce:	eba7 0909 	sub.w	r9, r7, r9
 8000fd2:	4449      	add	r1, r9
 8000fd4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fd8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fdc:	fb09 f804 	mul.w	r8, r9, r4
 8000fe0:	e7db      	b.n	8000f9a <__udivmoddi4+0x282>
 8000fe2:	4673      	mov	r3, lr
 8000fe4:	e77f      	b.n	8000ee6 <__udivmoddi4+0x1ce>
 8000fe6:	4650      	mov	r0, sl
 8000fe8:	e766      	b.n	8000eb8 <__udivmoddi4+0x1a0>
 8000fea:	4608      	mov	r0, r1
 8000fec:	e6fd      	b.n	8000dea <__udivmoddi4+0xd2>
 8000fee:	443b      	add	r3, r7
 8000ff0:	3a02      	subs	r2, #2
 8000ff2:	e733      	b.n	8000e5c <__udivmoddi4+0x144>
 8000ff4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff8:	443b      	add	r3, r7
 8000ffa:	e71c      	b.n	8000e36 <__udivmoddi4+0x11e>
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	e79c      	b.n	8000f3a <__udivmoddi4+0x222>
 8001000:	eba1 0109 	sub.w	r1, r1, r9
 8001004:	46c4      	mov	ip, r8
 8001006:	fbb1 f9fe 	udiv	r9, r1, lr
 800100a:	fb09 f804 	mul.w	r8, r9, r4
 800100e:	e7c4      	b.n	8000f9a <__udivmoddi4+0x282>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001026:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001028:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <MX_ADC1_Init+0x9c>)
 800102a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800102c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <MX_ADC1_Init+0x98>)
 800102e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001032:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001034:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800103a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_ADC1_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001056:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <MX_ADC1_Init+0xa0>)
 8001058:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_ADC1_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001062:	2201      	movs	r2, #1
 8001064:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001070:	2201      	movs	r2, #1
 8001072:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001076:	f002 fd7b 	bl	8003b70 <HAL_ADC_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001080:	f000 fad7 	bl	8001632 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001084:	2309      	movs	r3, #9
 8001086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001088:	2301      	movs	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_ADC1_Init+0x98>)
 8001096:	f002 ff4d 	bl	8003f34 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010a0:	f000 fac7 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200005ac 	.word	0x200005ac
 80010b0:	40012000 	.word	0x40012000
 80010b4:	0f000001 	.word	0x0f000001

080010b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <HAL_ADC_MspInit+0x7c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d127      	bne.n	800112a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	4a15      	ldr	r2, [pc, #84]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <HAL_ADC_MspInit+0x80>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 8001112:	2302      	movs	r3, #2
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001116:	2303      	movs	r3, #3
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	@ (800113c <HAL_ADC_MspInit+0x84>)
 8001126:	f003 fa45 	bl	80045b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	@ 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40012000 	.word	0x40012000
 8001138:	40023800 	.word	0x40023800
 800113c:	40020400 	.word	0x40020400

08001140 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b73      	ldr	r3, [pc, #460]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a72      	ldr	r2, [pc, #456]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b70      	ldr	r3, [pc, #448]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b6c      	ldr	r3, [pc, #432]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a6b      	ldr	r2, [pc, #428]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b69      	ldr	r3, [pc, #420]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b65      	ldr	r3, [pc, #404]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a64      	ldr	r2, [pc, #400]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b62      	ldr	r3, [pc, #392]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b5e      	ldr	r3, [pc, #376]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a5d      	ldr	r2, [pc, #372]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b57      	ldr	r3, [pc, #348]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a56      	ldr	r2, [pc, #344]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b54      	ldr	r3, [pc, #336]	@ (8001328 <MX_GPIO_Init+0x1e8>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2130      	movs	r1, #48	@ 0x30
 80011e6:	4851      	ldr	r0, [pc, #324]	@ (800132c <MX_GPIO_Init+0x1ec>)
 80011e8:	f003 fb78 	bl	80048dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_DIR_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2111      	movs	r1, #17
 80011f0:	484f      	ldr	r0, [pc, #316]	@ (8001330 <MX_GPIO_Init+0x1f0>)
 80011f2:	f003 fb73 	bl	80048dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BTN2_GPIO_Port, LED_BTN2_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011fc:	484d      	ldr	r0, [pc, #308]	@ (8001334 <MX_GPIO_Init+0x1f4>)
 80011fe:	f003 fb6d 	bl	80048dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001202:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001208:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4846      	ldr	r0, [pc, #280]	@ (8001334 <MX_GPIO_Init+0x1f4>)
 800121a:	f003 f9cb 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC6 PC7 PC8 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800121e:	f641 53dd 	movw	r3, #7645	@ 0x1ddd
 8001222:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001224:	2303      	movs	r3, #3
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4840      	ldr	r0, [pc, #256]	@ (8001334 <MX_GPIO_Init+0x1f4>)
 8001234:	f003 f9be 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_DIR_Pin LD2_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|LD2_Pin;
 8001238:	2330      	movs	r3, #48	@ 0x30
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4837      	ldr	r0, [pc, #220]	@ (800132c <MX_GPIO_Init+0x1ec>)
 8001250:	f003 f9b0 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8001254:	2320      	movs	r3, #32
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001258:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125e:	2301      	movs	r3, #1
 8001260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4832      	ldr	r0, [pc, #200]	@ (8001334 <MX_GPIO_Init+0x1f4>)
 800126a:	f003 f9a3 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 800126e:	2301      	movs	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	482a      	ldr	r0, [pc, #168]	@ (8001330 <MX_GPIO_Init+0x1f0>)
 8001286:	f003 f995 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800128a:	f24f 3324 	movw	r3, #62244	@ 0xf324
 800128e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001290:	2303      	movs	r3, #3
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4824      	ldr	r0, [pc, #144]	@ (8001330 <MX_GPIO_Init+0x1f0>)
 80012a0:	f003 f988 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BTN2_Pin */
  GPIO_InitStruct.Pin = LED_BTN2_Pin;
 80012a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BTN2_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	481d      	ldr	r0, [pc, #116]	@ (8001334 <MX_GPIO_Init+0x1f4>)
 80012be:	f003 f979 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012c2:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 80012c6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	2303      	movs	r3, #3
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	4815      	ldr	r0, [pc, #84]	@ (800132c <MX_GPIO_Init+0x1ec>)
 80012d8:	f003 f96c 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012dc:	2304      	movs	r3, #4
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e0:	2303      	movs	r3, #3
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4812      	ldr	r0, [pc, #72]	@ (8001338 <MX_GPIO_Init+0x1f8>)
 80012f0:	f003 f960 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 80012f4:	2310      	movs	r3, #16
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4809      	ldr	r0, [pc, #36]	@ (8001330 <MX_GPIO_Init+0x1f0>)
 800130c:	f003 f952 	bl	80045b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2017      	movs	r0, #23
 8001316:	f003 f916 	bl	8004546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800131a:	2017      	movs	r0, #23
 800131c:	f003 f92f 	bl	800457e <HAL_NVIC_EnableIRQ>

}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	@ 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	40020000 	.word	0x40020000
 8001330:	40020400 	.word	0x40020400
 8001334:	40020800 	.word	0x40020800
 8001338:	40020c00 	.word	0x40020c00

0800133c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001344:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001348:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d013      	beq.n	800137c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001354:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001358:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800135c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00b      	beq.n	800137c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001364:	e000      	b.n	8001368 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001366:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001368:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f9      	beq.n	8001366 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001372:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800137c:	687b      	ldr	r3, [r7, #4]
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001392:	f002 fb57 	bl	8003a44 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001396:	f000 f893 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139a:	f7ff fed1 	bl	8001140 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800139e:	f000 fe57 	bl	8002050 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80013a2:	f000 fbe3 	bl	8001b6c <MX_TIM4_Init>
  MX_TIM6_Init();
 80013a6:	f000 fc8f 	bl	8001cc8 <MX_TIM6_Init>
  MX_SPI2_Init();
 80013aa:	f000 f949 	bl	8001640 <MX_SPI2_Init>
  MX_TIM2_Init();
 80013ae:	f000 fb31 	bl	8001a14 <MX_TIM2_Init>
  MX_TIM7_Init();
 80013b2:	f000 fcbf 	bl	8001d34 <MX_TIM7_Init>
  MX_TIM3_Init();
 80013b6:	f000 fb85 	bl	8001ac4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80013ba:	f000 fc2b 	bl	8001c14 <MX_TIM5_Init>
  MX_ADC1_Init();
 80013be:	f7ff fe29 	bl	8001014 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);						// Display timer (0.1MHz)
 80013c2:	4832      	ldr	r0, [pc, #200]	@ (800148c <main+0x100>)
 80013c4:	f004 fbb8 	bl	8005b38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);						// Timeline
 80013c8:	4831      	ldr	r0, [pc, #196]	@ (8001490 <main+0x104>)
 80013ca:	f004 fbb5 	bl	8005b38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		// Encoder right
 80013ce:	213c      	movs	r1, #60	@ 0x3c
 80013d0:	4830      	ldr	r0, [pc, #192]	@ (8001494 <main+0x108>)
 80013d2:	f004 fddf 	bl	8005f94 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);		// Encoder left
 80013d6:	213c      	movs	r1, #60	@ 0x3c
 80013d8:	482f      	ldr	r0, [pc, #188]	@ (8001498 <main+0x10c>)
 80013da:	f004 fddb 	bl	8005f94 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);				// Stepper left
 80013de:	2104      	movs	r1, #4
 80013e0:	482e      	ldr	r0, [pc, #184]	@ (800149c <main+0x110>)
 80013e2:	f004 fc69 	bl	8005cb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);				// Stepper right
 80013e6:	2100      	movs	r1, #0
 80013e8:	482d      	ldr	r0, [pc, #180]	@ (80014a0 <main+0x114>)
 80013ea:	f004 fc65 	bl	8005cb8 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(50);
 80013ee:	2032      	movs	r0, #50	@ 0x32
 80013f0:	f002 fb9a 	bl	8003b28 <HAL_Delay>
  Robot_init();
 80013f4:	f001 f8d4 	bl	80025a0 <Robot_init>

//  char str[] = "SBRobot";
//  display_data_t data = {str, PRINT_SCROLL, NO_SETTINGS, DISPLAY_TYPE_STRING, 0};
//  MAX72_Add_Data(&display, &data);

  display_data_t data2 = {&encoder_l.speed, PRINT_FLOAT, MINIDIGITS, DISPLAY_TYPE_FLOAT, 3};
 80013f8:	4a2a      	ldr	r2, [pc, #168]	@ (80014a4 <main+0x118>)
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001402:	e883 0003 	stmia.w	r3, {r0, r1}
  MAX72_Add_Data(&display, &data2);
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4619      	mov	r1, r3
 800140c:	4826      	ldr	r0, [pc, #152]	@ (80014a8 <main+0x11c>)
 800140e:	f001 faf4 	bl	80029fa <MAX72_Add_Data>

  display_data_t data3 = {&stepper_l.frequency, PRINT_INT, MINIDIGITS, DISPLAY_TYPE_FLOAT, 0};
 8001412:	4a26      	ldr	r2, [pc, #152]	@ (80014ac <main+0x120>)
 8001414:	463b      	mov	r3, r7
 8001416:	e892 0003 	ldmia.w	r2, {r0, r1}
 800141a:	e883 0003 	stmia.w	r3, {r0, r1}
  MAX72_Add_Data(&display, &data3);
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	4821      	ldr	r0, [pc, #132]	@ (80014a8 <main+0x11c>)
 8001424:	f001 fae9 	bl	80029fa <MAX72_Add_Data>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint8_t last_cnt = 255;
	  if (last_cnt != tim6_update_cnt) { // Update every 100ms
 8001428:	4b21      	ldr	r3, [pc, #132]	@ (80014b0 <main+0x124>)
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <main+0x128>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d0f9      	beq.n	8001428 <main+0x9c>
	      last_cnt = tim6_update_cnt;
 8001434:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <main+0x128>)
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <main+0x124>)
 800143a:	701a      	strb	r2, [r3, #0]

	      PowerModule_update_data(&power_module);
 800143c:	481e      	ldr	r0, [pc, #120]	@ (80014b8 <main+0x12c>)
 800143e:	f000 fff3 	bl	8002428 <PowerModule_update_data>

	      if (tim6_update_cnt % 5 == 0) { // Update every 500ms
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <main+0x128>)
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <main+0x130>)
 8001448:	fba3 1302 	umull	r1, r3, r3, r2
 800144c:	0899      	lsrs	r1, r3, #2
 800144e:	460b      	mov	r3, r1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d114      	bne.n	8001486 <main+0xfa>
	    	  // Display refresh data
	    	  MAX72_Update_Data(&display);
 800145c:	4812      	ldr	r0, [pc, #72]	@ (80014a8 <main+0x11c>)
 800145e:	f001 faf7 	bl	8002a50 <MAX72_Update_Data>

	    	  if (tim6_update_cnt % 10 == 0) { // Every 1 second
 8001462:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <main+0x128>)
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <main+0x130>)
 8001468:	fba3 1302 	umull	r1, r3, r3, r2
 800146c:	08d9      	lsrs	r1, r3, #3
 800146e:	460b      	mov	r3, r1
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <main+0xfa>
	    		  MAX72_Change_Data(&display,0);
 800147e:	2100      	movs	r1, #0
 8001480:	4809      	ldr	r0, [pc, #36]	@ (80014a8 <main+0x11c>)
 8001482:	f001 fbe1 	bl	8002c48 <MAX72_Change_Data>
	    	  }
	      }

	      MAX72_Scroll_Process(); // Process scrolling text
 8001486:	f002 f927 	bl	80036d8 <MAX72_Scroll_Process>
  {
 800148a:	e7cd      	b.n	8001428 <main+0x9c>
 800148c:	20000774 	.word	0x20000774
 8001490:	200007bc 	.word	0x200007bc
 8001494:	2000069c 	.word	0x2000069c
 8001498:	200006e4 	.word	0x200006e4
 800149c:	20000654 	.word	0x20000654
 80014a0:	2000072c 	.word	0x2000072c
 80014a4:	08009cd8 	.word	0x08009cd8
 80014a8:	2000097c 	.word	0x2000097c
 80014ac:	08009ce0 	.word	0x08009ce0
 80014b0:	20000000 	.word	0x20000000
 80014b4:	200005f4 	.word	0x200005f4
 80014b8:	200008cc 	.word	0x200008cc
 80014bc:	cccccccd 	.word	0xcccccccd

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b094      	sub	sp, #80	@ 0x50
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	2234      	movs	r2, #52	@ 0x34
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f006 fae6 	bl	8007aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <SystemClock_Config+0xd4>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	4a29      	ldr	r2, [pc, #164]	@ (8001594 <SystemClock_Config+0xd4>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f4:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <SystemClock_Config+0xd4>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001500:	2300      	movs	r3, #0
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <SystemClock_Config+0xd8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800150c:	4a22      	ldr	r2, [pc, #136]	@ (8001598 <SystemClock_Config+0xd8>)
 800150e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <SystemClock_Config+0xd8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001520:	2302      	movs	r3, #2
 8001522:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	2301      	movs	r3, #1
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001528:	2310      	movs	r3, #16
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152c:	2302      	movs	r3, #2
 800152e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001530:	2300      	movs	r3, #0
 8001532:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001534:	2310      	movs	r3, #16
 8001536:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001538:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800153c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800153e:	2304      	movs	r3, #4
 8001540:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001542:	2302      	movs	r3, #2
 8001544:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001546:	2302      	movs	r3, #2
 8001548:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fd5a 	bl	8005008 <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800155a:	f000 f86a 	bl	8001632 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	230f      	movs	r3, #15
 8001560:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001562:	2302      	movs	r3, #2
 8001564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800156a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	2102      	movs	r1, #2
 800157a:	4618      	mov	r0, r3
 800157c:	f003 f9fa 	bl	8004974 <HAL_RCC_ClockConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001586:	f000 f854 	bl	8001632 <Error_Handler>
  }
}
 800158a:	bf00      	nop
 800158c:	3750      	adds	r7, #80	@ 0x50
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000

0800159c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0f      	ldr	r2, [pc, #60]	@ (80015e8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10d      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x2e>
		tim6_update_cnt++;
 80015ae:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015b8:	701a      	strb	r2, [r3, #0]
		if (tim6_update_cnt == 250){
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2bfa      	cmp	r3, #250	@ 0xfa
 80015c0:	d10e      	bne.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x44>
			tim6_update_cnt = 0;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
		}
	} else if (htim->Instance == TIM7) {
		speed_control(&stepper_r);
		speed_control(&stepper_l);
	}
}
 80015c8:	e00a      	b.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x44>
	} else if (htim->Instance == TIM7) {
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a08      	ldr	r2, [pc, #32]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d105      	bne.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x44>
		speed_control(&stepper_r);
 80015d4:	4807      	ldr	r0, [pc, #28]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015d6:	f001 f82f 	bl	8002638 <speed_control>
		speed_control(&stepper_l);
 80015da:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80015dc:	f001 f82c 	bl	8002638 <speed_control>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40001000 	.word	0x40001000
 80015ec:	200005f4 	.word	0x200005f4
 80015f0:	40001400 	.word	0x40001400
 80015f4:	20000870 	.word	0x20000870
 80015f8:	200008a8 	.word	0x200008a8

080015fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_5) {
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	2b20      	cmp	r3, #32
 800160a:	d101      	bne.n	8001610 <HAL_GPIO_EXTI_Callback+0x14>
    on_click();
 800160c:	f000 fd92 	bl	8002134 <on_click>
  }
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <__io_putchar>:

int __io_putchar(int ch){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fe8a 	bl	800133c <ITM_SendChar>
	return ch;
 8001628:	687b      	ldr	r3, [r7, #4]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001636:	b672      	cpsid	i
}
 8001638:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163a:	bf00      	nop
 800163c:	e7fd      	b.n	800163a <Error_Handler+0x8>
	...

08001640 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_SPI2_Init+0x68>)
 8001646:	4a19      	ldr	r2, [pc, #100]	@ (80016ac <MX_SPI2_Init+0x6c>)
 8001648:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <MX_SPI2_Init+0x68>)
 800164c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001650:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <MX_SPI2_Init+0x68>)
 8001654:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001658:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800165a:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <MX_SPI2_Init+0x68>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MX_SPI2_Init+0x68>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001666:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <MX_SPI2_Init+0x68>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800166c:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <MX_SPI2_Init+0x68>)
 800166e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001672:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <MX_SPI2_Init+0x68>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800167a:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <MX_SPI2_Init+0x68>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001680:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <MX_SPI2_Init+0x68>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001686:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <MX_SPI2_Init+0x68>)
 8001688:	2200      	movs	r2, #0
 800168a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <MX_SPI2_Init+0x68>)
 800168e:	220a      	movs	r2, #10
 8001690:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_SPI2_Init+0x68>)
 8001694:	f003 ff56 	bl	8005544 <HAL_SPI_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800169e:	f7ff ffc8 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200005f8 	.word	0x200005f8
 80016ac:	40003800 	.word	0x40003800

080016b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a28      	ldr	r2, [pc, #160]	@ (8001770 <HAL_SPI_MspInit+0xc0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d14a      	bne.n	8001768 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <HAL_SPI_MspInit+0xc4>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a26      	ldr	r2, [pc, #152]	@ (8001774 <HAL_SPI_MspInit+0xc4>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <HAL_SPI_MspInit+0xc4>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <HAL_SPI_MspInit+0xc4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001774 <HAL_SPI_MspInit+0xc4>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <HAL_SPI_MspInit+0xc4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <HAL_SPI_MspInit+0xc4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a18      	ldr	r2, [pc, #96]	@ (8001774 <HAL_SPI_MspInit+0xc4>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <HAL_SPI_MspInit+0xc4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001726:	2302      	movs	r3, #2
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001736:	2307      	movs	r3, #7
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	480d      	ldr	r0, [pc, #52]	@ (8001778 <HAL_SPI_MspInit+0xc8>)
 8001742:	f002 ff37 	bl	80045b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 8001746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001758:	2305      	movs	r3, #5
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	@ (800177c <HAL_SPI_MspInit+0xcc>)
 8001764:	f002 ff26 	bl	80045b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001768:	bf00      	nop
 800176a:	3728      	adds	r7, #40	@ 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40003800 	.word	0x40003800
 8001774:	40023800 	.word	0x40023800
 8001778:	40020800 	.word	0x40020800
 800177c:	40020400 	.word	0x40020400

08001780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <HAL_MspInit+0x4c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	4a0f      	ldr	r2, [pc, #60]	@ (80017cc <HAL_MspInit+0x4c>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001794:	6453      	str	r3, [r2, #68]	@ 0x44
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <HAL_MspInit+0x4c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <HAL_MspInit+0x4c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	4a08      	ldr	r2, [pc, #32]	@ (80017cc <HAL_MspInit+0x4c>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_MspInit+0x4c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017be:	2007      	movs	r0, #7
 80017c0:	f002 feb6 	bl	8004530 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <NMI_Handler+0x4>

080017d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <MemManage_Handler+0x4>

080017e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001826:	f002 f95f 	bl	8003ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}

0800182e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001832:	2020      	movs	r0, #32
 8001834:	f003 f886 	bl	8004944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <TIM6_DAC_IRQHandler+0x10>)
 8001842:	f004 fc35 	bl	80060b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000774 	.word	0x20000774

08001850 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <TIM7_IRQHandler+0x10>)
 8001856:	f004 fc2b 	bl	80060b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200007bc 	.word	0x200007bc

08001864 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return 1;
 8001868:	2301      	movs	r3, #1
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_kill>:

int _kill(int pid, int sig)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800187e:	f006 f917 	bl	8007ab0 <__errno>
 8001882:	4603      	mov	r3, r0
 8001884:	2216      	movs	r2, #22
 8001886:	601a      	str	r2, [r3, #0]
  return -1;
 8001888:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_exit>:

void _exit (int status)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800189c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ffe7 	bl	8001874 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018a6:	bf00      	nop
 80018a8:	e7fd      	b.n	80018a6 <_exit+0x12>

080018aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e00a      	b.n	80018d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018bc:	f3af 8000 	nop.w
 80018c0:	4601      	mov	r1, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	60ba      	str	r2, [r7, #8]
 80018c8:	b2ca      	uxtb	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dbf0      	blt.n	80018bc <_read+0x12>
  }

  return len;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e009      	b.n	800190a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	60ba      	str	r2, [r7, #8]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fe8a 	bl	8001618 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	dbf1      	blt.n	80018f6 <_write+0x12>
  }
  return len;
 8001912:	687b      	ldr	r3, [r7, #4]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_close>:

int _close(int file)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001944:	605a      	str	r2, [r3, #4]
  return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_isatty>:

int _isatty(int file)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800198c:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <_sbrk+0x5c>)
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <_sbrk+0x60>)
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <_sbrk+0x64>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	@ (80019ec <_sbrk+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d207      	bcs.n	80019c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b4:	f006 f87c 	bl	8007ab0 <__errno>
 80019b8:	4603      	mov	r3, r0
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <_sbrk+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20020000 	.word	0x20020000
 80019e4:	00000400 	.word	0x00000400
 80019e8:	20000650 	.word	0x20000650
 80019ec:	20000b48 	.word	0x20000b48

080019f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <SystemInit+0x20>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <SystemInit+0x20>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1a:	f107 0320 	add.w	r3, r7, #32
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a36:	4b22      	ldr	r3, [pc, #136]	@ (8001ac0 <MX_TIM2_Init+0xac>)
 8001a38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <MX_TIM2_Init+0xac>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <MX_TIM2_Init+0xac>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <MX_TIM2_Init+0xac>)
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a52:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <MX_TIM2_Init+0xac>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <MX_TIM2_Init+0xac>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a5e:	4818      	ldr	r0, [pc, #96]	@ (8001ac0 <MX_TIM2_Init+0xac>)
 8001a60:	f004 f8da 	bl	8005c18 <HAL_TIM_PWM_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a6a:	f7ff fde2 	bl	8001632 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a76:	f107 0320 	add.w	r3, r7, #32
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4810      	ldr	r0, [pc, #64]	@ (8001ac0 <MX_TIM2_Init+0xac>)
 8001a7e:	f004 ff6d 	bl	800695c <HAL_TIMEx_MasterConfigSynchronization>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a88:	f7ff fdd3 	bl	8001632 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a8c:	2360      	movs	r3, #96	@ 0x60
 8001a8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4807      	ldr	r0, [pc, #28]	@ (8001ac0 <MX_TIM2_Init+0xac>)
 8001aa4:	f004 fbf4 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001aae:	f7ff fdc0 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ab2:	4803      	ldr	r0, [pc, #12]	@ (8001ac0 <MX_TIM2_Init+0xac>)
 8001ab4:	f000 fa6e 	bl	8001f94 <HAL_TIM_MspPostInit>

}
 8001ab8:	bf00      	nop
 8001aba:	3728      	adds	r7, #40	@ 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000654 	.word	0x20000654

08001ac4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	@ 0x30
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	2224      	movs	r2, #36	@ 0x24
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f005 ffe4 	bl	8007aa0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ae0:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <MX_TIM3_Init+0xa0>)
 8001ae2:	4a21      	ldr	r2, [pc, #132]	@ (8001b68 <MX_TIM3_Init+0xa4>)
 8001ae4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <MX_TIM3_Init+0xa0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aec:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <MX_TIM3_Init+0xa0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 8001af2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <MX_TIM3_Init+0xa0>)
 8001af4:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001af8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <MX_TIM3_Init+0xa0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b00:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <MX_TIM3_Init+0xa0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b06:	2303      	movs	r3, #3
 8001b08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <MX_TIM3_Init+0xa0>)
 8001b32:	f004 f989 	bl	8005e48 <HAL_TIM_Encoder_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b3c:	f7ff fd79 	bl	8001632 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_TIM3_Init+0xa0>)
 8001b4e:	f004 ff05 	bl	800695c <HAL_TIMEx_MasterConfigSynchronization>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b58:	f7ff fd6b 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	3730      	adds	r7, #48	@ 0x30
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2000069c 	.word	0x2000069c
 8001b68:	40000400 	.word	0x40000400

08001b6c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08c      	sub	sp, #48	@ 0x30
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	2224      	movs	r2, #36	@ 0x24
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f005 ff90 	bl	8007aa0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b88:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <MX_TIM4_Init+0xa0>)
 8001b8a:	4a21      	ldr	r2, [pc, #132]	@ (8001c10 <MX_TIM4_Init+0xa4>)
 8001b8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c0c <MX_TIM4_Init+0xa0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <MX_TIM4_Init+0xa0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8191;
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <MX_TIM4_Init+0xa0>)
 8001b9c:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001ba0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <MX_TIM4_Init+0xa0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <MX_TIM4_Init+0xa0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480c      	ldr	r0, [pc, #48]	@ (8001c0c <MX_TIM4_Init+0xa0>)
 8001bda:	f004 f935 	bl	8005e48 <HAL_TIM_Encoder_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001be4:	f7ff fd25 	bl	8001632 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4805      	ldr	r0, [pc, #20]	@ (8001c0c <MX_TIM4_Init+0xa0>)
 8001bf6:	f004 feb1 	bl	800695c <HAL_TIMEx_MasterConfigSynchronization>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c00:	f7ff fd17 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	3730      	adds	r7, #48	@ 0x30
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200006e4 	.word	0x200006e4
 8001c10:	40000800 	.word	0x40000800

08001c14 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	@ 0x28
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1a:	f107 0320 	add.w	r3, r7, #32
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]
 8001c32:	615a      	str	r2, [r3, #20]
 8001c34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c36:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <MX_TIM5_Init+0xac>)
 8001c38:	4a22      	ldr	r2, [pc, #136]	@ (8001cc4 <MX_TIM5_Init+0xb0>)
 8001c3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c3c:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <MX_TIM5_Init+0xac>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc0 <MX_TIM5_Init+0xac>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <MX_TIM5_Init+0xac>)
 8001c4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c4e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <MX_TIM5_Init+0xac>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <MX_TIM5_Init+0xac>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c5c:	4818      	ldr	r0, [pc, #96]	@ (8001cc0 <MX_TIM5_Init+0xac>)
 8001c5e:	f003 ffdb 	bl	8005c18 <HAL_TIM_PWM_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001c68:	f7ff fce3 	bl	8001632 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4811      	ldr	r0, [pc, #68]	@ (8001cc0 <MX_TIM5_Init+0xac>)
 8001c7c:	f004 fe6e 	bl	800695c <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001c86:	f7ff fcd4 	bl	8001632 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8a:	2360      	movs	r3, #96	@ 0x60
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4807      	ldr	r0, [pc, #28]	@ (8001cc0 <MX_TIM5_Init+0xac>)
 8001ca2:	f004 faf5 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001cac:	f7ff fcc1 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001cb0:	4803      	ldr	r0, [pc, #12]	@ (8001cc0 <MX_TIM5_Init+0xac>)
 8001cb2:	f000 f96f 	bl	8001f94 <HAL_TIM_MspPostInit>

}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	@ 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000072c 	.word	0x2000072c
 8001cc4:	40000c00 	.word	0x40000c00

08001cc8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cce:	463b      	mov	r3, r7
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <MX_TIM6_Init+0x64>)
 8001cd8:	4a15      	ldr	r2, [pc, #84]	@ (8001d30 <MX_TIM6_Init+0x68>)
 8001cda:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8001cdc:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <MX_TIM6_Init+0x64>)
 8001cde:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ce2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <MX_TIM6_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <MX_TIM6_Init+0x64>)
 8001cec:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001cf0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <MX_TIM6_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cf8:	480c      	ldr	r0, [pc, #48]	@ (8001d2c <MX_TIM6_Init+0x64>)
 8001cfa:	f003 fecd 	bl	8005a98 <HAL_TIM_Base_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d04:	f7ff fc95 	bl	8001632 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d10:	463b      	mov	r3, r7
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <MX_TIM6_Init+0x64>)
 8001d16:	f004 fe21 	bl	800695c <HAL_TIMEx_MasterConfigSynchronization>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001d20:	f7ff fc87 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000774 	.word	0x20000774
 8001d30:	40001000 	.word	0x40001000

08001d34 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <MX_TIM7_Init+0x64>)
 8001d44:	4a15      	ldr	r2, [pc, #84]	@ (8001d9c <MX_TIM7_Init+0x68>)
 8001d46:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 249;
 8001d48:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <MX_TIM7_Init+0x64>)
 8001d4a:	22f9      	movs	r2, #249	@ 0xf9
 8001d4c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4e:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <MX_TIM7_Init+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8001d54:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <MX_TIM7_Init+0x64>)
 8001d56:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001d5a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <MX_TIM7_Init+0x64>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d62:	480d      	ldr	r0, [pc, #52]	@ (8001d98 <MX_TIM7_Init+0x64>)
 8001d64:	f003 fe98 	bl	8005a98 <HAL_TIM_Base_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001d6e:	f7ff fc60 	bl	8001632 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4806      	ldr	r0, [pc, #24]	@ (8001d98 <MX_TIM7_Init+0x64>)
 8001d80:	f004 fdec 	bl	800695c <HAL_TIMEx_MasterConfigSynchronization>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001d8a:	f7ff fc52 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200007bc 	.word	0x200007bc
 8001d9c:	40001400 	.word	0x40001400

08001da0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db0:	d10e      	bne.n	8001dd0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <HAL_TIM_PWM_MspInit+0x64>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <HAL_TIM_PWM_MspInit+0x64>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <HAL_TIM_PWM_MspInit+0x64>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001dce:	e012      	b.n	8001df6 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e08 <HAL_TIM_PWM_MspInit+0x68>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10d      	bne.n	8001df6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_TIM_PWM_MspInit+0x64>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	4a08      	ldr	r2, [pc, #32]	@ (8001e04 <HAL_TIM_PWM_MspInit+0x64>)
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_TIM_PWM_MspInit+0x64>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40000c00 	.word	0x40000c00

08001e0c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	@ 0x30
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a32      	ldr	r2, [pc, #200]	@ (8001ef4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d12c      	bne.n	8001e88 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	4b31      	ldr	r3, [pc, #196]	@ (8001ef8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	4a30      	ldr	r2, [pc, #192]	@ (8001ef8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a29      	ldr	r2, [pc, #164]	@ (8001ef8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1_CH1_Pin|ENC1_CH2_Pin;
 8001e66:	23c0      	movs	r3, #192	@ 0xc0
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e76:	2302      	movs	r3, #2
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	481e      	ldr	r0, [pc, #120]	@ (8001efc <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e82:	f002 fb97 	bl	80045b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e86:	e030      	b.n	8001eea <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f00 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d12b      	bne.n	8001eea <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	4a17      	ldr	r2, [pc, #92]	@ (8001ef8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea2:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	4a10      	ldr	r2, [pc, #64]	@ (8001ef8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2_CH1_Pin|ENC2_CH2_Pin;
 8001eca:	23c0      	movs	r3, #192	@ 0xc0
 8001ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001eda:	2302      	movs	r3, #2
 8001edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4807      	ldr	r0, [pc, #28]	@ (8001f04 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001ee6:	f002 fb65 	bl	80045b4 <HAL_GPIO_Init>
}
 8001eea:	bf00      	nop
 8001eec:	3730      	adds	r7, #48	@ 0x30
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40000400 	.word	0x40000400
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40000800 	.word	0x40000800
 8001f04:	40020400 	.word	0x40020400

08001f08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1c      	ldr	r2, [pc, #112]	@ (8001f88 <HAL_TIM_Base_MspInit+0x80>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d116      	bne.n	8001f48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <HAL_TIM_Base_MspInit+0x84>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	4a1a      	ldr	r2, [pc, #104]	@ (8001f8c <HAL_TIM_Base_MspInit+0x84>)
 8001f24:	f043 0310 	orr.w	r3, r3, #16
 8001f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2a:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <HAL_TIM_Base_MspInit+0x84>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2036      	movs	r0, #54	@ 0x36
 8001f3c:	f002 fb03 	bl	8004546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f40:	2036      	movs	r0, #54	@ 0x36
 8001f42:	f002 fb1c 	bl	800457e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001f46:	e01a      	b.n	8001f7e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a10      	ldr	r2, [pc, #64]	@ (8001f90 <HAL_TIM_Base_MspInit+0x88>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d115      	bne.n	8001f7e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <HAL_TIM_Base_MspInit+0x84>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f8c <HAL_TIM_Base_MspInit+0x84>)
 8001f5c:	f043 0320 	orr.w	r3, r3, #32
 8001f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f62:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <HAL_TIM_Base_MspInit+0x84>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2037      	movs	r0, #55	@ 0x37
 8001f74:	f002 fae7 	bl	8004546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f78:	2037      	movs	r0, #55	@ 0x37
 8001f7a:	f002 fb00 	bl	800457e <HAL_NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40001000 	.word	0x40001000
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40001400 	.word	0x40001400

08001f94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	@ 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fb4:	d11e      	bne.n	8001ff4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b22      	ldr	r3, [pc, #136]	@ (8002044 <HAL_TIM_MspPostInit+0xb0>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	4a21      	ldr	r2, [pc, #132]	@ (8002044 <HAL_TIM_MspPostInit+0xb0>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8002044 <HAL_TIM_MspPostInit+0xb0>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M2_PUL_Pin;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_PUL_GPIO_Port, &GPIO_InitStruct);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	4816      	ldr	r0, [pc, #88]	@ (8002048 <HAL_TIM_MspPostInit+0xb4>)
 8001fee:	f002 fae1 	bl	80045b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ff2:	e022      	b.n	800203a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a14      	ldr	r2, [pc, #80]	@ (800204c <HAL_TIM_MspPostInit+0xb8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d11d      	bne.n	800203a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <HAL_TIM_MspPostInit+0xb0>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a0f      	ldr	r2, [pc, #60]	@ (8002044 <HAL_TIM_MspPostInit+0xb0>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <HAL_TIM_MspPostInit+0xb0>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_PUL_Pin;
 800201a:	2301      	movs	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800202a:	2302      	movs	r3, #2
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_PUL_GPIO_Port, &GPIO_InitStruct);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	4804      	ldr	r0, [pc, #16]	@ (8002048 <HAL_TIM_MspPostInit+0xb4>)
 8002036:	f002 fabd 	bl	80045b4 <HAL_GPIO_Init>
}
 800203a:	bf00      	nop
 800203c:	3728      	adds	r7, #40	@ 0x28
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	40020000 	.word	0x40020000
 800204c:	40000c00 	.word	0x40000c00

08002050 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <MX_USART2_UART_Init+0x4c>)
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <MX_USART2_UART_Init+0x50>)
 8002058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <MX_USART2_UART_Init+0x4c>)
 800205c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <MX_USART2_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002068:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <MX_USART2_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800206e:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <MX_USART2_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <MX_USART2_UART_Init+0x4c>)
 8002076:	220c      	movs	r2, #12
 8002078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	4b08      	ldr	r3, [pc, #32]	@ (800209c <MX_USART2_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <MX_USART2_UART_Init+0x4c>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002086:	4805      	ldr	r0, [pc, #20]	@ (800209c <MX_USART2_UART_Init+0x4c>)
 8002088:	f004 fcf8 	bl	8006a7c <HAL_UART_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002092:	f7ff face 	bl	8001632 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000804 	.word	0x20000804
 80020a0:	40004400 	.word	0x40004400

080020a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	@ 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a19      	ldr	r2, [pc, #100]	@ (8002128 <HAL_UART_MspInit+0x84>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d12b      	bne.n	800211e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <HAL_UART_MspInit+0x88>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	4a17      	ldr	r2, [pc, #92]	@ (800212c <HAL_UART_MspInit+0x88>)
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_UART_MspInit+0x88>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b11      	ldr	r3, [pc, #68]	@ (800212c <HAL_UART_MspInit+0x88>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	4a10      	ldr	r2, [pc, #64]	@ (800212c <HAL_UART_MspInit+0x88>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f2:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <HAL_UART_MspInit+0x88>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020fe:	230c      	movs	r3, #12
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210a:	2303      	movs	r3, #3
 800210c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800210e:	2307      	movs	r3, #7
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	4805      	ldr	r0, [pc, #20]	@ (8002130 <HAL_UART_MspInit+0x8c>)
 800211a:	f002 fa4b 	bl	80045b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800211e:	bf00      	nop
 8002120:	3728      	adds	r7, #40	@ 0x28
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40004400 	.word	0x40004400
 800212c:	40023800 	.word	0x40023800
 8002130:	40020000 	.word	0x40020000

08002134 <on_click>:
#define DEBOUNCE_DELAY 100 // ms

static uint32_t last_debounce_time = 0;
static uint8_t active = 0;

void on_click(){
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY){
 8002138:	f001 fcea 	bl	8003b10 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	4b18      	ldr	r3, [pc, #96]	@ (80021a0 <on_click+0x6c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b64      	cmp	r3, #100	@ 0x64
 8002146:	d929      	bls.n	800219c <on_click+0x68>
		last_debounce_time = HAL_GetTick();
 8002148:	f001 fce2 	bl	8003b10 <HAL_GetTick>
 800214c:	4603      	mov	r3, r0
 800214e:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <on_click+0x6c>)
 8002150:	6013      	str	r3, [r2, #0]
		active ^= 1;
 8002152:	4b14      	ldr	r3, [pc, #80]	@ (80021a4 <on_click+0x70>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	f083 0301 	eor.w	r3, r3, #1
 800215a:	b2da      	uxtb	r2, r3
 800215c:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <on_click+0x70>)
 800215e:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8002160:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002164:	4810      	ldr	r0, [pc, #64]	@ (80021a8 <on_click+0x74>)
 8002166:	f002 fbd2 	bl	800490e <HAL_GPIO_TogglePin>

		if(active){
 800216a:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <on_click+0x70>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <on_click+0x54>
			set_speed(&stepper_l, 3);
 8002172:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002176:	480d      	ldr	r0, [pc, #52]	@ (80021ac <on_click+0x78>)
 8002178:	f000 fb00 	bl	800277c <set_speed>
			set_speed(&stepper_r, 3);
 800217c:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002180:	480b      	ldr	r0, [pc, #44]	@ (80021b0 <on_click+0x7c>)
 8002182:	f000 fafb 	bl	800277c <set_speed>
		} else{
			set_speed(&stepper_l, 0);
			set_speed(&stepper_r, 0);
		}
	}
}
 8002186:	e009      	b.n	800219c <on_click+0x68>
			set_speed(&stepper_l, 0);
 8002188:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80021b4 <on_click+0x80>
 800218c:	4807      	ldr	r0, [pc, #28]	@ (80021ac <on_click+0x78>)
 800218e:	f000 faf5 	bl	800277c <set_speed>
			set_speed(&stepper_r, 0);
 8002192:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80021b4 <on_click+0x80>
 8002196:	4806      	ldr	r0, [pc, #24]	@ (80021b0 <on_click+0x7c>)
 8002198:	f000 faf0 	bl	800277c <set_speed>
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	2000084c 	.word	0x2000084c
 80021a4:	20000850 	.word	0x20000850
 80021a8:	40020800 	.word	0x40020800
 80021ac:	200008a8 	.word	0x200008a8
 80021b0:	20000870 	.word	0x20000870
 80021b4:	00000000 	.word	0x00000000

080021b8 <update_direction>:
#include <stdio.h>

float SAMPLING_PERIOD; // seconds
uint32_t HCLK;

static void update_direction(encoder_t *encoder){
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	encoder->direction = (encoder->tim->CR1 & TIM_CR1_DIR_Msk) >> TIM_CR1_DIR_Pos;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	701a      	strb	r2, [r3, #0]
	return;
 80021d4:	bf00      	nop
}
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <update_displacement>:

static void update_displacement(encoder_t *encoder){
 80021e0:	b5b0      	push	{r4, r5, r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

	encoder->displacement = ((float)encoder->tim->CNT - 4096) * DCF * encoder->direction_invert;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002260 <update_displacement+0x80>
 80021fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021fe:	ee17 0a90 	vmov	r0, s15
 8002202:	f7fe f9d1 	bl	80005a8 <__aeabi_f2d>
 8002206:	a314      	add	r3, pc, #80	@ (adr r3, 8002258 <update_displacement+0x78>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	f7fe fa24 	bl	8000658 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4614      	mov	r4, r2
 8002216:	461d      	mov	r5, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f9b0 	bl	8000584 <__aeabi_i2d>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4620      	mov	r0, r4
 800222a:	4629      	mov	r1, r5
 800222c:	f7fe fa14 	bl	8000658 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f7fe fd06 	bl	8000c48 <__aeabi_d2f>
 800223c:	4602      	mov	r2, r0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	605a      	str	r2, [r3, #4]
	encoder->tim->CNT = 4096;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800224a:	625a      	str	r2, [r3, #36]	@ 0x24
	return;
 800224c:	bf00      	nop
}
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bdb0      	pop	{r4, r5, r7, pc}
 8002254:	f3af 8000 	nop.w
 8002258:	7bb1a72c 	.word	0x7bb1a72c
 800225c:	3f4921fa 	.word	0x3f4921fa
 8002260:	45800000 	.word	0x45800000

08002264 <compute_speed>:

static void compute_speed(encoder_t *encoder){
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	encoder->speed = encoder->displacement / SAMPLING_PERIOD;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002272:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <compute_speed+0x2c>)
 8002274:	ed93 7a00 	vldr	s14, [r3]
 8002278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000854 	.word	0x20000854

08002294 <Encoder_read>:

void Encoder_read(encoder_t *encoder){
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	update_direction(encoder);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ff8b 	bl	80021b8 <update_direction>
	update_displacement(encoder);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ff9c 	bl	80021e0 <update_displacement>
	compute_speed(encoder);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ffdb 	bl	8002264 <compute_speed>
	return;
 80022ae:	bf00      	nop
}
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <Encoder_init>:

// em_tim : encoder mode timer | s_tim : sampling timer
void Encoder_init(encoder_t *encoder, TIM_HandleTypeDef *em_tim, TIM_HandleTypeDef *s_tim, int8_t direction_invert){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	70fb      	strb	r3, [r7, #3]
	encoder->tim = em_tim->Instance;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	60da      	str	r2, [r3, #12]
	encoder->tim->CNT = 4096;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022d6:	625a      	str	r2, [r3, #36]	@ 0x24
	encoder->direction_invert = direction_invert;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	741a      	strb	r2, [r3, #16]

	encoder->speed = 0;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
	HCLK = HAL_RCC_GetHCLKFreq();
 80022e6:	f002 fc2b 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4a11      	ldr	r2, [pc, #68]	@ (8002334 <Encoder_init+0x7c>)
 80022ee:	6013      	str	r3, [r2, #0]
	SAMPLING_PERIOD = (float)(1+s_tim->Instance->ARR)*(1+s_tim->Instance->PSC)/HCLK;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	3301      	adds	r3, #1
 80022f8:	ee07 3a90 	vmov	s15, r3
 80022fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002306:	3301      	adds	r3, #1
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002310:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002314:	4b07      	ldr	r3, [pc, #28]	@ (8002334 <Encoder_init+0x7c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	ee07 3a90 	vmov	s15, r3
 800231c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002324:	4b04      	ldr	r3, [pc, #16]	@ (8002338 <Encoder_init+0x80>)
 8002326:	edc3 7a00 	vstr	s15, [r3]
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000858 	.word	0x20000858
 8002338:	20000854 	.word	0x20000854
 800233c:	00000000 	.word	0x00000000

08002340 <PowerModule_init>:
#include "headers/power_module.h"
#include "headers/display.h"
#include "gpio.h"

void PowerModule_init(power_module_t *power_module, ADC_HandleTypeDef *hadc){
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
	power_module->warning_limit = WARNING_LIMIT; // Imposta il limite di avviso
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a34      	ldr	r2, [pc, #208]	@ (8002420 <PowerModule_init+0xe0>)
 800234e:	605a      	str	r2, [r3, #4]
	power_module->stop_limit = STOP_LIMIT; // Imposta il limite di stop
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a34      	ldr	r2, [pc, #208]	@ (8002424 <PowerModule_init+0xe4>)
 8002354:	609a      	str	r2, [r3, #8]
	power_module->warning_issued = 0; // Inizializza il flag di avviso
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	731a      	strb	r2, [r3, #12]
	power_module->stop_issued = 0; // Inizializza il flag di stop
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	735a      	strb	r2, [r3, #13]
	power_module->hadc = *hadc; // Initialize ADC handle
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	3364      	adds	r3, #100	@ 0x64
 8002368:	4611      	mov	r1, r2
 800236a:	2248      	movs	r2, #72	@ 0x48
 800236c:	4618      	mov	r0, r3
 800236e:	f005 fbd1 	bl	8007b14 <memcpy>

	HAL_ADC_Start(&power_module->hadc);  // Avvia manualmente
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3364      	adds	r3, #100	@ 0x64
 8002376:	4618      	mov	r0, r3
 8002378:	f001 fc3e 	bl	8003bf8 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&power_module->hadc, 10) == HAL_OK) {  // Timeout corto
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3364      	adds	r3, #100	@ 0x64
 8002380:	210a      	movs	r1, #10
 8002382:	4618      	mov	r0, r3
 8002384:	f001 fd3d 	bl	8003e02 <HAL_ADC_PollForConversion>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d11f      	bne.n	80023ce <PowerModule_init+0x8e>
		power_module->voltage = HAL_ADC_GetValue(&power_module->hadc) / SLOPE - OFFSET;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3364      	adds	r3, #100	@ 0x64
 8002392:	4618      	mov	r0, r3
 8002394:	f001 fdc0 	bl	8003f18 <HAL_ADC_GetValue>
 8002398:	4603      	mov	r3, r0
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f8e2 	bl	8000564 <__aeabi_ui2d>
 80023a0:	a31b      	add	r3, pc, #108	@ (adr r3, 8002410 <PowerModule_init+0xd0>)
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	f7fe fa81 	bl	80008ac <__aeabi_ddiv>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	a319      	add	r3, pc, #100	@ (adr r3, 8002418 <PowerModule_init+0xd8>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fd ff96 	bl	80002e8 <__aeabi_dsub>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7fe fc40 	bl	8000c48 <__aeabi_d2f>
 80023c8:	4602      	mov	r2, r0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Stop(&power_module->hadc);  // Ferma l’ADC dopo la conversione
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3364      	adds	r3, #100	@ 0x64
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 fce2 	bl	8003d9c <HAL_ADC_Stop>

	// Inizializza l'accumulatore
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e00a      	b.n	80023f4 <PowerModule_init+0xb4>
		power_module->accumulator[i] = power_module->voltage; // Inizializza con il primo valore letto
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3304      	adds	r3, #4
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3301      	adds	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b13      	cmp	r3, #19
 80023f8:	ddf1      	ble.n	80023de <PowerModule_init+0x9e>
	}
	power_module->accumulator_idx = 0; // Inizializza l'indice dell'accumulatore
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	f3af 8000 	nop.w
 8002410:	e147ae14 	.word	0xe147ae14
 8002414:	405c847a 	.word	0x405c847a
 8002418:	c540196f 	.word	0xc540196f
 800241c:	3fb12c42 	.word	0x3fb12c42
 8002420:	41b00000 	.word	0x41b00000
 8002424:	41a00000 	.word	0x41a00000

08002428 <PowerModule_update_data>:

void PowerModule_update_data(power_module_t *power_module){
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&power_module->hadc);  // Avvia l'ADC
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3364      	adds	r3, #100	@ 0x64
 8002434:	4618      	mov	r0, r3
 8002436:	f001 fbdf 	bl	8003bf8 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&power_module->hadc, 10) == HAL_OK) {  // Timeout corto
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3364      	adds	r3, #100	@ 0x64
 800243e:	210a      	movs	r1, #10
 8002440:	4618      	mov	r0, r3
 8002442:	f001 fcde 	bl	8003e02 <HAL_ADC_PollForConversion>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 808f 	bne.w	800256c <PowerModule_update_data+0x144>
		// Aggiunge il nuovo valore all'accumulatore
		power_module->accumulator[power_module->accumulator_idx] = HAL_ADC_GetValue(&power_module->hadc) / SLOPE - OFFSET; // Calcola la tensione
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3364      	adds	r3, #100	@ 0x64
 8002452:	4618      	mov	r0, r3
 8002454:	f001 fd60 	bl	8003f18 <HAL_ADC_GetValue>
 8002458:	4603      	mov	r3, r0
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f882 	bl	8000564 <__aeabi_ui2d>
 8002460:	a34b      	add	r3, pc, #300	@ (adr r3, 8002590 <PowerModule_update_data+0x168>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fe fa21 	bl	80008ac <__aeabi_ddiv>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4610      	mov	r0, r2
 8002470:	4619      	mov	r1, r3
 8002472:	a349      	add	r3, pc, #292	@ (adr r3, 8002598 <PowerModule_update_data+0x170>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fd ff36 	bl	80002e8 <__aeabi_dsub>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800248a:	461c      	mov	r4, r3
 800248c:	f7fe fbdc 	bl	8000c48 <__aeabi_d2f>
 8002490:	4601      	mov	r1, r0
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	1d23      	adds	r3, r4, #4
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	6019      	str	r1, [r3, #0]
		power_module->accumulator_idx = (power_module->accumulator_idx + 1) % ACCUMULATOR_SIZE; // Aggiorna l'indice ciclicamente
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	4b36      	ldr	r3, [pc, #216]	@ (8002580 <PowerModule_update_data+0x158>)
 80024a6:	fb83 1302 	smull	r1, r3, r3, r2
 80024aa:	10d9      	asrs	r1, r3, #3
 80024ac:	17d3      	asrs	r3, r2, #31
 80024ae:	1ac9      	subs	r1, r1, r3
 80024b0:	460b      	mov	r3, r1
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	1ad1      	subs	r1, r2, r3
 80024ba:	b2ca      	uxtb	r2, r1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

		// Calcola la media dei valori nell'accumulatore
		float sum = 0.0f;
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	e00f      	b.n	80024ee <PowerModule_update_data+0xc6>
			sum += power_module->accumulator[i];
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	3304      	adds	r3, #4
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80024e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e4:	edc7 7a03 	vstr	s15, [r7, #12]
		for (int i = 0; i < ACCUMULATOR_SIZE; i++) {
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	3301      	adds	r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b13      	cmp	r3, #19
 80024f2:	ddec      	ble.n	80024ce <PowerModule_update_data+0xa6>
		}
		power_module->voltage = sum / ACCUMULATOR_SIZE; // Aggiorna la tensione con la media
 80024f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80024f8:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80024fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	edc3 7a00 	vstr	s15, [r3]

		// Controlla i limiti
		if (power_module->voltage < power_module->warning_limit) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	ed93 7a00 	vldr	s14, [r3]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251a:	d527      	bpl.n	800256c <PowerModule_update_data+0x144>
			if (power_module->voltage < power_module->stop_limit) { // Se la tensione è sotto il limite di stop
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	ed93 7a00 	vldr	s14, [r3]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	edd3 7a02 	vldr	s15, [r3, #8]
 8002528:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002530:	d50e      	bpl.n	8002550 <PowerModule_update_data+0x128>
				if (!power_module->stop_issued) { // Se non è già stato emesso un stop
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	7b5b      	ldrb	r3, [r3, #13]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d118      	bne.n	800256c <PowerModule_update_data+0x144>
					MAX72_Stop_Changing_Data(&display, 1); // Ferma il cambio automatico dei dati
 800253a:	2101      	movs	r1, #1
 800253c:	4811      	ldr	r0, [pc, #68]	@ (8002584 <PowerModule_update_data+0x15c>)
 800253e:	f000 fbed 	bl	8002d1c <MAX72_Stop_Changing_Data>
					MAX72_Scroll_Start_IT("Critical Voltage!"); // Avvia lo scrolling del messaggio di stop
 8002542:	4811      	ldr	r0, [pc, #68]	@ (8002588 <PowerModule_update_data+0x160>)
 8002544:	f001 f856 	bl	80035f4 <MAX72_Scroll_Start_IT>
					power_module->stop_issued = 1; // Imposta il flag di stop emesso
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	735a      	strb	r2, [r3, #13]
 800254e:	e00d      	b.n	800256c <PowerModule_update_data+0x144>
				}
			} else if (!power_module->warning_issued) { // Se non è già stato emesso un avviso
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7b1b      	ldrb	r3, [r3, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <PowerModule_update_data+0x144>
				MAX72_Stop_Changing_Data(&display, 1); // Ferma il cambio automatico dei dati
 8002558:	2101      	movs	r1, #1
 800255a:	480a      	ldr	r0, [pc, #40]	@ (8002584 <PowerModule_update_data+0x15c>)
 800255c:	f000 fbde 	bl	8002d1c <MAX72_Stop_Changing_Data>
				MAX72_Scroll_Start_IT("Low Voltage!"); // Avvia lo scrolling del messaggio di avviso
 8002560:	480a      	ldr	r0, [pc, #40]	@ (800258c <PowerModule_update_data+0x164>)
 8002562:	f001 f847 	bl	80035f4 <MAX72_Scroll_Start_IT>
				power_module->warning_issued = 1; // Imposta il flag di avviso emesso
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	731a      	strb	r2, [r3, #12]
			}

		}
	}
	HAL_ADC_Stop(&power_module->hadc);  // Ferma l'ADC dopo la conversione
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3364      	adds	r3, #100	@ 0x64
 8002570:	4618      	mov	r0, r3
 8002572:	f001 fc13 	bl	8003d9c <HAL_ADC_Stop>
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bd90      	pop	{r4, r7, pc}
 800257e:	bf00      	nop
 8002580:	66666667 	.word	0x66666667
 8002584:	2000097c 	.word	0x2000097c
 8002588:	08009ce8 	.word	0x08009ce8
 800258c:	08009cfc 	.word	0x08009cfc
 8002590:	e147ae14 	.word	0xe147ae14
 8002594:	405c847a 	.word	0x405c847a
 8002598:	c540196f 	.word	0xc540196f
 800259c:	3fb12c42 	.word	0x3fb12c42

080025a0 <Robot_init>:
stepper_t stepper_l;

imu_t imu;
power_module_t power_module;

void Robot_init(){
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af02      	add	r7, sp, #8

	Encoder_init(&encoder_l, &htim3, &htim7, -1);
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025aa:	4a14      	ldr	r2, [pc, #80]	@ (80025fc <Robot_init+0x5c>)
 80025ac:	4914      	ldr	r1, [pc, #80]	@ (8002600 <Robot_init+0x60>)
 80025ae:	4815      	ldr	r0, [pc, #84]	@ (8002604 <Robot_init+0x64>)
 80025b0:	f7ff fe82 	bl	80022b8 <Encoder_init>
	Stepper_init(&stepper_l, &htim5, TIM_CHANNEL_1, &encoder_l, GPIOA, GPIO_PIN_4);
 80025b4:	2310      	movs	r3, #16
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <Robot_init+0x68>)
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <Robot_init+0x64>)
 80025be:	2200      	movs	r2, #0
 80025c0:	4912      	ldr	r1, [pc, #72]	@ (800260c <Robot_init+0x6c>)
 80025c2:	4813      	ldr	r0, [pc, #76]	@ (8002610 <Robot_init+0x70>)
 80025c4:	f000 f8ea 	bl	800279c <Stepper_init>

	Encoder_init(&encoder_r, &htim4, &htim7, 1);
 80025c8:	2301      	movs	r3, #1
 80025ca:	4a0c      	ldr	r2, [pc, #48]	@ (80025fc <Robot_init+0x5c>)
 80025cc:	4911      	ldr	r1, [pc, #68]	@ (8002614 <Robot_init+0x74>)
 80025ce:	4812      	ldr	r0, [pc, #72]	@ (8002618 <Robot_init+0x78>)
 80025d0:	f7ff fe72 	bl	80022b8 <Encoder_init>
	Stepper_init(&stepper_r, &htim2, TIM_CHANNEL_2, &encoder_r, GPIOB, GPIO_PIN_0);
 80025d4:	2301      	movs	r3, #1
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	4b10      	ldr	r3, [pc, #64]	@ (800261c <Robot_init+0x7c>)
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <Robot_init+0x78>)
 80025de:	2204      	movs	r2, #4
 80025e0:	490f      	ldr	r1, [pc, #60]	@ (8002620 <Robot_init+0x80>)
 80025e2:	4810      	ldr	r0, [pc, #64]	@ (8002624 <Robot_init+0x84>)
 80025e4:	f000 f8da 	bl	800279c <Stepper_init>

	// IMU Init to do
	PowerModule_init(&power_module, &hadc1);
 80025e8:	490f      	ldr	r1, [pc, #60]	@ (8002628 <Robot_init+0x88>)
 80025ea:	4810      	ldr	r0, [pc, #64]	@ (800262c <Robot_init+0x8c>)
 80025ec:	f7ff fea8 	bl	8002340 <PowerModule_init>

	MAX72_init(&display);
 80025f0:	480f      	ldr	r0, [pc, #60]	@ (8002630 <Robot_init+0x90>)
 80025f2:	f000 f947 	bl	8002884 <MAX72_init>
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200007bc 	.word	0x200007bc
 8002600:	2000069c 	.word	0x2000069c
 8002604:	20000894 	.word	0x20000894
 8002608:	40020000 	.word	0x40020000
 800260c:	2000072c 	.word	0x2000072c
 8002610:	200008a8 	.word	0x200008a8
 8002614:	200006e4 	.word	0x200006e4
 8002618:	2000085c 	.word	0x2000085c
 800261c:	40020400 	.word	0x40020400
 8002620:	20000654 	.word	0x20000654
 8002624:	20000870 	.word	0x20000870
 8002628:	200005ac 	.word	0x200005ac
 800262c:	200008cc 	.word	0x200008cc
 8002630:	2000097c 	.word	0x2000097c
 8002634:	00000000 	.word	0x00000000

08002638 <speed_control>:
#define KP 350 // Manually tuned proportional gain
#define KI 890 // MATLAB tuned integral gain

float freq = 0;

void speed_control(stepper_t *stepper){
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	Encoder_read(stepper->encoder);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fe25 	bl	8002294 <Encoder_read>

	float e = stepper->setpoint_speed - stepper->encoder->speed;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	edd3 7a02 	vldr	s15, [r3, #8]
 8002658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800265c:	edc7 7a03 	vstr	s15, [r7, #12]

	stepper->frequency += e / ANGLE_STEP; // Integral only controller
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd ff9f 	bl	80005a8 <__aeabi_f2d>
 800266a:	4604      	mov	r4, r0
 800266c:	460d      	mov	r5, r1
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f7fd ff9a 	bl	80005a8 <__aeabi_f2d>
 8002674:	a33f      	add	r3, pc, #252	@ (adr r3, 8002774 <speed_control+0x13c>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fe f917 	bl	80008ac <__aeabi_ddiv>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4620      	mov	r0, r4
 8002684:	4629      	mov	r1, r5
 8002686:	f7fd fe31 	bl	80002ec <__adddf3>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	f7fe fad9 	bl	8000c48 <__aeabi_d2f>
 8002696:	4602      	mov	r2, r0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	60da      	str	r2, [r3, #12]


//	stepper->frequency += KP*e + (KI * SAMPLING_PERIOD) * (e+stepper->last_error);
//	stepper->last_error = e;

	freq = stepper->frequency;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4a31      	ldr	r2, [pc, #196]	@ (8002768 <speed_control+0x130>)
 80026a2:	6013      	str	r3, [r2, #0]

	uint8_t sign = stepper->frequency > 0;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80026aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b2:	bfcc      	ite	gt
 80026b4:	2301      	movgt	r3, #1
 80026b6:	2300      	movle	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(stepper->DIR_PORT, stepper->DIR_PIN, (stepper->encoder->direction_invert > 0 ? sign : !sign));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	4618      	mov	r0, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	8c19      	ldrh	r1, [r3, #32]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	dc06      	bgt.n	80026e0 <speed_control+0xa8>
 80026d2:	7afb      	ldrb	r3, [r7, #11]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e000      	b.n	80026e2 <speed_control+0xaa>
 80026e0:	7afb      	ldrb	r3, [r7, #11]
 80026e2:	461a      	mov	r2, r3
 80026e4:	f002 f8fa 	bl	80048dc <HAL_GPIO_WritePin>

	stepper->tim->ARR = fabs(1/stepper->frequency)*HCLK-1; // period = (1+ARR)*(1+PSC)/HCLK;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80026ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f6:	eef0 7ae7 	vabs.f32	s15, s15
 80026fa:	ee17 0a90 	vmov	r0, s15
 80026fe:	f7fd ff53 	bl	80005a8 <__aeabi_f2d>
 8002702:	4604      	mov	r4, r0
 8002704:	460d      	mov	r5, r1
 8002706:	4b19      	ldr	r3, [pc, #100]	@ (800276c <speed_control+0x134>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd ff2a 	bl	8000564 <__aeabi_ui2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4620      	mov	r0, r4
 8002716:	4629      	mov	r1, r5
 8002718:	f7fd ff9e 	bl	8000658 <__aeabi_dmul>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <speed_control+0x138>)
 800272a:	f7fd fddd 	bl	80002e8 <__aeabi_dsub>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695c      	ldr	r4, [r3, #20]
 800273a:	f7fe fa65 	bl	8000c08 <__aeabi_d2uiz>
 800273e:	4603      	mov	r3, r0
 8002740:	62e3      	str	r3, [r4, #44]	@ 0x2c
	*stepper->CCR = (stepper->tim->ARR+1)/2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	0852      	lsrs	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
	stepper->tim->EGR = TIM_EGR_UG;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2201      	movs	r2, #1
 8002758:	615a      	str	r2, [r3, #20]
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bdb0      	pop	{r4, r5, r7, pc}
 8002762:	bf00      	nop
 8002764:	f3af 8000 	nop.w
 8002768:	20000978 	.word	0x20000978
 800276c:	20000858 	.word	0x20000858
 8002770:	3ff00000 	.word	0x3ff00000
 8002774:	e362eeeb 	.word	0xe362eeeb
 8002778:	3f5015bf 	.word	0x3f5015bf

0800277c <set_speed>:

void set_speed(stepper_t *stepper, float speed){
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	ed87 0a00 	vstr	s0, [r7]
	stepper->setpoint_speed = speed;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	609a      	str	r2, [r3, #8]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <Stepper_init>:

void Stepper_init(stepper_t *stepper, TIM_HandleTypeDef *htim, uint32_t tim_channel,
		encoder_t *encoder, GPIO_TypeDef *DIR_PORT, uint16_t DIR_PIN){
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
	stepper->angle_step = ANGLE_STEP;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4a34      	ldr	r2, [pc, #208]	@ (8002880 <Stepper_init+0xe4>)
 80027ae:	605a      	str	r2, [r3, #4]
	stepper->tim = htim->Instance;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	615a      	str	r2, [r3, #20]
	stepper->DIR_PORT = DIR_PORT;
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	61da      	str	r2, [r3, #28]
	stepper->DIR_PIN = DIR_PIN;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8bba      	ldrh	r2, [r7, #28]
 80027c2:	841a      	strh	r2, [r3, #32]
	switch (tim_channel){
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	d838      	bhi.n	800283c <Stepper_init+0xa0>
 80027ca:	a201      	add	r2, pc, #4	@ (adr r2, 80027d0 <Stepper_init+0x34>)
 80027cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d0:	08002805 	.word	0x08002805
 80027d4:	0800283d 	.word	0x0800283d
 80027d8:	0800283d 	.word	0x0800283d
 80027dc:	0800283d 	.word	0x0800283d
 80027e0:	08002813 	.word	0x08002813
 80027e4:	0800283d 	.word	0x0800283d
 80027e8:	0800283d 	.word	0x0800283d
 80027ec:	0800283d 	.word	0x0800283d
 80027f0:	08002821 	.word	0x08002821
 80027f4:	0800283d 	.word	0x0800283d
 80027f8:	0800283d 	.word	0x0800283d
 80027fc:	0800283d 	.word	0x0800283d
 8002800:	0800282f 	.word	0x0800282f
	case TIM_CHANNEL_1:
		stepper->CCR = &stepper->tim->CCR1;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	619a      	str	r2, [r3, #24]
		break;
 8002810:	e018      	b.n	8002844 <Stepper_init+0xa8>
	case TIM_CHANNEL_2:
		stepper->CCR = &stepper->tim->CCR2;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	619a      	str	r2, [r3, #24]
		break;
 800281e:	e011      	b.n	8002844 <Stepper_init+0xa8>
	case TIM_CHANNEL_3:
		stepper->CCR = &stepper->tim->CCR3;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	619a      	str	r2, [r3, #24]
		break;
 800282c:	e00a      	b.n	8002844 <Stepper_init+0xa8>
	case TIM_CHANNEL_4:
		stepper->CCR = &stepper->tim->CCR4;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	619a      	str	r2, [r3, #24]
		break;
 800283a:	e003      	b.n	8002844 <Stepper_init+0xa8>
	default:
		stepper->CCR = NULL;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
		break;
 8002842:	bf00      	nop
	}

	if (stepper->CCR != NULL)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <Stepper_init+0xb8>
		*stepper->CCR = 0; // Disattiva il PWM (duty cycle 0)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

	stepper->encoder = encoder;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	611a      	str	r2, [r3, #16]
	stepper->setpoint_speed = 0;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
	stepper->frequency = 0;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
	stepper->last_error = 0;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	3a80adff 	.word	0x3a80adff

08002884 <MAX72_init>:
    {0x0C, 0x01}, // Shutdown Register: normal operation
    {0x0F, 0x00}  // Display Test: off
};

void MAX72_init(display_t *display)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[8];
    for (uint8_t cmd=0; cmd<5; cmd++) {
 800288c:	2300      	movs	r3, #0
 800288e:	75fb      	strb	r3, [r7, #23]
 8002890:	e035      	b.n	80028fe <MAX72_init+0x7a>
        // riempi txBuf con 4 volte InitCommands[cmd]
        for (uint8_t dev=0; dev<4; dev++) {
 8002892:	2300      	movs	r3, #0
 8002894:	75bb      	strb	r3, [r7, #22]
 8002896:	e01a      	b.n	80028ce <MAX72_init+0x4a>
            txBuf[dev*2]   = InitCommands[cmd][0];
 8002898:	7dfa      	ldrb	r2, [r7, #23]
 800289a:	7dbb      	ldrb	r3, [r7, #22]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4929      	ldr	r1, [pc, #164]	@ (8002944 <MAX72_init+0xc0>)
 80028a0:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 80028a4:	3318      	adds	r3, #24
 80028a6:	443b      	add	r3, r7
 80028a8:	f803 2c0c 	strb.w	r2, [r3, #-12]
            txBuf[dev*2+1] = InitCommands[cmd][1];
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	7dba      	ldrb	r2, [r7, #22]
 80028b0:	0052      	lsls	r2, r2, #1
 80028b2:	3201      	adds	r2, #1
 80028b4:	4923      	ldr	r1, [pc, #140]	@ (8002944 <MAX72_init+0xc0>)
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	440b      	add	r3, r1
 80028ba:	7859      	ldrb	r1, [r3, #1]
 80028bc:	f102 0318 	add.w	r3, r2, #24
 80028c0:	443b      	add	r3, r7
 80028c2:	460a      	mov	r2, r1
 80028c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (uint8_t dev=0; dev<4; dev++) {
 80028c8:	7dbb      	ldrb	r3, [r7, #22]
 80028ca:	3301      	adds	r3, #1
 80028cc:	75bb      	strb	r3, [r7, #22]
 80028ce:	7dbb      	ldrb	r3, [r7, #22]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d9e1      	bls.n	8002898 <MAX72_init+0x14>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // CS
 80028d4:	2200      	movs	r2, #0
 80028d6:	2110      	movs	r1, #16
 80028d8:	481b      	ldr	r0, [pc, #108]	@ (8002948 <MAX72_init+0xc4>)
 80028da:	f001 ffff 	bl	80048dc <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 80028de:	f107 010c 	add.w	r1, r7, #12
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028e6:	2208      	movs	r2, #8
 80028e8:	4818      	ldr	r0, [pc, #96]	@ (800294c <MAX72_init+0xc8>)
 80028ea:	f002 feb4 	bl	8005656 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // CS
 80028ee:	2201      	movs	r2, #1
 80028f0:	2110      	movs	r1, #16
 80028f2:	4815      	ldr	r0, [pc, #84]	@ (8002948 <MAX72_init+0xc4>)
 80028f4:	f001 fff2 	bl	80048dc <HAL_GPIO_WritePin>
    for (uint8_t cmd=0; cmd<5; cmd++) {
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	3301      	adds	r3, #1
 80028fc:	75fb      	strb	r3, [r7, #23]
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d9c6      	bls.n	8002892 <MAX72_init+0xe>
    }

    display->data_count = 0; // Inizializza il numero di dati a 0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    display->current_index = 0; // Inizializza l'indice corrente a 0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    display->data_duration = 5; // Imposta la durata di visualizzazione a 5 secondi
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2205      	movs	r2, #5
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    display->change_enabled = 1; // Abilita il cambio automatico dei dati
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    display->update_enabled = 1; // Abilita l'aggiornamento automatico dei dati
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    display->last_change_time = HAL_GetTick(); // Inizializza il tempo dell'ultimo cambio a ora corrente
 800292c:	f001 f8f0 	bl	8003b10 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	649a      	str	r2, [r3, #72]	@ 0x48
    MAX72_Clear(); // Pulisce il display all'inizio
 8002936:	f000 f847 	bl	80029c8 <MAX72_Clear>
}
 800293a:	bf00      	nop
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	08009d5c 	.word	0x08009d5c
 8002948:	40020400 	.word	0x40020400
 800294c:	200005f8 	.word	0x200005f8

08002950 <MAX72_SendRow>:

void MAX72_SendRow(uint8_t row, uint8_t pattern[DEV_NUM])
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuf[8];
    // pattern[i] = dato per il modulo i
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 800295c:	2300      	movs	r3, #0
 800295e:	75fb      	strb	r3, [r7, #23]
 8002960:	e014      	b.n	800298c <MAX72_SendRow+0x3c>
        txBuf[dev*2]   = row;          // registro DIG[row]
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	3318      	adds	r3, #24
 8002968:	443b      	add	r3, r7
 800296a:	79fa      	ldrb	r2, [r7, #7]
 800296c:	f803 2c0c 	strb.w	r2, [r3, #-12]
        txBuf[dev*2+1] = pattern[dev]; // i‑esimo byte di dati
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	441a      	add	r2, r3
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	3301      	adds	r3, #1
 800297c:	7812      	ldrb	r2, [r2, #0]
 800297e:	3318      	adds	r3, #24
 8002980:	443b      	add	r3, r7
 8002982:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t dev=0; dev<DEV_NUM; dev++) {
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	3301      	adds	r3, #1
 800298a:	75fb      	strb	r3, [r7, #23]
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d9e7      	bls.n	8002962 <MAX72_SendRow+0x12>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002992:	2200      	movs	r2, #0
 8002994:	2110      	movs	r1, #16
 8002996:	480a      	ldr	r0, [pc, #40]	@ (80029c0 <MAX72_SendRow+0x70>)
 8002998:	f001 ffa0 	bl	80048dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 800299c:	f107 010c 	add.w	r1, r7, #12
 80029a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029a4:	2208      	movs	r2, #8
 80029a6:	4807      	ldr	r0, [pc, #28]	@ (80029c4 <MAX72_SendRow+0x74>)
 80029a8:	f002 fe55 	bl	8005656 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80029ac:	2201      	movs	r2, #1
 80029ae:	2110      	movs	r1, #16
 80029b0:	4803      	ldr	r0, [pc, #12]	@ (80029c0 <MAX72_SendRow+0x70>)
 80029b2:	f001 ff93 	bl	80048dc <HAL_GPIO_WritePin>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40020400 	.word	0x40020400
 80029c4:	200005f8 	.word	0x200005f8

080029c8 <MAX72_Clear>:

void MAX72_Clear(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
	uint8_t emptyPattern[4] = {0, 0, 0, 0};
 80029ce:	2300      	movs	r3, #0
 80029d0:	603b      	str	r3, [r7, #0]
	    for (uint8_t row=1; row<=8; row++) {
 80029d2:	2301      	movs	r3, #1
 80029d4:	71fb      	strb	r3, [r7, #7]
 80029d6:	e008      	b.n	80029ea <MAX72_Clear+0x22>
	        MAX72_SendRow(row, emptyPattern);
 80029d8:	463a      	mov	r2, r7
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ffb6 	bl	8002950 <MAX72_SendRow>
	    for (uint8_t row=1; row<=8; row++) {
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	3301      	adds	r3, #1
 80029e8:	71fb      	strb	r3, [r7, #7]
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d9f3      	bls.n	80029d8 <MAX72_Clear+0x10>
	    }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <MAX72_Add_Data>:

void MAX72_Add_Data(display_t *display, display_data_t *data) {
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
	if (display->data_count < MAX_DATA_LENGTH) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a0a:	2b07      	cmp	r3, #7
 8002a0c:	d813      	bhi.n	8002a36 <MAX72_Add_Data+0x3c>
		display->data[display->data_count] = *data; // Aggiungi i dati al display
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6839      	ldr	r1, [r7, #0]
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a22:	e883 0003 	stmia.w	r3, {r0, r1}
		display->data_count++; // Incrementa il conteggio dei dati
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	}

	if (display->data_count == 1) {
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d103      	bne.n	8002a48 <MAX72_Add_Data+0x4e>
		MAX72_Change_Data(display,1); // Se è il primo dato, aggiorna subito il display
 8002a40:	2101      	movs	r1, #1
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f900 	bl	8002c48 <MAX72_Change_Data>
	}
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <MAX72_Update_Data>:

void MAX72_Update_Data(display_t *display) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	if (display->data_count == 0 || !display->update_enabled) {
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80e3 	beq.w	8002c2a <MAX72_Update_Data+0x1da>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80dd 	beq.w	8002c2a <MAX72_Update_Data+0x1da>
		return; // Non ci sono dati da visualizzare
	}

	display_data_t *current_data = &display->data[display->current_index];
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

	switch (current_data->settings) {
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	791b      	ldrb	r3, [r3, #4]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	f200 80da 	bhi.w	8002c3c <MAX72_Update_Data+0x1ec>
 8002a88:	a201      	add	r2, pc, #4	@ (adr r2, 8002a90 <MAX72_Update_Data+0x40>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002aa1 	.word	0x08002aa1
 8002a94:	08002bbd 	.word	0x08002bbd
 8002a98:	08002be3 	.word	0x08002be3
 8002a9c:	08002bfd 	.word	0x08002bfd
		case PRINT_INT:
			switch(current_data->type) {
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	799b      	ldrb	r3, [r3, #6]
 8002aa4:	2b09      	cmp	r3, #9
 8002aa6:	f200 80c2 	bhi.w	8002c2e <MAX72_Update_Data+0x1de>
 8002aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab0 <MAX72_Update_Data+0x60>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002ad9 	.word	0x08002ad9
 8002ab4:	08002aed 	.word	0x08002aed
 8002ab8:	08002b03 	.word	0x08002b03
 8002abc:	08002b19 	.word	0x08002b19
 8002ac0:	08002b2f 	.word	0x08002b2f
 8002ac4:	08002b45 	.word	0x08002b45
 8002ac8:	08002b5d 	.word	0x08002b5d
 8002acc:	08002b75 	.word	0x08002b75
 8002ad0:	08002b89 	.word	0x08002b89
 8002ad4:	08002b9f 	.word	0x08002b9f
				case DISPLAY_TYPE_INT:
					MAX72_Print_Int(*(int *)current_data->data, current_data->string_settings);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	795b      	ldrb	r3, [r3, #5]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	f000 fbbb 	bl	8003260 <MAX72_Print_Int>
					break;
 8002aea:	e066      	b.n	8002bba <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT8:
					MAX72_Print_Int((int)*(uint8_t *)current_data->data, current_data->string_settings);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	795b      	ldrb	r3, [r3, #5]
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f000 fbb0 	bl	8003260 <MAX72_Print_Int>
					break;
 8002b00:	e05b      	b.n	8002bba <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT16:
					MAX72_Print_Int((int)*(uint16_t *)current_data->data, current_data->string_settings);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	795b      	ldrb	r3, [r3, #5]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4610      	mov	r0, r2
 8002b12:	f000 fba5 	bl	8003260 <MAX72_Print_Int>
					break;
 8002b16:	e050      	b.n	8002bba <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT32:
					MAX72_Print_Int((int)*(uint32_t *)current_data->data, current_data->string_settings);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	795b      	ldrb	r3, [r3, #5]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f000 fb9a 	bl	8003260 <MAX72_Print_Int>
					break;
 8002b2c:	e045      	b.n	8002bba <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_UINT64:
					MAX72_Print_Int((int)*(uint64_t *)current_data->data, current_data->string_settings);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	795b      	ldrb	r3, [r3, #5]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f000 fb8f 	bl	8003260 <MAX72_Print_Int>
					break;
 8002b42:	e03a      	b.n	8002bba <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT8:
					MAX72_Print_Int(*(int8_t *)current_data->data, current_data->string_settings);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f993 3000 	ldrsb.w	r3, [r3]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	795b      	ldrb	r3, [r3, #5]
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f000 fb83 	bl	8003260 <MAX72_Print_Int>
					break;
 8002b5a:	e02e      	b.n	8002bba <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT16:
					MAX72_Print_Int(*(int16_t *)current_data->data, current_data->string_settings);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b64:	461a      	mov	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	795b      	ldrb	r3, [r3, #5]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	f000 fb77 	bl	8003260 <MAX72_Print_Int>
					break;
 8002b72:	e022      	b.n	8002bba <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT32:
					MAX72_Print_Int(*(int32_t *)current_data->data, current_data->string_settings);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	795b      	ldrb	r3, [r3, #5]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f000 fb6d 	bl	8003260 <MAX72_Print_Int>
					break;
 8002b86:	e018      	b.n	8002bba <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_INT64:
					MAX72_Print_Int(*(int64_t *)current_data->data, current_data->string_settings);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	795b      	ldrb	r3, [r3, #5]
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f000 fb62 	bl	8003260 <MAX72_Print_Int>
					break;
 8002b9c:	e00d      	b.n	8002bba <MAX72_Update_Data+0x16a>
				case DISPLAY_TYPE_FLOAT:
					MAX72_Print_Int((int)*(float *)current_data->data, current_data->string_settings);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	edd3 7a00 	vldr	s15, [r3]
 8002ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	795b      	ldrb	r3, [r3, #5]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	ee17 0a90 	vmov	r0, s15
 8002bb4:	f000 fb54 	bl	8003260 <MAX72_Print_Int>
					break;
 8002bb8:	bf00      	nop
			}
			break;
 8002bba:	e038      	b.n	8002c2e <MAX72_Update_Data+0x1de>
		case PRINT_FLOAT:
			if (current_data->type == DISPLAY_TYPE_FLOAT) {
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	799b      	ldrb	r3, [r3, #6]
 8002bc0:	2b09      	cmp	r3, #9
 8002bc2:	d136      	bne.n	8002c32 <MAX72_Update_Data+0x1e2>
				MAX72_Print_Float(*(float *)current_data->data, current_data->float_decimals, current_data->string_settings);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	79da      	ldrb	r2, [r3, #7]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	795b      	ldrb	r3, [r3, #5]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bdc:	f000 fb9c 	bl	8003318 <MAX72_Print_Float>
			}
			break;
 8002be0:	e027      	b.n	8002c32 <MAX72_Update_Data+0x1e2>
		case PRINT_STRING:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	799b      	ldrb	r3, [r3, #6]
 8002be6:	2b0a      	cmp	r3, #10
 8002be8:	d125      	bne.n	8002c36 <MAX72_Update_Data+0x1e6>
				MAX72_Print_String((const char *)current_data->data, current_data->string_settings);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	795b      	ldrb	r3, [r3, #5]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f000 f8b3 	bl	8002d60 <MAX72_Print_String>
			}
			break;
 8002bfa:	e01c      	b.n	8002c36 <MAX72_Update_Data+0x1e6>
		case PRINT_SCROLL:
			if (current_data->type == DISPLAY_TYPE_STRING) {
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	799b      	ldrb	r3, [r3, #6]
 8002c00:	2b0a      	cmp	r3, #10
 8002c02:	d11a      	bne.n	8002c3a <MAX72_Update_Data+0x1ea>
				// update scroll_state.updated if text has changed
				if (strcmp(scroll_state.text, (const char *)current_data->data) != 0) {
 8002c04:	4b0f      	ldr	r3, [pc, #60]	@ (8002c44 <MAX72_Update_Data+0x1f4>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	f7fd fafe 	bl	8000210 <strcmp>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00f      	beq.n	8002c3a <MAX72_Update_Data+0x1ea>
					scroll_state.updated = 1; // Indica che il testo è stato aggiornato
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c44 <MAX72_Update_Data+0x1f4>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	739a      	strb	r2, [r3, #14]

					scroll_state.text = (const char *)current_data->data;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a07      	ldr	r2, [pc, #28]	@ (8002c44 <MAX72_Update_Data+0x1f4>)
 8002c26:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 8002c28:	e007      	b.n	8002c3a <MAX72_Update_Data+0x1ea>
		return; // Non ci sono dati da visualizzare
 8002c2a:	bf00      	nop
 8002c2c:	e006      	b.n	8002c3c <MAX72_Update_Data+0x1ec>
			break;
 8002c2e:	bf00      	nop
 8002c30:	e004      	b.n	8002c3c <MAX72_Update_Data+0x1ec>
			break;
 8002c32:	bf00      	nop
 8002c34:	e002      	b.n	8002c3c <MAX72_Update_Data+0x1ec>
			break;
 8002c36:	bf00      	nop
 8002c38:	e000      	b.n	8002c3c <MAX72_Update_Data+0x1ec>
			break;
 8002c3a:	bf00      	nop
	}
}
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200009e8 	.word	0x200009e8

08002c48 <MAX72_Change_Data>:

void MAX72_Change_Data(display_t *display, uint8_t force_change) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	70fb      	strb	r3, [r7, #3]
	if (display->data_count == 0 || (!display->change_enabled && !force_change)) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d055      	beq.n	8002d0a <MAX72_Change_Data+0xc2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <MAX72_Change_Data+0x26>
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d04d      	beq.n	8002d0a <MAX72_Change_Data+0xc2>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
	}

	uint32_t currentTime = HAL_GetTick();
 8002c6e:	f000 ff4f 	bl	8003b10 <HAL_GetTick>
 8002c72:	60f8      	str	r0, [r7, #12]
	if (!force_change && currentTime - display->last_change_time < (uint32_t)display->data_duration * 1000) {
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10d      	bne.n	8002c96 <MAX72_Change_Data+0x4e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	1ad2      	subs	r2, r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d33b      	bcc.n	8002d0e <MAX72_Change_Data+0xc6>
		return;
	}
	display->current_index = (display->current_index + 1) % display->data_count;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8002ca4:	fb93 f1f2 	sdiv	r1, r3, r2
 8002ca8:	fb01 f202 	mul.w	r2, r1, r2
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	display->last_change_time = currentTime;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	649a      	str	r2, [r3, #72]	@ 0x48

	if (display->data[display->current_index].settings == PRINT_SCROLL) {
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	791b      	ldrb	r3, [r3, #4]
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d113      	bne.n	8002cf6 <MAX72_Change_Data+0xae>
		if(!scroll_state.enabled || display->data_count > 1){
 8002cce:	4b12      	ldr	r3, [pc, #72]	@ (8002d18 <MAX72_Change_Data+0xd0>)
 8002cd0:	7b5b      	ldrb	r3, [r3, #13]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d004      	beq.n	8002ce0 <MAX72_Change_Data+0x98>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d910      	bls.n	8002d02 <MAX72_Change_Data+0xba>
		MAX72_Scroll_Start_IT((const char *)display->data[display->current_index].data);}
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fc80 	bl	80035f4 <MAX72_Scroll_Start_IT>
 8002cf4:	e005      	b.n	8002d02 <MAX72_Change_Data+0xba>
	} else if (scroll_state.enabled) {
 8002cf6:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <MAX72_Change_Data+0xd0>)
 8002cf8:	7b5b      	ldrb	r3, [r3, #13]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MAX72_Change_Data+0xba>
		MAX72_Scroll_Stop();
 8002cfe:	f000 fcdf 	bl	80036c0 <MAX72_Scroll_Stop>
	}

	MAX72_Update_Data(display); // Aggiorna i dati visualizzati)
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff fea4 	bl	8002a50 <MAX72_Update_Data>
 8002d08:	e002      	b.n	8002d10 <MAX72_Change_Data+0xc8>
		return; // Non ci sono dati da visualizzare o il cambio automatico è disabilitato
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <MAX72_Change_Data+0xc8>
		return;
 8002d0e:	bf00      	nop
}
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200009e8 	.word	0x200009e8

08002d1c <MAX72_Stop_Changing_Data>:

void MAX72_Stop_Changing_Data(display_t *display, uint8_t stop_update) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
	display->change_enabled = 0; // Disabilita il cambio automatico dei dati
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	if (stop_update) {
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <MAX72_Stop_Changing_Data+0x20>
		MAX72_Stop_Updating_Data(display); // Disabilita l'aggiornamento automatico dei dati
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f804 	bl	8002d44 <MAX72_Stop_Updating_Data>
	}
}
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <MAX72_Stop_Updating_Data>:
void MAX72_Resume_Changing_Data(display_t *display) {
	display->change_enabled = 1; // Abilita il cambio automatico dei dati
	MAX72_Resume_Updating_Data(display); // Assicurati che l'aggiornamento sia abilitato
}

void MAX72_Stop_Updating_Data(display_t *display) {
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	display->update_enabled = 0; // Disabilita l'aggiornamento automatico dei dati
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <MAX72_Print_String>:
//        HAL_Delay(500);
//    }
//}

void MAX72_Print_String(const char *str, uint8_t settings)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b094      	sub	sp, #80	@ 0x50
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	70fb      	strb	r3, [r7, #3]
    uint8_t len = strlen(str);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7fd faaf 	bl	80002d0 <strlen>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    if (settings == MINIDIGITS) {
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	f040 8119 	bne.w	8002fb2 <MAX72_Print_String+0x252>
    	char padded[8] = {0};
 8002d80:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
    	        // Calcola padding all'inizio (right align)
    	        uint8_t start = (len < 8) ? (8 - len) : 0;
 8002d8a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002d8e:	2b07      	cmp	r3, #7
 8002d90:	d805      	bhi.n	8002d9e <MAX72_Print_String+0x3e>
 8002d92:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002d96:	f1c3 0308 	rsb	r3, r3, #8
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	e000      	b.n	8002da0 <MAX72_Print_String+0x40>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    	        // Spazi iniziali
    	        for (uint8_t i = 0; i < start; i++)
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002daa:	e00b      	b.n	8002dc4 <MAX72_Print_String+0x64>
    	            padded[i] = ' ';
 8002dac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002db0:	3350      	adds	r3, #80	@ 0x50
 8002db2:	443b      	add	r3, r7
 8002db4:	2220      	movs	r2, #32
 8002db6:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < start; i++)
 8002dba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002dc4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8002dc8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3ed      	bcc.n	8002dac <MAX72_Print_String+0x4c>
    	        // Copia la stringa
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002dd6:	e012      	b.n	8002dfe <MAX72_Print_String+0x9e>
    	            padded[start + i] = str[i];
 8002dd8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	441a      	add	r2, r3
 8002de0:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8002de4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002de8:	440b      	add	r3, r1
 8002dea:	7812      	ldrb	r2, [r2, #0]
 8002dec:	3350      	adds	r3, #80	@ 0x50
 8002dee:	443b      	add	r3, r7
 8002df0:	f803 2c20 	strb.w	r2, [r3, #-32]
    	        for (uint8_t i = 0; i < 8 && i < len; i++)
 8002df4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002dfe:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002e02:	2b07      	cmp	r3, #7
 8002e04:	d805      	bhi.n	8002e12 <MAX72_Print_String+0xb2>
 8002e06:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8002e0a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d3e2      	bcc.n	8002dd8 <MAX72_Print_String+0x78>

        char reversed[8];
        for (uint8_t i = 0; i < 8; i++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002e18:	e012      	b.n	8002e40 <MAX72_Print_String+0xe0>
            reversed[i] = padded[7 - i];
 8002e1a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e1e:	f1c3 0207 	rsb	r2, r3, #7
 8002e22:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e26:	3250      	adds	r2, #80	@ 0x50
 8002e28:	443a      	add	r2, r7
 8002e2a:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8002e2e:	3350      	adds	r3, #80	@ 0x50
 8002e30:	443b      	add	r3, r7
 8002e32:	f803 2c28 	strb.w	r2, [r3, #-40]
        for (uint8_t i = 0; i < 8; i++)
 8002e36:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8002e40:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e44:	2b07      	cmp	r3, #7
 8002e46:	d9e8      	bls.n	8002e1a <MAX72_Print_String+0xba>

        for (uint8_t row = 0; row < 8; row++) {
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8002e4e:	e0aa      	b.n	8002fa6 <MAX72_Print_String+0x246>
            uint8_t pat[4] = {0};
 8002e50:	2300      	movs	r3, #0
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24

            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8002e5a:	e090      	b.n	8002f7e <MAX72_Print_String+0x21e>
                uint8_t c1 = reversed[byte_idx * 2];
 8002e5c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	3350      	adds	r3, #80	@ 0x50
 8002e64:	443b      	add	r3, r7
 8002e66:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e6a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                uint8_t c2 = reversed[byte_idx * 2 + 1];
 8002e6e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	3301      	adds	r3, #1
 8002e76:	3350      	adds	r3, #80	@ 0x50
 8002e78:	443b      	add	r3, r7
 8002e7a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e7e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                uint8_t char1_pattern = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                uint8_t char2_pattern = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                if (c1 >= '0' && c1 <= '9')
 8002e8e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002e92:	2b2f      	cmp	r3, #47	@ 0x2f
 8002e94:	d913      	bls.n	8002ebe <MAX72_Print_String+0x15e>
 8002e96:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002e9a:	2b39      	cmp	r3, #57	@ 0x39
 8002e9c:	d80f      	bhi.n	8002ebe <MAX72_Print_String+0x15e>
                    char1_pattern = DIGITS[c1 - '0' + 2][row] & 0x07;
 8002e9e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002ea2:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 8002ea6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002eaa:	49cd      	ldr	r1, [pc, #820]	@ (80031e0 <MAX72_Print_String+0x480>)
 8002eac:	00d2      	lsls	r2, r2, #3
 8002eae:	440a      	add	r2, r1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8002ebc:	e019      	b.n	8002ef2 <MAX72_Print_String+0x192>
                else if (c1 == '-')
 8002ebe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002ec2:	2b2d      	cmp	r3, #45	@ 0x2d
 8002ec4:	d109      	bne.n	8002eda <MAX72_Print_String+0x17a>
                    char1_pattern = DIGITS[1][row] & 0x07;
 8002ec6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002eca:	4ac5      	ldr	r2, [pc, #788]	@ (80031e0 <MAX72_Print_String+0x480>)
 8002ecc:	4413      	add	r3, r2
 8002ece:	7a1b      	ldrb	r3, [r3, #8]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8002ed8:	e00b      	b.n	8002ef2 <MAX72_Print_String+0x192>
                else if (c1 == '.')
 8002eda:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002ede:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ee0:	d107      	bne.n	8002ef2 <MAX72_Print_String+0x192>
					char1_pattern = DIGITS[0][row] & 0x07;
 8002ee2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002ee6:	4abe      	ldr	r2, [pc, #760]	@ (80031e0 <MAX72_Print_String+0x480>)
 8002ee8:	5cd3      	ldrb	r3, [r2, r3]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

                if (c2 >= '0' && c2 <= '9')
 8002ef2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002ef6:	2b2f      	cmp	r3, #47	@ 0x2f
 8002ef8:	d913      	bls.n	8002f22 <MAX72_Print_String+0x1c2>
 8002efa:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002efe:	2b39      	cmp	r3, #57	@ 0x39
 8002f00:	d80f      	bhi.n	8002f22 <MAX72_Print_String+0x1c2>
                    char2_pattern = DIGITS[c2 - '0' + 2][row] & 0x07;
 8002f02:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002f06:	f1a3 022e 	sub.w	r2, r3, #46	@ 0x2e
 8002f0a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002f0e:	49b4      	ldr	r1, [pc, #720]	@ (80031e0 <MAX72_Print_String+0x480>)
 8002f10:	00d2      	lsls	r2, r2, #3
 8002f12:	440a      	add	r2, r1
 8002f14:	4413      	add	r3, r2
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8002f20:	e019      	b.n	8002f56 <MAX72_Print_String+0x1f6>
                else if (c2 == '-')
 8002f22:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002f26:	2b2d      	cmp	r3, #45	@ 0x2d
 8002f28:	d109      	bne.n	8002f3e <MAX72_Print_String+0x1de>
                    char2_pattern = DIGITS[1][row] & 0x07;
 8002f2a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002f2e:	4aac      	ldr	r2, [pc, #688]	@ (80031e0 <MAX72_Print_String+0x480>)
 8002f30:	4413      	add	r3, r2
 8002f32:	7a1b      	ldrb	r3, [r3, #8]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8002f3c:	e00b      	b.n	8002f56 <MAX72_Print_String+0x1f6>
                else if (c2 == '.')
 8002f3e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002f42:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f44:	d107      	bne.n	8002f56 <MAX72_Print_String+0x1f6>
                	char2_pattern = DIGITS[0][row] & 0x07;
 8002f46:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002f4a:	4aa5      	ldr	r2, [pc, #660]	@ (80031e0 <MAX72_Print_String+0x480>)
 8002f4c:	5cd3      	ldrb	r3, [r2, r3]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

                pat[byte_idx] = (char1_pattern << 4) | char2_pattern;
 8002f56:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	b25a      	sxtb	r2, r3
 8002f5e:	f997 3049 	ldrsb.w	r3, [r7, #73]	@ 0x49
 8002f62:	4313      	orrs	r3, r2
 8002f64:	b25a      	sxtb	r2, r3
 8002f66:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	3350      	adds	r3, #80	@ 0x50
 8002f6e:	443b      	add	r3, r7
 8002f70:	f803 2c2c 	strb.w	r2, [r3, #-44]
            for (uint8_t byte_idx = 0; byte_idx < 4; byte_idx++) {
 8002f74:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8002f7e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	f67f af6a 	bls.w	8002e5c <MAX72_Print_String+0xfc>
            }

            MAX72_SendRow(row + 1, pat);
 8002f88:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fcda 	bl	8002950 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8002f9c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8002fa6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002faa:	2b07      	cmp	r3, #7
 8002fac:	f67f af50 	bls.w	8002e50 <MAX72_Print_String+0xf0>
            for (uint8_t i = 0; i < 4; i++)
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
            MAX72_SendRow(row + 1, pat);
        }
    }
}
 8002fb0:	e150      	b.n	8003254 <MAX72_Print_String+0x4f4>
    else if (settings == FLOAT) {
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	f040 80d1 	bne.w	800315c <MAX72_Print_String+0x3fc>
        char reversed[4] = {0};
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
        int8_t dot_pos = -1;
 8002fbe:	23ff      	movs	r3, #255	@ 0xff
 8002fc0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < len; i++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002fca:	e010      	b.n	8002fee <MAX72_Print_String+0x28e>
            if (str[i] == '.') { dot_pos = i; break; }
 8002fcc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fd8:	d104      	bne.n	8002fe4 <MAX72_Print_String+0x284>
 8002fda:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002fde:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8002fe2:	e00a      	b.n	8002ffa <MAX72_Print_String+0x29a>
        for (uint8_t i = 0; i < len; i++)
 8002fe4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002fee:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8002ff2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d3e8      	bcc.n	8002fcc <MAX72_Print_String+0x26c>
        char no_dot_str[5] = {0};
 8002ffa:	f107 0318 	add.w	r3, r7, #24
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	711a      	strb	r2, [r3, #4]
        uint8_t no_dot_len = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 800300a:	2300      	movs	r3, #0
 800300c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003010:	e019      	b.n	8003046 <MAX72_Print_String+0x2e6>
            if (str[i] != '.') no_dot_str[no_dot_len++] = str[i];
 8003012:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b2e      	cmp	r3, #46	@ 0x2e
 800301e:	d00d      	beq.n	800303c <MAX72_Print_String+0x2dc>
 8003020:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	441a      	add	r2, r3
 8003028:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800302c:	1c59      	adds	r1, r3, #1
 800302e:	f887 1046 	strb.w	r1, [r7, #70]	@ 0x46
 8003032:	7812      	ldrb	r2, [r2, #0]
 8003034:	3350      	adds	r3, #80	@ 0x50
 8003036:	443b      	add	r3, r7
 8003038:	f803 2c38 	strb.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < len && no_dot_len < 4; i++)
 800303c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003040:	3301      	adds	r3, #1
 8003042:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003046:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800304a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800304e:	429a      	cmp	r2, r3
 8003050:	d203      	bcs.n	800305a <MAX72_Print_String+0x2fa>
 8003052:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003056:	2b03      	cmp	r3, #3
 8003058:	d9db      	bls.n	8003012 <MAX72_Print_String+0x2b2>
        dot_pos = no_dot_len - dot_pos - 1;
 800305a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800305e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        for (uint8_t i = 0; i < 4; i++)
 800306e:	2300      	movs	r3, #0
 8003070:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8003074:	e01c      	b.n	80030b0 <MAX72_Print_String+0x350>
            reversed[i] = (i < no_dot_len) ? no_dot_str[no_dot_len - 1 - i] : ' ';
 8003076:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800307a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800307e:	429a      	cmp	r2, r3
 8003080:	d20a      	bcs.n	8003098 <MAX72_Print_String+0x338>
 8003082:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003086:	1e5a      	subs	r2, r3, #1
 8003088:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	3350      	adds	r3, #80	@ 0x50
 8003090:	443b      	add	r3, r7
 8003092:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8003096:	e000      	b.n	800309a <MAX72_Print_String+0x33a>
 8003098:	2220      	movs	r2, #32
 800309a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800309e:	3350      	adds	r3, #80	@ 0x50
 80030a0:	443b      	add	r3, r7
 80030a2:	f803 2c30 	strb.w	r2, [r3, #-48]
        for (uint8_t i = 0; i < 4; i++)
 80030a6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80030aa:	3301      	adds	r3, #1
 80030ac:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80030b0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d9de      	bls.n	8003076 <MAX72_Print_String+0x316>
        for (uint8_t row = 0; row < 8; row++) {
 80030b8:	2300      	movs	r3, #0
 80030ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030be:	e048      	b.n	8003152 <MAX72_Print_String+0x3f2>
            for (uint8_t i = 0; i < 4; i++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80030c6:	e01e      	b.n	8003106 <MAX72_Print_String+0x3a6>
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 80030c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80030cc:	3350      	adds	r3, #80	@ 0x50
 80030ce:	443b      	add	r3, r7
 80030d0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80030d4:	f1a3 0220 	sub.w	r2, r3, #32
 80030d8:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 80030dc:	4841      	ldr	r0, [pc, #260]	@ (80031e4 <MAX72_Print_String+0x484>)
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	4403      	add	r3, r0
 80030e6:	440b      	add	r3, r1
 80030e8:	3301      	adds	r3, #1
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80030f0:	00d2      	lsls	r2, r2, #3
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	3350      	adds	r3, #80	@ 0x50
 80030f6:	443b      	add	r3, r7
 80030f8:	f803 2c3c 	strb.w	r2, [r3, #-60]
            for (uint8_t i = 0; i < 4; i++)
 80030fc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003100:	3301      	adds	r3, #1
 8003102:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003106:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800310a:	2b03      	cmp	r3, #3
 800310c:	d9dc      	bls.n	80030c8 <MAX72_Print_String+0x368>
            if (row == 0) pat[dot_pos] |= 0b010;
 800310e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10e      	bne.n	8003134 <MAX72_Print_String+0x3d4>
 8003116:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 800311a:	3350      	adds	r3, #80	@ 0x50
 800311c:	443b      	add	r3, r7
 800311e:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 8003122:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8003126:	f042 0202 	orr.w	r2, r2, #2
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	3350      	adds	r3, #80	@ 0x50
 800312e:	443b      	add	r3, r7
 8003130:	f803 2c3c 	strb.w	r2, [r3, #-60]
            MAX72_SendRow(row + 1, pat);
 8003134:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003138:	3301      	adds	r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f107 0214 	add.w	r2, r7, #20
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fc04 	bl	8002950 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8003148:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800314c:	3301      	adds	r3, #1
 800314e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003152:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003156:	2b07      	cmp	r3, #7
 8003158:	d9b2      	bls.n	80030c0 <MAX72_Print_String+0x360>
}
 800315a:	e07b      	b.n	8003254 <MAX72_Print_String+0x4f4>
        char reversed[4] = {0};
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 8003160:	2300      	movs	r3, #0
 8003162:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8003166:	e014      	b.n	8003192 <MAX72_Print_String+0x432>
            reversed[i] = str[len - 1 - i];
 8003168:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800316c:	1e5a      	subs	r2, r3, #1
 800316e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	461a      	mov	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	441a      	add	r2, r3
 800317a:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800317e:	7812      	ldrb	r2, [r2, #0]
 8003180:	3350      	adds	r3, #80	@ 0x50
 8003182:	443b      	add	r3, r7
 8003184:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = 0; i < 4 && i < len; i++)
 8003188:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800318c:	3301      	adds	r3, #1
 800318e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8003192:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8003196:	2b03      	cmp	r3, #3
 8003198:	d805      	bhi.n	80031a6 <MAX72_Print_String+0x446>
 800319a:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800319e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d3e0      	bcc.n	8003168 <MAX72_Print_String+0x408>
        for (uint8_t i = len; i < 4; i++)
 80031a6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80031aa:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80031ae:	e00b      	b.n	80031c8 <MAX72_Print_String+0x468>
            reversed[i] = ' ';
 80031b0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80031b4:	3350      	adds	r3, #80	@ 0x50
 80031b6:	443b      	add	r3, r7
 80031b8:	2220      	movs	r2, #32
 80031ba:	f803 2c40 	strb.w	r2, [r3, #-64]
        for (uint8_t i = len; i < 4; i++)
 80031be:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80031c2:	3301      	adds	r3, #1
 80031c4:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80031c8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d9ef      	bls.n	80031b0 <MAX72_Print_String+0x450>
        for (uint8_t row = 0; row < 8; row++) {
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80031d6:	e039      	b.n	800324c <MAX72_Print_String+0x4ec>
            for (uint8_t i = 0; i < 4; i++)
 80031d8:	2300      	movs	r3, #0
 80031da:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80031de:	e022      	b.n	8003226 <MAX72_Print_String+0x4c6>
 80031e0:	20000360 	.word	0x20000360
 80031e4:	20000008 	.word	0x20000008
                pat[i] = LETTERS[reversed[i] - ' '].value[row] << 3;
 80031e8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80031ec:	3350      	adds	r3, #80	@ 0x50
 80031ee:	443b      	add	r3, r7
 80031f0:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80031f4:	f1a3 0220 	sub.w	r2, r3, #32
 80031f8:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 80031fc:	4817      	ldr	r0, [pc, #92]	@ (800325c <MAX72_Print_String+0x4fc>)
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	4403      	add	r3, r0
 8003206:	440b      	add	r3, r1
 8003208:	3301      	adds	r3, #1
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003210:	00d2      	lsls	r2, r2, #3
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	3350      	adds	r3, #80	@ 0x50
 8003216:	443b      	add	r3, r7
 8003218:	f803 2c44 	strb.w	r2, [r3, #-68]
            for (uint8_t i = 0; i < 4; i++)
 800321c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003220:	3301      	adds	r3, #1
 8003222:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8003226:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800322a:	2b03      	cmp	r3, #3
 800322c:	d9dc      	bls.n	80031e8 <MAX72_Print_String+0x488>
            MAX72_SendRow(row + 1, pat);
 800322e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003232:	3301      	adds	r3, #1
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f107 020c 	add.w	r2, r7, #12
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fb87 	bl	8002950 <MAX72_SendRow>
        for (uint8_t row = 0; row < 8; row++) {
 8003242:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003246:	3301      	adds	r3, #1
 8003248:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800324c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003250:	2b07      	cmp	r3, #7
 8003252:	d9c1      	bls.n	80031d8 <MAX72_Print_String+0x478>
}
 8003254:	bf00      	nop
 8003256:	3750      	adds	r7, #80	@ 0x50
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20000008 	.word	0x20000008

08003260 <MAX72_Print_Int>:


void MAX72_Print_Int(int num, uint8_t minidigits)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
    char sign = num < 0 ? '-' : '\0';
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	da01      	bge.n	8003276 <MAX72_Print_Int+0x16>
 8003272:	232d      	movs	r3, #45	@ 0x2d
 8003274:	e000      	b.n	8003278 <MAX72_Print_Int+0x18>
 8003276:	2300      	movs	r3, #0
 8003278:	74fb      	strb	r3, [r7, #19]
    unsigned u = (num < 0) ? (unsigned) (-num) : (unsigned) num;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	bfb8      	it	lt
 8003280:	425b      	neglt	r3, r3
 8003282:	617b      	str	r3, [r7, #20]

    char str[9]; // 8 digits + null terminator
    if (minidigits) {
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <MAX72_Print_Int+0x46>
        // segno + 7 cifre (tot 8): taglia alle ultime 7
        u %= sign=='-'?10000000u:100000000u;
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	2b2d      	cmp	r3, #45	@ 0x2d
 800328e:	d101      	bne.n	8003294 <MAX72_Print_Int+0x34>
 8003290:	4b1d      	ldr	r3, [pc, #116]	@ (8003308 <MAX72_Print_Int+0xa8>)
 8003292:	e000      	b.n	8003296 <MAX72_Print_Int+0x36>
 8003294:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <MAX72_Print_Int+0xac>)
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	fbb2 f1f3 	udiv	r1, r2, r3
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	e00e      	b.n	80032c4 <MAX72_Print_Int+0x64>
    } else {
        // segno + 3 cifre (tot 4): taglia alle ultime 3
        u %= sign=='-'?1000u:10000u;
 80032a6:	7cfb      	ldrb	r3, [r7, #19]
 80032a8:	2b2d      	cmp	r3, #45	@ 0x2d
 80032aa:	d102      	bne.n	80032b2 <MAX72_Print_Int+0x52>
 80032ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032b0:	e001      	b.n	80032b6 <MAX72_Print_Int+0x56>
 80032b2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	617b      	str	r3, [r7, #20]
    }

    if (sign == '-'){
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	2b2d      	cmp	r3, #45	@ 0x2d
 80032c8:	d107      	bne.n	80032da <MAX72_Print_Int+0x7a>
    	snprintf(str, sizeof(str), "-%u", u);
 80032ca:	f107 0008 	add.w	r0, r7, #8
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003310 <MAX72_Print_Int+0xb0>)
 80032d2:	2109      	movs	r1, #9
 80032d4:	f004 faec 	bl	80078b0 <sniprintf>
 80032d8:	e006      	b.n	80032e8 <MAX72_Print_Int+0x88>
    } else {
    	snprintf(str, sizeof(str), "%u", u);
 80032da:	f107 0008 	add.w	r0, r7, #8
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003314 <MAX72_Print_Int+0xb4>)
 80032e2:	2109      	movs	r1, #9
 80032e4:	f004 fae4 	bl	80078b0 <sniprintf>
    }


    MAX72_Print_String(str, minidigits ? MINIDIGITS : NO_SETTINGS);
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MAX72_Print_Int+0x92>
 80032ee:	2202      	movs	r2, #2
 80032f0:	e000      	b.n	80032f4 <MAX72_Print_Int+0x94>
 80032f2:	2200      	movs	r2, #0
 80032f4:	f107 0308 	add.w	r3, r7, #8
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fd30 	bl	8002d60 <MAX72_Print_String>
//    MAX72_Print_String(str);
}
 8003300:	bf00      	nop
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	00989680 	.word	0x00989680
 800330c:	05f5e100 	.word	0x05f5e100
 8003310:	08009d0c 	.word	0x08009d0c
 8003314:	08009d10 	.word	0x08009d10

08003318 <MAX72_Print_Float>:

void MAX72_Print_Float(float num, uint8_t decimals, uint8_t minidigits) {
 8003318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800331c:	b095      	sub	sp, #84	@ 0x54
 800331e:	af04      	add	r7, sp, #16
 8003320:	ed87 0a01 	vstr	s0, [r7, #4]
 8003324:	4603      	mov	r3, r0
 8003326:	460a      	mov	r2, r1
 8003328:	70fb      	strb	r3, [r7, #3]
 800332a:	4613      	mov	r3, r2
 800332c:	70bb      	strb	r3, [r7, #2]
 800332e:	466b      	mov	r3, sp
 8003330:	461e      	mov	r6, r3
    uint8_t max_chars = 8;
 8003332:	2308      	movs	r3, #8
 8003334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char str[max_chars + 1]; // +1 for null terminator
 8003338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800333c:	1c59      	adds	r1, r3, #1
 800333e:	1e4b      	subs	r3, r1, #1
 8003340:	623b      	str	r3, [r7, #32]
 8003342:	460a      	mov	r2, r1
 8003344:	2300      	movs	r3, #0
 8003346:	4690      	mov	r8, r2
 8003348:	4699      	mov	r9, r3
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800335a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800335e:	460a      	mov	r2, r1
 8003360:	2300      	movs	r3, #0
 8003362:	4614      	mov	r4, r2
 8003364:	461d      	mov	r5, r3
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	00eb      	lsls	r3, r5, #3
 8003370:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003374:	00e2      	lsls	r2, r4, #3
 8003376:	460b      	mov	r3, r1
 8003378:	3307      	adds	r3, #7
 800337a:	08db      	lsrs	r3, r3, #3
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	ebad 0d03 	sub.w	sp, sp, r3
 8003382:	ab04      	add	r3, sp, #16
 8003384:	3300      	adds	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]

    // Gestione del segno
    char sign = (num < 0) ? '-' : '\0';
 8003388:	edd7 7a01 	vldr	s15, [r7, #4]
 800338c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003394:	d501      	bpl.n	800339a <MAX72_Print_Float+0x82>
 8003396:	232d      	movs	r3, #45	@ 0x2d
 8003398:	e000      	b.n	800339c <MAX72_Print_Float+0x84>
 800339a:	2300      	movs	r3, #0
 800339c:	76fb      	strb	r3, [r7, #27]
    float abs_num = (num < 0) ? -num : num;
 800339e:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033aa:	d504      	bpl.n	80033b6 <MAX72_Print_Float+0x9e>
 80033ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80033b0:	eef1 7a67 	vneg.f32	s15, s15
 80033b4:	e001      	b.n	80033ba <MAX72_Print_Float+0xa2>
 80033b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ba:	edc7 7a05 	vstr	s15, [r7, #20]

    // Separa parte intera e decimale
    unsigned int_part = (unsigned) abs_num;
 80033be:	edd7 7a05 	vldr	s15, [r7, #20]
 80033c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033c6:	ee17 3a90 	vmov	r3, s15
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float frac_part = abs_num - int_part;
 80033cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80033da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033de:	edc7 7a04 	vstr	s15, [r7, #16]


    // Calcola quanti caratteri servono per la parte intera
    uint8_t int_digits = (int_part == 0) ? 0 : 1;
 80033e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf14      	ite	ne
 80033e8:	2301      	movne	r3, #1
 80033ea:	2300      	moveq	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    unsigned temp = int_part;
 80033f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f4:	637b      	str	r3, [r7, #52]	@ 0x34
    while (temp >= 10) {
 80033f6:	e00a      	b.n	800340e <MAX72_Print_Float+0xf6>
        temp /= 10;
 80033f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fa:	4a5d      	ldr	r2, [pc, #372]	@ (8003570 <MAX72_Print_Float+0x258>)
 80033fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003400:	08db      	lsrs	r3, r3, #3
 8003402:	637b      	str	r3, [r7, #52]	@ 0x34
        int_digits++;
 8003404:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003408:	3301      	adds	r3, #1
 800340a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    while (temp >= 10) {
 800340e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003410:	2b09      	cmp	r3, #9
 8003412:	d8f1      	bhi.n	80033f8 <MAX72_Print_Float+0xe0>
    }

    // Calcola spazio disponibile per decimali
    uint8_t available_for_decimals = max_chars - (sign != '\0' ? 1 : 0) - int_digits - 1; // -1 per il punto decimale
 8003414:	7efb      	ldrb	r3, [r7, #27]
 8003416:	2b00      	cmp	r3, #0
 8003418:	bf14      	ite	ne
 800341a:	2301      	movne	r3, #1
 800341c:	2300      	moveq	r3, #0
 800341e:	b2db      	uxtb	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	b2da      	uxtb	r2, r3
 800342a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]

    // Limita i decimali al minimo tra quelli richiesti e quelli disponibili
    uint8_t actual_decimals = (decimals < available_for_decimals) ? decimals : available_for_decimals;
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	4293      	cmp	r3, r2
 800343c:	bf28      	it	cs
 800343e:	4613      	movcs	r3, r2
 8003440:	73bb      	strb	r3, [r7, #14]

    // Se non c'è spazio nemmeno per un decimale, mostra solo la parte intera
    if (available_for_decimals == 0) {
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d11b      	bne.n	8003480 <MAX72_Print_Float+0x168>
        if (int_part == 0) {
 8003448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <MAX72_Print_Float+0x144>
            snprintf(str, sizeof(str), "0");
 800344e:	460b      	mov	r3, r1
 8003450:	4a48      	ldr	r2, [pc, #288]	@ (8003574 <MAX72_Print_Float+0x25c>)
 8003452:	4619      	mov	r1, r3
 8003454:	69f8      	ldr	r0, [r7, #28]
 8003456:	f004 fa2b 	bl	80078b0 <sniprintf>
 800345a:	e079      	b.n	8003550 <MAX72_Print_Float+0x238>
        } else {
            if (sign != '\0') {
 800345c:	7efb      	ldrb	r3, [r7, #27]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <MAX72_Print_Float+0x15c>
                snprintf(str, sizeof(str), "%c%u", sign, int_part);
 8003462:	7efa      	ldrb	r2, [r7, #27]
 8003464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	4a43      	ldr	r2, [pc, #268]	@ (8003578 <MAX72_Print_Float+0x260>)
 800346c:	69f8      	ldr	r0, [r7, #28]
 800346e:	f004 fa1f 	bl	80078b0 <sniprintf>
 8003472:	e06d      	b.n	8003550 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u", int_part);
 8003474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003476:	4a41      	ldr	r2, [pc, #260]	@ (800357c <MAX72_Print_Float+0x264>)
 8003478:	69f8      	ldr	r0, [r7, #28]
 800347a:	f004 fa19 	bl	80078b0 <sniprintf>
 800347e:	e067      	b.n	8003550 <MAX72_Print_Float+0x238>
            }
        }
    } else {
        // Calcola il moltiplicatore per i decimali
        unsigned multiplier = 1;
 8003480:	2301      	movs	r3, #1
 8003482:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8003484:	2300      	movs	r3, #0
 8003486:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800348a:	e00a      	b.n	80034a2 <MAX72_Print_Float+0x18a>
            multiplier *= 10;
 800348c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t i = 0; i < actual_decimals; i++) {
 8003498:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800349c:	3301      	adds	r3, #1
 800349e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80034a2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80034a6:	7bbb      	ldrb	r3, [r7, #14]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d3ef      	bcc.n	800348c <MAX72_Print_Float+0x174>
        }

        // Arrotonda la parte frazionaria
        unsigned frac_digits = (unsigned) (frac_part * multiplier + 0.5f);
 80034ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80034c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ca:	ee17 3a90 	vmov	r3, s15
 80034ce:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Gestisce il caso di overflow nell'arrotondamento
        if (frac_digits >= multiplier) {
 80034d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d304      	bcc.n	80034e2 <MAX72_Print_Float+0x1ca>
            int_part++;
 80034d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034da:	3301      	adds	r3, #1
 80034dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
            frac_digits = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Costruisce la stringa
        if (int_part == 0) {
 80034e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d118      	bne.n	800351a <MAX72_Print_Float+0x202>
            // Omette la parte intera se è 0
            if (sign != '\0') {
 80034e8:	7efb      	ldrb	r3, [r7, #27]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00c      	beq.n	8003508 <MAX72_Print_Float+0x1f0>
                snprintf(str, sizeof(str), "%c.%0*u", sign, actual_decimals, frac_digits);
 80034ee:	4608      	mov	r0, r1
 80034f0:	7ef9      	ldrb	r1, [r7, #27]
 80034f2:	7bbb      	ldrb	r3, [r7, #14]
 80034f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034f6:	9201      	str	r2, [sp, #4]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	460b      	mov	r3, r1
 80034fc:	4a20      	ldr	r2, [pc, #128]	@ (8003580 <MAX72_Print_Float+0x268>)
 80034fe:	4601      	mov	r1, r0
 8003500:	69f8      	ldr	r0, [r7, #28]
 8003502:	f004 f9d5 	bl	80078b0 <sniprintf>
 8003506:	e023      	b.n	8003550 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), ".%0*u", actual_decimals, frac_digits);
 8003508:	7bba      	ldrb	r2, [r7, #14]
 800350a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	4a1c      	ldr	r2, [pc, #112]	@ (8003584 <MAX72_Print_Float+0x26c>)
 8003512:	69f8      	ldr	r0, [r7, #28]
 8003514:	f004 f9cc 	bl	80078b0 <sniprintf>
 8003518:	e01a      	b.n	8003550 <MAX72_Print_Float+0x238>
            }
        } else {
            // Include la parte intera
            if (sign != '\0') {
 800351a:	7efb      	ldrb	r3, [r7, #27]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00e      	beq.n	800353e <MAX72_Print_Float+0x226>
                snprintf(str, sizeof(str), "%c%u.%0*u", sign, int_part, actual_decimals, frac_digits);
 8003520:	4608      	mov	r0, r1
 8003522:	7ef9      	ldrb	r1, [r7, #27]
 8003524:	7bbb      	ldrb	r3, [r7, #14]
 8003526:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003528:	9202      	str	r2, [sp, #8]
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	460b      	mov	r3, r1
 8003532:	4a15      	ldr	r2, [pc, #84]	@ (8003588 <MAX72_Print_Float+0x270>)
 8003534:	4601      	mov	r1, r0
 8003536:	69f8      	ldr	r0, [r7, #28]
 8003538:	f004 f9ba 	bl	80078b0 <sniprintf>
 800353c:	e008      	b.n	8003550 <MAX72_Print_Float+0x238>
            } else {
                snprintf(str, sizeof(str), "%u.%0*u", int_part, actual_decimals, frac_digits);
 800353e:	7bbb      	ldrb	r3, [r7, #14]
 8003540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003542:	9201      	str	r2, [sp, #4]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003548:	4a10      	ldr	r2, [pc, #64]	@ (800358c <MAX72_Print_Float+0x274>)
 800354a:	69f8      	ldr	r0, [r7, #28]
 800354c:	f004 f9b0 	bl	80078b0 <sniprintf>
            }
        }
    }

    MAX72_Print_String(str, minidigits ? MINIDIGITS : FLOAT);
 8003550:	78bb      	ldrb	r3, [r7, #2]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MAX72_Print_Float+0x242>
 8003556:	2302      	movs	r3, #2
 8003558:	e000      	b.n	800355c <MAX72_Print_Float+0x244>
 800355a:	2301      	movs	r3, #1
 800355c:	4619      	mov	r1, r3
 800355e:	69f8      	ldr	r0, [r7, #28]
 8003560:	f7ff fbfe 	bl	8002d60 <MAX72_Print_String>
 8003564:	46b5      	mov	sp, r6
//    MAX72_Print_String(str);
}
 8003566:	bf00      	nop
 8003568:	3744      	adds	r7, #68	@ 0x44
 800356a:	46bd      	mov	sp, r7
 800356c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003570:	cccccccd 	.word	0xcccccccd
 8003574:	08009d14 	.word	0x08009d14
 8003578:	08009d18 	.word	0x08009d18
 800357c:	08009d10 	.word	0x08009d10
 8003580:	08009d20 	.word	0x08009d20
 8003584:	08009d28 	.word	0x08009d28
 8003588:	08009d30 	.word	0x08009d30
 800358c:	08009d3c 	.word	0x08009d3c

08003590 <MAX72_SendFrame>:

// Buffer: 8 rows x DEV_NUM devices
static uint8_t frame[8][DEV_NUM];

// Send full frame to display (reversed order for correct cascade)
static void MAX72_SendFrame(void) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
    for (uint8_t row = 1; row <= 8; row++) {
 8003596:	2301      	movs	r3, #1
 8003598:	71fb      	strb	r3, [r7, #7]
 800359a:	e020      	b.n	80035de <MAX72_SendFrame+0x4e>
        uint8_t pattern[DEV_NUM];
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 800359c:	2300      	movs	r3, #0
 800359e:	71bb      	strb	r3, [r7, #6]
 80035a0:	e011      	b.n	80035c6 <MAX72_SendFrame+0x36>
            pattern[d] = frame[row-1][DEV_NUM - 1 - d];
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	1e59      	subs	r1, r3, #1
 80035a6:	79bb      	ldrb	r3, [r7, #6]
 80035a8:	f1c3 0203 	rsb	r2, r3, #3
 80035ac:	79bb      	ldrb	r3, [r7, #6]
 80035ae:	4810      	ldr	r0, [pc, #64]	@ (80035f0 <MAX72_SendFrame+0x60>)
 80035b0:	0089      	lsls	r1, r1, #2
 80035b2:	4401      	add	r1, r0
 80035b4:	440a      	add	r2, r1
 80035b6:	7812      	ldrb	r2, [r2, #0]
 80035b8:	3308      	adds	r3, #8
 80035ba:	443b      	add	r3, r7
 80035bc:	f803 2c08 	strb.w	r2, [r3, #-8]
        for (uint8_t d = 0; d < DEV_NUM; d++) {
 80035c0:	79bb      	ldrb	r3, [r7, #6]
 80035c2:	3301      	adds	r3, #1
 80035c4:	71bb      	strb	r3, [r7, #6]
 80035c6:	79bb      	ldrb	r3, [r7, #6]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d9ea      	bls.n	80035a2 <MAX72_SendFrame+0x12>
        }
        MAX72_SendRow(row, pattern);
 80035cc:	463a      	mov	r2, r7
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff f9bc 	bl	8002950 <MAX72_SendRow>
    for (uint8_t row = 1; row <= 8; row++) {
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	3301      	adds	r3, #1
 80035dc:	71fb      	strb	r3, [r7, #7]
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d9db      	bls.n	800359c <MAX72_SendFrame+0xc>
    }
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	200009c8 	.word	0x200009c8

080035f4 <MAX72_Scroll_Start_IT>:
}

scroll_state_t scroll_state = {0};

// Inizializza lo scrolling con un nuovo testo
void MAX72_Scroll_Start_IT(const char *text) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
    // Pulisci il frame
    memset(frame, 0, sizeof(frame));
 80035fc:	2220      	movs	r2, #32
 80035fe:	2100      	movs	r1, #0
 8003600:	482d      	ldr	r0, [pc, #180]	@ (80036b8 <MAX72_Scroll_Start_IT+0xc4>)
 8003602:	f004 fa4d 	bl	8007aa0 <memset>
    MAX72_SendFrame();
 8003606:	f7ff ffc3 	bl	8003590 <MAX72_SendFrame>

    // Inizializza lo stato - CAMBIATO: inizia dal primo carattere per scorrimento inverso
    scroll_state.text = text;
 800360a:	4a2c      	ldr	r2, [pc, #176]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6013      	str	r3, [r2, #0]
    scroll_state.current_char_idx = 0; // Inizia dal primo carattere
 8003610:	4b2a      	ldr	r3, [pc, #168]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 8003612:	2200      	movs	r2, #0
 8003614:	605a      	str	r2, [r3, #4]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003616:	4b29      	ldr	r3, [pc, #164]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a28      	ldr	r2, [pc, #160]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 800361c:	6852      	ldr	r2, [r2, #4]
 800361e:	4413      	add	r3, r2
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b1f      	cmp	r3, #31
 8003624:	d90e      	bls.n	8003644 <MAX72_Scroll_Start_IT+0x50>
            scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8003626:	4b25      	ldr	r3, [pc, #148]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a24      	ldr	r2, [pc, #144]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 800362c:	6852      	ldr	r2, [r2, #4]
 800362e:	4413      	add	r3, r2
 8003630:	781b      	ldrb	r3, [r3, #0]
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003632:	2b7e      	cmp	r3, #126	@ 0x7e
 8003634:	d806      	bhi.n	8003644 <MAX72_Scroll_Start_IT+0x50>
            ' ' : scroll_state.text[scroll_state.current_char_idx];
 8003636:	4b21      	ldr	r3, [pc, #132]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a20      	ldr	r2, [pc, #128]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 800363c:	6852      	ldr	r2, [r2, #4]
 800363e:	4413      	add	r3, r2
    scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	e000      	b.n	8003646 <MAX72_Scroll_Start_IT+0x52>
 8003644:	2320      	movs	r3, #32
 8003646:	4a1d      	ldr	r2, [pc, #116]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 8003648:	7213      	strb	r3, [r2, #8]
    scroll_state.current_col = 0;
 800364a:	4b1c      	ldr	r3, [pc, #112]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 800364c:	2200      	movs	r2, #0
 800364e:	725a      	strb	r2, [r3, #9]
    scroll_state.spacing_counter = 0;
 8003650:	4b1a      	ldr	r3, [pc, #104]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 8003652:	2200      	movs	r2, #0
 8003654:	729a      	strb	r2, [r3, #10]
    scroll_state.padding_counter = 0;
 8003656:	4b19      	ldr	r3, [pc, #100]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 8003658:	2200      	movs	r2, #0
 800365a:	72da      	strb	r2, [r3, #11]
    scroll_state.state = 0; // Inizia con il primo carattere
 800365c:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 800365e:	2200      	movs	r2, #0
 8003660:	731a      	strb	r2, [r3, #12]
    scroll_state.enabled = 1;
 8003662:	4b16      	ldr	r3, [pc, #88]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 8003664:	2201      	movs	r2, #1
 8003666:	735a      	strb	r2, [r3, #13]
    scroll_state.updated = 0; // Indica che lo scrolling è stato aggiornato
 8003668:	4b14      	ldr	r3, [pc, #80]	@ (80036bc <MAX72_Scroll_Start_IT+0xc8>)
 800366a:	2200      	movs	r2, #0
 800366c:	739a      	strb	r2, [r3, #14]

    uint8_t len = strlen(text);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fc fe2e 	bl	80002d0 <strlen>
 8003674:	4603      	mov	r3, r0
 8003676:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = len * GLYPH_WIDTH + (len - 1) * CHAR_SPACING;
 8003678:	7bbb      	ldrb	r3, [r7, #14]
 800367a:	461a      	mov	r2, r3
 800367c:	0052      	lsls	r2, r2, #1
 800367e:	4413      	add	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	b2db      	uxtb	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	737b      	strb	r3, [r7, #13]
    uint8_t max_chars = ((DEV_NUM * 8 < temp) ? DEV_NUM*8 : temp) - 8; // Padding iniziale di 8 colonne
 8003688:	7b7b      	ldrb	r3, [r7, #13]
 800368a:	2b20      	cmp	r3, #32
 800368c:	bf28      	it	cs
 800368e:	2320      	movcs	r3, #32
 8003690:	b2db      	uxtb	r3, r3
 8003692:	3b08      	subs	r3, #8
 8003694:	733b      	strb	r3, [r7, #12]
    for (uint8_t i = 0; i < max_chars; i++) {
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	e004      	b.n	80036a6 <MAX72_Scroll_Start_IT+0xb2>
		MAX72_Scroll_Process(); // Processa il primo carattere per inizializzare il frame
 800369c:	f000 f81c 	bl	80036d8 <MAX72_Scroll_Process>
    for (uint8_t i = 0; i < max_chars; i++) {
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	3301      	adds	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	7b3b      	ldrb	r3, [r7, #12]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d3f6      	bcc.n	800369c <MAX72_Scroll_Start_IT+0xa8>
	}
}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	200009c8 	.word	0x200009c8
 80036bc:	200009e8 	.word	0x200009e8

080036c0 <MAX72_Scroll_Stop>:

// Ferma lo scrolling
void MAX72_Scroll_Stop(void) {
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
    scroll_state.enabled = 0;
 80036c4:	4b03      	ldr	r3, [pc, #12]	@ (80036d4 <MAX72_Scroll_Stop+0x14>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	735a      	strb	r2, [r3, #13]
}
 80036ca:	bf00      	nop
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	200009e8 	.word	0x200009e8

080036d8 <MAX72_Scroll_Process>:
void MAX72_Scroll_Resume(void) {
    scroll_state.enabled = 1;
}

// Funzione da chiamare nel main loop - NON bloccante
void MAX72_Scroll_Process(void) {
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b08b      	sub	sp, #44	@ 0x2c
 80036dc:	af00      	add	r7, sp, #0
    if (!scroll_state.enabled || !scroll_state.text) return;
 80036de:	4b86      	ldr	r3, [pc, #536]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80036e0:	7b5b      	ldrb	r3, [r3, #13]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 817b 	beq.w	80039de <MAX72_Scroll_Process+0x306>
 80036e8:	4b83      	ldr	r3, [pc, #524]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8176 	beq.w	80039de <MAX72_Scroll_Process+0x306>

    switch (scroll_state.state) {
 80036f2:	4b81      	ldr	r3, [pc, #516]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80036f4:	7b1b      	ldrb	r3, [r3, #12]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	f000 80f6 	beq.w	80038e8 <MAX72_Scroll_Process+0x210>
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	f300 816b 	bgt.w	80039d8 <MAX72_Scroll_Process+0x300>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <MAX72_Scroll_Process+0x34>
 8003706:	2b01      	cmp	r3, #1
 8003708:	d072      	beq.n	80037f0 <MAX72_Scroll_Process+0x118>
 800370a:	e165      	b.n	80039d8 <MAX72_Scroll_Process+0x300>
        case 0: // Processamento carattere
        {
            uint8_t ch = scroll_state.current_char;
 800370c:	4b7a      	ldr	r3, [pc, #488]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 800370e:	7a1b      	ldrb	r3, [r3, #8]
 8003710:	737b      	strb	r3, [r7, #13]
            uint8_t *glyph = LETTERS[ch - ' '].value;
 8003712:	7b7b      	ldrb	r3, [r7, #13]
 8003714:	f1a3 0220 	sub.w	r2, r3, #32
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4413      	add	r3, r2
 800371e:	4a77      	ldr	r2, [pc, #476]	@ (80038fc <MAX72_Scroll_Process+0x224>)
 8003720:	4413      	add	r3, r2
 8003722:	3301      	adds	r3, #1
 8003724:	60bb      	str	r3, [r7, #8]

            // CAMBIATO: Shift verso destra (da destra verso sinistra)
            for (uint8_t row = 0; row < 8; row++) {
 8003726:	2300      	movs	r3, #0
 8003728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800372c:	e047      	b.n	80037be <MAX72_Scroll_Process+0xe6>
                uint8_t new_bit = (glyph[row] >> scroll_state.current_col) & 0x01;
 800372e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4413      	add	r3, r2
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	4b6f      	ldr	r3, [pc, #444]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 800373c:	7a5b      	ldrb	r3, [r3, #9]
 800373e:	fa42 f303 	asr.w	r3, r2, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	71fb      	strb	r3, [r7, #7]
                uint8_t carry = new_bit;
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // CAMBIATO: Shift right invece di left, da device più a destra
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 8003750:	2303      	movs	r3, #3
 8003752:	623b      	str	r3, [r7, #32]
 8003754:	e02b      	b.n	80037ae <MAX72_Scroll_Process+0xd6>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8003756:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800375a:	4a69      	ldr	r2, [pc, #420]	@ (8003900 <MAX72_Scroll_Process+0x228>)
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	441a      	add	r2, r3
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	4413      	add	r3, r2
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	71bb      	strb	r3, [r7, #6]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 800376c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003770:	4a63      	ldr	r2, [pc, #396]	@ (8003900 <MAX72_Scroll_Process+0x228>)
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	4413      	add	r3, r2
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	b2db      	uxtb	r3, r3
 8003780:	b25a      	sxtb	r2, r3
 8003782:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8003786:	01db      	lsls	r3, r3, #7
 8003788:	b25b      	sxtb	r3, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	b25a      	sxtb	r2, r3
 800378e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003792:	b2d1      	uxtb	r1, r2
 8003794:	4a5a      	ldr	r2, [pc, #360]	@ (8003900 <MAX72_Scroll_Process+0x228>)
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	441a      	add	r2, r3
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	4413      	add	r3, r2
 800379e:	460a      	mov	r2, r1
 80037a0:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 80037a2:	79bb      	ldrb	r3, [r7, #6]
 80037a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	dad0      	bge.n	8003756 <MAX72_Scroll_Process+0x7e>
            for (uint8_t row = 0; row < 8; row++) {
 80037b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037b8:	3301      	adds	r3, #1
 80037ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80037be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037c2:	2b07      	cmp	r3, #7
 80037c4:	d9b3      	bls.n	800372e <MAX72_Scroll_Process+0x56>
                }
            }

            scroll_state.current_col++;
 80037c6:	4b4c      	ldr	r3, [pc, #304]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80037c8:	7a5b      	ldrb	r3, [r3, #9]
 80037ca:	3301      	adds	r3, #1
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	4b4a      	ldr	r3, [pc, #296]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80037d0:	725a      	strb	r2, [r3, #9]

            // Finito il carattere corrente?
            if (scroll_state.current_col >= GLYPH_WIDTH) {
 80037d2:	4b49      	ldr	r3, [pc, #292]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80037d4:	7a5b      	ldrb	r3, [r3, #9]
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	f240 80f9 	bls.w	80039ce <MAX72_Scroll_Process+0x2f6>
                scroll_state.current_col = 0;
 80037dc:	4b46      	ldr	r3, [pc, #280]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80037de:	2200      	movs	r2, #0
 80037e0:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 80037e2:	4b45      	ldr	r3, [pc, #276]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	729a      	strb	r2, [r3, #10]
                scroll_state.state = 1; // Passa agli spazi tra caratteri
 80037e8:	4b43      	ldr	r3, [pc, #268]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	731a      	strb	r2, [r3, #12]
            }
            break;
 80037ee:	e0ee      	b.n	80039ce <MAX72_Scroll_Process+0x2f6>
        }

        case 1: // Spacing tra caratteri
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 80037f0:	2300      	movs	r3, #0
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e032      	b.n	800385c <MAX72_Scroll_Process+0x184>
                uint8_t carry = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 80037fa:	2303      	movs	r3, #3
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	e027      	b.n	8003850 <MAX72_Scroll_Process+0x178>
                    uint8_t next_carry = frame[row][d] & 0x01;
 8003800:	7ffb      	ldrb	r3, [r7, #31]
 8003802:	4a3f      	ldr	r2, [pc, #252]	@ (8003900 <MAX72_Scroll_Process+0x228>)
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	441a      	add	r2, r3
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	4413      	add	r3, r2
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	73bb      	strb	r3, [r7, #14]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8003814:	7ffb      	ldrb	r3, [r7, #31]
 8003816:	4a3a      	ldr	r2, [pc, #232]	@ (8003900 <MAX72_Scroll_Process+0x228>)
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	441a      	add	r2, r3
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	4413      	add	r3, r2
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	b25a      	sxtb	r2, r3
 8003828:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800382c:	01db      	lsls	r3, r3, #7
 800382e:	b25b      	sxtb	r3, r3
 8003830:	4313      	orrs	r3, r2
 8003832:	b25a      	sxtb	r2, r3
 8003834:	7ffb      	ldrb	r3, [r7, #31]
 8003836:	b2d1      	uxtb	r1, r2
 8003838:	4a31      	ldr	r2, [pc, #196]	@ (8003900 <MAX72_Scroll_Process+0x228>)
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	441a      	add	r2, r3
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	4413      	add	r3, r2
 8003842:	460a      	mov	r2, r1
 8003844:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 8003846:	7bbb      	ldrb	r3, [r7, #14]
 8003848:	77bb      	strb	r3, [r7, #30]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	3b01      	subs	r3, #1
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	dad4      	bge.n	8003800 <MAX72_Scroll_Process+0x128>
            for (uint8_t row = 0; row < 8; row++) {
 8003856:	7ffb      	ldrb	r3, [r7, #31]
 8003858:	3301      	adds	r3, #1
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	7ffb      	ldrb	r3, [r7, #31]
 800385e:	2b07      	cmp	r3, #7
 8003860:	d9c9      	bls.n	80037f6 <MAX72_Scroll_Process+0x11e>
                }
            }

            scroll_state.spacing_counter++;
 8003862:	4b25      	ldr	r3, [pc, #148]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 8003864:	7a9b      	ldrb	r3, [r3, #10]
 8003866:	3301      	adds	r3, #1
 8003868:	b2da      	uxtb	r2, r3
 800386a:	4b23      	ldr	r3, [pc, #140]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 800386c:	729a      	strb	r2, [r3, #10]

            // Finito lo spacing?
            if (scroll_state.spacing_counter >= CHAR_SPACING) {
 800386e:	4b22      	ldr	r3, [pc, #136]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 8003870:	7a9b      	ldrb	r3, [r3, #10]
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 80ad 	beq.w	80039d2 <MAX72_Scroll_Process+0x2fa>
                scroll_state.spacing_counter = 0;
 8003878:	4b1f      	ldr	r3, [pc, #124]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 800387a:	2200      	movs	r2, #0
 800387c:	729a      	strb	r2, [r3, #10]

                // CAMBIATO: Passa al carattere successivo (incrementa invece di decrementare)
                scroll_state.current_char_idx++;
 800387e:	4b1e      	ldr	r3, [pc, #120]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	3301      	adds	r3, #1
 8003884:	4a1c      	ldr	r2, [pc, #112]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 8003886:	6053      	str	r3, [r2, #4]
                if (scroll_state.current_char_idx >= strlen(scroll_state.text)) {
 8003888:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	461c      	mov	r4, r3
 800388e:	4b1a      	ldr	r3, [pc, #104]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fc fd1c 	bl	80002d0 <strlen>
 8003898:	4603      	mov	r3, r0
 800389a:	429c      	cmp	r4, r3
 800389c:	d306      	bcc.n	80038ac <MAX72_Scroll_Process+0x1d4>
                    // Finiti tutti i caratteri, passa al padding finale
                    scroll_state.state = 2;
 800389e:	4b16      	ldr	r3, [pc, #88]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80038a0:	2202      	movs	r2, #2
 80038a2:	731a      	strb	r2, [r3, #12]
                    scroll_state.padding_counter = 0;
 80038a4:	4b14      	ldr	r3, [pc, #80]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	72da      	strb	r2, [r3, #11]
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
                    scroll_state.state = 0;
                }
            }
            break;
 80038aa:	e092      	b.n	80039d2 <MAX72_Scroll_Process+0x2fa>
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80038ac:	4b12      	ldr	r3, [pc, #72]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a11      	ldr	r2, [pc, #68]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80038b2:	6852      	ldr	r2, [r2, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b1f      	cmp	r3, #31
 80038ba:	d90e      	bls.n	80038da <MAX72_Scroll_Process+0x202>
                	                         scroll_state.text[scroll_state.current_char_idx] > '~') ?
 80038bc:	4b0e      	ldr	r3, [pc, #56]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0d      	ldr	r2, [pc, #52]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80038c2:	6852      	ldr	r2, [r2, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	781b      	ldrb	r3, [r3, #0]
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80038c8:	2b7e      	cmp	r3, #126	@ 0x7e
 80038ca:	d806      	bhi.n	80038da <MAX72_Scroll_Process+0x202>
                	                         ' ' : scroll_state.text[scroll_state.current_char_idx];
 80038cc:	4b0a      	ldr	r3, [pc, #40]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a09      	ldr	r2, [pc, #36]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80038d2:	6852      	ldr	r2, [r2, #4]
 80038d4:	4413      	add	r3, r2
                	scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	e000      	b.n	80038dc <MAX72_Scroll_Process+0x204>
 80038da:	2320      	movs	r3, #32
 80038dc:	4a06      	ldr	r2, [pc, #24]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80038de:	7213      	strb	r3, [r2, #8]
                    scroll_state.state = 0;
 80038e0:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <MAX72_Scroll_Process+0x220>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	731a      	strb	r2, [r3, #12]
            break;
 80038e6:	e074      	b.n	80039d2 <MAX72_Scroll_Process+0x2fa>
        }

        case 2: // Padding finale
        {
            // CAMBIATO: Shift di uno spazio vuoto verso destra
            for (uint8_t row = 0; row < 8; row++) {
 80038e8:	2300      	movs	r3, #0
 80038ea:	75fb      	strb	r3, [r7, #23]
 80038ec:	e038      	b.n	8003960 <MAX72_Scroll_Process+0x288>
                uint8_t carry = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 80038f2:	2303      	movs	r3, #3
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	e02d      	b.n	8003954 <MAX72_Scroll_Process+0x27c>
 80038f8:	200009e8 	.word	0x200009e8
 80038fc:	20000008 	.word	0x20000008
 8003900:	200009c8 	.word	0x200009c8
                    uint8_t next_carry = frame[row][d] & 0x01;
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	4a38      	ldr	r2, [pc, #224]	@ (80039e8 <MAX72_Scroll_Process+0x310>)
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	441a      	add	r2, r3
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
                    frame[row][d] = (frame[row][d] >> 1) | (carry << 7);
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	4a33      	ldr	r2, [pc, #204]	@ (80039e8 <MAX72_Scroll_Process+0x310>)
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	441a      	add	r2, r3
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4413      	add	r3, r2
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	085b      	lsrs	r3, r3, #1
 8003928:	b2db      	uxtb	r3, r3
 800392a:	b25a      	sxtb	r2, r3
 800392c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003930:	01db      	lsls	r3, r3, #7
 8003932:	b25b      	sxtb	r3, r3
 8003934:	4313      	orrs	r3, r2
 8003936:	b25a      	sxtb	r2, r3
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	b2d1      	uxtb	r1, r2
 800393c:	4a2a      	ldr	r2, [pc, #168]	@ (80039e8 <MAX72_Scroll_Process+0x310>)
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	441a      	add	r2, r3
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4413      	add	r3, r2
 8003946:	460a      	mov	r2, r1
 8003948:	701a      	strb	r2, [r3, #0]
                    carry = next_carry;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	75bb      	strb	r3, [r7, #22]
                for (int d = DEV_NUM - 1; d >= 0; d--) {
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	3b01      	subs	r3, #1
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	dad4      	bge.n	8003904 <MAX72_Scroll_Process+0x22c>
            for (uint8_t row = 0; row < 8; row++) {
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	3301      	adds	r3, #1
 800395e:	75fb      	strb	r3, [r7, #23]
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	2b07      	cmp	r3, #7
 8003964:	d9c3      	bls.n	80038ee <MAX72_Scroll_Process+0x216>
                }
            }

            scroll_state.padding_counter++;
 8003966:	4b21      	ldr	r3, [pc, #132]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 8003968:	7adb      	ldrb	r3, [r3, #11]
 800396a:	3301      	adds	r3, #1
 800396c:	b2da      	uxtb	r2, r3
 800396e:	4b1f      	ldr	r3, [pc, #124]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 8003970:	72da      	strb	r2, [r3, #11]

            // Finito il padding? (GLYPH_WIDTH + CHAR_SPACING)
            if (scroll_state.padding_counter >= (GLYPH_WIDTH + CHAR_SPACING)) {
 8003972:	4b1e      	ldr	r3, [pc, #120]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 8003974:	7adb      	ldrb	r3, [r3, #11]
 8003976:	2b05      	cmp	r3, #5
 8003978:	d92d      	bls.n	80039d6 <MAX72_Scroll_Process+0x2fe>
                // CAMBIATO: Ricomincia dal primo carattere (indice 0)
                scroll_state.current_char_idx = 0;
 800397a:	4b1c      	ldr	r3, [pc, #112]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 800397c:	2200      	movs	r2, #0
 800397e:	605a      	str	r2, [r3, #4]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 8003980:	4b1a      	ldr	r3, [pc, #104]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a19      	ldr	r2, [pc, #100]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 8003986:	6852      	ldr	r2, [r2, #4]
 8003988:	4413      	add	r3, r2
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b1f      	cmp	r3, #31
 800398e:	d90e      	bls.n	80039ae <MAX72_Scroll_Process+0x2d6>
						scroll_state.text[scroll_state.current_char_idx] > '~') ?
 8003990:	4b16      	ldr	r3, [pc, #88]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a15      	ldr	r2, [pc, #84]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 8003996:	6852      	ldr	r2, [r2, #4]
 8003998:	4413      	add	r3, r2
 800399a:	781b      	ldrb	r3, [r3, #0]
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 800399c:	2b7e      	cmp	r3, #126	@ 0x7e
 800399e:	d806      	bhi.n	80039ae <MAX72_Scroll_Process+0x2d6>
						' ' : scroll_state.text[scroll_state.current_char_idx];
 80039a0:	4b12      	ldr	r3, [pc, #72]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a11      	ldr	r2, [pc, #68]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 80039a6:	6852      	ldr	r2, [r2, #4]
 80039a8:	4413      	add	r3, r2
                scroll_state.current_char = (scroll_state.text[scroll_state.current_char_idx] < ' ' ||
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	e000      	b.n	80039b0 <MAX72_Scroll_Process+0x2d8>
 80039ae:	2320      	movs	r3, #32
 80039b0:	4a0e      	ldr	r2, [pc, #56]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 80039b2:	7213      	strb	r3, [r2, #8]
                scroll_state.current_col = 0;
 80039b4:	4b0d      	ldr	r3, [pc, #52]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	725a      	strb	r2, [r3, #9]
                scroll_state.spacing_counter = 0;
 80039ba:	4b0c      	ldr	r3, [pc, #48]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 80039bc:	2200      	movs	r2, #0
 80039be:	729a      	strb	r2, [r3, #10]
                scroll_state.padding_counter = 0;
 80039c0:	4b0a      	ldr	r3, [pc, #40]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	72da      	strb	r2, [r3, #11]
                scroll_state.state = 0;
 80039c6:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <MAX72_Scroll_Process+0x314>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	731a      	strb	r2, [r3, #12]
            }
            break;
 80039cc:	e003      	b.n	80039d6 <MAX72_Scroll_Process+0x2fe>
            break;
 80039ce:	bf00      	nop
 80039d0:	e002      	b.n	80039d8 <MAX72_Scroll_Process+0x300>
            break;
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <MAX72_Scroll_Process+0x300>
            break;
 80039d6:	bf00      	nop
        }
    }

    // Aggiorna il display
    MAX72_SendFrame();
 80039d8:	f7ff fdda 	bl	8003590 <MAX72_SendFrame>
 80039dc:	e000      	b.n	80039e0 <MAX72_Scroll_Process+0x308>
    if (!scroll_state.enabled || !scroll_state.text) return;
 80039de:	bf00      	nop
}
 80039e0:	372c      	adds	r7, #44	@ 0x2c
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200009c8 	.word	0x200009c8
 80039ec:	200009e8 	.word	0x200009e8

080039f0 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80039f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80039f4:	f7fd fffc 	bl	80019f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039f8:	480c      	ldr	r0, [pc, #48]	@ (8003a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039fa:	490d      	ldr	r1, [pc, #52]	@ (8003a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a00:	e002      	b.n	8003a08 <LoopCopyDataInit>

08003a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a06:	3304      	adds	r3, #4

08003a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a0c:	d3f9      	bcc.n	8003a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a10:	4c0a      	ldr	r4, [pc, #40]	@ (8003a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a14:	e001      	b.n	8003a1a <LoopFillZerobss>

08003a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a18:	3204      	adds	r2, #4

08003a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a1c:	d3fb      	bcc.n	8003a16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003a1e:	f004 f84d 	bl	8007abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a22:	f7fd fcb3 	bl	800138c <main>
  bx  lr    
 8003a26:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8003a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a30:	20000590 	.word	0x20000590
  ldr r2, =_sidata
 8003a34:	0800a0ec 	.word	0x0800a0ec
  ldr r2, =_sbss
 8003a38:	20000590 	.word	0x20000590
  ldr r4, =_ebss
 8003a3c:	20000b48 	.word	0x20000b48

08003a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a40:	e7fe      	b.n	8003a40 <ADC_IRQHandler>
	...

08003a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a48:	4b0e      	ldr	r3, [pc, #56]	@ (8003a84 <HAL_Init+0x40>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a84 <HAL_Init+0x40>)
 8003a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_Init+0x40>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0a      	ldr	r2, [pc, #40]	@ (8003a84 <HAL_Init+0x40>)
 8003a5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a60:	4b08      	ldr	r3, [pc, #32]	@ (8003a84 <HAL_Init+0x40>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a07      	ldr	r2, [pc, #28]	@ (8003a84 <HAL_Init+0x40>)
 8003a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a6c:	2003      	movs	r0, #3
 8003a6e:	f000 fd5f 	bl	8004530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a72:	2000      	movs	r0, #0
 8003a74:	f000 f808 	bl	8003a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a78:	f7fd fe82 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023c00 	.word	0x40023c00

08003a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a90:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <HAL_InitTick+0x54>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b12      	ldr	r3, [pc, #72]	@ (8003ae0 <HAL_InitTick+0x58>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fd77 	bl	800459a <HAL_SYSTICK_Config>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00e      	b.n	8003ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b0f      	cmp	r3, #15
 8003aba:	d80a      	bhi.n	8003ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003abc:	2200      	movs	r2, #0
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ac4:	f000 fd3f 	bl	8004546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ac8:	4a06      	ldr	r2, [pc, #24]	@ (8003ae4 <HAL_InitTick+0x5c>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000004 	.word	0x20000004
 8003ae0:	200003c4 	.word	0x200003c4
 8003ae4:	200003c0 	.word	0x200003c0

08003ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003aec:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <HAL_IncTick+0x20>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	4b06      	ldr	r3, [pc, #24]	@ (8003b0c <HAL_IncTick+0x24>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4413      	add	r3, r2
 8003af8:	4a04      	ldr	r2, [pc, #16]	@ (8003b0c <HAL_IncTick+0x24>)
 8003afa:	6013      	str	r3, [r2, #0]
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	200003c4 	.word	0x200003c4
 8003b0c:	200009f8 	.word	0x200009f8

08003b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return uwTick;
 8003b14:	4b03      	ldr	r3, [pc, #12]	@ (8003b24 <HAL_GetTick+0x14>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	200009f8 	.word	0x200009f8

08003b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b30:	f7ff ffee 	bl	8003b10 <HAL_GetTick>
 8003b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b40:	d005      	beq.n	8003b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b42:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <HAL_Delay+0x44>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b4e:	bf00      	nop
 8003b50:	f7ff ffde 	bl	8003b10 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d8f7      	bhi.n	8003b50 <HAL_Delay+0x28>
  {
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	200003c4 	.word	0x200003c4

08003b70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e033      	b.n	8003bee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd fa92 	bl	80010b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d118      	bne.n	8003be0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003bb6:	f023 0302 	bic.w	r3, r3, #2
 8003bba:	f043 0202 	orr.w	r2, r3, #2
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fae8 	bl	8004198 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	f023 0303 	bic.w	r3, r3, #3
 8003bd6:	f043 0201 	orr.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bde:	e001      	b.n	8003be4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_ADC_Start+0x1a>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e0b2      	b.n	8003d78 <HAL_ADC_Start+0x180>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d018      	beq.n	8003c5a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c38:	4b52      	ldr	r3, [pc, #328]	@ (8003d84 <HAL_ADC_Start+0x18c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a52      	ldr	r2, [pc, #328]	@ (8003d88 <HAL_ADC_Start+0x190>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	0c9a      	lsrs	r2, r3, #18
 8003c44:	4613      	mov	r3, r2
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	4413      	add	r3, r2
 8003c4a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003c4c:	e002      	b.n	8003c54 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f9      	bne.n	8003c4e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d17a      	bne.n	8003d5e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca6:	d106      	bne.n	8003cb6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cac:	f023 0206 	bic.w	r2, r3, #6
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	645a      	str	r2, [r3, #68]	@ 0x44
 8003cb4:	e002      	b.n	8003cbc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cc4:	4b31      	ldr	r3, [pc, #196]	@ (8003d8c <HAL_ADC_Start+0x194>)
 8003cc6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003cd0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 031f 	and.w	r3, r3, #31
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d12a      	bne.n	8003d34 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8003d90 <HAL_ADC_Start+0x198>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d015      	beq.n	8003d14 <HAL_ADC_Start+0x11c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a29      	ldr	r2, [pc, #164]	@ (8003d94 <HAL_ADC_Start+0x19c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d105      	bne.n	8003cfe <HAL_ADC_Start+0x106>
 8003cf2:	4b26      	ldr	r3, [pc, #152]	@ (8003d8c <HAL_ADC_Start+0x194>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a25      	ldr	r2, [pc, #148]	@ (8003d98 <HAL_ADC_Start+0x1a0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d136      	bne.n	8003d76 <HAL_ADC_Start+0x17e>
 8003d08:	4b20      	ldr	r3, [pc, #128]	@ (8003d8c <HAL_ADC_Start+0x194>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d130      	bne.n	8003d76 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d129      	bne.n	8003d76 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	e020      	b.n	8003d76 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a15      	ldr	r2, [pc, #84]	@ (8003d90 <HAL_ADC_Start+0x198>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d11b      	bne.n	8003d76 <HAL_ADC_Start+0x17e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d114      	bne.n	8003d76 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	e00b      	b.n	8003d76 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	f043 0210 	orr.w	r2, r3, #16
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	20000004 	.word	0x20000004
 8003d88:	431bde83 	.word	0x431bde83
 8003d8c:	40012300 	.word	0x40012300
 8003d90:	40012000 	.word	0x40012000
 8003d94:	40012100 	.word	0x40012100
 8003d98:	40012200 	.word	0x40012200

08003d9c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_ADC_Stop+0x16>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e021      	b.n	8003df6 <HAL_ADC_Stop+0x5a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0201 	bic.w	r2, r2, #1
 8003dc8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d109      	bne.n	8003dec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	f043 0201 	orr.w	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1e:	d113      	bne.n	8003e48 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e2e:	d10b      	bne.n	8003e48 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	f043 0220 	orr.w	r2, r3, #32
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e063      	b.n	8003f10 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e48:	f7ff fe62 	bl	8003b10 <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003e4e:	e021      	b.n	8003e94 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e56:	d01d      	beq.n	8003e94 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <HAL_ADC_PollForConversion+0x6c>
 8003e5e:	f7ff fe57 	bl	8003b10 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d212      	bcs.n	8003e94 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d00b      	beq.n	8003e94 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	f043 0204 	orr.w	r2, r3, #4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e03d      	b.n	8003f10 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d1d6      	bne.n	8003e50 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f06f 0212 	mvn.w	r2, #18
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d123      	bne.n	8003f0e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11f      	bne.n	8003f0e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d006      	beq.n	8003eea <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d111      	bne.n	8003f0e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d105      	bne.n	8003f0e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f043 0201 	orr.w	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x1c>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e113      	b.n	8004178 <HAL_ADC_ConfigChannel+0x244>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b09      	cmp	r3, #9
 8003f5e:	d925      	bls.n	8003fac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68d9      	ldr	r1, [r3, #12]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4613      	mov	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	3b1e      	subs	r3, #30
 8003f76:	2207      	movs	r2, #7
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43da      	mvns	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	400a      	ands	r2, r1
 8003f84:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68d9      	ldr	r1, [r3, #12]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	4618      	mov	r0, r3
 8003f98:	4603      	mov	r3, r0
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4403      	add	r3, r0
 8003f9e:	3b1e      	subs	r3, #30
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	e022      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6919      	ldr	r1, [r3, #16]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4613      	mov	r3, r2
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	4413      	add	r3, r2
 8003fc0:	2207      	movs	r2, #7
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	400a      	ands	r2, r1
 8003fce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6919      	ldr	r1, [r3, #16]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	4403      	add	r3, r0
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b06      	cmp	r3, #6
 8003ff8:	d824      	bhi.n	8004044 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	3b05      	subs	r3, #5
 800400c:	221f      	movs	r2, #31
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43da      	mvns	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	400a      	ands	r2, r1
 800401a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	b29b      	uxth	r3, r3
 8004028:	4618      	mov	r0, r3
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	3b05      	subs	r3, #5
 8004036:	fa00 f203 	lsl.w	r2, r0, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	635a      	str	r2, [r3, #52]	@ 0x34
 8004042:	e04c      	b.n	80040de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d824      	bhi.n	8004096 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	3b23      	subs	r3, #35	@ 0x23
 800405e:	221f      	movs	r2, #31
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43da      	mvns	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	400a      	ands	r2, r1
 800406c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	b29b      	uxth	r3, r3
 800407a:	4618      	mov	r0, r3
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	3b23      	subs	r3, #35	@ 0x23
 8004088:	fa00 f203 	lsl.w	r2, r0, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	631a      	str	r2, [r3, #48]	@ 0x30
 8004094:	e023      	b.n	80040de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	3b41      	subs	r3, #65	@ 0x41
 80040a8:	221f      	movs	r2, #31
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43da      	mvns	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	400a      	ands	r2, r1
 80040b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	4618      	mov	r0, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	3b41      	subs	r3, #65	@ 0x41
 80040d2:	fa00 f203 	lsl.w	r2, r0, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040de:	4b29      	ldr	r3, [pc, #164]	@ (8004184 <HAL_ADC_ConfigChannel+0x250>)
 80040e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a28      	ldr	r2, [pc, #160]	@ (8004188 <HAL_ADC_ConfigChannel+0x254>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10f      	bne.n	800410c <HAL_ADC_ConfigChannel+0x1d8>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b12      	cmp	r3, #18
 80040f2:	d10b      	bne.n	800410c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1d      	ldr	r2, [pc, #116]	@ (8004188 <HAL_ADC_ConfigChannel+0x254>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d12b      	bne.n	800416e <HAL_ADC_ConfigChannel+0x23a>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1c      	ldr	r2, [pc, #112]	@ (800418c <HAL_ADC_ConfigChannel+0x258>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <HAL_ADC_ConfigChannel+0x1f4>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b11      	cmp	r3, #17
 8004126:	d122      	bne.n	800416e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a11      	ldr	r2, [pc, #68]	@ (800418c <HAL_ADC_ConfigChannel+0x258>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d111      	bne.n	800416e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800414a:	4b11      	ldr	r3, [pc, #68]	@ (8004190 <HAL_ADC_ConfigChannel+0x25c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a11      	ldr	r2, [pc, #68]	@ (8004194 <HAL_ADC_ConfigChannel+0x260>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	0c9a      	lsrs	r2, r3, #18
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004160:	e002      	b.n	8004168 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	3b01      	subs	r3, #1
 8004166:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f9      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	40012300 	.word	0x40012300
 8004188:	40012000 	.word	0x40012000
 800418c:	10000012 	.word	0x10000012
 8004190:	20000004 	.word	0x20000004
 8004194:	431bde83 	.word	0x431bde83

08004198 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041a0:	4b79      	ldr	r3, [pc, #484]	@ (8004388 <ADC_Init+0x1f0>)
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	021a      	lsls	r2, r3, #8
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80041f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6899      	ldr	r1, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422a:	4a58      	ldr	r2, [pc, #352]	@ (800438c <ADC_Init+0x1f4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d022      	beq.n	8004276 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800423e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6899      	ldr	r1, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6899      	ldr	r1, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	e00f      	b.n	8004296 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004294:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0202 	bic.w	r2, r2, #2
 80042a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6899      	ldr	r1, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	7e1b      	ldrb	r3, [r3, #24]
 80042b0:	005a      	lsls	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01b      	beq.n	80042fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042d2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80042e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6859      	ldr	r1, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	3b01      	subs	r3, #1
 80042f0:	035a      	lsls	r2, r3, #13
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	e007      	b.n	800430c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800430a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800431a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	3b01      	subs	r3, #1
 8004328:	051a      	lsls	r2, r3, #20
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6899      	ldr	r1, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800434e:	025a      	lsls	r2, r3, #9
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6899      	ldr	r1, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	029a      	lsls	r2, r3, #10
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	609a      	str	r2, [r3, #8]
}
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40012300 	.word	0x40012300
 800438c:	0f000001 	.word	0x0f000001

08004390 <__NVIC_SetPriorityGrouping>:
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043a0:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <__NVIC_SetPriorityGrouping+0x44>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043ac:	4013      	ands	r3, r2
 80043ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043c2:	4a04      	ldr	r2, [pc, #16]	@ (80043d4 <__NVIC_SetPriorityGrouping+0x44>)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	60d3      	str	r3, [r2, #12]
}
 80043c8:	bf00      	nop
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	e000ed00 	.word	0xe000ed00

080043d8 <__NVIC_GetPriorityGrouping>:
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043dc:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <__NVIC_GetPriorityGrouping+0x18>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	0a1b      	lsrs	r3, r3, #8
 80043e2:	f003 0307 	and.w	r3, r3, #7
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <__NVIC_EnableIRQ>:
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004402:	2b00      	cmp	r3, #0
 8004404:	db0b      	blt.n	800441e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	f003 021f 	and.w	r2, r3, #31
 800440c:	4907      	ldr	r1, [pc, #28]	@ (800442c <__NVIC_EnableIRQ+0x38>)
 800440e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2001      	movs	r0, #1
 8004416:	fa00 f202 	lsl.w	r2, r0, r2
 800441a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	e000e100 	.word	0xe000e100

08004430 <__NVIC_SetPriority>:
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	6039      	str	r1, [r7, #0]
 800443a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800443c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004440:	2b00      	cmp	r3, #0
 8004442:	db0a      	blt.n	800445a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	490c      	ldr	r1, [pc, #48]	@ (800447c <__NVIC_SetPriority+0x4c>)
 800444a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444e:	0112      	lsls	r2, r2, #4
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	440b      	add	r3, r1
 8004454:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004458:	e00a      	b.n	8004470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	4908      	ldr	r1, [pc, #32]	@ (8004480 <__NVIC_SetPriority+0x50>)
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	3b04      	subs	r3, #4
 8004468:	0112      	lsls	r2, r2, #4
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	440b      	add	r3, r1
 800446e:	761a      	strb	r2, [r3, #24]
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	e000e100 	.word	0xe000e100
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <NVIC_EncodePriority>:
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	@ 0x24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f1c3 0307 	rsb	r3, r3, #7
 800449e:	2b04      	cmp	r3, #4
 80044a0:	bf28      	it	cs
 80044a2:	2304      	movcs	r3, #4
 80044a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	3304      	adds	r3, #4
 80044aa:	2b06      	cmp	r3, #6
 80044ac:	d902      	bls.n	80044b4 <NVIC_EncodePriority+0x30>
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3b03      	subs	r3, #3
 80044b2:	e000      	b.n	80044b6 <NVIC_EncodePriority+0x32>
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43da      	mvns	r2, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	401a      	ands	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	fa01 f303 	lsl.w	r3, r1, r3
 80044d6:	43d9      	mvns	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044dc:	4313      	orrs	r3, r2
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3724      	adds	r7, #36	@ 0x24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <SysTick_Config>:
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044fc:	d301      	bcc.n	8004502 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80044fe:	2301      	movs	r3, #1
 8004500:	e00f      	b.n	8004522 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004502:	4a0a      	ldr	r2, [pc, #40]	@ (800452c <SysTick_Config+0x40>)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3b01      	subs	r3, #1
 8004508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800450a:	210f      	movs	r1, #15
 800450c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004510:	f7ff ff8e 	bl	8004430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004514:	4b05      	ldr	r3, [pc, #20]	@ (800452c <SysTick_Config+0x40>)
 8004516:	2200      	movs	r2, #0
 8004518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800451a:	4b04      	ldr	r3, [pc, #16]	@ (800452c <SysTick_Config+0x40>)
 800451c:	2207      	movs	r2, #7
 800451e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	e000e010 	.word	0xe000e010

08004530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff ff29 	bl	8004390 <__NVIC_SetPriorityGrouping>
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004546:	b580      	push	{r7, lr}
 8004548:	b086      	sub	sp, #24
 800454a:	af00      	add	r7, sp, #0
 800454c:	4603      	mov	r3, r0
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004558:	f7ff ff3e 	bl	80043d8 <__NVIC_GetPriorityGrouping>
 800455c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	6978      	ldr	r0, [r7, #20]
 8004564:	f7ff ff8e 	bl	8004484 <NVIC_EncodePriority>
 8004568:	4602      	mov	r2, r0
 800456a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff ff5d 	bl	8004430 <__NVIC_SetPriority>
}
 8004576:	bf00      	nop
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	4603      	mov	r3, r0
 8004586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff ff31 	bl	80043f4 <__NVIC_EnableIRQ>
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff ffa2 	bl	80044ec <SysTick_Config>
 80045a8:	4603      	mov	r3, r0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b089      	sub	sp, #36	@ 0x24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	e165      	b.n	800489c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045d0:	2201      	movs	r2, #1
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4013      	ands	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	f040 8154 	bne.w	8004896 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d005      	beq.n	8004606 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004602:	2b02      	cmp	r3, #2
 8004604:	d130      	bne.n	8004668 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	2203      	movs	r2, #3
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	43db      	mvns	r3, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4013      	ands	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4313      	orrs	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800463c:	2201      	movs	r2, #1
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 0201 	and.w	r2, r3, #1
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	2b03      	cmp	r3, #3
 8004672:	d017      	beq.n	80046a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	2203      	movs	r2, #3
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	43db      	mvns	r3, r3
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4013      	ands	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d123      	bne.n	80046f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	08da      	lsrs	r2, r3, #3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3208      	adds	r2, #8
 80046b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	220f      	movs	r2, #15
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	08da      	lsrs	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3208      	adds	r2, #8
 80046f2:	69b9      	ldr	r1, [r7, #24]
 80046f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	2203      	movs	r2, #3
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 0203 	and.w	r2, r3, #3
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 80ae 	beq.w	8004896 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	4b5d      	ldr	r3, [pc, #372]	@ (80048b4 <HAL_GPIO_Init+0x300>)
 8004740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004742:	4a5c      	ldr	r2, [pc, #368]	@ (80048b4 <HAL_GPIO_Init+0x300>)
 8004744:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004748:	6453      	str	r3, [r2, #68]	@ 0x44
 800474a:	4b5a      	ldr	r3, [pc, #360]	@ (80048b4 <HAL_GPIO_Init+0x300>)
 800474c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004756:	4a58      	ldr	r2, [pc, #352]	@ (80048b8 <HAL_GPIO_Init+0x304>)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	089b      	lsrs	r3, r3, #2
 800475c:	3302      	adds	r3, #2
 800475e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	220f      	movs	r2, #15
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	43db      	mvns	r3, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4013      	ands	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a4f      	ldr	r2, [pc, #316]	@ (80048bc <HAL_GPIO_Init+0x308>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d025      	beq.n	80047ce <HAL_GPIO_Init+0x21a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a4e      	ldr	r2, [pc, #312]	@ (80048c0 <HAL_GPIO_Init+0x30c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d01f      	beq.n	80047ca <HAL_GPIO_Init+0x216>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a4d      	ldr	r2, [pc, #308]	@ (80048c4 <HAL_GPIO_Init+0x310>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d019      	beq.n	80047c6 <HAL_GPIO_Init+0x212>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a4c      	ldr	r2, [pc, #304]	@ (80048c8 <HAL_GPIO_Init+0x314>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d013      	beq.n	80047c2 <HAL_GPIO_Init+0x20e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a4b      	ldr	r2, [pc, #300]	@ (80048cc <HAL_GPIO_Init+0x318>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00d      	beq.n	80047be <HAL_GPIO_Init+0x20a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a4a      	ldr	r2, [pc, #296]	@ (80048d0 <HAL_GPIO_Init+0x31c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d007      	beq.n	80047ba <HAL_GPIO_Init+0x206>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a49      	ldr	r2, [pc, #292]	@ (80048d4 <HAL_GPIO_Init+0x320>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d101      	bne.n	80047b6 <HAL_GPIO_Init+0x202>
 80047b2:	2306      	movs	r3, #6
 80047b4:	e00c      	b.n	80047d0 <HAL_GPIO_Init+0x21c>
 80047b6:	2307      	movs	r3, #7
 80047b8:	e00a      	b.n	80047d0 <HAL_GPIO_Init+0x21c>
 80047ba:	2305      	movs	r3, #5
 80047bc:	e008      	b.n	80047d0 <HAL_GPIO_Init+0x21c>
 80047be:	2304      	movs	r3, #4
 80047c0:	e006      	b.n	80047d0 <HAL_GPIO_Init+0x21c>
 80047c2:	2303      	movs	r3, #3
 80047c4:	e004      	b.n	80047d0 <HAL_GPIO_Init+0x21c>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e002      	b.n	80047d0 <HAL_GPIO_Init+0x21c>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <HAL_GPIO_Init+0x21c>
 80047ce:	2300      	movs	r3, #0
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	f002 0203 	and.w	r2, r2, #3
 80047d6:	0092      	lsls	r2, r2, #2
 80047d8:	4093      	lsls	r3, r2
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047e0:	4935      	ldr	r1, [pc, #212]	@ (80048b8 <HAL_GPIO_Init+0x304>)
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	089b      	lsrs	r3, r3, #2
 80047e6:	3302      	adds	r3, #2
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047ee:	4b3a      	ldr	r3, [pc, #232]	@ (80048d8 <HAL_GPIO_Init+0x324>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	43db      	mvns	r3, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4013      	ands	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004812:	4a31      	ldr	r2, [pc, #196]	@ (80048d8 <HAL_GPIO_Init+0x324>)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004818:	4b2f      	ldr	r3, [pc, #188]	@ (80048d8 <HAL_GPIO_Init+0x324>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	43db      	mvns	r3, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4013      	ands	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800483c:	4a26      	ldr	r2, [pc, #152]	@ (80048d8 <HAL_GPIO_Init+0x324>)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004842:	4b25      	ldr	r3, [pc, #148]	@ (80048d8 <HAL_GPIO_Init+0x324>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	43db      	mvns	r3, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4013      	ands	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004866:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <HAL_GPIO_Init+0x324>)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800486c:	4b1a      	ldr	r3, [pc, #104]	@ (80048d8 <HAL_GPIO_Init+0x324>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	43db      	mvns	r3, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4013      	ands	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004890:	4a11      	ldr	r2, [pc, #68]	@ (80048d8 <HAL_GPIO_Init+0x324>)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3301      	adds	r3, #1
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b0f      	cmp	r3, #15
 80048a0:	f67f ae96 	bls.w	80045d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	3724      	adds	r7, #36	@ 0x24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40013800 	.word	0x40013800
 80048bc:	40020000 	.word	0x40020000
 80048c0:	40020400 	.word	0x40020400
 80048c4:	40020800 	.word	0x40020800
 80048c8:	40020c00 	.word	0x40020c00
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40021400 	.word	0x40021400
 80048d4:	40021800 	.word	0x40021800
 80048d8:	40013c00 	.word	0x40013c00

080048dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	807b      	strh	r3, [r7, #2]
 80048e8:	4613      	mov	r3, r2
 80048ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048ec:	787b      	ldrb	r3, [r7, #1]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048f2:	887a      	ldrh	r2, [r7, #2]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048f8:	e003      	b.n	8004902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048fa:	887b      	ldrh	r3, [r7, #2]
 80048fc:	041a      	lsls	r2, r3, #16
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	619a      	str	r2, [r3, #24]
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800490e:	b480      	push	{r7}
 8004910:	b085      	sub	sp, #20
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004920:	887a      	ldrh	r2, [r7, #2]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4013      	ands	r3, r2
 8004926:	041a      	lsls	r2, r3, #16
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	43d9      	mvns	r1, r3
 800492c:	887b      	ldrh	r3, [r7, #2]
 800492e:	400b      	ands	r3, r1
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	619a      	str	r2, [r3, #24]
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800494e:	4b08      	ldr	r3, [pc, #32]	@ (8004970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800495a:	4a05      	ldr	r2, [pc, #20]	@ (8004970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fc fe4a 	bl	80015fc <HAL_GPIO_EXTI_Callback>
  }
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40013c00 	.word	0x40013c00

08004974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e0cc      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004988:	4b68      	ldr	r3, [pc, #416]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d90c      	bls.n	80049b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004996:	4b65      	ldr	r3, [pc, #404]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b63      	ldr	r3, [pc, #396]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0b8      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c8:	4b59      	ldr	r3, [pc, #356]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4a58      	ldr	r2, [pc, #352]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e0:	4b53      	ldr	r3, [pc, #332]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	4a52      	ldr	r2, [pc, #328]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b50      	ldr	r3, [pc, #320]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	494d      	ldr	r1, [pc, #308]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d044      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b47      	ldr	r3, [pc, #284]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d119      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d003      	beq.n	8004a32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a32:	4b3f      	ldr	r3, [pc, #252]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e06f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a42:	4b3b      	ldr	r3, [pc, #236]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e067      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a52:	4b37      	ldr	r3, [pc, #220]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f023 0203 	bic.w	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4934      	ldr	r1, [pc, #208]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a64:	f7ff f854 	bl	8003b10 <HAL_GetTick>
 8004a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6a:	e00a      	b.n	8004a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6c:	f7ff f850 	bl	8003b10 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e04f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a82:	4b2b      	ldr	r3, [pc, #172]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 020c 	and.w	r2, r3, #12
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d1eb      	bne.n	8004a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a94:	4b25      	ldr	r3, [pc, #148]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d20c      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	4b22      	ldr	r3, [pc, #136]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b20      	ldr	r3, [pc, #128]	@ (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e032      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac8:	4b19      	ldr	r3, [pc, #100]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4916      	ldr	r1, [pc, #88]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ae6:	4b12      	ldr	r3, [pc, #72]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	490e      	ldr	r1, [pc, #56]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004afa:	f000 f855 	bl	8004ba8 <HAL_RCC_GetSysClockFreq>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	490a      	ldr	r1, [pc, #40]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004b0c:	5ccb      	ldrb	r3, [r1, r3]
 8004b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b12:	4a09      	ldr	r2, [pc, #36]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b16:	4b09      	ldr	r3, [pc, #36]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe ffb4 	bl	8003a88 <HAL_InitTick>

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40023c00 	.word	0x40023c00
 8004b30:	40023800 	.word	0x40023800
 8004b34:	08009d44 	.word	0x08009d44
 8004b38:	20000004 	.word	0x20000004
 8004b3c:	200003c0 	.word	0x200003c0

08004b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b44:	4b03      	ldr	r3, [pc, #12]	@ (8004b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b46:	681b      	ldr	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	20000004 	.word	0x20000004

08004b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b5c:	f7ff fff0 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 8004b60:	4602      	mov	r2, r0
 8004b62:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	0a9b      	lsrs	r3, r3, #10
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	4903      	ldr	r1, [pc, #12]	@ (8004b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b6e:	5ccb      	ldrb	r3, [r1, r3]
 8004b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	08009d54 	.word	0x08009d54

08004b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b84:	f7ff ffdc 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	0b5b      	lsrs	r3, r3, #13
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	4903      	ldr	r1, [pc, #12]	@ (8004ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b96:	5ccb      	ldrb	r3, [r1, r3]
 8004b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	08009d54 	.word	0x08009d54

08004ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bac:	b0ae      	sub	sp, #184	@ 0xb8
 8004bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bce:	4bcb      	ldr	r3, [pc, #812]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x354>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 030c 	and.w	r3, r3, #12
 8004bd6:	2b0c      	cmp	r3, #12
 8004bd8:	f200 8206 	bhi.w	8004fe8 <HAL_RCC_GetSysClockFreq+0x440>
 8004bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004be4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004c19 	.word	0x08004c19
 8004be8:	08004fe9 	.word	0x08004fe9
 8004bec:	08004fe9 	.word	0x08004fe9
 8004bf0:	08004fe9 	.word	0x08004fe9
 8004bf4:	08004c21 	.word	0x08004c21
 8004bf8:	08004fe9 	.word	0x08004fe9
 8004bfc:	08004fe9 	.word	0x08004fe9
 8004c00:	08004fe9 	.word	0x08004fe9
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004fe9 	.word	0x08004fe9
 8004c0c:	08004fe9 	.word	0x08004fe9
 8004c10:	08004fe9 	.word	0x08004fe9
 8004c14:	08004e19 	.word	0x08004e19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c18:	4bb9      	ldr	r3, [pc, #740]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c1e:	e1e7      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c20:	4bb8      	ldr	r3, [pc, #736]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004c22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c26:	e1e3      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c28:	4bb4      	ldr	r3, [pc, #720]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x354>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c34:	4bb1      	ldr	r3, [pc, #708]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x354>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d071      	beq.n	8004d24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c40:	4bae      	ldr	r3, [pc, #696]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x354>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	099b      	lsrs	r3, r3, #6
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c4c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004c50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c66:	4622      	mov	r2, r4
 8004c68:	462b      	mov	r3, r5
 8004c6a:	f04f 0000 	mov.w	r0, #0
 8004c6e:	f04f 0100 	mov.w	r1, #0
 8004c72:	0159      	lsls	r1, r3, #5
 8004c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c78:	0150      	lsls	r0, r2, #5
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4621      	mov	r1, r4
 8004c80:	1a51      	subs	r1, r2, r1
 8004c82:	6439      	str	r1, [r7, #64]	@ 0x40
 8004c84:	4629      	mov	r1, r5
 8004c86:	eb63 0301 	sbc.w	r3, r3, r1
 8004c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004c98:	4649      	mov	r1, r9
 8004c9a:	018b      	lsls	r3, r1, #6
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ca2:	4641      	mov	r1, r8
 8004ca4:	018a      	lsls	r2, r1, #6
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	1a51      	subs	r1, r2, r1
 8004caa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004cac:	4649      	mov	r1, r9
 8004cae:	eb63 0301 	sbc.w	r3, r3, r1
 8004cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	00cb      	lsls	r3, r1, #3
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cca:	4641      	mov	r1, r8
 8004ccc:	00ca      	lsls	r2, r1, #3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	189b      	adds	r3, r3, r2
 8004cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cda:	462b      	mov	r3, r5
 8004cdc:	460a      	mov	r2, r1
 8004cde:	eb42 0303 	adc.w	r3, r2, r3
 8004ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	024b      	lsls	r3, r1, #9
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	024a      	lsls	r2, r1, #9
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004d14:	f7fb ffe8 	bl	8000ce8 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d22:	e067      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d24:	4b75      	ldr	r3, [pc, #468]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x354>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	099b      	lsrs	r3, r3, #6
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d30:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d3e:	2300      	movs	r3, #0
 8004d40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004d46:	4622      	mov	r2, r4
 8004d48:	462b      	mov	r3, r5
 8004d4a:	f04f 0000 	mov.w	r0, #0
 8004d4e:	f04f 0100 	mov.w	r1, #0
 8004d52:	0159      	lsls	r1, r3, #5
 8004d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d58:	0150      	lsls	r0, r2, #5
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4621      	mov	r1, r4
 8004d60:	1a51      	subs	r1, r2, r1
 8004d62:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d64:	4629      	mov	r1, r5
 8004d66:	eb63 0301 	sbc.w	r3, r3, r1
 8004d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004d78:	4649      	mov	r1, r9
 8004d7a:	018b      	lsls	r3, r1, #6
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d82:	4641      	mov	r1, r8
 8004d84:	018a      	lsls	r2, r1, #6
 8004d86:	4641      	mov	r1, r8
 8004d88:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004da2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004da6:	4692      	mov	sl, r2
 8004da8:	469b      	mov	fp, r3
 8004daa:	4623      	mov	r3, r4
 8004dac:	eb1a 0303 	adds.w	r3, sl, r3
 8004db0:	623b      	str	r3, [r7, #32]
 8004db2:	462b      	mov	r3, r5
 8004db4:	eb4b 0303 	adc.w	r3, fp, r3
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	028b      	lsls	r3, r1, #10
 8004dca:	4621      	mov	r1, r4
 8004dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	028a      	lsls	r2, r1, #10
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ddc:	2200      	movs	r2, #0
 8004dde:	673b      	str	r3, [r7, #112]	@ 0x70
 8004de0:	677a      	str	r2, [r7, #116]	@ 0x74
 8004de2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004de6:	f7fb ff7f 	bl	8000ce8 <__aeabi_uldivmod>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4613      	mov	r3, r2
 8004df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004df4:	4b41      	ldr	r3, [pc, #260]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x354>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	3301      	adds	r3, #1
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004e06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e16:	e0eb      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e18:	4b38      	ldr	r3, [pc, #224]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x354>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e24:	4b35      	ldr	r3, [pc, #212]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x354>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d06b      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e30:	4b32      	ldr	r3, [pc, #200]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x354>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	099b      	lsrs	r3, r3, #6
 8004e36:	2200      	movs	r2, #0
 8004e38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e42:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e44:	2300      	movs	r3, #0
 8004e46:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	462b      	mov	r3, r5
 8004e50:	f04f 0000 	mov.w	r0, #0
 8004e54:	f04f 0100 	mov.w	r1, #0
 8004e58:	0159      	lsls	r1, r3, #5
 8004e5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e5e:	0150      	lsls	r0, r2, #5
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4621      	mov	r1, r4
 8004e66:	1a51      	subs	r1, r2, r1
 8004e68:	61b9      	str	r1, [r7, #24]
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	eb63 0301 	sbc.w	r3, r3, r1
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e7e:	4659      	mov	r1, fp
 8004e80:	018b      	lsls	r3, r1, #6
 8004e82:	4651      	mov	r1, sl
 8004e84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e88:	4651      	mov	r1, sl
 8004e8a:	018a      	lsls	r2, r1, #6
 8004e8c:	4651      	mov	r1, sl
 8004e8e:	ebb2 0801 	subs.w	r8, r2, r1
 8004e92:	4659      	mov	r1, fp
 8004e94:	eb63 0901 	sbc.w	r9, r3, r1
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eac:	4690      	mov	r8, r2
 8004eae:	4699      	mov	r9, r3
 8004eb0:	4623      	mov	r3, r4
 8004eb2:	eb18 0303 	adds.w	r3, r8, r3
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	462b      	mov	r3, r5
 8004eba:	eb49 0303 	adc.w	r3, r9, r3
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004ecc:	4629      	mov	r1, r5
 8004ece:	024b      	lsls	r3, r1, #9
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	024a      	lsls	r2, r1, #9
 8004eda:	4610      	mov	r0, r2
 8004edc:	4619      	mov	r1, r3
 8004ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ee6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004ee8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004eec:	f7fb fefc 	bl	8000ce8 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004efa:	e065      	b.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x420>
 8004efc:	40023800 	.word	0x40023800
 8004f00:	00f42400 	.word	0x00f42400
 8004f04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f08:	4b3d      	ldr	r3, [pc, #244]	@ (8005000 <HAL_RCC_GetSysClockFreq+0x458>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	099b      	lsrs	r3, r3, #6
 8004f0e:	2200      	movs	r2, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	4611      	mov	r1, r2
 8004f14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f18:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004f22:	4642      	mov	r2, r8
 8004f24:	464b      	mov	r3, r9
 8004f26:	f04f 0000 	mov.w	r0, #0
 8004f2a:	f04f 0100 	mov.w	r1, #0
 8004f2e:	0159      	lsls	r1, r3, #5
 8004f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f34:	0150      	lsls	r0, r2, #5
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4641      	mov	r1, r8
 8004f3c:	1a51      	subs	r1, r2, r1
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	4649      	mov	r1, r9
 8004f42:	eb63 0301 	sbc.w	r3, r3, r1
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004f54:	4659      	mov	r1, fp
 8004f56:	018b      	lsls	r3, r1, #6
 8004f58:	4651      	mov	r1, sl
 8004f5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f5e:	4651      	mov	r1, sl
 8004f60:	018a      	lsls	r2, r1, #6
 8004f62:	4651      	mov	r1, sl
 8004f64:	1a54      	subs	r4, r2, r1
 8004f66:	4659      	mov	r1, fp
 8004f68:	eb63 0501 	sbc.w	r5, r3, r1
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	00eb      	lsls	r3, r5, #3
 8004f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f7a:	00e2      	lsls	r2, r4, #3
 8004f7c:	4614      	mov	r4, r2
 8004f7e:	461d      	mov	r5, r3
 8004f80:	4643      	mov	r3, r8
 8004f82:	18e3      	adds	r3, r4, r3
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	464b      	mov	r3, r9
 8004f88:	eb45 0303 	adc.w	r3, r5, r3
 8004f8c:	607b      	str	r3, [r7, #4]
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	028b      	lsls	r3, r1, #10
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	028a      	lsls	r2, r1, #10
 8004fa8:	4610      	mov	r0, r2
 8004faa:	4619      	mov	r1, r3
 8004fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fb4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004fb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004fba:	f7fb fe95 	bl	8000ce8 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8005000 <HAL_RCC_GetSysClockFreq+0x458>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	0f1b      	lsrs	r3, r3, #28
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004fd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004fe6:	e003      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fe8:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004fea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004fee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	37b8      	adds	r7, #184	@ 0xb8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ffe:	bf00      	nop
 8005000:	40023800 	.word	0x40023800
 8005004:	00f42400 	.word	0x00f42400

08005008 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e28d      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8083 	beq.w	800512e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005028:	4b94      	ldr	r3, [pc, #592]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 030c 	and.w	r3, r3, #12
 8005030:	2b04      	cmp	r3, #4
 8005032:	d019      	beq.n	8005068 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005034:	4b91      	ldr	r3, [pc, #580]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 030c 	and.w	r3, r3, #12
        || \
 800503c:	2b08      	cmp	r3, #8
 800503e:	d106      	bne.n	800504e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005040:	4b8e      	ldr	r3, [pc, #568]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005048:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800504c:	d00c      	beq.n	8005068 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800504e:	4b8b      	ldr	r3, [pc, #556]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d112      	bne.n	8005080 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800505a:	4b88      	ldr	r3, [pc, #544]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005062:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005066:	d10b      	bne.n	8005080 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005068:	4b84      	ldr	r3, [pc, #528]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d05b      	beq.n	800512c <HAL_RCC_OscConfig+0x124>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d157      	bne.n	800512c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e25a      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005088:	d106      	bne.n	8005098 <HAL_RCC_OscConfig+0x90>
 800508a:	4b7c      	ldr	r3, [pc, #496]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a7b      	ldr	r2, [pc, #492]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	e01d      	b.n	80050d4 <HAL_RCC_OscConfig+0xcc>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050a0:	d10c      	bne.n	80050bc <HAL_RCC_OscConfig+0xb4>
 80050a2:	4b76      	ldr	r3, [pc, #472]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a75      	ldr	r2, [pc, #468]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 80050a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	4b73      	ldr	r3, [pc, #460]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a72      	ldr	r2, [pc, #456]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 80050b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	e00b      	b.n	80050d4 <HAL_RCC_OscConfig+0xcc>
 80050bc:	4b6f      	ldr	r3, [pc, #444]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a6e      	ldr	r2, [pc, #440]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 80050c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	4b6c      	ldr	r3, [pc, #432]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a6b      	ldr	r2, [pc, #428]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 80050ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d013      	beq.n	8005104 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050dc:	f7fe fd18 	bl	8003b10 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e4:	f7fe fd14 	bl	8003b10 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b64      	cmp	r3, #100	@ 0x64
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e21f      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f6:	4b61      	ldr	r3, [pc, #388]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0f0      	beq.n	80050e4 <HAL_RCC_OscConfig+0xdc>
 8005102:	e014      	b.n	800512e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fe fd04 	bl	8003b10 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800510c:	f7fe fd00 	bl	8003b10 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b64      	cmp	r3, #100	@ 0x64
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e20b      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800511e:	4b57      	ldr	r3, [pc, #348]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x104>
 800512a:	e000      	b.n	800512e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800512c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d06f      	beq.n	800521a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800513a:	4b50      	ldr	r3, [pc, #320]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
 8005142:	2b00      	cmp	r3, #0
 8005144:	d017      	beq.n	8005176 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005146:	4b4d      	ldr	r3, [pc, #308]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
        || \
 800514e:	2b08      	cmp	r3, #8
 8005150:	d105      	bne.n	800515e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005152:	4b4a      	ldr	r3, [pc, #296]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800515e:	4b47      	ldr	r3, [pc, #284]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005166:	2b0c      	cmp	r3, #12
 8005168:	d11c      	bne.n	80051a4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800516a:	4b44      	ldr	r3, [pc, #272]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d116      	bne.n	80051a4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005176:	4b41      	ldr	r3, [pc, #260]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_RCC_OscConfig+0x186>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d001      	beq.n	800518e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e1d3      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518e:	4b3b      	ldr	r3, [pc, #236]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	4937      	ldr	r1, [pc, #220]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051a2:	e03a      	b.n	800521a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d020      	beq.n	80051ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051ac:	4b34      	ldr	r3, [pc, #208]	@ (8005280 <HAL_RCC_OscConfig+0x278>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b2:	f7fe fcad 	bl	8003b10 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ba:	f7fe fca9 	bl	8003b10 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e1b4      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051cc:	4b2b      	ldr	r3, [pc, #172]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0f0      	beq.n	80051ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d8:	4b28      	ldr	r3, [pc, #160]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	4925      	ldr	r1, [pc, #148]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	600b      	str	r3, [r1, #0]
 80051ec:	e015      	b.n	800521a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ee:	4b24      	ldr	r3, [pc, #144]	@ (8005280 <HAL_RCC_OscConfig+0x278>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fe fc8c 	bl	8003b10 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051fc:	f7fe fc88 	bl	8003b10 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e193      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520e:	4b1b      	ldr	r3, [pc, #108]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d036      	beq.n	8005294 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d016      	beq.n	800525c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522e:	4b15      	ldr	r3, [pc, #84]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 8005230:	2201      	movs	r2, #1
 8005232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fe fc6c 	bl	8003b10 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800523c:	f7fe fc68 	bl	8003b10 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e173      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800524e:	4b0b      	ldr	r3, [pc, #44]	@ (800527c <HAL_RCC_OscConfig+0x274>)
 8005250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0f0      	beq.n	800523c <HAL_RCC_OscConfig+0x234>
 800525a:	e01b      	b.n	8005294 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800525c:	4b09      	ldr	r3, [pc, #36]	@ (8005284 <HAL_RCC_OscConfig+0x27c>)
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005262:	f7fe fc55 	bl	8003b10 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005268:	e00e      	b.n	8005288 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800526a:	f7fe fc51 	bl	8003b10 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d907      	bls.n	8005288 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e15c      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
 800527c:	40023800 	.word	0x40023800
 8005280:	42470000 	.word	0x42470000
 8005284:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005288:	4b8a      	ldr	r3, [pc, #552]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 800528a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ea      	bne.n	800526a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8097 	beq.w	80053d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052a2:	2300      	movs	r3, #0
 80052a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a6:	4b83      	ldr	r3, [pc, #524]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10f      	bne.n	80052d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	4b7f      	ldr	r3, [pc, #508]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	4a7e      	ldr	r2, [pc, #504]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 80052bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80052c2:	4b7c      	ldr	r3, [pc, #496]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ce:	2301      	movs	r3, #1
 80052d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d2:	4b79      	ldr	r3, [pc, #484]	@ (80054b8 <HAL_RCC_OscConfig+0x4b0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d118      	bne.n	8005310 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052de:	4b76      	ldr	r3, [pc, #472]	@ (80054b8 <HAL_RCC_OscConfig+0x4b0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a75      	ldr	r2, [pc, #468]	@ (80054b8 <HAL_RCC_OscConfig+0x4b0>)
 80052e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ea:	f7fe fc11 	bl	8003b10 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f2:	f7fe fc0d 	bl	8003b10 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e118      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	4b6c      	ldr	r3, [pc, #432]	@ (80054b8 <HAL_RCC_OscConfig+0x4b0>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0x31e>
 8005318:	4b66      	ldr	r3, [pc, #408]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 800531a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531c:	4a65      	ldr	r2, [pc, #404]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	6713      	str	r3, [r2, #112]	@ 0x70
 8005324:	e01c      	b.n	8005360 <HAL_RCC_OscConfig+0x358>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2b05      	cmp	r3, #5
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x340>
 800532e:	4b61      	ldr	r3, [pc, #388]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005332:	4a60      	ldr	r2, [pc, #384]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 8005334:	f043 0304 	orr.w	r3, r3, #4
 8005338:	6713      	str	r3, [r2, #112]	@ 0x70
 800533a:	4b5e      	ldr	r3, [pc, #376]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533e:	4a5d      	ldr	r2, [pc, #372]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	6713      	str	r3, [r2, #112]	@ 0x70
 8005346:	e00b      	b.n	8005360 <HAL_RCC_OscConfig+0x358>
 8005348:	4b5a      	ldr	r3, [pc, #360]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534c:	4a59      	ldr	r2, [pc, #356]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	6713      	str	r3, [r2, #112]	@ 0x70
 8005354:	4b57      	ldr	r3, [pc, #348]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005358:	4a56      	ldr	r2, [pc, #344]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 800535a:	f023 0304 	bic.w	r3, r3, #4
 800535e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d015      	beq.n	8005394 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005368:	f7fe fbd2 	bl	8003b10 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536e:	e00a      	b.n	8005386 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005370:	f7fe fbce 	bl	8003b10 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e0d7      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005386:	4b4b      	ldr	r3, [pc, #300]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 8005388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0ee      	beq.n	8005370 <HAL_RCC_OscConfig+0x368>
 8005392:	e014      	b.n	80053be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005394:	f7fe fbbc 	bl	8003b10 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800539c:	f7fe fbb8 	bl	8003b10 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e0c1      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b2:	4b40      	ldr	r3, [pc, #256]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1ee      	bne.n	800539c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d105      	bne.n	80053d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c4:	4b3b      	ldr	r3, [pc, #236]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 80053c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c8:	4a3a      	ldr	r2, [pc, #232]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 80053ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80ad 	beq.w	8005534 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053da:	4b36      	ldr	r3, [pc, #216]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d060      	beq.n	80054a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d145      	bne.n	800547a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ee:	4b33      	ldr	r3, [pc, #204]	@ (80054bc <HAL_RCC_OscConfig+0x4b4>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f4:	f7fe fb8c 	bl	8003b10 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053fc:	f7fe fb88 	bl	8003b10 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e093      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540e:	4b29      	ldr	r3, [pc, #164]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f0      	bne.n	80053fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69da      	ldr	r2, [r3, #28]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	019b      	lsls	r3, r3, #6
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	3b01      	subs	r3, #1
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543c:	061b      	lsls	r3, r3, #24
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005444:	071b      	lsls	r3, r3, #28
 8005446:	491b      	ldr	r1, [pc, #108]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 8005448:	4313      	orrs	r3, r2
 800544a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800544c:	4b1b      	ldr	r3, [pc, #108]	@ (80054bc <HAL_RCC_OscConfig+0x4b4>)
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005452:	f7fe fb5d 	bl	8003b10 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545a:	f7fe fb59 	bl	8003b10 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e064      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800546c:	4b11      	ldr	r3, [pc, #68]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0f0      	beq.n	800545a <HAL_RCC_OscConfig+0x452>
 8005478:	e05c      	b.n	8005534 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547a:	4b10      	ldr	r3, [pc, #64]	@ (80054bc <HAL_RCC_OscConfig+0x4b4>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fe fb46 	bl	8003b10 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005488:	f7fe fb42 	bl	8003b10 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e04d      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549a:	4b06      	ldr	r3, [pc, #24]	@ (80054b4 <HAL_RCC_OscConfig+0x4ac>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x480>
 80054a6:	e045      	b.n	8005534 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d107      	bne.n	80054c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e040      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
 80054b4:	40023800 	.word	0x40023800
 80054b8:	40007000 	.word	0x40007000
 80054bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005540 <HAL_RCC_OscConfig+0x538>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d030      	beq.n	8005530 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054d8:	429a      	cmp	r2, r3
 80054da:	d129      	bne.n	8005530 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d122      	bne.n	8005530 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054f0:	4013      	ands	r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d119      	bne.n	8005530 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	3b01      	subs	r3, #1
 800550a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800550c:	429a      	cmp	r2, r3
 800550e:	d10f      	bne.n	8005530 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800551c:	429a      	cmp	r2, r3
 800551e:	d107      	bne.n	8005530 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800552c:	429a      	cmp	r2, r3
 800552e:	d001      	beq.n	8005534 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40023800 	.word	0x40023800

08005544 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e07b      	b.n	800564e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	2b00      	cmp	r3, #0
 800555c:	d108      	bne.n	8005570 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005566:	d009      	beq.n	800557c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	61da      	str	r2, [r3, #28]
 800556e:	e005      	b.n	800557c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fc f88a 	bl	80016b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005600:	ea42 0103 	orr.w	r1, r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005608:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	f003 0104 	and.w	r1, r3, #4
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	f003 0210 	and.w	r2, r3, #16
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69da      	ldr	r2, [r3, #28]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800563c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b088      	sub	sp, #32
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	603b      	str	r3, [r7, #0]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005666:	f7fe fa53 	bl	8003b10 <HAL_GetTick>
 800566a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800566c:	88fb      	ldrh	r3, [r7, #6]
 800566e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d001      	beq.n	8005680 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800567c:	2302      	movs	r3, #2
 800567e:	e12a      	b.n	80058d6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <HAL_SPI_Transmit+0x36>
 8005686:	88fb      	ldrh	r3, [r7, #6]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e122      	b.n	80058d6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_SPI_Transmit+0x48>
 800569a:	2302      	movs	r3, #2
 800569c:	e11b      	b.n	80058d6 <HAL_SPI_Transmit+0x280>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2203      	movs	r2, #3
 80056aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	88fa      	ldrh	r2, [r7, #6]
 80056be:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ec:	d10f      	bne.n	800570e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800570c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005718:	2b40      	cmp	r3, #64	@ 0x40
 800571a:	d007      	beq.n	800572c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800572a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005734:	d152      	bne.n	80057dc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_SPI_Transmit+0xee>
 800573e:	8b7b      	ldrh	r3, [r7, #26]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d145      	bne.n	80057d0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005748:	881a      	ldrh	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005754:	1c9a      	adds	r2, r3, #2
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005768:	e032      	b.n	80057d0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b02      	cmp	r3, #2
 8005776:	d112      	bne.n	800579e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577c:	881a      	ldrh	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005788:	1c9a      	adds	r2, r3, #2
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800579c:	e018      	b.n	80057d0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800579e:	f7fe f9b7 	bl	8003b10 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d803      	bhi.n	80057b6 <HAL_SPI_Transmit+0x160>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057b4:	d102      	bne.n	80057bc <HAL_SPI_Transmit+0x166>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d109      	bne.n	80057d0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e082      	b.n	80058d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1c7      	bne.n	800576a <HAL_SPI_Transmit+0x114>
 80057da:	e053      	b.n	8005884 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_SPI_Transmit+0x194>
 80057e4:	8b7b      	ldrh	r3, [r7, #26]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d147      	bne.n	800587a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	7812      	ldrb	r2, [r2, #0]
 80057f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005810:	e033      	b.n	800587a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b02      	cmp	r3, #2
 800581e:	d113      	bne.n	8005848 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	330c      	adds	r3, #12
 800582a:	7812      	ldrb	r2, [r2, #0]
 800582c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005846:	e018      	b.n	800587a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005848:	f7fe f962 	bl	8003b10 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d803      	bhi.n	8005860 <HAL_SPI_Transmit+0x20a>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800585e:	d102      	bne.n	8005866 <HAL_SPI_Transmit+0x210>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e02d      	b.n	80058d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1c6      	bne.n	8005812 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f8b1 	bl	80059f0 <SPI_EndRxTxTransaction>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80058d4:	2300      	movs	r3, #0
  }
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	4613      	mov	r3, r2
 80058ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058f0:	f7fe f90e 	bl	8003b10 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	4413      	add	r3, r2
 80058fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005900:	f7fe f906 	bl	8003b10 <HAL_GetTick>
 8005904:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005906:	4b39      	ldr	r3, [pc, #228]	@ (80059ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	015b      	lsls	r3, r3, #5
 800590c:	0d1b      	lsrs	r3, r3, #20
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	fb02 f303 	mul.w	r3, r2, r3
 8005914:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005916:	e055      	b.n	80059c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800591e:	d051      	beq.n	80059c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005920:	f7fe f8f6 	bl	8003b10 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	429a      	cmp	r2, r3
 800592e:	d902      	bls.n	8005936 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d13d      	bne.n	80059b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005944:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800594e:	d111      	bne.n	8005974 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005958:	d004      	beq.n	8005964 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005962:	d107      	bne.n	8005974 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005972:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800597c:	d10f      	bne.n	800599e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800599c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e018      	b.n	80059e4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	e002      	b.n	80059c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4013      	ands	r3, r2
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	bf0c      	ite	eq
 80059d4:	2301      	moveq	r3, #1
 80059d6:	2300      	movne	r3, #0
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	461a      	mov	r2, r3
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d19a      	bne.n	8005918 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20000004 	.word	0x20000004

080059f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2201      	movs	r2, #1
 8005a04:	2102      	movs	r1, #2
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f7ff ff6a 	bl	80058e0 <SPI_WaitFlagStateUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e032      	b.n	8005a88 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a22:	4b1b      	ldr	r3, [pc, #108]	@ (8005a90 <SPI_EndRxTxTransaction+0xa0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1b      	ldr	r2, [pc, #108]	@ (8005a94 <SPI_EndRxTxTransaction+0xa4>)
 8005a28:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2c:	0d5b      	lsrs	r3, r3, #21
 8005a2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a32:	fb02 f303 	mul.w	r3, r2, r3
 8005a36:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a40:	d112      	bne.n	8005a68 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2180      	movs	r1, #128	@ 0x80
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f7ff ff47 	bl	80058e0 <SPI_WaitFlagStateUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d016      	beq.n	8005a86 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5c:	f043 0220 	orr.w	r2, r3, #32
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e00f      	b.n	8005a88 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7e:	2b80      	cmp	r3, #128	@ 0x80
 8005a80:	d0f2      	beq.n	8005a68 <SPI_EndRxTxTransaction+0x78>
 8005a82:	e000      	b.n	8005a86 <SPI_EndRxTxTransaction+0x96>
        break;
 8005a84:	bf00      	nop
  }

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000004 	.word	0x20000004
 8005a94:	165e9f81 	.word	0x165e9f81

08005a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e041      	b.n	8005b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fc fa22 	bl	8001f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	f000 fcc4 	bl	8006464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d001      	beq.n	8005b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e04e      	b.n	8005bee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a23      	ldr	r2, [pc, #140]	@ (8005bfc <HAL_TIM_Base_Start_IT+0xc4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d022      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b7a:	d01d      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1f      	ldr	r2, [pc, #124]	@ (8005c00 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d018      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c04 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1c      	ldr	r2, [pc, #112]	@ (8005c08 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8005c0c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d009      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a19      	ldr	r2, [pc, #100]	@ (8005c10 <HAL_TIM_Base_Start_IT+0xd8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a18      	ldr	r2, [pc, #96]	@ (8005c14 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d111      	bne.n	8005bdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b06      	cmp	r3, #6
 8005bc8:	d010      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0201 	orr.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bda:	e007      	b.n	8005bec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800
 8005c08:	40000c00 	.word	0x40000c00
 8005c0c:	40010400 	.word	0x40010400
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40001800 	.word	0x40001800

08005c18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e041      	b.n	8005cae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fc f8ae 	bl	8001da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3304      	adds	r3, #4
 8005c54:	4619      	mov	r1, r3
 8005c56:	4610      	mov	r0, r2
 8005c58:	f000 fc04 	bl	8006464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d109      	bne.n	8005cdc <HAL_TIM_PWM_Start+0x24>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	bf14      	ite	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	2300      	moveq	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	e022      	b.n	8005d22 <HAL_TIM_PWM_Start+0x6a>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d109      	bne.n	8005cf6 <HAL_TIM_PWM_Start+0x3e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	bf14      	ite	ne
 8005cee:	2301      	movne	r3, #1
 8005cf0:	2300      	moveq	r3, #0
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	e015      	b.n	8005d22 <HAL_TIM_PWM_Start+0x6a>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d109      	bne.n	8005d10 <HAL_TIM_PWM_Start+0x58>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	bf14      	ite	ne
 8005d08:	2301      	movne	r3, #1
 8005d0a:	2300      	moveq	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	e008      	b.n	8005d22 <HAL_TIM_PWM_Start+0x6a>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	bf14      	ite	ne
 8005d1c:	2301      	movne	r3, #1
 8005d1e:	2300      	moveq	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e07c      	b.n	8005e24 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <HAL_TIM_PWM_Start+0x82>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d38:	e013      	b.n	8005d62 <HAL_TIM_PWM_Start+0xaa>
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b04      	cmp	r3, #4
 8005d3e:	d104      	bne.n	8005d4a <HAL_TIM_PWM_Start+0x92>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d48:	e00b      	b.n	8005d62 <HAL_TIM_PWM_Start+0xaa>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d104      	bne.n	8005d5a <HAL_TIM_PWM_Start+0xa2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d58:	e003      	b.n	8005d62 <HAL_TIM_PWM_Start+0xaa>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2201      	movs	r2, #1
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fdd0 	bl	8006910 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a2d      	ldr	r2, [pc, #180]	@ (8005e2c <HAL_TIM_PWM_Start+0x174>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <HAL_TIM_PWM_Start+0xcc>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8005e30 <HAL_TIM_PWM_Start+0x178>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d101      	bne.n	8005d88 <HAL_TIM_PWM_Start+0xd0>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <HAL_TIM_PWM_Start+0xd2>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d007      	beq.n	8005d9e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a22      	ldr	r2, [pc, #136]	@ (8005e2c <HAL_TIM_PWM_Start+0x174>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d022      	beq.n	8005dee <HAL_TIM_PWM_Start+0x136>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db0:	d01d      	beq.n	8005dee <HAL_TIM_PWM_Start+0x136>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e34 <HAL_TIM_PWM_Start+0x17c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d018      	beq.n	8005dee <HAL_TIM_PWM_Start+0x136>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e38 <HAL_TIM_PWM_Start+0x180>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <HAL_TIM_PWM_Start+0x136>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1c      	ldr	r2, [pc, #112]	@ (8005e3c <HAL_TIM_PWM_Start+0x184>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00e      	beq.n	8005dee <HAL_TIM_PWM_Start+0x136>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a16      	ldr	r2, [pc, #88]	@ (8005e30 <HAL_TIM_PWM_Start+0x178>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d009      	beq.n	8005dee <HAL_TIM_PWM_Start+0x136>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a18      	ldr	r2, [pc, #96]	@ (8005e40 <HAL_TIM_PWM_Start+0x188>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d004      	beq.n	8005dee <HAL_TIM_PWM_Start+0x136>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a16      	ldr	r2, [pc, #88]	@ (8005e44 <HAL_TIM_PWM_Start+0x18c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d111      	bne.n	8005e12 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b06      	cmp	r3, #6
 8005dfe:	d010      	beq.n	8005e22 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e10:	e007      	b.n	8005e22 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0201 	orr.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40010000 	.word	0x40010000
 8005e30:	40010400 	.word	0x40010400
 8005e34:	40000400 	.word	0x40000400
 8005e38:	40000800 	.word	0x40000800
 8005e3c:	40000c00 	.word	0x40000c00
 8005e40:	40014000 	.word	0x40014000
 8005e44:	40001800 	.word	0x40001800

08005e48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e097      	b.n	8005f8c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7fb ffcb 	bl	8001e0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e8c:	f023 0307 	bic.w	r3, r3, #7
 8005e90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f000 fae1 	bl	8006464 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eca:	f023 0303 	bic.w	r3, r3, #3
 8005ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	021b      	lsls	r3, r3, #8
 8005eda:	4313      	orrs	r3, r2
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005ee8:	f023 030c 	bic.w	r3, r3, #12
 8005eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ef4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	4313      	orrs	r3, r2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	011a      	lsls	r2, r3, #4
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	031b      	lsls	r3, r3, #12
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fa4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005fbc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d110      	bne.n	8005fe6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d102      	bne.n	8005fd0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fca:	7b7b      	ldrb	r3, [r7, #13]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d001      	beq.n	8005fd4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e069      	b.n	80060a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fe4:	e031      	b.n	800604a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d110      	bne.n	800600e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d102      	bne.n	8005ff8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ff2:	7b3b      	ldrb	r3, [r7, #12]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d001      	beq.n	8005ffc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e055      	b.n	80060a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800600c:	e01d      	b.n	800604a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d108      	bne.n	8006026 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006014:	7bbb      	ldrb	r3, [r7, #14]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d105      	bne.n	8006026 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800601a:	7b7b      	ldrb	r3, [r7, #13]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d102      	bne.n	8006026 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006020:	7b3b      	ldrb	r3, [r7, #12]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d001      	beq.n	800602a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e03e      	b.n	80060a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2202      	movs	r2, #2
 800602e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2202      	movs	r2, #2
 8006036:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_TIM_Encoder_Start+0xc4>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b04      	cmp	r3, #4
 8006054:	d008      	beq.n	8006068 <HAL_TIM_Encoder_Start+0xd4>
 8006056:	e00f      	b.n	8006078 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2201      	movs	r2, #1
 800605e:	2100      	movs	r1, #0
 8006060:	4618      	mov	r0, r3
 8006062:	f000 fc55 	bl	8006910 <TIM_CCxChannelCmd>
      break;
 8006066:	e016      	b.n	8006096 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2201      	movs	r2, #1
 800606e:	2104      	movs	r1, #4
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fc4d 	bl	8006910 <TIM_CCxChannelCmd>
      break;
 8006076:	e00e      	b.n	8006096 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2201      	movs	r2, #1
 800607e:	2100      	movs	r1, #0
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fc45 	bl	8006910 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2201      	movs	r2, #1
 800608c:	2104      	movs	r1, #4
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fc3e 	bl	8006910 <TIM_CCxChannelCmd>
      break;
 8006094:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d020      	beq.n	8006114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01b      	beq.n	8006114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0202 	mvn.w	r2, #2
 80060e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f994 	bl	8006428 <HAL_TIM_IC_CaptureCallback>
 8006100:	e005      	b.n	800610e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f986 	bl	8006414 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f997 	bl	800643c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	d020      	beq.n	8006160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01b      	beq.n	8006160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0204 	mvn.w	r2, #4
 8006130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f96e 	bl	8006428 <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f960 	bl	8006414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f971 	bl	800643c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d020      	beq.n	80061ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01b      	beq.n	80061ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0208 	mvn.w	r2, #8
 800617c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2204      	movs	r2, #4
 8006182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f948 	bl	8006428 <HAL_TIM_IC_CaptureCallback>
 8006198:	e005      	b.n	80061a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f93a 	bl	8006414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f94b 	bl	800643c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d020      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01b      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0210 	mvn.w	r2, #16
 80061c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2208      	movs	r2, #8
 80061ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f922 	bl	8006428 <HAL_TIM_IC_CaptureCallback>
 80061e4:	e005      	b.n	80061f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f914 	bl	8006414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f925 	bl	800643c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00c      	beq.n	800621c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0201 	mvn.w	r2, #1
 8006214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fb f9c0 	bl	800159c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00c      	beq.n	8006240 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fc14 	bl	8006a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00c      	beq.n	8006264 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800625c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f8f6 	bl	8006450 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00c      	beq.n	8006288 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b00      	cmp	r3, #0
 8006276:	d007      	beq.n	8006288 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0220 	mvn.w	r2, #32
 8006280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fbe6 	bl	8006a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062aa:	2302      	movs	r3, #2
 80062ac:	e0ae      	b.n	800640c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b0c      	cmp	r3, #12
 80062ba:	f200 809f 	bhi.w	80063fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062be:	a201      	add	r2, pc, #4	@ (adr r2, 80062c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c4:	080062f9 	.word	0x080062f9
 80062c8:	080063fd 	.word	0x080063fd
 80062cc:	080063fd 	.word	0x080063fd
 80062d0:	080063fd 	.word	0x080063fd
 80062d4:	08006339 	.word	0x08006339
 80062d8:	080063fd 	.word	0x080063fd
 80062dc:	080063fd 	.word	0x080063fd
 80062e0:	080063fd 	.word	0x080063fd
 80062e4:	0800637b 	.word	0x0800637b
 80062e8:	080063fd 	.word	0x080063fd
 80062ec:	080063fd 	.word	0x080063fd
 80062f0:	080063fd 	.word	0x080063fd
 80062f4:	080063bb 	.word	0x080063bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 f956 	bl	80065b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0208 	orr.w	r2, r2, #8
 8006312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0204 	bic.w	r2, r2, #4
 8006322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6999      	ldr	r1, [r3, #24]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	691a      	ldr	r2, [r3, #16]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	619a      	str	r2, [r3, #24]
      break;
 8006336:	e064      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 f9a6 	bl	8006690 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6999      	ldr	r1, [r3, #24]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	021a      	lsls	r2, r3, #8
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	619a      	str	r2, [r3, #24]
      break;
 8006378:	e043      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	4618      	mov	r0, r3
 8006382:	f000 f9fb 	bl	800677c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69da      	ldr	r2, [r3, #28]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f042 0208 	orr.w	r2, r2, #8
 8006394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0204 	bic.w	r2, r2, #4
 80063a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69d9      	ldr	r1, [r3, #28]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	691a      	ldr	r2, [r3, #16]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	61da      	str	r2, [r3, #28]
      break;
 80063b8:	e023      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fa4f 	bl	8006864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69da      	ldr	r2, [r3, #28]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69d9      	ldr	r1, [r3, #28]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	021a      	lsls	r2, r3, #8
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	61da      	str	r2, [r3, #28]
      break;
 80063fa:	e002      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800640a:	7dfb      	ldrb	r3, [r7, #23]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a43      	ldr	r2, [pc, #268]	@ (8006584 <TIM_Base_SetConfig+0x120>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d013      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006482:	d00f      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a40      	ldr	r2, [pc, #256]	@ (8006588 <TIM_Base_SetConfig+0x124>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00b      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a3f      	ldr	r2, [pc, #252]	@ (800658c <TIM_Base_SetConfig+0x128>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d007      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a3e      	ldr	r2, [pc, #248]	@ (8006590 <TIM_Base_SetConfig+0x12c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a3d      	ldr	r2, [pc, #244]	@ (8006594 <TIM_Base_SetConfig+0x130>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d108      	bne.n	80064b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a32      	ldr	r2, [pc, #200]	@ (8006584 <TIM_Base_SetConfig+0x120>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d02b      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c4:	d027      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a2f      	ldr	r2, [pc, #188]	@ (8006588 <TIM_Base_SetConfig+0x124>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d023      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a2e      	ldr	r2, [pc, #184]	@ (800658c <TIM_Base_SetConfig+0x128>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d01f      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006590 <TIM_Base_SetConfig+0x12c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01b      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006594 <TIM_Base_SetConfig+0x130>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d017      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006598 <TIM_Base_SetConfig+0x134>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a2a      	ldr	r2, [pc, #168]	@ (800659c <TIM_Base_SetConfig+0x138>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00f      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a29      	ldr	r2, [pc, #164]	@ (80065a0 <TIM_Base_SetConfig+0x13c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00b      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a28      	ldr	r2, [pc, #160]	@ (80065a4 <TIM_Base_SetConfig+0x140>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d007      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a27      	ldr	r2, [pc, #156]	@ (80065a8 <TIM_Base_SetConfig+0x144>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a26      	ldr	r2, [pc, #152]	@ (80065ac <TIM_Base_SetConfig+0x148>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d108      	bne.n	8006528 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800651c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a0e      	ldr	r2, [pc, #56]	@ (8006584 <TIM_Base_SetConfig+0x120>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d003      	beq.n	8006556 <TIM_Base_SetConfig+0xf2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a10      	ldr	r2, [pc, #64]	@ (8006594 <TIM_Base_SetConfig+0x130>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d103      	bne.n	800655e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f043 0204 	orr.w	r2, r3, #4
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]
}
 8006576:	bf00      	nop
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40010000 	.word	0x40010000
 8006588:	40000400 	.word	0x40000400
 800658c:	40000800 	.word	0x40000800
 8006590:	40000c00 	.word	0x40000c00
 8006594:	40010400 	.word	0x40010400
 8006598:	40014000 	.word	0x40014000
 800659c:	40014400 	.word	0x40014400
 80065a0:	40014800 	.word	0x40014800
 80065a4:	40001800 	.word	0x40001800
 80065a8:	40001c00 	.word	0x40001c00
 80065ac:	40002000 	.word	0x40002000

080065b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	f023 0201 	bic.w	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f023 0302 	bic.w	r3, r3, #2
 80065f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a20      	ldr	r2, [pc, #128]	@ (8006688 <TIM_OC1_SetConfig+0xd8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_OC1_SetConfig+0x64>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a1f      	ldr	r2, [pc, #124]	@ (800668c <TIM_OC1_SetConfig+0xdc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d10c      	bne.n	800662e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f023 0308 	bic.w	r3, r3, #8
 800661a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f023 0304 	bic.w	r3, r3, #4
 800662c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a15      	ldr	r2, [pc, #84]	@ (8006688 <TIM_OC1_SetConfig+0xd8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_OC1_SetConfig+0x8e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a14      	ldr	r2, [pc, #80]	@ (800668c <TIM_OC1_SetConfig+0xdc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d111      	bne.n	8006662 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800664c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	621a      	str	r2, [r3, #32]
}
 800667c:	bf00      	nop
 800667e:	371c      	adds	r7, #28
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	40010000 	.word	0x40010000
 800668c:	40010400 	.word	0x40010400

08006690 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	f023 0210 	bic.w	r2, r3, #16
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f023 0320 	bic.w	r3, r3, #32
 80066da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a22      	ldr	r2, [pc, #136]	@ (8006774 <TIM_OC2_SetConfig+0xe4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d003      	beq.n	80066f8 <TIM_OC2_SetConfig+0x68>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a21      	ldr	r2, [pc, #132]	@ (8006778 <TIM_OC2_SetConfig+0xe8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d10d      	bne.n	8006714 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006712:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a17      	ldr	r2, [pc, #92]	@ (8006774 <TIM_OC2_SetConfig+0xe4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC2_SetConfig+0x94>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a16      	ldr	r2, [pc, #88]	@ (8006778 <TIM_OC2_SetConfig+0xe8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d113      	bne.n	800674c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800672a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40010000 	.word	0x40010000
 8006778:	40010400 	.word	0x40010400

0800677c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a21      	ldr	r2, [pc, #132]	@ (800685c <TIM_OC3_SetConfig+0xe0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d003      	beq.n	80067e2 <TIM_OC3_SetConfig+0x66>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a20      	ldr	r2, [pc, #128]	@ (8006860 <TIM_OC3_SetConfig+0xe4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10d      	bne.n	80067fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a16      	ldr	r2, [pc, #88]	@ (800685c <TIM_OC3_SetConfig+0xe0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d003      	beq.n	800680e <TIM_OC3_SetConfig+0x92>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a15      	ldr	r2, [pc, #84]	@ (8006860 <TIM_OC3_SetConfig+0xe4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d113      	bne.n	8006836 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800681c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	621a      	str	r2, [r3, #32]
}
 8006850:	bf00      	nop
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	40010000 	.word	0x40010000
 8006860:	40010400 	.word	0x40010400

08006864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	031b      	lsls	r3, r3, #12
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a12      	ldr	r2, [pc, #72]	@ (8006908 <TIM_OC4_SetConfig+0xa4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC4_SetConfig+0x68>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a11      	ldr	r2, [pc, #68]	@ (800690c <TIM_OC4_SetConfig+0xa8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d109      	bne.n	80068e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	019b      	lsls	r3, r3, #6
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40010000 	.word	0x40010000
 800690c:	40010400 	.word	0x40010400

08006910 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	2201      	movs	r2, #1
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a1a      	ldr	r2, [r3, #32]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	43db      	mvns	r3, r3
 8006932:	401a      	ands	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1a      	ldr	r2, [r3, #32]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f003 031f 	and.w	r3, r3, #31
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	fa01 f303 	lsl.w	r3, r1, r3
 8006948:	431a      	orrs	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
	...

0800695c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006970:	2302      	movs	r3, #2
 8006972:	e05a      	b.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a21      	ldr	r2, [pc, #132]	@ (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d022      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c0:	d01d      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1d      	ldr	r2, [pc, #116]	@ (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d018      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d013      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a1a      	ldr	r2, [pc, #104]	@ (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00e      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a18      	ldr	r2, [pc, #96]	@ (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d009      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a17      	ldr	r2, [pc, #92]	@ (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d004      	beq.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a15      	ldr	r2, [pc, #84]	@ (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d10c      	bne.n	8006a18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	40010000 	.word	0x40010000
 8006a3c:	40000400 	.word	0x40000400
 8006a40:	40000800 	.word	0x40000800
 8006a44:	40000c00 	.word	0x40000c00
 8006a48:	40010400 	.word	0x40010400
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	40001800 	.word	0x40001800

08006a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e042      	b.n	8006b14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d106      	bne.n	8006aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fb fafe 	bl	80020a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2224      	movs	r2, #36	@ 0x24
 8006aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f82b 	bl	8006b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691a      	ldr	r2, [r3, #16]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	695a      	ldr	r2, [r3, #20]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b20:	b0c0      	sub	sp, #256	@ 0x100
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b38:	68d9      	ldr	r1, [r3, #12]
 8006b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	ea40 0301 	orr.w	r3, r0, r1
 8006b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b74:	f021 010c 	bic.w	r1, r1, #12
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b82:	430b      	orrs	r3, r1
 8006b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b96:	6999      	ldr	r1, [r3, #24]
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	ea40 0301 	orr.w	r3, r0, r1
 8006ba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b8f      	ldr	r3, [pc, #572]	@ (8006de8 <UART_SetConfig+0x2cc>)
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d005      	beq.n	8006bbc <UART_SetConfig+0xa0>
 8006bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	4b8d      	ldr	r3, [pc, #564]	@ (8006dec <UART_SetConfig+0x2d0>)
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d104      	bne.n	8006bc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bbc:	f7fd ffe0 	bl	8004b80 <HAL_RCC_GetPCLK2Freq>
 8006bc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006bc4:	e003      	b.n	8006bce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bc6:	f7fd ffc7 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8006bca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bd8:	f040 810c 	bne.w	8006df4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006be0:	2200      	movs	r2, #0
 8006be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006be6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006bea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006bee:	4622      	mov	r2, r4
 8006bf0:	462b      	mov	r3, r5
 8006bf2:	1891      	adds	r1, r2, r2
 8006bf4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006bf6:	415b      	adcs	r3, r3
 8006bf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006bfe:	4621      	mov	r1, r4
 8006c00:	eb12 0801 	adds.w	r8, r2, r1
 8006c04:	4629      	mov	r1, r5
 8006c06:	eb43 0901 	adc.w	r9, r3, r1
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	f04f 0300 	mov.w	r3, #0
 8006c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c1e:	4690      	mov	r8, r2
 8006c20:	4699      	mov	r9, r3
 8006c22:	4623      	mov	r3, r4
 8006c24:	eb18 0303 	adds.w	r3, r8, r3
 8006c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c2c:	462b      	mov	r3, r5
 8006c2e:	eb49 0303 	adc.w	r3, r9, r3
 8006c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	18db      	adds	r3, r3, r3
 8006c4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c50:	4613      	mov	r3, r2
 8006c52:	eb42 0303 	adc.w	r3, r2, r3
 8006c56:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c60:	f7fa f842 	bl	8000ce8 <__aeabi_uldivmod>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4b61      	ldr	r3, [pc, #388]	@ (8006df0 <UART_SetConfig+0x2d4>)
 8006c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	011c      	lsls	r4, r3, #4
 8006c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c84:	4642      	mov	r2, r8
 8006c86:	464b      	mov	r3, r9
 8006c88:	1891      	adds	r1, r2, r2
 8006c8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c8c:	415b      	adcs	r3, r3
 8006c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c94:	4641      	mov	r1, r8
 8006c96:	eb12 0a01 	adds.w	sl, r2, r1
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	eb43 0b01 	adc.w	fp, r3, r1
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cb4:	4692      	mov	sl, r2
 8006cb6:	469b      	mov	fp, r3
 8006cb8:	4643      	mov	r3, r8
 8006cba:	eb1a 0303 	adds.w	r3, sl, r3
 8006cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8006cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006cdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	18db      	adds	r3, r3, r3
 8006ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	eb42 0303 	adc.w	r3, r2, r3
 8006cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006cf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006cf6:	f7f9 fff7 	bl	8000ce8 <__aeabi_uldivmod>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4611      	mov	r1, r2
 8006d00:	4b3b      	ldr	r3, [pc, #236]	@ (8006df0 <UART_SetConfig+0x2d4>)
 8006d02:	fba3 2301 	umull	r2, r3, r3, r1
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	2264      	movs	r2, #100	@ 0x64
 8006d0a:	fb02 f303 	mul.w	r3, r2, r3
 8006d0e:	1acb      	subs	r3, r1, r3
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d16:	4b36      	ldr	r3, [pc, #216]	@ (8006df0 <UART_SetConfig+0x2d4>)
 8006d18:	fba3 2302 	umull	r2, r3, r3, r2
 8006d1c:	095b      	lsrs	r3, r3, #5
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d24:	441c      	add	r4, r3
 8006d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d38:	4642      	mov	r2, r8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	1891      	adds	r1, r2, r2
 8006d3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d40:	415b      	adcs	r3, r3
 8006d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d48:	4641      	mov	r1, r8
 8006d4a:	1851      	adds	r1, r2, r1
 8006d4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d4e:	4649      	mov	r1, r9
 8006d50:	414b      	adcs	r3, r1
 8006d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	f04f 0300 	mov.w	r3, #0
 8006d5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d60:	4659      	mov	r1, fp
 8006d62:	00cb      	lsls	r3, r1, #3
 8006d64:	4651      	mov	r1, sl
 8006d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d6a:	4651      	mov	r1, sl
 8006d6c:	00ca      	lsls	r2, r1, #3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	4619      	mov	r1, r3
 8006d72:	4603      	mov	r3, r0
 8006d74:	4642      	mov	r2, r8
 8006d76:	189b      	adds	r3, r3, r2
 8006d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d7c:	464b      	mov	r3, r9
 8006d7e:	460a      	mov	r2, r1
 8006d80:	eb42 0303 	adc.w	r3, r2, r3
 8006d84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	18db      	adds	r3, r3, r3
 8006da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006da2:	4613      	mov	r3, r2
 8006da4:	eb42 0303 	adc.w	r3, r2, r3
 8006da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006dae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006db2:	f7f9 ff99 	bl	8000ce8 <__aeabi_uldivmod>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4b0d      	ldr	r3, [pc, #52]	@ (8006df0 <UART_SetConfig+0x2d4>)
 8006dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	2164      	movs	r1, #100	@ 0x64
 8006dc4:	fb01 f303 	mul.w	r3, r1, r3
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	3332      	adds	r3, #50	@ 0x32
 8006dce:	4a08      	ldr	r2, [pc, #32]	@ (8006df0 <UART_SetConfig+0x2d4>)
 8006dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd4:	095b      	lsrs	r3, r3, #5
 8006dd6:	f003 0207 	and.w	r2, r3, #7
 8006dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4422      	add	r2, r4
 8006de2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006de4:	e106      	b.n	8006ff4 <UART_SetConfig+0x4d8>
 8006de6:	bf00      	nop
 8006de8:	40011000 	.word	0x40011000
 8006dec:	40011400 	.word	0x40011400
 8006df0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006dfe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e06:	4642      	mov	r2, r8
 8006e08:	464b      	mov	r3, r9
 8006e0a:	1891      	adds	r1, r2, r2
 8006e0c:	6239      	str	r1, [r7, #32]
 8006e0e:	415b      	adcs	r3, r3
 8006e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e16:	4641      	mov	r1, r8
 8006e18:	1854      	adds	r4, r2, r1
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	eb43 0501 	adc.w	r5, r3, r1
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	00eb      	lsls	r3, r5, #3
 8006e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e2e:	00e2      	lsls	r2, r4, #3
 8006e30:	4614      	mov	r4, r2
 8006e32:	461d      	mov	r5, r3
 8006e34:	4643      	mov	r3, r8
 8006e36:	18e3      	adds	r3, r4, r3
 8006e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	eb45 0303 	adc.w	r3, r5, r3
 8006e42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e56:	f04f 0200 	mov.w	r2, #0
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e62:	4629      	mov	r1, r5
 8006e64:	008b      	lsls	r3, r1, #2
 8006e66:	4621      	mov	r1, r4
 8006e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	008a      	lsls	r2, r1, #2
 8006e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e74:	f7f9 ff38 	bl	8000ce8 <__aeabi_uldivmod>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4b60      	ldr	r3, [pc, #384]	@ (8007000 <UART_SetConfig+0x4e4>)
 8006e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	011c      	lsls	r4, r3, #4
 8006e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e98:	4642      	mov	r2, r8
 8006e9a:	464b      	mov	r3, r9
 8006e9c:	1891      	adds	r1, r2, r2
 8006e9e:	61b9      	str	r1, [r7, #24]
 8006ea0:	415b      	adcs	r3, r3
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ea8:	4641      	mov	r1, r8
 8006eaa:	1851      	adds	r1, r2, r1
 8006eac:	6139      	str	r1, [r7, #16]
 8006eae:	4649      	mov	r1, r9
 8006eb0:	414b      	adcs	r3, r1
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ec0:	4659      	mov	r1, fp
 8006ec2:	00cb      	lsls	r3, r1, #3
 8006ec4:	4651      	mov	r1, sl
 8006ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eca:	4651      	mov	r1, sl
 8006ecc:	00ca      	lsls	r2, r1, #3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	4642      	mov	r2, r8
 8006ed6:	189b      	adds	r3, r3, r2
 8006ed8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006edc:	464b      	mov	r3, r9
 8006ede:	460a      	mov	r2, r1
 8006ee0:	eb42 0303 	adc.w	r3, r2, r3
 8006ee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ef2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	f04f 0300 	mov.w	r3, #0
 8006efc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f00:	4649      	mov	r1, r9
 8006f02:	008b      	lsls	r3, r1, #2
 8006f04:	4641      	mov	r1, r8
 8006f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f0a:	4641      	mov	r1, r8
 8006f0c:	008a      	lsls	r2, r1, #2
 8006f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f12:	f7f9 fee9 	bl	8000ce8 <__aeabi_uldivmod>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	4b38      	ldr	r3, [pc, #224]	@ (8007000 <UART_SetConfig+0x4e4>)
 8006f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	2264      	movs	r2, #100	@ 0x64
 8006f26:	fb02 f303 	mul.w	r3, r2, r3
 8006f2a:	1acb      	subs	r3, r1, r3
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	3332      	adds	r3, #50	@ 0x32
 8006f30:	4a33      	ldr	r2, [pc, #204]	@ (8007000 <UART_SetConfig+0x4e4>)
 8006f32:	fba2 2303 	umull	r2, r3, r2, r3
 8006f36:	095b      	lsrs	r3, r3, #5
 8006f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f3c:	441c      	add	r4, r3
 8006f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f42:	2200      	movs	r2, #0
 8006f44:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f46:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	464b      	mov	r3, r9
 8006f50:	1891      	adds	r1, r2, r2
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	415b      	adcs	r3, r3
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	1851      	adds	r1, r2, r1
 8006f60:	6039      	str	r1, [r7, #0]
 8006f62:	4649      	mov	r1, r9
 8006f64:	414b      	adcs	r3, r1
 8006f66:	607b      	str	r3, [r7, #4]
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	f04f 0300 	mov.w	r3, #0
 8006f70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f74:	4659      	mov	r1, fp
 8006f76:	00cb      	lsls	r3, r1, #3
 8006f78:	4651      	mov	r1, sl
 8006f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f7e:	4651      	mov	r1, sl
 8006f80:	00ca      	lsls	r2, r1, #3
 8006f82:	4610      	mov	r0, r2
 8006f84:	4619      	mov	r1, r3
 8006f86:	4603      	mov	r3, r0
 8006f88:	4642      	mov	r2, r8
 8006f8a:	189b      	adds	r3, r3, r2
 8006f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f8e:	464b      	mov	r3, r9
 8006f90:	460a      	mov	r2, r1
 8006f92:	eb42 0303 	adc.w	r3, r2, r3
 8006f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fa2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	f04f 0300 	mov.w	r3, #0
 8006fac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	008b      	lsls	r3, r1, #2
 8006fb4:	4641      	mov	r1, r8
 8006fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fba:	4641      	mov	r1, r8
 8006fbc:	008a      	lsls	r2, r1, #2
 8006fbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006fc2:	f7f9 fe91 	bl	8000ce8 <__aeabi_uldivmod>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4b0d      	ldr	r3, [pc, #52]	@ (8007000 <UART_SetConfig+0x4e4>)
 8006fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd0:	095b      	lsrs	r3, r3, #5
 8006fd2:	2164      	movs	r1, #100	@ 0x64
 8006fd4:	fb01 f303 	mul.w	r3, r1, r3
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	3332      	adds	r3, #50	@ 0x32
 8006fde:	4a08      	ldr	r2, [pc, #32]	@ (8007000 <UART_SetConfig+0x4e4>)
 8006fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe4:	095b      	lsrs	r3, r3, #5
 8006fe6:	f003 020f 	and.w	r2, r3, #15
 8006fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4422      	add	r2, r4
 8006ff2:	609a      	str	r2, [r3, #8]
}
 8006ff4:	bf00      	nop
 8006ff6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007000:	51eb851f 	.word	0x51eb851f

08007004 <__cvt>:
 8007004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007008:	ec57 6b10 	vmov	r6, r7, d0
 800700c:	2f00      	cmp	r7, #0
 800700e:	460c      	mov	r4, r1
 8007010:	4619      	mov	r1, r3
 8007012:	463b      	mov	r3, r7
 8007014:	bfbb      	ittet	lt
 8007016:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800701a:	461f      	movlt	r7, r3
 800701c:	2300      	movge	r3, #0
 800701e:	232d      	movlt	r3, #45	@ 0x2d
 8007020:	700b      	strb	r3, [r1, #0]
 8007022:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007024:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007028:	4691      	mov	r9, r2
 800702a:	f023 0820 	bic.w	r8, r3, #32
 800702e:	bfbc      	itt	lt
 8007030:	4632      	movlt	r2, r6
 8007032:	4616      	movlt	r6, r2
 8007034:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007038:	d005      	beq.n	8007046 <__cvt+0x42>
 800703a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800703e:	d100      	bne.n	8007042 <__cvt+0x3e>
 8007040:	3401      	adds	r4, #1
 8007042:	2102      	movs	r1, #2
 8007044:	e000      	b.n	8007048 <__cvt+0x44>
 8007046:	2103      	movs	r1, #3
 8007048:	ab03      	add	r3, sp, #12
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	ab02      	add	r3, sp, #8
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	ec47 6b10 	vmov	d0, r6, r7
 8007054:	4653      	mov	r3, sl
 8007056:	4622      	mov	r2, r4
 8007058:	f000 fdf2 	bl	8007c40 <_dtoa_r>
 800705c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007060:	4605      	mov	r5, r0
 8007062:	d119      	bne.n	8007098 <__cvt+0x94>
 8007064:	f019 0f01 	tst.w	r9, #1
 8007068:	d00e      	beq.n	8007088 <__cvt+0x84>
 800706a:	eb00 0904 	add.w	r9, r0, r4
 800706e:	2200      	movs	r2, #0
 8007070:	2300      	movs	r3, #0
 8007072:	4630      	mov	r0, r6
 8007074:	4639      	mov	r1, r7
 8007076:	f7f9 fd57 	bl	8000b28 <__aeabi_dcmpeq>
 800707a:	b108      	cbz	r0, 8007080 <__cvt+0x7c>
 800707c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007080:	2230      	movs	r2, #48	@ 0x30
 8007082:	9b03      	ldr	r3, [sp, #12]
 8007084:	454b      	cmp	r3, r9
 8007086:	d31e      	bcc.n	80070c6 <__cvt+0xc2>
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800708c:	1b5b      	subs	r3, r3, r5
 800708e:	4628      	mov	r0, r5
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	b004      	add	sp, #16
 8007094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007098:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800709c:	eb00 0904 	add.w	r9, r0, r4
 80070a0:	d1e5      	bne.n	800706e <__cvt+0x6a>
 80070a2:	7803      	ldrb	r3, [r0, #0]
 80070a4:	2b30      	cmp	r3, #48	@ 0x30
 80070a6:	d10a      	bne.n	80070be <__cvt+0xba>
 80070a8:	2200      	movs	r2, #0
 80070aa:	2300      	movs	r3, #0
 80070ac:	4630      	mov	r0, r6
 80070ae:	4639      	mov	r1, r7
 80070b0:	f7f9 fd3a 	bl	8000b28 <__aeabi_dcmpeq>
 80070b4:	b918      	cbnz	r0, 80070be <__cvt+0xba>
 80070b6:	f1c4 0401 	rsb	r4, r4, #1
 80070ba:	f8ca 4000 	str.w	r4, [sl]
 80070be:	f8da 3000 	ldr.w	r3, [sl]
 80070c2:	4499      	add	r9, r3
 80070c4:	e7d3      	b.n	800706e <__cvt+0x6a>
 80070c6:	1c59      	adds	r1, r3, #1
 80070c8:	9103      	str	r1, [sp, #12]
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	e7d9      	b.n	8007082 <__cvt+0x7e>

080070ce <__exponent>:
 80070ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070d0:	2900      	cmp	r1, #0
 80070d2:	bfba      	itte	lt
 80070d4:	4249      	neglt	r1, r1
 80070d6:	232d      	movlt	r3, #45	@ 0x2d
 80070d8:	232b      	movge	r3, #43	@ 0x2b
 80070da:	2909      	cmp	r1, #9
 80070dc:	7002      	strb	r2, [r0, #0]
 80070de:	7043      	strb	r3, [r0, #1]
 80070e0:	dd29      	ble.n	8007136 <__exponent+0x68>
 80070e2:	f10d 0307 	add.w	r3, sp, #7
 80070e6:	461d      	mov	r5, r3
 80070e8:	270a      	movs	r7, #10
 80070ea:	461a      	mov	r2, r3
 80070ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80070f0:	fb07 1416 	mls	r4, r7, r6, r1
 80070f4:	3430      	adds	r4, #48	@ 0x30
 80070f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80070fa:	460c      	mov	r4, r1
 80070fc:	2c63      	cmp	r4, #99	@ 0x63
 80070fe:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007102:	4631      	mov	r1, r6
 8007104:	dcf1      	bgt.n	80070ea <__exponent+0x1c>
 8007106:	3130      	adds	r1, #48	@ 0x30
 8007108:	1e94      	subs	r4, r2, #2
 800710a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800710e:	1c41      	adds	r1, r0, #1
 8007110:	4623      	mov	r3, r4
 8007112:	42ab      	cmp	r3, r5
 8007114:	d30a      	bcc.n	800712c <__exponent+0x5e>
 8007116:	f10d 0309 	add.w	r3, sp, #9
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	42ac      	cmp	r4, r5
 800711e:	bf88      	it	hi
 8007120:	2300      	movhi	r3, #0
 8007122:	3302      	adds	r3, #2
 8007124:	4403      	add	r3, r0
 8007126:	1a18      	subs	r0, r3, r0
 8007128:	b003      	add	sp, #12
 800712a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800712c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007130:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007134:	e7ed      	b.n	8007112 <__exponent+0x44>
 8007136:	2330      	movs	r3, #48	@ 0x30
 8007138:	3130      	adds	r1, #48	@ 0x30
 800713a:	7083      	strb	r3, [r0, #2]
 800713c:	70c1      	strb	r1, [r0, #3]
 800713e:	1d03      	adds	r3, r0, #4
 8007140:	e7f1      	b.n	8007126 <__exponent+0x58>
	...

08007144 <_printf_float>:
 8007144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007148:	b08d      	sub	sp, #52	@ 0x34
 800714a:	460c      	mov	r4, r1
 800714c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007150:	4616      	mov	r6, r2
 8007152:	461f      	mov	r7, r3
 8007154:	4605      	mov	r5, r0
 8007156:	f000 fcd9 	bl	8007b0c <_localeconv_r>
 800715a:	6803      	ldr	r3, [r0, #0]
 800715c:	9304      	str	r3, [sp, #16]
 800715e:	4618      	mov	r0, r3
 8007160:	f7f9 f8b6 	bl	80002d0 <strlen>
 8007164:	2300      	movs	r3, #0
 8007166:	930a      	str	r3, [sp, #40]	@ 0x28
 8007168:	f8d8 3000 	ldr.w	r3, [r8]
 800716c:	9005      	str	r0, [sp, #20]
 800716e:	3307      	adds	r3, #7
 8007170:	f023 0307 	bic.w	r3, r3, #7
 8007174:	f103 0208 	add.w	r2, r3, #8
 8007178:	f894 a018 	ldrb.w	sl, [r4, #24]
 800717c:	f8d4 b000 	ldr.w	fp, [r4]
 8007180:	f8c8 2000 	str.w	r2, [r8]
 8007184:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007188:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800718c:	9307      	str	r3, [sp, #28]
 800718e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007192:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800719a:	4b9c      	ldr	r3, [pc, #624]	@ (800740c <_printf_float+0x2c8>)
 800719c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071a0:	f7f9 fcf4 	bl	8000b8c <__aeabi_dcmpun>
 80071a4:	bb70      	cbnz	r0, 8007204 <_printf_float+0xc0>
 80071a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071aa:	4b98      	ldr	r3, [pc, #608]	@ (800740c <_printf_float+0x2c8>)
 80071ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071b0:	f7f9 fcce 	bl	8000b50 <__aeabi_dcmple>
 80071b4:	bb30      	cbnz	r0, 8007204 <_printf_float+0xc0>
 80071b6:	2200      	movs	r2, #0
 80071b8:	2300      	movs	r3, #0
 80071ba:	4640      	mov	r0, r8
 80071bc:	4649      	mov	r1, r9
 80071be:	f7f9 fcbd 	bl	8000b3c <__aeabi_dcmplt>
 80071c2:	b110      	cbz	r0, 80071ca <_printf_float+0x86>
 80071c4:	232d      	movs	r3, #45	@ 0x2d
 80071c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071ca:	4a91      	ldr	r2, [pc, #580]	@ (8007410 <_printf_float+0x2cc>)
 80071cc:	4b91      	ldr	r3, [pc, #580]	@ (8007414 <_printf_float+0x2d0>)
 80071ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80071d2:	bf8c      	ite	hi
 80071d4:	4690      	movhi	r8, r2
 80071d6:	4698      	movls	r8, r3
 80071d8:	2303      	movs	r3, #3
 80071da:	6123      	str	r3, [r4, #16]
 80071dc:	f02b 0304 	bic.w	r3, fp, #4
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	f04f 0900 	mov.w	r9, #0
 80071e6:	9700      	str	r7, [sp, #0]
 80071e8:	4633      	mov	r3, r6
 80071ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80071ec:	4621      	mov	r1, r4
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 f9d2 	bl	8007598 <_printf_common>
 80071f4:	3001      	adds	r0, #1
 80071f6:	f040 808d 	bne.w	8007314 <_printf_float+0x1d0>
 80071fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071fe:	b00d      	add	sp, #52	@ 0x34
 8007200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007204:	4642      	mov	r2, r8
 8007206:	464b      	mov	r3, r9
 8007208:	4640      	mov	r0, r8
 800720a:	4649      	mov	r1, r9
 800720c:	f7f9 fcbe 	bl	8000b8c <__aeabi_dcmpun>
 8007210:	b140      	cbz	r0, 8007224 <_printf_float+0xe0>
 8007212:	464b      	mov	r3, r9
 8007214:	2b00      	cmp	r3, #0
 8007216:	bfbc      	itt	lt
 8007218:	232d      	movlt	r3, #45	@ 0x2d
 800721a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800721e:	4a7e      	ldr	r2, [pc, #504]	@ (8007418 <_printf_float+0x2d4>)
 8007220:	4b7e      	ldr	r3, [pc, #504]	@ (800741c <_printf_float+0x2d8>)
 8007222:	e7d4      	b.n	80071ce <_printf_float+0x8a>
 8007224:	6863      	ldr	r3, [r4, #4]
 8007226:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800722a:	9206      	str	r2, [sp, #24]
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	d13b      	bne.n	80072a8 <_printf_float+0x164>
 8007230:	2306      	movs	r3, #6
 8007232:	6063      	str	r3, [r4, #4]
 8007234:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007238:	2300      	movs	r3, #0
 800723a:	6022      	str	r2, [r4, #0]
 800723c:	9303      	str	r3, [sp, #12]
 800723e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007240:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007244:	ab09      	add	r3, sp, #36	@ 0x24
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	6861      	ldr	r1, [r4, #4]
 800724a:	ec49 8b10 	vmov	d0, r8, r9
 800724e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007252:	4628      	mov	r0, r5
 8007254:	f7ff fed6 	bl	8007004 <__cvt>
 8007258:	9b06      	ldr	r3, [sp, #24]
 800725a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800725c:	2b47      	cmp	r3, #71	@ 0x47
 800725e:	4680      	mov	r8, r0
 8007260:	d129      	bne.n	80072b6 <_printf_float+0x172>
 8007262:	1cc8      	adds	r0, r1, #3
 8007264:	db02      	blt.n	800726c <_printf_float+0x128>
 8007266:	6863      	ldr	r3, [r4, #4]
 8007268:	4299      	cmp	r1, r3
 800726a:	dd41      	ble.n	80072f0 <_printf_float+0x1ac>
 800726c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007270:	fa5f fa8a 	uxtb.w	sl, sl
 8007274:	3901      	subs	r1, #1
 8007276:	4652      	mov	r2, sl
 8007278:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800727c:	9109      	str	r1, [sp, #36]	@ 0x24
 800727e:	f7ff ff26 	bl	80070ce <__exponent>
 8007282:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007284:	1813      	adds	r3, r2, r0
 8007286:	2a01      	cmp	r2, #1
 8007288:	4681      	mov	r9, r0
 800728a:	6123      	str	r3, [r4, #16]
 800728c:	dc02      	bgt.n	8007294 <_printf_float+0x150>
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	07d2      	lsls	r2, r2, #31
 8007292:	d501      	bpl.n	8007298 <_printf_float+0x154>
 8007294:	3301      	adds	r3, #1
 8007296:	6123      	str	r3, [r4, #16]
 8007298:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800729c:	2b00      	cmp	r3, #0
 800729e:	d0a2      	beq.n	80071e6 <_printf_float+0xa2>
 80072a0:	232d      	movs	r3, #45	@ 0x2d
 80072a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072a6:	e79e      	b.n	80071e6 <_printf_float+0xa2>
 80072a8:	9a06      	ldr	r2, [sp, #24]
 80072aa:	2a47      	cmp	r2, #71	@ 0x47
 80072ac:	d1c2      	bne.n	8007234 <_printf_float+0xf0>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1c0      	bne.n	8007234 <_printf_float+0xf0>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e7bd      	b.n	8007232 <_printf_float+0xee>
 80072b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072ba:	d9db      	bls.n	8007274 <_printf_float+0x130>
 80072bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80072c0:	d118      	bne.n	80072f4 <_printf_float+0x1b0>
 80072c2:	2900      	cmp	r1, #0
 80072c4:	6863      	ldr	r3, [r4, #4]
 80072c6:	dd0b      	ble.n	80072e0 <_printf_float+0x19c>
 80072c8:	6121      	str	r1, [r4, #16]
 80072ca:	b913      	cbnz	r3, 80072d2 <_printf_float+0x18e>
 80072cc:	6822      	ldr	r2, [r4, #0]
 80072ce:	07d0      	lsls	r0, r2, #31
 80072d0:	d502      	bpl.n	80072d8 <_printf_float+0x194>
 80072d2:	3301      	adds	r3, #1
 80072d4:	440b      	add	r3, r1
 80072d6:	6123      	str	r3, [r4, #16]
 80072d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80072da:	f04f 0900 	mov.w	r9, #0
 80072de:	e7db      	b.n	8007298 <_printf_float+0x154>
 80072e0:	b913      	cbnz	r3, 80072e8 <_printf_float+0x1a4>
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	07d2      	lsls	r2, r2, #31
 80072e6:	d501      	bpl.n	80072ec <_printf_float+0x1a8>
 80072e8:	3302      	adds	r3, #2
 80072ea:	e7f4      	b.n	80072d6 <_printf_float+0x192>
 80072ec:	2301      	movs	r3, #1
 80072ee:	e7f2      	b.n	80072d6 <_printf_float+0x192>
 80072f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80072f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072f6:	4299      	cmp	r1, r3
 80072f8:	db05      	blt.n	8007306 <_printf_float+0x1c2>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	6121      	str	r1, [r4, #16]
 80072fe:	07d8      	lsls	r0, r3, #31
 8007300:	d5ea      	bpl.n	80072d8 <_printf_float+0x194>
 8007302:	1c4b      	adds	r3, r1, #1
 8007304:	e7e7      	b.n	80072d6 <_printf_float+0x192>
 8007306:	2900      	cmp	r1, #0
 8007308:	bfd4      	ite	le
 800730a:	f1c1 0202 	rsble	r2, r1, #2
 800730e:	2201      	movgt	r2, #1
 8007310:	4413      	add	r3, r2
 8007312:	e7e0      	b.n	80072d6 <_printf_float+0x192>
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	055a      	lsls	r2, r3, #21
 8007318:	d407      	bmi.n	800732a <_printf_float+0x1e6>
 800731a:	6923      	ldr	r3, [r4, #16]
 800731c:	4642      	mov	r2, r8
 800731e:	4631      	mov	r1, r6
 8007320:	4628      	mov	r0, r5
 8007322:	47b8      	blx	r7
 8007324:	3001      	adds	r0, #1
 8007326:	d12b      	bne.n	8007380 <_printf_float+0x23c>
 8007328:	e767      	b.n	80071fa <_printf_float+0xb6>
 800732a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800732e:	f240 80dd 	bls.w	80074ec <_printf_float+0x3a8>
 8007332:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007336:	2200      	movs	r2, #0
 8007338:	2300      	movs	r3, #0
 800733a:	f7f9 fbf5 	bl	8000b28 <__aeabi_dcmpeq>
 800733e:	2800      	cmp	r0, #0
 8007340:	d033      	beq.n	80073aa <_printf_float+0x266>
 8007342:	4a37      	ldr	r2, [pc, #220]	@ (8007420 <_printf_float+0x2dc>)
 8007344:	2301      	movs	r3, #1
 8007346:	4631      	mov	r1, r6
 8007348:	4628      	mov	r0, r5
 800734a:	47b8      	blx	r7
 800734c:	3001      	adds	r0, #1
 800734e:	f43f af54 	beq.w	80071fa <_printf_float+0xb6>
 8007352:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007356:	4543      	cmp	r3, r8
 8007358:	db02      	blt.n	8007360 <_printf_float+0x21c>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	07d8      	lsls	r0, r3, #31
 800735e:	d50f      	bpl.n	8007380 <_printf_float+0x23c>
 8007360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007364:	4631      	mov	r1, r6
 8007366:	4628      	mov	r0, r5
 8007368:	47b8      	blx	r7
 800736a:	3001      	adds	r0, #1
 800736c:	f43f af45 	beq.w	80071fa <_printf_float+0xb6>
 8007370:	f04f 0900 	mov.w	r9, #0
 8007374:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007378:	f104 0a1a 	add.w	sl, r4, #26
 800737c:	45c8      	cmp	r8, r9
 800737e:	dc09      	bgt.n	8007394 <_printf_float+0x250>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	079b      	lsls	r3, r3, #30
 8007384:	f100 8103 	bmi.w	800758e <_printf_float+0x44a>
 8007388:	68e0      	ldr	r0, [r4, #12]
 800738a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800738c:	4298      	cmp	r0, r3
 800738e:	bfb8      	it	lt
 8007390:	4618      	movlt	r0, r3
 8007392:	e734      	b.n	80071fe <_printf_float+0xba>
 8007394:	2301      	movs	r3, #1
 8007396:	4652      	mov	r2, sl
 8007398:	4631      	mov	r1, r6
 800739a:	4628      	mov	r0, r5
 800739c:	47b8      	blx	r7
 800739e:	3001      	adds	r0, #1
 80073a0:	f43f af2b 	beq.w	80071fa <_printf_float+0xb6>
 80073a4:	f109 0901 	add.w	r9, r9, #1
 80073a8:	e7e8      	b.n	800737c <_printf_float+0x238>
 80073aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dc39      	bgt.n	8007424 <_printf_float+0x2e0>
 80073b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007420 <_printf_float+0x2dc>)
 80073b2:	2301      	movs	r3, #1
 80073b4:	4631      	mov	r1, r6
 80073b6:	4628      	mov	r0, r5
 80073b8:	47b8      	blx	r7
 80073ba:	3001      	adds	r0, #1
 80073bc:	f43f af1d 	beq.w	80071fa <_printf_float+0xb6>
 80073c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80073c4:	ea59 0303 	orrs.w	r3, r9, r3
 80073c8:	d102      	bne.n	80073d0 <_printf_float+0x28c>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	07d9      	lsls	r1, r3, #31
 80073ce:	d5d7      	bpl.n	8007380 <_printf_float+0x23c>
 80073d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	f43f af0d 	beq.w	80071fa <_printf_float+0xb6>
 80073e0:	f04f 0a00 	mov.w	sl, #0
 80073e4:	f104 0b1a 	add.w	fp, r4, #26
 80073e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ea:	425b      	negs	r3, r3
 80073ec:	4553      	cmp	r3, sl
 80073ee:	dc01      	bgt.n	80073f4 <_printf_float+0x2b0>
 80073f0:	464b      	mov	r3, r9
 80073f2:	e793      	b.n	800731c <_printf_float+0x1d8>
 80073f4:	2301      	movs	r3, #1
 80073f6:	465a      	mov	r2, fp
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	f43f aefb 	beq.w	80071fa <_printf_float+0xb6>
 8007404:	f10a 0a01 	add.w	sl, sl, #1
 8007408:	e7ee      	b.n	80073e8 <_printf_float+0x2a4>
 800740a:	bf00      	nop
 800740c:	7fefffff 	.word	0x7fefffff
 8007410:	08009d6a 	.word	0x08009d6a
 8007414:	08009d66 	.word	0x08009d66
 8007418:	08009d72 	.word	0x08009d72
 800741c:	08009d6e 	.word	0x08009d6e
 8007420:	08009d76 	.word	0x08009d76
 8007424:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007426:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800742a:	4553      	cmp	r3, sl
 800742c:	bfa8      	it	ge
 800742e:	4653      	movge	r3, sl
 8007430:	2b00      	cmp	r3, #0
 8007432:	4699      	mov	r9, r3
 8007434:	dc36      	bgt.n	80074a4 <_printf_float+0x360>
 8007436:	f04f 0b00 	mov.w	fp, #0
 800743a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800743e:	f104 021a 	add.w	r2, r4, #26
 8007442:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007444:	9306      	str	r3, [sp, #24]
 8007446:	eba3 0309 	sub.w	r3, r3, r9
 800744a:	455b      	cmp	r3, fp
 800744c:	dc31      	bgt.n	80074b2 <_printf_float+0x36e>
 800744e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007450:	459a      	cmp	sl, r3
 8007452:	dc3a      	bgt.n	80074ca <_printf_float+0x386>
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	07da      	lsls	r2, r3, #31
 8007458:	d437      	bmi.n	80074ca <_printf_float+0x386>
 800745a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800745c:	ebaa 0903 	sub.w	r9, sl, r3
 8007460:	9b06      	ldr	r3, [sp, #24]
 8007462:	ebaa 0303 	sub.w	r3, sl, r3
 8007466:	4599      	cmp	r9, r3
 8007468:	bfa8      	it	ge
 800746a:	4699      	movge	r9, r3
 800746c:	f1b9 0f00 	cmp.w	r9, #0
 8007470:	dc33      	bgt.n	80074da <_printf_float+0x396>
 8007472:	f04f 0800 	mov.w	r8, #0
 8007476:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800747a:	f104 0b1a 	add.w	fp, r4, #26
 800747e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007480:	ebaa 0303 	sub.w	r3, sl, r3
 8007484:	eba3 0309 	sub.w	r3, r3, r9
 8007488:	4543      	cmp	r3, r8
 800748a:	f77f af79 	ble.w	8007380 <_printf_float+0x23c>
 800748e:	2301      	movs	r3, #1
 8007490:	465a      	mov	r2, fp
 8007492:	4631      	mov	r1, r6
 8007494:	4628      	mov	r0, r5
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	f43f aeae 	beq.w	80071fa <_printf_float+0xb6>
 800749e:	f108 0801 	add.w	r8, r8, #1
 80074a2:	e7ec      	b.n	800747e <_printf_float+0x33a>
 80074a4:	4642      	mov	r2, r8
 80074a6:	4631      	mov	r1, r6
 80074a8:	4628      	mov	r0, r5
 80074aa:	47b8      	blx	r7
 80074ac:	3001      	adds	r0, #1
 80074ae:	d1c2      	bne.n	8007436 <_printf_float+0x2f2>
 80074b0:	e6a3      	b.n	80071fa <_printf_float+0xb6>
 80074b2:	2301      	movs	r3, #1
 80074b4:	4631      	mov	r1, r6
 80074b6:	4628      	mov	r0, r5
 80074b8:	9206      	str	r2, [sp, #24]
 80074ba:	47b8      	blx	r7
 80074bc:	3001      	adds	r0, #1
 80074be:	f43f ae9c 	beq.w	80071fa <_printf_float+0xb6>
 80074c2:	9a06      	ldr	r2, [sp, #24]
 80074c4:	f10b 0b01 	add.w	fp, fp, #1
 80074c8:	e7bb      	b.n	8007442 <_printf_float+0x2fe>
 80074ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074ce:	4631      	mov	r1, r6
 80074d0:	4628      	mov	r0, r5
 80074d2:	47b8      	blx	r7
 80074d4:	3001      	adds	r0, #1
 80074d6:	d1c0      	bne.n	800745a <_printf_float+0x316>
 80074d8:	e68f      	b.n	80071fa <_printf_float+0xb6>
 80074da:	9a06      	ldr	r2, [sp, #24]
 80074dc:	464b      	mov	r3, r9
 80074de:	4442      	add	r2, r8
 80074e0:	4631      	mov	r1, r6
 80074e2:	4628      	mov	r0, r5
 80074e4:	47b8      	blx	r7
 80074e6:	3001      	adds	r0, #1
 80074e8:	d1c3      	bne.n	8007472 <_printf_float+0x32e>
 80074ea:	e686      	b.n	80071fa <_printf_float+0xb6>
 80074ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80074f0:	f1ba 0f01 	cmp.w	sl, #1
 80074f4:	dc01      	bgt.n	80074fa <_printf_float+0x3b6>
 80074f6:	07db      	lsls	r3, r3, #31
 80074f8:	d536      	bpl.n	8007568 <_printf_float+0x424>
 80074fa:	2301      	movs	r3, #1
 80074fc:	4642      	mov	r2, r8
 80074fe:	4631      	mov	r1, r6
 8007500:	4628      	mov	r0, r5
 8007502:	47b8      	blx	r7
 8007504:	3001      	adds	r0, #1
 8007506:	f43f ae78 	beq.w	80071fa <_printf_float+0xb6>
 800750a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800750e:	4631      	mov	r1, r6
 8007510:	4628      	mov	r0, r5
 8007512:	47b8      	blx	r7
 8007514:	3001      	adds	r0, #1
 8007516:	f43f ae70 	beq.w	80071fa <_printf_float+0xb6>
 800751a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800751e:	2200      	movs	r2, #0
 8007520:	2300      	movs	r3, #0
 8007522:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007526:	f7f9 faff 	bl	8000b28 <__aeabi_dcmpeq>
 800752a:	b9c0      	cbnz	r0, 800755e <_printf_float+0x41a>
 800752c:	4653      	mov	r3, sl
 800752e:	f108 0201 	add.w	r2, r8, #1
 8007532:	4631      	mov	r1, r6
 8007534:	4628      	mov	r0, r5
 8007536:	47b8      	blx	r7
 8007538:	3001      	adds	r0, #1
 800753a:	d10c      	bne.n	8007556 <_printf_float+0x412>
 800753c:	e65d      	b.n	80071fa <_printf_float+0xb6>
 800753e:	2301      	movs	r3, #1
 8007540:	465a      	mov	r2, fp
 8007542:	4631      	mov	r1, r6
 8007544:	4628      	mov	r0, r5
 8007546:	47b8      	blx	r7
 8007548:	3001      	adds	r0, #1
 800754a:	f43f ae56 	beq.w	80071fa <_printf_float+0xb6>
 800754e:	f108 0801 	add.w	r8, r8, #1
 8007552:	45d0      	cmp	r8, sl
 8007554:	dbf3      	blt.n	800753e <_printf_float+0x3fa>
 8007556:	464b      	mov	r3, r9
 8007558:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800755c:	e6df      	b.n	800731e <_printf_float+0x1da>
 800755e:	f04f 0800 	mov.w	r8, #0
 8007562:	f104 0b1a 	add.w	fp, r4, #26
 8007566:	e7f4      	b.n	8007552 <_printf_float+0x40e>
 8007568:	2301      	movs	r3, #1
 800756a:	4642      	mov	r2, r8
 800756c:	e7e1      	b.n	8007532 <_printf_float+0x3ee>
 800756e:	2301      	movs	r3, #1
 8007570:	464a      	mov	r2, r9
 8007572:	4631      	mov	r1, r6
 8007574:	4628      	mov	r0, r5
 8007576:	47b8      	blx	r7
 8007578:	3001      	adds	r0, #1
 800757a:	f43f ae3e 	beq.w	80071fa <_printf_float+0xb6>
 800757e:	f108 0801 	add.w	r8, r8, #1
 8007582:	68e3      	ldr	r3, [r4, #12]
 8007584:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007586:	1a5b      	subs	r3, r3, r1
 8007588:	4543      	cmp	r3, r8
 800758a:	dcf0      	bgt.n	800756e <_printf_float+0x42a>
 800758c:	e6fc      	b.n	8007388 <_printf_float+0x244>
 800758e:	f04f 0800 	mov.w	r8, #0
 8007592:	f104 0919 	add.w	r9, r4, #25
 8007596:	e7f4      	b.n	8007582 <_printf_float+0x43e>

08007598 <_printf_common>:
 8007598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800759c:	4616      	mov	r6, r2
 800759e:	4698      	mov	r8, r3
 80075a0:	688a      	ldr	r2, [r1, #8]
 80075a2:	690b      	ldr	r3, [r1, #16]
 80075a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075a8:	4293      	cmp	r3, r2
 80075aa:	bfb8      	it	lt
 80075ac:	4613      	movlt	r3, r2
 80075ae:	6033      	str	r3, [r6, #0]
 80075b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075b4:	4607      	mov	r7, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	b10a      	cbz	r2, 80075be <_printf_common+0x26>
 80075ba:	3301      	adds	r3, #1
 80075bc:	6033      	str	r3, [r6, #0]
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	0699      	lsls	r1, r3, #26
 80075c2:	bf42      	ittt	mi
 80075c4:	6833      	ldrmi	r3, [r6, #0]
 80075c6:	3302      	addmi	r3, #2
 80075c8:	6033      	strmi	r3, [r6, #0]
 80075ca:	6825      	ldr	r5, [r4, #0]
 80075cc:	f015 0506 	ands.w	r5, r5, #6
 80075d0:	d106      	bne.n	80075e0 <_printf_common+0x48>
 80075d2:	f104 0a19 	add.w	sl, r4, #25
 80075d6:	68e3      	ldr	r3, [r4, #12]
 80075d8:	6832      	ldr	r2, [r6, #0]
 80075da:	1a9b      	subs	r3, r3, r2
 80075dc:	42ab      	cmp	r3, r5
 80075de:	dc26      	bgt.n	800762e <_printf_common+0x96>
 80075e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075e4:	6822      	ldr	r2, [r4, #0]
 80075e6:	3b00      	subs	r3, #0
 80075e8:	bf18      	it	ne
 80075ea:	2301      	movne	r3, #1
 80075ec:	0692      	lsls	r2, r2, #26
 80075ee:	d42b      	bmi.n	8007648 <_printf_common+0xb0>
 80075f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075f4:	4641      	mov	r1, r8
 80075f6:	4638      	mov	r0, r7
 80075f8:	47c8      	blx	r9
 80075fa:	3001      	adds	r0, #1
 80075fc:	d01e      	beq.n	800763c <_printf_common+0xa4>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	6922      	ldr	r2, [r4, #16]
 8007602:	f003 0306 	and.w	r3, r3, #6
 8007606:	2b04      	cmp	r3, #4
 8007608:	bf02      	ittt	eq
 800760a:	68e5      	ldreq	r5, [r4, #12]
 800760c:	6833      	ldreq	r3, [r6, #0]
 800760e:	1aed      	subeq	r5, r5, r3
 8007610:	68a3      	ldr	r3, [r4, #8]
 8007612:	bf0c      	ite	eq
 8007614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007618:	2500      	movne	r5, #0
 800761a:	4293      	cmp	r3, r2
 800761c:	bfc4      	itt	gt
 800761e:	1a9b      	subgt	r3, r3, r2
 8007620:	18ed      	addgt	r5, r5, r3
 8007622:	2600      	movs	r6, #0
 8007624:	341a      	adds	r4, #26
 8007626:	42b5      	cmp	r5, r6
 8007628:	d11a      	bne.n	8007660 <_printf_common+0xc8>
 800762a:	2000      	movs	r0, #0
 800762c:	e008      	b.n	8007640 <_printf_common+0xa8>
 800762e:	2301      	movs	r3, #1
 8007630:	4652      	mov	r2, sl
 8007632:	4641      	mov	r1, r8
 8007634:	4638      	mov	r0, r7
 8007636:	47c8      	blx	r9
 8007638:	3001      	adds	r0, #1
 800763a:	d103      	bne.n	8007644 <_printf_common+0xac>
 800763c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007644:	3501      	adds	r5, #1
 8007646:	e7c6      	b.n	80075d6 <_printf_common+0x3e>
 8007648:	18e1      	adds	r1, r4, r3
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	2030      	movs	r0, #48	@ 0x30
 800764e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007652:	4422      	add	r2, r4
 8007654:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800765c:	3302      	adds	r3, #2
 800765e:	e7c7      	b.n	80075f0 <_printf_common+0x58>
 8007660:	2301      	movs	r3, #1
 8007662:	4622      	mov	r2, r4
 8007664:	4641      	mov	r1, r8
 8007666:	4638      	mov	r0, r7
 8007668:	47c8      	blx	r9
 800766a:	3001      	adds	r0, #1
 800766c:	d0e6      	beq.n	800763c <_printf_common+0xa4>
 800766e:	3601      	adds	r6, #1
 8007670:	e7d9      	b.n	8007626 <_printf_common+0x8e>
	...

08007674 <_printf_i>:
 8007674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007678:	7e0f      	ldrb	r7, [r1, #24]
 800767a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800767c:	2f78      	cmp	r7, #120	@ 0x78
 800767e:	4691      	mov	r9, r2
 8007680:	4680      	mov	r8, r0
 8007682:	460c      	mov	r4, r1
 8007684:	469a      	mov	sl, r3
 8007686:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800768a:	d807      	bhi.n	800769c <_printf_i+0x28>
 800768c:	2f62      	cmp	r7, #98	@ 0x62
 800768e:	d80a      	bhi.n	80076a6 <_printf_i+0x32>
 8007690:	2f00      	cmp	r7, #0
 8007692:	f000 80d1 	beq.w	8007838 <_printf_i+0x1c4>
 8007696:	2f58      	cmp	r7, #88	@ 0x58
 8007698:	f000 80b8 	beq.w	800780c <_printf_i+0x198>
 800769c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076a4:	e03a      	b.n	800771c <_printf_i+0xa8>
 80076a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076aa:	2b15      	cmp	r3, #21
 80076ac:	d8f6      	bhi.n	800769c <_printf_i+0x28>
 80076ae:	a101      	add	r1, pc, #4	@ (adr r1, 80076b4 <_printf_i+0x40>)
 80076b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076b4:	0800770d 	.word	0x0800770d
 80076b8:	08007721 	.word	0x08007721
 80076bc:	0800769d 	.word	0x0800769d
 80076c0:	0800769d 	.word	0x0800769d
 80076c4:	0800769d 	.word	0x0800769d
 80076c8:	0800769d 	.word	0x0800769d
 80076cc:	08007721 	.word	0x08007721
 80076d0:	0800769d 	.word	0x0800769d
 80076d4:	0800769d 	.word	0x0800769d
 80076d8:	0800769d 	.word	0x0800769d
 80076dc:	0800769d 	.word	0x0800769d
 80076e0:	0800781f 	.word	0x0800781f
 80076e4:	0800774b 	.word	0x0800774b
 80076e8:	080077d9 	.word	0x080077d9
 80076ec:	0800769d 	.word	0x0800769d
 80076f0:	0800769d 	.word	0x0800769d
 80076f4:	08007841 	.word	0x08007841
 80076f8:	0800769d 	.word	0x0800769d
 80076fc:	0800774b 	.word	0x0800774b
 8007700:	0800769d 	.word	0x0800769d
 8007704:	0800769d 	.word	0x0800769d
 8007708:	080077e1 	.word	0x080077e1
 800770c:	6833      	ldr	r3, [r6, #0]
 800770e:	1d1a      	adds	r2, r3, #4
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6032      	str	r2, [r6, #0]
 8007714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007718:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800771c:	2301      	movs	r3, #1
 800771e:	e09c      	b.n	800785a <_printf_i+0x1e6>
 8007720:	6833      	ldr	r3, [r6, #0]
 8007722:	6820      	ldr	r0, [r4, #0]
 8007724:	1d19      	adds	r1, r3, #4
 8007726:	6031      	str	r1, [r6, #0]
 8007728:	0606      	lsls	r6, r0, #24
 800772a:	d501      	bpl.n	8007730 <_printf_i+0xbc>
 800772c:	681d      	ldr	r5, [r3, #0]
 800772e:	e003      	b.n	8007738 <_printf_i+0xc4>
 8007730:	0645      	lsls	r5, r0, #25
 8007732:	d5fb      	bpl.n	800772c <_printf_i+0xb8>
 8007734:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007738:	2d00      	cmp	r5, #0
 800773a:	da03      	bge.n	8007744 <_printf_i+0xd0>
 800773c:	232d      	movs	r3, #45	@ 0x2d
 800773e:	426d      	negs	r5, r5
 8007740:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007744:	4858      	ldr	r0, [pc, #352]	@ (80078a8 <_printf_i+0x234>)
 8007746:	230a      	movs	r3, #10
 8007748:	e011      	b.n	800776e <_printf_i+0xfa>
 800774a:	6821      	ldr	r1, [r4, #0]
 800774c:	6833      	ldr	r3, [r6, #0]
 800774e:	0608      	lsls	r0, r1, #24
 8007750:	f853 5b04 	ldr.w	r5, [r3], #4
 8007754:	d402      	bmi.n	800775c <_printf_i+0xe8>
 8007756:	0649      	lsls	r1, r1, #25
 8007758:	bf48      	it	mi
 800775a:	b2ad      	uxthmi	r5, r5
 800775c:	2f6f      	cmp	r7, #111	@ 0x6f
 800775e:	4852      	ldr	r0, [pc, #328]	@ (80078a8 <_printf_i+0x234>)
 8007760:	6033      	str	r3, [r6, #0]
 8007762:	bf14      	ite	ne
 8007764:	230a      	movne	r3, #10
 8007766:	2308      	moveq	r3, #8
 8007768:	2100      	movs	r1, #0
 800776a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800776e:	6866      	ldr	r6, [r4, #4]
 8007770:	60a6      	str	r6, [r4, #8]
 8007772:	2e00      	cmp	r6, #0
 8007774:	db05      	blt.n	8007782 <_printf_i+0x10e>
 8007776:	6821      	ldr	r1, [r4, #0]
 8007778:	432e      	orrs	r6, r5
 800777a:	f021 0104 	bic.w	r1, r1, #4
 800777e:	6021      	str	r1, [r4, #0]
 8007780:	d04b      	beq.n	800781a <_printf_i+0x1a6>
 8007782:	4616      	mov	r6, r2
 8007784:	fbb5 f1f3 	udiv	r1, r5, r3
 8007788:	fb03 5711 	mls	r7, r3, r1, r5
 800778c:	5dc7      	ldrb	r7, [r0, r7]
 800778e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007792:	462f      	mov	r7, r5
 8007794:	42bb      	cmp	r3, r7
 8007796:	460d      	mov	r5, r1
 8007798:	d9f4      	bls.n	8007784 <_printf_i+0x110>
 800779a:	2b08      	cmp	r3, #8
 800779c:	d10b      	bne.n	80077b6 <_printf_i+0x142>
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	07df      	lsls	r7, r3, #31
 80077a2:	d508      	bpl.n	80077b6 <_printf_i+0x142>
 80077a4:	6923      	ldr	r3, [r4, #16]
 80077a6:	6861      	ldr	r1, [r4, #4]
 80077a8:	4299      	cmp	r1, r3
 80077aa:	bfde      	ittt	le
 80077ac:	2330      	movle	r3, #48	@ 0x30
 80077ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077b2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80077b6:	1b92      	subs	r2, r2, r6
 80077b8:	6122      	str	r2, [r4, #16]
 80077ba:	f8cd a000 	str.w	sl, [sp]
 80077be:	464b      	mov	r3, r9
 80077c0:	aa03      	add	r2, sp, #12
 80077c2:	4621      	mov	r1, r4
 80077c4:	4640      	mov	r0, r8
 80077c6:	f7ff fee7 	bl	8007598 <_printf_common>
 80077ca:	3001      	adds	r0, #1
 80077cc:	d14a      	bne.n	8007864 <_printf_i+0x1f0>
 80077ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077d2:	b004      	add	sp, #16
 80077d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	f043 0320 	orr.w	r3, r3, #32
 80077de:	6023      	str	r3, [r4, #0]
 80077e0:	4832      	ldr	r0, [pc, #200]	@ (80078ac <_printf_i+0x238>)
 80077e2:	2778      	movs	r7, #120	@ 0x78
 80077e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	6831      	ldr	r1, [r6, #0]
 80077ec:	061f      	lsls	r7, r3, #24
 80077ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80077f2:	d402      	bmi.n	80077fa <_printf_i+0x186>
 80077f4:	065f      	lsls	r7, r3, #25
 80077f6:	bf48      	it	mi
 80077f8:	b2ad      	uxthmi	r5, r5
 80077fa:	6031      	str	r1, [r6, #0]
 80077fc:	07d9      	lsls	r1, r3, #31
 80077fe:	bf44      	itt	mi
 8007800:	f043 0320 	orrmi.w	r3, r3, #32
 8007804:	6023      	strmi	r3, [r4, #0]
 8007806:	b11d      	cbz	r5, 8007810 <_printf_i+0x19c>
 8007808:	2310      	movs	r3, #16
 800780a:	e7ad      	b.n	8007768 <_printf_i+0xf4>
 800780c:	4826      	ldr	r0, [pc, #152]	@ (80078a8 <_printf_i+0x234>)
 800780e:	e7e9      	b.n	80077e4 <_printf_i+0x170>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	f023 0320 	bic.w	r3, r3, #32
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	e7f6      	b.n	8007808 <_printf_i+0x194>
 800781a:	4616      	mov	r6, r2
 800781c:	e7bd      	b.n	800779a <_printf_i+0x126>
 800781e:	6833      	ldr	r3, [r6, #0]
 8007820:	6825      	ldr	r5, [r4, #0]
 8007822:	6961      	ldr	r1, [r4, #20]
 8007824:	1d18      	adds	r0, r3, #4
 8007826:	6030      	str	r0, [r6, #0]
 8007828:	062e      	lsls	r6, r5, #24
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	d501      	bpl.n	8007832 <_printf_i+0x1be>
 800782e:	6019      	str	r1, [r3, #0]
 8007830:	e002      	b.n	8007838 <_printf_i+0x1c4>
 8007832:	0668      	lsls	r0, r5, #25
 8007834:	d5fb      	bpl.n	800782e <_printf_i+0x1ba>
 8007836:	8019      	strh	r1, [r3, #0]
 8007838:	2300      	movs	r3, #0
 800783a:	6123      	str	r3, [r4, #16]
 800783c:	4616      	mov	r6, r2
 800783e:	e7bc      	b.n	80077ba <_printf_i+0x146>
 8007840:	6833      	ldr	r3, [r6, #0]
 8007842:	1d1a      	adds	r2, r3, #4
 8007844:	6032      	str	r2, [r6, #0]
 8007846:	681e      	ldr	r6, [r3, #0]
 8007848:	6862      	ldr	r2, [r4, #4]
 800784a:	2100      	movs	r1, #0
 800784c:	4630      	mov	r0, r6
 800784e:	f7f8 fcef 	bl	8000230 <memchr>
 8007852:	b108      	cbz	r0, 8007858 <_printf_i+0x1e4>
 8007854:	1b80      	subs	r0, r0, r6
 8007856:	6060      	str	r0, [r4, #4]
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	6123      	str	r3, [r4, #16]
 800785c:	2300      	movs	r3, #0
 800785e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007862:	e7aa      	b.n	80077ba <_printf_i+0x146>
 8007864:	6923      	ldr	r3, [r4, #16]
 8007866:	4632      	mov	r2, r6
 8007868:	4649      	mov	r1, r9
 800786a:	4640      	mov	r0, r8
 800786c:	47d0      	blx	sl
 800786e:	3001      	adds	r0, #1
 8007870:	d0ad      	beq.n	80077ce <_printf_i+0x15a>
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	079b      	lsls	r3, r3, #30
 8007876:	d413      	bmi.n	80078a0 <_printf_i+0x22c>
 8007878:	68e0      	ldr	r0, [r4, #12]
 800787a:	9b03      	ldr	r3, [sp, #12]
 800787c:	4298      	cmp	r0, r3
 800787e:	bfb8      	it	lt
 8007880:	4618      	movlt	r0, r3
 8007882:	e7a6      	b.n	80077d2 <_printf_i+0x15e>
 8007884:	2301      	movs	r3, #1
 8007886:	4632      	mov	r2, r6
 8007888:	4649      	mov	r1, r9
 800788a:	4640      	mov	r0, r8
 800788c:	47d0      	blx	sl
 800788e:	3001      	adds	r0, #1
 8007890:	d09d      	beq.n	80077ce <_printf_i+0x15a>
 8007892:	3501      	adds	r5, #1
 8007894:	68e3      	ldr	r3, [r4, #12]
 8007896:	9903      	ldr	r1, [sp, #12]
 8007898:	1a5b      	subs	r3, r3, r1
 800789a:	42ab      	cmp	r3, r5
 800789c:	dcf2      	bgt.n	8007884 <_printf_i+0x210>
 800789e:	e7eb      	b.n	8007878 <_printf_i+0x204>
 80078a0:	2500      	movs	r5, #0
 80078a2:	f104 0619 	add.w	r6, r4, #25
 80078a6:	e7f5      	b.n	8007894 <_printf_i+0x220>
 80078a8:	08009d78 	.word	0x08009d78
 80078ac:	08009d89 	.word	0x08009d89

080078b0 <sniprintf>:
 80078b0:	b40c      	push	{r2, r3}
 80078b2:	b530      	push	{r4, r5, lr}
 80078b4:	4b18      	ldr	r3, [pc, #96]	@ (8007918 <sniprintf+0x68>)
 80078b6:	1e0c      	subs	r4, r1, #0
 80078b8:	681d      	ldr	r5, [r3, #0]
 80078ba:	b09d      	sub	sp, #116	@ 0x74
 80078bc:	da08      	bge.n	80078d0 <sniprintf+0x20>
 80078be:	238b      	movs	r3, #139	@ 0x8b
 80078c0:	602b      	str	r3, [r5, #0]
 80078c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078c6:	b01d      	add	sp, #116	@ 0x74
 80078c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078cc:	b002      	add	sp, #8
 80078ce:	4770      	bx	lr
 80078d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80078d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80078d8:	f04f 0300 	mov.w	r3, #0
 80078dc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80078de:	bf14      	ite	ne
 80078e0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80078e4:	4623      	moveq	r3, r4
 80078e6:	9304      	str	r3, [sp, #16]
 80078e8:	9307      	str	r3, [sp, #28]
 80078ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80078ee:	9002      	str	r0, [sp, #8]
 80078f0:	9006      	str	r0, [sp, #24]
 80078f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80078f8:	ab21      	add	r3, sp, #132	@ 0x84
 80078fa:	a902      	add	r1, sp, #8
 80078fc:	4628      	mov	r0, r5
 80078fe:	9301      	str	r3, [sp, #4]
 8007900:	f000 ffca 	bl	8008898 <_svfiprintf_r>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	bfbc      	itt	lt
 8007908:	238b      	movlt	r3, #139	@ 0x8b
 800790a:	602b      	strlt	r3, [r5, #0]
 800790c:	2c00      	cmp	r4, #0
 800790e:	d0da      	beq.n	80078c6 <sniprintf+0x16>
 8007910:	9b02      	ldr	r3, [sp, #8]
 8007912:	2200      	movs	r2, #0
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	e7d6      	b.n	80078c6 <sniprintf+0x16>
 8007918:	200003d4 	.word	0x200003d4

0800791c <std>:
 800791c:	2300      	movs	r3, #0
 800791e:	b510      	push	{r4, lr}
 8007920:	4604      	mov	r4, r0
 8007922:	e9c0 3300 	strd	r3, r3, [r0]
 8007926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800792a:	6083      	str	r3, [r0, #8]
 800792c:	8181      	strh	r1, [r0, #12]
 800792e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007930:	81c2      	strh	r2, [r0, #14]
 8007932:	6183      	str	r3, [r0, #24]
 8007934:	4619      	mov	r1, r3
 8007936:	2208      	movs	r2, #8
 8007938:	305c      	adds	r0, #92	@ 0x5c
 800793a:	f000 f8b1 	bl	8007aa0 <memset>
 800793e:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <std+0x58>)
 8007940:	6263      	str	r3, [r4, #36]	@ 0x24
 8007942:	4b0d      	ldr	r3, [pc, #52]	@ (8007978 <std+0x5c>)
 8007944:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007946:	4b0d      	ldr	r3, [pc, #52]	@ (800797c <std+0x60>)
 8007948:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800794a:	4b0d      	ldr	r3, [pc, #52]	@ (8007980 <std+0x64>)
 800794c:	6323      	str	r3, [r4, #48]	@ 0x30
 800794e:	4b0d      	ldr	r3, [pc, #52]	@ (8007984 <std+0x68>)
 8007950:	6224      	str	r4, [r4, #32]
 8007952:	429c      	cmp	r4, r3
 8007954:	d006      	beq.n	8007964 <std+0x48>
 8007956:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800795a:	4294      	cmp	r4, r2
 800795c:	d002      	beq.n	8007964 <std+0x48>
 800795e:	33d0      	adds	r3, #208	@ 0xd0
 8007960:	429c      	cmp	r4, r3
 8007962:	d105      	bne.n	8007970 <std+0x54>
 8007964:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800796c:	f000 b8ca 	b.w	8007b04 <__retarget_lock_init_recursive>
 8007970:	bd10      	pop	{r4, pc}
 8007972:	bf00      	nop
 8007974:	08009449 	.word	0x08009449
 8007978:	0800946b 	.word	0x0800946b
 800797c:	080094a3 	.word	0x080094a3
 8007980:	080094c7 	.word	0x080094c7
 8007984:	200009fc 	.word	0x200009fc

08007988 <stdio_exit_handler>:
 8007988:	4a02      	ldr	r2, [pc, #8]	@ (8007994 <stdio_exit_handler+0xc>)
 800798a:	4903      	ldr	r1, [pc, #12]	@ (8007998 <stdio_exit_handler+0x10>)
 800798c:	4803      	ldr	r0, [pc, #12]	@ (800799c <stdio_exit_handler+0x14>)
 800798e:	f000 b869 	b.w	8007a64 <_fwalk_sglue>
 8007992:	bf00      	nop
 8007994:	200003c8 	.word	0x200003c8
 8007998:	08008ced 	.word	0x08008ced
 800799c:	200003d8 	.word	0x200003d8

080079a0 <cleanup_stdio>:
 80079a0:	6841      	ldr	r1, [r0, #4]
 80079a2:	4b0c      	ldr	r3, [pc, #48]	@ (80079d4 <cleanup_stdio+0x34>)
 80079a4:	4299      	cmp	r1, r3
 80079a6:	b510      	push	{r4, lr}
 80079a8:	4604      	mov	r4, r0
 80079aa:	d001      	beq.n	80079b0 <cleanup_stdio+0x10>
 80079ac:	f001 f99e 	bl	8008cec <_fflush_r>
 80079b0:	68a1      	ldr	r1, [r4, #8]
 80079b2:	4b09      	ldr	r3, [pc, #36]	@ (80079d8 <cleanup_stdio+0x38>)
 80079b4:	4299      	cmp	r1, r3
 80079b6:	d002      	beq.n	80079be <cleanup_stdio+0x1e>
 80079b8:	4620      	mov	r0, r4
 80079ba:	f001 f997 	bl	8008cec <_fflush_r>
 80079be:	68e1      	ldr	r1, [r4, #12]
 80079c0:	4b06      	ldr	r3, [pc, #24]	@ (80079dc <cleanup_stdio+0x3c>)
 80079c2:	4299      	cmp	r1, r3
 80079c4:	d004      	beq.n	80079d0 <cleanup_stdio+0x30>
 80079c6:	4620      	mov	r0, r4
 80079c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079cc:	f001 b98e 	b.w	8008cec <_fflush_r>
 80079d0:	bd10      	pop	{r4, pc}
 80079d2:	bf00      	nop
 80079d4:	200009fc 	.word	0x200009fc
 80079d8:	20000a64 	.word	0x20000a64
 80079dc:	20000acc 	.word	0x20000acc

080079e0 <global_stdio_init.part.0>:
 80079e0:	b510      	push	{r4, lr}
 80079e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007a10 <global_stdio_init.part.0+0x30>)
 80079e4:	4c0b      	ldr	r4, [pc, #44]	@ (8007a14 <global_stdio_init.part.0+0x34>)
 80079e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007a18 <global_stdio_init.part.0+0x38>)
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	4620      	mov	r0, r4
 80079ec:	2200      	movs	r2, #0
 80079ee:	2104      	movs	r1, #4
 80079f0:	f7ff ff94 	bl	800791c <std>
 80079f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079f8:	2201      	movs	r2, #1
 80079fa:	2109      	movs	r1, #9
 80079fc:	f7ff ff8e 	bl	800791c <std>
 8007a00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a04:	2202      	movs	r2, #2
 8007a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a0a:	2112      	movs	r1, #18
 8007a0c:	f7ff bf86 	b.w	800791c <std>
 8007a10:	20000b34 	.word	0x20000b34
 8007a14:	200009fc 	.word	0x200009fc
 8007a18:	08007989 	.word	0x08007989

08007a1c <__sfp_lock_acquire>:
 8007a1c:	4801      	ldr	r0, [pc, #4]	@ (8007a24 <__sfp_lock_acquire+0x8>)
 8007a1e:	f000 b872 	b.w	8007b06 <__retarget_lock_acquire_recursive>
 8007a22:	bf00      	nop
 8007a24:	20000b39 	.word	0x20000b39

08007a28 <__sfp_lock_release>:
 8007a28:	4801      	ldr	r0, [pc, #4]	@ (8007a30 <__sfp_lock_release+0x8>)
 8007a2a:	f000 b86d 	b.w	8007b08 <__retarget_lock_release_recursive>
 8007a2e:	bf00      	nop
 8007a30:	20000b39 	.word	0x20000b39

08007a34 <__sinit>:
 8007a34:	b510      	push	{r4, lr}
 8007a36:	4604      	mov	r4, r0
 8007a38:	f7ff fff0 	bl	8007a1c <__sfp_lock_acquire>
 8007a3c:	6a23      	ldr	r3, [r4, #32]
 8007a3e:	b11b      	cbz	r3, 8007a48 <__sinit+0x14>
 8007a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a44:	f7ff bff0 	b.w	8007a28 <__sfp_lock_release>
 8007a48:	4b04      	ldr	r3, [pc, #16]	@ (8007a5c <__sinit+0x28>)
 8007a4a:	6223      	str	r3, [r4, #32]
 8007a4c:	4b04      	ldr	r3, [pc, #16]	@ (8007a60 <__sinit+0x2c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1f5      	bne.n	8007a40 <__sinit+0xc>
 8007a54:	f7ff ffc4 	bl	80079e0 <global_stdio_init.part.0>
 8007a58:	e7f2      	b.n	8007a40 <__sinit+0xc>
 8007a5a:	bf00      	nop
 8007a5c:	080079a1 	.word	0x080079a1
 8007a60:	20000b34 	.word	0x20000b34

08007a64 <_fwalk_sglue>:
 8007a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a68:	4607      	mov	r7, r0
 8007a6a:	4688      	mov	r8, r1
 8007a6c:	4614      	mov	r4, r2
 8007a6e:	2600      	movs	r6, #0
 8007a70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a74:	f1b9 0901 	subs.w	r9, r9, #1
 8007a78:	d505      	bpl.n	8007a86 <_fwalk_sglue+0x22>
 8007a7a:	6824      	ldr	r4, [r4, #0]
 8007a7c:	2c00      	cmp	r4, #0
 8007a7e:	d1f7      	bne.n	8007a70 <_fwalk_sglue+0xc>
 8007a80:	4630      	mov	r0, r6
 8007a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d907      	bls.n	8007a9c <_fwalk_sglue+0x38>
 8007a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a90:	3301      	adds	r3, #1
 8007a92:	d003      	beq.n	8007a9c <_fwalk_sglue+0x38>
 8007a94:	4629      	mov	r1, r5
 8007a96:	4638      	mov	r0, r7
 8007a98:	47c0      	blx	r8
 8007a9a:	4306      	orrs	r6, r0
 8007a9c:	3568      	adds	r5, #104	@ 0x68
 8007a9e:	e7e9      	b.n	8007a74 <_fwalk_sglue+0x10>

08007aa0 <memset>:
 8007aa0:	4402      	add	r2, r0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d100      	bne.n	8007aaa <memset+0xa>
 8007aa8:	4770      	bx	lr
 8007aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8007aae:	e7f9      	b.n	8007aa4 <memset+0x4>

08007ab0 <__errno>:
 8007ab0:	4b01      	ldr	r3, [pc, #4]	@ (8007ab8 <__errno+0x8>)
 8007ab2:	6818      	ldr	r0, [r3, #0]
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	200003d4 	.word	0x200003d4

08007abc <__libc_init_array>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	4d0d      	ldr	r5, [pc, #52]	@ (8007af4 <__libc_init_array+0x38>)
 8007ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8007af8 <__libc_init_array+0x3c>)
 8007ac2:	1b64      	subs	r4, r4, r5
 8007ac4:	10a4      	asrs	r4, r4, #2
 8007ac6:	2600      	movs	r6, #0
 8007ac8:	42a6      	cmp	r6, r4
 8007aca:	d109      	bne.n	8007ae0 <__libc_init_array+0x24>
 8007acc:	4d0b      	ldr	r5, [pc, #44]	@ (8007afc <__libc_init_array+0x40>)
 8007ace:	4c0c      	ldr	r4, [pc, #48]	@ (8007b00 <__libc_init_array+0x44>)
 8007ad0:	f002 f8f6 	bl	8009cc0 <_init>
 8007ad4:	1b64      	subs	r4, r4, r5
 8007ad6:	10a4      	asrs	r4, r4, #2
 8007ad8:	2600      	movs	r6, #0
 8007ada:	42a6      	cmp	r6, r4
 8007adc:	d105      	bne.n	8007aea <__libc_init_array+0x2e>
 8007ade:	bd70      	pop	{r4, r5, r6, pc}
 8007ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae4:	4798      	blx	r3
 8007ae6:	3601      	adds	r6, #1
 8007ae8:	e7ee      	b.n	8007ac8 <__libc_init_array+0xc>
 8007aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aee:	4798      	blx	r3
 8007af0:	3601      	adds	r6, #1
 8007af2:	e7f2      	b.n	8007ada <__libc_init_array+0x1e>
 8007af4:	0800a0e4 	.word	0x0800a0e4
 8007af8:	0800a0e4 	.word	0x0800a0e4
 8007afc:	0800a0e4 	.word	0x0800a0e4
 8007b00:	0800a0e8 	.word	0x0800a0e8

08007b04 <__retarget_lock_init_recursive>:
 8007b04:	4770      	bx	lr

08007b06 <__retarget_lock_acquire_recursive>:
 8007b06:	4770      	bx	lr

08007b08 <__retarget_lock_release_recursive>:
 8007b08:	4770      	bx	lr
	...

08007b0c <_localeconv_r>:
 8007b0c:	4800      	ldr	r0, [pc, #0]	@ (8007b10 <_localeconv_r+0x4>)
 8007b0e:	4770      	bx	lr
 8007b10:	20000514 	.word	0x20000514

08007b14 <memcpy>:
 8007b14:	440a      	add	r2, r1
 8007b16:	4291      	cmp	r1, r2
 8007b18:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b1c:	d100      	bne.n	8007b20 <memcpy+0xc>
 8007b1e:	4770      	bx	lr
 8007b20:	b510      	push	{r4, lr}
 8007b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b2a:	4291      	cmp	r1, r2
 8007b2c:	d1f9      	bne.n	8007b22 <memcpy+0xe>
 8007b2e:	bd10      	pop	{r4, pc}

08007b30 <quorem>:
 8007b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b34:	6903      	ldr	r3, [r0, #16]
 8007b36:	690c      	ldr	r4, [r1, #16]
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	4607      	mov	r7, r0
 8007b3c:	db7e      	blt.n	8007c3c <quorem+0x10c>
 8007b3e:	3c01      	subs	r4, #1
 8007b40:	f101 0814 	add.w	r8, r1, #20
 8007b44:	00a3      	lsls	r3, r4, #2
 8007b46:	f100 0514 	add.w	r5, r0, #20
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b50:	9301      	str	r3, [sp, #4]
 8007b52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b62:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b66:	d32e      	bcc.n	8007bc6 <quorem+0x96>
 8007b68:	f04f 0a00 	mov.w	sl, #0
 8007b6c:	46c4      	mov	ip, r8
 8007b6e:	46ae      	mov	lr, r5
 8007b70:	46d3      	mov	fp, sl
 8007b72:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b76:	b298      	uxth	r0, r3
 8007b78:	fb06 a000 	mla	r0, r6, r0, sl
 8007b7c:	0c02      	lsrs	r2, r0, #16
 8007b7e:	0c1b      	lsrs	r3, r3, #16
 8007b80:	fb06 2303 	mla	r3, r6, r3, r2
 8007b84:	f8de 2000 	ldr.w	r2, [lr]
 8007b88:	b280      	uxth	r0, r0
 8007b8a:	b292      	uxth	r2, r2
 8007b8c:	1a12      	subs	r2, r2, r0
 8007b8e:	445a      	add	r2, fp
 8007b90:	f8de 0000 	ldr.w	r0, [lr]
 8007b94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b9e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007ba2:	b292      	uxth	r2, r2
 8007ba4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ba8:	45e1      	cmp	r9, ip
 8007baa:	f84e 2b04 	str.w	r2, [lr], #4
 8007bae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007bb2:	d2de      	bcs.n	8007b72 <quorem+0x42>
 8007bb4:	9b00      	ldr	r3, [sp, #0]
 8007bb6:	58eb      	ldr	r3, [r5, r3]
 8007bb8:	b92b      	cbnz	r3, 8007bc6 <quorem+0x96>
 8007bba:	9b01      	ldr	r3, [sp, #4]
 8007bbc:	3b04      	subs	r3, #4
 8007bbe:	429d      	cmp	r5, r3
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	d32f      	bcc.n	8007c24 <quorem+0xf4>
 8007bc4:	613c      	str	r4, [r7, #16]
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	f001 fb36 	bl	8009238 <__mcmp>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	db25      	blt.n	8007c1c <quorem+0xec>
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bd8:	f8d1 c000 	ldr.w	ip, [r1]
 8007bdc:	fa1f fe82 	uxth.w	lr, r2
 8007be0:	fa1f f38c 	uxth.w	r3, ip
 8007be4:	eba3 030e 	sub.w	r3, r3, lr
 8007be8:	4403      	add	r3, r0
 8007bea:	0c12      	lsrs	r2, r2, #16
 8007bec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007bf0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bfa:	45c1      	cmp	r9, r8
 8007bfc:	f841 3b04 	str.w	r3, [r1], #4
 8007c00:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c04:	d2e6      	bcs.n	8007bd4 <quorem+0xa4>
 8007c06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c0e:	b922      	cbnz	r2, 8007c1a <quorem+0xea>
 8007c10:	3b04      	subs	r3, #4
 8007c12:	429d      	cmp	r5, r3
 8007c14:	461a      	mov	r2, r3
 8007c16:	d30b      	bcc.n	8007c30 <quorem+0x100>
 8007c18:	613c      	str	r4, [r7, #16]
 8007c1a:	3601      	adds	r6, #1
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	b003      	add	sp, #12
 8007c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c24:	6812      	ldr	r2, [r2, #0]
 8007c26:	3b04      	subs	r3, #4
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	d1cb      	bne.n	8007bc4 <quorem+0x94>
 8007c2c:	3c01      	subs	r4, #1
 8007c2e:	e7c6      	b.n	8007bbe <quorem+0x8e>
 8007c30:	6812      	ldr	r2, [r2, #0]
 8007c32:	3b04      	subs	r3, #4
 8007c34:	2a00      	cmp	r2, #0
 8007c36:	d1ef      	bne.n	8007c18 <quorem+0xe8>
 8007c38:	3c01      	subs	r4, #1
 8007c3a:	e7ea      	b.n	8007c12 <quorem+0xe2>
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	e7ee      	b.n	8007c1e <quorem+0xee>

08007c40 <_dtoa_r>:
 8007c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	69c7      	ldr	r7, [r0, #28]
 8007c46:	b097      	sub	sp, #92	@ 0x5c
 8007c48:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007c4c:	ec55 4b10 	vmov	r4, r5, d0
 8007c50:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007c52:	9107      	str	r1, [sp, #28]
 8007c54:	4681      	mov	r9, r0
 8007c56:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c58:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c5a:	b97f      	cbnz	r7, 8007c7c <_dtoa_r+0x3c>
 8007c5c:	2010      	movs	r0, #16
 8007c5e:	f000 ff17 	bl	8008a90 <malloc>
 8007c62:	4602      	mov	r2, r0
 8007c64:	f8c9 001c 	str.w	r0, [r9, #28]
 8007c68:	b920      	cbnz	r0, 8007c74 <_dtoa_r+0x34>
 8007c6a:	4ba9      	ldr	r3, [pc, #676]	@ (8007f10 <_dtoa_r+0x2d0>)
 8007c6c:	21ef      	movs	r1, #239	@ 0xef
 8007c6e:	48a9      	ldr	r0, [pc, #676]	@ (8007f14 <_dtoa_r+0x2d4>)
 8007c70:	f001 fccc 	bl	800960c <__assert_func>
 8007c74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007c78:	6007      	str	r7, [r0, #0]
 8007c7a:	60c7      	str	r7, [r0, #12]
 8007c7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c80:	6819      	ldr	r1, [r3, #0]
 8007c82:	b159      	cbz	r1, 8007c9c <_dtoa_r+0x5c>
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	604a      	str	r2, [r1, #4]
 8007c88:	2301      	movs	r3, #1
 8007c8a:	4093      	lsls	r3, r2
 8007c8c:	608b      	str	r3, [r1, #8]
 8007c8e:	4648      	mov	r0, r9
 8007c90:	f001 f8a0 	bl	8008dd4 <_Bfree>
 8007c94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	1e2b      	subs	r3, r5, #0
 8007c9e:	bfb9      	ittee	lt
 8007ca0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ca4:	9305      	strlt	r3, [sp, #20]
 8007ca6:	2300      	movge	r3, #0
 8007ca8:	6033      	strge	r3, [r6, #0]
 8007caa:	9f05      	ldr	r7, [sp, #20]
 8007cac:	4b9a      	ldr	r3, [pc, #616]	@ (8007f18 <_dtoa_r+0x2d8>)
 8007cae:	bfbc      	itt	lt
 8007cb0:	2201      	movlt	r2, #1
 8007cb2:	6032      	strlt	r2, [r6, #0]
 8007cb4:	43bb      	bics	r3, r7
 8007cb6:	d112      	bne.n	8007cde <_dtoa_r+0x9e>
 8007cb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007cba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007cc4:	4323      	orrs	r3, r4
 8007cc6:	f000 855a 	beq.w	800877e <_dtoa_r+0xb3e>
 8007cca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ccc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007f2c <_dtoa_r+0x2ec>
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 855c 	beq.w	800878e <_dtoa_r+0xb4e>
 8007cd6:	f10a 0303 	add.w	r3, sl, #3
 8007cda:	f000 bd56 	b.w	800878a <_dtoa_r+0xb4a>
 8007cde:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	ec51 0b17 	vmov	r0, r1, d7
 8007ce8:	2300      	movs	r3, #0
 8007cea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007cee:	f7f8 ff1b 	bl	8000b28 <__aeabi_dcmpeq>
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	b158      	cbz	r0, 8007d0e <_dtoa_r+0xce>
 8007cf6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	6013      	str	r3, [r2, #0]
 8007cfc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cfe:	b113      	cbz	r3, 8007d06 <_dtoa_r+0xc6>
 8007d00:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007d02:	4b86      	ldr	r3, [pc, #536]	@ (8007f1c <_dtoa_r+0x2dc>)
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007f30 <_dtoa_r+0x2f0>
 8007d0a:	f000 bd40 	b.w	800878e <_dtoa_r+0xb4e>
 8007d0e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007d12:	aa14      	add	r2, sp, #80	@ 0x50
 8007d14:	a915      	add	r1, sp, #84	@ 0x54
 8007d16:	4648      	mov	r0, r9
 8007d18:	f001 fb3e 	bl	8009398 <__d2b>
 8007d1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d20:	9002      	str	r0, [sp, #8]
 8007d22:	2e00      	cmp	r6, #0
 8007d24:	d078      	beq.n	8007e18 <_dtoa_r+0x1d8>
 8007d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d28:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d40:	4619      	mov	r1, r3
 8007d42:	2200      	movs	r2, #0
 8007d44:	4b76      	ldr	r3, [pc, #472]	@ (8007f20 <_dtoa_r+0x2e0>)
 8007d46:	f7f8 facf 	bl	80002e8 <__aeabi_dsub>
 8007d4a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007ef8 <_dtoa_r+0x2b8>)
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f7f8 fc82 	bl	8000658 <__aeabi_dmul>
 8007d54:	a36a      	add	r3, pc, #424	@ (adr r3, 8007f00 <_dtoa_r+0x2c0>)
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f7f8 fac7 	bl	80002ec <__adddf3>
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4630      	mov	r0, r6
 8007d62:	460d      	mov	r5, r1
 8007d64:	f7f8 fc0e 	bl	8000584 <__aeabi_i2d>
 8007d68:	a367      	add	r3, pc, #412	@ (adr r3, 8007f08 <_dtoa_r+0x2c8>)
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	f7f8 fc73 	bl	8000658 <__aeabi_dmul>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4620      	mov	r0, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f7f8 fab7 	bl	80002ec <__adddf3>
 8007d7e:	4604      	mov	r4, r0
 8007d80:	460d      	mov	r5, r1
 8007d82:	f7f8 ff19 	bl	8000bb8 <__aeabi_d2iz>
 8007d86:	2200      	movs	r2, #0
 8007d88:	4607      	mov	r7, r0
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f7f8 fed4 	bl	8000b3c <__aeabi_dcmplt>
 8007d94:	b140      	cbz	r0, 8007da8 <_dtoa_r+0x168>
 8007d96:	4638      	mov	r0, r7
 8007d98:	f7f8 fbf4 	bl	8000584 <__aeabi_i2d>
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	462b      	mov	r3, r5
 8007da0:	f7f8 fec2 	bl	8000b28 <__aeabi_dcmpeq>
 8007da4:	b900      	cbnz	r0, 8007da8 <_dtoa_r+0x168>
 8007da6:	3f01      	subs	r7, #1
 8007da8:	2f16      	cmp	r7, #22
 8007daa:	d852      	bhi.n	8007e52 <_dtoa_r+0x212>
 8007dac:	4b5d      	ldr	r3, [pc, #372]	@ (8007f24 <_dtoa_r+0x2e4>)
 8007dae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007dba:	f7f8 febf 	bl	8000b3c <__aeabi_dcmplt>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d049      	beq.n	8007e56 <_dtoa_r+0x216>
 8007dc2:	3f01      	subs	r7, #1
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007dc8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007dca:	1b9b      	subs	r3, r3, r6
 8007dcc:	1e5a      	subs	r2, r3, #1
 8007dce:	bf45      	ittet	mi
 8007dd0:	f1c3 0301 	rsbmi	r3, r3, #1
 8007dd4:	9300      	strmi	r3, [sp, #0]
 8007dd6:	2300      	movpl	r3, #0
 8007dd8:	2300      	movmi	r3, #0
 8007dda:	9206      	str	r2, [sp, #24]
 8007ddc:	bf54      	ite	pl
 8007dde:	9300      	strpl	r3, [sp, #0]
 8007de0:	9306      	strmi	r3, [sp, #24]
 8007de2:	2f00      	cmp	r7, #0
 8007de4:	db39      	blt.n	8007e5a <_dtoa_r+0x21a>
 8007de6:	9b06      	ldr	r3, [sp, #24]
 8007de8:	970d      	str	r7, [sp, #52]	@ 0x34
 8007dea:	443b      	add	r3, r7
 8007dec:	9306      	str	r3, [sp, #24]
 8007dee:	2300      	movs	r3, #0
 8007df0:	9308      	str	r3, [sp, #32]
 8007df2:	9b07      	ldr	r3, [sp, #28]
 8007df4:	2b09      	cmp	r3, #9
 8007df6:	d863      	bhi.n	8007ec0 <_dtoa_r+0x280>
 8007df8:	2b05      	cmp	r3, #5
 8007dfa:	bfc4      	itt	gt
 8007dfc:	3b04      	subgt	r3, #4
 8007dfe:	9307      	strgt	r3, [sp, #28]
 8007e00:	9b07      	ldr	r3, [sp, #28]
 8007e02:	f1a3 0302 	sub.w	r3, r3, #2
 8007e06:	bfcc      	ite	gt
 8007e08:	2400      	movgt	r4, #0
 8007e0a:	2401      	movle	r4, #1
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d863      	bhi.n	8007ed8 <_dtoa_r+0x298>
 8007e10:	e8df f003 	tbb	[pc, r3]
 8007e14:	2b375452 	.word	0x2b375452
 8007e18:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007e1c:	441e      	add	r6, r3
 8007e1e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	bfc1      	itttt	gt
 8007e26:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e2a:	409f      	lslgt	r7, r3
 8007e2c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e30:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e34:	bfd6      	itet	le
 8007e36:	f1c3 0320 	rsble	r3, r3, #32
 8007e3a:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e3e:	fa04 f003 	lslle.w	r0, r4, r3
 8007e42:	f7f8 fb8f 	bl	8000564 <__aeabi_ui2d>
 8007e46:	2201      	movs	r2, #1
 8007e48:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e4c:	3e01      	subs	r6, #1
 8007e4e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007e50:	e776      	b.n	8007d40 <_dtoa_r+0x100>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e7b7      	b.n	8007dc6 <_dtoa_r+0x186>
 8007e56:	9010      	str	r0, [sp, #64]	@ 0x40
 8007e58:	e7b6      	b.n	8007dc8 <_dtoa_r+0x188>
 8007e5a:	9b00      	ldr	r3, [sp, #0]
 8007e5c:	1bdb      	subs	r3, r3, r7
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	427b      	negs	r3, r7
 8007e62:	9308      	str	r3, [sp, #32]
 8007e64:	2300      	movs	r3, #0
 8007e66:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e68:	e7c3      	b.n	8007df2 <_dtoa_r+0x1b2>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e70:	eb07 0b03 	add.w	fp, r7, r3
 8007e74:	f10b 0301 	add.w	r3, fp, #1
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	9303      	str	r3, [sp, #12]
 8007e7c:	bfb8      	it	lt
 8007e7e:	2301      	movlt	r3, #1
 8007e80:	e006      	b.n	8007e90 <_dtoa_r+0x250>
 8007e82:	2301      	movs	r3, #1
 8007e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	dd28      	ble.n	8007ede <_dtoa_r+0x29e>
 8007e8c:	469b      	mov	fp, r3
 8007e8e:	9303      	str	r3, [sp, #12]
 8007e90:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007e94:	2100      	movs	r1, #0
 8007e96:	2204      	movs	r2, #4
 8007e98:	f102 0514 	add.w	r5, r2, #20
 8007e9c:	429d      	cmp	r5, r3
 8007e9e:	d926      	bls.n	8007eee <_dtoa_r+0x2ae>
 8007ea0:	6041      	str	r1, [r0, #4]
 8007ea2:	4648      	mov	r0, r9
 8007ea4:	f000 ff56 	bl	8008d54 <_Balloc>
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d142      	bne.n	8007f34 <_dtoa_r+0x2f4>
 8007eae:	4b1e      	ldr	r3, [pc, #120]	@ (8007f28 <_dtoa_r+0x2e8>)
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	f240 11af 	movw	r1, #431	@ 0x1af
 8007eb6:	e6da      	b.n	8007c6e <_dtoa_r+0x2e>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e7e3      	b.n	8007e84 <_dtoa_r+0x244>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e7d5      	b.n	8007e6c <_dtoa_r+0x22c>
 8007ec0:	2401      	movs	r4, #1
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9307      	str	r3, [sp, #28]
 8007ec6:	9409      	str	r4, [sp, #36]	@ 0x24
 8007ec8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8cd b00c 	str.w	fp, [sp, #12]
 8007ed2:	2312      	movs	r3, #18
 8007ed4:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ed6:	e7db      	b.n	8007e90 <_dtoa_r+0x250>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8007edc:	e7f4      	b.n	8007ec8 <_dtoa_r+0x288>
 8007ede:	f04f 0b01 	mov.w	fp, #1
 8007ee2:	f8cd b00c 	str.w	fp, [sp, #12]
 8007ee6:	465b      	mov	r3, fp
 8007ee8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007eec:	e7d0      	b.n	8007e90 <_dtoa_r+0x250>
 8007eee:	3101      	adds	r1, #1
 8007ef0:	0052      	lsls	r2, r2, #1
 8007ef2:	e7d1      	b.n	8007e98 <_dtoa_r+0x258>
 8007ef4:	f3af 8000 	nop.w
 8007ef8:	636f4361 	.word	0x636f4361
 8007efc:	3fd287a7 	.word	0x3fd287a7
 8007f00:	8b60c8b3 	.word	0x8b60c8b3
 8007f04:	3fc68a28 	.word	0x3fc68a28
 8007f08:	509f79fb 	.word	0x509f79fb
 8007f0c:	3fd34413 	.word	0x3fd34413
 8007f10:	08009da7 	.word	0x08009da7
 8007f14:	08009dbe 	.word	0x08009dbe
 8007f18:	7ff00000 	.word	0x7ff00000
 8007f1c:	08009d77 	.word	0x08009d77
 8007f20:	3ff80000 	.word	0x3ff80000
 8007f24:	08009f10 	.word	0x08009f10
 8007f28:	08009e16 	.word	0x08009e16
 8007f2c:	08009da3 	.word	0x08009da3
 8007f30:	08009d76 	.word	0x08009d76
 8007f34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f38:	6018      	str	r0, [r3, #0]
 8007f3a:	9b03      	ldr	r3, [sp, #12]
 8007f3c:	2b0e      	cmp	r3, #14
 8007f3e:	f200 80a1 	bhi.w	8008084 <_dtoa_r+0x444>
 8007f42:	2c00      	cmp	r4, #0
 8007f44:	f000 809e 	beq.w	8008084 <_dtoa_r+0x444>
 8007f48:	2f00      	cmp	r7, #0
 8007f4a:	dd33      	ble.n	8007fb4 <_dtoa_r+0x374>
 8007f4c:	4b9c      	ldr	r3, [pc, #624]	@ (80081c0 <_dtoa_r+0x580>)
 8007f4e:	f007 020f 	and.w	r2, r7, #15
 8007f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f56:	ed93 7b00 	vldr	d7, [r3]
 8007f5a:	05f8      	lsls	r0, r7, #23
 8007f5c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007f60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f64:	d516      	bpl.n	8007f94 <_dtoa_r+0x354>
 8007f66:	4b97      	ldr	r3, [pc, #604]	@ (80081c4 <_dtoa_r+0x584>)
 8007f68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f70:	f7f8 fc9c 	bl	80008ac <__aeabi_ddiv>
 8007f74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f78:	f004 040f 	and.w	r4, r4, #15
 8007f7c:	2603      	movs	r6, #3
 8007f7e:	4d91      	ldr	r5, [pc, #580]	@ (80081c4 <_dtoa_r+0x584>)
 8007f80:	b954      	cbnz	r4, 8007f98 <_dtoa_r+0x358>
 8007f82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f8a:	f7f8 fc8f 	bl	80008ac <__aeabi_ddiv>
 8007f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f92:	e028      	b.n	8007fe6 <_dtoa_r+0x3a6>
 8007f94:	2602      	movs	r6, #2
 8007f96:	e7f2      	b.n	8007f7e <_dtoa_r+0x33e>
 8007f98:	07e1      	lsls	r1, r4, #31
 8007f9a:	d508      	bpl.n	8007fae <_dtoa_r+0x36e>
 8007f9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007fa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fa4:	f7f8 fb58 	bl	8000658 <__aeabi_dmul>
 8007fa8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007fac:	3601      	adds	r6, #1
 8007fae:	1064      	asrs	r4, r4, #1
 8007fb0:	3508      	adds	r5, #8
 8007fb2:	e7e5      	b.n	8007f80 <_dtoa_r+0x340>
 8007fb4:	f000 80af 	beq.w	8008116 <_dtoa_r+0x4d6>
 8007fb8:	427c      	negs	r4, r7
 8007fba:	4b81      	ldr	r3, [pc, #516]	@ (80081c0 <_dtoa_r+0x580>)
 8007fbc:	4d81      	ldr	r5, [pc, #516]	@ (80081c4 <_dtoa_r+0x584>)
 8007fbe:	f004 020f 	and.w	r2, r4, #15
 8007fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007fce:	f7f8 fb43 	bl	8000658 <__aeabi_dmul>
 8007fd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fd6:	1124      	asrs	r4, r4, #4
 8007fd8:	2300      	movs	r3, #0
 8007fda:	2602      	movs	r6, #2
 8007fdc:	2c00      	cmp	r4, #0
 8007fde:	f040 808f 	bne.w	8008100 <_dtoa_r+0x4c0>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1d3      	bne.n	8007f8e <_dtoa_r+0x34e>
 8007fe6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007fe8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 8094 	beq.w	800811a <_dtoa_r+0x4da>
 8007ff2:	4b75      	ldr	r3, [pc, #468]	@ (80081c8 <_dtoa_r+0x588>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	f7f8 fd9f 	bl	8000b3c <__aeabi_dcmplt>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	f000 808b 	beq.w	800811a <_dtoa_r+0x4da>
 8008004:	9b03      	ldr	r3, [sp, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 8087 	beq.w	800811a <_dtoa_r+0x4da>
 800800c:	f1bb 0f00 	cmp.w	fp, #0
 8008010:	dd34      	ble.n	800807c <_dtoa_r+0x43c>
 8008012:	4620      	mov	r0, r4
 8008014:	4b6d      	ldr	r3, [pc, #436]	@ (80081cc <_dtoa_r+0x58c>)
 8008016:	2200      	movs	r2, #0
 8008018:	4629      	mov	r1, r5
 800801a:	f7f8 fb1d 	bl	8000658 <__aeabi_dmul>
 800801e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008022:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008026:	3601      	adds	r6, #1
 8008028:	465c      	mov	r4, fp
 800802a:	4630      	mov	r0, r6
 800802c:	f7f8 faaa 	bl	8000584 <__aeabi_i2d>
 8008030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008034:	f7f8 fb10 	bl	8000658 <__aeabi_dmul>
 8008038:	4b65      	ldr	r3, [pc, #404]	@ (80081d0 <_dtoa_r+0x590>)
 800803a:	2200      	movs	r2, #0
 800803c:	f7f8 f956 	bl	80002ec <__adddf3>
 8008040:	4605      	mov	r5, r0
 8008042:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008046:	2c00      	cmp	r4, #0
 8008048:	d16a      	bne.n	8008120 <_dtoa_r+0x4e0>
 800804a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800804e:	4b61      	ldr	r3, [pc, #388]	@ (80081d4 <_dtoa_r+0x594>)
 8008050:	2200      	movs	r2, #0
 8008052:	f7f8 f949 	bl	80002e8 <__aeabi_dsub>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800805e:	462a      	mov	r2, r5
 8008060:	4633      	mov	r3, r6
 8008062:	f7f8 fd89 	bl	8000b78 <__aeabi_dcmpgt>
 8008066:	2800      	cmp	r0, #0
 8008068:	f040 8298 	bne.w	800859c <_dtoa_r+0x95c>
 800806c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008070:	462a      	mov	r2, r5
 8008072:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008076:	f7f8 fd61 	bl	8000b3c <__aeabi_dcmplt>
 800807a:	bb38      	cbnz	r0, 80080cc <_dtoa_r+0x48c>
 800807c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008080:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008084:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008086:	2b00      	cmp	r3, #0
 8008088:	f2c0 8157 	blt.w	800833a <_dtoa_r+0x6fa>
 800808c:	2f0e      	cmp	r7, #14
 800808e:	f300 8154 	bgt.w	800833a <_dtoa_r+0x6fa>
 8008092:	4b4b      	ldr	r3, [pc, #300]	@ (80081c0 <_dtoa_r+0x580>)
 8008094:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008098:	ed93 7b00 	vldr	d7, [r3]
 800809c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800809e:	2b00      	cmp	r3, #0
 80080a0:	ed8d 7b00 	vstr	d7, [sp]
 80080a4:	f280 80e5 	bge.w	8008272 <_dtoa_r+0x632>
 80080a8:	9b03      	ldr	r3, [sp, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f300 80e1 	bgt.w	8008272 <_dtoa_r+0x632>
 80080b0:	d10c      	bne.n	80080cc <_dtoa_r+0x48c>
 80080b2:	4b48      	ldr	r3, [pc, #288]	@ (80081d4 <_dtoa_r+0x594>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	ec51 0b17 	vmov	r0, r1, d7
 80080ba:	f7f8 facd 	bl	8000658 <__aeabi_dmul>
 80080be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080c2:	f7f8 fd4f 	bl	8000b64 <__aeabi_dcmpge>
 80080c6:	2800      	cmp	r0, #0
 80080c8:	f000 8266 	beq.w	8008598 <_dtoa_r+0x958>
 80080cc:	2400      	movs	r4, #0
 80080ce:	4625      	mov	r5, r4
 80080d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080d2:	4656      	mov	r6, sl
 80080d4:	ea6f 0803 	mvn.w	r8, r3
 80080d8:	2700      	movs	r7, #0
 80080da:	4621      	mov	r1, r4
 80080dc:	4648      	mov	r0, r9
 80080de:	f000 fe79 	bl	8008dd4 <_Bfree>
 80080e2:	2d00      	cmp	r5, #0
 80080e4:	f000 80bd 	beq.w	8008262 <_dtoa_r+0x622>
 80080e8:	b12f      	cbz	r7, 80080f6 <_dtoa_r+0x4b6>
 80080ea:	42af      	cmp	r7, r5
 80080ec:	d003      	beq.n	80080f6 <_dtoa_r+0x4b6>
 80080ee:	4639      	mov	r1, r7
 80080f0:	4648      	mov	r0, r9
 80080f2:	f000 fe6f 	bl	8008dd4 <_Bfree>
 80080f6:	4629      	mov	r1, r5
 80080f8:	4648      	mov	r0, r9
 80080fa:	f000 fe6b 	bl	8008dd4 <_Bfree>
 80080fe:	e0b0      	b.n	8008262 <_dtoa_r+0x622>
 8008100:	07e2      	lsls	r2, r4, #31
 8008102:	d505      	bpl.n	8008110 <_dtoa_r+0x4d0>
 8008104:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008108:	f7f8 faa6 	bl	8000658 <__aeabi_dmul>
 800810c:	3601      	adds	r6, #1
 800810e:	2301      	movs	r3, #1
 8008110:	1064      	asrs	r4, r4, #1
 8008112:	3508      	adds	r5, #8
 8008114:	e762      	b.n	8007fdc <_dtoa_r+0x39c>
 8008116:	2602      	movs	r6, #2
 8008118:	e765      	b.n	8007fe6 <_dtoa_r+0x3a6>
 800811a:	9c03      	ldr	r4, [sp, #12]
 800811c:	46b8      	mov	r8, r7
 800811e:	e784      	b.n	800802a <_dtoa_r+0x3ea>
 8008120:	4b27      	ldr	r3, [pc, #156]	@ (80081c0 <_dtoa_r+0x580>)
 8008122:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008124:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008128:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800812c:	4454      	add	r4, sl
 800812e:	2900      	cmp	r1, #0
 8008130:	d054      	beq.n	80081dc <_dtoa_r+0x59c>
 8008132:	4929      	ldr	r1, [pc, #164]	@ (80081d8 <_dtoa_r+0x598>)
 8008134:	2000      	movs	r0, #0
 8008136:	f7f8 fbb9 	bl	80008ac <__aeabi_ddiv>
 800813a:	4633      	mov	r3, r6
 800813c:	462a      	mov	r2, r5
 800813e:	f7f8 f8d3 	bl	80002e8 <__aeabi_dsub>
 8008142:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008146:	4656      	mov	r6, sl
 8008148:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800814c:	f7f8 fd34 	bl	8000bb8 <__aeabi_d2iz>
 8008150:	4605      	mov	r5, r0
 8008152:	f7f8 fa17 	bl	8000584 <__aeabi_i2d>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800815e:	f7f8 f8c3 	bl	80002e8 <__aeabi_dsub>
 8008162:	3530      	adds	r5, #48	@ 0x30
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800816c:	f806 5b01 	strb.w	r5, [r6], #1
 8008170:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008174:	f7f8 fce2 	bl	8000b3c <__aeabi_dcmplt>
 8008178:	2800      	cmp	r0, #0
 800817a:	d172      	bne.n	8008262 <_dtoa_r+0x622>
 800817c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008180:	4911      	ldr	r1, [pc, #68]	@ (80081c8 <_dtoa_r+0x588>)
 8008182:	2000      	movs	r0, #0
 8008184:	f7f8 f8b0 	bl	80002e8 <__aeabi_dsub>
 8008188:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800818c:	f7f8 fcd6 	bl	8000b3c <__aeabi_dcmplt>
 8008190:	2800      	cmp	r0, #0
 8008192:	f040 80b4 	bne.w	80082fe <_dtoa_r+0x6be>
 8008196:	42a6      	cmp	r6, r4
 8008198:	f43f af70 	beq.w	800807c <_dtoa_r+0x43c>
 800819c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80081a0:	4b0a      	ldr	r3, [pc, #40]	@ (80081cc <_dtoa_r+0x58c>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	f7f8 fa58 	bl	8000658 <__aeabi_dmul>
 80081a8:	4b08      	ldr	r3, [pc, #32]	@ (80081cc <_dtoa_r+0x58c>)
 80081aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081ae:	2200      	movs	r2, #0
 80081b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081b4:	f7f8 fa50 	bl	8000658 <__aeabi_dmul>
 80081b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081bc:	e7c4      	b.n	8008148 <_dtoa_r+0x508>
 80081be:	bf00      	nop
 80081c0:	08009f10 	.word	0x08009f10
 80081c4:	08009ee8 	.word	0x08009ee8
 80081c8:	3ff00000 	.word	0x3ff00000
 80081cc:	40240000 	.word	0x40240000
 80081d0:	401c0000 	.word	0x401c0000
 80081d4:	40140000 	.word	0x40140000
 80081d8:	3fe00000 	.word	0x3fe00000
 80081dc:	4631      	mov	r1, r6
 80081de:	4628      	mov	r0, r5
 80081e0:	f7f8 fa3a 	bl	8000658 <__aeabi_dmul>
 80081e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081e8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80081ea:	4656      	mov	r6, sl
 80081ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081f0:	f7f8 fce2 	bl	8000bb8 <__aeabi_d2iz>
 80081f4:	4605      	mov	r5, r0
 80081f6:	f7f8 f9c5 	bl	8000584 <__aeabi_i2d>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008202:	f7f8 f871 	bl	80002e8 <__aeabi_dsub>
 8008206:	3530      	adds	r5, #48	@ 0x30
 8008208:	f806 5b01 	strb.w	r5, [r6], #1
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	42a6      	cmp	r6, r4
 8008212:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008216:	f04f 0200 	mov.w	r2, #0
 800821a:	d124      	bne.n	8008266 <_dtoa_r+0x626>
 800821c:	4baf      	ldr	r3, [pc, #700]	@ (80084dc <_dtoa_r+0x89c>)
 800821e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008222:	f7f8 f863 	bl	80002ec <__adddf3>
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800822e:	f7f8 fca3 	bl	8000b78 <__aeabi_dcmpgt>
 8008232:	2800      	cmp	r0, #0
 8008234:	d163      	bne.n	80082fe <_dtoa_r+0x6be>
 8008236:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800823a:	49a8      	ldr	r1, [pc, #672]	@ (80084dc <_dtoa_r+0x89c>)
 800823c:	2000      	movs	r0, #0
 800823e:	f7f8 f853 	bl	80002e8 <__aeabi_dsub>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800824a:	f7f8 fc77 	bl	8000b3c <__aeabi_dcmplt>
 800824e:	2800      	cmp	r0, #0
 8008250:	f43f af14 	beq.w	800807c <_dtoa_r+0x43c>
 8008254:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008256:	1e73      	subs	r3, r6, #1
 8008258:	9313      	str	r3, [sp, #76]	@ 0x4c
 800825a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800825e:	2b30      	cmp	r3, #48	@ 0x30
 8008260:	d0f8      	beq.n	8008254 <_dtoa_r+0x614>
 8008262:	4647      	mov	r7, r8
 8008264:	e03b      	b.n	80082de <_dtoa_r+0x69e>
 8008266:	4b9e      	ldr	r3, [pc, #632]	@ (80084e0 <_dtoa_r+0x8a0>)
 8008268:	f7f8 f9f6 	bl	8000658 <__aeabi_dmul>
 800826c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008270:	e7bc      	b.n	80081ec <_dtoa_r+0x5ac>
 8008272:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008276:	4656      	mov	r6, sl
 8008278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800827c:	4620      	mov	r0, r4
 800827e:	4629      	mov	r1, r5
 8008280:	f7f8 fb14 	bl	80008ac <__aeabi_ddiv>
 8008284:	f7f8 fc98 	bl	8000bb8 <__aeabi_d2iz>
 8008288:	4680      	mov	r8, r0
 800828a:	f7f8 f97b 	bl	8000584 <__aeabi_i2d>
 800828e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008292:	f7f8 f9e1 	bl	8000658 <__aeabi_dmul>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4620      	mov	r0, r4
 800829c:	4629      	mov	r1, r5
 800829e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80082a2:	f7f8 f821 	bl	80002e8 <__aeabi_dsub>
 80082a6:	f806 4b01 	strb.w	r4, [r6], #1
 80082aa:	9d03      	ldr	r5, [sp, #12]
 80082ac:	eba6 040a 	sub.w	r4, r6, sl
 80082b0:	42a5      	cmp	r5, r4
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	d133      	bne.n	8008320 <_dtoa_r+0x6e0>
 80082b8:	f7f8 f818 	bl	80002ec <__adddf3>
 80082bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082c0:	4604      	mov	r4, r0
 80082c2:	460d      	mov	r5, r1
 80082c4:	f7f8 fc58 	bl	8000b78 <__aeabi_dcmpgt>
 80082c8:	b9c0      	cbnz	r0, 80082fc <_dtoa_r+0x6bc>
 80082ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082ce:	4620      	mov	r0, r4
 80082d0:	4629      	mov	r1, r5
 80082d2:	f7f8 fc29 	bl	8000b28 <__aeabi_dcmpeq>
 80082d6:	b110      	cbz	r0, 80082de <_dtoa_r+0x69e>
 80082d8:	f018 0f01 	tst.w	r8, #1
 80082dc:	d10e      	bne.n	80082fc <_dtoa_r+0x6bc>
 80082de:	9902      	ldr	r1, [sp, #8]
 80082e0:	4648      	mov	r0, r9
 80082e2:	f000 fd77 	bl	8008dd4 <_Bfree>
 80082e6:	2300      	movs	r3, #0
 80082e8:	7033      	strb	r3, [r6, #0]
 80082ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082ec:	3701      	adds	r7, #1
 80082ee:	601f      	str	r7, [r3, #0]
 80082f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 824b 	beq.w	800878e <_dtoa_r+0xb4e>
 80082f8:	601e      	str	r6, [r3, #0]
 80082fa:	e248      	b.n	800878e <_dtoa_r+0xb4e>
 80082fc:	46b8      	mov	r8, r7
 80082fe:	4633      	mov	r3, r6
 8008300:	461e      	mov	r6, r3
 8008302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008306:	2a39      	cmp	r2, #57	@ 0x39
 8008308:	d106      	bne.n	8008318 <_dtoa_r+0x6d8>
 800830a:	459a      	cmp	sl, r3
 800830c:	d1f8      	bne.n	8008300 <_dtoa_r+0x6c0>
 800830e:	2230      	movs	r2, #48	@ 0x30
 8008310:	f108 0801 	add.w	r8, r8, #1
 8008314:	f88a 2000 	strb.w	r2, [sl]
 8008318:	781a      	ldrb	r2, [r3, #0]
 800831a:	3201      	adds	r2, #1
 800831c:	701a      	strb	r2, [r3, #0]
 800831e:	e7a0      	b.n	8008262 <_dtoa_r+0x622>
 8008320:	4b6f      	ldr	r3, [pc, #444]	@ (80084e0 <_dtoa_r+0x8a0>)
 8008322:	2200      	movs	r2, #0
 8008324:	f7f8 f998 	bl	8000658 <__aeabi_dmul>
 8008328:	2200      	movs	r2, #0
 800832a:	2300      	movs	r3, #0
 800832c:	4604      	mov	r4, r0
 800832e:	460d      	mov	r5, r1
 8008330:	f7f8 fbfa 	bl	8000b28 <__aeabi_dcmpeq>
 8008334:	2800      	cmp	r0, #0
 8008336:	d09f      	beq.n	8008278 <_dtoa_r+0x638>
 8008338:	e7d1      	b.n	80082de <_dtoa_r+0x69e>
 800833a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800833c:	2a00      	cmp	r2, #0
 800833e:	f000 80ea 	beq.w	8008516 <_dtoa_r+0x8d6>
 8008342:	9a07      	ldr	r2, [sp, #28]
 8008344:	2a01      	cmp	r2, #1
 8008346:	f300 80cd 	bgt.w	80084e4 <_dtoa_r+0x8a4>
 800834a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800834c:	2a00      	cmp	r2, #0
 800834e:	f000 80c1 	beq.w	80084d4 <_dtoa_r+0x894>
 8008352:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008356:	9c08      	ldr	r4, [sp, #32]
 8008358:	9e00      	ldr	r6, [sp, #0]
 800835a:	9a00      	ldr	r2, [sp, #0]
 800835c:	441a      	add	r2, r3
 800835e:	9200      	str	r2, [sp, #0]
 8008360:	9a06      	ldr	r2, [sp, #24]
 8008362:	2101      	movs	r1, #1
 8008364:	441a      	add	r2, r3
 8008366:	4648      	mov	r0, r9
 8008368:	9206      	str	r2, [sp, #24]
 800836a:	f000 fde7 	bl	8008f3c <__i2b>
 800836e:	4605      	mov	r5, r0
 8008370:	b166      	cbz	r6, 800838c <_dtoa_r+0x74c>
 8008372:	9b06      	ldr	r3, [sp, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	dd09      	ble.n	800838c <_dtoa_r+0x74c>
 8008378:	42b3      	cmp	r3, r6
 800837a:	9a00      	ldr	r2, [sp, #0]
 800837c:	bfa8      	it	ge
 800837e:	4633      	movge	r3, r6
 8008380:	1ad2      	subs	r2, r2, r3
 8008382:	9200      	str	r2, [sp, #0]
 8008384:	9a06      	ldr	r2, [sp, #24]
 8008386:	1af6      	subs	r6, r6, r3
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	9306      	str	r3, [sp, #24]
 800838c:	9b08      	ldr	r3, [sp, #32]
 800838e:	b30b      	cbz	r3, 80083d4 <_dtoa_r+0x794>
 8008390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 80c6 	beq.w	8008524 <_dtoa_r+0x8e4>
 8008398:	2c00      	cmp	r4, #0
 800839a:	f000 80c0 	beq.w	800851e <_dtoa_r+0x8de>
 800839e:	4629      	mov	r1, r5
 80083a0:	4622      	mov	r2, r4
 80083a2:	4648      	mov	r0, r9
 80083a4:	f000 fe82 	bl	80090ac <__pow5mult>
 80083a8:	9a02      	ldr	r2, [sp, #8]
 80083aa:	4601      	mov	r1, r0
 80083ac:	4605      	mov	r5, r0
 80083ae:	4648      	mov	r0, r9
 80083b0:	f000 fdda 	bl	8008f68 <__multiply>
 80083b4:	9902      	ldr	r1, [sp, #8]
 80083b6:	4680      	mov	r8, r0
 80083b8:	4648      	mov	r0, r9
 80083ba:	f000 fd0b 	bl	8008dd4 <_Bfree>
 80083be:	9b08      	ldr	r3, [sp, #32]
 80083c0:	1b1b      	subs	r3, r3, r4
 80083c2:	9308      	str	r3, [sp, #32]
 80083c4:	f000 80b1 	beq.w	800852a <_dtoa_r+0x8ea>
 80083c8:	9a08      	ldr	r2, [sp, #32]
 80083ca:	4641      	mov	r1, r8
 80083cc:	4648      	mov	r0, r9
 80083ce:	f000 fe6d 	bl	80090ac <__pow5mult>
 80083d2:	9002      	str	r0, [sp, #8]
 80083d4:	2101      	movs	r1, #1
 80083d6:	4648      	mov	r0, r9
 80083d8:	f000 fdb0 	bl	8008f3c <__i2b>
 80083dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083de:	4604      	mov	r4, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 81d8 	beq.w	8008796 <_dtoa_r+0xb56>
 80083e6:	461a      	mov	r2, r3
 80083e8:	4601      	mov	r1, r0
 80083ea:	4648      	mov	r0, r9
 80083ec:	f000 fe5e 	bl	80090ac <__pow5mult>
 80083f0:	9b07      	ldr	r3, [sp, #28]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	4604      	mov	r4, r0
 80083f6:	f300 809f 	bgt.w	8008538 <_dtoa_r+0x8f8>
 80083fa:	9b04      	ldr	r3, [sp, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f040 8097 	bne.w	8008530 <_dtoa_r+0x8f0>
 8008402:	9b05      	ldr	r3, [sp, #20]
 8008404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008408:	2b00      	cmp	r3, #0
 800840a:	f040 8093 	bne.w	8008534 <_dtoa_r+0x8f4>
 800840e:	9b05      	ldr	r3, [sp, #20]
 8008410:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008414:	0d1b      	lsrs	r3, r3, #20
 8008416:	051b      	lsls	r3, r3, #20
 8008418:	b133      	cbz	r3, 8008428 <_dtoa_r+0x7e8>
 800841a:	9b00      	ldr	r3, [sp, #0]
 800841c:	3301      	adds	r3, #1
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	9b06      	ldr	r3, [sp, #24]
 8008422:	3301      	adds	r3, #1
 8008424:	9306      	str	r3, [sp, #24]
 8008426:	2301      	movs	r3, #1
 8008428:	9308      	str	r3, [sp, #32]
 800842a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 81b8 	beq.w	80087a2 <_dtoa_r+0xb62>
 8008432:	6923      	ldr	r3, [r4, #16]
 8008434:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008438:	6918      	ldr	r0, [r3, #16]
 800843a:	f000 fd33 	bl	8008ea4 <__hi0bits>
 800843e:	f1c0 0020 	rsb	r0, r0, #32
 8008442:	9b06      	ldr	r3, [sp, #24]
 8008444:	4418      	add	r0, r3
 8008446:	f010 001f 	ands.w	r0, r0, #31
 800844a:	f000 8082 	beq.w	8008552 <_dtoa_r+0x912>
 800844e:	f1c0 0320 	rsb	r3, r0, #32
 8008452:	2b04      	cmp	r3, #4
 8008454:	dd73      	ble.n	800853e <_dtoa_r+0x8fe>
 8008456:	9b00      	ldr	r3, [sp, #0]
 8008458:	f1c0 001c 	rsb	r0, r0, #28
 800845c:	4403      	add	r3, r0
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	9b06      	ldr	r3, [sp, #24]
 8008462:	4403      	add	r3, r0
 8008464:	4406      	add	r6, r0
 8008466:	9306      	str	r3, [sp, #24]
 8008468:	9b00      	ldr	r3, [sp, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	dd05      	ble.n	800847a <_dtoa_r+0x83a>
 800846e:	9902      	ldr	r1, [sp, #8]
 8008470:	461a      	mov	r2, r3
 8008472:	4648      	mov	r0, r9
 8008474:	f000 fe74 	bl	8009160 <__lshift>
 8008478:	9002      	str	r0, [sp, #8]
 800847a:	9b06      	ldr	r3, [sp, #24]
 800847c:	2b00      	cmp	r3, #0
 800847e:	dd05      	ble.n	800848c <_dtoa_r+0x84c>
 8008480:	4621      	mov	r1, r4
 8008482:	461a      	mov	r2, r3
 8008484:	4648      	mov	r0, r9
 8008486:	f000 fe6b 	bl	8009160 <__lshift>
 800848a:	4604      	mov	r4, r0
 800848c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800848e:	2b00      	cmp	r3, #0
 8008490:	d061      	beq.n	8008556 <_dtoa_r+0x916>
 8008492:	9802      	ldr	r0, [sp, #8]
 8008494:	4621      	mov	r1, r4
 8008496:	f000 fecf 	bl	8009238 <__mcmp>
 800849a:	2800      	cmp	r0, #0
 800849c:	da5b      	bge.n	8008556 <_dtoa_r+0x916>
 800849e:	2300      	movs	r3, #0
 80084a0:	9902      	ldr	r1, [sp, #8]
 80084a2:	220a      	movs	r2, #10
 80084a4:	4648      	mov	r0, r9
 80084a6:	f000 fcb7 	bl	8008e18 <__multadd>
 80084aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ac:	9002      	str	r0, [sp, #8]
 80084ae:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 8177 	beq.w	80087a6 <_dtoa_r+0xb66>
 80084b8:	4629      	mov	r1, r5
 80084ba:	2300      	movs	r3, #0
 80084bc:	220a      	movs	r2, #10
 80084be:	4648      	mov	r0, r9
 80084c0:	f000 fcaa 	bl	8008e18 <__multadd>
 80084c4:	f1bb 0f00 	cmp.w	fp, #0
 80084c8:	4605      	mov	r5, r0
 80084ca:	dc6f      	bgt.n	80085ac <_dtoa_r+0x96c>
 80084cc:	9b07      	ldr	r3, [sp, #28]
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	dc49      	bgt.n	8008566 <_dtoa_r+0x926>
 80084d2:	e06b      	b.n	80085ac <_dtoa_r+0x96c>
 80084d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80084da:	e73c      	b.n	8008356 <_dtoa_r+0x716>
 80084dc:	3fe00000 	.word	0x3fe00000
 80084e0:	40240000 	.word	0x40240000
 80084e4:	9b03      	ldr	r3, [sp, #12]
 80084e6:	1e5c      	subs	r4, r3, #1
 80084e8:	9b08      	ldr	r3, [sp, #32]
 80084ea:	42a3      	cmp	r3, r4
 80084ec:	db09      	blt.n	8008502 <_dtoa_r+0x8c2>
 80084ee:	1b1c      	subs	r4, r3, r4
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f6bf af30 	bge.w	8008358 <_dtoa_r+0x718>
 80084f8:	9b00      	ldr	r3, [sp, #0]
 80084fa:	9a03      	ldr	r2, [sp, #12]
 80084fc:	1a9e      	subs	r6, r3, r2
 80084fe:	2300      	movs	r3, #0
 8008500:	e72b      	b.n	800835a <_dtoa_r+0x71a>
 8008502:	9b08      	ldr	r3, [sp, #32]
 8008504:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008506:	9408      	str	r4, [sp, #32]
 8008508:	1ae3      	subs	r3, r4, r3
 800850a:	441a      	add	r2, r3
 800850c:	9e00      	ldr	r6, [sp, #0]
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	920d      	str	r2, [sp, #52]	@ 0x34
 8008512:	2400      	movs	r4, #0
 8008514:	e721      	b.n	800835a <_dtoa_r+0x71a>
 8008516:	9c08      	ldr	r4, [sp, #32]
 8008518:	9e00      	ldr	r6, [sp, #0]
 800851a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800851c:	e728      	b.n	8008370 <_dtoa_r+0x730>
 800851e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008522:	e751      	b.n	80083c8 <_dtoa_r+0x788>
 8008524:	9a08      	ldr	r2, [sp, #32]
 8008526:	9902      	ldr	r1, [sp, #8]
 8008528:	e750      	b.n	80083cc <_dtoa_r+0x78c>
 800852a:	f8cd 8008 	str.w	r8, [sp, #8]
 800852e:	e751      	b.n	80083d4 <_dtoa_r+0x794>
 8008530:	2300      	movs	r3, #0
 8008532:	e779      	b.n	8008428 <_dtoa_r+0x7e8>
 8008534:	9b04      	ldr	r3, [sp, #16]
 8008536:	e777      	b.n	8008428 <_dtoa_r+0x7e8>
 8008538:	2300      	movs	r3, #0
 800853a:	9308      	str	r3, [sp, #32]
 800853c:	e779      	b.n	8008432 <_dtoa_r+0x7f2>
 800853e:	d093      	beq.n	8008468 <_dtoa_r+0x828>
 8008540:	9a00      	ldr	r2, [sp, #0]
 8008542:	331c      	adds	r3, #28
 8008544:	441a      	add	r2, r3
 8008546:	9200      	str	r2, [sp, #0]
 8008548:	9a06      	ldr	r2, [sp, #24]
 800854a:	441a      	add	r2, r3
 800854c:	441e      	add	r6, r3
 800854e:	9206      	str	r2, [sp, #24]
 8008550:	e78a      	b.n	8008468 <_dtoa_r+0x828>
 8008552:	4603      	mov	r3, r0
 8008554:	e7f4      	b.n	8008540 <_dtoa_r+0x900>
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	46b8      	mov	r8, r7
 800855c:	dc20      	bgt.n	80085a0 <_dtoa_r+0x960>
 800855e:	469b      	mov	fp, r3
 8008560:	9b07      	ldr	r3, [sp, #28]
 8008562:	2b02      	cmp	r3, #2
 8008564:	dd1e      	ble.n	80085a4 <_dtoa_r+0x964>
 8008566:	f1bb 0f00 	cmp.w	fp, #0
 800856a:	f47f adb1 	bne.w	80080d0 <_dtoa_r+0x490>
 800856e:	4621      	mov	r1, r4
 8008570:	465b      	mov	r3, fp
 8008572:	2205      	movs	r2, #5
 8008574:	4648      	mov	r0, r9
 8008576:	f000 fc4f 	bl	8008e18 <__multadd>
 800857a:	4601      	mov	r1, r0
 800857c:	4604      	mov	r4, r0
 800857e:	9802      	ldr	r0, [sp, #8]
 8008580:	f000 fe5a 	bl	8009238 <__mcmp>
 8008584:	2800      	cmp	r0, #0
 8008586:	f77f ada3 	ble.w	80080d0 <_dtoa_r+0x490>
 800858a:	4656      	mov	r6, sl
 800858c:	2331      	movs	r3, #49	@ 0x31
 800858e:	f806 3b01 	strb.w	r3, [r6], #1
 8008592:	f108 0801 	add.w	r8, r8, #1
 8008596:	e59f      	b.n	80080d8 <_dtoa_r+0x498>
 8008598:	9c03      	ldr	r4, [sp, #12]
 800859a:	46b8      	mov	r8, r7
 800859c:	4625      	mov	r5, r4
 800859e:	e7f4      	b.n	800858a <_dtoa_r+0x94a>
 80085a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80085a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 8101 	beq.w	80087ae <_dtoa_r+0xb6e>
 80085ac:	2e00      	cmp	r6, #0
 80085ae:	dd05      	ble.n	80085bc <_dtoa_r+0x97c>
 80085b0:	4629      	mov	r1, r5
 80085b2:	4632      	mov	r2, r6
 80085b4:	4648      	mov	r0, r9
 80085b6:	f000 fdd3 	bl	8009160 <__lshift>
 80085ba:	4605      	mov	r5, r0
 80085bc:	9b08      	ldr	r3, [sp, #32]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d05c      	beq.n	800867c <_dtoa_r+0xa3c>
 80085c2:	6869      	ldr	r1, [r5, #4]
 80085c4:	4648      	mov	r0, r9
 80085c6:	f000 fbc5 	bl	8008d54 <_Balloc>
 80085ca:	4606      	mov	r6, r0
 80085cc:	b928      	cbnz	r0, 80085da <_dtoa_r+0x99a>
 80085ce:	4b82      	ldr	r3, [pc, #520]	@ (80087d8 <_dtoa_r+0xb98>)
 80085d0:	4602      	mov	r2, r0
 80085d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80085d6:	f7ff bb4a 	b.w	8007c6e <_dtoa_r+0x2e>
 80085da:	692a      	ldr	r2, [r5, #16]
 80085dc:	3202      	adds	r2, #2
 80085de:	0092      	lsls	r2, r2, #2
 80085e0:	f105 010c 	add.w	r1, r5, #12
 80085e4:	300c      	adds	r0, #12
 80085e6:	f7ff fa95 	bl	8007b14 <memcpy>
 80085ea:	2201      	movs	r2, #1
 80085ec:	4631      	mov	r1, r6
 80085ee:	4648      	mov	r0, r9
 80085f0:	f000 fdb6 	bl	8009160 <__lshift>
 80085f4:	f10a 0301 	add.w	r3, sl, #1
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	eb0a 030b 	add.w	r3, sl, fp
 80085fe:	9308      	str	r3, [sp, #32]
 8008600:	9b04      	ldr	r3, [sp, #16]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	462f      	mov	r7, r5
 8008608:	9306      	str	r3, [sp, #24]
 800860a:	4605      	mov	r5, r0
 800860c:	9b00      	ldr	r3, [sp, #0]
 800860e:	9802      	ldr	r0, [sp, #8]
 8008610:	4621      	mov	r1, r4
 8008612:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8008616:	f7ff fa8b 	bl	8007b30 <quorem>
 800861a:	4603      	mov	r3, r0
 800861c:	3330      	adds	r3, #48	@ 0x30
 800861e:	9003      	str	r0, [sp, #12]
 8008620:	4639      	mov	r1, r7
 8008622:	9802      	ldr	r0, [sp, #8]
 8008624:	9309      	str	r3, [sp, #36]	@ 0x24
 8008626:	f000 fe07 	bl	8009238 <__mcmp>
 800862a:	462a      	mov	r2, r5
 800862c:	9004      	str	r0, [sp, #16]
 800862e:	4621      	mov	r1, r4
 8008630:	4648      	mov	r0, r9
 8008632:	f000 fe1d 	bl	8009270 <__mdiff>
 8008636:	68c2      	ldr	r2, [r0, #12]
 8008638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800863a:	4606      	mov	r6, r0
 800863c:	bb02      	cbnz	r2, 8008680 <_dtoa_r+0xa40>
 800863e:	4601      	mov	r1, r0
 8008640:	9802      	ldr	r0, [sp, #8]
 8008642:	f000 fdf9 	bl	8009238 <__mcmp>
 8008646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008648:	4602      	mov	r2, r0
 800864a:	4631      	mov	r1, r6
 800864c:	4648      	mov	r0, r9
 800864e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008650:	9309      	str	r3, [sp, #36]	@ 0x24
 8008652:	f000 fbbf 	bl	8008dd4 <_Bfree>
 8008656:	9b07      	ldr	r3, [sp, #28]
 8008658:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800865a:	9e00      	ldr	r6, [sp, #0]
 800865c:	ea42 0103 	orr.w	r1, r2, r3
 8008660:	9b06      	ldr	r3, [sp, #24]
 8008662:	4319      	orrs	r1, r3
 8008664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008666:	d10d      	bne.n	8008684 <_dtoa_r+0xa44>
 8008668:	2b39      	cmp	r3, #57	@ 0x39
 800866a:	d027      	beq.n	80086bc <_dtoa_r+0xa7c>
 800866c:	9a04      	ldr	r2, [sp, #16]
 800866e:	2a00      	cmp	r2, #0
 8008670:	dd01      	ble.n	8008676 <_dtoa_r+0xa36>
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	3331      	adds	r3, #49	@ 0x31
 8008676:	f88b 3000 	strb.w	r3, [fp]
 800867a:	e52e      	b.n	80080da <_dtoa_r+0x49a>
 800867c:	4628      	mov	r0, r5
 800867e:	e7b9      	b.n	80085f4 <_dtoa_r+0x9b4>
 8008680:	2201      	movs	r2, #1
 8008682:	e7e2      	b.n	800864a <_dtoa_r+0xa0a>
 8008684:	9904      	ldr	r1, [sp, #16]
 8008686:	2900      	cmp	r1, #0
 8008688:	db04      	blt.n	8008694 <_dtoa_r+0xa54>
 800868a:	9807      	ldr	r0, [sp, #28]
 800868c:	4301      	orrs	r1, r0
 800868e:	9806      	ldr	r0, [sp, #24]
 8008690:	4301      	orrs	r1, r0
 8008692:	d120      	bne.n	80086d6 <_dtoa_r+0xa96>
 8008694:	2a00      	cmp	r2, #0
 8008696:	ddee      	ble.n	8008676 <_dtoa_r+0xa36>
 8008698:	9902      	ldr	r1, [sp, #8]
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	2201      	movs	r2, #1
 800869e:	4648      	mov	r0, r9
 80086a0:	f000 fd5e 	bl	8009160 <__lshift>
 80086a4:	4621      	mov	r1, r4
 80086a6:	9002      	str	r0, [sp, #8]
 80086a8:	f000 fdc6 	bl	8009238 <__mcmp>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	9b00      	ldr	r3, [sp, #0]
 80086b0:	dc02      	bgt.n	80086b8 <_dtoa_r+0xa78>
 80086b2:	d1e0      	bne.n	8008676 <_dtoa_r+0xa36>
 80086b4:	07da      	lsls	r2, r3, #31
 80086b6:	d5de      	bpl.n	8008676 <_dtoa_r+0xa36>
 80086b8:	2b39      	cmp	r3, #57	@ 0x39
 80086ba:	d1da      	bne.n	8008672 <_dtoa_r+0xa32>
 80086bc:	2339      	movs	r3, #57	@ 0x39
 80086be:	f88b 3000 	strb.w	r3, [fp]
 80086c2:	4633      	mov	r3, r6
 80086c4:	461e      	mov	r6, r3
 80086c6:	3b01      	subs	r3, #1
 80086c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80086cc:	2a39      	cmp	r2, #57	@ 0x39
 80086ce:	d04e      	beq.n	800876e <_dtoa_r+0xb2e>
 80086d0:	3201      	adds	r2, #1
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	e501      	b.n	80080da <_dtoa_r+0x49a>
 80086d6:	2a00      	cmp	r2, #0
 80086d8:	dd03      	ble.n	80086e2 <_dtoa_r+0xaa2>
 80086da:	2b39      	cmp	r3, #57	@ 0x39
 80086dc:	d0ee      	beq.n	80086bc <_dtoa_r+0xa7c>
 80086de:	3301      	adds	r3, #1
 80086e0:	e7c9      	b.n	8008676 <_dtoa_r+0xa36>
 80086e2:	9a00      	ldr	r2, [sp, #0]
 80086e4:	9908      	ldr	r1, [sp, #32]
 80086e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086ea:	428a      	cmp	r2, r1
 80086ec:	d028      	beq.n	8008740 <_dtoa_r+0xb00>
 80086ee:	9902      	ldr	r1, [sp, #8]
 80086f0:	2300      	movs	r3, #0
 80086f2:	220a      	movs	r2, #10
 80086f4:	4648      	mov	r0, r9
 80086f6:	f000 fb8f 	bl	8008e18 <__multadd>
 80086fa:	42af      	cmp	r7, r5
 80086fc:	9002      	str	r0, [sp, #8]
 80086fe:	f04f 0300 	mov.w	r3, #0
 8008702:	f04f 020a 	mov.w	r2, #10
 8008706:	4639      	mov	r1, r7
 8008708:	4648      	mov	r0, r9
 800870a:	d107      	bne.n	800871c <_dtoa_r+0xadc>
 800870c:	f000 fb84 	bl	8008e18 <__multadd>
 8008710:	4607      	mov	r7, r0
 8008712:	4605      	mov	r5, r0
 8008714:	9b00      	ldr	r3, [sp, #0]
 8008716:	3301      	adds	r3, #1
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	e777      	b.n	800860c <_dtoa_r+0x9cc>
 800871c:	f000 fb7c 	bl	8008e18 <__multadd>
 8008720:	4629      	mov	r1, r5
 8008722:	4607      	mov	r7, r0
 8008724:	2300      	movs	r3, #0
 8008726:	220a      	movs	r2, #10
 8008728:	4648      	mov	r0, r9
 800872a:	f000 fb75 	bl	8008e18 <__multadd>
 800872e:	4605      	mov	r5, r0
 8008730:	e7f0      	b.n	8008714 <_dtoa_r+0xad4>
 8008732:	f1bb 0f00 	cmp.w	fp, #0
 8008736:	bfcc      	ite	gt
 8008738:	465e      	movgt	r6, fp
 800873a:	2601      	movle	r6, #1
 800873c:	4456      	add	r6, sl
 800873e:	2700      	movs	r7, #0
 8008740:	9902      	ldr	r1, [sp, #8]
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	2201      	movs	r2, #1
 8008746:	4648      	mov	r0, r9
 8008748:	f000 fd0a 	bl	8009160 <__lshift>
 800874c:	4621      	mov	r1, r4
 800874e:	9002      	str	r0, [sp, #8]
 8008750:	f000 fd72 	bl	8009238 <__mcmp>
 8008754:	2800      	cmp	r0, #0
 8008756:	dcb4      	bgt.n	80086c2 <_dtoa_r+0xa82>
 8008758:	d102      	bne.n	8008760 <_dtoa_r+0xb20>
 800875a:	9b00      	ldr	r3, [sp, #0]
 800875c:	07db      	lsls	r3, r3, #31
 800875e:	d4b0      	bmi.n	80086c2 <_dtoa_r+0xa82>
 8008760:	4633      	mov	r3, r6
 8008762:	461e      	mov	r6, r3
 8008764:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008768:	2a30      	cmp	r2, #48	@ 0x30
 800876a:	d0fa      	beq.n	8008762 <_dtoa_r+0xb22>
 800876c:	e4b5      	b.n	80080da <_dtoa_r+0x49a>
 800876e:	459a      	cmp	sl, r3
 8008770:	d1a8      	bne.n	80086c4 <_dtoa_r+0xa84>
 8008772:	2331      	movs	r3, #49	@ 0x31
 8008774:	f108 0801 	add.w	r8, r8, #1
 8008778:	f88a 3000 	strb.w	r3, [sl]
 800877c:	e4ad      	b.n	80080da <_dtoa_r+0x49a>
 800877e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008780:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80087dc <_dtoa_r+0xb9c>
 8008784:	b11b      	cbz	r3, 800878e <_dtoa_r+0xb4e>
 8008786:	f10a 0308 	add.w	r3, sl, #8
 800878a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	4650      	mov	r0, sl
 8008790:	b017      	add	sp, #92	@ 0x5c
 8008792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008796:	9b07      	ldr	r3, [sp, #28]
 8008798:	2b01      	cmp	r3, #1
 800879a:	f77f ae2e 	ble.w	80083fa <_dtoa_r+0x7ba>
 800879e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087a0:	9308      	str	r3, [sp, #32]
 80087a2:	2001      	movs	r0, #1
 80087a4:	e64d      	b.n	8008442 <_dtoa_r+0x802>
 80087a6:	f1bb 0f00 	cmp.w	fp, #0
 80087aa:	f77f aed9 	ble.w	8008560 <_dtoa_r+0x920>
 80087ae:	4656      	mov	r6, sl
 80087b0:	9802      	ldr	r0, [sp, #8]
 80087b2:	4621      	mov	r1, r4
 80087b4:	f7ff f9bc 	bl	8007b30 <quorem>
 80087b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80087bc:	f806 3b01 	strb.w	r3, [r6], #1
 80087c0:	eba6 020a 	sub.w	r2, r6, sl
 80087c4:	4593      	cmp	fp, r2
 80087c6:	ddb4      	ble.n	8008732 <_dtoa_r+0xaf2>
 80087c8:	9902      	ldr	r1, [sp, #8]
 80087ca:	2300      	movs	r3, #0
 80087cc:	220a      	movs	r2, #10
 80087ce:	4648      	mov	r0, r9
 80087d0:	f000 fb22 	bl	8008e18 <__multadd>
 80087d4:	9002      	str	r0, [sp, #8]
 80087d6:	e7eb      	b.n	80087b0 <_dtoa_r+0xb70>
 80087d8:	08009e16 	.word	0x08009e16
 80087dc:	08009d9a 	.word	0x08009d9a

080087e0 <__ssputs_r>:
 80087e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e4:	688e      	ldr	r6, [r1, #8]
 80087e6:	461f      	mov	r7, r3
 80087e8:	42be      	cmp	r6, r7
 80087ea:	680b      	ldr	r3, [r1, #0]
 80087ec:	4682      	mov	sl, r0
 80087ee:	460c      	mov	r4, r1
 80087f0:	4690      	mov	r8, r2
 80087f2:	d82d      	bhi.n	8008850 <__ssputs_r+0x70>
 80087f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087fc:	d026      	beq.n	800884c <__ssputs_r+0x6c>
 80087fe:	6965      	ldr	r5, [r4, #20]
 8008800:	6909      	ldr	r1, [r1, #16]
 8008802:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008806:	eba3 0901 	sub.w	r9, r3, r1
 800880a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800880e:	1c7b      	adds	r3, r7, #1
 8008810:	444b      	add	r3, r9
 8008812:	106d      	asrs	r5, r5, #1
 8008814:	429d      	cmp	r5, r3
 8008816:	bf38      	it	cc
 8008818:	461d      	movcc	r5, r3
 800881a:	0553      	lsls	r3, r2, #21
 800881c:	d527      	bpl.n	800886e <__ssputs_r+0x8e>
 800881e:	4629      	mov	r1, r5
 8008820:	f000 f960 	bl	8008ae4 <_malloc_r>
 8008824:	4606      	mov	r6, r0
 8008826:	b360      	cbz	r0, 8008882 <__ssputs_r+0xa2>
 8008828:	6921      	ldr	r1, [r4, #16]
 800882a:	464a      	mov	r2, r9
 800882c:	f7ff f972 	bl	8007b14 <memcpy>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	6126      	str	r6, [r4, #16]
 800883e:	6165      	str	r5, [r4, #20]
 8008840:	444e      	add	r6, r9
 8008842:	eba5 0509 	sub.w	r5, r5, r9
 8008846:	6026      	str	r6, [r4, #0]
 8008848:	60a5      	str	r5, [r4, #8]
 800884a:	463e      	mov	r6, r7
 800884c:	42be      	cmp	r6, r7
 800884e:	d900      	bls.n	8008852 <__ssputs_r+0x72>
 8008850:	463e      	mov	r6, r7
 8008852:	6820      	ldr	r0, [r4, #0]
 8008854:	4632      	mov	r2, r6
 8008856:	4641      	mov	r1, r8
 8008858:	f000 fe67 	bl	800952a <memmove>
 800885c:	68a3      	ldr	r3, [r4, #8]
 800885e:	1b9b      	subs	r3, r3, r6
 8008860:	60a3      	str	r3, [r4, #8]
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	4433      	add	r3, r6
 8008866:	6023      	str	r3, [r4, #0]
 8008868:	2000      	movs	r0, #0
 800886a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886e:	462a      	mov	r2, r5
 8008870:	f000 fe2d 	bl	80094ce <_realloc_r>
 8008874:	4606      	mov	r6, r0
 8008876:	2800      	cmp	r0, #0
 8008878:	d1e0      	bne.n	800883c <__ssputs_r+0x5c>
 800887a:	6921      	ldr	r1, [r4, #16]
 800887c:	4650      	mov	r0, sl
 800887e:	f000 fef7 	bl	8009670 <_free_r>
 8008882:	230c      	movs	r3, #12
 8008884:	f8ca 3000 	str.w	r3, [sl]
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008894:	e7e9      	b.n	800886a <__ssputs_r+0x8a>
	...

08008898 <_svfiprintf_r>:
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	4698      	mov	r8, r3
 800889e:	898b      	ldrh	r3, [r1, #12]
 80088a0:	061b      	lsls	r3, r3, #24
 80088a2:	b09d      	sub	sp, #116	@ 0x74
 80088a4:	4607      	mov	r7, r0
 80088a6:	460d      	mov	r5, r1
 80088a8:	4614      	mov	r4, r2
 80088aa:	d510      	bpl.n	80088ce <_svfiprintf_r+0x36>
 80088ac:	690b      	ldr	r3, [r1, #16]
 80088ae:	b973      	cbnz	r3, 80088ce <_svfiprintf_r+0x36>
 80088b0:	2140      	movs	r1, #64	@ 0x40
 80088b2:	f000 f917 	bl	8008ae4 <_malloc_r>
 80088b6:	6028      	str	r0, [r5, #0]
 80088b8:	6128      	str	r0, [r5, #16]
 80088ba:	b930      	cbnz	r0, 80088ca <_svfiprintf_r+0x32>
 80088bc:	230c      	movs	r3, #12
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088c4:	b01d      	add	sp, #116	@ 0x74
 80088c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ca:	2340      	movs	r3, #64	@ 0x40
 80088cc:	616b      	str	r3, [r5, #20]
 80088ce:	2300      	movs	r3, #0
 80088d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80088d2:	2320      	movs	r3, #32
 80088d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80088dc:	2330      	movs	r3, #48	@ 0x30
 80088de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a7c <_svfiprintf_r+0x1e4>
 80088e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088e6:	f04f 0901 	mov.w	r9, #1
 80088ea:	4623      	mov	r3, r4
 80088ec:	469a      	mov	sl, r3
 80088ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088f2:	b10a      	cbz	r2, 80088f8 <_svfiprintf_r+0x60>
 80088f4:	2a25      	cmp	r2, #37	@ 0x25
 80088f6:	d1f9      	bne.n	80088ec <_svfiprintf_r+0x54>
 80088f8:	ebba 0b04 	subs.w	fp, sl, r4
 80088fc:	d00b      	beq.n	8008916 <_svfiprintf_r+0x7e>
 80088fe:	465b      	mov	r3, fp
 8008900:	4622      	mov	r2, r4
 8008902:	4629      	mov	r1, r5
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff ff6b 	bl	80087e0 <__ssputs_r>
 800890a:	3001      	adds	r0, #1
 800890c:	f000 80a7 	beq.w	8008a5e <_svfiprintf_r+0x1c6>
 8008910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008912:	445a      	add	r2, fp
 8008914:	9209      	str	r2, [sp, #36]	@ 0x24
 8008916:	f89a 3000 	ldrb.w	r3, [sl]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 809f 	beq.w	8008a5e <_svfiprintf_r+0x1c6>
 8008920:	2300      	movs	r3, #0
 8008922:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800892a:	f10a 0a01 	add.w	sl, sl, #1
 800892e:	9304      	str	r3, [sp, #16]
 8008930:	9307      	str	r3, [sp, #28]
 8008932:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008936:	931a      	str	r3, [sp, #104]	@ 0x68
 8008938:	4654      	mov	r4, sl
 800893a:	2205      	movs	r2, #5
 800893c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008940:	484e      	ldr	r0, [pc, #312]	@ (8008a7c <_svfiprintf_r+0x1e4>)
 8008942:	f7f7 fc75 	bl	8000230 <memchr>
 8008946:	9a04      	ldr	r2, [sp, #16]
 8008948:	b9d8      	cbnz	r0, 8008982 <_svfiprintf_r+0xea>
 800894a:	06d0      	lsls	r0, r2, #27
 800894c:	bf44      	itt	mi
 800894e:	2320      	movmi	r3, #32
 8008950:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008954:	0711      	lsls	r1, r2, #28
 8008956:	bf44      	itt	mi
 8008958:	232b      	movmi	r3, #43	@ 0x2b
 800895a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800895e:	f89a 3000 	ldrb.w	r3, [sl]
 8008962:	2b2a      	cmp	r3, #42	@ 0x2a
 8008964:	d015      	beq.n	8008992 <_svfiprintf_r+0xfa>
 8008966:	9a07      	ldr	r2, [sp, #28]
 8008968:	4654      	mov	r4, sl
 800896a:	2000      	movs	r0, #0
 800896c:	f04f 0c0a 	mov.w	ip, #10
 8008970:	4621      	mov	r1, r4
 8008972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008976:	3b30      	subs	r3, #48	@ 0x30
 8008978:	2b09      	cmp	r3, #9
 800897a:	d94b      	bls.n	8008a14 <_svfiprintf_r+0x17c>
 800897c:	b1b0      	cbz	r0, 80089ac <_svfiprintf_r+0x114>
 800897e:	9207      	str	r2, [sp, #28]
 8008980:	e014      	b.n	80089ac <_svfiprintf_r+0x114>
 8008982:	eba0 0308 	sub.w	r3, r0, r8
 8008986:	fa09 f303 	lsl.w	r3, r9, r3
 800898a:	4313      	orrs	r3, r2
 800898c:	9304      	str	r3, [sp, #16]
 800898e:	46a2      	mov	sl, r4
 8008990:	e7d2      	b.n	8008938 <_svfiprintf_r+0xa0>
 8008992:	9b03      	ldr	r3, [sp, #12]
 8008994:	1d19      	adds	r1, r3, #4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	9103      	str	r1, [sp, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	bfbb      	ittet	lt
 800899e:	425b      	neglt	r3, r3
 80089a0:	f042 0202 	orrlt.w	r2, r2, #2
 80089a4:	9307      	strge	r3, [sp, #28]
 80089a6:	9307      	strlt	r3, [sp, #28]
 80089a8:	bfb8      	it	lt
 80089aa:	9204      	strlt	r2, [sp, #16]
 80089ac:	7823      	ldrb	r3, [r4, #0]
 80089ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80089b0:	d10a      	bne.n	80089c8 <_svfiprintf_r+0x130>
 80089b2:	7863      	ldrb	r3, [r4, #1]
 80089b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80089b6:	d132      	bne.n	8008a1e <_svfiprintf_r+0x186>
 80089b8:	9b03      	ldr	r3, [sp, #12]
 80089ba:	1d1a      	adds	r2, r3, #4
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	9203      	str	r2, [sp, #12]
 80089c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089c4:	3402      	adds	r4, #2
 80089c6:	9305      	str	r3, [sp, #20]
 80089c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a8c <_svfiprintf_r+0x1f4>
 80089cc:	7821      	ldrb	r1, [r4, #0]
 80089ce:	2203      	movs	r2, #3
 80089d0:	4650      	mov	r0, sl
 80089d2:	f7f7 fc2d 	bl	8000230 <memchr>
 80089d6:	b138      	cbz	r0, 80089e8 <_svfiprintf_r+0x150>
 80089d8:	9b04      	ldr	r3, [sp, #16]
 80089da:	eba0 000a 	sub.w	r0, r0, sl
 80089de:	2240      	movs	r2, #64	@ 0x40
 80089e0:	4082      	lsls	r2, r0
 80089e2:	4313      	orrs	r3, r2
 80089e4:	3401      	adds	r4, #1
 80089e6:	9304      	str	r3, [sp, #16]
 80089e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ec:	4824      	ldr	r0, [pc, #144]	@ (8008a80 <_svfiprintf_r+0x1e8>)
 80089ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089f2:	2206      	movs	r2, #6
 80089f4:	f7f7 fc1c 	bl	8000230 <memchr>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d036      	beq.n	8008a6a <_svfiprintf_r+0x1d2>
 80089fc:	4b21      	ldr	r3, [pc, #132]	@ (8008a84 <_svfiprintf_r+0x1ec>)
 80089fe:	bb1b      	cbnz	r3, 8008a48 <_svfiprintf_r+0x1b0>
 8008a00:	9b03      	ldr	r3, [sp, #12]
 8008a02:	3307      	adds	r3, #7
 8008a04:	f023 0307 	bic.w	r3, r3, #7
 8008a08:	3308      	adds	r3, #8
 8008a0a:	9303      	str	r3, [sp, #12]
 8008a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a0e:	4433      	add	r3, r6
 8008a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a12:	e76a      	b.n	80088ea <_svfiprintf_r+0x52>
 8008a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a18:	460c      	mov	r4, r1
 8008a1a:	2001      	movs	r0, #1
 8008a1c:	e7a8      	b.n	8008970 <_svfiprintf_r+0xd8>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	3401      	adds	r4, #1
 8008a22:	9305      	str	r3, [sp, #20]
 8008a24:	4619      	mov	r1, r3
 8008a26:	f04f 0c0a 	mov.w	ip, #10
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a30:	3a30      	subs	r2, #48	@ 0x30
 8008a32:	2a09      	cmp	r2, #9
 8008a34:	d903      	bls.n	8008a3e <_svfiprintf_r+0x1a6>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0c6      	beq.n	80089c8 <_svfiprintf_r+0x130>
 8008a3a:	9105      	str	r1, [sp, #20]
 8008a3c:	e7c4      	b.n	80089c8 <_svfiprintf_r+0x130>
 8008a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a42:	4604      	mov	r4, r0
 8008a44:	2301      	movs	r3, #1
 8008a46:	e7f0      	b.n	8008a2a <_svfiprintf_r+0x192>
 8008a48:	ab03      	add	r3, sp, #12
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	462a      	mov	r2, r5
 8008a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a88 <_svfiprintf_r+0x1f0>)
 8008a50:	a904      	add	r1, sp, #16
 8008a52:	4638      	mov	r0, r7
 8008a54:	f7fe fb76 	bl	8007144 <_printf_float>
 8008a58:	1c42      	adds	r2, r0, #1
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	d1d6      	bne.n	8008a0c <_svfiprintf_r+0x174>
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	065b      	lsls	r3, r3, #25
 8008a62:	f53f af2d 	bmi.w	80088c0 <_svfiprintf_r+0x28>
 8008a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a68:	e72c      	b.n	80088c4 <_svfiprintf_r+0x2c>
 8008a6a:	ab03      	add	r3, sp, #12
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	462a      	mov	r2, r5
 8008a70:	4b05      	ldr	r3, [pc, #20]	@ (8008a88 <_svfiprintf_r+0x1f0>)
 8008a72:	a904      	add	r1, sp, #16
 8008a74:	4638      	mov	r0, r7
 8008a76:	f7fe fdfd 	bl	8007674 <_printf_i>
 8008a7a:	e7ed      	b.n	8008a58 <_svfiprintf_r+0x1c0>
 8008a7c:	08009e27 	.word	0x08009e27
 8008a80:	08009e31 	.word	0x08009e31
 8008a84:	08007145 	.word	0x08007145
 8008a88:	080087e1 	.word	0x080087e1
 8008a8c:	08009e2d 	.word	0x08009e2d

08008a90 <malloc>:
 8008a90:	4b02      	ldr	r3, [pc, #8]	@ (8008a9c <malloc+0xc>)
 8008a92:	4601      	mov	r1, r0
 8008a94:	6818      	ldr	r0, [r3, #0]
 8008a96:	f000 b825 	b.w	8008ae4 <_malloc_r>
 8008a9a:	bf00      	nop
 8008a9c:	200003d4 	.word	0x200003d4

08008aa0 <sbrk_aligned>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	4e0f      	ldr	r6, [pc, #60]	@ (8008ae0 <sbrk_aligned+0x40>)
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	6831      	ldr	r1, [r6, #0]
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	b911      	cbnz	r1, 8008ab2 <sbrk_aligned+0x12>
 8008aac:	f000 fd7c 	bl	80095a8 <_sbrk_r>
 8008ab0:	6030      	str	r0, [r6, #0]
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	f000 fd77 	bl	80095a8 <_sbrk_r>
 8008aba:	1c43      	adds	r3, r0, #1
 8008abc:	d103      	bne.n	8008ac6 <sbrk_aligned+0x26>
 8008abe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	bd70      	pop	{r4, r5, r6, pc}
 8008ac6:	1cc4      	adds	r4, r0, #3
 8008ac8:	f024 0403 	bic.w	r4, r4, #3
 8008acc:	42a0      	cmp	r0, r4
 8008ace:	d0f8      	beq.n	8008ac2 <sbrk_aligned+0x22>
 8008ad0:	1a21      	subs	r1, r4, r0
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f000 fd68 	bl	80095a8 <_sbrk_r>
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d1f2      	bne.n	8008ac2 <sbrk_aligned+0x22>
 8008adc:	e7ef      	b.n	8008abe <sbrk_aligned+0x1e>
 8008ade:	bf00      	nop
 8008ae0:	20000b3c 	.word	0x20000b3c

08008ae4 <_malloc_r>:
 8008ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae8:	1ccd      	adds	r5, r1, #3
 8008aea:	f025 0503 	bic.w	r5, r5, #3
 8008aee:	3508      	adds	r5, #8
 8008af0:	2d0c      	cmp	r5, #12
 8008af2:	bf38      	it	cc
 8008af4:	250c      	movcc	r5, #12
 8008af6:	2d00      	cmp	r5, #0
 8008af8:	4606      	mov	r6, r0
 8008afa:	db01      	blt.n	8008b00 <_malloc_r+0x1c>
 8008afc:	42a9      	cmp	r1, r5
 8008afe:	d904      	bls.n	8008b0a <_malloc_r+0x26>
 8008b00:	230c      	movs	r3, #12
 8008b02:	6033      	str	r3, [r6, #0]
 8008b04:	2000      	movs	r0, #0
 8008b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008be0 <_malloc_r+0xfc>
 8008b0e:	f000 f915 	bl	8008d3c <__malloc_lock>
 8008b12:	f8d8 3000 	ldr.w	r3, [r8]
 8008b16:	461c      	mov	r4, r3
 8008b18:	bb44      	cbnz	r4, 8008b6c <_malloc_r+0x88>
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f7ff ffbf 	bl	8008aa0 <sbrk_aligned>
 8008b22:	1c43      	adds	r3, r0, #1
 8008b24:	4604      	mov	r4, r0
 8008b26:	d158      	bne.n	8008bda <_malloc_r+0xf6>
 8008b28:	f8d8 4000 	ldr.w	r4, [r8]
 8008b2c:	4627      	mov	r7, r4
 8008b2e:	2f00      	cmp	r7, #0
 8008b30:	d143      	bne.n	8008bba <_malloc_r+0xd6>
 8008b32:	2c00      	cmp	r4, #0
 8008b34:	d04b      	beq.n	8008bce <_malloc_r+0xea>
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	4639      	mov	r1, r7
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	eb04 0903 	add.w	r9, r4, r3
 8008b40:	f000 fd32 	bl	80095a8 <_sbrk_r>
 8008b44:	4581      	cmp	r9, r0
 8008b46:	d142      	bne.n	8008bce <_malloc_r+0xea>
 8008b48:	6821      	ldr	r1, [r4, #0]
 8008b4a:	1a6d      	subs	r5, r5, r1
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f7ff ffa6 	bl	8008aa0 <sbrk_aligned>
 8008b54:	3001      	adds	r0, #1
 8008b56:	d03a      	beq.n	8008bce <_malloc_r+0xea>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	442b      	add	r3, r5
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	bb62      	cbnz	r2, 8008bc0 <_malloc_r+0xdc>
 8008b66:	f8c8 7000 	str.w	r7, [r8]
 8008b6a:	e00f      	b.n	8008b8c <_malloc_r+0xa8>
 8008b6c:	6822      	ldr	r2, [r4, #0]
 8008b6e:	1b52      	subs	r2, r2, r5
 8008b70:	d420      	bmi.n	8008bb4 <_malloc_r+0xd0>
 8008b72:	2a0b      	cmp	r2, #11
 8008b74:	d917      	bls.n	8008ba6 <_malloc_r+0xc2>
 8008b76:	1961      	adds	r1, r4, r5
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	6025      	str	r5, [r4, #0]
 8008b7c:	bf18      	it	ne
 8008b7e:	6059      	strne	r1, [r3, #4]
 8008b80:	6863      	ldr	r3, [r4, #4]
 8008b82:	bf08      	it	eq
 8008b84:	f8c8 1000 	streq.w	r1, [r8]
 8008b88:	5162      	str	r2, [r4, r5]
 8008b8a:	604b      	str	r3, [r1, #4]
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	f000 f8db 	bl	8008d48 <__malloc_unlock>
 8008b92:	f104 000b 	add.w	r0, r4, #11
 8008b96:	1d23      	adds	r3, r4, #4
 8008b98:	f020 0007 	bic.w	r0, r0, #7
 8008b9c:	1ac2      	subs	r2, r0, r3
 8008b9e:	bf1c      	itt	ne
 8008ba0:	1a1b      	subne	r3, r3, r0
 8008ba2:	50a3      	strne	r3, [r4, r2]
 8008ba4:	e7af      	b.n	8008b06 <_malloc_r+0x22>
 8008ba6:	6862      	ldr	r2, [r4, #4]
 8008ba8:	42a3      	cmp	r3, r4
 8008baa:	bf0c      	ite	eq
 8008bac:	f8c8 2000 	streq.w	r2, [r8]
 8008bb0:	605a      	strne	r2, [r3, #4]
 8008bb2:	e7eb      	b.n	8008b8c <_malloc_r+0xa8>
 8008bb4:	4623      	mov	r3, r4
 8008bb6:	6864      	ldr	r4, [r4, #4]
 8008bb8:	e7ae      	b.n	8008b18 <_malloc_r+0x34>
 8008bba:	463c      	mov	r4, r7
 8008bbc:	687f      	ldr	r7, [r7, #4]
 8008bbe:	e7b6      	b.n	8008b2e <_malloc_r+0x4a>
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	d1fb      	bne.n	8008bc0 <_malloc_r+0xdc>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	6053      	str	r3, [r2, #4]
 8008bcc:	e7de      	b.n	8008b8c <_malloc_r+0xa8>
 8008bce:	230c      	movs	r3, #12
 8008bd0:	6033      	str	r3, [r6, #0]
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f000 f8b8 	bl	8008d48 <__malloc_unlock>
 8008bd8:	e794      	b.n	8008b04 <_malloc_r+0x20>
 8008bda:	6005      	str	r5, [r0, #0]
 8008bdc:	e7d6      	b.n	8008b8c <_malloc_r+0xa8>
 8008bde:	bf00      	nop
 8008be0:	20000b40 	.word	0x20000b40

08008be4 <__sflush_r>:
 8008be4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bec:	0716      	lsls	r6, r2, #28
 8008bee:	4605      	mov	r5, r0
 8008bf0:	460c      	mov	r4, r1
 8008bf2:	d454      	bmi.n	8008c9e <__sflush_r+0xba>
 8008bf4:	684b      	ldr	r3, [r1, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	dc02      	bgt.n	8008c00 <__sflush_r+0x1c>
 8008bfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	dd48      	ble.n	8008c92 <__sflush_r+0xae>
 8008c00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d045      	beq.n	8008c92 <__sflush_r+0xae>
 8008c06:	2300      	movs	r3, #0
 8008c08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c0c:	682f      	ldr	r7, [r5, #0]
 8008c0e:	6a21      	ldr	r1, [r4, #32]
 8008c10:	602b      	str	r3, [r5, #0]
 8008c12:	d030      	beq.n	8008c76 <__sflush_r+0x92>
 8008c14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	0759      	lsls	r1, r3, #29
 8008c1a:	d505      	bpl.n	8008c28 <__sflush_r+0x44>
 8008c1c:	6863      	ldr	r3, [r4, #4]
 8008c1e:	1ad2      	subs	r2, r2, r3
 8008c20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c22:	b10b      	cbz	r3, 8008c28 <__sflush_r+0x44>
 8008c24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c26:	1ad2      	subs	r2, r2, r3
 8008c28:	2300      	movs	r3, #0
 8008c2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c2c:	6a21      	ldr	r1, [r4, #32]
 8008c2e:	4628      	mov	r0, r5
 8008c30:	47b0      	blx	r6
 8008c32:	1c43      	adds	r3, r0, #1
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	d106      	bne.n	8008c46 <__sflush_r+0x62>
 8008c38:	6829      	ldr	r1, [r5, #0]
 8008c3a:	291d      	cmp	r1, #29
 8008c3c:	d82b      	bhi.n	8008c96 <__sflush_r+0xb2>
 8008c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8008ce8 <__sflush_r+0x104>)
 8008c40:	40ca      	lsrs	r2, r1
 8008c42:	07d6      	lsls	r6, r2, #31
 8008c44:	d527      	bpl.n	8008c96 <__sflush_r+0xb2>
 8008c46:	2200      	movs	r2, #0
 8008c48:	6062      	str	r2, [r4, #4]
 8008c4a:	04d9      	lsls	r1, r3, #19
 8008c4c:	6922      	ldr	r2, [r4, #16]
 8008c4e:	6022      	str	r2, [r4, #0]
 8008c50:	d504      	bpl.n	8008c5c <__sflush_r+0x78>
 8008c52:	1c42      	adds	r2, r0, #1
 8008c54:	d101      	bne.n	8008c5a <__sflush_r+0x76>
 8008c56:	682b      	ldr	r3, [r5, #0]
 8008c58:	b903      	cbnz	r3, 8008c5c <__sflush_r+0x78>
 8008c5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c5e:	602f      	str	r7, [r5, #0]
 8008c60:	b1b9      	cbz	r1, 8008c92 <__sflush_r+0xae>
 8008c62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c66:	4299      	cmp	r1, r3
 8008c68:	d002      	beq.n	8008c70 <__sflush_r+0x8c>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f000 fd00 	bl	8009670 <_free_r>
 8008c70:	2300      	movs	r3, #0
 8008c72:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c74:	e00d      	b.n	8008c92 <__sflush_r+0xae>
 8008c76:	2301      	movs	r3, #1
 8008c78:	4628      	mov	r0, r5
 8008c7a:	47b0      	blx	r6
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	1c50      	adds	r0, r2, #1
 8008c80:	d1c9      	bne.n	8008c16 <__sflush_r+0x32>
 8008c82:	682b      	ldr	r3, [r5, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0c6      	beq.n	8008c16 <__sflush_r+0x32>
 8008c88:	2b1d      	cmp	r3, #29
 8008c8a:	d001      	beq.n	8008c90 <__sflush_r+0xac>
 8008c8c:	2b16      	cmp	r3, #22
 8008c8e:	d11e      	bne.n	8008cce <__sflush_r+0xea>
 8008c90:	602f      	str	r7, [r5, #0]
 8008c92:	2000      	movs	r0, #0
 8008c94:	e022      	b.n	8008cdc <__sflush_r+0xf8>
 8008c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c9a:	b21b      	sxth	r3, r3
 8008c9c:	e01b      	b.n	8008cd6 <__sflush_r+0xf2>
 8008c9e:	690f      	ldr	r7, [r1, #16]
 8008ca0:	2f00      	cmp	r7, #0
 8008ca2:	d0f6      	beq.n	8008c92 <__sflush_r+0xae>
 8008ca4:	0793      	lsls	r3, r2, #30
 8008ca6:	680e      	ldr	r6, [r1, #0]
 8008ca8:	bf08      	it	eq
 8008caa:	694b      	ldreq	r3, [r1, #20]
 8008cac:	600f      	str	r7, [r1, #0]
 8008cae:	bf18      	it	ne
 8008cb0:	2300      	movne	r3, #0
 8008cb2:	eba6 0807 	sub.w	r8, r6, r7
 8008cb6:	608b      	str	r3, [r1, #8]
 8008cb8:	f1b8 0f00 	cmp.w	r8, #0
 8008cbc:	dde9      	ble.n	8008c92 <__sflush_r+0xae>
 8008cbe:	6a21      	ldr	r1, [r4, #32]
 8008cc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008cc2:	4643      	mov	r3, r8
 8008cc4:	463a      	mov	r2, r7
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	47b0      	blx	r6
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	dc08      	bgt.n	8008ce0 <__sflush_r+0xfc>
 8008cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cd6:	81a3      	strh	r3, [r4, #12]
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce0:	4407      	add	r7, r0
 8008ce2:	eba8 0800 	sub.w	r8, r8, r0
 8008ce6:	e7e7      	b.n	8008cb8 <__sflush_r+0xd4>
 8008ce8:	20400001 	.word	0x20400001

08008cec <_fflush_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	690b      	ldr	r3, [r1, #16]
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	b913      	cbnz	r3, 8008cfc <_fflush_r+0x10>
 8008cf6:	2500      	movs	r5, #0
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	b118      	cbz	r0, 8008d06 <_fflush_r+0x1a>
 8008cfe:	6a03      	ldr	r3, [r0, #32]
 8008d00:	b90b      	cbnz	r3, 8008d06 <_fflush_r+0x1a>
 8008d02:	f7fe fe97 	bl	8007a34 <__sinit>
 8008d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0f3      	beq.n	8008cf6 <_fflush_r+0xa>
 8008d0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d10:	07d0      	lsls	r0, r2, #31
 8008d12:	d404      	bmi.n	8008d1e <_fflush_r+0x32>
 8008d14:	0599      	lsls	r1, r3, #22
 8008d16:	d402      	bmi.n	8008d1e <_fflush_r+0x32>
 8008d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d1a:	f7fe fef4 	bl	8007b06 <__retarget_lock_acquire_recursive>
 8008d1e:	4628      	mov	r0, r5
 8008d20:	4621      	mov	r1, r4
 8008d22:	f7ff ff5f 	bl	8008be4 <__sflush_r>
 8008d26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d28:	07da      	lsls	r2, r3, #31
 8008d2a:	4605      	mov	r5, r0
 8008d2c:	d4e4      	bmi.n	8008cf8 <_fflush_r+0xc>
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	059b      	lsls	r3, r3, #22
 8008d32:	d4e1      	bmi.n	8008cf8 <_fflush_r+0xc>
 8008d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d36:	f7fe fee7 	bl	8007b08 <__retarget_lock_release_recursive>
 8008d3a:	e7dd      	b.n	8008cf8 <_fflush_r+0xc>

08008d3c <__malloc_lock>:
 8008d3c:	4801      	ldr	r0, [pc, #4]	@ (8008d44 <__malloc_lock+0x8>)
 8008d3e:	f7fe bee2 	b.w	8007b06 <__retarget_lock_acquire_recursive>
 8008d42:	bf00      	nop
 8008d44:	20000b38 	.word	0x20000b38

08008d48 <__malloc_unlock>:
 8008d48:	4801      	ldr	r0, [pc, #4]	@ (8008d50 <__malloc_unlock+0x8>)
 8008d4a:	f7fe bedd 	b.w	8007b08 <__retarget_lock_release_recursive>
 8008d4e:	bf00      	nop
 8008d50:	20000b38 	.word	0x20000b38

08008d54 <_Balloc>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	69c6      	ldr	r6, [r0, #28]
 8008d58:	4604      	mov	r4, r0
 8008d5a:	460d      	mov	r5, r1
 8008d5c:	b976      	cbnz	r6, 8008d7c <_Balloc+0x28>
 8008d5e:	2010      	movs	r0, #16
 8008d60:	f7ff fe96 	bl	8008a90 <malloc>
 8008d64:	4602      	mov	r2, r0
 8008d66:	61e0      	str	r0, [r4, #28]
 8008d68:	b920      	cbnz	r0, 8008d74 <_Balloc+0x20>
 8008d6a:	4b18      	ldr	r3, [pc, #96]	@ (8008dcc <_Balloc+0x78>)
 8008d6c:	4818      	ldr	r0, [pc, #96]	@ (8008dd0 <_Balloc+0x7c>)
 8008d6e:	216b      	movs	r1, #107	@ 0x6b
 8008d70:	f000 fc4c 	bl	800960c <__assert_func>
 8008d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d78:	6006      	str	r6, [r0, #0]
 8008d7a:	60c6      	str	r6, [r0, #12]
 8008d7c:	69e6      	ldr	r6, [r4, #28]
 8008d7e:	68f3      	ldr	r3, [r6, #12]
 8008d80:	b183      	cbz	r3, 8008da4 <_Balloc+0x50>
 8008d82:	69e3      	ldr	r3, [r4, #28]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d8a:	b9b8      	cbnz	r0, 8008dbc <_Balloc+0x68>
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	fa01 f605 	lsl.w	r6, r1, r5
 8008d92:	1d72      	adds	r2, r6, #5
 8008d94:	0092      	lsls	r2, r2, #2
 8008d96:	4620      	mov	r0, r4
 8008d98:	f000 fc56 	bl	8009648 <_calloc_r>
 8008d9c:	b160      	cbz	r0, 8008db8 <_Balloc+0x64>
 8008d9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008da2:	e00e      	b.n	8008dc2 <_Balloc+0x6e>
 8008da4:	2221      	movs	r2, #33	@ 0x21
 8008da6:	2104      	movs	r1, #4
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fc4d 	bl	8009648 <_calloc_r>
 8008dae:	69e3      	ldr	r3, [r4, #28]
 8008db0:	60f0      	str	r0, [r6, #12]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e4      	bne.n	8008d82 <_Balloc+0x2e>
 8008db8:	2000      	movs	r0, #0
 8008dba:	bd70      	pop	{r4, r5, r6, pc}
 8008dbc:	6802      	ldr	r2, [r0, #0]
 8008dbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dc8:	e7f7      	b.n	8008dba <_Balloc+0x66>
 8008dca:	bf00      	nop
 8008dcc:	08009da7 	.word	0x08009da7
 8008dd0:	08009e38 	.word	0x08009e38

08008dd4 <_Bfree>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	69c6      	ldr	r6, [r0, #28]
 8008dd8:	4605      	mov	r5, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	b976      	cbnz	r6, 8008dfc <_Bfree+0x28>
 8008dde:	2010      	movs	r0, #16
 8008de0:	f7ff fe56 	bl	8008a90 <malloc>
 8008de4:	4602      	mov	r2, r0
 8008de6:	61e8      	str	r0, [r5, #28]
 8008de8:	b920      	cbnz	r0, 8008df4 <_Bfree+0x20>
 8008dea:	4b09      	ldr	r3, [pc, #36]	@ (8008e10 <_Bfree+0x3c>)
 8008dec:	4809      	ldr	r0, [pc, #36]	@ (8008e14 <_Bfree+0x40>)
 8008dee:	218f      	movs	r1, #143	@ 0x8f
 8008df0:	f000 fc0c 	bl	800960c <__assert_func>
 8008df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008df8:	6006      	str	r6, [r0, #0]
 8008dfa:	60c6      	str	r6, [r0, #12]
 8008dfc:	b13c      	cbz	r4, 8008e0e <_Bfree+0x3a>
 8008dfe:	69eb      	ldr	r3, [r5, #28]
 8008e00:	6862      	ldr	r2, [r4, #4]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e08:	6021      	str	r1, [r4, #0]
 8008e0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}
 8008e10:	08009da7 	.word	0x08009da7
 8008e14:	08009e38 	.word	0x08009e38

08008e18 <__multadd>:
 8008e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1c:	690d      	ldr	r5, [r1, #16]
 8008e1e:	4607      	mov	r7, r0
 8008e20:	460c      	mov	r4, r1
 8008e22:	461e      	mov	r6, r3
 8008e24:	f101 0c14 	add.w	ip, r1, #20
 8008e28:	2000      	movs	r0, #0
 8008e2a:	f8dc 3000 	ldr.w	r3, [ip]
 8008e2e:	b299      	uxth	r1, r3
 8008e30:	fb02 6101 	mla	r1, r2, r1, r6
 8008e34:	0c1e      	lsrs	r6, r3, #16
 8008e36:	0c0b      	lsrs	r3, r1, #16
 8008e38:	fb02 3306 	mla	r3, r2, r6, r3
 8008e3c:	b289      	uxth	r1, r1
 8008e3e:	3001      	adds	r0, #1
 8008e40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e44:	4285      	cmp	r5, r0
 8008e46:	f84c 1b04 	str.w	r1, [ip], #4
 8008e4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e4e:	dcec      	bgt.n	8008e2a <__multadd+0x12>
 8008e50:	b30e      	cbz	r6, 8008e96 <__multadd+0x7e>
 8008e52:	68a3      	ldr	r3, [r4, #8]
 8008e54:	42ab      	cmp	r3, r5
 8008e56:	dc19      	bgt.n	8008e8c <__multadd+0x74>
 8008e58:	6861      	ldr	r1, [r4, #4]
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	3101      	adds	r1, #1
 8008e5e:	f7ff ff79 	bl	8008d54 <_Balloc>
 8008e62:	4680      	mov	r8, r0
 8008e64:	b928      	cbnz	r0, 8008e72 <__multadd+0x5a>
 8008e66:	4602      	mov	r2, r0
 8008e68:	4b0c      	ldr	r3, [pc, #48]	@ (8008e9c <__multadd+0x84>)
 8008e6a:	480d      	ldr	r0, [pc, #52]	@ (8008ea0 <__multadd+0x88>)
 8008e6c:	21ba      	movs	r1, #186	@ 0xba
 8008e6e:	f000 fbcd 	bl	800960c <__assert_func>
 8008e72:	6922      	ldr	r2, [r4, #16]
 8008e74:	3202      	adds	r2, #2
 8008e76:	f104 010c 	add.w	r1, r4, #12
 8008e7a:	0092      	lsls	r2, r2, #2
 8008e7c:	300c      	adds	r0, #12
 8008e7e:	f7fe fe49 	bl	8007b14 <memcpy>
 8008e82:	4621      	mov	r1, r4
 8008e84:	4638      	mov	r0, r7
 8008e86:	f7ff ffa5 	bl	8008dd4 <_Bfree>
 8008e8a:	4644      	mov	r4, r8
 8008e8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e90:	3501      	adds	r5, #1
 8008e92:	615e      	str	r6, [r3, #20]
 8008e94:	6125      	str	r5, [r4, #16]
 8008e96:	4620      	mov	r0, r4
 8008e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e9c:	08009e16 	.word	0x08009e16
 8008ea0:	08009e38 	.word	0x08009e38

08008ea4 <__hi0bits>:
 8008ea4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	bf36      	itet	cc
 8008eac:	0403      	lslcc	r3, r0, #16
 8008eae:	2000      	movcs	r0, #0
 8008eb0:	2010      	movcc	r0, #16
 8008eb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008eb6:	bf3c      	itt	cc
 8008eb8:	021b      	lslcc	r3, r3, #8
 8008eba:	3008      	addcc	r0, #8
 8008ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ec0:	bf3c      	itt	cc
 8008ec2:	011b      	lslcc	r3, r3, #4
 8008ec4:	3004      	addcc	r0, #4
 8008ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eca:	bf3c      	itt	cc
 8008ecc:	009b      	lslcc	r3, r3, #2
 8008ece:	3002      	addcc	r0, #2
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	db05      	blt.n	8008ee0 <__hi0bits+0x3c>
 8008ed4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ed8:	f100 0001 	add.w	r0, r0, #1
 8008edc:	bf08      	it	eq
 8008ede:	2020      	moveq	r0, #32
 8008ee0:	4770      	bx	lr

08008ee2 <__lo0bits>:
 8008ee2:	6803      	ldr	r3, [r0, #0]
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	f013 0007 	ands.w	r0, r3, #7
 8008eea:	d00b      	beq.n	8008f04 <__lo0bits+0x22>
 8008eec:	07d9      	lsls	r1, r3, #31
 8008eee:	d421      	bmi.n	8008f34 <__lo0bits+0x52>
 8008ef0:	0798      	lsls	r0, r3, #30
 8008ef2:	bf49      	itett	mi
 8008ef4:	085b      	lsrmi	r3, r3, #1
 8008ef6:	089b      	lsrpl	r3, r3, #2
 8008ef8:	2001      	movmi	r0, #1
 8008efa:	6013      	strmi	r3, [r2, #0]
 8008efc:	bf5c      	itt	pl
 8008efe:	6013      	strpl	r3, [r2, #0]
 8008f00:	2002      	movpl	r0, #2
 8008f02:	4770      	bx	lr
 8008f04:	b299      	uxth	r1, r3
 8008f06:	b909      	cbnz	r1, 8008f0c <__lo0bits+0x2a>
 8008f08:	0c1b      	lsrs	r3, r3, #16
 8008f0a:	2010      	movs	r0, #16
 8008f0c:	b2d9      	uxtb	r1, r3
 8008f0e:	b909      	cbnz	r1, 8008f14 <__lo0bits+0x32>
 8008f10:	3008      	adds	r0, #8
 8008f12:	0a1b      	lsrs	r3, r3, #8
 8008f14:	0719      	lsls	r1, r3, #28
 8008f16:	bf04      	itt	eq
 8008f18:	091b      	lsreq	r3, r3, #4
 8008f1a:	3004      	addeq	r0, #4
 8008f1c:	0799      	lsls	r1, r3, #30
 8008f1e:	bf04      	itt	eq
 8008f20:	089b      	lsreq	r3, r3, #2
 8008f22:	3002      	addeq	r0, #2
 8008f24:	07d9      	lsls	r1, r3, #31
 8008f26:	d403      	bmi.n	8008f30 <__lo0bits+0x4e>
 8008f28:	085b      	lsrs	r3, r3, #1
 8008f2a:	f100 0001 	add.w	r0, r0, #1
 8008f2e:	d003      	beq.n	8008f38 <__lo0bits+0x56>
 8008f30:	6013      	str	r3, [r2, #0]
 8008f32:	4770      	bx	lr
 8008f34:	2000      	movs	r0, #0
 8008f36:	4770      	bx	lr
 8008f38:	2020      	movs	r0, #32
 8008f3a:	4770      	bx	lr

08008f3c <__i2b>:
 8008f3c:	b510      	push	{r4, lr}
 8008f3e:	460c      	mov	r4, r1
 8008f40:	2101      	movs	r1, #1
 8008f42:	f7ff ff07 	bl	8008d54 <_Balloc>
 8008f46:	4602      	mov	r2, r0
 8008f48:	b928      	cbnz	r0, 8008f56 <__i2b+0x1a>
 8008f4a:	4b05      	ldr	r3, [pc, #20]	@ (8008f60 <__i2b+0x24>)
 8008f4c:	4805      	ldr	r0, [pc, #20]	@ (8008f64 <__i2b+0x28>)
 8008f4e:	f240 1145 	movw	r1, #325	@ 0x145
 8008f52:	f000 fb5b 	bl	800960c <__assert_func>
 8008f56:	2301      	movs	r3, #1
 8008f58:	6144      	str	r4, [r0, #20]
 8008f5a:	6103      	str	r3, [r0, #16]
 8008f5c:	bd10      	pop	{r4, pc}
 8008f5e:	bf00      	nop
 8008f60:	08009e16 	.word	0x08009e16
 8008f64:	08009e38 	.word	0x08009e38

08008f68 <__multiply>:
 8008f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6c:	4617      	mov	r7, r2
 8008f6e:	690a      	ldr	r2, [r1, #16]
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	bfa8      	it	ge
 8008f76:	463b      	movge	r3, r7
 8008f78:	4689      	mov	r9, r1
 8008f7a:	bfa4      	itt	ge
 8008f7c:	460f      	movge	r7, r1
 8008f7e:	4699      	movge	r9, r3
 8008f80:	693d      	ldr	r5, [r7, #16]
 8008f82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	eb05 060a 	add.w	r6, r5, sl
 8008f8e:	42b3      	cmp	r3, r6
 8008f90:	b085      	sub	sp, #20
 8008f92:	bfb8      	it	lt
 8008f94:	3101      	addlt	r1, #1
 8008f96:	f7ff fedd 	bl	8008d54 <_Balloc>
 8008f9a:	b930      	cbnz	r0, 8008faa <__multiply+0x42>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	4b41      	ldr	r3, [pc, #260]	@ (80090a4 <__multiply+0x13c>)
 8008fa0:	4841      	ldr	r0, [pc, #260]	@ (80090a8 <__multiply+0x140>)
 8008fa2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008fa6:	f000 fb31 	bl	800960c <__assert_func>
 8008faa:	f100 0414 	add.w	r4, r0, #20
 8008fae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008fb2:	4623      	mov	r3, r4
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	4573      	cmp	r3, lr
 8008fb8:	d320      	bcc.n	8008ffc <__multiply+0x94>
 8008fba:	f107 0814 	add.w	r8, r7, #20
 8008fbe:	f109 0114 	add.w	r1, r9, #20
 8008fc2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008fc6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008fca:	9302      	str	r3, [sp, #8]
 8008fcc:	1beb      	subs	r3, r5, r7
 8008fce:	3b15      	subs	r3, #21
 8008fd0:	f023 0303 	bic.w	r3, r3, #3
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	3715      	adds	r7, #21
 8008fd8:	42bd      	cmp	r5, r7
 8008fda:	bf38      	it	cc
 8008fdc:	2304      	movcc	r3, #4
 8008fde:	9301      	str	r3, [sp, #4]
 8008fe0:	9b02      	ldr	r3, [sp, #8]
 8008fe2:	9103      	str	r1, [sp, #12]
 8008fe4:	428b      	cmp	r3, r1
 8008fe6:	d80c      	bhi.n	8009002 <__multiply+0x9a>
 8008fe8:	2e00      	cmp	r6, #0
 8008fea:	dd03      	ble.n	8008ff4 <__multiply+0x8c>
 8008fec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d055      	beq.n	80090a0 <__multiply+0x138>
 8008ff4:	6106      	str	r6, [r0, #16]
 8008ff6:	b005      	add	sp, #20
 8008ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffc:	f843 2b04 	str.w	r2, [r3], #4
 8009000:	e7d9      	b.n	8008fb6 <__multiply+0x4e>
 8009002:	f8b1 a000 	ldrh.w	sl, [r1]
 8009006:	f1ba 0f00 	cmp.w	sl, #0
 800900a:	d01f      	beq.n	800904c <__multiply+0xe4>
 800900c:	46c4      	mov	ip, r8
 800900e:	46a1      	mov	r9, r4
 8009010:	2700      	movs	r7, #0
 8009012:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009016:	f8d9 3000 	ldr.w	r3, [r9]
 800901a:	fa1f fb82 	uxth.w	fp, r2
 800901e:	b29b      	uxth	r3, r3
 8009020:	fb0a 330b 	mla	r3, sl, fp, r3
 8009024:	443b      	add	r3, r7
 8009026:	f8d9 7000 	ldr.w	r7, [r9]
 800902a:	0c12      	lsrs	r2, r2, #16
 800902c:	0c3f      	lsrs	r7, r7, #16
 800902e:	fb0a 7202 	mla	r2, sl, r2, r7
 8009032:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009036:	b29b      	uxth	r3, r3
 8009038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800903c:	4565      	cmp	r5, ip
 800903e:	f849 3b04 	str.w	r3, [r9], #4
 8009042:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009046:	d8e4      	bhi.n	8009012 <__multiply+0xaa>
 8009048:	9b01      	ldr	r3, [sp, #4]
 800904a:	50e7      	str	r7, [r4, r3]
 800904c:	9b03      	ldr	r3, [sp, #12]
 800904e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009052:	3104      	adds	r1, #4
 8009054:	f1b9 0f00 	cmp.w	r9, #0
 8009058:	d020      	beq.n	800909c <__multiply+0x134>
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	4647      	mov	r7, r8
 800905e:	46a4      	mov	ip, r4
 8009060:	f04f 0a00 	mov.w	sl, #0
 8009064:	f8b7 b000 	ldrh.w	fp, [r7]
 8009068:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800906c:	fb09 220b 	mla	r2, r9, fp, r2
 8009070:	4452      	add	r2, sl
 8009072:	b29b      	uxth	r3, r3
 8009074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009078:	f84c 3b04 	str.w	r3, [ip], #4
 800907c:	f857 3b04 	ldr.w	r3, [r7], #4
 8009080:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009084:	f8bc 3000 	ldrh.w	r3, [ip]
 8009088:	fb09 330a 	mla	r3, r9, sl, r3
 800908c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009090:	42bd      	cmp	r5, r7
 8009092:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009096:	d8e5      	bhi.n	8009064 <__multiply+0xfc>
 8009098:	9a01      	ldr	r2, [sp, #4]
 800909a:	50a3      	str	r3, [r4, r2]
 800909c:	3404      	adds	r4, #4
 800909e:	e79f      	b.n	8008fe0 <__multiply+0x78>
 80090a0:	3e01      	subs	r6, #1
 80090a2:	e7a1      	b.n	8008fe8 <__multiply+0x80>
 80090a4:	08009e16 	.word	0x08009e16
 80090a8:	08009e38 	.word	0x08009e38

080090ac <__pow5mult>:
 80090ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090b0:	4615      	mov	r5, r2
 80090b2:	f012 0203 	ands.w	r2, r2, #3
 80090b6:	4607      	mov	r7, r0
 80090b8:	460e      	mov	r6, r1
 80090ba:	d007      	beq.n	80090cc <__pow5mult+0x20>
 80090bc:	4c25      	ldr	r4, [pc, #148]	@ (8009154 <__pow5mult+0xa8>)
 80090be:	3a01      	subs	r2, #1
 80090c0:	2300      	movs	r3, #0
 80090c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090c6:	f7ff fea7 	bl	8008e18 <__multadd>
 80090ca:	4606      	mov	r6, r0
 80090cc:	10ad      	asrs	r5, r5, #2
 80090ce:	d03d      	beq.n	800914c <__pow5mult+0xa0>
 80090d0:	69fc      	ldr	r4, [r7, #28]
 80090d2:	b97c      	cbnz	r4, 80090f4 <__pow5mult+0x48>
 80090d4:	2010      	movs	r0, #16
 80090d6:	f7ff fcdb 	bl	8008a90 <malloc>
 80090da:	4602      	mov	r2, r0
 80090dc:	61f8      	str	r0, [r7, #28]
 80090de:	b928      	cbnz	r0, 80090ec <__pow5mult+0x40>
 80090e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009158 <__pow5mult+0xac>)
 80090e2:	481e      	ldr	r0, [pc, #120]	@ (800915c <__pow5mult+0xb0>)
 80090e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80090e8:	f000 fa90 	bl	800960c <__assert_func>
 80090ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090f0:	6004      	str	r4, [r0, #0]
 80090f2:	60c4      	str	r4, [r0, #12]
 80090f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80090f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090fc:	b94c      	cbnz	r4, 8009112 <__pow5mult+0x66>
 80090fe:	f240 2171 	movw	r1, #625	@ 0x271
 8009102:	4638      	mov	r0, r7
 8009104:	f7ff ff1a 	bl	8008f3c <__i2b>
 8009108:	2300      	movs	r3, #0
 800910a:	f8c8 0008 	str.w	r0, [r8, #8]
 800910e:	4604      	mov	r4, r0
 8009110:	6003      	str	r3, [r0, #0]
 8009112:	f04f 0900 	mov.w	r9, #0
 8009116:	07eb      	lsls	r3, r5, #31
 8009118:	d50a      	bpl.n	8009130 <__pow5mult+0x84>
 800911a:	4631      	mov	r1, r6
 800911c:	4622      	mov	r2, r4
 800911e:	4638      	mov	r0, r7
 8009120:	f7ff ff22 	bl	8008f68 <__multiply>
 8009124:	4631      	mov	r1, r6
 8009126:	4680      	mov	r8, r0
 8009128:	4638      	mov	r0, r7
 800912a:	f7ff fe53 	bl	8008dd4 <_Bfree>
 800912e:	4646      	mov	r6, r8
 8009130:	106d      	asrs	r5, r5, #1
 8009132:	d00b      	beq.n	800914c <__pow5mult+0xa0>
 8009134:	6820      	ldr	r0, [r4, #0]
 8009136:	b938      	cbnz	r0, 8009148 <__pow5mult+0x9c>
 8009138:	4622      	mov	r2, r4
 800913a:	4621      	mov	r1, r4
 800913c:	4638      	mov	r0, r7
 800913e:	f7ff ff13 	bl	8008f68 <__multiply>
 8009142:	6020      	str	r0, [r4, #0]
 8009144:	f8c0 9000 	str.w	r9, [r0]
 8009148:	4604      	mov	r4, r0
 800914a:	e7e4      	b.n	8009116 <__pow5mult+0x6a>
 800914c:	4630      	mov	r0, r6
 800914e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009152:	bf00      	nop
 8009154:	08009ed8 	.word	0x08009ed8
 8009158:	08009da7 	.word	0x08009da7
 800915c:	08009e38 	.word	0x08009e38

08009160 <__lshift>:
 8009160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009164:	460c      	mov	r4, r1
 8009166:	6849      	ldr	r1, [r1, #4]
 8009168:	6923      	ldr	r3, [r4, #16]
 800916a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800916e:	68a3      	ldr	r3, [r4, #8]
 8009170:	4607      	mov	r7, r0
 8009172:	4691      	mov	r9, r2
 8009174:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009178:	f108 0601 	add.w	r6, r8, #1
 800917c:	42b3      	cmp	r3, r6
 800917e:	db0b      	blt.n	8009198 <__lshift+0x38>
 8009180:	4638      	mov	r0, r7
 8009182:	f7ff fde7 	bl	8008d54 <_Balloc>
 8009186:	4605      	mov	r5, r0
 8009188:	b948      	cbnz	r0, 800919e <__lshift+0x3e>
 800918a:	4602      	mov	r2, r0
 800918c:	4b28      	ldr	r3, [pc, #160]	@ (8009230 <__lshift+0xd0>)
 800918e:	4829      	ldr	r0, [pc, #164]	@ (8009234 <__lshift+0xd4>)
 8009190:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009194:	f000 fa3a 	bl	800960c <__assert_func>
 8009198:	3101      	adds	r1, #1
 800919a:	005b      	lsls	r3, r3, #1
 800919c:	e7ee      	b.n	800917c <__lshift+0x1c>
 800919e:	2300      	movs	r3, #0
 80091a0:	f100 0114 	add.w	r1, r0, #20
 80091a4:	f100 0210 	add.w	r2, r0, #16
 80091a8:	4618      	mov	r0, r3
 80091aa:	4553      	cmp	r3, sl
 80091ac:	db33      	blt.n	8009216 <__lshift+0xb6>
 80091ae:	6920      	ldr	r0, [r4, #16]
 80091b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091b4:	f104 0314 	add.w	r3, r4, #20
 80091b8:	f019 091f 	ands.w	r9, r9, #31
 80091bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091c4:	d02b      	beq.n	800921e <__lshift+0xbe>
 80091c6:	f1c9 0e20 	rsb	lr, r9, #32
 80091ca:	468a      	mov	sl, r1
 80091cc:	2200      	movs	r2, #0
 80091ce:	6818      	ldr	r0, [r3, #0]
 80091d0:	fa00 f009 	lsl.w	r0, r0, r9
 80091d4:	4310      	orrs	r0, r2
 80091d6:	f84a 0b04 	str.w	r0, [sl], #4
 80091da:	f853 2b04 	ldr.w	r2, [r3], #4
 80091de:	459c      	cmp	ip, r3
 80091e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80091e4:	d8f3      	bhi.n	80091ce <__lshift+0x6e>
 80091e6:	ebac 0304 	sub.w	r3, ip, r4
 80091ea:	3b15      	subs	r3, #21
 80091ec:	f023 0303 	bic.w	r3, r3, #3
 80091f0:	3304      	adds	r3, #4
 80091f2:	f104 0015 	add.w	r0, r4, #21
 80091f6:	4560      	cmp	r0, ip
 80091f8:	bf88      	it	hi
 80091fa:	2304      	movhi	r3, #4
 80091fc:	50ca      	str	r2, [r1, r3]
 80091fe:	b10a      	cbz	r2, 8009204 <__lshift+0xa4>
 8009200:	f108 0602 	add.w	r6, r8, #2
 8009204:	3e01      	subs	r6, #1
 8009206:	4638      	mov	r0, r7
 8009208:	612e      	str	r6, [r5, #16]
 800920a:	4621      	mov	r1, r4
 800920c:	f7ff fde2 	bl	8008dd4 <_Bfree>
 8009210:	4628      	mov	r0, r5
 8009212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009216:	f842 0f04 	str.w	r0, [r2, #4]!
 800921a:	3301      	adds	r3, #1
 800921c:	e7c5      	b.n	80091aa <__lshift+0x4a>
 800921e:	3904      	subs	r1, #4
 8009220:	f853 2b04 	ldr.w	r2, [r3], #4
 8009224:	f841 2f04 	str.w	r2, [r1, #4]!
 8009228:	459c      	cmp	ip, r3
 800922a:	d8f9      	bhi.n	8009220 <__lshift+0xc0>
 800922c:	e7ea      	b.n	8009204 <__lshift+0xa4>
 800922e:	bf00      	nop
 8009230:	08009e16 	.word	0x08009e16
 8009234:	08009e38 	.word	0x08009e38

08009238 <__mcmp>:
 8009238:	690a      	ldr	r2, [r1, #16]
 800923a:	4603      	mov	r3, r0
 800923c:	6900      	ldr	r0, [r0, #16]
 800923e:	1a80      	subs	r0, r0, r2
 8009240:	b530      	push	{r4, r5, lr}
 8009242:	d10e      	bne.n	8009262 <__mcmp+0x2a>
 8009244:	3314      	adds	r3, #20
 8009246:	3114      	adds	r1, #20
 8009248:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800924c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009250:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009254:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009258:	4295      	cmp	r5, r2
 800925a:	d003      	beq.n	8009264 <__mcmp+0x2c>
 800925c:	d205      	bcs.n	800926a <__mcmp+0x32>
 800925e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009262:	bd30      	pop	{r4, r5, pc}
 8009264:	42a3      	cmp	r3, r4
 8009266:	d3f3      	bcc.n	8009250 <__mcmp+0x18>
 8009268:	e7fb      	b.n	8009262 <__mcmp+0x2a>
 800926a:	2001      	movs	r0, #1
 800926c:	e7f9      	b.n	8009262 <__mcmp+0x2a>
	...

08009270 <__mdiff>:
 8009270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	4689      	mov	r9, r1
 8009276:	4606      	mov	r6, r0
 8009278:	4611      	mov	r1, r2
 800927a:	4648      	mov	r0, r9
 800927c:	4614      	mov	r4, r2
 800927e:	f7ff ffdb 	bl	8009238 <__mcmp>
 8009282:	1e05      	subs	r5, r0, #0
 8009284:	d112      	bne.n	80092ac <__mdiff+0x3c>
 8009286:	4629      	mov	r1, r5
 8009288:	4630      	mov	r0, r6
 800928a:	f7ff fd63 	bl	8008d54 <_Balloc>
 800928e:	4602      	mov	r2, r0
 8009290:	b928      	cbnz	r0, 800929e <__mdiff+0x2e>
 8009292:	4b3f      	ldr	r3, [pc, #252]	@ (8009390 <__mdiff+0x120>)
 8009294:	f240 2137 	movw	r1, #567	@ 0x237
 8009298:	483e      	ldr	r0, [pc, #248]	@ (8009394 <__mdiff+0x124>)
 800929a:	f000 f9b7 	bl	800960c <__assert_func>
 800929e:	2301      	movs	r3, #1
 80092a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092a4:	4610      	mov	r0, r2
 80092a6:	b003      	add	sp, #12
 80092a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ac:	bfbc      	itt	lt
 80092ae:	464b      	movlt	r3, r9
 80092b0:	46a1      	movlt	r9, r4
 80092b2:	4630      	mov	r0, r6
 80092b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80092b8:	bfba      	itte	lt
 80092ba:	461c      	movlt	r4, r3
 80092bc:	2501      	movlt	r5, #1
 80092be:	2500      	movge	r5, #0
 80092c0:	f7ff fd48 	bl	8008d54 <_Balloc>
 80092c4:	4602      	mov	r2, r0
 80092c6:	b918      	cbnz	r0, 80092d0 <__mdiff+0x60>
 80092c8:	4b31      	ldr	r3, [pc, #196]	@ (8009390 <__mdiff+0x120>)
 80092ca:	f240 2145 	movw	r1, #581	@ 0x245
 80092ce:	e7e3      	b.n	8009298 <__mdiff+0x28>
 80092d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80092d4:	6926      	ldr	r6, [r4, #16]
 80092d6:	60c5      	str	r5, [r0, #12]
 80092d8:	f109 0310 	add.w	r3, r9, #16
 80092dc:	f109 0514 	add.w	r5, r9, #20
 80092e0:	f104 0e14 	add.w	lr, r4, #20
 80092e4:	f100 0b14 	add.w	fp, r0, #20
 80092e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80092ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	46d9      	mov	r9, fp
 80092f4:	f04f 0c00 	mov.w	ip, #0
 80092f8:	9b01      	ldr	r3, [sp, #4]
 80092fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80092fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009302:	9301      	str	r3, [sp, #4]
 8009304:	fa1f f38a 	uxth.w	r3, sl
 8009308:	4619      	mov	r1, r3
 800930a:	b283      	uxth	r3, r0
 800930c:	1acb      	subs	r3, r1, r3
 800930e:	0c00      	lsrs	r0, r0, #16
 8009310:	4463      	add	r3, ip
 8009312:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009316:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800931a:	b29b      	uxth	r3, r3
 800931c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009320:	4576      	cmp	r6, lr
 8009322:	f849 3b04 	str.w	r3, [r9], #4
 8009326:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800932a:	d8e5      	bhi.n	80092f8 <__mdiff+0x88>
 800932c:	1b33      	subs	r3, r6, r4
 800932e:	3b15      	subs	r3, #21
 8009330:	f023 0303 	bic.w	r3, r3, #3
 8009334:	3415      	adds	r4, #21
 8009336:	3304      	adds	r3, #4
 8009338:	42a6      	cmp	r6, r4
 800933a:	bf38      	it	cc
 800933c:	2304      	movcc	r3, #4
 800933e:	441d      	add	r5, r3
 8009340:	445b      	add	r3, fp
 8009342:	461e      	mov	r6, r3
 8009344:	462c      	mov	r4, r5
 8009346:	4544      	cmp	r4, r8
 8009348:	d30e      	bcc.n	8009368 <__mdiff+0xf8>
 800934a:	f108 0103 	add.w	r1, r8, #3
 800934e:	1b49      	subs	r1, r1, r5
 8009350:	f021 0103 	bic.w	r1, r1, #3
 8009354:	3d03      	subs	r5, #3
 8009356:	45a8      	cmp	r8, r5
 8009358:	bf38      	it	cc
 800935a:	2100      	movcc	r1, #0
 800935c:	440b      	add	r3, r1
 800935e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009362:	b191      	cbz	r1, 800938a <__mdiff+0x11a>
 8009364:	6117      	str	r7, [r2, #16]
 8009366:	e79d      	b.n	80092a4 <__mdiff+0x34>
 8009368:	f854 1b04 	ldr.w	r1, [r4], #4
 800936c:	46e6      	mov	lr, ip
 800936e:	0c08      	lsrs	r0, r1, #16
 8009370:	fa1c fc81 	uxtah	ip, ip, r1
 8009374:	4471      	add	r1, lr
 8009376:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800937a:	b289      	uxth	r1, r1
 800937c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009380:	f846 1b04 	str.w	r1, [r6], #4
 8009384:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009388:	e7dd      	b.n	8009346 <__mdiff+0xd6>
 800938a:	3f01      	subs	r7, #1
 800938c:	e7e7      	b.n	800935e <__mdiff+0xee>
 800938e:	bf00      	nop
 8009390:	08009e16 	.word	0x08009e16
 8009394:	08009e38 	.word	0x08009e38

08009398 <__d2b>:
 8009398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800939c:	460f      	mov	r7, r1
 800939e:	2101      	movs	r1, #1
 80093a0:	ec59 8b10 	vmov	r8, r9, d0
 80093a4:	4616      	mov	r6, r2
 80093a6:	f7ff fcd5 	bl	8008d54 <_Balloc>
 80093aa:	4604      	mov	r4, r0
 80093ac:	b930      	cbnz	r0, 80093bc <__d2b+0x24>
 80093ae:	4602      	mov	r2, r0
 80093b0:	4b23      	ldr	r3, [pc, #140]	@ (8009440 <__d2b+0xa8>)
 80093b2:	4824      	ldr	r0, [pc, #144]	@ (8009444 <__d2b+0xac>)
 80093b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80093b8:	f000 f928 	bl	800960c <__assert_func>
 80093bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093c4:	b10d      	cbz	r5, 80093ca <__d2b+0x32>
 80093c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	f1b8 0300 	subs.w	r3, r8, #0
 80093d0:	d023      	beq.n	800941a <__d2b+0x82>
 80093d2:	4668      	mov	r0, sp
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	f7ff fd84 	bl	8008ee2 <__lo0bits>
 80093da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093de:	b1d0      	cbz	r0, 8009416 <__d2b+0x7e>
 80093e0:	f1c0 0320 	rsb	r3, r0, #32
 80093e4:	fa02 f303 	lsl.w	r3, r2, r3
 80093e8:	430b      	orrs	r3, r1
 80093ea:	40c2      	lsrs	r2, r0
 80093ec:	6163      	str	r3, [r4, #20]
 80093ee:	9201      	str	r2, [sp, #4]
 80093f0:	9b01      	ldr	r3, [sp, #4]
 80093f2:	61a3      	str	r3, [r4, #24]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	bf0c      	ite	eq
 80093f8:	2201      	moveq	r2, #1
 80093fa:	2202      	movne	r2, #2
 80093fc:	6122      	str	r2, [r4, #16]
 80093fe:	b1a5      	cbz	r5, 800942a <__d2b+0x92>
 8009400:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009404:	4405      	add	r5, r0
 8009406:	603d      	str	r5, [r7, #0]
 8009408:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800940c:	6030      	str	r0, [r6, #0]
 800940e:	4620      	mov	r0, r4
 8009410:	b003      	add	sp, #12
 8009412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009416:	6161      	str	r1, [r4, #20]
 8009418:	e7ea      	b.n	80093f0 <__d2b+0x58>
 800941a:	a801      	add	r0, sp, #4
 800941c:	f7ff fd61 	bl	8008ee2 <__lo0bits>
 8009420:	9b01      	ldr	r3, [sp, #4]
 8009422:	6163      	str	r3, [r4, #20]
 8009424:	3020      	adds	r0, #32
 8009426:	2201      	movs	r2, #1
 8009428:	e7e8      	b.n	80093fc <__d2b+0x64>
 800942a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800942e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009432:	6038      	str	r0, [r7, #0]
 8009434:	6918      	ldr	r0, [r3, #16]
 8009436:	f7ff fd35 	bl	8008ea4 <__hi0bits>
 800943a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800943e:	e7e5      	b.n	800940c <__d2b+0x74>
 8009440:	08009e16 	.word	0x08009e16
 8009444:	08009e38 	.word	0x08009e38

08009448 <__sread>:
 8009448:	b510      	push	{r4, lr}
 800944a:	460c      	mov	r4, r1
 800944c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009450:	f000 f898 	bl	8009584 <_read_r>
 8009454:	2800      	cmp	r0, #0
 8009456:	bfab      	itete	ge
 8009458:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800945a:	89a3      	ldrhlt	r3, [r4, #12]
 800945c:	181b      	addge	r3, r3, r0
 800945e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009462:	bfac      	ite	ge
 8009464:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009466:	81a3      	strhlt	r3, [r4, #12]
 8009468:	bd10      	pop	{r4, pc}

0800946a <__swrite>:
 800946a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800946e:	461f      	mov	r7, r3
 8009470:	898b      	ldrh	r3, [r1, #12]
 8009472:	05db      	lsls	r3, r3, #23
 8009474:	4605      	mov	r5, r0
 8009476:	460c      	mov	r4, r1
 8009478:	4616      	mov	r6, r2
 800947a:	d505      	bpl.n	8009488 <__swrite+0x1e>
 800947c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009480:	2302      	movs	r3, #2
 8009482:	2200      	movs	r2, #0
 8009484:	f000 f86c 	bl	8009560 <_lseek_r>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800948e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	4632      	mov	r2, r6
 8009496:	463b      	mov	r3, r7
 8009498:	4628      	mov	r0, r5
 800949a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800949e:	f000 b893 	b.w	80095c8 <_write_r>

080094a2 <__sseek>:
 80094a2:	b510      	push	{r4, lr}
 80094a4:	460c      	mov	r4, r1
 80094a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094aa:	f000 f859 	bl	8009560 <_lseek_r>
 80094ae:	1c43      	adds	r3, r0, #1
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	bf15      	itete	ne
 80094b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80094b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80094ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094be:	81a3      	strheq	r3, [r4, #12]
 80094c0:	bf18      	it	ne
 80094c2:	81a3      	strhne	r3, [r4, #12]
 80094c4:	bd10      	pop	{r4, pc}

080094c6 <__sclose>:
 80094c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ca:	f000 b88f 	b.w	80095ec <_close_r>

080094ce <_realloc_r>:
 80094ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d2:	4607      	mov	r7, r0
 80094d4:	4614      	mov	r4, r2
 80094d6:	460d      	mov	r5, r1
 80094d8:	b921      	cbnz	r1, 80094e4 <_realloc_r+0x16>
 80094da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094de:	4611      	mov	r1, r2
 80094e0:	f7ff bb00 	b.w	8008ae4 <_malloc_r>
 80094e4:	b92a      	cbnz	r2, 80094f2 <_realloc_r+0x24>
 80094e6:	f000 f8c3 	bl	8009670 <_free_r>
 80094ea:	4625      	mov	r5, r4
 80094ec:	4628      	mov	r0, r5
 80094ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f2:	f000 f919 	bl	8009728 <_malloc_usable_size_r>
 80094f6:	4284      	cmp	r4, r0
 80094f8:	4606      	mov	r6, r0
 80094fa:	d802      	bhi.n	8009502 <_realloc_r+0x34>
 80094fc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009500:	d8f4      	bhi.n	80094ec <_realloc_r+0x1e>
 8009502:	4621      	mov	r1, r4
 8009504:	4638      	mov	r0, r7
 8009506:	f7ff faed 	bl	8008ae4 <_malloc_r>
 800950a:	4680      	mov	r8, r0
 800950c:	b908      	cbnz	r0, 8009512 <_realloc_r+0x44>
 800950e:	4645      	mov	r5, r8
 8009510:	e7ec      	b.n	80094ec <_realloc_r+0x1e>
 8009512:	42b4      	cmp	r4, r6
 8009514:	4622      	mov	r2, r4
 8009516:	4629      	mov	r1, r5
 8009518:	bf28      	it	cs
 800951a:	4632      	movcs	r2, r6
 800951c:	f7fe fafa 	bl	8007b14 <memcpy>
 8009520:	4629      	mov	r1, r5
 8009522:	4638      	mov	r0, r7
 8009524:	f000 f8a4 	bl	8009670 <_free_r>
 8009528:	e7f1      	b.n	800950e <_realloc_r+0x40>

0800952a <memmove>:
 800952a:	4288      	cmp	r0, r1
 800952c:	b510      	push	{r4, lr}
 800952e:	eb01 0402 	add.w	r4, r1, r2
 8009532:	d902      	bls.n	800953a <memmove+0x10>
 8009534:	4284      	cmp	r4, r0
 8009536:	4623      	mov	r3, r4
 8009538:	d807      	bhi.n	800954a <memmove+0x20>
 800953a:	1e43      	subs	r3, r0, #1
 800953c:	42a1      	cmp	r1, r4
 800953e:	d008      	beq.n	8009552 <memmove+0x28>
 8009540:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009544:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009548:	e7f8      	b.n	800953c <memmove+0x12>
 800954a:	4402      	add	r2, r0
 800954c:	4601      	mov	r1, r0
 800954e:	428a      	cmp	r2, r1
 8009550:	d100      	bne.n	8009554 <memmove+0x2a>
 8009552:	bd10      	pop	{r4, pc}
 8009554:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009558:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800955c:	e7f7      	b.n	800954e <memmove+0x24>
	...

08009560 <_lseek_r>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	4d07      	ldr	r5, [pc, #28]	@ (8009580 <_lseek_r+0x20>)
 8009564:	4604      	mov	r4, r0
 8009566:	4608      	mov	r0, r1
 8009568:	4611      	mov	r1, r2
 800956a:	2200      	movs	r2, #0
 800956c:	602a      	str	r2, [r5, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	f7f8 f9fb 	bl	800196a <_lseek>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d102      	bne.n	800957e <_lseek_r+0x1e>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	b103      	cbz	r3, 800957e <_lseek_r+0x1e>
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	20000b44 	.word	0x20000b44

08009584 <_read_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4d07      	ldr	r5, [pc, #28]	@ (80095a4 <_read_r+0x20>)
 8009588:	4604      	mov	r4, r0
 800958a:	4608      	mov	r0, r1
 800958c:	4611      	mov	r1, r2
 800958e:	2200      	movs	r2, #0
 8009590:	602a      	str	r2, [r5, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	f7f8 f989 	bl	80018aa <_read>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_read_r+0x1e>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_read_r+0x1e>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	20000b44 	.word	0x20000b44

080095a8 <_sbrk_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4d06      	ldr	r5, [pc, #24]	@ (80095c4 <_sbrk_r+0x1c>)
 80095ac:	2300      	movs	r3, #0
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	602b      	str	r3, [r5, #0]
 80095b4:	f7f8 f9e6 	bl	8001984 <_sbrk>
 80095b8:	1c43      	adds	r3, r0, #1
 80095ba:	d102      	bne.n	80095c2 <_sbrk_r+0x1a>
 80095bc:	682b      	ldr	r3, [r5, #0]
 80095be:	b103      	cbz	r3, 80095c2 <_sbrk_r+0x1a>
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	bd38      	pop	{r3, r4, r5, pc}
 80095c4:	20000b44 	.word	0x20000b44

080095c8 <_write_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4d07      	ldr	r5, [pc, #28]	@ (80095e8 <_write_r+0x20>)
 80095cc:	4604      	mov	r4, r0
 80095ce:	4608      	mov	r0, r1
 80095d0:	4611      	mov	r1, r2
 80095d2:	2200      	movs	r2, #0
 80095d4:	602a      	str	r2, [r5, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	f7f8 f984 	bl	80018e4 <_write>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_write_r+0x1e>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_write_r+0x1e>
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	20000b44 	.word	0x20000b44

080095ec <_close_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4d06      	ldr	r5, [pc, #24]	@ (8009608 <_close_r+0x1c>)
 80095f0:	2300      	movs	r3, #0
 80095f2:	4604      	mov	r4, r0
 80095f4:	4608      	mov	r0, r1
 80095f6:	602b      	str	r3, [r5, #0]
 80095f8:	f7f8 f990 	bl	800191c <_close>
 80095fc:	1c43      	adds	r3, r0, #1
 80095fe:	d102      	bne.n	8009606 <_close_r+0x1a>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	b103      	cbz	r3, 8009606 <_close_r+0x1a>
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	20000b44 	.word	0x20000b44

0800960c <__assert_func>:
 800960c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800960e:	4614      	mov	r4, r2
 8009610:	461a      	mov	r2, r3
 8009612:	4b09      	ldr	r3, [pc, #36]	@ (8009638 <__assert_func+0x2c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4605      	mov	r5, r0
 8009618:	68d8      	ldr	r0, [r3, #12]
 800961a:	b14c      	cbz	r4, 8009630 <__assert_func+0x24>
 800961c:	4b07      	ldr	r3, [pc, #28]	@ (800963c <__assert_func+0x30>)
 800961e:	9100      	str	r1, [sp, #0]
 8009620:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009624:	4906      	ldr	r1, [pc, #24]	@ (8009640 <__assert_func+0x34>)
 8009626:	462b      	mov	r3, r5
 8009628:	f000 f886 	bl	8009738 <fiprintf>
 800962c:	f000 f8a3 	bl	8009776 <abort>
 8009630:	4b04      	ldr	r3, [pc, #16]	@ (8009644 <__assert_func+0x38>)
 8009632:	461c      	mov	r4, r3
 8009634:	e7f3      	b.n	800961e <__assert_func+0x12>
 8009636:	bf00      	nop
 8009638:	200003d4 	.word	0x200003d4
 800963c:	08009e9b 	.word	0x08009e9b
 8009640:	08009ea8 	.word	0x08009ea8
 8009644:	08009ed6 	.word	0x08009ed6

08009648 <_calloc_r>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	fba1 5402 	umull	r5, r4, r1, r2
 800964e:	b934      	cbnz	r4, 800965e <_calloc_r+0x16>
 8009650:	4629      	mov	r1, r5
 8009652:	f7ff fa47 	bl	8008ae4 <_malloc_r>
 8009656:	4606      	mov	r6, r0
 8009658:	b928      	cbnz	r0, 8009666 <_calloc_r+0x1e>
 800965a:	4630      	mov	r0, r6
 800965c:	bd70      	pop	{r4, r5, r6, pc}
 800965e:	220c      	movs	r2, #12
 8009660:	6002      	str	r2, [r0, #0]
 8009662:	2600      	movs	r6, #0
 8009664:	e7f9      	b.n	800965a <_calloc_r+0x12>
 8009666:	462a      	mov	r2, r5
 8009668:	4621      	mov	r1, r4
 800966a:	f7fe fa19 	bl	8007aa0 <memset>
 800966e:	e7f4      	b.n	800965a <_calloc_r+0x12>

08009670 <_free_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4605      	mov	r5, r0
 8009674:	2900      	cmp	r1, #0
 8009676:	d041      	beq.n	80096fc <_free_r+0x8c>
 8009678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800967c:	1f0c      	subs	r4, r1, #4
 800967e:	2b00      	cmp	r3, #0
 8009680:	bfb8      	it	lt
 8009682:	18e4      	addlt	r4, r4, r3
 8009684:	f7ff fb5a 	bl	8008d3c <__malloc_lock>
 8009688:	4a1d      	ldr	r2, [pc, #116]	@ (8009700 <_free_r+0x90>)
 800968a:	6813      	ldr	r3, [r2, #0]
 800968c:	b933      	cbnz	r3, 800969c <_free_r+0x2c>
 800968e:	6063      	str	r3, [r4, #4]
 8009690:	6014      	str	r4, [r2, #0]
 8009692:	4628      	mov	r0, r5
 8009694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009698:	f7ff bb56 	b.w	8008d48 <__malloc_unlock>
 800969c:	42a3      	cmp	r3, r4
 800969e:	d908      	bls.n	80096b2 <_free_r+0x42>
 80096a0:	6820      	ldr	r0, [r4, #0]
 80096a2:	1821      	adds	r1, r4, r0
 80096a4:	428b      	cmp	r3, r1
 80096a6:	bf01      	itttt	eq
 80096a8:	6819      	ldreq	r1, [r3, #0]
 80096aa:	685b      	ldreq	r3, [r3, #4]
 80096ac:	1809      	addeq	r1, r1, r0
 80096ae:	6021      	streq	r1, [r4, #0]
 80096b0:	e7ed      	b.n	800968e <_free_r+0x1e>
 80096b2:	461a      	mov	r2, r3
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	b10b      	cbz	r3, 80096bc <_free_r+0x4c>
 80096b8:	42a3      	cmp	r3, r4
 80096ba:	d9fa      	bls.n	80096b2 <_free_r+0x42>
 80096bc:	6811      	ldr	r1, [r2, #0]
 80096be:	1850      	adds	r0, r2, r1
 80096c0:	42a0      	cmp	r0, r4
 80096c2:	d10b      	bne.n	80096dc <_free_r+0x6c>
 80096c4:	6820      	ldr	r0, [r4, #0]
 80096c6:	4401      	add	r1, r0
 80096c8:	1850      	adds	r0, r2, r1
 80096ca:	4283      	cmp	r3, r0
 80096cc:	6011      	str	r1, [r2, #0]
 80096ce:	d1e0      	bne.n	8009692 <_free_r+0x22>
 80096d0:	6818      	ldr	r0, [r3, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	6053      	str	r3, [r2, #4]
 80096d6:	4408      	add	r0, r1
 80096d8:	6010      	str	r0, [r2, #0]
 80096da:	e7da      	b.n	8009692 <_free_r+0x22>
 80096dc:	d902      	bls.n	80096e4 <_free_r+0x74>
 80096de:	230c      	movs	r3, #12
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	e7d6      	b.n	8009692 <_free_r+0x22>
 80096e4:	6820      	ldr	r0, [r4, #0]
 80096e6:	1821      	adds	r1, r4, r0
 80096e8:	428b      	cmp	r3, r1
 80096ea:	bf04      	itt	eq
 80096ec:	6819      	ldreq	r1, [r3, #0]
 80096ee:	685b      	ldreq	r3, [r3, #4]
 80096f0:	6063      	str	r3, [r4, #4]
 80096f2:	bf04      	itt	eq
 80096f4:	1809      	addeq	r1, r1, r0
 80096f6:	6021      	streq	r1, [r4, #0]
 80096f8:	6054      	str	r4, [r2, #4]
 80096fa:	e7ca      	b.n	8009692 <_free_r+0x22>
 80096fc:	bd38      	pop	{r3, r4, r5, pc}
 80096fe:	bf00      	nop
 8009700:	20000b40 	.word	0x20000b40

08009704 <__ascii_mbtowc>:
 8009704:	b082      	sub	sp, #8
 8009706:	b901      	cbnz	r1, 800970a <__ascii_mbtowc+0x6>
 8009708:	a901      	add	r1, sp, #4
 800970a:	b142      	cbz	r2, 800971e <__ascii_mbtowc+0x1a>
 800970c:	b14b      	cbz	r3, 8009722 <__ascii_mbtowc+0x1e>
 800970e:	7813      	ldrb	r3, [r2, #0]
 8009710:	600b      	str	r3, [r1, #0]
 8009712:	7812      	ldrb	r2, [r2, #0]
 8009714:	1e10      	subs	r0, r2, #0
 8009716:	bf18      	it	ne
 8009718:	2001      	movne	r0, #1
 800971a:	b002      	add	sp, #8
 800971c:	4770      	bx	lr
 800971e:	4610      	mov	r0, r2
 8009720:	e7fb      	b.n	800971a <__ascii_mbtowc+0x16>
 8009722:	f06f 0001 	mvn.w	r0, #1
 8009726:	e7f8      	b.n	800971a <__ascii_mbtowc+0x16>

08009728 <_malloc_usable_size_r>:
 8009728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800972c:	1f18      	subs	r0, r3, #4
 800972e:	2b00      	cmp	r3, #0
 8009730:	bfbc      	itt	lt
 8009732:	580b      	ldrlt	r3, [r1, r0]
 8009734:	18c0      	addlt	r0, r0, r3
 8009736:	4770      	bx	lr

08009738 <fiprintf>:
 8009738:	b40e      	push	{r1, r2, r3}
 800973a:	b503      	push	{r0, r1, lr}
 800973c:	4601      	mov	r1, r0
 800973e:	ab03      	add	r3, sp, #12
 8009740:	4805      	ldr	r0, [pc, #20]	@ (8009758 <fiprintf+0x20>)
 8009742:	f853 2b04 	ldr.w	r2, [r3], #4
 8009746:	6800      	ldr	r0, [r0, #0]
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	f000 f845 	bl	80097d8 <_vfiprintf_r>
 800974e:	b002      	add	sp, #8
 8009750:	f85d eb04 	ldr.w	lr, [sp], #4
 8009754:	b003      	add	sp, #12
 8009756:	4770      	bx	lr
 8009758:	200003d4 	.word	0x200003d4

0800975c <__ascii_wctomb>:
 800975c:	4603      	mov	r3, r0
 800975e:	4608      	mov	r0, r1
 8009760:	b141      	cbz	r1, 8009774 <__ascii_wctomb+0x18>
 8009762:	2aff      	cmp	r2, #255	@ 0xff
 8009764:	d904      	bls.n	8009770 <__ascii_wctomb+0x14>
 8009766:	228a      	movs	r2, #138	@ 0x8a
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800976e:	4770      	bx	lr
 8009770:	700a      	strb	r2, [r1, #0]
 8009772:	2001      	movs	r0, #1
 8009774:	4770      	bx	lr

08009776 <abort>:
 8009776:	b508      	push	{r3, lr}
 8009778:	2006      	movs	r0, #6
 800977a:	f000 fa63 	bl	8009c44 <raise>
 800977e:	2001      	movs	r0, #1
 8009780:	f7f8 f888 	bl	8001894 <_exit>

08009784 <__sfputc_r>:
 8009784:	6893      	ldr	r3, [r2, #8]
 8009786:	3b01      	subs	r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	b410      	push	{r4}
 800978c:	6093      	str	r3, [r2, #8]
 800978e:	da08      	bge.n	80097a2 <__sfputc_r+0x1e>
 8009790:	6994      	ldr	r4, [r2, #24]
 8009792:	42a3      	cmp	r3, r4
 8009794:	db01      	blt.n	800979a <__sfputc_r+0x16>
 8009796:	290a      	cmp	r1, #10
 8009798:	d103      	bne.n	80097a2 <__sfputc_r+0x1e>
 800979a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800979e:	f000 b933 	b.w	8009a08 <__swbuf_r>
 80097a2:	6813      	ldr	r3, [r2, #0]
 80097a4:	1c58      	adds	r0, r3, #1
 80097a6:	6010      	str	r0, [r2, #0]
 80097a8:	7019      	strb	r1, [r3, #0]
 80097aa:	4608      	mov	r0, r1
 80097ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <__sfputs_r>:
 80097b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b4:	4606      	mov	r6, r0
 80097b6:	460f      	mov	r7, r1
 80097b8:	4614      	mov	r4, r2
 80097ba:	18d5      	adds	r5, r2, r3
 80097bc:	42ac      	cmp	r4, r5
 80097be:	d101      	bne.n	80097c4 <__sfputs_r+0x12>
 80097c0:	2000      	movs	r0, #0
 80097c2:	e007      	b.n	80097d4 <__sfputs_r+0x22>
 80097c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c8:	463a      	mov	r2, r7
 80097ca:	4630      	mov	r0, r6
 80097cc:	f7ff ffda 	bl	8009784 <__sfputc_r>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d1f3      	bne.n	80097bc <__sfputs_r+0xa>
 80097d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097d8 <_vfiprintf_r>:
 80097d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097dc:	460d      	mov	r5, r1
 80097de:	b09d      	sub	sp, #116	@ 0x74
 80097e0:	4614      	mov	r4, r2
 80097e2:	4698      	mov	r8, r3
 80097e4:	4606      	mov	r6, r0
 80097e6:	b118      	cbz	r0, 80097f0 <_vfiprintf_r+0x18>
 80097e8:	6a03      	ldr	r3, [r0, #32]
 80097ea:	b90b      	cbnz	r3, 80097f0 <_vfiprintf_r+0x18>
 80097ec:	f7fe f922 	bl	8007a34 <__sinit>
 80097f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097f2:	07d9      	lsls	r1, r3, #31
 80097f4:	d405      	bmi.n	8009802 <_vfiprintf_r+0x2a>
 80097f6:	89ab      	ldrh	r3, [r5, #12]
 80097f8:	059a      	lsls	r2, r3, #22
 80097fa:	d402      	bmi.n	8009802 <_vfiprintf_r+0x2a>
 80097fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097fe:	f7fe f982 	bl	8007b06 <__retarget_lock_acquire_recursive>
 8009802:	89ab      	ldrh	r3, [r5, #12]
 8009804:	071b      	lsls	r3, r3, #28
 8009806:	d501      	bpl.n	800980c <_vfiprintf_r+0x34>
 8009808:	692b      	ldr	r3, [r5, #16]
 800980a:	b99b      	cbnz	r3, 8009834 <_vfiprintf_r+0x5c>
 800980c:	4629      	mov	r1, r5
 800980e:	4630      	mov	r0, r6
 8009810:	f000 f938 	bl	8009a84 <__swsetup_r>
 8009814:	b170      	cbz	r0, 8009834 <_vfiprintf_r+0x5c>
 8009816:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009818:	07dc      	lsls	r4, r3, #31
 800981a:	d504      	bpl.n	8009826 <_vfiprintf_r+0x4e>
 800981c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009820:	b01d      	add	sp, #116	@ 0x74
 8009822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009826:	89ab      	ldrh	r3, [r5, #12]
 8009828:	0598      	lsls	r0, r3, #22
 800982a:	d4f7      	bmi.n	800981c <_vfiprintf_r+0x44>
 800982c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800982e:	f7fe f96b 	bl	8007b08 <__retarget_lock_release_recursive>
 8009832:	e7f3      	b.n	800981c <_vfiprintf_r+0x44>
 8009834:	2300      	movs	r3, #0
 8009836:	9309      	str	r3, [sp, #36]	@ 0x24
 8009838:	2320      	movs	r3, #32
 800983a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800983e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009842:	2330      	movs	r3, #48	@ 0x30
 8009844:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80099f4 <_vfiprintf_r+0x21c>
 8009848:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800984c:	f04f 0901 	mov.w	r9, #1
 8009850:	4623      	mov	r3, r4
 8009852:	469a      	mov	sl, r3
 8009854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009858:	b10a      	cbz	r2, 800985e <_vfiprintf_r+0x86>
 800985a:	2a25      	cmp	r2, #37	@ 0x25
 800985c:	d1f9      	bne.n	8009852 <_vfiprintf_r+0x7a>
 800985e:	ebba 0b04 	subs.w	fp, sl, r4
 8009862:	d00b      	beq.n	800987c <_vfiprintf_r+0xa4>
 8009864:	465b      	mov	r3, fp
 8009866:	4622      	mov	r2, r4
 8009868:	4629      	mov	r1, r5
 800986a:	4630      	mov	r0, r6
 800986c:	f7ff ffa1 	bl	80097b2 <__sfputs_r>
 8009870:	3001      	adds	r0, #1
 8009872:	f000 80a7 	beq.w	80099c4 <_vfiprintf_r+0x1ec>
 8009876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009878:	445a      	add	r2, fp
 800987a:	9209      	str	r2, [sp, #36]	@ 0x24
 800987c:	f89a 3000 	ldrb.w	r3, [sl]
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 809f 	beq.w	80099c4 <_vfiprintf_r+0x1ec>
 8009886:	2300      	movs	r3, #0
 8009888:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800988c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009890:	f10a 0a01 	add.w	sl, sl, #1
 8009894:	9304      	str	r3, [sp, #16]
 8009896:	9307      	str	r3, [sp, #28]
 8009898:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800989c:	931a      	str	r3, [sp, #104]	@ 0x68
 800989e:	4654      	mov	r4, sl
 80098a0:	2205      	movs	r2, #5
 80098a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a6:	4853      	ldr	r0, [pc, #332]	@ (80099f4 <_vfiprintf_r+0x21c>)
 80098a8:	f7f6 fcc2 	bl	8000230 <memchr>
 80098ac:	9a04      	ldr	r2, [sp, #16]
 80098ae:	b9d8      	cbnz	r0, 80098e8 <_vfiprintf_r+0x110>
 80098b0:	06d1      	lsls	r1, r2, #27
 80098b2:	bf44      	itt	mi
 80098b4:	2320      	movmi	r3, #32
 80098b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098ba:	0713      	lsls	r3, r2, #28
 80098bc:	bf44      	itt	mi
 80098be:	232b      	movmi	r3, #43	@ 0x2b
 80098c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098c4:	f89a 3000 	ldrb.w	r3, [sl]
 80098c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80098ca:	d015      	beq.n	80098f8 <_vfiprintf_r+0x120>
 80098cc:	9a07      	ldr	r2, [sp, #28]
 80098ce:	4654      	mov	r4, sl
 80098d0:	2000      	movs	r0, #0
 80098d2:	f04f 0c0a 	mov.w	ip, #10
 80098d6:	4621      	mov	r1, r4
 80098d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098dc:	3b30      	subs	r3, #48	@ 0x30
 80098de:	2b09      	cmp	r3, #9
 80098e0:	d94b      	bls.n	800997a <_vfiprintf_r+0x1a2>
 80098e2:	b1b0      	cbz	r0, 8009912 <_vfiprintf_r+0x13a>
 80098e4:	9207      	str	r2, [sp, #28]
 80098e6:	e014      	b.n	8009912 <_vfiprintf_r+0x13a>
 80098e8:	eba0 0308 	sub.w	r3, r0, r8
 80098ec:	fa09 f303 	lsl.w	r3, r9, r3
 80098f0:	4313      	orrs	r3, r2
 80098f2:	9304      	str	r3, [sp, #16]
 80098f4:	46a2      	mov	sl, r4
 80098f6:	e7d2      	b.n	800989e <_vfiprintf_r+0xc6>
 80098f8:	9b03      	ldr	r3, [sp, #12]
 80098fa:	1d19      	adds	r1, r3, #4
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	9103      	str	r1, [sp, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	bfbb      	ittet	lt
 8009904:	425b      	neglt	r3, r3
 8009906:	f042 0202 	orrlt.w	r2, r2, #2
 800990a:	9307      	strge	r3, [sp, #28]
 800990c:	9307      	strlt	r3, [sp, #28]
 800990e:	bfb8      	it	lt
 8009910:	9204      	strlt	r2, [sp, #16]
 8009912:	7823      	ldrb	r3, [r4, #0]
 8009914:	2b2e      	cmp	r3, #46	@ 0x2e
 8009916:	d10a      	bne.n	800992e <_vfiprintf_r+0x156>
 8009918:	7863      	ldrb	r3, [r4, #1]
 800991a:	2b2a      	cmp	r3, #42	@ 0x2a
 800991c:	d132      	bne.n	8009984 <_vfiprintf_r+0x1ac>
 800991e:	9b03      	ldr	r3, [sp, #12]
 8009920:	1d1a      	adds	r2, r3, #4
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	9203      	str	r2, [sp, #12]
 8009926:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800992a:	3402      	adds	r4, #2
 800992c:	9305      	str	r3, [sp, #20]
 800992e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009a04 <_vfiprintf_r+0x22c>
 8009932:	7821      	ldrb	r1, [r4, #0]
 8009934:	2203      	movs	r2, #3
 8009936:	4650      	mov	r0, sl
 8009938:	f7f6 fc7a 	bl	8000230 <memchr>
 800993c:	b138      	cbz	r0, 800994e <_vfiprintf_r+0x176>
 800993e:	9b04      	ldr	r3, [sp, #16]
 8009940:	eba0 000a 	sub.w	r0, r0, sl
 8009944:	2240      	movs	r2, #64	@ 0x40
 8009946:	4082      	lsls	r2, r0
 8009948:	4313      	orrs	r3, r2
 800994a:	3401      	adds	r4, #1
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009952:	4829      	ldr	r0, [pc, #164]	@ (80099f8 <_vfiprintf_r+0x220>)
 8009954:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009958:	2206      	movs	r2, #6
 800995a:	f7f6 fc69 	bl	8000230 <memchr>
 800995e:	2800      	cmp	r0, #0
 8009960:	d03f      	beq.n	80099e2 <_vfiprintf_r+0x20a>
 8009962:	4b26      	ldr	r3, [pc, #152]	@ (80099fc <_vfiprintf_r+0x224>)
 8009964:	bb1b      	cbnz	r3, 80099ae <_vfiprintf_r+0x1d6>
 8009966:	9b03      	ldr	r3, [sp, #12]
 8009968:	3307      	adds	r3, #7
 800996a:	f023 0307 	bic.w	r3, r3, #7
 800996e:	3308      	adds	r3, #8
 8009970:	9303      	str	r3, [sp, #12]
 8009972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009974:	443b      	add	r3, r7
 8009976:	9309      	str	r3, [sp, #36]	@ 0x24
 8009978:	e76a      	b.n	8009850 <_vfiprintf_r+0x78>
 800997a:	fb0c 3202 	mla	r2, ip, r2, r3
 800997e:	460c      	mov	r4, r1
 8009980:	2001      	movs	r0, #1
 8009982:	e7a8      	b.n	80098d6 <_vfiprintf_r+0xfe>
 8009984:	2300      	movs	r3, #0
 8009986:	3401      	adds	r4, #1
 8009988:	9305      	str	r3, [sp, #20]
 800998a:	4619      	mov	r1, r3
 800998c:	f04f 0c0a 	mov.w	ip, #10
 8009990:	4620      	mov	r0, r4
 8009992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009996:	3a30      	subs	r2, #48	@ 0x30
 8009998:	2a09      	cmp	r2, #9
 800999a:	d903      	bls.n	80099a4 <_vfiprintf_r+0x1cc>
 800999c:	2b00      	cmp	r3, #0
 800999e:	d0c6      	beq.n	800992e <_vfiprintf_r+0x156>
 80099a0:	9105      	str	r1, [sp, #20]
 80099a2:	e7c4      	b.n	800992e <_vfiprintf_r+0x156>
 80099a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80099a8:	4604      	mov	r4, r0
 80099aa:	2301      	movs	r3, #1
 80099ac:	e7f0      	b.n	8009990 <_vfiprintf_r+0x1b8>
 80099ae:	ab03      	add	r3, sp, #12
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	462a      	mov	r2, r5
 80099b4:	4b12      	ldr	r3, [pc, #72]	@ (8009a00 <_vfiprintf_r+0x228>)
 80099b6:	a904      	add	r1, sp, #16
 80099b8:	4630      	mov	r0, r6
 80099ba:	f7fd fbc3 	bl	8007144 <_printf_float>
 80099be:	4607      	mov	r7, r0
 80099c0:	1c78      	adds	r0, r7, #1
 80099c2:	d1d6      	bne.n	8009972 <_vfiprintf_r+0x19a>
 80099c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099c6:	07d9      	lsls	r1, r3, #31
 80099c8:	d405      	bmi.n	80099d6 <_vfiprintf_r+0x1fe>
 80099ca:	89ab      	ldrh	r3, [r5, #12]
 80099cc:	059a      	lsls	r2, r3, #22
 80099ce:	d402      	bmi.n	80099d6 <_vfiprintf_r+0x1fe>
 80099d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099d2:	f7fe f899 	bl	8007b08 <__retarget_lock_release_recursive>
 80099d6:	89ab      	ldrh	r3, [r5, #12]
 80099d8:	065b      	lsls	r3, r3, #25
 80099da:	f53f af1f 	bmi.w	800981c <_vfiprintf_r+0x44>
 80099de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099e0:	e71e      	b.n	8009820 <_vfiprintf_r+0x48>
 80099e2:	ab03      	add	r3, sp, #12
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	462a      	mov	r2, r5
 80099e8:	4b05      	ldr	r3, [pc, #20]	@ (8009a00 <_vfiprintf_r+0x228>)
 80099ea:	a904      	add	r1, sp, #16
 80099ec:	4630      	mov	r0, r6
 80099ee:	f7fd fe41 	bl	8007674 <_printf_i>
 80099f2:	e7e4      	b.n	80099be <_vfiprintf_r+0x1e6>
 80099f4:	08009e27 	.word	0x08009e27
 80099f8:	08009e31 	.word	0x08009e31
 80099fc:	08007145 	.word	0x08007145
 8009a00:	080097b3 	.word	0x080097b3
 8009a04:	08009e2d 	.word	0x08009e2d

08009a08 <__swbuf_r>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	460e      	mov	r6, r1
 8009a0c:	4614      	mov	r4, r2
 8009a0e:	4605      	mov	r5, r0
 8009a10:	b118      	cbz	r0, 8009a1a <__swbuf_r+0x12>
 8009a12:	6a03      	ldr	r3, [r0, #32]
 8009a14:	b90b      	cbnz	r3, 8009a1a <__swbuf_r+0x12>
 8009a16:	f7fe f80d 	bl	8007a34 <__sinit>
 8009a1a:	69a3      	ldr	r3, [r4, #24]
 8009a1c:	60a3      	str	r3, [r4, #8]
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	071a      	lsls	r2, r3, #28
 8009a22:	d501      	bpl.n	8009a28 <__swbuf_r+0x20>
 8009a24:	6923      	ldr	r3, [r4, #16]
 8009a26:	b943      	cbnz	r3, 8009a3a <__swbuf_r+0x32>
 8009a28:	4621      	mov	r1, r4
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f000 f82a 	bl	8009a84 <__swsetup_r>
 8009a30:	b118      	cbz	r0, 8009a3a <__swbuf_r+0x32>
 8009a32:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009a36:	4638      	mov	r0, r7
 8009a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	6922      	ldr	r2, [r4, #16]
 8009a3e:	1a98      	subs	r0, r3, r2
 8009a40:	6963      	ldr	r3, [r4, #20]
 8009a42:	b2f6      	uxtb	r6, r6
 8009a44:	4283      	cmp	r3, r0
 8009a46:	4637      	mov	r7, r6
 8009a48:	dc05      	bgt.n	8009a56 <__swbuf_r+0x4e>
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	f7ff f94d 	bl	8008cec <_fflush_r>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d1ed      	bne.n	8009a32 <__swbuf_r+0x2a>
 8009a56:	68a3      	ldr	r3, [r4, #8]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	60a3      	str	r3, [r4, #8]
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	6022      	str	r2, [r4, #0]
 8009a62:	701e      	strb	r6, [r3, #0]
 8009a64:	6962      	ldr	r2, [r4, #20]
 8009a66:	1c43      	adds	r3, r0, #1
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d004      	beq.n	8009a76 <__swbuf_r+0x6e>
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	07db      	lsls	r3, r3, #31
 8009a70:	d5e1      	bpl.n	8009a36 <__swbuf_r+0x2e>
 8009a72:	2e0a      	cmp	r6, #10
 8009a74:	d1df      	bne.n	8009a36 <__swbuf_r+0x2e>
 8009a76:	4621      	mov	r1, r4
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f7ff f937 	bl	8008cec <_fflush_r>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d0d9      	beq.n	8009a36 <__swbuf_r+0x2e>
 8009a82:	e7d6      	b.n	8009a32 <__swbuf_r+0x2a>

08009a84 <__swsetup_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4b29      	ldr	r3, [pc, #164]	@ (8009b2c <__swsetup_r+0xa8>)
 8009a88:	4605      	mov	r5, r0
 8009a8a:	6818      	ldr	r0, [r3, #0]
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	b118      	cbz	r0, 8009a98 <__swsetup_r+0x14>
 8009a90:	6a03      	ldr	r3, [r0, #32]
 8009a92:	b90b      	cbnz	r3, 8009a98 <__swsetup_r+0x14>
 8009a94:	f7fd ffce 	bl	8007a34 <__sinit>
 8009a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a9c:	0719      	lsls	r1, r3, #28
 8009a9e:	d422      	bmi.n	8009ae6 <__swsetup_r+0x62>
 8009aa0:	06da      	lsls	r2, r3, #27
 8009aa2:	d407      	bmi.n	8009ab4 <__swsetup_r+0x30>
 8009aa4:	2209      	movs	r2, #9
 8009aa6:	602a      	str	r2, [r5, #0]
 8009aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aac:	81a3      	strh	r3, [r4, #12]
 8009aae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ab2:	e033      	b.n	8009b1c <__swsetup_r+0x98>
 8009ab4:	0758      	lsls	r0, r3, #29
 8009ab6:	d512      	bpl.n	8009ade <__swsetup_r+0x5a>
 8009ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009aba:	b141      	cbz	r1, 8009ace <__swsetup_r+0x4a>
 8009abc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ac0:	4299      	cmp	r1, r3
 8009ac2:	d002      	beq.n	8009aca <__swsetup_r+0x46>
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	f7ff fdd3 	bl	8009670 <_free_r>
 8009aca:	2300      	movs	r3, #0
 8009acc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ace:	89a3      	ldrh	r3, [r4, #12]
 8009ad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ad4:	81a3      	strh	r3, [r4, #12]
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	6063      	str	r3, [r4, #4]
 8009ada:	6923      	ldr	r3, [r4, #16]
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	f043 0308 	orr.w	r3, r3, #8
 8009ae4:	81a3      	strh	r3, [r4, #12]
 8009ae6:	6923      	ldr	r3, [r4, #16]
 8009ae8:	b94b      	cbnz	r3, 8009afe <__swsetup_r+0x7a>
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009af4:	d003      	beq.n	8009afe <__swsetup_r+0x7a>
 8009af6:	4621      	mov	r1, r4
 8009af8:	4628      	mov	r0, r5
 8009afa:	f000 f83f 	bl	8009b7c <__smakebuf_r>
 8009afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b02:	f013 0201 	ands.w	r2, r3, #1
 8009b06:	d00a      	beq.n	8009b1e <__swsetup_r+0x9a>
 8009b08:	2200      	movs	r2, #0
 8009b0a:	60a2      	str	r2, [r4, #8]
 8009b0c:	6962      	ldr	r2, [r4, #20]
 8009b0e:	4252      	negs	r2, r2
 8009b10:	61a2      	str	r2, [r4, #24]
 8009b12:	6922      	ldr	r2, [r4, #16]
 8009b14:	b942      	cbnz	r2, 8009b28 <__swsetup_r+0xa4>
 8009b16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b1a:	d1c5      	bne.n	8009aa8 <__swsetup_r+0x24>
 8009b1c:	bd38      	pop	{r3, r4, r5, pc}
 8009b1e:	0799      	lsls	r1, r3, #30
 8009b20:	bf58      	it	pl
 8009b22:	6962      	ldrpl	r2, [r4, #20]
 8009b24:	60a2      	str	r2, [r4, #8]
 8009b26:	e7f4      	b.n	8009b12 <__swsetup_r+0x8e>
 8009b28:	2000      	movs	r0, #0
 8009b2a:	e7f7      	b.n	8009b1c <__swsetup_r+0x98>
 8009b2c:	200003d4 	.word	0x200003d4

08009b30 <__swhatbuf_r>:
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	460c      	mov	r4, r1
 8009b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b38:	2900      	cmp	r1, #0
 8009b3a:	b096      	sub	sp, #88	@ 0x58
 8009b3c:	4615      	mov	r5, r2
 8009b3e:	461e      	mov	r6, r3
 8009b40:	da0d      	bge.n	8009b5e <__swhatbuf_r+0x2e>
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b48:	f04f 0100 	mov.w	r1, #0
 8009b4c:	bf14      	ite	ne
 8009b4e:	2340      	movne	r3, #64	@ 0x40
 8009b50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b54:	2000      	movs	r0, #0
 8009b56:	6031      	str	r1, [r6, #0]
 8009b58:	602b      	str	r3, [r5, #0]
 8009b5a:	b016      	add	sp, #88	@ 0x58
 8009b5c:	bd70      	pop	{r4, r5, r6, pc}
 8009b5e:	466a      	mov	r2, sp
 8009b60:	f000 f89c 	bl	8009c9c <_fstat_r>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	dbec      	blt.n	8009b42 <__swhatbuf_r+0x12>
 8009b68:	9901      	ldr	r1, [sp, #4]
 8009b6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b72:	4259      	negs	r1, r3
 8009b74:	4159      	adcs	r1, r3
 8009b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b7a:	e7eb      	b.n	8009b54 <__swhatbuf_r+0x24>

08009b7c <__smakebuf_r>:
 8009b7c:	898b      	ldrh	r3, [r1, #12]
 8009b7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b80:	079d      	lsls	r5, r3, #30
 8009b82:	4606      	mov	r6, r0
 8009b84:	460c      	mov	r4, r1
 8009b86:	d507      	bpl.n	8009b98 <__smakebuf_r+0x1c>
 8009b88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	6123      	str	r3, [r4, #16]
 8009b90:	2301      	movs	r3, #1
 8009b92:	6163      	str	r3, [r4, #20]
 8009b94:	b003      	add	sp, #12
 8009b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b98:	ab01      	add	r3, sp, #4
 8009b9a:	466a      	mov	r2, sp
 8009b9c:	f7ff ffc8 	bl	8009b30 <__swhatbuf_r>
 8009ba0:	9f00      	ldr	r7, [sp, #0]
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	4639      	mov	r1, r7
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f7fe ff9c 	bl	8008ae4 <_malloc_r>
 8009bac:	b948      	cbnz	r0, 8009bc2 <__smakebuf_r+0x46>
 8009bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bb2:	059a      	lsls	r2, r3, #22
 8009bb4:	d4ee      	bmi.n	8009b94 <__smakebuf_r+0x18>
 8009bb6:	f023 0303 	bic.w	r3, r3, #3
 8009bba:	f043 0302 	orr.w	r3, r3, #2
 8009bbe:	81a3      	strh	r3, [r4, #12]
 8009bc0:	e7e2      	b.n	8009b88 <__smakebuf_r+0xc>
 8009bc2:	89a3      	ldrh	r3, [r4, #12]
 8009bc4:	6020      	str	r0, [r4, #0]
 8009bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	9b01      	ldr	r3, [sp, #4]
 8009bce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bd2:	b15b      	cbz	r3, 8009bec <__smakebuf_r+0x70>
 8009bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f000 f83b 	bl	8009c54 <_isatty_r>
 8009bde:	b128      	cbz	r0, 8009bec <__smakebuf_r+0x70>
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	f023 0303 	bic.w	r3, r3, #3
 8009be6:	f043 0301 	orr.w	r3, r3, #1
 8009bea:	81a3      	strh	r3, [r4, #12]
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	431d      	orrs	r5, r3
 8009bf0:	81a5      	strh	r5, [r4, #12]
 8009bf2:	e7cf      	b.n	8009b94 <__smakebuf_r+0x18>

08009bf4 <_raise_r>:
 8009bf4:	291f      	cmp	r1, #31
 8009bf6:	b538      	push	{r3, r4, r5, lr}
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	d904      	bls.n	8009c08 <_raise_r+0x14>
 8009bfe:	2316      	movs	r3, #22
 8009c00:	6003      	str	r3, [r0, #0]
 8009c02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c0a:	b112      	cbz	r2, 8009c12 <_raise_r+0x1e>
 8009c0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c10:	b94b      	cbnz	r3, 8009c26 <_raise_r+0x32>
 8009c12:	4628      	mov	r0, r5
 8009c14:	f000 f840 	bl	8009c98 <_getpid_r>
 8009c18:	4622      	mov	r2, r4
 8009c1a:	4601      	mov	r1, r0
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c22:	f000 b827 	b.w	8009c74 <_kill_r>
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d00a      	beq.n	8009c40 <_raise_r+0x4c>
 8009c2a:	1c59      	adds	r1, r3, #1
 8009c2c:	d103      	bne.n	8009c36 <_raise_r+0x42>
 8009c2e:	2316      	movs	r3, #22
 8009c30:	6003      	str	r3, [r0, #0]
 8009c32:	2001      	movs	r0, #1
 8009c34:	e7e7      	b.n	8009c06 <_raise_r+0x12>
 8009c36:	2100      	movs	r1, #0
 8009c38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	4798      	blx	r3
 8009c40:	2000      	movs	r0, #0
 8009c42:	e7e0      	b.n	8009c06 <_raise_r+0x12>

08009c44 <raise>:
 8009c44:	4b02      	ldr	r3, [pc, #8]	@ (8009c50 <raise+0xc>)
 8009c46:	4601      	mov	r1, r0
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	f7ff bfd3 	b.w	8009bf4 <_raise_r>
 8009c4e:	bf00      	nop
 8009c50:	200003d4 	.word	0x200003d4

08009c54 <_isatty_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	4d06      	ldr	r5, [pc, #24]	@ (8009c70 <_isatty_r+0x1c>)
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	4608      	mov	r0, r1
 8009c5e:	602b      	str	r3, [r5, #0]
 8009c60:	f7f7 fe78 	bl	8001954 <_isatty>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d102      	bne.n	8009c6e <_isatty_r+0x1a>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	b103      	cbz	r3, 8009c6e <_isatty_r+0x1a>
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	20000b44 	.word	0x20000b44

08009c74 <_kill_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4d07      	ldr	r5, [pc, #28]	@ (8009c94 <_kill_r+0x20>)
 8009c78:	2300      	movs	r3, #0
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	4611      	mov	r1, r2
 8009c80:	602b      	str	r3, [r5, #0]
 8009c82:	f7f7 fdf7 	bl	8001874 <_kill>
 8009c86:	1c43      	adds	r3, r0, #1
 8009c88:	d102      	bne.n	8009c90 <_kill_r+0x1c>
 8009c8a:	682b      	ldr	r3, [r5, #0]
 8009c8c:	b103      	cbz	r3, 8009c90 <_kill_r+0x1c>
 8009c8e:	6023      	str	r3, [r4, #0]
 8009c90:	bd38      	pop	{r3, r4, r5, pc}
 8009c92:	bf00      	nop
 8009c94:	20000b44 	.word	0x20000b44

08009c98 <_getpid_r>:
 8009c98:	f7f7 bde4 	b.w	8001864 <_getpid>

08009c9c <_fstat_r>:
 8009c9c:	b538      	push	{r3, r4, r5, lr}
 8009c9e:	4d07      	ldr	r5, [pc, #28]	@ (8009cbc <_fstat_r+0x20>)
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	4608      	mov	r0, r1
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	602b      	str	r3, [r5, #0]
 8009caa:	f7f7 fe43 	bl	8001934 <_fstat>
 8009cae:	1c43      	adds	r3, r0, #1
 8009cb0:	d102      	bne.n	8009cb8 <_fstat_r+0x1c>
 8009cb2:	682b      	ldr	r3, [r5, #0]
 8009cb4:	b103      	cbz	r3, 8009cb8 <_fstat_r+0x1c>
 8009cb6:	6023      	str	r3, [r4, #0]
 8009cb8:	bd38      	pop	{r3, r4, r5, pc}
 8009cba:	bf00      	nop
 8009cbc:	20000b44 	.word	0x20000b44

08009cc0 <_init>:
 8009cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc2:	bf00      	nop
 8009cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cc6:	bc08      	pop	{r3}
 8009cc8:	469e      	mov	lr, r3
 8009cca:	4770      	bx	lr

08009ccc <_fini>:
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	bf00      	nop
 8009cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cd2:	bc08      	pop	{r3}
 8009cd4:	469e      	mov	lr, r3
 8009cd6:	4770      	bx	lr
