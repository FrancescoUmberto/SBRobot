
self-balancing-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000547c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800564c  0800564c  0000664c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b8  080056b8  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080056b8  080056b8  000066b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c0  080056c0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c0  080056c0  000066c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056c4  080056c4  000066c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080056c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000068  08005730  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08005730  000073b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012120  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df9  00000000  00000000  000191b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0001bfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbe  00000000  00000000  0001d020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fa1  00000000  00000000  0001dcde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144b8  00000000  00000000  00041c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4cf1  00000000  00000000  00056137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ae28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c30  00000000  00000000  0012ae6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0012fa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005634 	.word	0x08005634

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005634 	.word	0x08005634

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800092c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000930:	f000 b988 	b.w	8000c44 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9d08      	ldr	r5, [sp, #32]
 8000952:	468e      	mov	lr, r1
 8000954:	4604      	mov	r4, r0
 8000956:	4688      	mov	r8, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d14a      	bne.n	80009f2 <__udivmoddi4+0xa6>
 800095c:	428a      	cmp	r2, r1
 800095e:	4617      	mov	r7, r2
 8000960:	d962      	bls.n	8000a28 <__udivmoddi4+0xdc>
 8000962:	fab2 f682 	clz	r6, r2
 8000966:	b14e      	cbz	r6, 800097c <__udivmoddi4+0x30>
 8000968:	f1c6 0320 	rsb	r3, r6, #32
 800096c:	fa01 f806 	lsl.w	r8, r1, r6
 8000970:	fa20 f303 	lsr.w	r3, r0, r3
 8000974:	40b7      	lsls	r7, r6
 8000976:	ea43 0808 	orr.w	r8, r3, r8
 800097a:	40b4      	lsls	r4, r6
 800097c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000980:	fa1f fc87 	uxth.w	ip, r7
 8000984:	fbb8 f1fe 	udiv	r1, r8, lr
 8000988:	0c23      	lsrs	r3, r4, #16
 800098a:	fb0e 8811 	mls	r8, lr, r1, r8
 800098e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000992:	fb01 f20c 	mul.w	r2, r1, ip
 8000996:	429a      	cmp	r2, r3
 8000998:	d909      	bls.n	80009ae <__udivmoddi4+0x62>
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80009a0:	f080 80ea 	bcs.w	8000b78 <__udivmoddi4+0x22c>
 80009a4:	429a      	cmp	r2, r3
 80009a6:	f240 80e7 	bls.w	8000b78 <__udivmoddi4+0x22c>
 80009aa:	3902      	subs	r1, #2
 80009ac:	443b      	add	r3, r7
 80009ae:	1a9a      	subs	r2, r3, r2
 80009b0:	b2a3      	uxth	r3, r4
 80009b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009be:	fb00 fc0c 	mul.w	ip, r0, ip
 80009c2:	459c      	cmp	ip, r3
 80009c4:	d909      	bls.n	80009da <__udivmoddi4+0x8e>
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80009cc:	f080 80d6 	bcs.w	8000b7c <__udivmoddi4+0x230>
 80009d0:	459c      	cmp	ip, r3
 80009d2:	f240 80d3 	bls.w	8000b7c <__udivmoddi4+0x230>
 80009d6:	443b      	add	r3, r7
 80009d8:	3802      	subs	r0, #2
 80009da:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009de:	eba3 030c 	sub.w	r3, r3, ip
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11d      	cbz	r5, 80009ee <__udivmoddi4+0xa2>
 80009e6:	40f3      	lsrs	r3, r6
 80009e8:	2200      	movs	r2, #0
 80009ea:	e9c5 3200 	strd	r3, r2, [r5]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d905      	bls.n	8000a02 <__udivmoddi4+0xb6>
 80009f6:	b10d      	cbz	r5, 80009fc <__udivmoddi4+0xb0>
 80009f8:	e9c5 0100 	strd	r0, r1, [r5]
 80009fc:	2100      	movs	r1, #0
 80009fe:	4608      	mov	r0, r1
 8000a00:	e7f5      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a02:	fab3 f183 	clz	r1, r3
 8000a06:	2900      	cmp	r1, #0
 8000a08:	d146      	bne.n	8000a98 <__udivmoddi4+0x14c>
 8000a0a:	4573      	cmp	r3, lr
 8000a0c:	d302      	bcc.n	8000a14 <__udivmoddi4+0xc8>
 8000a0e:	4282      	cmp	r2, r0
 8000a10:	f200 8105 	bhi.w	8000c1e <__udivmoddi4+0x2d2>
 8000a14:	1a84      	subs	r4, r0, r2
 8000a16:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	4690      	mov	r8, r2
 8000a1e:	2d00      	cmp	r5, #0
 8000a20:	d0e5      	beq.n	80009ee <__udivmoddi4+0xa2>
 8000a22:	e9c5 4800 	strd	r4, r8, [r5]
 8000a26:	e7e2      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a28:	2a00      	cmp	r2, #0
 8000a2a:	f000 8090 	beq.w	8000b4e <__udivmoddi4+0x202>
 8000a2e:	fab2 f682 	clz	r6, r2
 8000a32:	2e00      	cmp	r6, #0
 8000a34:	f040 80a4 	bne.w	8000b80 <__udivmoddi4+0x234>
 8000a38:	1a8a      	subs	r2, r1, r2
 8000a3a:	0c03      	lsrs	r3, r0, #16
 8000a3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a40:	b280      	uxth	r0, r0
 8000a42:	b2bc      	uxth	r4, r7
 8000a44:	2101      	movs	r1, #1
 8000a46:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a4a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a52:	fb04 f20c 	mul.w	r2, r4, ip
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d907      	bls.n	8000a6a <__udivmoddi4+0x11e>
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000a60:	d202      	bcs.n	8000a68 <__udivmoddi4+0x11c>
 8000a62:	429a      	cmp	r2, r3
 8000a64:	f200 80e0 	bhi.w	8000c28 <__udivmoddi4+0x2dc>
 8000a68:	46c4      	mov	ip, r8
 8000a6a:	1a9b      	subs	r3, r3, r2
 8000a6c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a70:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a74:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a78:	fb02 f404 	mul.w	r4, r2, r4
 8000a7c:	429c      	cmp	r4, r3
 8000a7e:	d907      	bls.n	8000a90 <__udivmoddi4+0x144>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x142>
 8000a88:	429c      	cmp	r4, r3
 8000a8a:	f200 80ca 	bhi.w	8000c22 <__udivmoddi4+0x2d6>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	1b1b      	subs	r3, r3, r4
 8000a92:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a96:	e7a5      	b.n	80009e4 <__udivmoddi4+0x98>
 8000a98:	f1c1 0620 	rsb	r6, r1, #32
 8000a9c:	408b      	lsls	r3, r1
 8000a9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000aa2:	431f      	orrs	r7, r3
 8000aa4:	fa0e f401 	lsl.w	r4, lr, r1
 8000aa8:	fa20 f306 	lsr.w	r3, r0, r6
 8000aac:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ab0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ab4:	4323      	orrs	r3, r4
 8000ab6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aba:	fa1f fc87 	uxth.w	ip, r7
 8000abe:	fbbe f0f9 	udiv	r0, lr, r9
 8000ac2:	0c1c      	lsrs	r4, r3, #16
 8000ac4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ac8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000acc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ad0:	45a6      	cmp	lr, r4
 8000ad2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x1a0>
 8000ad8:	193c      	adds	r4, r7, r4
 8000ada:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ade:	f080 809c 	bcs.w	8000c1a <__udivmoddi4+0x2ce>
 8000ae2:	45a6      	cmp	lr, r4
 8000ae4:	f240 8099 	bls.w	8000c1a <__udivmoddi4+0x2ce>
 8000ae8:	3802      	subs	r0, #2
 8000aea:	443c      	add	r4, r7
 8000aec:	eba4 040e 	sub.w	r4, r4, lr
 8000af0:	fa1f fe83 	uxth.w	lr, r3
 8000af4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000af8:	fb09 4413 	mls	r4, r9, r3, r4
 8000afc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b00:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b04:	45a4      	cmp	ip, r4
 8000b06:	d908      	bls.n	8000b1a <__udivmoddi4+0x1ce>
 8000b08:	193c      	adds	r4, r7, r4
 8000b0a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000b0e:	f080 8082 	bcs.w	8000c16 <__udivmoddi4+0x2ca>
 8000b12:	45a4      	cmp	ip, r4
 8000b14:	d97f      	bls.n	8000c16 <__udivmoddi4+0x2ca>
 8000b16:	3b02      	subs	r3, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b1e:	eba4 040c 	sub.w	r4, r4, ip
 8000b22:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b26:	4564      	cmp	r4, ip
 8000b28:	4673      	mov	r3, lr
 8000b2a:	46e1      	mov	r9, ip
 8000b2c:	d362      	bcc.n	8000bf4 <__udivmoddi4+0x2a8>
 8000b2e:	d05f      	beq.n	8000bf0 <__udivmoddi4+0x2a4>
 8000b30:	b15d      	cbz	r5, 8000b4a <__udivmoddi4+0x1fe>
 8000b32:	ebb8 0203 	subs.w	r2, r8, r3
 8000b36:	eb64 0409 	sbc.w	r4, r4, r9
 8000b3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000b3e:	fa22 f301 	lsr.w	r3, r2, r1
 8000b42:	431e      	orrs	r6, r3
 8000b44:	40cc      	lsrs	r4, r1
 8000b46:	e9c5 6400 	strd	r6, r4, [r5]
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	e74f      	b.n	80009ee <__udivmoddi4+0xa2>
 8000b4e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b52:	0c01      	lsrs	r1, r0, #16
 8000b54:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b58:	b280      	uxth	r0, r0
 8000b5a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b5e:	463b      	mov	r3, r7
 8000b60:	4638      	mov	r0, r7
 8000b62:	463c      	mov	r4, r7
 8000b64:	46b8      	mov	r8, r7
 8000b66:	46be      	mov	lr, r7
 8000b68:	2620      	movs	r6, #32
 8000b6a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b6e:	eba2 0208 	sub.w	r2, r2, r8
 8000b72:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b76:	e766      	b.n	8000a46 <__udivmoddi4+0xfa>
 8000b78:	4601      	mov	r1, r0
 8000b7a:	e718      	b.n	80009ae <__udivmoddi4+0x62>
 8000b7c:	4610      	mov	r0, r2
 8000b7e:	e72c      	b.n	80009da <__udivmoddi4+0x8e>
 8000b80:	f1c6 0220 	rsb	r2, r6, #32
 8000b84:	fa2e f302 	lsr.w	r3, lr, r2
 8000b88:	40b7      	lsls	r7, r6
 8000b8a:	40b1      	lsls	r1, r6
 8000b8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	430a      	orrs	r2, r1
 8000b96:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b9a:	b2bc      	uxth	r4, r7
 8000b9c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ba0:	0c11      	lsrs	r1, r2, #16
 8000ba2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba6:	fb08 f904 	mul.w	r9, r8, r4
 8000baa:	40b0      	lsls	r0, r6
 8000bac:	4589      	cmp	r9, r1
 8000bae:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000bb2:	b280      	uxth	r0, r0
 8000bb4:	d93e      	bls.n	8000c34 <__udivmoddi4+0x2e8>
 8000bb6:	1879      	adds	r1, r7, r1
 8000bb8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000bbc:	d201      	bcs.n	8000bc2 <__udivmoddi4+0x276>
 8000bbe:	4589      	cmp	r9, r1
 8000bc0:	d81f      	bhi.n	8000c02 <__udivmoddi4+0x2b6>
 8000bc2:	eba1 0109 	sub.w	r1, r1, r9
 8000bc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bca:	fb09 f804 	mul.w	r8, r9, r4
 8000bce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bd2:	b292      	uxth	r2, r2
 8000bd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bd8:	4542      	cmp	r2, r8
 8000bda:	d229      	bcs.n	8000c30 <__udivmoddi4+0x2e4>
 8000bdc:	18ba      	adds	r2, r7, r2
 8000bde:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000be2:	d2c4      	bcs.n	8000b6e <__udivmoddi4+0x222>
 8000be4:	4542      	cmp	r2, r8
 8000be6:	d2c2      	bcs.n	8000b6e <__udivmoddi4+0x222>
 8000be8:	f1a9 0102 	sub.w	r1, r9, #2
 8000bec:	443a      	add	r2, r7
 8000bee:	e7be      	b.n	8000b6e <__udivmoddi4+0x222>
 8000bf0:	45f0      	cmp	r8, lr
 8000bf2:	d29d      	bcs.n	8000b30 <__udivmoddi4+0x1e4>
 8000bf4:	ebbe 0302 	subs.w	r3, lr, r2
 8000bf8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000bfc:	3801      	subs	r0, #1
 8000bfe:	46e1      	mov	r9, ip
 8000c00:	e796      	b.n	8000b30 <__udivmoddi4+0x1e4>
 8000c02:	eba7 0909 	sub.w	r9, r7, r9
 8000c06:	4449      	add	r1, r9
 8000c08:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c0c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c10:	fb09 f804 	mul.w	r8, r9, r4
 8000c14:	e7db      	b.n	8000bce <__udivmoddi4+0x282>
 8000c16:	4673      	mov	r3, lr
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1ce>
 8000c1a:	4650      	mov	r0, sl
 8000c1c:	e766      	b.n	8000aec <__udivmoddi4+0x1a0>
 8000c1e:	4608      	mov	r0, r1
 8000c20:	e6fd      	b.n	8000a1e <__udivmoddi4+0xd2>
 8000c22:	443b      	add	r3, r7
 8000c24:	3a02      	subs	r2, #2
 8000c26:	e733      	b.n	8000a90 <__udivmoddi4+0x144>
 8000c28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c2c:	443b      	add	r3, r7
 8000c2e:	e71c      	b.n	8000a6a <__udivmoddi4+0x11e>
 8000c30:	4649      	mov	r1, r9
 8000c32:	e79c      	b.n	8000b6e <__udivmoddi4+0x222>
 8000c34:	eba1 0109 	sub.w	r1, r1, r9
 8000c38:	46c4      	mov	ip, r8
 8000c3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c3e:	fb09 f804 	mul.w	r8, r9, r4
 8000c42:	e7c4      	b.n	8000bce <__udivmoddi4+0x282>

08000c44 <__aeabi_idiv0>:
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	@ 0x28
 8000c4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b5e      	ldr	r3, [pc, #376]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a5d      	ldr	r2, [pc, #372]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b57      	ldr	r3, [pc, #348]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a56      	ldr	r2, [pc, #344]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b54      	ldr	r3, [pc, #336]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b50      	ldr	r3, [pc, #320]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a4f      	ldr	r2, [pc, #316]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b49      	ldr	r3, [pc, #292]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a48      	ldr	r2, [pc, #288]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b46      	ldr	r3, [pc, #280]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b42      	ldr	r3, [pc, #264]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a41      	ldr	r2, [pc, #260]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000cd8:	f043 0308 	orr.w	r3, r3, #8
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b3f      	ldr	r3, [pc, #252]	@ (8000ddc <MX_GPIO_Init+0x194>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0308 	and.w	r3, r3, #8
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2120      	movs	r1, #32
 8000cee:	483c      	ldr	r0, [pc, #240]	@ (8000de0 <MX_GPIO_Init+0x198>)
 8000cf0:	f001 fa5c 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_DIR_Pin|DISP_CS_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2111      	movs	r1, #17
 8000cf8:	483a      	ldr	r0, [pc, #232]	@ (8000de4 <MX_GPIO_Init+0x19c>)
 8000cfa:	f001 fa57 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d04:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4834      	ldr	r0, [pc, #208]	@ (8000de8 <MX_GPIO_Init+0x1a0>)
 8000d16:	f001 f8b5 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000d1a:	f641 73fd 	movw	r3, #8189	@ 0x1ffd
 8000d1e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d20:	2303      	movs	r3, #3
 8000d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482e      	ldr	r0, [pc, #184]	@ (8000de8 <MX_GPIO_Init+0x1a0>)
 8000d30:	f001 f8a8 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8000d34:	f649 73d1 	movw	r3, #40913	@ 0x9fd1
 8000d38:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4825      	ldr	r0, [pc, #148]	@ (8000de0 <MX_GPIO_Init+0x198>)
 8000d4a:	f001 f89b 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d4e:	2320      	movs	r3, #32
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	481e      	ldr	r0, [pc, #120]	@ (8000de0 <MX_GPIO_Init+0x198>)
 8000d66:	f001 f88d 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_DIR_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_DIR_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4818      	ldr	r0, [pc, #96]	@ (8000de4 <MX_GPIO_Init+0x19c>)
 8000d82:	f001 f87f 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000d86:	f24f 3326 	movw	r3, #62246	@ 0xf326
 8000d8a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4812      	ldr	r0, [pc, #72]	@ (8000de4 <MX_GPIO_Init+0x19c>)
 8000d9c:	f001 f872 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000da0:	2304      	movs	r3, #4
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da4:	2303      	movs	r3, #3
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	480e      	ldr	r0, [pc, #56]	@ (8000dec <MX_GPIO_Init+0x1a4>)
 8000db4:	f001 f866 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CS_Pin */
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000db8:	2310      	movs	r3, #16
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_GPIO_Init+0x19c>)
 8000dd0:	f001 f858 	bl	8001e84 <HAL_GPIO_Init>

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	@ 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40020400 	.word	0x40020400
 8000de8:	40020800 	.word	0x40020800
 8000dec:	40020c00 	.word	0x40020c00

08000df0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000df8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000dfc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d013      	beq.n	8000e30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e08:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000e10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00b      	beq.n	8000e30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e18:	e000      	b.n	8000e1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e1c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f9      	beq.n	8000e1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e26:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e30:	687b      	ldr	r3, [r7, #4]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f000 fe76 	bl	8001b34 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f848 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f7ff fefc 	bl	8000c48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e50:	f000 fcb4 	bl	80017bc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000e54:	f000 fb04 	bl	8001460 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000e58:	f000 fb56 	bl	8001508 <MX_TIM6_Init>
  MX_SPI2_Init();
 8000e5c:	f000 f8dc 	bl	8001018 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e60:	f000 faa6 	bl	80013b0 <MX_TIM2_Init>
  MX_TIM7_Init();
 8000e64:	f000 fb86 	bl	8001574 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);						// Display timer (0.1MHz)
 8000e68:	4814      	ldr	r0, [pc, #80]	@ (8000ebc <main+0x7c>)
 8000e6a:	f002 fa9b 	bl	80033a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);						// Encoder timer
 8000e6e:	4814      	ldr	r0, [pc, #80]	@ (8000ec0 <main+0x80>)
 8000e70:	f002 fa98 	bl	80033a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000e74:	213c      	movs	r1, #60	@ 0x3c
 8000e76:	4813      	ldr	r0, [pc, #76]	@ (8000ec4 <main+0x84>)
 8000e78:	f002 fbf9 	bl	800366e <HAL_TIM_Encoder_Start_IT>
  	//  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);		// Enable update interrupt for timer in encoder mode
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Robot_init();
 8000e7c:	f000 fe1e 	bl	8001abc <Robot_init>
  HAL_Delay(1000);
 8000e80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e84:	f000 fec8 	bl	8001c18 <HAL_Delay>
  printf("We\n");
 8000e88:	480f      	ldr	r0, [pc, #60]	@ (8000ec8 <main+0x88>)
 8000e8a:	f003 fd73 	bl	8004974 <puts>
  printf("PERIOD %d",(int)(SAMPLING_PERIOD*100));
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <main+0x8c>)
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000ed0 <main+0x90>
 8000e98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ea0:	ee17 1a90 	vmov	r1, s15
 8000ea4:	480b      	ldr	r0, [pc, #44]	@ (8000ed4 <main+0x94>)
 8000ea6:	f003 fcfd 	bl	80048a4 <iprintf>
//  MAX72_Start_Scrolling("Work in progress...");
  while (1)
  {
	  printf("A\n");
 8000eaa:	480b      	ldr	r0, [pc, #44]	@ (8000ed8 <main+0x98>)
 8000eac:	f003 fd62 	bl	8004974 <puts>
	  HAL_Delay(1000);
 8000eb0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eb4:	f000 feb0 	bl	8001c18 <HAL_Delay>
	  printf("A\n");
 8000eb8:	bf00      	nop
 8000eba:	e7f6      	b.n	8000eaa <main+0x6a>
 8000ebc:	20000170 	.word	0x20000170
 8000ec0:	200001b8 	.word	0x200001b8
 8000ec4:	20000128 	.word	0x20000128
 8000ec8:	0800564c 	.word	0x0800564c
 8000ecc:	20000248 	.word	0x20000248
 8000ed0:	42c80000 	.word	0x42c80000
 8000ed4:	08005650 	.word	0x08005650
 8000ed8:	0800565c 	.word	0x0800565c

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	@ 0x50
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	2234      	movs	r2, #52	@ 0x34
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 fd4a 	bl	8004984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <SystemClock_Config+0xd4>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f08:	4a29      	ldr	r2, [pc, #164]	@ (8000fb0 <SystemClock_Config+0xd4>)
 8000f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f10:	4b27      	ldr	r3, [pc, #156]	@ (8000fb0 <SystemClock_Config+0xd4>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <SystemClock_Config+0xd8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f28:	4a22      	ldr	r2, [pc, #136]	@ (8000fb4 <SystemClock_Config+0xd8>)
 8000f2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <SystemClock_Config+0xd8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f44:	2310      	movs	r3, #16
 8000f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f50:	2310      	movs	r3, #16
 8000f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f54:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f58:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f62:	2302      	movs	r3, #2
 8000f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 fc82 	bl	8002874 <HAL_RCC_OscConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f76:	f000 f848 	bl	800100a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7a:	230f      	movs	r3, #15
 8000f7c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2102      	movs	r1, #2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 f922 	bl	80021e0 <HAL_RCC_ClockConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000fa2:	f000 f832 	bl	800100a <Error_Handler>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3750      	adds	r7, #80	@ 0x50
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	@ (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d007      	beq.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x22>
//		MAX72_Scroll_Timer_ISR(); // Scrolling function
	} else if (htim->Instance == TIM7) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a06      	ldr	r2, [pc, #24]	@ (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d102      	bne.n	8000fda <HAL_TIM_PeriodElapsedCallback+0x22>
		update_data(&encoder2);
 8000fd4:	4805      	ldr	r0, [pc, #20]	@ (8000fec <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000fd6:	f000 fd29 	bl	8001a2c <update_data>
	}
//	else if (htim->Instance == TIM4) {
//		printf("Revolution completed\n");
//	}

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40001000 	.word	0x40001000
 8000fe8:	40001400 	.word	0x40001400
 8000fec:	2000024c 	.word	0x2000024c

08000ff0 <__io_putchar>:

int __io_putchar(int ch){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fef8 	bl	8000df0 <ITM_SendChar>
	return ch;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100e:	b672      	cpsid	i
}
 8001010:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001012:	bf00      	nop
 8001014:	e7fd      	b.n	8001012 <Error_Handler+0x8>
	...

08001018 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800101c:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <MX_SPI2_Init+0x68>)
 800101e:	4a19      	ldr	r2, [pc, #100]	@ (8001084 <MX_SPI2_Init+0x6c>)
 8001020:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001022:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <MX_SPI2_Init+0x68>)
 8001024:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001028:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <MX_SPI2_Init+0x68>)
 800102c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001030:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001032:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <MX_SPI2_Init+0x68>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_SPI2_Init+0x68>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <MX_SPI2_Init+0x68>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001044:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <MX_SPI2_Init+0x68>)
 8001046:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800104a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_SPI2_Init+0x68>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <MX_SPI2_Init+0x68>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_SPI2_Init+0x68>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <MX_SPI2_Init+0x68>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_SPI2_Init+0x68>)
 8001066:	220a      	movs	r2, #10
 8001068:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <MX_SPI2_Init+0x68>)
 800106c:	f001 fea0 	bl	8002db0 <HAL_SPI_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001076:	f7ff ffc8 	bl	800100a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000084 	.word	0x20000084
 8001084:	40003800 	.word	0x40003800

08001088 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a28      	ldr	r2, [pc, #160]	@ (8001148 <HAL_SPI_MspInit+0xc0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d14a      	bne.n	8001140 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b27      	ldr	r3, [pc, #156]	@ (800114c <HAL_SPI_MspInit+0xc4>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	4a26      	ldr	r2, [pc, #152]	@ (800114c <HAL_SPI_MspInit+0xc4>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ba:	4b24      	ldr	r3, [pc, #144]	@ (800114c <HAL_SPI_MspInit+0xc4>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b20      	ldr	r3, [pc, #128]	@ (800114c <HAL_SPI_MspInit+0xc4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a1f      	ldr	r2, [pc, #124]	@ (800114c <HAL_SPI_MspInit+0xc4>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <HAL_SPI_MspInit+0xc4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <HAL_SPI_MspInit+0xc4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a18      	ldr	r2, [pc, #96]	@ (800114c <HAL_SPI_MspInit+0xc4>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b16      	ldr	r3, [pc, #88]	@ (800114c <HAL_SPI_MspInit+0xc4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010fe:	2302      	movs	r3, #2
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800110e:	2307      	movs	r3, #7
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	480d      	ldr	r0, [pc, #52]	@ (8001150 <HAL_SPI_MspInit+0xc8>)
 800111a:	f000 feb3 	bl	8001e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISP_SCK_Pin;
 800111e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001130:	2305      	movs	r3, #5
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISP_SCK_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	@ (8001154 <HAL_SPI_MspInit+0xcc>)
 800113c:	f000 fea2 	bl	8001e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40003800 	.word	0x40003800
 800114c:	40023800 	.word	0x40023800
 8001150:	40020800 	.word	0x40020800
 8001154:	40020400 	.word	0x40020400

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	4a0f      	ldr	r2, [pc, #60]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116c:	6453      	str	r3, [r2, #68]	@ 0x44
 800116e:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <HAL_MspInit+0x4c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001188:	6413      	str	r3, [r2, #64]	@ 0x40
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001196:	2007      	movs	r0, #7
 8001198:	f000 fe32 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <NMI_Handler+0x4>

080011b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <MemManage_Handler+0x4>

080011c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <UsageFault_Handler+0x4>

080011d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fe:	f000 fceb 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <TIM4_IRQHandler+0x10>)
 800120e:	f002 fadc 	bl	80037ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000128 	.word	0x20000128

0800121c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001220:	4802      	ldr	r0, [pc, #8]	@ (800122c <TIM6_DAC_IRQHandler+0x10>)
 8001222:	f002 fad2 	bl	80037ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000170 	.word	0x20000170

08001230 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001234:	4802      	ldr	r0, [pc, #8]	@ (8001240 <TIM7_IRQHandler+0x10>)
 8001236:	f002 fac8 	bl	80037ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200001b8 	.word	0x200001b8

08001244 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e00a      	b.n	800126c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001256:	f3af 8000 	nop.w
 800125a:	4601      	mov	r1, r0
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	60ba      	str	r2, [r7, #8]
 8001262:	b2ca      	uxtb	r2, r1
 8001264:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf0      	blt.n	8001256 <_read+0x12>
  }

  return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e009      	b.n	80012a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	60ba      	str	r2, [r7, #8]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fea9 	bl	8000ff0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3301      	adds	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	dbf1      	blt.n	8001290 <_write+0x12>
  }
  return len;
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_close>:

int _close(int file)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012de:	605a      	str	r2, [r3, #4]
  return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <_isatty>:

int _isatty(int file)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	@ (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f003 fb20 	bl	8004994 <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <_sbrk+0x64>)
 8001370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20020000 	.word	0x20020000
 8001380:	00000400 	.word	0x00000400
 8001384:	200000dc 	.word	0x200000dc
 8001388:	200003b0 	.word	0x200003b0

0800138c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <SystemInit+0x20>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001396:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <SystemInit+0x20>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	@ 0x28
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	615a      	str	r2, [r3, #20]
 80013d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d2:	4b22      	ldr	r3, [pc, #136]	@ (800145c <MX_TIM2_Init+0xac>)
 80013d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013da:	4b20      	ldr	r3, [pc, #128]	@ (800145c <MX_TIM2_Init+0xac>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <MX_TIM2_Init+0xac>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013e6:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <MX_TIM2_Init+0xac>)
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <MX_TIM2_Init+0xac>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <MX_TIM2_Init+0xac>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013fa:	4818      	ldr	r0, [pc, #96]	@ (800145c <MX_TIM2_Init+0xac>)
 80013fc:	f002 f842 	bl	8003484 <HAL_TIM_PWM_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001406:	f7ff fe00 	bl	800100a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	4619      	mov	r1, r3
 8001418:	4810      	ldr	r0, [pc, #64]	@ (800145c <MX_TIM2_Init+0xac>)
 800141a:	f002 fe2d 	bl	8004078 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001424:	f7ff fdf1 	bl	800100a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001428:	2360      	movs	r3, #96	@ 0x60
 800142a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2204      	movs	r2, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4807      	ldr	r0, [pc, #28]	@ (800145c <MX_TIM2_Init+0xac>)
 8001440:	f002 fab4 	bl	80039ac <HAL_TIM_PWM_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800144a:	f7ff fdde 	bl	800100a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800144e:	4803      	ldr	r0, [pc, #12]	@ (800145c <MX_TIM2_Init+0xac>)
 8001450:	f000 f97c 	bl	800174c <HAL_TIM_MspPostInit>

}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	@ 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200000e0 	.word	0x200000e0

08001460 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	@ 0x30
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	2224      	movs	r2, #36	@ 0x24
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f003 fa88 	bl	8004984 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800147c:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <MX_TIM4_Init+0xa0>)
 800147e:	4a21      	ldr	r2, [pc, #132]	@ (8001504 <MX_TIM4_Init+0xa4>)
 8001480:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001482:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <MX_TIM4_Init+0xa0>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <MX_TIM4_Init+0xa0>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8191;
 800148e:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <MX_TIM4_Init+0xa0>)
 8001490:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001494:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <MX_TIM4_Init+0xa0>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <MX_TIM4_Init+0xa0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014a2:	2303      	movs	r3, #3
 80014a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014aa:	2301      	movs	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014ba:	2301      	movs	r3, #1
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	4619      	mov	r1, r3
 80014cc:	480c      	ldr	r0, [pc, #48]	@ (8001500 <MX_TIM4_Init+0xa0>)
 80014ce:	f002 f828 	bl	8003522 <HAL_TIM_Encoder_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80014d8:	f7ff fd97 	bl	800100a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_TIM4_Init+0xa0>)
 80014ea:	f002 fdc5 	bl	8004078 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80014f4:	f7ff fd89 	bl	800100a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3730      	adds	r7, #48	@ 0x30
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000128 	.word	0x20000128
 8001504:	40000800 	.word	0x40000800

08001508 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_TIM6_Init+0x64>)
 8001518:	4a15      	ldr	r2, [pc, #84]	@ (8001570 <MX_TIM6_Init+0x68>)
 800151a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_TIM6_Init+0x64>)
 800151e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001522:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_TIM6_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <MX_TIM6_Init+0x64>)
 800152c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001530:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_TIM6_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001538:	480c      	ldr	r0, [pc, #48]	@ (800156c <MX_TIM6_Init+0x64>)
 800153a:	f001 fee3 	bl	8003304 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001544:	f7ff fd61 	bl	800100a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_TIM6_Init+0x64>)
 8001556:	f002 fd8f 	bl	8004078 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001560:	f7ff fd53 	bl	800100a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000170 	.word	0x20000170
 8001570:	40001000 	.word	0x40001000

08001574 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157a:	463b      	mov	r3, r7
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <MX_TIM7_Init+0x64>)
 8001584:	4a15      	ldr	r2, [pc, #84]	@ (80015dc <MX_TIM7_Init+0x68>)
 8001586:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <MX_TIM7_Init+0x64>)
 800158a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800158e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_TIM7_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <MX_TIM7_Init+0x64>)
 8001598:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800159c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_TIM7_Init+0x64>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015a4:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <MX_TIM7_Init+0x64>)
 80015a6:	f001 fead 	bl	8003304 <HAL_TIM_Base_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80015b0:	f7ff fd2b 	bl	800100a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_TIM7_Init+0x64>)
 80015c2:	f002 fd59 	bl	8004078 <HAL_TIMEx_MasterConfigSynchronization>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015cc:	f7ff fd1d 	bl	800100a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200001b8 	.word	0x200001b8
 80015dc:	40001400 	.word	0x40001400

080015e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015f0:	d10d      	bne.n	800160e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b09      	ldr	r3, [pc, #36]	@ (800161c <HAL_TIM_PWM_MspInit+0x3c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	4a08      	ldr	r2, [pc, #32]	@ (800161c <HAL_TIM_PWM_MspInit+0x3c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6413      	str	r3, [r2, #64]	@ 0x40
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_TIM_PWM_MspInit+0x3c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800

08001620 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	@ 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a1d      	ldr	r2, [pc, #116]	@ (80016b4 <HAL_TIM_Encoder_MspInit+0x94>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d133      	bne.n	80016aa <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	4a1b      	ldr	r2, [pc, #108]	@ (80016b8 <HAL_TIM_Encoder_MspInit+0x98>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6413      	str	r3, [r2, #64]	@ 0x40
 8001652:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC2_CH2_Pin|ENC2_CH2B7_Pin;
 800167a:	23c0      	movs	r3, #192	@ 0xc0
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800168a:	2302      	movs	r3, #2
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4809      	ldr	r0, [pc, #36]	@ (80016bc <HAL_TIM_Encoder_MspInit+0x9c>)
 8001696:	f000 fbf5 	bl	8001e84 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	201e      	movs	r0, #30
 80016a0:	f000 fbb9 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016a4:	201e      	movs	r0, #30
 80016a6:	f000 fbd2 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	@ 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40000800 	.word	0x40000800
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020400 	.word	0x40020400

080016c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001740 <HAL_TIM_Base_MspInit+0x80>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d116      	bne.n	8001700 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <HAL_TIM_Base_MspInit+0x84>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a1a      	ldr	r2, [pc, #104]	@ (8001744 <HAL_TIM_Base_MspInit+0x84>)
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_TIM_Base_MspInit+0x84>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2036      	movs	r0, #54	@ 0x36
 80016f4:	f000 fb8f 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016f8:	2036      	movs	r0, #54	@ 0x36
 80016fa:	f000 fba8 	bl	8001e4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80016fe:	e01a      	b.n	8001736 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a10      	ldr	r2, [pc, #64]	@ (8001748 <HAL_TIM_Base_MspInit+0x88>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d115      	bne.n	8001736 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <HAL_TIM_Base_MspInit+0x84>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	4a0c      	ldr	r2, [pc, #48]	@ (8001744 <HAL_TIM_Base_MspInit+0x84>)
 8001714:	f043 0320 	orr.w	r3, r3, #32
 8001718:	6413      	str	r3, [r2, #64]	@ 0x40
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_TIM_Base_MspInit+0x84>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2037      	movs	r0, #55	@ 0x37
 800172c:	f000 fb73 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001730:	2037      	movs	r0, #55	@ 0x37
 8001732:	f000 fb8c 	bl	8001e4e <HAL_NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40001000 	.word	0x40001000
 8001744:	40023800 	.word	0x40023800
 8001748:	40001400 	.word	0x40001400

0800174c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800176c:	d11d      	bne.n	80017aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <HAL_TIM_MspPostInit+0x68>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a0f      	ldr	r2, [pc, #60]	@ (80017b4 <HAL_TIM_MspPostInit+0x68>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <HAL_TIM_MspPostInit+0x68>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M2_PUL_Pin;
 800178a:	2302      	movs	r3, #2
 800178c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800179a:	2301      	movs	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M2_PUL_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	4804      	ldr	r0, [pc, #16]	@ (80017b8 <HAL_TIM_MspPostInit+0x6c>)
 80017a6:	f000 fb6d 	bl	8001e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000

080017bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <MX_USART2_UART_Init+0x50>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017f4:	f002 fcd0 	bl	8004198 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017fe:	f7ff fc04 	bl	800100a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000200 	.word	0x20000200
 800180c:	40004400 	.word	0x40004400

08001810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a19      	ldr	r2, [pc, #100]	@ (8001894 <HAL_UART_MspInit+0x84>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d12b      	bne.n	800188a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <HAL_UART_MspInit+0x88>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	4a17      	ldr	r2, [pc, #92]	@ (8001898 <HAL_UART_MspInit+0x88>)
 800183c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001840:	6413      	str	r3, [r2, #64]	@ 0x40
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <HAL_UART_MspInit+0x88>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_UART_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a10      	ldr	r2, [pc, #64]	@ (8001898 <HAL_UART_MspInit+0x88>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <HAL_UART_MspInit+0x88>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800186a:	230c      	movs	r3, #12
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800187a:	2307      	movs	r3, #7
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	@ (800189c <HAL_UART_MspInit+0x8c>)
 8001886:	f000 fafd 	bl	8001e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	@ 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40004400 	.word	0x40004400
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000

080018a0 <MAX72_init>:
    {'~', {0b00000, 0b00000, 0b00000, 0b01001, 0b10110, 0b00000, 0b00000, 0b00000}},
};


void MAX72_init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
    uint8_t txBuf[8];
    for (uint8_t cmd=0; cmd<5; cmd++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	e034      	b.n	8001916 <MAX72_init+0x76>
        // riempi txBuf con 4 volte InitCommands[cmd]
        for (uint8_t dev=0; dev<4; dev++) {
 80018ac:	2300      	movs	r3, #0
 80018ae:	73bb      	strb	r3, [r7, #14]
 80018b0:	e01a      	b.n	80018e8 <MAX72_init+0x48>
            txBuf[dev*2]   = InitCommands[cmd][0];
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	491b      	ldr	r1, [pc, #108]	@ (8001928 <MAX72_init+0x88>)
 80018ba:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 80018be:	3310      	adds	r3, #16
 80018c0:	443b      	add	r3, r7
 80018c2:	f803 2c0c 	strb.w	r2, [r3, #-12]
            txBuf[dev*2+1] = InitCommands[cmd][1];
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	7bba      	ldrb	r2, [r7, #14]
 80018ca:	0052      	lsls	r2, r2, #1
 80018cc:	3201      	adds	r2, #1
 80018ce:	4916      	ldr	r1, [pc, #88]	@ (8001928 <MAX72_init+0x88>)
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	440b      	add	r3, r1
 80018d4:	7859      	ldrb	r1, [r3, #1]
 80018d6:	f102 0310 	add.w	r3, r2, #16
 80018da:	443b      	add	r3, r7
 80018dc:	460a      	mov	r2, r1
 80018de:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (uint8_t dev=0; dev<4; dev++) {
 80018e2:	7bbb      	ldrb	r3, [r7, #14]
 80018e4:	3301      	adds	r3, #1
 80018e6:	73bb      	strb	r3, [r7, #14]
 80018e8:	7bbb      	ldrb	r3, [r7, #14]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d9e1      	bls.n	80018b2 <MAX72_init+0x12>
        }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // CS
 80018ee:	2200      	movs	r2, #0
 80018f0:	2110      	movs	r1, #16
 80018f2:	480e      	ldr	r0, [pc, #56]	@ (800192c <MAX72_init+0x8c>)
 80018f4:	f000 fc5a 	bl	80021ac <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, txBuf, sizeof(txBuf), HAL_MAX_DELAY);
 80018f8:	1d39      	adds	r1, r7, #4
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018fe:	2208      	movs	r2, #8
 8001900:	480b      	ldr	r0, [pc, #44]	@ (8001930 <MAX72_init+0x90>)
 8001902:	f001 fade 	bl	8002ec2 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // CS
 8001906:	2201      	movs	r2, #1
 8001908:	2110      	movs	r1, #16
 800190a:	4808      	ldr	r0, [pc, #32]	@ (800192c <MAX72_init+0x8c>)
 800190c:	f000 fc4e 	bl	80021ac <HAL_GPIO_WritePin>
    for (uint8_t cmd=0; cmd<5; cmd++) {
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	3301      	adds	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	2b04      	cmp	r3, #4
 800191a:	d9c7      	bls.n	80018ac <MAX72_init+0xc>
    }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	08005678 	.word	0x08005678
 800192c:	40020400 	.word	0x40020400
 8001930:	20000084 	.word	0x20000084

08001934 <update_direction>:
#define DCF 0.00076699 // Degree Conversion Factor	2*pi/PPR		PPR=CPR*RES		2048*4=8192
#define WHEEL_RADIUS 0.0625 // meters

float SAMPLING_PERIOD; // seconds

static void update_direction(encoder_t *encoder){
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	encoder->direction = (encoder->tim->CR1 & TIM_CR1_DIR_Msk) >> TIM_CR1_DIR_Pos;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	b2da      	uxtb	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	701a      	strb	r2, [r3, #0]
	return;
 8001950:	bf00      	nop
}
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	0000      	movs	r0, r0
	...

08001960 <update_displacement>:

static void update_displacement(encoder_t *encoder){
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	int delta_CNT = (int)encoder->tim->CNT - (int)encoder->old_CNT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	461a      	mov	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	60fb      	str	r3, [r7, #12]
	if (abs(delta_CNT) > 7000) {
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	bfb8      	it	lt
 800197e:	425b      	neglt	r3, r3
 8001980:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001984:	4293      	cmp	r3, r2
 8001986:	dd09      	ble.n	800199c <update_displacement+0x3c>
		delta_CNT = encoder->tim->CNT + encoder->old_CNT - 8190;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	4413      	add	r3, r2
 8001994:	f5a3 53ff 	sub.w	r3, r3, #8160	@ 0x1fe0
 8001998:	3b1e      	subs	r3, #30
 800199a:	60fb      	str	r3, [r7, #12]
	}
	encoder->displacement = (float)delta_CNT * DCF * WHEEL_RADIUS;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a6:	ee17 0a90 	vmov	r0, s15
 80019aa:	f7fe ff0f 	bl	80007cc <__aeabi_f2d>
 80019ae:	a311      	add	r3, pc, #68	@ (adr r3, 80019f4 <update_displacement+0x94>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	f7fe fc7c 	bl	80002b0 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <update_displacement+0x90>)
 80019c6:	f7fe fc73 	bl	80002b0 <__aeabi_dmul>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7fe ff53 	bl	800087c <__aeabi_d2f>
 80019d6:	4602      	mov	r2, r0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	605a      	str	r2, [r3, #4]
	encoder->old_CNT = encoder->tim->CNT;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	609a      	str	r2, [r3, #8]
	return;
 80019e6:	bf00      	nop
}
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	3fb00000 	.word	0x3fb00000
 80019f4:	7bb1a72c 	.word	0x7bb1a72c
 80019f8:	3f4921fa 	.word	0x3f4921fa

080019fc <compute_speed>:

static void compute_speed(encoder_t *encoder){
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	encoder->speed = encoder->displacement / SAMPLING_PERIOD;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a0a:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <compute_speed+0x2c>)
 8001a0c:	ed93 7a00 	vldr	s14, [r3]
 8001a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000248 	.word	0x20000248

08001a2c <update_data>:

void update_data(encoder_t *encoder){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	update_direction(encoder);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff7d 	bl	8001934 <update_direction>
	update_displacement(encoder);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff90 	bl	8001960 <update_displacement>
	compute_speed(encoder);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffdb 	bl	80019fc <compute_speed>
	return;
 8001a46:	bf00      	nop
}
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <encoder_init>:

// em_tim : encoder mode timer | s_tim : sampling timer
void encoder_init(encoder_t *encoder, TIM_HandleTypeDef *em_tim, TIM_HandleTypeDef *s_tim){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	ed2d 8b02 	vpush	{d8}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	encoder->tim = em_tim->Instance;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	611a      	str	r2, [r3, #16]
	encoder->tim->CNT = 4096;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a70:	625a      	str	r2, [r3, #36]	@ 0x24

	SAMPLING_PERIOD = (float)(1+s_tim->Instance->ARR)*(1+s_tim->Instance->PSC)/HAL_RCC_GetHCLKFreq();
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a78:	3301      	adds	r3, #1
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a88:	3301      	adds	r3, #1
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a92:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001a96:	f000 fc89 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 8001a9a:	ee07 0a90 	vmov	s15, r0
 8001a9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aa2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001aa6:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <encoder_init+0x68>)
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
}
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	ecbd 8b02 	vpop	{d8}
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000248 	.word	0x20000248

08001abc <Robot_init>:
#include "tim.h"

encoder_t encoder2;
stepper_t stepper2;

void Robot_init(){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	encoder_init(&encoder2,&htim4,&htim7);
 8001ac0:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <Robot_init+0x18>)
 8001ac2:	4905      	ldr	r1, [pc, #20]	@ (8001ad8 <Robot_init+0x1c>)
 8001ac4:	4805      	ldr	r0, [pc, #20]	@ (8001adc <Robot_init+0x20>)
 8001ac6:	f7ff ffc3 	bl	8001a50 <encoder_init>

	MAX72_init();										// Display Init
 8001aca:	f7ff fee9 	bl	80018a0 <MAX72_init>
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200001b8 	.word	0x200001b8
 8001ad8:	20000128 	.word	0x20000128
 8001adc:	2000024c 	.word	0x2000024c

08001ae0 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ae4:	f7ff fc52 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae8:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aea:	490d      	ldr	r1, [pc, #52]	@ (8001b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b00:	4c0a      	ldr	r4, [pc, #40]	@ (8001b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f002 ff47 	bl	80049a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b12:	f7ff f995 	bl	8000e40 <main>
  bx  lr    
 8001b16:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b24:	080056c8 	.word	0x080056c8
  ldr r2, =_sbss
 8001b28:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b2c:	200003b0 	.word	0x200003b0

08001b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC_IRQHandler>
	...

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b38:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <HAL_Init+0x40>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <HAL_Init+0x40>)
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	@ (8001b74 <HAL_Init+0x40>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 f94f 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f000 f808 	bl	8001b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b68:	f7ff faf6 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00

08001b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_InitTick+0x54>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <HAL_InitTick+0x58>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f967 	bl	8001e6a <HAL_SYSTICK_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00e      	b.n	8001bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	d80a      	bhi.n	8001bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bb4:	f000 f92f 	bl	8001e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb8:	4a06      	ldr	r2, [pc, #24]	@ (8001bd4 <HAL_InitTick+0x5c>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000008 	.word	0x20000008
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_IncTick+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_IncTick+0x24>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <HAL_IncTick+0x24>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	20000260 	.word	0x20000260

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000260 	.word	0x20000260

08001c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff ffee 	bl	8001c00 <HAL_GetTick>
 8001c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c30:	d005      	beq.n	8001c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <HAL_Delay+0x44>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c3e:	bf00      	nop
 8001c40:	f7ff ffde 	bl	8001c00 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d8f7      	bhi.n	8001c40 <HAL_Delay+0x28>
  {
  }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000008 	.word	0x20000008

08001c60 <__NVIC_SetPriorityGrouping>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4907      	ldr	r1, [pc, #28]	@ (8001cfc <__NVIC_EnableIRQ+0x38>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	@ (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	@ (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	@ 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <SysTick_Config>:
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001de0:	f7ff ff8e 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff29 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff3e 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff8e 	bl	8001d54 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5d 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff31 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffa2 	bl	8001dbc <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	@ 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e165      	b.n	800216c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	f040 8154 	bne.w	8002166 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d005      	beq.n	8001ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d130      	bne.n	8001f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 0201 	and.w	r2, r3, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d017      	beq.n	8001f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d123      	bne.n	8001fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	69b9      	ldr	r1, [r7, #24]
 8001fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80ae 	beq.w	8002166 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b5d      	ldr	r3, [pc, #372]	@ (8002184 <HAL_GPIO_Init+0x300>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	4a5c      	ldr	r2, [pc, #368]	@ (8002184 <HAL_GPIO_Init+0x300>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002018:	6453      	str	r3, [r2, #68]	@ 0x44
 800201a:	4b5a      	ldr	r3, [pc, #360]	@ (8002184 <HAL_GPIO_Init+0x300>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002026:	4a58      	ldr	r2, [pc, #352]	@ (8002188 <HAL_GPIO_Init+0x304>)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	220f      	movs	r2, #15
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4f      	ldr	r2, [pc, #316]	@ (800218c <HAL_GPIO_Init+0x308>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d025      	beq.n	800209e <HAL_GPIO_Init+0x21a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4e      	ldr	r2, [pc, #312]	@ (8002190 <HAL_GPIO_Init+0x30c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01f      	beq.n	800209a <HAL_GPIO_Init+0x216>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4d      	ldr	r2, [pc, #308]	@ (8002194 <HAL_GPIO_Init+0x310>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d019      	beq.n	8002096 <HAL_GPIO_Init+0x212>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4c      	ldr	r2, [pc, #304]	@ (8002198 <HAL_GPIO_Init+0x314>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0x20e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4b      	ldr	r2, [pc, #300]	@ (800219c <HAL_GPIO_Init+0x318>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00d      	beq.n	800208e <HAL_GPIO_Init+0x20a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4a      	ldr	r2, [pc, #296]	@ (80021a0 <HAL_GPIO_Init+0x31c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <HAL_GPIO_Init+0x206>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a49      	ldr	r2, [pc, #292]	@ (80021a4 <HAL_GPIO_Init+0x320>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_GPIO_Init+0x202>
 8002082:	2306      	movs	r3, #6
 8002084:	e00c      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 8002086:	2307      	movs	r3, #7
 8002088:	e00a      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 800208a:	2305      	movs	r3, #5
 800208c:	e008      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 800208e:	2304      	movs	r3, #4
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 8002092:	2303      	movs	r3, #3
 8002094:	e004      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 8002096:	2302      	movs	r3, #2
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x21c>
 800209e:	2300      	movs	r3, #0
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f002 0203 	and.w	r2, r2, #3
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	4093      	lsls	r3, r2
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b0:	4935      	ldr	r1, [pc, #212]	@ (8002188 <HAL_GPIO_Init+0x304>)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020be:	4b3a      	ldr	r3, [pc, #232]	@ (80021a8 <HAL_GPIO_Init+0x324>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e2:	4a31      	ldr	r2, [pc, #196]	@ (80021a8 <HAL_GPIO_Init+0x324>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e8:	4b2f      	ldr	r3, [pc, #188]	@ (80021a8 <HAL_GPIO_Init+0x324>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800210c:	4a26      	ldr	r2, [pc, #152]	@ (80021a8 <HAL_GPIO_Init+0x324>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002112:	4b25      	ldr	r3, [pc, #148]	@ (80021a8 <HAL_GPIO_Init+0x324>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002136:	4a1c      	ldr	r2, [pc, #112]	@ (80021a8 <HAL_GPIO_Init+0x324>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213c:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <HAL_GPIO_Init+0x324>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002160:	4a11      	ldr	r2, [pc, #68]	@ (80021a8 <HAL_GPIO_Init+0x324>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	f67f ae96 	bls.w	8001ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3724      	adds	r7, #36	@ 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40013800 	.word	0x40013800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40020800 	.word	0x40020800
 8002198:	40020c00 	.word	0x40020c00
 800219c:	40021000 	.word	0x40021000
 80021a0:	40021400 	.word	0x40021400
 80021a4:	40021800 	.word	0x40021800
 80021a8:	40013c00 	.word	0x40013c00

080021ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
 80021b8:	4613      	mov	r3, r2
 80021ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021bc:	787b      	ldrb	r3, [r7, #1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c8:	e003      	b.n	80021d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	041a      	lsls	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	619a      	str	r2, [r3, #24]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0cc      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b68      	ldr	r3, [pc, #416]	@ (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d90c      	bls.n	800221c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b65      	ldr	r3, [pc, #404]	@ (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b63      	ldr	r3, [pc, #396]	@ (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0b8      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002234:	4b59      	ldr	r3, [pc, #356]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a58      	ldr	r2, [pc, #352]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800223e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800224c:	4b53      	ldr	r3, [pc, #332]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a52      	ldr	r2, [pc, #328]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b50      	ldr	r3, [pc, #320]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	494d      	ldr	r1, [pc, #308]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d044      	beq.n	8002300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	4b47      	ldr	r3, [pc, #284]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d119      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e07f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d003      	beq.n	800229e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	2b03      	cmp	r3, #3
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229e:	4b3f      	ldr	r3, [pc, #252]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ae:	4b3b      	ldr	r3, [pc, #236]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e067      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022be:	4b37      	ldr	r3, [pc, #220]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4934      	ldr	r1, [pc, #208]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d0:	f7ff fc96 	bl	8001c00 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7ff fc92 	bl	8001c00 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e04f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	4b2b      	ldr	r3, [pc, #172]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 020c 	and.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1eb      	bne.n	80022d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002300:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d20c      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b22      	ldr	r3, [pc, #136]	@ (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b20      	ldr	r3, [pc, #128]	@ (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e032      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002334:	4b19      	ldr	r3, [pc, #100]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4916      	ldr	r1, [pc, #88]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002352:	4b12      	ldr	r3, [pc, #72]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	490e      	ldr	r1, [pc, #56]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002366:	f000 f855 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 800236a:	4602      	mov	r2, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	490a      	ldr	r1, [pc, #40]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	5ccb      	ldrb	r3, [r1, r3]
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	4a09      	ldr	r2, [pc, #36]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002382:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fbf6 	bl	8001b78 <HAL_InitTick>

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023c00 	.word	0x40023c00
 800239c:	40023800 	.word	0x40023800
 80023a0:	08005660 	.word	0x08005660
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000004 	.word	0x20000004

080023ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000000 	.word	0x20000000

080023c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023c8:	f7ff fff0 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0a9b      	lsrs	r3, r3, #10
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4903      	ldr	r1, [pc, #12]	@ (80023e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	08005670 	.word	0x08005670

080023ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023f0:	f7ff ffdc 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b05      	ldr	r3, [pc, #20]	@ (800240c <HAL_RCC_GetPCLK2Freq+0x20>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0b5b      	lsrs	r3, r3, #13
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4903      	ldr	r1, [pc, #12]	@ (8002410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40023800 	.word	0x40023800
 8002410:	08005670 	.word	0x08005670

08002414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002418:	b0ae      	sub	sp, #184	@ 0xb8
 800241a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800243a:	4bcb      	ldr	r3, [pc, #812]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x354>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b0c      	cmp	r3, #12
 8002444:	f200 8206 	bhi.w	8002854 <HAL_RCC_GetSysClockFreq+0x440>
 8002448:	a201      	add	r2, pc, #4	@ (adr r2, 8002450 <HAL_RCC_GetSysClockFreq+0x3c>)
 800244a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244e:	bf00      	nop
 8002450:	08002485 	.word	0x08002485
 8002454:	08002855 	.word	0x08002855
 8002458:	08002855 	.word	0x08002855
 800245c:	08002855 	.word	0x08002855
 8002460:	0800248d 	.word	0x0800248d
 8002464:	08002855 	.word	0x08002855
 8002468:	08002855 	.word	0x08002855
 800246c:	08002855 	.word	0x08002855
 8002470:	08002495 	.word	0x08002495
 8002474:	08002855 	.word	0x08002855
 8002478:	08002855 	.word	0x08002855
 800247c:	08002855 	.word	0x08002855
 8002480:	08002685 	.word	0x08002685
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002484:	4bb9      	ldr	r3, [pc, #740]	@ (800276c <HAL_RCC_GetSysClockFreq+0x358>)
 8002486:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800248a:	e1e7      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800248c:	4bb8      	ldr	r3, [pc, #736]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x35c>)
 800248e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002492:	e1e3      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002494:	4bb4      	ldr	r3, [pc, #720]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x354>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800249c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a0:	4bb1      	ldr	r3, [pc, #708]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x354>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d071      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ac:	4bae      	ldr	r3, [pc, #696]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	099b      	lsrs	r3, r3, #6
 80024b2:	2200      	movs	r2, #0
 80024b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80024bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80024ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80024d2:	4622      	mov	r2, r4
 80024d4:	462b      	mov	r3, r5
 80024d6:	f04f 0000 	mov.w	r0, #0
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	0159      	lsls	r1, r3, #5
 80024e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e4:	0150      	lsls	r0, r2, #5
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4621      	mov	r1, r4
 80024ec:	1a51      	subs	r1, r2, r1
 80024ee:	6439      	str	r1, [r7, #64]	@ 0x40
 80024f0:	4629      	mov	r1, r5
 80024f2:	eb63 0301 	sbc.w	r3, r3, r1
 80024f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002504:	4649      	mov	r1, r9
 8002506:	018b      	lsls	r3, r1, #6
 8002508:	4641      	mov	r1, r8
 800250a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800250e:	4641      	mov	r1, r8
 8002510:	018a      	lsls	r2, r1, #6
 8002512:	4641      	mov	r1, r8
 8002514:	1a51      	subs	r1, r2, r1
 8002516:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002518:	4649      	mov	r1, r9
 800251a:	eb63 0301 	sbc.w	r3, r3, r1
 800251e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800252c:	4649      	mov	r1, r9
 800252e:	00cb      	lsls	r3, r1, #3
 8002530:	4641      	mov	r1, r8
 8002532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002536:	4641      	mov	r1, r8
 8002538:	00ca      	lsls	r2, r1, #3
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	4603      	mov	r3, r0
 8002540:	4622      	mov	r2, r4
 8002542:	189b      	adds	r3, r3, r2
 8002544:	633b      	str	r3, [r7, #48]	@ 0x30
 8002546:	462b      	mov	r3, r5
 8002548:	460a      	mov	r2, r1
 800254a:	eb42 0303 	adc.w	r3, r2, r3
 800254e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800255c:	4629      	mov	r1, r5
 800255e:	024b      	lsls	r3, r1, #9
 8002560:	4621      	mov	r1, r4
 8002562:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002566:	4621      	mov	r1, r4
 8002568:	024a      	lsls	r2, r1, #9
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002572:	2200      	movs	r2, #0
 8002574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002578:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800257c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002580:	f7fe f9cc 	bl	800091c <__aeabi_uldivmod>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4613      	mov	r3, r2
 800258a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800258e:	e067      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002590:	4b75      	ldr	r3, [pc, #468]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x354>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	2200      	movs	r2, #0
 8002598:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800259c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80025a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025aa:	2300      	movs	r3, #0
 80025ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80025b2:	4622      	mov	r2, r4
 80025b4:	462b      	mov	r3, r5
 80025b6:	f04f 0000 	mov.w	r0, #0
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	0159      	lsls	r1, r3, #5
 80025c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c4:	0150      	lsls	r0, r2, #5
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4621      	mov	r1, r4
 80025cc:	1a51      	subs	r1, r2, r1
 80025ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80025d0:	4629      	mov	r1, r5
 80025d2:	eb63 0301 	sbc.w	r3, r3, r1
 80025d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80025e4:	4649      	mov	r1, r9
 80025e6:	018b      	lsls	r3, r1, #6
 80025e8:	4641      	mov	r1, r8
 80025ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ee:	4641      	mov	r1, r8
 80025f0:	018a      	lsls	r2, r1, #6
 80025f2:	4641      	mov	r1, r8
 80025f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80025f8:	4649      	mov	r1, r9
 80025fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800260a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800260e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002612:	4692      	mov	sl, r2
 8002614:	469b      	mov	fp, r3
 8002616:	4623      	mov	r3, r4
 8002618:	eb1a 0303 	adds.w	r3, sl, r3
 800261c:	623b      	str	r3, [r7, #32]
 800261e:	462b      	mov	r3, r5
 8002620:	eb4b 0303 	adc.w	r3, fp, r3
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002632:	4629      	mov	r1, r5
 8002634:	028b      	lsls	r3, r1, #10
 8002636:	4621      	mov	r1, r4
 8002638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800263c:	4621      	mov	r1, r4
 800263e:	028a      	lsls	r2, r1, #10
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002648:	2200      	movs	r2, #0
 800264a:	673b      	str	r3, [r7, #112]	@ 0x70
 800264c:	677a      	str	r2, [r7, #116]	@ 0x74
 800264e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002652:	f7fe f963 	bl	800091c <__aeabi_uldivmod>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4613      	mov	r3, r2
 800265c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002660:	4b41      	ldr	r3, [pc, #260]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x354>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	3301      	adds	r3, #1
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002682:	e0eb      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002684:	4b38      	ldr	r3, [pc, #224]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x354>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800268c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002690:	4b35      	ldr	r3, [pc, #212]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x354>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d06b      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269c:	4b32      	ldr	r3, [pc, #200]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x354>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	099b      	lsrs	r3, r3, #6
 80026a2:	2200      	movs	r2, #0
 80026a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80026b0:	2300      	movs	r3, #0
 80026b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80026b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80026b8:	4622      	mov	r2, r4
 80026ba:	462b      	mov	r3, r5
 80026bc:	f04f 0000 	mov.w	r0, #0
 80026c0:	f04f 0100 	mov.w	r1, #0
 80026c4:	0159      	lsls	r1, r3, #5
 80026c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ca:	0150      	lsls	r0, r2, #5
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4621      	mov	r1, r4
 80026d2:	1a51      	subs	r1, r2, r1
 80026d4:	61b9      	str	r1, [r7, #24]
 80026d6:	4629      	mov	r1, r5
 80026d8:	eb63 0301 	sbc.w	r3, r3, r1
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026ea:	4659      	mov	r1, fp
 80026ec:	018b      	lsls	r3, r1, #6
 80026ee:	4651      	mov	r1, sl
 80026f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026f4:	4651      	mov	r1, sl
 80026f6:	018a      	lsls	r2, r1, #6
 80026f8:	4651      	mov	r1, sl
 80026fa:	ebb2 0801 	subs.w	r8, r2, r1
 80026fe:	4659      	mov	r1, fp
 8002700:	eb63 0901 	sbc.w	r9, r3, r1
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002710:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002714:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002718:	4690      	mov	r8, r2
 800271a:	4699      	mov	r9, r3
 800271c:	4623      	mov	r3, r4
 800271e:	eb18 0303 	adds.w	r3, r8, r3
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	462b      	mov	r3, r5
 8002726:	eb49 0303 	adc.w	r3, r9, r3
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002738:	4629      	mov	r1, r5
 800273a:	024b      	lsls	r3, r1, #9
 800273c:	4621      	mov	r1, r4
 800273e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002742:	4621      	mov	r1, r4
 8002744:	024a      	lsls	r2, r1, #9
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800274e:	2200      	movs	r2, #0
 8002750:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002752:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002754:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002758:	f7fe f8e0 	bl	800091c <__aeabi_uldivmod>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4613      	mov	r3, r2
 8002762:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002766:	e065      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x420>
 8002768:	40023800 	.word	0x40023800
 800276c:	00f42400 	.word	0x00f42400
 8002770:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002774:	4b3d      	ldr	r3, [pc, #244]	@ (800286c <HAL_RCC_GetSysClockFreq+0x458>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	2200      	movs	r2, #0
 800277c:	4618      	mov	r0, r3
 800277e:	4611      	mov	r1, r2
 8002780:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002784:	653b      	str	r3, [r7, #80]	@ 0x50
 8002786:	2300      	movs	r3, #0
 8002788:	657b      	str	r3, [r7, #84]	@ 0x54
 800278a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800278e:	4642      	mov	r2, r8
 8002790:	464b      	mov	r3, r9
 8002792:	f04f 0000 	mov.w	r0, #0
 8002796:	f04f 0100 	mov.w	r1, #0
 800279a:	0159      	lsls	r1, r3, #5
 800279c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a0:	0150      	lsls	r0, r2, #5
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4641      	mov	r1, r8
 80027a8:	1a51      	subs	r1, r2, r1
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	4649      	mov	r1, r9
 80027ae:	eb63 0301 	sbc.w	r3, r3, r1
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80027c0:	4659      	mov	r1, fp
 80027c2:	018b      	lsls	r3, r1, #6
 80027c4:	4651      	mov	r1, sl
 80027c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ca:	4651      	mov	r1, sl
 80027cc:	018a      	lsls	r2, r1, #6
 80027ce:	4651      	mov	r1, sl
 80027d0:	1a54      	subs	r4, r2, r1
 80027d2:	4659      	mov	r1, fp
 80027d4:	eb63 0501 	sbc.w	r5, r3, r1
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	00eb      	lsls	r3, r5, #3
 80027e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027e6:	00e2      	lsls	r2, r4, #3
 80027e8:	4614      	mov	r4, r2
 80027ea:	461d      	mov	r5, r3
 80027ec:	4643      	mov	r3, r8
 80027ee:	18e3      	adds	r3, r4, r3
 80027f0:	603b      	str	r3, [r7, #0]
 80027f2:	464b      	mov	r3, r9
 80027f4:	eb45 0303 	adc.w	r3, r5, r3
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002806:	4629      	mov	r1, r5
 8002808:	028b      	lsls	r3, r1, #10
 800280a:	4621      	mov	r1, r4
 800280c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002810:	4621      	mov	r1, r4
 8002812:	028a      	lsls	r2, r1, #10
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
 8002818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800281c:	2200      	movs	r2, #0
 800281e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002820:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002822:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002826:	f7fe f879 	bl	800091c <__aeabi_uldivmod>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4613      	mov	r3, r2
 8002830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002834:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <HAL_RCC_GetSysClockFreq+0x458>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	0f1b      	lsrs	r3, r3, #28
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002852:	e003      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002856:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800285a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002860:	4618      	mov	r0, r3
 8002862:	37b8      	adds	r7, #184	@ 0xb8
 8002864:	46bd      	mov	sp, r7
 8002866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	00f42400 	.word	0x00f42400

08002874 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e28d      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8083 	beq.w	800299a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002894:	4b94      	ldr	r3, [pc, #592]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b04      	cmp	r3, #4
 800289e:	d019      	beq.n	80028d4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028a0:	4b91      	ldr	r3, [pc, #580]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030c 	and.w	r3, r3, #12
        || \
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028ac:	4b8e      	ldr	r3, [pc, #568]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028b8:	d00c      	beq.n	80028d4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ba:	4b8b      	ldr	r3, [pc, #556]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d112      	bne.n	80028ec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c6:	4b88      	ldr	r3, [pc, #544]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028d2:	d10b      	bne.n	80028ec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d4:	4b84      	ldr	r3, [pc, #528]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d05b      	beq.n	8002998 <HAL_RCC_OscConfig+0x124>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d157      	bne.n	8002998 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e25a      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f4:	d106      	bne.n	8002904 <HAL_RCC_OscConfig+0x90>
 80028f6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a7b      	ldr	r2, [pc, #492]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e01d      	b.n	8002940 <HAL_RCC_OscConfig+0xcc>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0xb4>
 800290e:	4b76      	ldr	r3, [pc, #472]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a75      	ldr	r2, [pc, #468]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002914:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b73      	ldr	r3, [pc, #460]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a72      	ldr	r2, [pc, #456]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e00b      	b.n	8002940 <HAL_RCC_OscConfig+0xcc>
 8002928:	4b6f      	ldr	r3, [pc, #444]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 800292e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b6c      	ldr	r3, [pc, #432]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a6b      	ldr	r2, [pc, #428]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 800293a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800293e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7ff f95a 	bl	8001c00 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7ff f956 	bl	8001c00 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e21f      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b61      	ldr	r3, [pc, #388]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0xdc>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7ff f946 	bl	8001c00 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff f942 	bl	8001c00 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	@ 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e20b      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298a:	4b57      	ldr	r3, [pc, #348]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x104>
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d06f      	beq.n	8002a86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029a6:	4b50      	ldr	r3, [pc, #320]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d017      	beq.n	80029e2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80029b2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
        || \
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d105      	bne.n	80029ca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80029be:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ca:	4b47      	ldr	r3, [pc, #284]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d11c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d6:	4b44      	ldr	r3, [pc, #272]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d116      	bne.n	8002a10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	4b41      	ldr	r3, [pc, #260]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_RCC_OscConfig+0x186>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1d3      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4937      	ldr	r1, [pc, #220]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	e03a      	b.n	8002a86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a18:	4b34      	ldr	r3, [pc, #208]	@ (8002aec <HAL_RCC_OscConfig+0x278>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7ff f8ef 	bl	8001c00 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a26:	f7ff f8eb 	bl	8001c00 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e1b4      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a44:	4b28      	ldr	r3, [pc, #160]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4925      	ldr	r1, [pc, #148]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5a:	4b24      	ldr	r3, [pc, #144]	@ (8002aec <HAL_RCC_OscConfig+0x278>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7ff f8ce 	bl	8001c00 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a68:	f7ff f8ca 	bl	8001c00 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e193      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d036      	beq.n	8002b00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d016      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9a:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <HAL_RCC_OscConfig+0x27c>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7ff f8ae 	bl	8001c00 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7ff f8aa 	bl	8001c00 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e173      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_RCC_OscConfig+0x274>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x234>
 8002ac6:	e01b      	b.n	8002b00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac8:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <HAL_RCC_OscConfig+0x27c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ace:	f7ff f897 	bl	8001c00 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	e00e      	b.n	8002af4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7ff f893 	bl	8001c00 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d907      	bls.n	8002af4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e15c      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	42470000 	.word	0x42470000
 8002af0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	4b8a      	ldr	r3, [pc, #552]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ea      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8097 	beq.w	8002c3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b12:	4b83      	ldr	r3, [pc, #524]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10f      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	4b7f      	ldr	r3, [pc, #508]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	4a7e      	ldr	r2, [pc, #504]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	4b79      	ldr	r3, [pc, #484]	@ (8002d24 <HAL_RCC_OscConfig+0x4b0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4a:	4b76      	ldr	r3, [pc, #472]	@ (8002d24 <HAL_RCC_OscConfig+0x4b0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a75      	ldr	r2, [pc, #468]	@ (8002d24 <HAL_RCC_OscConfig+0x4b0>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b56:	f7ff f853 	bl	8001c00 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7ff f84f 	bl	8001c00 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e118      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	4b6c      	ldr	r3, [pc, #432]	@ (8002d24 <HAL_RCC_OscConfig+0x4b0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x31e>
 8002b84:	4b66      	ldr	r3, [pc, #408]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b88:	4a65      	ldr	r2, [pc, #404]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b90:	e01c      	b.n	8002bcc <HAL_RCC_OscConfig+0x358>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x340>
 8002b9a:	4b61      	ldr	r3, [pc, #388]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9e:	4a60      	ldr	r2, [pc, #384]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba6:	4b5e      	ldr	r3, [pc, #376]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002baa:	4a5d      	ldr	r2, [pc, #372]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb2:	e00b      	b.n	8002bcc <HAL_RCC_OscConfig+0x358>
 8002bb4:	4b5a      	ldr	r3, [pc, #360]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb8:	4a59      	ldr	r2, [pc, #356]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc0:	4b57      	ldr	r3, [pc, #348]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc4:	4a56      	ldr	r2, [pc, #344]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002bc6:	f023 0304 	bic.w	r3, r3, #4
 8002bca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d015      	beq.n	8002c00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7ff f814 	bl	8001c00 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7ff f810 	bl	8001c00 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0d7      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ee      	beq.n	8002bdc <HAL_RCC_OscConfig+0x368>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7fe fffe 	bl	8001c00 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fe fffa 	bl	8001c00 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0c1      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1e:	4b40      	ldr	r3, [pc, #256]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1ee      	bne.n	8002c08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c30:	4b3b      	ldr	r3, [pc, #236]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	4a3a      	ldr	r2, [pc, #232]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80ad 	beq.w	8002da0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c46:	4b36      	ldr	r3, [pc, #216]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d060      	beq.n	8002d14 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d145      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4b33      	ldr	r3, [pc, #204]	@ (8002d28 <HAL_RCC_OscConfig+0x4b4>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe ffce 	bl	8001c00 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe ffca 	bl	8001c00 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e093      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	4b29      	ldr	r3, [pc, #164]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	019b      	lsls	r3, r3, #6
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	061b      	lsls	r3, r3, #24
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb0:	071b      	lsls	r3, r3, #28
 8002cb2:	491b      	ldr	r1, [pc, #108]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d28 <HAL_RCC_OscConfig+0x4b4>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fe ff9f 	bl	8001c00 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fe ff9b 	bl	8001c00 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e064      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd8:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x452>
 8002ce4:	e05c      	b.n	8002da0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce6:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <HAL_RCC_OscConfig+0x4b4>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe ff88 	bl	8001c00 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe ff84 	bl	8001c00 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e04d      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_RCC_OscConfig+0x4ac>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x480>
 8002d12:	e045      	b.n	8002da0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e040      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40007000 	.word	0x40007000
 8002d28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dac <HAL_RCC_OscConfig+0x538>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d030      	beq.n	8002d9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d129      	bne.n	8002d9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d122      	bne.n	8002d9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d119      	bne.n	8002d9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d72:	085b      	lsrs	r3, r3, #1
 8002d74:	3b01      	subs	r3, #1
 8002d76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d10f      	bne.n	8002d9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d107      	bne.n	8002d9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800

08002db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07b      	b.n	8002eba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d108      	bne.n	8002ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dd2:	d009      	beq.n	8002de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	61da      	str	r2, [r3, #28]
 8002dda:	e005      	b.n	8002de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe f940 	bl	8001088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e6c:	ea42 0103 	orr.w	r1, r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	f003 0104 	and.w	r1, r3, #4
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	f003 0210 	and.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ea8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b088      	sub	sp, #32
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed2:	f7fe fe95 	bl	8001c00 <HAL_GetTick>
 8002ed6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d001      	beq.n	8002eec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e12a      	b.n	8003142 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_SPI_Transmit+0x36>
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e122      	b.n	8003142 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_SPI_Transmit+0x48>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e11b      	b.n	8003142 <HAL_SPI_Transmit+0x280>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2203      	movs	r2, #3
 8002f16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	88fa      	ldrh	r2, [r7, #6]
 8002f2a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f58:	d10f      	bne.n	8002f7a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f84:	2b40      	cmp	r3, #64	@ 0x40
 8002f86:	d007      	beq.n	8002f98 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fa0:	d152      	bne.n	8003048 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_SPI_Transmit+0xee>
 8002faa:	8b7b      	ldrh	r3, [r7, #26]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d145      	bne.n	800303c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	881a      	ldrh	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc0:	1c9a      	adds	r2, r3, #2
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fd4:	e032      	b.n	800303c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d112      	bne.n	800300a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe8:	881a      	ldrh	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff4:	1c9a      	adds	r2, r3, #2
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003008:	e018      	b.n	800303c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800300a:	f7fe fdf9 	bl	8001c00 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d803      	bhi.n	8003022 <HAL_SPI_Transmit+0x160>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003020:	d102      	bne.n	8003028 <HAL_SPI_Transmit+0x166>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e082      	b.n	8003142 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1c7      	bne.n	8002fd6 <HAL_SPI_Transmit+0x114>
 8003046:	e053      	b.n	80030f0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_SPI_Transmit+0x194>
 8003050:	8b7b      	ldrh	r3, [r7, #26]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d147      	bne.n	80030e6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	7812      	ldrb	r2, [r2, #0]
 8003062:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800307c:	e033      	b.n	80030e6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	d113      	bne.n	80030b4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	7812      	ldrb	r2, [r2, #0]
 8003098:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80030b2:	e018      	b.n	80030e6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030b4:	f7fe fda4 	bl	8001c00 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d803      	bhi.n	80030cc <HAL_SPI_Transmit+0x20a>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030ca:	d102      	bne.n	80030d2 <HAL_SPI_Transmit+0x210>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e02d      	b.n	8003142 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1c6      	bne.n	800307e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	6839      	ldr	r1, [r7, #0]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f8b1 	bl	800325c <SPI_EndRxTxTransaction>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003140:	2300      	movs	r3, #0
  }
}
 8003142:	4618      	mov	r0, r3
 8003144:	3720      	adds	r7, #32
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800315c:	f7fe fd50 	bl	8001c00 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	4413      	add	r3, r2
 800316a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800316c:	f7fe fd48 	bl	8001c00 <HAL_GetTick>
 8003170:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003172:	4b39      	ldr	r3, [pc, #228]	@ (8003258 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	015b      	lsls	r3, r3, #5
 8003178:	0d1b      	lsrs	r3, r3, #20
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003182:	e055      	b.n	8003230 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800318a:	d051      	beq.n	8003230 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800318c:	f7fe fd38 	bl	8001c00 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	429a      	cmp	r2, r3
 800319a:	d902      	bls.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d13d      	bne.n	800321e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031ba:	d111      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031c4:	d004      	beq.n	80031d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ce:	d107      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031e8:	d10f      	bne.n	800320a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003208:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e018      	b.n	8003250 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	e002      	b.n	8003230 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	3b01      	subs	r3, #1
 800322e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	429a      	cmp	r2, r3
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	429a      	cmp	r2, r3
 800324c:	d19a      	bne.n	8003184 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000000 	.word	0x20000000

0800325c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2201      	movs	r2, #1
 8003270:	2102      	movs	r1, #2
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7ff ff6a 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003282:	f043 0220 	orr.w	r2, r3, #32
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e032      	b.n	80032f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800328e:	4b1b      	ldr	r3, [pc, #108]	@ (80032fc <SPI_EndRxTxTransaction+0xa0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1b      	ldr	r2, [pc, #108]	@ (8003300 <SPI_EndRxTxTransaction+0xa4>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	0d5b      	lsrs	r3, r3, #21
 800329a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032ac:	d112      	bne.n	80032d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2180      	movs	r1, #128	@ 0x80
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7ff ff47 	bl	800314c <SPI_WaitFlagStateUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d016      	beq.n	80032f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e00f      	b.n	80032f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3b01      	subs	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ea:	2b80      	cmp	r3, #128	@ 0x80
 80032ec:	d0f2      	beq.n	80032d4 <SPI_EndRxTxTransaction+0x78>
 80032ee:	e000      	b.n	80032f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80032f0:	bf00      	nop
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20000000 	.word	0x20000000
 8003300:	165e9f81 	.word	0x165e9f81

08003304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e041      	b.n	800339a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fe f9c8 	bl	80016c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f000 fc1c 	bl	8003b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d001      	beq.n	80033bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e04e      	b.n	800345a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a23      	ldr	r2, [pc, #140]	@ (8003468 <HAL_TIM_Base_Start_IT+0xc4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d022      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e6:	d01d      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1f      	ldr	r2, [pc, #124]	@ (800346c <HAL_TIM_Base_Start_IT+0xc8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d018      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003470 <HAL_TIM_Base_Start_IT+0xcc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d013      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1c      	ldr	r2, [pc, #112]	@ (8003474 <HAL_TIM_Base_Start_IT+0xd0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00e      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1b      	ldr	r2, [pc, #108]	@ (8003478 <HAL_TIM_Base_Start_IT+0xd4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d009      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a19      	ldr	r2, [pc, #100]	@ (800347c <HAL_TIM_Base_Start_IT+0xd8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a18      	ldr	r2, [pc, #96]	@ (8003480 <HAL_TIM_Base_Start_IT+0xdc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d111      	bne.n	8003448 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b06      	cmp	r3, #6
 8003434:	d010      	beq.n	8003458 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003446:	e007      	b.n	8003458 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40010000 	.word	0x40010000
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800
 8003474:	40000c00 	.word	0x40000c00
 8003478:	40010400 	.word	0x40010400
 800347c:	40014000 	.word	0x40014000
 8003480:	40001800 	.word	0x40001800

08003484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e041      	b.n	800351a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fe f898 	bl	80015e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	4619      	mov	r1, r3
 80034c2:	4610      	mov	r0, r2
 80034c4:	f000 fb5c 	bl	8003b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b086      	sub	sp, #24
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e097      	b.n	8003666 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fe f868 	bl	8001620 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003566:	f023 0307 	bic.w	r3, r3, #7
 800356a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	4619      	mov	r1, r3
 8003576:	4610      	mov	r0, r2
 8003578:	f000 fb02 	bl	8003b80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a4:	f023 0303 	bic.w	r3, r3, #3
 80035a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	4313      	orrs	r3, r2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80035c2:	f023 030c 	bic.w	r3, r3, #12
 80035c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	4313      	orrs	r3, r2
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	011a      	lsls	r2, r3, #4
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	031b      	lsls	r3, r3, #12
 80035f2:	4313      	orrs	r3, r2
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003600:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003608:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	4313      	orrs	r3, r2
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800367e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003686:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800368e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003696:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d110      	bne.n	80036c0 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d102      	bne.n	80036aa <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80036a4:	7b7b      	ldrb	r3, [r7, #13]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e089      	b.n	80037c2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2202      	movs	r2, #2
 80036ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036be:	e031      	b.n	8003724 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d110      	bne.n	80036e8 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80036c6:	7bbb      	ldrb	r3, [r7, #14]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d102      	bne.n	80036d2 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80036cc:	7b3b      	ldrb	r3, [r7, #12]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e075      	b.n	80037c2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2202      	movs	r2, #2
 80036da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036e6:	e01d      	b.n	8003724 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d108      	bne.n	8003700 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80036ee:	7bbb      	ldrb	r3, [r7, #14]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036f4:	7b7b      	ldrb	r3, [r7, #13]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d102      	bne.n	8003700 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80036fa:	7b3b      	ldrb	r3, [r7, #12]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d001      	beq.n	8003704 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e05e      	b.n	80037c2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_TIM_Encoder_Start_IT+0xc4>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d010      	beq.n	8003752 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003730:	e01f      	b.n	8003772 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2201      	movs	r2, #1
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fc76 	bl	800402c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0202 	orr.w	r2, r2, #2
 800374e:	60da      	str	r2, [r3, #12]
      break;
 8003750:	e02e      	b.n	80037b0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2201      	movs	r2, #1
 8003758:	2104      	movs	r1, #4
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fc66 	bl	800402c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0204 	orr.w	r2, r2, #4
 800376e:	60da      	str	r2, [r3, #12]
      break;
 8003770:	e01e      	b.n	80037b0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2201      	movs	r2, #1
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fc56 	bl	800402c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2201      	movs	r2, #1
 8003786:	2104      	movs	r1, #4
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fc4f 	bl	800402c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0202 	orr.w	r2, r2, #2
 800379c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0204 	orr.w	r2, r2, #4
 80037ac:	60da      	str	r2, [r3, #12]
      break;
 80037ae:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01b      	beq.n	800382e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f06f 0202 	mvn.w	r2, #2
 80037fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f995 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 800381a:	e005      	b.n	8003828 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f987 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f998 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01b      	beq.n	800387a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f06f 0204 	mvn.w	r2, #4
 800384a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f96f 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 8003866:	e005      	b.n	8003874 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f961 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f972 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01b      	beq.n	80038c6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f06f 0208 	mvn.w	r2, #8
 8003896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2204      	movs	r2, #4
 800389c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f949 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 80038b2:	e005      	b.n	80038c0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f93b 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f94c 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01b      	beq.n	8003912 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f06f 0210 	mvn.w	r2, #16
 80038e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2208      	movs	r2, #8
 80038e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f923 	bl	8003b44 <HAL_TIM_IC_CaptureCallback>
 80038fe:	e005      	b.n	800390c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f915 	bl	8003b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f926 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00c      	beq.n	8003936 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f06f 0201 	mvn.w	r2, #1
 800392e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7fd fb41 	bl	8000fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00c      	beq.n	800395a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fc15 	bl	8004184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00c      	beq.n	800397e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f8f7 	bl	8003b6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00c      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f06f 0220 	mvn.w	r2, #32
 800399a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fbe7 	bl	8004170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e0ae      	b.n	8003b28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	f200 809f 	bhi.w	8003b18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039da:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003b19 	.word	0x08003b19
 80039e8:	08003b19 	.word	0x08003b19
 80039ec:	08003b19 	.word	0x08003b19
 80039f0:	08003a55 	.word	0x08003a55
 80039f4:	08003b19 	.word	0x08003b19
 80039f8:	08003b19 	.word	0x08003b19
 80039fc:	08003b19 	.word	0x08003b19
 8003a00:	08003a97 	.word	0x08003a97
 8003a04:	08003b19 	.word	0x08003b19
 8003a08:	08003b19 	.word	0x08003b19
 8003a0c:	08003b19 	.word	0x08003b19
 8003a10:	08003ad7 	.word	0x08003ad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f956 	bl	8003ccc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0208 	orr.w	r2, r2, #8
 8003a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6999      	ldr	r1, [r3, #24]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	619a      	str	r2, [r3, #24]
      break;
 8003a52:	e064      	b.n	8003b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f9a6 	bl	8003dac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6999      	ldr	r1, [r3, #24]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	021a      	lsls	r2, r3, #8
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	619a      	str	r2, [r3, #24]
      break;
 8003a94:	e043      	b.n	8003b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f9fb 	bl	8003e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0208 	orr.w	r2, r2, #8
 8003ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0204 	bic.w	r2, r2, #4
 8003ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69d9      	ldr	r1, [r3, #28]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	61da      	str	r2, [r3, #28]
      break;
 8003ad4:	e023      	b.n	8003b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fa4f 	bl	8003f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69d9      	ldr	r1, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	021a      	lsls	r2, r3, #8
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	61da      	str	r2, [r3, #28]
      break;
 8003b16:	e002      	b.n	8003b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a43      	ldr	r2, [pc, #268]	@ (8003ca0 <TIM_Base_SetConfig+0x120>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <TIM_Base_SetConfig+0x40>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b9e:	d00f      	beq.n	8003bc0 <TIM_Base_SetConfig+0x40>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a40      	ldr	r2, [pc, #256]	@ (8003ca4 <TIM_Base_SetConfig+0x124>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <TIM_Base_SetConfig+0x40>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a3f      	ldr	r2, [pc, #252]	@ (8003ca8 <TIM_Base_SetConfig+0x128>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d007      	beq.n	8003bc0 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a3e      	ldr	r2, [pc, #248]	@ (8003cac <TIM_Base_SetConfig+0x12c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d003      	beq.n	8003bc0 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3d      	ldr	r2, [pc, #244]	@ (8003cb0 <TIM_Base_SetConfig+0x130>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d108      	bne.n	8003bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a32      	ldr	r2, [pc, #200]	@ (8003ca0 <TIM_Base_SetConfig+0x120>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d02b      	beq.n	8003c32 <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be0:	d027      	beq.n	8003c32 <TIM_Base_SetConfig+0xb2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a2f      	ldr	r2, [pc, #188]	@ (8003ca4 <TIM_Base_SetConfig+0x124>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d023      	beq.n	8003c32 <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a2e      	ldr	r2, [pc, #184]	@ (8003ca8 <TIM_Base_SetConfig+0x128>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01f      	beq.n	8003c32 <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8003cac <TIM_Base_SetConfig+0x12c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01b      	beq.n	8003c32 <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8003cb0 <TIM_Base_SetConfig+0x130>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d017      	beq.n	8003c32 <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb4 <TIM_Base_SetConfig+0x134>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003cb8 <TIM_Base_SetConfig+0x138>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00f      	beq.n	8003c32 <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a29      	ldr	r2, [pc, #164]	@ (8003cbc <TIM_Base_SetConfig+0x13c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00b      	beq.n	8003c32 <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a28      	ldr	r2, [pc, #160]	@ (8003cc0 <TIM_Base_SetConfig+0x140>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d007      	beq.n	8003c32 <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a27      	ldr	r2, [pc, #156]	@ (8003cc4 <TIM_Base_SetConfig+0x144>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d003      	beq.n	8003c32 <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a26      	ldr	r2, [pc, #152]	@ (8003cc8 <TIM_Base_SetConfig+0x148>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d108      	bne.n	8003c44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a0e      	ldr	r2, [pc, #56]	@ (8003ca0 <TIM_Base_SetConfig+0x120>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_Base_SetConfig+0xf2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a10      	ldr	r2, [pc, #64]	@ (8003cb0 <TIM_Base_SetConfig+0x130>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d103      	bne.n	8003c7a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f043 0204 	orr.w	r2, r3, #4
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	601a      	str	r2, [r3, #0]
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800
 8003cac:	40000c00 	.word	0x40000c00
 8003cb0:	40010400 	.word	0x40010400
 8003cb4:	40014000 	.word	0x40014000
 8003cb8:	40014400 	.word	0x40014400
 8003cbc:	40014800 	.word	0x40014800
 8003cc0:	40001800 	.word	0x40001800
 8003cc4:	40001c00 	.word	0x40001c00
 8003cc8:	40002000 	.word	0x40002000

08003ccc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f023 0201 	bic.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 0302 	bic.w	r3, r3, #2
 8003d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a20      	ldr	r2, [pc, #128]	@ (8003da4 <TIM_OC1_SetConfig+0xd8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_OC1_SetConfig+0x64>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003da8 <TIM_OC1_SetConfig+0xdc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10c      	bne.n	8003d4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0308 	bic.w	r3, r3, #8
 8003d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a15      	ldr	r2, [pc, #84]	@ (8003da4 <TIM_OC1_SetConfig+0xd8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d003      	beq.n	8003d5a <TIM_OC1_SetConfig+0x8e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a14      	ldr	r2, [pc, #80]	@ (8003da8 <TIM_OC1_SetConfig+0xdc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d111      	bne.n	8003d7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	621a      	str	r2, [r3, #32]
}
 8003d98:	bf00      	nop
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40010400 	.word	0x40010400

08003dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f023 0210 	bic.w	r2, r3, #16
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0320 	bic.w	r3, r3, #32
 8003df6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a22      	ldr	r2, [pc, #136]	@ (8003e90 <TIM_OC2_SetConfig+0xe4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d003      	beq.n	8003e14 <TIM_OC2_SetConfig+0x68>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a21      	ldr	r2, [pc, #132]	@ (8003e94 <TIM_OC2_SetConfig+0xe8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d10d      	bne.n	8003e30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a17      	ldr	r2, [pc, #92]	@ (8003e90 <TIM_OC2_SetConfig+0xe4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d003      	beq.n	8003e40 <TIM_OC2_SetConfig+0x94>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a16      	ldr	r2, [pc, #88]	@ (8003e94 <TIM_OC2_SetConfig+0xe8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d113      	bne.n	8003e68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40010000 	.word	0x40010000
 8003e94:	40010400 	.word	0x40010400

08003e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a21      	ldr	r2, [pc, #132]	@ (8003f78 <TIM_OC3_SetConfig+0xe0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d003      	beq.n	8003efe <TIM_OC3_SetConfig+0x66>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a20      	ldr	r2, [pc, #128]	@ (8003f7c <TIM_OC3_SetConfig+0xe4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10d      	bne.n	8003f1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a16      	ldr	r2, [pc, #88]	@ (8003f78 <TIM_OC3_SetConfig+0xe0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC3_SetConfig+0x92>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a15      	ldr	r2, [pc, #84]	@ (8003f7c <TIM_OC3_SetConfig+0xe4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d113      	bne.n	8003f52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	621a      	str	r2, [r3, #32]
}
 8003f6c:	bf00      	nop
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40010400 	.word	0x40010400

08003f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	031b      	lsls	r3, r3, #12
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a12      	ldr	r2, [pc, #72]	@ (8004024 <TIM_OC4_SetConfig+0xa4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_OC4_SetConfig+0x68>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a11      	ldr	r2, [pc, #68]	@ (8004028 <TIM_OC4_SetConfig+0xa8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d109      	bne.n	8003ffc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	019b      	lsls	r3, r3, #6
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	621a      	str	r2, [r3, #32]
}
 8004016:	bf00      	nop
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40010000 	.word	0x40010000
 8004028:	40010400 	.word	0x40010400

0800402c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	2201      	movs	r2, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a1a      	ldr	r2, [r3, #32]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	43db      	mvns	r3, r3
 800404e:	401a      	ands	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a1a      	ldr	r2, [r3, #32]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	fa01 f303 	lsl.w	r3, r1, r3
 8004064:	431a      	orrs	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	621a      	str	r2, [r3, #32]
}
 800406a:	bf00      	nop
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800408c:	2302      	movs	r3, #2
 800408e:	e05a      	b.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a21      	ldr	r2, [pc, #132]	@ (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d022      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040dc:	d01d      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004158 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d018      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1b      	ldr	r2, [pc, #108]	@ (800415c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00e      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a18      	ldr	r2, [pc, #96]	@ (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d009      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a17      	ldr	r2, [pc, #92]	@ (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d004      	beq.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a15      	ldr	r2, [pc, #84]	@ (800416c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d10c      	bne.n	8004134 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	4313      	orrs	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40010000 	.word	0x40010000
 8004158:	40000400 	.word	0x40000400
 800415c:	40000800 	.word	0x40000800
 8004160:	40000c00 	.word	0x40000c00
 8004164:	40010400 	.word	0x40010400
 8004168:	40014000 	.word	0x40014000
 800416c:	40001800 	.word	0x40001800

08004170 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e042      	b.n	8004230 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd fb26 	bl	8001810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2224      	movs	r2, #36	@ 0x24
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f82b 	bl	8004238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800423c:	b0c0      	sub	sp, #256	@ 0x100
 800423e:	af00      	add	r7, sp, #0
 8004240:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	68d9      	ldr	r1, [r3, #12]
 8004256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	ea40 0301 	orr.w	r3, r0, r1
 8004260:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	431a      	orrs	r2, r3
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	431a      	orrs	r2, r3
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004290:	f021 010c 	bic.w	r1, r1, #12
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800429e:	430b      	orrs	r3, r1
 80042a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b2:	6999      	ldr	r1, [r3, #24]
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	ea40 0301 	orr.w	r3, r0, r1
 80042be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b8f      	ldr	r3, [pc, #572]	@ (8004504 <UART_SetConfig+0x2cc>)
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d005      	beq.n	80042d8 <UART_SetConfig+0xa0>
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	4b8d      	ldr	r3, [pc, #564]	@ (8004508 <UART_SetConfig+0x2d0>)
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d104      	bne.n	80042e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042d8:	f7fe f888 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 80042dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042e0:	e003      	b.n	80042ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042e2:	f7fe f86f 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 80042e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042f4:	f040 810c 	bne.w	8004510 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004302:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004306:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800430a:	4622      	mov	r2, r4
 800430c:	462b      	mov	r3, r5
 800430e:	1891      	adds	r1, r2, r2
 8004310:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004312:	415b      	adcs	r3, r3
 8004314:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004316:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800431a:	4621      	mov	r1, r4
 800431c:	eb12 0801 	adds.w	r8, r2, r1
 8004320:	4629      	mov	r1, r5
 8004322:	eb43 0901 	adc.w	r9, r3, r1
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800433a:	4690      	mov	r8, r2
 800433c:	4699      	mov	r9, r3
 800433e:	4623      	mov	r3, r4
 8004340:	eb18 0303 	adds.w	r3, r8, r3
 8004344:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004348:	462b      	mov	r3, r5
 800434a:	eb49 0303 	adc.w	r3, r9, r3
 800434e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800435e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004362:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004366:	460b      	mov	r3, r1
 8004368:	18db      	adds	r3, r3, r3
 800436a:	653b      	str	r3, [r7, #80]	@ 0x50
 800436c:	4613      	mov	r3, r2
 800436e:	eb42 0303 	adc.w	r3, r2, r3
 8004372:	657b      	str	r3, [r7, #84]	@ 0x54
 8004374:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004378:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800437c:	f7fc face 	bl	800091c <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4b61      	ldr	r3, [pc, #388]	@ (800450c <UART_SetConfig+0x2d4>)
 8004386:	fba3 2302 	umull	r2, r3, r3, r2
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	011c      	lsls	r4, r3, #4
 800438e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004392:	2200      	movs	r2, #0
 8004394:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004398:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800439c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043a0:	4642      	mov	r2, r8
 80043a2:	464b      	mov	r3, r9
 80043a4:	1891      	adds	r1, r2, r2
 80043a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043a8:	415b      	adcs	r3, r3
 80043aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043b0:	4641      	mov	r1, r8
 80043b2:	eb12 0a01 	adds.w	sl, r2, r1
 80043b6:	4649      	mov	r1, r9
 80043b8:	eb43 0b01 	adc.w	fp, r3, r1
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d0:	4692      	mov	sl, r2
 80043d2:	469b      	mov	fp, r3
 80043d4:	4643      	mov	r3, r8
 80043d6:	eb1a 0303 	adds.w	r3, sl, r3
 80043da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043de:	464b      	mov	r3, r9
 80043e0:	eb4b 0303 	adc.w	r3, fp, r3
 80043e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043fc:	460b      	mov	r3, r1
 80043fe:	18db      	adds	r3, r3, r3
 8004400:	643b      	str	r3, [r7, #64]	@ 0x40
 8004402:	4613      	mov	r3, r2
 8004404:	eb42 0303 	adc.w	r3, r2, r3
 8004408:	647b      	str	r3, [r7, #68]	@ 0x44
 800440a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800440e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004412:	f7fc fa83 	bl	800091c <__aeabi_uldivmod>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4611      	mov	r1, r2
 800441c:	4b3b      	ldr	r3, [pc, #236]	@ (800450c <UART_SetConfig+0x2d4>)
 800441e:	fba3 2301 	umull	r2, r3, r3, r1
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	2264      	movs	r2, #100	@ 0x64
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	1acb      	subs	r3, r1, r3
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004432:	4b36      	ldr	r3, [pc, #216]	@ (800450c <UART_SetConfig+0x2d4>)
 8004434:	fba3 2302 	umull	r2, r3, r3, r2
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004440:	441c      	add	r4, r3
 8004442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004446:	2200      	movs	r2, #0
 8004448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800444c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004450:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004454:	4642      	mov	r2, r8
 8004456:	464b      	mov	r3, r9
 8004458:	1891      	adds	r1, r2, r2
 800445a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800445c:	415b      	adcs	r3, r3
 800445e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004460:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004464:	4641      	mov	r1, r8
 8004466:	1851      	adds	r1, r2, r1
 8004468:	6339      	str	r1, [r7, #48]	@ 0x30
 800446a:	4649      	mov	r1, r9
 800446c:	414b      	adcs	r3, r1
 800446e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800447c:	4659      	mov	r1, fp
 800447e:	00cb      	lsls	r3, r1, #3
 8004480:	4651      	mov	r1, sl
 8004482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004486:	4651      	mov	r1, sl
 8004488:	00ca      	lsls	r2, r1, #3
 800448a:	4610      	mov	r0, r2
 800448c:	4619      	mov	r1, r3
 800448e:	4603      	mov	r3, r0
 8004490:	4642      	mov	r2, r8
 8004492:	189b      	adds	r3, r3, r2
 8004494:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004498:	464b      	mov	r3, r9
 800449a:	460a      	mov	r2, r1
 800449c:	eb42 0303 	adc.w	r3, r2, r3
 80044a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044b8:	460b      	mov	r3, r1
 80044ba:	18db      	adds	r3, r3, r3
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044be:	4613      	mov	r3, r2
 80044c0:	eb42 0303 	adc.w	r3, r2, r3
 80044c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044ce:	f7fc fa25 	bl	800091c <__aeabi_uldivmod>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4b0d      	ldr	r3, [pc, #52]	@ (800450c <UART_SetConfig+0x2d4>)
 80044d8:	fba3 1302 	umull	r1, r3, r3, r2
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	2164      	movs	r1, #100	@ 0x64
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	3332      	adds	r3, #50	@ 0x32
 80044ea:	4a08      	ldr	r2, [pc, #32]	@ (800450c <UART_SetConfig+0x2d4>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	f003 0207 	and.w	r2, r3, #7
 80044f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4422      	add	r2, r4
 80044fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004500:	e106      	b.n	8004710 <UART_SetConfig+0x4d8>
 8004502:	bf00      	nop
 8004504:	40011000 	.word	0x40011000
 8004508:	40011400 	.word	0x40011400
 800450c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004514:	2200      	movs	r2, #0
 8004516:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800451a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800451e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004522:	4642      	mov	r2, r8
 8004524:	464b      	mov	r3, r9
 8004526:	1891      	adds	r1, r2, r2
 8004528:	6239      	str	r1, [r7, #32]
 800452a:	415b      	adcs	r3, r3
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
 800452e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004532:	4641      	mov	r1, r8
 8004534:	1854      	adds	r4, r2, r1
 8004536:	4649      	mov	r1, r9
 8004538:	eb43 0501 	adc.w	r5, r3, r1
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	00eb      	lsls	r3, r5, #3
 8004546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800454a:	00e2      	lsls	r2, r4, #3
 800454c:	4614      	mov	r4, r2
 800454e:	461d      	mov	r5, r3
 8004550:	4643      	mov	r3, r8
 8004552:	18e3      	adds	r3, r4, r3
 8004554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004558:	464b      	mov	r3, r9
 800455a:	eb45 0303 	adc.w	r3, r5, r3
 800455e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800456e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800457e:	4629      	mov	r1, r5
 8004580:	008b      	lsls	r3, r1, #2
 8004582:	4621      	mov	r1, r4
 8004584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004588:	4621      	mov	r1, r4
 800458a:	008a      	lsls	r2, r1, #2
 800458c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004590:	f7fc f9c4 	bl	800091c <__aeabi_uldivmod>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4b60      	ldr	r3, [pc, #384]	@ (800471c <UART_SetConfig+0x4e4>)
 800459a:	fba3 2302 	umull	r2, r3, r3, r2
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	011c      	lsls	r4, r3, #4
 80045a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045b4:	4642      	mov	r2, r8
 80045b6:	464b      	mov	r3, r9
 80045b8:	1891      	adds	r1, r2, r2
 80045ba:	61b9      	str	r1, [r7, #24]
 80045bc:	415b      	adcs	r3, r3
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045c4:	4641      	mov	r1, r8
 80045c6:	1851      	adds	r1, r2, r1
 80045c8:	6139      	str	r1, [r7, #16]
 80045ca:	4649      	mov	r1, r9
 80045cc:	414b      	adcs	r3, r1
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045dc:	4659      	mov	r1, fp
 80045de:	00cb      	lsls	r3, r1, #3
 80045e0:	4651      	mov	r1, sl
 80045e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045e6:	4651      	mov	r1, sl
 80045e8:	00ca      	lsls	r2, r1, #3
 80045ea:	4610      	mov	r0, r2
 80045ec:	4619      	mov	r1, r3
 80045ee:	4603      	mov	r3, r0
 80045f0:	4642      	mov	r2, r8
 80045f2:	189b      	adds	r3, r3, r2
 80045f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045f8:	464b      	mov	r3, r9
 80045fa:	460a      	mov	r2, r1
 80045fc:	eb42 0303 	adc.w	r3, r2, r3
 8004600:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800460e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800461c:	4649      	mov	r1, r9
 800461e:	008b      	lsls	r3, r1, #2
 8004620:	4641      	mov	r1, r8
 8004622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004626:	4641      	mov	r1, r8
 8004628:	008a      	lsls	r2, r1, #2
 800462a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800462e:	f7fc f975 	bl	800091c <__aeabi_uldivmod>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4611      	mov	r1, r2
 8004638:	4b38      	ldr	r3, [pc, #224]	@ (800471c <UART_SetConfig+0x4e4>)
 800463a:	fba3 2301 	umull	r2, r3, r3, r1
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	2264      	movs	r2, #100	@ 0x64
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	1acb      	subs	r3, r1, r3
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	3332      	adds	r3, #50	@ 0x32
 800464c:	4a33      	ldr	r2, [pc, #204]	@ (800471c <UART_SetConfig+0x4e4>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004658:	441c      	add	r4, r3
 800465a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800465e:	2200      	movs	r2, #0
 8004660:	673b      	str	r3, [r7, #112]	@ 0x70
 8004662:	677a      	str	r2, [r7, #116]	@ 0x74
 8004664:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004668:	4642      	mov	r2, r8
 800466a:	464b      	mov	r3, r9
 800466c:	1891      	adds	r1, r2, r2
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	415b      	adcs	r3, r3
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004678:	4641      	mov	r1, r8
 800467a:	1851      	adds	r1, r2, r1
 800467c:	6039      	str	r1, [r7, #0]
 800467e:	4649      	mov	r1, r9
 8004680:	414b      	adcs	r3, r1
 8004682:	607b      	str	r3, [r7, #4]
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004690:	4659      	mov	r1, fp
 8004692:	00cb      	lsls	r3, r1, #3
 8004694:	4651      	mov	r1, sl
 8004696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800469a:	4651      	mov	r1, sl
 800469c:	00ca      	lsls	r2, r1, #3
 800469e:	4610      	mov	r0, r2
 80046a0:	4619      	mov	r1, r3
 80046a2:	4603      	mov	r3, r0
 80046a4:	4642      	mov	r2, r8
 80046a6:	189b      	adds	r3, r3, r2
 80046a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046aa:	464b      	mov	r3, r9
 80046ac:	460a      	mov	r2, r1
 80046ae:	eb42 0303 	adc.w	r3, r2, r3
 80046b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80046be:	667a      	str	r2, [r7, #100]	@ 0x64
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046cc:	4649      	mov	r1, r9
 80046ce:	008b      	lsls	r3, r1, #2
 80046d0:	4641      	mov	r1, r8
 80046d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d6:	4641      	mov	r1, r8
 80046d8:	008a      	lsls	r2, r1, #2
 80046da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046de:	f7fc f91d 	bl	800091c <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <UART_SetConfig+0x4e4>)
 80046e8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	2164      	movs	r1, #100	@ 0x64
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	3332      	adds	r3, #50	@ 0x32
 80046fa:	4a08      	ldr	r2, [pc, #32]	@ (800471c <UART_SetConfig+0x4e4>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f003 020f 	and.w	r2, r3, #15
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4422      	add	r2, r4
 800470e:	609a      	str	r2, [r3, #8]
}
 8004710:	bf00      	nop
 8004712:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004716:	46bd      	mov	sp, r7
 8004718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800471c:	51eb851f 	.word	0x51eb851f

08004720 <std>:
 8004720:	2300      	movs	r3, #0
 8004722:	b510      	push	{r4, lr}
 8004724:	4604      	mov	r4, r0
 8004726:	e9c0 3300 	strd	r3, r3, [r0]
 800472a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800472e:	6083      	str	r3, [r0, #8]
 8004730:	8181      	strh	r1, [r0, #12]
 8004732:	6643      	str	r3, [r0, #100]	@ 0x64
 8004734:	81c2      	strh	r2, [r0, #14]
 8004736:	6183      	str	r3, [r0, #24]
 8004738:	4619      	mov	r1, r3
 800473a:	2208      	movs	r2, #8
 800473c:	305c      	adds	r0, #92	@ 0x5c
 800473e:	f000 f921 	bl	8004984 <memset>
 8004742:	4b0d      	ldr	r3, [pc, #52]	@ (8004778 <std+0x58>)
 8004744:	6263      	str	r3, [r4, #36]	@ 0x24
 8004746:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <std+0x5c>)
 8004748:	62a3      	str	r3, [r4, #40]	@ 0x28
 800474a:	4b0d      	ldr	r3, [pc, #52]	@ (8004780 <std+0x60>)
 800474c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800474e:	4b0d      	ldr	r3, [pc, #52]	@ (8004784 <std+0x64>)
 8004750:	6323      	str	r3, [r4, #48]	@ 0x30
 8004752:	4b0d      	ldr	r3, [pc, #52]	@ (8004788 <std+0x68>)
 8004754:	6224      	str	r4, [r4, #32]
 8004756:	429c      	cmp	r4, r3
 8004758:	d006      	beq.n	8004768 <std+0x48>
 800475a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800475e:	4294      	cmp	r4, r2
 8004760:	d002      	beq.n	8004768 <std+0x48>
 8004762:	33d0      	adds	r3, #208	@ 0xd0
 8004764:	429c      	cmp	r4, r3
 8004766:	d105      	bne.n	8004774 <std+0x54>
 8004768:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004770:	f000 b93a 	b.w	80049e8 <__retarget_lock_init_recursive>
 8004774:	bd10      	pop	{r4, pc}
 8004776:	bf00      	nop
 8004778:	0800523d 	.word	0x0800523d
 800477c:	0800525f 	.word	0x0800525f
 8004780:	08005297 	.word	0x08005297
 8004784:	080052bb 	.word	0x080052bb
 8004788:	20000264 	.word	0x20000264

0800478c <stdio_exit_handler>:
 800478c:	4a02      	ldr	r2, [pc, #8]	@ (8004798 <stdio_exit_handler+0xc>)
 800478e:	4903      	ldr	r1, [pc, #12]	@ (800479c <stdio_exit_handler+0x10>)
 8004790:	4803      	ldr	r0, [pc, #12]	@ (80047a0 <stdio_exit_handler+0x14>)
 8004792:	f000 b869 	b.w	8004868 <_fwalk_sglue>
 8004796:	bf00      	nop
 8004798:	2000000c 	.word	0x2000000c
 800479c:	080051d5 	.word	0x080051d5
 80047a0:	2000001c 	.word	0x2000001c

080047a4 <cleanup_stdio>:
 80047a4:	6841      	ldr	r1, [r0, #4]
 80047a6:	4b0c      	ldr	r3, [pc, #48]	@ (80047d8 <cleanup_stdio+0x34>)
 80047a8:	4299      	cmp	r1, r3
 80047aa:	b510      	push	{r4, lr}
 80047ac:	4604      	mov	r4, r0
 80047ae:	d001      	beq.n	80047b4 <cleanup_stdio+0x10>
 80047b0:	f000 fd10 	bl	80051d4 <_fflush_r>
 80047b4:	68a1      	ldr	r1, [r4, #8]
 80047b6:	4b09      	ldr	r3, [pc, #36]	@ (80047dc <cleanup_stdio+0x38>)
 80047b8:	4299      	cmp	r1, r3
 80047ba:	d002      	beq.n	80047c2 <cleanup_stdio+0x1e>
 80047bc:	4620      	mov	r0, r4
 80047be:	f000 fd09 	bl	80051d4 <_fflush_r>
 80047c2:	68e1      	ldr	r1, [r4, #12]
 80047c4:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <cleanup_stdio+0x3c>)
 80047c6:	4299      	cmp	r1, r3
 80047c8:	d004      	beq.n	80047d4 <cleanup_stdio+0x30>
 80047ca:	4620      	mov	r0, r4
 80047cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047d0:	f000 bd00 	b.w	80051d4 <_fflush_r>
 80047d4:	bd10      	pop	{r4, pc}
 80047d6:	bf00      	nop
 80047d8:	20000264 	.word	0x20000264
 80047dc:	200002cc 	.word	0x200002cc
 80047e0:	20000334 	.word	0x20000334

080047e4 <global_stdio_init.part.0>:
 80047e4:	b510      	push	{r4, lr}
 80047e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <global_stdio_init.part.0+0x30>)
 80047e8:	4c0b      	ldr	r4, [pc, #44]	@ (8004818 <global_stdio_init.part.0+0x34>)
 80047ea:	4a0c      	ldr	r2, [pc, #48]	@ (800481c <global_stdio_init.part.0+0x38>)
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	4620      	mov	r0, r4
 80047f0:	2200      	movs	r2, #0
 80047f2:	2104      	movs	r1, #4
 80047f4:	f7ff ff94 	bl	8004720 <std>
 80047f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047fc:	2201      	movs	r2, #1
 80047fe:	2109      	movs	r1, #9
 8004800:	f7ff ff8e 	bl	8004720 <std>
 8004804:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004808:	2202      	movs	r2, #2
 800480a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800480e:	2112      	movs	r1, #18
 8004810:	f7ff bf86 	b.w	8004720 <std>
 8004814:	2000039c 	.word	0x2000039c
 8004818:	20000264 	.word	0x20000264
 800481c:	0800478d 	.word	0x0800478d

08004820 <__sfp_lock_acquire>:
 8004820:	4801      	ldr	r0, [pc, #4]	@ (8004828 <__sfp_lock_acquire+0x8>)
 8004822:	f000 b8e2 	b.w	80049ea <__retarget_lock_acquire_recursive>
 8004826:	bf00      	nop
 8004828:	200003a1 	.word	0x200003a1

0800482c <__sfp_lock_release>:
 800482c:	4801      	ldr	r0, [pc, #4]	@ (8004834 <__sfp_lock_release+0x8>)
 800482e:	f000 b8dd 	b.w	80049ec <__retarget_lock_release_recursive>
 8004832:	bf00      	nop
 8004834:	200003a1 	.word	0x200003a1

08004838 <__sinit>:
 8004838:	b510      	push	{r4, lr}
 800483a:	4604      	mov	r4, r0
 800483c:	f7ff fff0 	bl	8004820 <__sfp_lock_acquire>
 8004840:	6a23      	ldr	r3, [r4, #32]
 8004842:	b11b      	cbz	r3, 800484c <__sinit+0x14>
 8004844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004848:	f7ff bff0 	b.w	800482c <__sfp_lock_release>
 800484c:	4b04      	ldr	r3, [pc, #16]	@ (8004860 <__sinit+0x28>)
 800484e:	6223      	str	r3, [r4, #32]
 8004850:	4b04      	ldr	r3, [pc, #16]	@ (8004864 <__sinit+0x2c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f5      	bne.n	8004844 <__sinit+0xc>
 8004858:	f7ff ffc4 	bl	80047e4 <global_stdio_init.part.0>
 800485c:	e7f2      	b.n	8004844 <__sinit+0xc>
 800485e:	bf00      	nop
 8004860:	080047a5 	.word	0x080047a5
 8004864:	2000039c 	.word	0x2000039c

08004868 <_fwalk_sglue>:
 8004868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800486c:	4607      	mov	r7, r0
 800486e:	4688      	mov	r8, r1
 8004870:	4614      	mov	r4, r2
 8004872:	2600      	movs	r6, #0
 8004874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004878:	f1b9 0901 	subs.w	r9, r9, #1
 800487c:	d505      	bpl.n	800488a <_fwalk_sglue+0x22>
 800487e:	6824      	ldr	r4, [r4, #0]
 8004880:	2c00      	cmp	r4, #0
 8004882:	d1f7      	bne.n	8004874 <_fwalk_sglue+0xc>
 8004884:	4630      	mov	r0, r6
 8004886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800488a:	89ab      	ldrh	r3, [r5, #12]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d907      	bls.n	80048a0 <_fwalk_sglue+0x38>
 8004890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004894:	3301      	adds	r3, #1
 8004896:	d003      	beq.n	80048a0 <_fwalk_sglue+0x38>
 8004898:	4629      	mov	r1, r5
 800489a:	4638      	mov	r0, r7
 800489c:	47c0      	blx	r8
 800489e:	4306      	orrs	r6, r0
 80048a0:	3568      	adds	r5, #104	@ 0x68
 80048a2:	e7e9      	b.n	8004878 <_fwalk_sglue+0x10>

080048a4 <iprintf>:
 80048a4:	b40f      	push	{r0, r1, r2, r3}
 80048a6:	b507      	push	{r0, r1, r2, lr}
 80048a8:	4906      	ldr	r1, [pc, #24]	@ (80048c4 <iprintf+0x20>)
 80048aa:	ab04      	add	r3, sp, #16
 80048ac:	6808      	ldr	r0, [r1, #0]
 80048ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80048b2:	6881      	ldr	r1, [r0, #8]
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	f000 f8c3 	bl	8004a40 <_vfiprintf_r>
 80048ba:	b003      	add	sp, #12
 80048bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048c0:	b004      	add	sp, #16
 80048c2:	4770      	bx	lr
 80048c4:	20000018 	.word	0x20000018

080048c8 <_puts_r>:
 80048c8:	6a03      	ldr	r3, [r0, #32]
 80048ca:	b570      	push	{r4, r5, r6, lr}
 80048cc:	6884      	ldr	r4, [r0, #8]
 80048ce:	4605      	mov	r5, r0
 80048d0:	460e      	mov	r6, r1
 80048d2:	b90b      	cbnz	r3, 80048d8 <_puts_r+0x10>
 80048d4:	f7ff ffb0 	bl	8004838 <__sinit>
 80048d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048da:	07db      	lsls	r3, r3, #31
 80048dc:	d405      	bmi.n	80048ea <_puts_r+0x22>
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	0598      	lsls	r0, r3, #22
 80048e2:	d402      	bmi.n	80048ea <_puts_r+0x22>
 80048e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048e6:	f000 f880 	bl	80049ea <__retarget_lock_acquire_recursive>
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	0719      	lsls	r1, r3, #28
 80048ee:	d502      	bpl.n	80048f6 <_puts_r+0x2e>
 80048f0:	6923      	ldr	r3, [r4, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d135      	bne.n	8004962 <_puts_r+0x9a>
 80048f6:	4621      	mov	r1, r4
 80048f8:	4628      	mov	r0, r5
 80048fa:	f000 fd21 	bl	8005340 <__swsetup_r>
 80048fe:	b380      	cbz	r0, 8004962 <_puts_r+0x9a>
 8004900:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004904:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004906:	07da      	lsls	r2, r3, #31
 8004908:	d405      	bmi.n	8004916 <_puts_r+0x4e>
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	059b      	lsls	r3, r3, #22
 800490e:	d402      	bmi.n	8004916 <_puts_r+0x4e>
 8004910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004912:	f000 f86b 	bl	80049ec <__retarget_lock_release_recursive>
 8004916:	4628      	mov	r0, r5
 8004918:	bd70      	pop	{r4, r5, r6, pc}
 800491a:	2b00      	cmp	r3, #0
 800491c:	da04      	bge.n	8004928 <_puts_r+0x60>
 800491e:	69a2      	ldr	r2, [r4, #24]
 8004920:	429a      	cmp	r2, r3
 8004922:	dc17      	bgt.n	8004954 <_puts_r+0x8c>
 8004924:	290a      	cmp	r1, #10
 8004926:	d015      	beq.n	8004954 <_puts_r+0x8c>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	6022      	str	r2, [r4, #0]
 800492e:	7019      	strb	r1, [r3, #0]
 8004930:	68a3      	ldr	r3, [r4, #8]
 8004932:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004936:	3b01      	subs	r3, #1
 8004938:	60a3      	str	r3, [r4, #8]
 800493a:	2900      	cmp	r1, #0
 800493c:	d1ed      	bne.n	800491a <_puts_r+0x52>
 800493e:	2b00      	cmp	r3, #0
 8004940:	da11      	bge.n	8004966 <_puts_r+0x9e>
 8004942:	4622      	mov	r2, r4
 8004944:	210a      	movs	r1, #10
 8004946:	4628      	mov	r0, r5
 8004948:	f000 fcbb 	bl	80052c2 <__swbuf_r>
 800494c:	3001      	adds	r0, #1
 800494e:	d0d7      	beq.n	8004900 <_puts_r+0x38>
 8004950:	250a      	movs	r5, #10
 8004952:	e7d7      	b.n	8004904 <_puts_r+0x3c>
 8004954:	4622      	mov	r2, r4
 8004956:	4628      	mov	r0, r5
 8004958:	f000 fcb3 	bl	80052c2 <__swbuf_r>
 800495c:	3001      	adds	r0, #1
 800495e:	d1e7      	bne.n	8004930 <_puts_r+0x68>
 8004960:	e7ce      	b.n	8004900 <_puts_r+0x38>
 8004962:	3e01      	subs	r6, #1
 8004964:	e7e4      	b.n	8004930 <_puts_r+0x68>
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	6022      	str	r2, [r4, #0]
 800496c:	220a      	movs	r2, #10
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	e7ee      	b.n	8004950 <_puts_r+0x88>
	...

08004974 <puts>:
 8004974:	4b02      	ldr	r3, [pc, #8]	@ (8004980 <puts+0xc>)
 8004976:	4601      	mov	r1, r0
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	f7ff bfa5 	b.w	80048c8 <_puts_r>
 800497e:	bf00      	nop
 8004980:	20000018 	.word	0x20000018

08004984 <memset>:
 8004984:	4402      	add	r2, r0
 8004986:	4603      	mov	r3, r0
 8004988:	4293      	cmp	r3, r2
 800498a:	d100      	bne.n	800498e <memset+0xa>
 800498c:	4770      	bx	lr
 800498e:	f803 1b01 	strb.w	r1, [r3], #1
 8004992:	e7f9      	b.n	8004988 <memset+0x4>

08004994 <__errno>:
 8004994:	4b01      	ldr	r3, [pc, #4]	@ (800499c <__errno+0x8>)
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000018 	.word	0x20000018

080049a0 <__libc_init_array>:
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	4d0d      	ldr	r5, [pc, #52]	@ (80049d8 <__libc_init_array+0x38>)
 80049a4:	4c0d      	ldr	r4, [pc, #52]	@ (80049dc <__libc_init_array+0x3c>)
 80049a6:	1b64      	subs	r4, r4, r5
 80049a8:	10a4      	asrs	r4, r4, #2
 80049aa:	2600      	movs	r6, #0
 80049ac:	42a6      	cmp	r6, r4
 80049ae:	d109      	bne.n	80049c4 <__libc_init_array+0x24>
 80049b0:	4d0b      	ldr	r5, [pc, #44]	@ (80049e0 <__libc_init_array+0x40>)
 80049b2:	4c0c      	ldr	r4, [pc, #48]	@ (80049e4 <__libc_init_array+0x44>)
 80049b4:	f000 fe3e 	bl	8005634 <_init>
 80049b8:	1b64      	subs	r4, r4, r5
 80049ba:	10a4      	asrs	r4, r4, #2
 80049bc:	2600      	movs	r6, #0
 80049be:	42a6      	cmp	r6, r4
 80049c0:	d105      	bne.n	80049ce <__libc_init_array+0x2e>
 80049c2:	bd70      	pop	{r4, r5, r6, pc}
 80049c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c8:	4798      	blx	r3
 80049ca:	3601      	adds	r6, #1
 80049cc:	e7ee      	b.n	80049ac <__libc_init_array+0xc>
 80049ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d2:	4798      	blx	r3
 80049d4:	3601      	adds	r6, #1
 80049d6:	e7f2      	b.n	80049be <__libc_init_array+0x1e>
 80049d8:	080056c0 	.word	0x080056c0
 80049dc:	080056c0 	.word	0x080056c0
 80049e0:	080056c0 	.word	0x080056c0
 80049e4:	080056c4 	.word	0x080056c4

080049e8 <__retarget_lock_init_recursive>:
 80049e8:	4770      	bx	lr

080049ea <__retarget_lock_acquire_recursive>:
 80049ea:	4770      	bx	lr

080049ec <__retarget_lock_release_recursive>:
 80049ec:	4770      	bx	lr

080049ee <__sfputc_r>:
 80049ee:	6893      	ldr	r3, [r2, #8]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	b410      	push	{r4}
 80049f6:	6093      	str	r3, [r2, #8]
 80049f8:	da08      	bge.n	8004a0c <__sfputc_r+0x1e>
 80049fa:	6994      	ldr	r4, [r2, #24]
 80049fc:	42a3      	cmp	r3, r4
 80049fe:	db01      	blt.n	8004a04 <__sfputc_r+0x16>
 8004a00:	290a      	cmp	r1, #10
 8004a02:	d103      	bne.n	8004a0c <__sfputc_r+0x1e>
 8004a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a08:	f000 bc5b 	b.w	80052c2 <__swbuf_r>
 8004a0c:	6813      	ldr	r3, [r2, #0]
 8004a0e:	1c58      	adds	r0, r3, #1
 8004a10:	6010      	str	r0, [r2, #0]
 8004a12:	7019      	strb	r1, [r3, #0]
 8004a14:	4608      	mov	r0, r1
 8004a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <__sfputs_r>:
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1e:	4606      	mov	r6, r0
 8004a20:	460f      	mov	r7, r1
 8004a22:	4614      	mov	r4, r2
 8004a24:	18d5      	adds	r5, r2, r3
 8004a26:	42ac      	cmp	r4, r5
 8004a28:	d101      	bne.n	8004a2e <__sfputs_r+0x12>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e007      	b.n	8004a3e <__sfputs_r+0x22>
 8004a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a32:	463a      	mov	r2, r7
 8004a34:	4630      	mov	r0, r6
 8004a36:	f7ff ffda 	bl	80049ee <__sfputc_r>
 8004a3a:	1c43      	adds	r3, r0, #1
 8004a3c:	d1f3      	bne.n	8004a26 <__sfputs_r+0xa>
 8004a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004a40 <_vfiprintf_r>:
 8004a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	460d      	mov	r5, r1
 8004a46:	b09d      	sub	sp, #116	@ 0x74
 8004a48:	4614      	mov	r4, r2
 8004a4a:	4698      	mov	r8, r3
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	b118      	cbz	r0, 8004a58 <_vfiprintf_r+0x18>
 8004a50:	6a03      	ldr	r3, [r0, #32]
 8004a52:	b90b      	cbnz	r3, 8004a58 <_vfiprintf_r+0x18>
 8004a54:	f7ff fef0 	bl	8004838 <__sinit>
 8004a58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a5a:	07d9      	lsls	r1, r3, #31
 8004a5c:	d405      	bmi.n	8004a6a <_vfiprintf_r+0x2a>
 8004a5e:	89ab      	ldrh	r3, [r5, #12]
 8004a60:	059a      	lsls	r2, r3, #22
 8004a62:	d402      	bmi.n	8004a6a <_vfiprintf_r+0x2a>
 8004a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a66:	f7ff ffc0 	bl	80049ea <__retarget_lock_acquire_recursive>
 8004a6a:	89ab      	ldrh	r3, [r5, #12]
 8004a6c:	071b      	lsls	r3, r3, #28
 8004a6e:	d501      	bpl.n	8004a74 <_vfiprintf_r+0x34>
 8004a70:	692b      	ldr	r3, [r5, #16]
 8004a72:	b99b      	cbnz	r3, 8004a9c <_vfiprintf_r+0x5c>
 8004a74:	4629      	mov	r1, r5
 8004a76:	4630      	mov	r0, r6
 8004a78:	f000 fc62 	bl	8005340 <__swsetup_r>
 8004a7c:	b170      	cbz	r0, 8004a9c <_vfiprintf_r+0x5c>
 8004a7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a80:	07dc      	lsls	r4, r3, #31
 8004a82:	d504      	bpl.n	8004a8e <_vfiprintf_r+0x4e>
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a88:	b01d      	add	sp, #116	@ 0x74
 8004a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8e:	89ab      	ldrh	r3, [r5, #12]
 8004a90:	0598      	lsls	r0, r3, #22
 8004a92:	d4f7      	bmi.n	8004a84 <_vfiprintf_r+0x44>
 8004a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a96:	f7ff ffa9 	bl	80049ec <__retarget_lock_release_recursive>
 8004a9a:	e7f3      	b.n	8004a84 <_vfiprintf_r+0x44>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aa0:	2320      	movs	r3, #32
 8004aa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aaa:	2330      	movs	r3, #48	@ 0x30
 8004aac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004c5c <_vfiprintf_r+0x21c>
 8004ab0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ab4:	f04f 0901 	mov.w	r9, #1
 8004ab8:	4623      	mov	r3, r4
 8004aba:	469a      	mov	sl, r3
 8004abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ac0:	b10a      	cbz	r2, 8004ac6 <_vfiprintf_r+0x86>
 8004ac2:	2a25      	cmp	r2, #37	@ 0x25
 8004ac4:	d1f9      	bne.n	8004aba <_vfiprintf_r+0x7a>
 8004ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8004aca:	d00b      	beq.n	8004ae4 <_vfiprintf_r+0xa4>
 8004acc:	465b      	mov	r3, fp
 8004ace:	4622      	mov	r2, r4
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7ff ffa2 	bl	8004a1c <__sfputs_r>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	f000 80a7 	beq.w	8004c2c <_vfiprintf_r+0x1ec>
 8004ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ae0:	445a      	add	r2, fp
 8004ae2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 809f 	beq.w	8004c2c <_vfiprintf_r+0x1ec>
 8004aee:	2300      	movs	r3, #0
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004af8:	f10a 0a01 	add.w	sl, sl, #1
 8004afc:	9304      	str	r3, [sp, #16]
 8004afe:	9307      	str	r3, [sp, #28]
 8004b00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b04:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b06:	4654      	mov	r4, sl
 8004b08:	2205      	movs	r2, #5
 8004b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b0e:	4853      	ldr	r0, [pc, #332]	@ (8004c5c <_vfiprintf_r+0x21c>)
 8004b10:	f7fb fb7e 	bl	8000210 <memchr>
 8004b14:	9a04      	ldr	r2, [sp, #16]
 8004b16:	b9d8      	cbnz	r0, 8004b50 <_vfiprintf_r+0x110>
 8004b18:	06d1      	lsls	r1, r2, #27
 8004b1a:	bf44      	itt	mi
 8004b1c:	2320      	movmi	r3, #32
 8004b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b22:	0713      	lsls	r3, r2, #28
 8004b24:	bf44      	itt	mi
 8004b26:	232b      	movmi	r3, #43	@ 0x2b
 8004b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b32:	d015      	beq.n	8004b60 <_vfiprintf_r+0x120>
 8004b34:	9a07      	ldr	r2, [sp, #28]
 8004b36:	4654      	mov	r4, sl
 8004b38:	2000      	movs	r0, #0
 8004b3a:	f04f 0c0a 	mov.w	ip, #10
 8004b3e:	4621      	mov	r1, r4
 8004b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b44:	3b30      	subs	r3, #48	@ 0x30
 8004b46:	2b09      	cmp	r3, #9
 8004b48:	d94b      	bls.n	8004be2 <_vfiprintf_r+0x1a2>
 8004b4a:	b1b0      	cbz	r0, 8004b7a <_vfiprintf_r+0x13a>
 8004b4c:	9207      	str	r2, [sp, #28]
 8004b4e:	e014      	b.n	8004b7a <_vfiprintf_r+0x13a>
 8004b50:	eba0 0308 	sub.w	r3, r0, r8
 8004b54:	fa09 f303 	lsl.w	r3, r9, r3
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	9304      	str	r3, [sp, #16]
 8004b5c:	46a2      	mov	sl, r4
 8004b5e:	e7d2      	b.n	8004b06 <_vfiprintf_r+0xc6>
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	1d19      	adds	r1, r3, #4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	9103      	str	r1, [sp, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bfbb      	ittet	lt
 8004b6c:	425b      	neglt	r3, r3
 8004b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8004b72:	9307      	strge	r3, [sp, #28]
 8004b74:	9307      	strlt	r3, [sp, #28]
 8004b76:	bfb8      	it	lt
 8004b78:	9204      	strlt	r2, [sp, #16]
 8004b7a:	7823      	ldrb	r3, [r4, #0]
 8004b7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b7e:	d10a      	bne.n	8004b96 <_vfiprintf_r+0x156>
 8004b80:	7863      	ldrb	r3, [r4, #1]
 8004b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b84:	d132      	bne.n	8004bec <_vfiprintf_r+0x1ac>
 8004b86:	9b03      	ldr	r3, [sp, #12]
 8004b88:	1d1a      	adds	r2, r3, #4
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	9203      	str	r2, [sp, #12]
 8004b8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b92:	3402      	adds	r4, #2
 8004b94:	9305      	str	r3, [sp, #20]
 8004b96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004c6c <_vfiprintf_r+0x22c>
 8004b9a:	7821      	ldrb	r1, [r4, #0]
 8004b9c:	2203      	movs	r2, #3
 8004b9e:	4650      	mov	r0, sl
 8004ba0:	f7fb fb36 	bl	8000210 <memchr>
 8004ba4:	b138      	cbz	r0, 8004bb6 <_vfiprintf_r+0x176>
 8004ba6:	9b04      	ldr	r3, [sp, #16]
 8004ba8:	eba0 000a 	sub.w	r0, r0, sl
 8004bac:	2240      	movs	r2, #64	@ 0x40
 8004bae:	4082      	lsls	r2, r0
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	3401      	adds	r4, #1
 8004bb4:	9304      	str	r3, [sp, #16]
 8004bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bba:	4829      	ldr	r0, [pc, #164]	@ (8004c60 <_vfiprintf_r+0x220>)
 8004bbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004bc0:	2206      	movs	r2, #6
 8004bc2:	f7fb fb25 	bl	8000210 <memchr>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d03f      	beq.n	8004c4a <_vfiprintf_r+0x20a>
 8004bca:	4b26      	ldr	r3, [pc, #152]	@ (8004c64 <_vfiprintf_r+0x224>)
 8004bcc:	bb1b      	cbnz	r3, 8004c16 <_vfiprintf_r+0x1d6>
 8004bce:	9b03      	ldr	r3, [sp, #12]
 8004bd0:	3307      	adds	r3, #7
 8004bd2:	f023 0307 	bic.w	r3, r3, #7
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	9303      	str	r3, [sp, #12]
 8004bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bdc:	443b      	add	r3, r7
 8004bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8004be0:	e76a      	b.n	8004ab8 <_vfiprintf_r+0x78>
 8004be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004be6:	460c      	mov	r4, r1
 8004be8:	2001      	movs	r0, #1
 8004bea:	e7a8      	b.n	8004b3e <_vfiprintf_r+0xfe>
 8004bec:	2300      	movs	r3, #0
 8004bee:	3401      	adds	r4, #1
 8004bf0:	9305      	str	r3, [sp, #20]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	f04f 0c0a 	mov.w	ip, #10
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bfe:	3a30      	subs	r2, #48	@ 0x30
 8004c00:	2a09      	cmp	r2, #9
 8004c02:	d903      	bls.n	8004c0c <_vfiprintf_r+0x1cc>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0c6      	beq.n	8004b96 <_vfiprintf_r+0x156>
 8004c08:	9105      	str	r1, [sp, #20]
 8004c0a:	e7c4      	b.n	8004b96 <_vfiprintf_r+0x156>
 8004c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c10:	4604      	mov	r4, r0
 8004c12:	2301      	movs	r3, #1
 8004c14:	e7f0      	b.n	8004bf8 <_vfiprintf_r+0x1b8>
 8004c16:	ab03      	add	r3, sp, #12
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	462a      	mov	r2, r5
 8004c1c:	4b12      	ldr	r3, [pc, #72]	@ (8004c68 <_vfiprintf_r+0x228>)
 8004c1e:	a904      	add	r1, sp, #16
 8004c20:	4630      	mov	r0, r6
 8004c22:	f3af 8000 	nop.w
 8004c26:	4607      	mov	r7, r0
 8004c28:	1c78      	adds	r0, r7, #1
 8004c2a:	d1d6      	bne.n	8004bda <_vfiprintf_r+0x19a>
 8004c2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c2e:	07d9      	lsls	r1, r3, #31
 8004c30:	d405      	bmi.n	8004c3e <_vfiprintf_r+0x1fe>
 8004c32:	89ab      	ldrh	r3, [r5, #12]
 8004c34:	059a      	lsls	r2, r3, #22
 8004c36:	d402      	bmi.n	8004c3e <_vfiprintf_r+0x1fe>
 8004c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c3a:	f7ff fed7 	bl	80049ec <__retarget_lock_release_recursive>
 8004c3e:	89ab      	ldrh	r3, [r5, #12]
 8004c40:	065b      	lsls	r3, r3, #25
 8004c42:	f53f af1f 	bmi.w	8004a84 <_vfiprintf_r+0x44>
 8004c46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c48:	e71e      	b.n	8004a88 <_vfiprintf_r+0x48>
 8004c4a:	ab03      	add	r3, sp, #12
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	462a      	mov	r2, r5
 8004c50:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <_vfiprintf_r+0x228>)
 8004c52:	a904      	add	r1, sp, #16
 8004c54:	4630      	mov	r0, r6
 8004c56:	f000 f91b 	bl	8004e90 <_printf_i>
 8004c5a:	e7e4      	b.n	8004c26 <_vfiprintf_r+0x1e6>
 8004c5c:	08005682 	.word	0x08005682
 8004c60:	0800568c 	.word	0x0800568c
 8004c64:	00000000 	.word	0x00000000
 8004c68:	08004a1d 	.word	0x08004a1d
 8004c6c:	08005688 	.word	0x08005688

08004c70 <sbrk_aligned>:
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	4e0f      	ldr	r6, [pc, #60]	@ (8004cb0 <sbrk_aligned+0x40>)
 8004c74:	460c      	mov	r4, r1
 8004c76:	6831      	ldr	r1, [r6, #0]
 8004c78:	4605      	mov	r5, r0
 8004c7a:	b911      	cbnz	r1, 8004c82 <sbrk_aligned+0x12>
 8004c7c:	f000 fc4c 	bl	8005518 <_sbrk_r>
 8004c80:	6030      	str	r0, [r6, #0]
 8004c82:	4621      	mov	r1, r4
 8004c84:	4628      	mov	r0, r5
 8004c86:	f000 fc47 	bl	8005518 <_sbrk_r>
 8004c8a:	1c43      	adds	r3, r0, #1
 8004c8c:	d103      	bne.n	8004c96 <sbrk_aligned+0x26>
 8004c8e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004c92:	4620      	mov	r0, r4
 8004c94:	bd70      	pop	{r4, r5, r6, pc}
 8004c96:	1cc4      	adds	r4, r0, #3
 8004c98:	f024 0403 	bic.w	r4, r4, #3
 8004c9c:	42a0      	cmp	r0, r4
 8004c9e:	d0f8      	beq.n	8004c92 <sbrk_aligned+0x22>
 8004ca0:	1a21      	subs	r1, r4, r0
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f000 fc38 	bl	8005518 <_sbrk_r>
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d1f2      	bne.n	8004c92 <sbrk_aligned+0x22>
 8004cac:	e7ef      	b.n	8004c8e <sbrk_aligned+0x1e>
 8004cae:	bf00      	nop
 8004cb0:	200003a4 	.word	0x200003a4

08004cb4 <_malloc_r>:
 8004cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb8:	1ccd      	adds	r5, r1, #3
 8004cba:	f025 0503 	bic.w	r5, r5, #3
 8004cbe:	3508      	adds	r5, #8
 8004cc0:	2d0c      	cmp	r5, #12
 8004cc2:	bf38      	it	cc
 8004cc4:	250c      	movcc	r5, #12
 8004cc6:	2d00      	cmp	r5, #0
 8004cc8:	4606      	mov	r6, r0
 8004cca:	db01      	blt.n	8004cd0 <_malloc_r+0x1c>
 8004ccc:	42a9      	cmp	r1, r5
 8004cce:	d904      	bls.n	8004cda <_malloc_r+0x26>
 8004cd0:	230c      	movs	r3, #12
 8004cd2:	6033      	str	r3, [r6, #0]
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004db0 <_malloc_r+0xfc>
 8004cde:	f000 faa1 	bl	8005224 <__malloc_lock>
 8004ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ce6:	461c      	mov	r4, r3
 8004ce8:	bb44      	cbnz	r4, 8004d3c <_malloc_r+0x88>
 8004cea:	4629      	mov	r1, r5
 8004cec:	4630      	mov	r0, r6
 8004cee:	f7ff ffbf 	bl	8004c70 <sbrk_aligned>
 8004cf2:	1c43      	adds	r3, r0, #1
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	d158      	bne.n	8004daa <_malloc_r+0xf6>
 8004cf8:	f8d8 4000 	ldr.w	r4, [r8]
 8004cfc:	4627      	mov	r7, r4
 8004cfe:	2f00      	cmp	r7, #0
 8004d00:	d143      	bne.n	8004d8a <_malloc_r+0xd6>
 8004d02:	2c00      	cmp	r4, #0
 8004d04:	d04b      	beq.n	8004d9e <_malloc_r+0xea>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	4639      	mov	r1, r7
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	eb04 0903 	add.w	r9, r4, r3
 8004d10:	f000 fc02 	bl	8005518 <_sbrk_r>
 8004d14:	4581      	cmp	r9, r0
 8004d16:	d142      	bne.n	8004d9e <_malloc_r+0xea>
 8004d18:	6821      	ldr	r1, [r4, #0]
 8004d1a:	1a6d      	subs	r5, r5, r1
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	4630      	mov	r0, r6
 8004d20:	f7ff ffa6 	bl	8004c70 <sbrk_aligned>
 8004d24:	3001      	adds	r0, #1
 8004d26:	d03a      	beq.n	8004d9e <_malloc_r+0xea>
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	442b      	add	r3, r5
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	bb62      	cbnz	r2, 8004d90 <_malloc_r+0xdc>
 8004d36:	f8c8 7000 	str.w	r7, [r8]
 8004d3a:	e00f      	b.n	8004d5c <_malloc_r+0xa8>
 8004d3c:	6822      	ldr	r2, [r4, #0]
 8004d3e:	1b52      	subs	r2, r2, r5
 8004d40:	d420      	bmi.n	8004d84 <_malloc_r+0xd0>
 8004d42:	2a0b      	cmp	r2, #11
 8004d44:	d917      	bls.n	8004d76 <_malloc_r+0xc2>
 8004d46:	1961      	adds	r1, r4, r5
 8004d48:	42a3      	cmp	r3, r4
 8004d4a:	6025      	str	r5, [r4, #0]
 8004d4c:	bf18      	it	ne
 8004d4e:	6059      	strne	r1, [r3, #4]
 8004d50:	6863      	ldr	r3, [r4, #4]
 8004d52:	bf08      	it	eq
 8004d54:	f8c8 1000 	streq.w	r1, [r8]
 8004d58:	5162      	str	r2, [r4, r5]
 8004d5a:	604b      	str	r3, [r1, #4]
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f000 fa67 	bl	8005230 <__malloc_unlock>
 8004d62:	f104 000b 	add.w	r0, r4, #11
 8004d66:	1d23      	adds	r3, r4, #4
 8004d68:	f020 0007 	bic.w	r0, r0, #7
 8004d6c:	1ac2      	subs	r2, r0, r3
 8004d6e:	bf1c      	itt	ne
 8004d70:	1a1b      	subne	r3, r3, r0
 8004d72:	50a3      	strne	r3, [r4, r2]
 8004d74:	e7af      	b.n	8004cd6 <_malloc_r+0x22>
 8004d76:	6862      	ldr	r2, [r4, #4]
 8004d78:	42a3      	cmp	r3, r4
 8004d7a:	bf0c      	ite	eq
 8004d7c:	f8c8 2000 	streq.w	r2, [r8]
 8004d80:	605a      	strne	r2, [r3, #4]
 8004d82:	e7eb      	b.n	8004d5c <_malloc_r+0xa8>
 8004d84:	4623      	mov	r3, r4
 8004d86:	6864      	ldr	r4, [r4, #4]
 8004d88:	e7ae      	b.n	8004ce8 <_malloc_r+0x34>
 8004d8a:	463c      	mov	r4, r7
 8004d8c:	687f      	ldr	r7, [r7, #4]
 8004d8e:	e7b6      	b.n	8004cfe <_malloc_r+0x4a>
 8004d90:	461a      	mov	r2, r3
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	42a3      	cmp	r3, r4
 8004d96:	d1fb      	bne.n	8004d90 <_malloc_r+0xdc>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	6053      	str	r3, [r2, #4]
 8004d9c:	e7de      	b.n	8004d5c <_malloc_r+0xa8>
 8004d9e:	230c      	movs	r3, #12
 8004da0:	6033      	str	r3, [r6, #0]
 8004da2:	4630      	mov	r0, r6
 8004da4:	f000 fa44 	bl	8005230 <__malloc_unlock>
 8004da8:	e794      	b.n	8004cd4 <_malloc_r+0x20>
 8004daa:	6005      	str	r5, [r0, #0]
 8004dac:	e7d6      	b.n	8004d5c <_malloc_r+0xa8>
 8004dae:	bf00      	nop
 8004db0:	200003a8 	.word	0x200003a8

08004db4 <_printf_common>:
 8004db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db8:	4616      	mov	r6, r2
 8004dba:	4698      	mov	r8, r3
 8004dbc:	688a      	ldr	r2, [r1, #8]
 8004dbe:	690b      	ldr	r3, [r1, #16]
 8004dc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	bfb8      	it	lt
 8004dc8:	4613      	movlt	r3, r2
 8004dca:	6033      	str	r3, [r6, #0]
 8004dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	b10a      	cbz	r2, 8004dda <_printf_common+0x26>
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	6033      	str	r3, [r6, #0]
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	0699      	lsls	r1, r3, #26
 8004dde:	bf42      	ittt	mi
 8004de0:	6833      	ldrmi	r3, [r6, #0]
 8004de2:	3302      	addmi	r3, #2
 8004de4:	6033      	strmi	r3, [r6, #0]
 8004de6:	6825      	ldr	r5, [r4, #0]
 8004de8:	f015 0506 	ands.w	r5, r5, #6
 8004dec:	d106      	bne.n	8004dfc <_printf_common+0x48>
 8004dee:	f104 0a19 	add.w	sl, r4, #25
 8004df2:	68e3      	ldr	r3, [r4, #12]
 8004df4:	6832      	ldr	r2, [r6, #0]
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	42ab      	cmp	r3, r5
 8004dfa:	dc26      	bgt.n	8004e4a <_printf_common+0x96>
 8004dfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e00:	6822      	ldr	r2, [r4, #0]
 8004e02:	3b00      	subs	r3, #0
 8004e04:	bf18      	it	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	0692      	lsls	r2, r2, #26
 8004e0a:	d42b      	bmi.n	8004e64 <_printf_common+0xb0>
 8004e0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e10:	4641      	mov	r1, r8
 8004e12:	4638      	mov	r0, r7
 8004e14:	47c8      	blx	r9
 8004e16:	3001      	adds	r0, #1
 8004e18:	d01e      	beq.n	8004e58 <_printf_common+0xa4>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	6922      	ldr	r2, [r4, #16]
 8004e1e:	f003 0306 	and.w	r3, r3, #6
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	bf02      	ittt	eq
 8004e26:	68e5      	ldreq	r5, [r4, #12]
 8004e28:	6833      	ldreq	r3, [r6, #0]
 8004e2a:	1aed      	subeq	r5, r5, r3
 8004e2c:	68a3      	ldr	r3, [r4, #8]
 8004e2e:	bf0c      	ite	eq
 8004e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e34:	2500      	movne	r5, #0
 8004e36:	4293      	cmp	r3, r2
 8004e38:	bfc4      	itt	gt
 8004e3a:	1a9b      	subgt	r3, r3, r2
 8004e3c:	18ed      	addgt	r5, r5, r3
 8004e3e:	2600      	movs	r6, #0
 8004e40:	341a      	adds	r4, #26
 8004e42:	42b5      	cmp	r5, r6
 8004e44:	d11a      	bne.n	8004e7c <_printf_common+0xc8>
 8004e46:	2000      	movs	r0, #0
 8004e48:	e008      	b.n	8004e5c <_printf_common+0xa8>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	4652      	mov	r2, sl
 8004e4e:	4641      	mov	r1, r8
 8004e50:	4638      	mov	r0, r7
 8004e52:	47c8      	blx	r9
 8004e54:	3001      	adds	r0, #1
 8004e56:	d103      	bne.n	8004e60 <_printf_common+0xac>
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e60:	3501      	adds	r5, #1
 8004e62:	e7c6      	b.n	8004df2 <_printf_common+0x3e>
 8004e64:	18e1      	adds	r1, r4, r3
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	2030      	movs	r0, #48	@ 0x30
 8004e6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e6e:	4422      	add	r2, r4
 8004e70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e78:	3302      	adds	r3, #2
 8004e7a:	e7c7      	b.n	8004e0c <_printf_common+0x58>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4622      	mov	r2, r4
 8004e80:	4641      	mov	r1, r8
 8004e82:	4638      	mov	r0, r7
 8004e84:	47c8      	blx	r9
 8004e86:	3001      	adds	r0, #1
 8004e88:	d0e6      	beq.n	8004e58 <_printf_common+0xa4>
 8004e8a:	3601      	adds	r6, #1
 8004e8c:	e7d9      	b.n	8004e42 <_printf_common+0x8e>
	...

08004e90 <_printf_i>:
 8004e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e94:	7e0f      	ldrb	r7, [r1, #24]
 8004e96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e98:	2f78      	cmp	r7, #120	@ 0x78
 8004e9a:	4691      	mov	r9, r2
 8004e9c:	4680      	mov	r8, r0
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	469a      	mov	sl, r3
 8004ea2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ea6:	d807      	bhi.n	8004eb8 <_printf_i+0x28>
 8004ea8:	2f62      	cmp	r7, #98	@ 0x62
 8004eaa:	d80a      	bhi.n	8004ec2 <_printf_i+0x32>
 8004eac:	2f00      	cmp	r7, #0
 8004eae:	f000 80d1 	beq.w	8005054 <_printf_i+0x1c4>
 8004eb2:	2f58      	cmp	r7, #88	@ 0x58
 8004eb4:	f000 80b8 	beq.w	8005028 <_printf_i+0x198>
 8004eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ebc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ec0:	e03a      	b.n	8004f38 <_printf_i+0xa8>
 8004ec2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ec6:	2b15      	cmp	r3, #21
 8004ec8:	d8f6      	bhi.n	8004eb8 <_printf_i+0x28>
 8004eca:	a101      	add	r1, pc, #4	@ (adr r1, 8004ed0 <_printf_i+0x40>)
 8004ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ed0:	08004f29 	.word	0x08004f29
 8004ed4:	08004f3d 	.word	0x08004f3d
 8004ed8:	08004eb9 	.word	0x08004eb9
 8004edc:	08004eb9 	.word	0x08004eb9
 8004ee0:	08004eb9 	.word	0x08004eb9
 8004ee4:	08004eb9 	.word	0x08004eb9
 8004ee8:	08004f3d 	.word	0x08004f3d
 8004eec:	08004eb9 	.word	0x08004eb9
 8004ef0:	08004eb9 	.word	0x08004eb9
 8004ef4:	08004eb9 	.word	0x08004eb9
 8004ef8:	08004eb9 	.word	0x08004eb9
 8004efc:	0800503b 	.word	0x0800503b
 8004f00:	08004f67 	.word	0x08004f67
 8004f04:	08004ff5 	.word	0x08004ff5
 8004f08:	08004eb9 	.word	0x08004eb9
 8004f0c:	08004eb9 	.word	0x08004eb9
 8004f10:	0800505d 	.word	0x0800505d
 8004f14:	08004eb9 	.word	0x08004eb9
 8004f18:	08004f67 	.word	0x08004f67
 8004f1c:	08004eb9 	.word	0x08004eb9
 8004f20:	08004eb9 	.word	0x08004eb9
 8004f24:	08004ffd 	.word	0x08004ffd
 8004f28:	6833      	ldr	r3, [r6, #0]
 8004f2a:	1d1a      	adds	r2, r3, #4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6032      	str	r2, [r6, #0]
 8004f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e09c      	b.n	8005076 <_printf_i+0x1e6>
 8004f3c:	6833      	ldr	r3, [r6, #0]
 8004f3e:	6820      	ldr	r0, [r4, #0]
 8004f40:	1d19      	adds	r1, r3, #4
 8004f42:	6031      	str	r1, [r6, #0]
 8004f44:	0606      	lsls	r6, r0, #24
 8004f46:	d501      	bpl.n	8004f4c <_printf_i+0xbc>
 8004f48:	681d      	ldr	r5, [r3, #0]
 8004f4a:	e003      	b.n	8004f54 <_printf_i+0xc4>
 8004f4c:	0645      	lsls	r5, r0, #25
 8004f4e:	d5fb      	bpl.n	8004f48 <_printf_i+0xb8>
 8004f50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f54:	2d00      	cmp	r5, #0
 8004f56:	da03      	bge.n	8004f60 <_printf_i+0xd0>
 8004f58:	232d      	movs	r3, #45	@ 0x2d
 8004f5a:	426d      	negs	r5, r5
 8004f5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f60:	4858      	ldr	r0, [pc, #352]	@ (80050c4 <_printf_i+0x234>)
 8004f62:	230a      	movs	r3, #10
 8004f64:	e011      	b.n	8004f8a <_printf_i+0xfa>
 8004f66:	6821      	ldr	r1, [r4, #0]
 8004f68:	6833      	ldr	r3, [r6, #0]
 8004f6a:	0608      	lsls	r0, r1, #24
 8004f6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f70:	d402      	bmi.n	8004f78 <_printf_i+0xe8>
 8004f72:	0649      	lsls	r1, r1, #25
 8004f74:	bf48      	it	mi
 8004f76:	b2ad      	uxthmi	r5, r5
 8004f78:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f7a:	4852      	ldr	r0, [pc, #328]	@ (80050c4 <_printf_i+0x234>)
 8004f7c:	6033      	str	r3, [r6, #0]
 8004f7e:	bf14      	ite	ne
 8004f80:	230a      	movne	r3, #10
 8004f82:	2308      	moveq	r3, #8
 8004f84:	2100      	movs	r1, #0
 8004f86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f8a:	6866      	ldr	r6, [r4, #4]
 8004f8c:	60a6      	str	r6, [r4, #8]
 8004f8e:	2e00      	cmp	r6, #0
 8004f90:	db05      	blt.n	8004f9e <_printf_i+0x10e>
 8004f92:	6821      	ldr	r1, [r4, #0]
 8004f94:	432e      	orrs	r6, r5
 8004f96:	f021 0104 	bic.w	r1, r1, #4
 8004f9a:	6021      	str	r1, [r4, #0]
 8004f9c:	d04b      	beq.n	8005036 <_printf_i+0x1a6>
 8004f9e:	4616      	mov	r6, r2
 8004fa0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fa4:	fb03 5711 	mls	r7, r3, r1, r5
 8004fa8:	5dc7      	ldrb	r7, [r0, r7]
 8004faa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fae:	462f      	mov	r7, r5
 8004fb0:	42bb      	cmp	r3, r7
 8004fb2:	460d      	mov	r5, r1
 8004fb4:	d9f4      	bls.n	8004fa0 <_printf_i+0x110>
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d10b      	bne.n	8004fd2 <_printf_i+0x142>
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	07df      	lsls	r7, r3, #31
 8004fbe:	d508      	bpl.n	8004fd2 <_printf_i+0x142>
 8004fc0:	6923      	ldr	r3, [r4, #16]
 8004fc2:	6861      	ldr	r1, [r4, #4]
 8004fc4:	4299      	cmp	r1, r3
 8004fc6:	bfde      	ittt	le
 8004fc8:	2330      	movle	r3, #48	@ 0x30
 8004fca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004fd2:	1b92      	subs	r2, r2, r6
 8004fd4:	6122      	str	r2, [r4, #16]
 8004fd6:	f8cd a000 	str.w	sl, [sp]
 8004fda:	464b      	mov	r3, r9
 8004fdc:	aa03      	add	r2, sp, #12
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	f7ff fee7 	bl	8004db4 <_printf_common>
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d14a      	bne.n	8005080 <_printf_i+0x1f0>
 8004fea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fee:	b004      	add	sp, #16
 8004ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	f043 0320 	orr.w	r3, r3, #32
 8004ffa:	6023      	str	r3, [r4, #0]
 8004ffc:	4832      	ldr	r0, [pc, #200]	@ (80050c8 <_printf_i+0x238>)
 8004ffe:	2778      	movs	r7, #120	@ 0x78
 8005000:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	6831      	ldr	r1, [r6, #0]
 8005008:	061f      	lsls	r7, r3, #24
 800500a:	f851 5b04 	ldr.w	r5, [r1], #4
 800500e:	d402      	bmi.n	8005016 <_printf_i+0x186>
 8005010:	065f      	lsls	r7, r3, #25
 8005012:	bf48      	it	mi
 8005014:	b2ad      	uxthmi	r5, r5
 8005016:	6031      	str	r1, [r6, #0]
 8005018:	07d9      	lsls	r1, r3, #31
 800501a:	bf44      	itt	mi
 800501c:	f043 0320 	orrmi.w	r3, r3, #32
 8005020:	6023      	strmi	r3, [r4, #0]
 8005022:	b11d      	cbz	r5, 800502c <_printf_i+0x19c>
 8005024:	2310      	movs	r3, #16
 8005026:	e7ad      	b.n	8004f84 <_printf_i+0xf4>
 8005028:	4826      	ldr	r0, [pc, #152]	@ (80050c4 <_printf_i+0x234>)
 800502a:	e7e9      	b.n	8005000 <_printf_i+0x170>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	f023 0320 	bic.w	r3, r3, #32
 8005032:	6023      	str	r3, [r4, #0]
 8005034:	e7f6      	b.n	8005024 <_printf_i+0x194>
 8005036:	4616      	mov	r6, r2
 8005038:	e7bd      	b.n	8004fb6 <_printf_i+0x126>
 800503a:	6833      	ldr	r3, [r6, #0]
 800503c:	6825      	ldr	r5, [r4, #0]
 800503e:	6961      	ldr	r1, [r4, #20]
 8005040:	1d18      	adds	r0, r3, #4
 8005042:	6030      	str	r0, [r6, #0]
 8005044:	062e      	lsls	r6, r5, #24
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	d501      	bpl.n	800504e <_printf_i+0x1be>
 800504a:	6019      	str	r1, [r3, #0]
 800504c:	e002      	b.n	8005054 <_printf_i+0x1c4>
 800504e:	0668      	lsls	r0, r5, #25
 8005050:	d5fb      	bpl.n	800504a <_printf_i+0x1ba>
 8005052:	8019      	strh	r1, [r3, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	6123      	str	r3, [r4, #16]
 8005058:	4616      	mov	r6, r2
 800505a:	e7bc      	b.n	8004fd6 <_printf_i+0x146>
 800505c:	6833      	ldr	r3, [r6, #0]
 800505e:	1d1a      	adds	r2, r3, #4
 8005060:	6032      	str	r2, [r6, #0]
 8005062:	681e      	ldr	r6, [r3, #0]
 8005064:	6862      	ldr	r2, [r4, #4]
 8005066:	2100      	movs	r1, #0
 8005068:	4630      	mov	r0, r6
 800506a:	f7fb f8d1 	bl	8000210 <memchr>
 800506e:	b108      	cbz	r0, 8005074 <_printf_i+0x1e4>
 8005070:	1b80      	subs	r0, r0, r6
 8005072:	6060      	str	r0, [r4, #4]
 8005074:	6863      	ldr	r3, [r4, #4]
 8005076:	6123      	str	r3, [r4, #16]
 8005078:	2300      	movs	r3, #0
 800507a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800507e:	e7aa      	b.n	8004fd6 <_printf_i+0x146>
 8005080:	6923      	ldr	r3, [r4, #16]
 8005082:	4632      	mov	r2, r6
 8005084:	4649      	mov	r1, r9
 8005086:	4640      	mov	r0, r8
 8005088:	47d0      	blx	sl
 800508a:	3001      	adds	r0, #1
 800508c:	d0ad      	beq.n	8004fea <_printf_i+0x15a>
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	079b      	lsls	r3, r3, #30
 8005092:	d413      	bmi.n	80050bc <_printf_i+0x22c>
 8005094:	68e0      	ldr	r0, [r4, #12]
 8005096:	9b03      	ldr	r3, [sp, #12]
 8005098:	4298      	cmp	r0, r3
 800509a:	bfb8      	it	lt
 800509c:	4618      	movlt	r0, r3
 800509e:	e7a6      	b.n	8004fee <_printf_i+0x15e>
 80050a0:	2301      	movs	r3, #1
 80050a2:	4632      	mov	r2, r6
 80050a4:	4649      	mov	r1, r9
 80050a6:	4640      	mov	r0, r8
 80050a8:	47d0      	blx	sl
 80050aa:	3001      	adds	r0, #1
 80050ac:	d09d      	beq.n	8004fea <_printf_i+0x15a>
 80050ae:	3501      	adds	r5, #1
 80050b0:	68e3      	ldr	r3, [r4, #12]
 80050b2:	9903      	ldr	r1, [sp, #12]
 80050b4:	1a5b      	subs	r3, r3, r1
 80050b6:	42ab      	cmp	r3, r5
 80050b8:	dcf2      	bgt.n	80050a0 <_printf_i+0x210>
 80050ba:	e7eb      	b.n	8005094 <_printf_i+0x204>
 80050bc:	2500      	movs	r5, #0
 80050be:	f104 0619 	add.w	r6, r4, #25
 80050c2:	e7f5      	b.n	80050b0 <_printf_i+0x220>
 80050c4:	08005693 	.word	0x08005693
 80050c8:	080056a4 	.word	0x080056a4

080050cc <__sflush_r>:
 80050cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d4:	0716      	lsls	r6, r2, #28
 80050d6:	4605      	mov	r5, r0
 80050d8:	460c      	mov	r4, r1
 80050da:	d454      	bmi.n	8005186 <__sflush_r+0xba>
 80050dc:	684b      	ldr	r3, [r1, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	dc02      	bgt.n	80050e8 <__sflush_r+0x1c>
 80050e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	dd48      	ble.n	800517a <__sflush_r+0xae>
 80050e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050ea:	2e00      	cmp	r6, #0
 80050ec:	d045      	beq.n	800517a <__sflush_r+0xae>
 80050ee:	2300      	movs	r3, #0
 80050f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80050f4:	682f      	ldr	r7, [r5, #0]
 80050f6:	6a21      	ldr	r1, [r4, #32]
 80050f8:	602b      	str	r3, [r5, #0]
 80050fa:	d030      	beq.n	800515e <__sflush_r+0x92>
 80050fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	0759      	lsls	r1, r3, #29
 8005102:	d505      	bpl.n	8005110 <__sflush_r+0x44>
 8005104:	6863      	ldr	r3, [r4, #4]
 8005106:	1ad2      	subs	r2, r2, r3
 8005108:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800510a:	b10b      	cbz	r3, 8005110 <__sflush_r+0x44>
 800510c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800510e:	1ad2      	subs	r2, r2, r3
 8005110:	2300      	movs	r3, #0
 8005112:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005114:	6a21      	ldr	r1, [r4, #32]
 8005116:	4628      	mov	r0, r5
 8005118:	47b0      	blx	r6
 800511a:	1c43      	adds	r3, r0, #1
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	d106      	bne.n	800512e <__sflush_r+0x62>
 8005120:	6829      	ldr	r1, [r5, #0]
 8005122:	291d      	cmp	r1, #29
 8005124:	d82b      	bhi.n	800517e <__sflush_r+0xb2>
 8005126:	4a2a      	ldr	r2, [pc, #168]	@ (80051d0 <__sflush_r+0x104>)
 8005128:	40ca      	lsrs	r2, r1
 800512a:	07d6      	lsls	r6, r2, #31
 800512c:	d527      	bpl.n	800517e <__sflush_r+0xb2>
 800512e:	2200      	movs	r2, #0
 8005130:	6062      	str	r2, [r4, #4]
 8005132:	04d9      	lsls	r1, r3, #19
 8005134:	6922      	ldr	r2, [r4, #16]
 8005136:	6022      	str	r2, [r4, #0]
 8005138:	d504      	bpl.n	8005144 <__sflush_r+0x78>
 800513a:	1c42      	adds	r2, r0, #1
 800513c:	d101      	bne.n	8005142 <__sflush_r+0x76>
 800513e:	682b      	ldr	r3, [r5, #0]
 8005140:	b903      	cbnz	r3, 8005144 <__sflush_r+0x78>
 8005142:	6560      	str	r0, [r4, #84]	@ 0x54
 8005144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005146:	602f      	str	r7, [r5, #0]
 8005148:	b1b9      	cbz	r1, 800517a <__sflush_r+0xae>
 800514a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800514e:	4299      	cmp	r1, r3
 8005150:	d002      	beq.n	8005158 <__sflush_r+0x8c>
 8005152:	4628      	mov	r0, r5
 8005154:	f000 fa24 	bl	80055a0 <_free_r>
 8005158:	2300      	movs	r3, #0
 800515a:	6363      	str	r3, [r4, #52]	@ 0x34
 800515c:	e00d      	b.n	800517a <__sflush_r+0xae>
 800515e:	2301      	movs	r3, #1
 8005160:	4628      	mov	r0, r5
 8005162:	47b0      	blx	r6
 8005164:	4602      	mov	r2, r0
 8005166:	1c50      	adds	r0, r2, #1
 8005168:	d1c9      	bne.n	80050fe <__sflush_r+0x32>
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0c6      	beq.n	80050fe <__sflush_r+0x32>
 8005170:	2b1d      	cmp	r3, #29
 8005172:	d001      	beq.n	8005178 <__sflush_r+0xac>
 8005174:	2b16      	cmp	r3, #22
 8005176:	d11e      	bne.n	80051b6 <__sflush_r+0xea>
 8005178:	602f      	str	r7, [r5, #0]
 800517a:	2000      	movs	r0, #0
 800517c:	e022      	b.n	80051c4 <__sflush_r+0xf8>
 800517e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005182:	b21b      	sxth	r3, r3
 8005184:	e01b      	b.n	80051be <__sflush_r+0xf2>
 8005186:	690f      	ldr	r7, [r1, #16]
 8005188:	2f00      	cmp	r7, #0
 800518a:	d0f6      	beq.n	800517a <__sflush_r+0xae>
 800518c:	0793      	lsls	r3, r2, #30
 800518e:	680e      	ldr	r6, [r1, #0]
 8005190:	bf08      	it	eq
 8005192:	694b      	ldreq	r3, [r1, #20]
 8005194:	600f      	str	r7, [r1, #0]
 8005196:	bf18      	it	ne
 8005198:	2300      	movne	r3, #0
 800519a:	eba6 0807 	sub.w	r8, r6, r7
 800519e:	608b      	str	r3, [r1, #8]
 80051a0:	f1b8 0f00 	cmp.w	r8, #0
 80051a4:	dde9      	ble.n	800517a <__sflush_r+0xae>
 80051a6:	6a21      	ldr	r1, [r4, #32]
 80051a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80051aa:	4643      	mov	r3, r8
 80051ac:	463a      	mov	r2, r7
 80051ae:	4628      	mov	r0, r5
 80051b0:	47b0      	blx	r6
 80051b2:	2800      	cmp	r0, #0
 80051b4:	dc08      	bgt.n	80051c8 <__sflush_r+0xfc>
 80051b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051c8:	4407      	add	r7, r0
 80051ca:	eba8 0800 	sub.w	r8, r8, r0
 80051ce:	e7e7      	b.n	80051a0 <__sflush_r+0xd4>
 80051d0:	20400001 	.word	0x20400001

080051d4 <_fflush_r>:
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	690b      	ldr	r3, [r1, #16]
 80051d8:	4605      	mov	r5, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	b913      	cbnz	r3, 80051e4 <_fflush_r+0x10>
 80051de:	2500      	movs	r5, #0
 80051e0:	4628      	mov	r0, r5
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	b118      	cbz	r0, 80051ee <_fflush_r+0x1a>
 80051e6:	6a03      	ldr	r3, [r0, #32]
 80051e8:	b90b      	cbnz	r3, 80051ee <_fflush_r+0x1a>
 80051ea:	f7ff fb25 	bl	8004838 <__sinit>
 80051ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f3      	beq.n	80051de <_fflush_r+0xa>
 80051f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051f8:	07d0      	lsls	r0, r2, #31
 80051fa:	d404      	bmi.n	8005206 <_fflush_r+0x32>
 80051fc:	0599      	lsls	r1, r3, #22
 80051fe:	d402      	bmi.n	8005206 <_fflush_r+0x32>
 8005200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005202:	f7ff fbf2 	bl	80049ea <__retarget_lock_acquire_recursive>
 8005206:	4628      	mov	r0, r5
 8005208:	4621      	mov	r1, r4
 800520a:	f7ff ff5f 	bl	80050cc <__sflush_r>
 800520e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005210:	07da      	lsls	r2, r3, #31
 8005212:	4605      	mov	r5, r0
 8005214:	d4e4      	bmi.n	80051e0 <_fflush_r+0xc>
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	059b      	lsls	r3, r3, #22
 800521a:	d4e1      	bmi.n	80051e0 <_fflush_r+0xc>
 800521c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800521e:	f7ff fbe5 	bl	80049ec <__retarget_lock_release_recursive>
 8005222:	e7dd      	b.n	80051e0 <_fflush_r+0xc>

08005224 <__malloc_lock>:
 8005224:	4801      	ldr	r0, [pc, #4]	@ (800522c <__malloc_lock+0x8>)
 8005226:	f7ff bbe0 	b.w	80049ea <__retarget_lock_acquire_recursive>
 800522a:	bf00      	nop
 800522c:	200003a0 	.word	0x200003a0

08005230 <__malloc_unlock>:
 8005230:	4801      	ldr	r0, [pc, #4]	@ (8005238 <__malloc_unlock+0x8>)
 8005232:	f7ff bbdb 	b.w	80049ec <__retarget_lock_release_recursive>
 8005236:	bf00      	nop
 8005238:	200003a0 	.word	0x200003a0

0800523c <__sread>:
 800523c:	b510      	push	{r4, lr}
 800523e:	460c      	mov	r4, r1
 8005240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005244:	f000 f956 	bl	80054f4 <_read_r>
 8005248:	2800      	cmp	r0, #0
 800524a:	bfab      	itete	ge
 800524c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800524e:	89a3      	ldrhlt	r3, [r4, #12]
 8005250:	181b      	addge	r3, r3, r0
 8005252:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005256:	bfac      	ite	ge
 8005258:	6563      	strge	r3, [r4, #84]	@ 0x54
 800525a:	81a3      	strhlt	r3, [r4, #12]
 800525c:	bd10      	pop	{r4, pc}

0800525e <__swrite>:
 800525e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005262:	461f      	mov	r7, r3
 8005264:	898b      	ldrh	r3, [r1, #12]
 8005266:	05db      	lsls	r3, r3, #23
 8005268:	4605      	mov	r5, r0
 800526a:	460c      	mov	r4, r1
 800526c:	4616      	mov	r6, r2
 800526e:	d505      	bpl.n	800527c <__swrite+0x1e>
 8005270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005274:	2302      	movs	r3, #2
 8005276:	2200      	movs	r2, #0
 8005278:	f000 f92a 	bl	80054d0 <_lseek_r>
 800527c:	89a3      	ldrh	r3, [r4, #12]
 800527e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005282:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	4632      	mov	r2, r6
 800528a:	463b      	mov	r3, r7
 800528c:	4628      	mov	r0, r5
 800528e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005292:	f000 b951 	b.w	8005538 <_write_r>

08005296 <__sseek>:
 8005296:	b510      	push	{r4, lr}
 8005298:	460c      	mov	r4, r1
 800529a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529e:	f000 f917 	bl	80054d0 <_lseek_r>
 80052a2:	1c43      	adds	r3, r0, #1
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	bf15      	itete	ne
 80052a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052b2:	81a3      	strheq	r3, [r4, #12]
 80052b4:	bf18      	it	ne
 80052b6:	81a3      	strhne	r3, [r4, #12]
 80052b8:	bd10      	pop	{r4, pc}

080052ba <__sclose>:
 80052ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052be:	f000 b94d 	b.w	800555c <_close_r>

080052c2 <__swbuf_r>:
 80052c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c4:	460e      	mov	r6, r1
 80052c6:	4614      	mov	r4, r2
 80052c8:	4605      	mov	r5, r0
 80052ca:	b118      	cbz	r0, 80052d4 <__swbuf_r+0x12>
 80052cc:	6a03      	ldr	r3, [r0, #32]
 80052ce:	b90b      	cbnz	r3, 80052d4 <__swbuf_r+0x12>
 80052d0:	f7ff fab2 	bl	8004838 <__sinit>
 80052d4:	69a3      	ldr	r3, [r4, #24]
 80052d6:	60a3      	str	r3, [r4, #8]
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	071a      	lsls	r2, r3, #28
 80052dc:	d501      	bpl.n	80052e2 <__swbuf_r+0x20>
 80052de:	6923      	ldr	r3, [r4, #16]
 80052e0:	b943      	cbnz	r3, 80052f4 <__swbuf_r+0x32>
 80052e2:	4621      	mov	r1, r4
 80052e4:	4628      	mov	r0, r5
 80052e6:	f000 f82b 	bl	8005340 <__swsetup_r>
 80052ea:	b118      	cbz	r0, 80052f4 <__swbuf_r+0x32>
 80052ec:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80052f0:	4638      	mov	r0, r7
 80052f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	6922      	ldr	r2, [r4, #16]
 80052f8:	1a98      	subs	r0, r3, r2
 80052fa:	6963      	ldr	r3, [r4, #20]
 80052fc:	b2f6      	uxtb	r6, r6
 80052fe:	4283      	cmp	r3, r0
 8005300:	4637      	mov	r7, r6
 8005302:	dc05      	bgt.n	8005310 <__swbuf_r+0x4e>
 8005304:	4621      	mov	r1, r4
 8005306:	4628      	mov	r0, r5
 8005308:	f7ff ff64 	bl	80051d4 <_fflush_r>
 800530c:	2800      	cmp	r0, #0
 800530e:	d1ed      	bne.n	80052ec <__swbuf_r+0x2a>
 8005310:	68a3      	ldr	r3, [r4, #8]
 8005312:	3b01      	subs	r3, #1
 8005314:	60a3      	str	r3, [r4, #8]
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	6022      	str	r2, [r4, #0]
 800531c:	701e      	strb	r6, [r3, #0]
 800531e:	6962      	ldr	r2, [r4, #20]
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	429a      	cmp	r2, r3
 8005324:	d004      	beq.n	8005330 <__swbuf_r+0x6e>
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	07db      	lsls	r3, r3, #31
 800532a:	d5e1      	bpl.n	80052f0 <__swbuf_r+0x2e>
 800532c:	2e0a      	cmp	r6, #10
 800532e:	d1df      	bne.n	80052f0 <__swbuf_r+0x2e>
 8005330:	4621      	mov	r1, r4
 8005332:	4628      	mov	r0, r5
 8005334:	f7ff ff4e 	bl	80051d4 <_fflush_r>
 8005338:	2800      	cmp	r0, #0
 800533a:	d0d9      	beq.n	80052f0 <__swbuf_r+0x2e>
 800533c:	e7d6      	b.n	80052ec <__swbuf_r+0x2a>
	...

08005340 <__swsetup_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4b29      	ldr	r3, [pc, #164]	@ (80053e8 <__swsetup_r+0xa8>)
 8005344:	4605      	mov	r5, r0
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	460c      	mov	r4, r1
 800534a:	b118      	cbz	r0, 8005354 <__swsetup_r+0x14>
 800534c:	6a03      	ldr	r3, [r0, #32]
 800534e:	b90b      	cbnz	r3, 8005354 <__swsetup_r+0x14>
 8005350:	f7ff fa72 	bl	8004838 <__sinit>
 8005354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005358:	0719      	lsls	r1, r3, #28
 800535a:	d422      	bmi.n	80053a2 <__swsetup_r+0x62>
 800535c:	06da      	lsls	r2, r3, #27
 800535e:	d407      	bmi.n	8005370 <__swsetup_r+0x30>
 8005360:	2209      	movs	r2, #9
 8005362:	602a      	str	r2, [r5, #0]
 8005364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005368:	81a3      	strh	r3, [r4, #12]
 800536a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800536e:	e033      	b.n	80053d8 <__swsetup_r+0x98>
 8005370:	0758      	lsls	r0, r3, #29
 8005372:	d512      	bpl.n	800539a <__swsetup_r+0x5a>
 8005374:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005376:	b141      	cbz	r1, 800538a <__swsetup_r+0x4a>
 8005378:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800537c:	4299      	cmp	r1, r3
 800537e:	d002      	beq.n	8005386 <__swsetup_r+0x46>
 8005380:	4628      	mov	r0, r5
 8005382:	f000 f90d 	bl	80055a0 <_free_r>
 8005386:	2300      	movs	r3, #0
 8005388:	6363      	str	r3, [r4, #52]	@ 0x34
 800538a:	89a3      	ldrh	r3, [r4, #12]
 800538c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005390:	81a3      	strh	r3, [r4, #12]
 8005392:	2300      	movs	r3, #0
 8005394:	6063      	str	r3, [r4, #4]
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	f043 0308 	orr.w	r3, r3, #8
 80053a0:	81a3      	strh	r3, [r4, #12]
 80053a2:	6923      	ldr	r3, [r4, #16]
 80053a4:	b94b      	cbnz	r3, 80053ba <__swsetup_r+0x7a>
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053b0:	d003      	beq.n	80053ba <__swsetup_r+0x7a>
 80053b2:	4621      	mov	r1, r4
 80053b4:	4628      	mov	r0, r5
 80053b6:	f000 f83f 	bl	8005438 <__smakebuf_r>
 80053ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053be:	f013 0201 	ands.w	r2, r3, #1
 80053c2:	d00a      	beq.n	80053da <__swsetup_r+0x9a>
 80053c4:	2200      	movs	r2, #0
 80053c6:	60a2      	str	r2, [r4, #8]
 80053c8:	6962      	ldr	r2, [r4, #20]
 80053ca:	4252      	negs	r2, r2
 80053cc:	61a2      	str	r2, [r4, #24]
 80053ce:	6922      	ldr	r2, [r4, #16]
 80053d0:	b942      	cbnz	r2, 80053e4 <__swsetup_r+0xa4>
 80053d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053d6:	d1c5      	bne.n	8005364 <__swsetup_r+0x24>
 80053d8:	bd38      	pop	{r3, r4, r5, pc}
 80053da:	0799      	lsls	r1, r3, #30
 80053dc:	bf58      	it	pl
 80053de:	6962      	ldrpl	r2, [r4, #20]
 80053e0:	60a2      	str	r2, [r4, #8]
 80053e2:	e7f4      	b.n	80053ce <__swsetup_r+0x8e>
 80053e4:	2000      	movs	r0, #0
 80053e6:	e7f7      	b.n	80053d8 <__swsetup_r+0x98>
 80053e8:	20000018 	.word	0x20000018

080053ec <__swhatbuf_r>:
 80053ec:	b570      	push	{r4, r5, r6, lr}
 80053ee:	460c      	mov	r4, r1
 80053f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f4:	2900      	cmp	r1, #0
 80053f6:	b096      	sub	sp, #88	@ 0x58
 80053f8:	4615      	mov	r5, r2
 80053fa:	461e      	mov	r6, r3
 80053fc:	da0d      	bge.n	800541a <__swhatbuf_r+0x2e>
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005404:	f04f 0100 	mov.w	r1, #0
 8005408:	bf14      	ite	ne
 800540a:	2340      	movne	r3, #64	@ 0x40
 800540c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005410:	2000      	movs	r0, #0
 8005412:	6031      	str	r1, [r6, #0]
 8005414:	602b      	str	r3, [r5, #0]
 8005416:	b016      	add	sp, #88	@ 0x58
 8005418:	bd70      	pop	{r4, r5, r6, pc}
 800541a:	466a      	mov	r2, sp
 800541c:	f000 f8ae 	bl	800557c <_fstat_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	dbec      	blt.n	80053fe <__swhatbuf_r+0x12>
 8005424:	9901      	ldr	r1, [sp, #4]
 8005426:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800542a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800542e:	4259      	negs	r1, r3
 8005430:	4159      	adcs	r1, r3
 8005432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005436:	e7eb      	b.n	8005410 <__swhatbuf_r+0x24>

08005438 <__smakebuf_r>:
 8005438:	898b      	ldrh	r3, [r1, #12]
 800543a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800543c:	079d      	lsls	r5, r3, #30
 800543e:	4606      	mov	r6, r0
 8005440:	460c      	mov	r4, r1
 8005442:	d507      	bpl.n	8005454 <__smakebuf_r+0x1c>
 8005444:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	2301      	movs	r3, #1
 800544e:	6163      	str	r3, [r4, #20]
 8005450:	b003      	add	sp, #12
 8005452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005454:	ab01      	add	r3, sp, #4
 8005456:	466a      	mov	r2, sp
 8005458:	f7ff ffc8 	bl	80053ec <__swhatbuf_r>
 800545c:	9f00      	ldr	r7, [sp, #0]
 800545e:	4605      	mov	r5, r0
 8005460:	4639      	mov	r1, r7
 8005462:	4630      	mov	r0, r6
 8005464:	f7ff fc26 	bl	8004cb4 <_malloc_r>
 8005468:	b948      	cbnz	r0, 800547e <__smakebuf_r+0x46>
 800546a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800546e:	059a      	lsls	r2, r3, #22
 8005470:	d4ee      	bmi.n	8005450 <__smakebuf_r+0x18>
 8005472:	f023 0303 	bic.w	r3, r3, #3
 8005476:	f043 0302 	orr.w	r3, r3, #2
 800547a:	81a3      	strh	r3, [r4, #12]
 800547c:	e7e2      	b.n	8005444 <__smakebuf_r+0xc>
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	6020      	str	r0, [r4, #0]
 8005482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005486:	81a3      	strh	r3, [r4, #12]
 8005488:	9b01      	ldr	r3, [sp, #4]
 800548a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800548e:	b15b      	cbz	r3, 80054a8 <__smakebuf_r+0x70>
 8005490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005494:	4630      	mov	r0, r6
 8005496:	f000 f80b 	bl	80054b0 <_isatty_r>
 800549a:	b128      	cbz	r0, 80054a8 <__smakebuf_r+0x70>
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	81a3      	strh	r3, [r4, #12]
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	431d      	orrs	r5, r3
 80054ac:	81a5      	strh	r5, [r4, #12]
 80054ae:	e7cf      	b.n	8005450 <__smakebuf_r+0x18>

080054b0 <_isatty_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d06      	ldr	r5, [pc, #24]	@ (80054cc <_isatty_r+0x1c>)
 80054b4:	2300      	movs	r3, #0
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	602b      	str	r3, [r5, #0]
 80054bc:	f7fb ff17 	bl	80012ee <_isatty>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_isatty_r+0x1a>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_isatty_r+0x1a>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	200003ac 	.word	0x200003ac

080054d0 <_lseek_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4d07      	ldr	r5, [pc, #28]	@ (80054f0 <_lseek_r+0x20>)
 80054d4:	4604      	mov	r4, r0
 80054d6:	4608      	mov	r0, r1
 80054d8:	4611      	mov	r1, r2
 80054da:	2200      	movs	r2, #0
 80054dc:	602a      	str	r2, [r5, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	f7fb ff10 	bl	8001304 <_lseek>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_lseek_r+0x1e>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_lseek_r+0x1e>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	200003ac 	.word	0x200003ac

080054f4 <_read_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4d07      	ldr	r5, [pc, #28]	@ (8005514 <_read_r+0x20>)
 80054f8:	4604      	mov	r4, r0
 80054fa:	4608      	mov	r0, r1
 80054fc:	4611      	mov	r1, r2
 80054fe:	2200      	movs	r2, #0
 8005500:	602a      	str	r2, [r5, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	f7fb fe9e 	bl	8001244 <_read>
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d102      	bne.n	8005512 <_read_r+0x1e>
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	b103      	cbz	r3, 8005512 <_read_r+0x1e>
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	bd38      	pop	{r3, r4, r5, pc}
 8005514:	200003ac 	.word	0x200003ac

08005518 <_sbrk_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4d06      	ldr	r5, [pc, #24]	@ (8005534 <_sbrk_r+0x1c>)
 800551c:	2300      	movs	r3, #0
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fb fefc 	bl	8001320 <_sbrk>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_sbrk_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_sbrk_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	200003ac 	.word	0x200003ac

08005538 <_write_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d07      	ldr	r5, [pc, #28]	@ (8005558 <_write_r+0x20>)
 800553c:	4604      	mov	r4, r0
 800553e:	4608      	mov	r0, r1
 8005540:	4611      	mov	r1, r2
 8005542:	2200      	movs	r2, #0
 8005544:	602a      	str	r2, [r5, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	f7fb fe99 	bl	800127e <_write>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d102      	bne.n	8005556 <_write_r+0x1e>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	b103      	cbz	r3, 8005556 <_write_r+0x1e>
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	bd38      	pop	{r3, r4, r5, pc}
 8005558:	200003ac 	.word	0x200003ac

0800555c <_close_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4d06      	ldr	r5, [pc, #24]	@ (8005578 <_close_r+0x1c>)
 8005560:	2300      	movs	r3, #0
 8005562:	4604      	mov	r4, r0
 8005564:	4608      	mov	r0, r1
 8005566:	602b      	str	r3, [r5, #0]
 8005568:	f7fb fea5 	bl	80012b6 <_close>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_close_r+0x1a>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_close_r+0x1a>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	200003ac 	.word	0x200003ac

0800557c <_fstat_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4d07      	ldr	r5, [pc, #28]	@ (800559c <_fstat_r+0x20>)
 8005580:	2300      	movs	r3, #0
 8005582:	4604      	mov	r4, r0
 8005584:	4608      	mov	r0, r1
 8005586:	4611      	mov	r1, r2
 8005588:	602b      	str	r3, [r5, #0]
 800558a:	f7fb fea0 	bl	80012ce <_fstat>
 800558e:	1c43      	adds	r3, r0, #1
 8005590:	d102      	bne.n	8005598 <_fstat_r+0x1c>
 8005592:	682b      	ldr	r3, [r5, #0]
 8005594:	b103      	cbz	r3, 8005598 <_fstat_r+0x1c>
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	bd38      	pop	{r3, r4, r5, pc}
 800559a:	bf00      	nop
 800559c:	200003ac 	.word	0x200003ac

080055a0 <_free_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4605      	mov	r5, r0
 80055a4:	2900      	cmp	r1, #0
 80055a6:	d041      	beq.n	800562c <_free_r+0x8c>
 80055a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ac:	1f0c      	subs	r4, r1, #4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	bfb8      	it	lt
 80055b2:	18e4      	addlt	r4, r4, r3
 80055b4:	f7ff fe36 	bl	8005224 <__malloc_lock>
 80055b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005630 <_free_r+0x90>)
 80055ba:	6813      	ldr	r3, [r2, #0]
 80055bc:	b933      	cbnz	r3, 80055cc <_free_r+0x2c>
 80055be:	6063      	str	r3, [r4, #4]
 80055c0:	6014      	str	r4, [r2, #0]
 80055c2:	4628      	mov	r0, r5
 80055c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055c8:	f7ff be32 	b.w	8005230 <__malloc_unlock>
 80055cc:	42a3      	cmp	r3, r4
 80055ce:	d908      	bls.n	80055e2 <_free_r+0x42>
 80055d0:	6820      	ldr	r0, [r4, #0]
 80055d2:	1821      	adds	r1, r4, r0
 80055d4:	428b      	cmp	r3, r1
 80055d6:	bf01      	itttt	eq
 80055d8:	6819      	ldreq	r1, [r3, #0]
 80055da:	685b      	ldreq	r3, [r3, #4]
 80055dc:	1809      	addeq	r1, r1, r0
 80055de:	6021      	streq	r1, [r4, #0]
 80055e0:	e7ed      	b.n	80055be <_free_r+0x1e>
 80055e2:	461a      	mov	r2, r3
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	b10b      	cbz	r3, 80055ec <_free_r+0x4c>
 80055e8:	42a3      	cmp	r3, r4
 80055ea:	d9fa      	bls.n	80055e2 <_free_r+0x42>
 80055ec:	6811      	ldr	r1, [r2, #0]
 80055ee:	1850      	adds	r0, r2, r1
 80055f0:	42a0      	cmp	r0, r4
 80055f2:	d10b      	bne.n	800560c <_free_r+0x6c>
 80055f4:	6820      	ldr	r0, [r4, #0]
 80055f6:	4401      	add	r1, r0
 80055f8:	1850      	adds	r0, r2, r1
 80055fa:	4283      	cmp	r3, r0
 80055fc:	6011      	str	r1, [r2, #0]
 80055fe:	d1e0      	bne.n	80055c2 <_free_r+0x22>
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	6053      	str	r3, [r2, #4]
 8005606:	4408      	add	r0, r1
 8005608:	6010      	str	r0, [r2, #0]
 800560a:	e7da      	b.n	80055c2 <_free_r+0x22>
 800560c:	d902      	bls.n	8005614 <_free_r+0x74>
 800560e:	230c      	movs	r3, #12
 8005610:	602b      	str	r3, [r5, #0]
 8005612:	e7d6      	b.n	80055c2 <_free_r+0x22>
 8005614:	6820      	ldr	r0, [r4, #0]
 8005616:	1821      	adds	r1, r4, r0
 8005618:	428b      	cmp	r3, r1
 800561a:	bf04      	itt	eq
 800561c:	6819      	ldreq	r1, [r3, #0]
 800561e:	685b      	ldreq	r3, [r3, #4]
 8005620:	6063      	str	r3, [r4, #4]
 8005622:	bf04      	itt	eq
 8005624:	1809      	addeq	r1, r1, r0
 8005626:	6021      	streq	r1, [r4, #0]
 8005628:	6054      	str	r4, [r2, #4]
 800562a:	e7ca      	b.n	80055c2 <_free_r+0x22>
 800562c:	bd38      	pop	{r3, r4, r5, pc}
 800562e:	bf00      	nop
 8005630:	200003a8 	.word	0x200003a8

08005634 <_init>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	bf00      	nop
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr

08005640 <_fini>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	bf00      	nop
 8005644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005646:	bc08      	pop	{r3}
 8005648:	469e      	mov	lr, r3
 800564a:	4770      	bx	lr
